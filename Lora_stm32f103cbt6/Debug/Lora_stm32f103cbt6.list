
Lora_stm32f103cbt6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000484c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000033c  08004958  08004958  00005958  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c94  08004c94  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004c94  08004c94  00006068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004c94  08004c94  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c94  08004c94  00005c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c98  08004c98  00005c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004c9c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000068  08004d04  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08004d04  000062e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007bd6  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e7f  00000000  00000000  0000dc67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000830  00000000  00000000  0000fae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000607  00000000  00000000  00010318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185a0  00000000  00000000  0001091f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a65d  00000000  00000000  00028ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083f9e  00000000  00000000  0003351c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b74ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029b8  00000000  00000000  000b7500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000b9eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08004940 	.word	0x08004940

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08004940 	.word	0x08004940

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2iz>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f0:	d215      	bcs.n	800091e <__aeabi_d2iz+0x36>
 80008f2:	d511      	bpl.n	8000918 <__aeabi_d2iz+0x30>
 80008f4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d912      	bls.n	8000924 <__aeabi_d2iz+0x3c>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	bf18      	it	ne
 8000914:	4240      	negne	r0, r0
 8000916:	4770      	bx	lr
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	4770      	bx	lr
 800091e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000922:	d105      	bne.n	8000930 <__aeabi_d2iz+0x48>
 8000924:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000928:	bf08      	it	eq
 800092a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800092e:	4770      	bx	lr
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000942:	2101      	movs	r1, #1
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f000 f9fe 	bl	8000d46 <LoRa_read>
 800094a:	4603      	mov	r3, r0
 800094c:	73bb      	strb	r3, [r7, #14]
	data = read;
 800094e:	7bbb      	ldrb	r3, [r7, #14]
 8000950:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d107      	bne.n	8000968 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000958:	7bbb      	ldrb	r3, [r7, #14]
 800095a:	f023 0307 	bic.w	r3, r3, #7
 800095e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
 8000966:	e03e      	b.n	80009e6 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d10c      	bne.n	8000988 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 800096e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000972:	f023 0307 	bic.w	r3, r3, #7
 8000976:	b25b      	sxtb	r3, r3
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	b25b      	sxtb	r3, r3
 800097e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2201      	movs	r2, #1
 8000984:	61da      	str	r2, [r3, #28]
 8000986:	e02e      	b.n	80009e6 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	2b03      	cmp	r3, #3
 800098c:	d10c      	bne.n	80009a8 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 800098e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000992:	f023 0307 	bic.w	r3, r3, #7
 8000996:	b25b      	sxtb	r3, r3
 8000998:	f043 0303 	orr.w	r3, r3, #3
 800099c:	b25b      	sxtb	r3, r3
 800099e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2203      	movs	r2, #3
 80009a4:	61da      	str	r2, [r3, #28]
 80009a6:	e01e      	b.n	80009e6 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	2b05      	cmp	r3, #5
 80009ac:	d10c      	bne.n	80009c8 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80009ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80009b2:	f023 0307 	bic.w	r3, r3, #7
 80009b6:	b25b      	sxtb	r3, r3
 80009b8:	f043 0305 	orr.w	r3, r3, #5
 80009bc:	b25b      	sxtb	r3, r3
 80009be:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2205      	movs	r2, #5
 80009c4:	61da      	str	r2, [r3, #28]
 80009c6:	e00e      	b.n	80009e6 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	2b06      	cmp	r3, #6
 80009cc:	d10b      	bne.n	80009e6 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80009ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80009d2:	f023 0307 	bic.w	r3, r3, #7
 80009d6:	b25b      	sxtb	r3, r3
 80009d8:	f043 0306 	orr.w	r3, r3, #6
 80009dc:	b25b      	sxtb	r3, r3
 80009de:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2206      	movs	r2, #6
 80009e4:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
 80009e8:	461a      	mov	r2, r3
 80009ea:	2101      	movs	r1, #1
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f000 f9c4 	bl	8000d7a <LoRa_write>
	//HAL_Delay(10);
}
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b084      	sub	sp, #16
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	60f8      	str	r0, [r7, #12]
 8000a02:	60b9      	str	r1, [r7, #8]
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	4613      	mov	r3, r2
 8000a08:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	6818      	ldr	r0, [r3, #0]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	889b      	ldrh	r3, [r3, #4]
 8000a12:	2200      	movs	r2, #0
 8000a14:	4619      	mov	r1, r3
 8000a16:	f001 fbc3 	bl	80021a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	6998      	ldr	r0, [r3, #24]
 8000a1e:	88fa      	ldrh	r2, [r7, #6]
 8000a20:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000a24:	68b9      	ldr	r1, [r7, #8]
 8000a26:	f002 f871 	bl	8002b0c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000a2a:	bf00      	nop
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f002 fc71 	bl	8003318 <HAL_SPI_GetState>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d1f7      	bne.n	8000a2c <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	6998      	ldr	r0, [r3, #24]
 8000a40:	8b3a      	ldrh	r2, [r7, #24]
 8000a42:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000a46:	6839      	ldr	r1, [r7, #0]
 8000a48:	f002 f9a4 	bl	8002d94 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000a4c:	bf00      	nop
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f002 fc60 	bl	8003318 <HAL_SPI_GetState>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d1f7      	bne.n	8000a4e <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	6818      	ldr	r0, [r3, #0]
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	889b      	ldrh	r3, [r3, #4]
 8000a66:	2201      	movs	r2, #1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f001 fb99 	bl	80021a0 <HAL_GPIO_WritePin>
}
 8000a6e:	bf00      	nop
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b084      	sub	sp, #16
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	60f8      	str	r0, [r7, #12]
 8000a7e:	60b9      	str	r1, [r7, #8]
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	4613      	mov	r3, r2
 8000a84:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	6818      	ldr	r0, [r3, #0]
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	889b      	ldrh	r3, [r3, #4]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	4619      	mov	r1, r3
 8000a92:	f001 fb85 	bl	80021a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	6998      	ldr	r0, [r3, #24]
 8000a9a:	88fa      	ldrh	r2, [r7, #6]
 8000a9c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000aa0:	68b9      	ldr	r1, [r7, #8]
 8000aa2:	f002 f833 	bl	8002b0c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000aa6:	bf00      	nop
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f002 fc33 	bl	8003318 <HAL_SPI_GetState>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d1f7      	bne.n	8000aa8 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	6998      	ldr	r0, [r3, #24]
 8000abc:	8b3a      	ldrh	r2, [r7, #24]
 8000abe:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ac2:	6839      	ldr	r1, [r7, #0]
 8000ac4:	f002 f822 	bl	8002b0c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000ac8:	bf00      	nop
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f002 fc22 	bl	8003318 <HAL_SPI_GetState>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d1f7      	bne.n	8000aca <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	6818      	ldr	r0, [r3, #0]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	889b      	ldrh	r3, [r3, #4]
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f001 fb5b 	bl	80021a0 <HAL_GPIO_WritePin>
}
 8000aea:	bf00      	nop
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b084      	sub	sp, #16
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
 8000afa:	460b      	mov	r3, r1
 8000afc:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000afe:	2126      	movs	r1, #38	@ 0x26
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f000 f920 	bl	8000d46 <LoRa_read>
 8000b06:	4603      	mov	r3, r0
 8000b08:	73bb      	strb	r3, [r7, #14]

	if(value)
 8000b0a:	78fb      	ldrb	r3, [r7, #3]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d004      	beq.n	8000b1a <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000b10:	7bbb      	ldrb	r3, [r7, #14]
 8000b12:	f043 0308 	orr.w	r3, r3, #8
 8000b16:	73fb      	strb	r3, [r7, #15]
 8000b18:	e003      	b.n	8000b22 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000b1a:	7bbb      	ldrb	r3, [r7, #14]
 8000b1c:	f023 0308 	bic.w	r3, r3, #8
 8000b20:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	461a      	mov	r2, r3
 8000b26:	2126      	movs	r1, #38	@ 0x26
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f000 f926 	bl	8000d7a <LoRa_write>
	HAL_Delay(10);
 8000b2e:	200a      	movs	r0, #10
 8000b30:	f001 f832 	bl	8001b98 <HAL_Delay>
}
 8000b34:	bf00      	nop
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b096      	sub	sp, #88	@ 0x58
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8000b44:	4a17      	ldr	r2, [pc, #92]	@ (8000ba4 <LoRa_setAutoLDO+0x68>)
 8000b46:	f107 0308 	add.w	r3, r7, #8
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	2250      	movs	r2, #80	@ 0x50
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f003 f82f 	bl	8003bb2 <memcpy>

	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	4093      	lsls	r3, r2
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fc45 	bl	80003f0 <__aeabi_i2d>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	3358      	adds	r3, #88	@ 0x58
 8000b70:	443b      	add	r3, r7
 8000b72:	3b50      	subs	r3, #80	@ 0x50
 8000b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b78:	f7ff fdce 	bl	8000718 <__aeabi_ddiv>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	460b      	mov	r3, r1
 8000b80:	4610      	mov	r0, r2
 8000b82:	4619      	mov	r1, r3
 8000b84:	f7ff feb0 	bl	80008e8 <__aeabi_d2iz>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b10      	cmp	r3, #16
 8000b8c:	bfcc      	ite	gt
 8000b8e:	2301      	movgt	r3, #1
 8000b90:	2300      	movle	r3, #0
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	4619      	mov	r1, r3
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff ffab 	bl	8000af2 <LoRa_setLowDaraRateOptimization>
}
 8000b9c:	bf00      	nop
 8000b9e:	3758      	adds	r7, #88	@ 0x58
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	08004958 	.word	0x08004958

08000ba8 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	04db      	lsls	r3, r3, #19
 8000bb6:	115b      	asrs	r3, r3, #5
 8000bb8:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	0c1b      	lsrs	r3, r3, #16
 8000bbe:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8000bc0:	7afb      	ldrb	r3, [r7, #11]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	2106      	movs	r1, #6
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f000 f8d7 	bl	8000d7a <LoRa_write>
	HAL_Delay(5);
 8000bcc:	2005      	movs	r0, #5
 8000bce:	f000 ffe3 	bl	8001b98 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	0a1b      	lsrs	r3, r3, #8
 8000bd6:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000bd8:	7afb      	ldrb	r3, [r7, #11]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	2107      	movs	r1, #7
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f000 f8cb 	bl	8000d7a <LoRa_write>
	HAL_Delay(5);
 8000be4:	2005      	movs	r0, #5
 8000be6:	f000 ffd7 	bl	8001b98 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000bee:	7afb      	ldrb	r3, [r7, #11]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	2108      	movs	r1, #8
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f000 f8c0 	bl	8000d7a <LoRa_write>
	HAL_Delay(5);
 8000bfa:	2005      	movs	r0, #5
 8000bfc:	f000 ffcc 	bl	8001b98 <HAL_Delay>
}
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	2b0c      	cmp	r3, #12
 8000c16:	dd01      	ble.n	8000c1c <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000c18:	230c      	movs	r3, #12
 8000c1a:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	2b06      	cmp	r3, #6
 8000c20:	dc01      	bgt.n	8000c26 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8000c22:	2307      	movs	r3, #7
 8000c24:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000c26:	211e      	movs	r1, #30
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f000 f88c 	bl	8000d46 <LoRa_read>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000c32:	200a      	movs	r0, #10
 8000c34:	f000 ffb0 	bl	8001b98 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	011b      	lsls	r3, r3, #4
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
 8000c42:	f003 030f 	and.w	r3, r3, #15
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	4413      	add	r3, r2
 8000c4a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000c4c:	7bbb      	ldrb	r3, [r7, #14]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	211e      	movs	r1, #30
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f000 f891 	bl	8000d7a <LoRa_write>
	HAL_Delay(10);
 8000c58:	200a      	movs	r0, #10
 8000c5a:	f000 ff9d 	bl	8001b98 <HAL_Delay>

	LoRa_setAutoLDO(_LoRa);
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff ff6c 	bl	8000b3c <LoRa_setAutoLDO>
}
 8000c64:	bf00      	nop
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	460b      	mov	r3, r1
 8000c76:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8000c78:	78fb      	ldrb	r3, [r7, #3]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	2109      	movs	r1, #9
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f000 f87b 	bl	8000d7a <LoRa_write>
	HAL_Delay(10);
 8000c84:	200a      	movs	r0, #10
 8000c86:	f000 ff87 	bl	8001b98 <HAL_Delay>
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8000ca4:	78fb      	ldrb	r3, [r7, #3]
 8000ca6:	2b2c      	cmp	r3, #44	@ 0x2c
 8000ca8:	d801      	bhi.n	8000cae <LoRa_setOCP+0x1a>
		current = 45;
 8000caa:	232d      	movs	r3, #45	@ 0x2d
 8000cac:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8000cae:	78fb      	ldrb	r3, [r7, #3]
 8000cb0:	2bf0      	cmp	r3, #240	@ 0xf0
 8000cb2:	d901      	bls.n	8000cb8 <LoRa_setOCP+0x24>
		current = 240;
 8000cb4:	23f0      	movs	r3, #240	@ 0xf0
 8000cb6:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8000cb8:	78fb      	ldrb	r3, [r7, #3]
 8000cba:	2b78      	cmp	r3, #120	@ 0x78
 8000cbc:	d809      	bhi.n	8000cd2 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8000cbe:	78fb      	ldrb	r3, [r7, #3]
 8000cc0:	3b2d      	subs	r3, #45	@ 0x2d
 8000cc2:	4a12      	ldr	r2, [pc, #72]	@ (8000d0c <LoRa_setOCP+0x78>)
 8000cc4:	fb82 1203 	smull	r1, r2, r2, r3
 8000cc8:	1052      	asrs	r2, r2, #1
 8000cca:	17db      	asrs	r3, r3, #31
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	73fb      	strb	r3, [r7, #15]
 8000cd0:	e00b      	b.n	8000cea <LoRa_setOCP+0x56>
	else if(current <= 240)
 8000cd2:	78fb      	ldrb	r3, [r7, #3]
 8000cd4:	2bf0      	cmp	r3, #240	@ 0xf0
 8000cd6:	d808      	bhi.n	8000cea <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8000cd8:	78fb      	ldrb	r3, [r7, #3]
 8000cda:	331e      	adds	r3, #30
 8000cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8000d0c <LoRa_setOCP+0x78>)
 8000cde:	fb82 1203 	smull	r1, r2, r2, r3
 8000ce2:	1092      	asrs	r2, r2, #2
 8000ce4:	17db      	asrs	r3, r3, #31
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	3320      	adds	r3, #32
 8000cee:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	210b      	movs	r1, #11
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f000 f83f 	bl	8000d7a <LoRa_write>
	HAL_Delay(10);
 8000cfc:	200a      	movs	r0, #10
 8000cfe:	f000 ff4b 	bl	8001b98 <HAL_Delay>
}
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	66666667 	.word	0x66666667

08000d10 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000d18:	211e      	movs	r1, #30
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f000 f813 	bl	8000d46 <LoRa_read>
 8000d20:	4603      	mov	r3, r0
 8000d22:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	f043 0307 	orr.w	r3, r3, #7
 8000d2a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000d2c:	7bbb      	ldrb	r3, [r7, #14]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	211e      	movs	r1, #30
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f000 f821 	bl	8000d7a <LoRa_write>
	HAL_Delay(10);
 8000d38:	200a      	movs	r0, #10
 8000d3a:	f000 ff2d 	bl	8001b98 <HAL_Delay>
}
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b086      	sub	sp, #24
 8000d4a:	af02      	add	r7, sp, #8
 8000d4c:	6078      	str	r0, [r7, #4]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000d52:	78fb      	ldrb	r3, [r7, #3]
 8000d54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000d5c:	f107 030f 	add.w	r3, r7, #15
 8000d60:	f107 010e 	add.w	r1, r7, #14
 8000d64:	2201      	movs	r2, #1
 8000d66:	9200      	str	r2, [sp, #0]
 8000d68:	2201      	movs	r2, #1
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff fe45 	bl	80009fa <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b086      	sub	sp, #24
 8000d7e:	af02      	add	r7, sp, #8
 8000d80:	6078      	str	r0, [r7, #4]
 8000d82:	460b      	mov	r3, r1
 8000d84:	70fb      	strb	r3, [r7, #3]
 8000d86:	4613      	mov	r3, r2
 8000d88:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8000d8a:	78fb      	ldrb	r3, [r7, #3]
 8000d8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	73bb      	strb	r3, [r7, #14]
	data = value;
 8000d94:	78bb      	ldrb	r3, [r7, #2]
 8000d96:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8000d98:	f107 030f 	add.w	r3, r7, #15
 8000d9c:	f107 010e 	add.w	r1, r7, #14
 8000da0:	2201      	movs	r2, #1
 8000da2:	9200      	str	r2, [sp, #0]
 8000da4:	2201      	movs	r2, #1
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff fe65 	bl	8000a76 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000dac:	bf00      	nop
 8000dae:	3710      	adds	r7, #16
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	607a      	str	r2, [r7, #4]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	72fb      	strb	r3, [r7, #11]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8000dc8:	7afb      	ldrb	r3, [r7, #11]
 8000dca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	6818      	ldr	r0, [r3, #0]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	889b      	ldrh	r3, [r3, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f001 f9df 	bl	80021a0 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	6998      	ldr	r0, [r3, #24]
 8000de6:	f107 0117 	add.w	r1, r7, #23
 8000dea:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000dee:	2201      	movs	r2, #1
 8000df0:	f001 fe8c 	bl	8002b0c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000df4:	bf00      	nop
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f002 fa8c 	bl	8003318 <HAL_SPI_GetState>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d1f7      	bne.n	8000df6 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	6998      	ldr	r0, [r3, #24]
 8000e0a:	7abb      	ldrb	r3, [r7, #10]
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	f001 fe7a 	bl	8002b0c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000e18:	bf00      	nop
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f002 fa7a 	bl	8003318 <HAL_SPI_GetState>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d1f7      	bne.n	8000e1a <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	6818      	ldr	r0, [r3, #0]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	889b      	ldrh	r3, [r3, #4]
 8000e32:	2201      	movs	r2, #1
 8000e34:	4619      	mov	r1, r3
 8000e36:	f001 f9b3 	bl	80021a0 <HAL_GPIO_WritePin>
}
 8000e3a:	bf00      	nop
 8000e3c:	3718      	adds	r7, #24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]

	return 1;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr

08000e56 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b086      	sub	sp, #24
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	4611      	mov	r1, r2
 8000e62:	461a      	mov	r2, r3
 8000e64:	460b      	mov	r3, r1
 8000e66:	71fb      	strb	r3, [r7, #7]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	69db      	ldr	r3, [r3, #28]
 8000e70:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000e72:	2101      	movs	r1, #1
 8000e74:	68f8      	ldr	r0, [r7, #12]
 8000e76:	f7ff fd5f 	bl	8000938 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8000e7a:	210e      	movs	r1, #14
 8000e7c:	68f8      	ldr	r0, [r7, #12]
 8000e7e:	f7ff ff62 	bl	8000d46 <LoRa_read>
 8000e82:	4603      	mov	r3, r0
 8000e84:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000e86:	7cfb      	ldrb	r3, [r7, #19]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	210d      	movs	r1, #13
 8000e8c:	68f8      	ldr	r0, [r7, #12]
 8000e8e:	f7ff ff74 	bl	8000d7a <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	461a      	mov	r2, r3
 8000e96:	2122      	movs	r1, #34	@ 0x22
 8000e98:	68f8      	ldr	r0, [r7, #12]
 8000e9a:	f7ff ff6e 	bl	8000d7a <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	68ba      	ldr	r2, [r7, #8]
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	68f8      	ldr	r0, [r7, #12]
 8000ea6:	f7ff ff85 	bl	8000db4 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8000eaa:	2103      	movs	r1, #3
 8000eac:	68f8      	ldr	r0, [r7, #12]
 8000eae:	f7ff fd43 	bl	8000938 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000eb2:	2112      	movs	r1, #18
 8000eb4:	68f8      	ldr	r0, [r7, #12]
 8000eb6:	f7ff ff46 	bl	8000d46 <LoRa_read>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8000ebe:	7cfb      	ldrb	r3, [r7, #19]
 8000ec0:	f003 0308 	and.w	r3, r3, #8
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d00a      	beq.n	8000ede <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000ec8:	22ff      	movs	r2, #255	@ 0xff
 8000eca:	2112      	movs	r1, #18
 8000ecc:	68f8      	ldr	r0, [r7, #12]
 8000ece:	f7ff ff54 	bl	8000d7a <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8000ed2:	6979      	ldr	r1, [r7, #20]
 8000ed4:	68f8      	ldr	r0, [r7, #12]
 8000ed6:	f7ff fd2f 	bl	8000938 <LoRa_gotoMode>
			return 1;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e00f      	b.n	8000efe <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8000ede:	88bb      	ldrh	r3, [r7, #4]
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	80bb      	strh	r3, [r7, #4]
 8000ee4:	88bb      	ldrh	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d105      	bne.n	8000ef6 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8000eea:	6979      	ldr	r1, [r7, #20]
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f7ff fd23 	bl	8000938 <LoRa_gotoMode>
				return 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e003      	b.n	8000efe <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f000 fe4e 	bl	8001b98 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000efc:	e7d9      	b.n	8000eb2 <LoRa_transmit+0x5c>
	}
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000f0e:	2105      	movs	r1, #5
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff fd11 	bl	8000938 <LoRa_gotoMode>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000f1e:	b590      	push	{r4, r7, lr}
 8000f20:	b089      	sub	sp, #36	@ 0x24
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	60f8      	str	r0, [r7, #12]
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000f30:	2300      	movs	r3, #0
 8000f32:	61bb      	str	r3, [r7, #24]
 8000f34:	e007      	b.n	8000f46 <LoRa_receive+0x28>
		data[i]=0;
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	68ba      	ldr	r2, [r7, #8]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	3301      	adds	r3, #1
 8000f44:	61bb      	str	r3, [r7, #24]
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	dbf3      	blt.n	8000f36 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000f4e:	2101      	movs	r1, #1
 8000f50:	68f8      	ldr	r0, [r7, #12]
 8000f52:	f7ff fcf1 	bl	8000938 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000f56:	2112      	movs	r1, #18
 8000f58:	68f8      	ldr	r0, [r7, #12]
 8000f5a:	f7ff fef4 	bl	8000d46 <LoRa_read>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8000f62:	7cfb      	ldrb	r3, [r7, #19]
 8000f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d02f      	beq.n	8000fcc <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000f6c:	22ff      	movs	r2, #255	@ 0xff
 8000f6e:	2112      	movs	r1, #18
 8000f70:	68f8      	ldr	r0, [r7, #12]
 8000f72:	f7ff ff02 	bl	8000d7a <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000f76:	2113      	movs	r1, #19
 8000f78:	68f8      	ldr	r0, [r7, #12]
 8000f7a:	f7ff fee4 	bl	8000d46 <LoRa_read>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000f82:	2110      	movs	r1, #16
 8000f84:	68f8      	ldr	r0, [r7, #12]
 8000f86:	f7ff fede 	bl	8000d46 <LoRa_read>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000f8e:	7cfb      	ldrb	r3, [r7, #19]
 8000f90:	461a      	mov	r2, r3
 8000f92:	210d      	movs	r1, #13
 8000f94:	68f8      	ldr	r0, [r7, #12]
 8000f96:	f7ff fef0 	bl	8000d7a <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000f9a:	7cba      	ldrb	r2, [r7, #18]
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	bf28      	it	cs
 8000fa2:	4613      	movcs	r3, r2
 8000fa4:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	e00b      	b.n	8000fc4 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	18d4      	adds	r4, r2, r3
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	68f8      	ldr	r0, [r7, #12]
 8000fb6:	f7ff fec6 	bl	8000d46 <LoRa_read>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	7ffb      	ldrb	r3, [r7, #31]
 8000fc6:	697a      	ldr	r2, [r7, #20]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	dbef      	blt.n	8000fac <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000fcc:	2105      	movs	r1, #5
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f7ff fcb2 	bl	8000938 <LoRa_gotoMode>
    return min;
 8000fd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3724      	adds	r7, #36	@ 0x24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd90      	pop	{r4, r7, pc}

08000fde <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b084      	sub	sp, #16
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff ff2b 	bl	8000e42 <LoRa_isvalid>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f000 8096 	beq.w	8001120 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff fc9e 	bl	8000938 <LoRa_gotoMode>
			HAL_Delay(10);
 8000ffc:	200a      	movs	r0, #10
 8000ffe:	f000 fdcb 	bl	8001b98 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8001002:	2101      	movs	r1, #1
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff fe9e 	bl	8000d46 <LoRa_read>
 800100a:	4603      	mov	r3, r0
 800100c:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 800100e:	200a      	movs	r0, #10
 8001010:	f000 fdc2 	bl	8001b98 <HAL_Delay>
			data = read | 0x80;
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800101a:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 800101c:	7bbb      	ldrb	r3, [r7, #14]
 800101e:	461a      	mov	r2, r3
 8001020:	2101      	movs	r1, #1
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff fea9 	bl	8000d7a <LoRa_write>
			HAL_Delay(100);
 8001028:	2064      	movs	r0, #100	@ 0x64
 800102a:	f000 fdb5 	bl	8001b98 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6a1b      	ldr	r3, [r3, #32]
 8001032:	4619      	mov	r1, r3
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff fdb7 	bl	8000ba8 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001040:	4619      	mov	r1, r3
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff fe12 	bl	8000c6c <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800104e:	4619      	mov	r1, r3
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff fe1f 	bl	8000c94 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8001056:	2223      	movs	r2, #35	@ 0x23
 8001058:	210c      	movs	r1, #12
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff fe8d 	bl	8000d7a <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff fe55 	bl	8000d10 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800106c:	4619      	mov	r1, r3
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff fdca 	bl	8000c08 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001074:	22ff      	movs	r2, #255	@ 0xff
 8001076:	211f      	movs	r1, #31
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff fe7e 	bl	8000d7a <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001088:	011b      	lsls	r3, r3, #4
 800108a:	b2da      	uxtb	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	b2db      	uxtb	r3, r3
 8001096:	4413      	add	r3, r2
 8001098:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 800109a:	7bbb      	ldrb	r3, [r7, #14]
 800109c:	461a      	mov	r2, r3
 800109e:	211d      	movs	r1, #29
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff fe6a 	bl	8000d7a <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff fd48 	bl	8000b3c <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010b0:	0a1b      	lsrs	r3, r3, #8
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	461a      	mov	r2, r3
 80010b8:	2120      	movs	r1, #32
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff fe5d 	bl	8000d7a <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	461a      	mov	r2, r3
 80010c8:	2121      	movs	r1, #33	@ 0x21
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff fe55 	bl	8000d7a <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 80010d0:	2140      	movs	r1, #64	@ 0x40
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff fe37 	bl	8000d46 <LoRa_read>
 80010d8:	4603      	mov	r3, r0
 80010da:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 80010e2:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 80010e4:	7bbb      	ldrb	r3, [r7, #14]
 80010e6:	461a      	mov	r2, r3
 80010e8:	2140      	movs	r1, #64	@ 0x40
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff fe45 	bl	8000d7a <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 80010f0:	2101      	movs	r1, #1
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff fc20 	bl	8000938 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2201      	movs	r2, #1
 80010fc:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 80010fe:	200a      	movs	r0, #10
 8001100:	f000 fd4a 	bl	8001b98 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8001104:	2142      	movs	r1, #66	@ 0x42
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff fe1d 	bl	8000d46 <LoRa_read>
 800110c:	4603      	mov	r3, r0
 800110e:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	2b12      	cmp	r3, #18
 8001114:	d101      	bne.n	800111a <LoRa_init+0x13c>
				return LORA_OK;
 8001116:	23c8      	movs	r3, #200	@ 0xc8
 8001118:	e004      	b.n	8001124 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 800111a:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 800111e:	e001      	b.n	8001124 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8001120:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <send_ack_RX>:
	}

}


void send_ack_RX(bool isAck) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b094      	sub	sp, #80	@ 0x50
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
	// Debug message via USB
	char ackinfo[64];
	snprintf(ackinfo, sizeof(ackinfo), "ACK_INFO: %s\r\n", isAck ? "true" : "false");
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <send_ack_RX+0x14>
 800113c:	4b0d      	ldr	r3, [pc, #52]	@ (8001174 <send_ack_RX+0x48>)
 800113e:	e000      	b.n	8001142 <send_ack_RX+0x16>
 8001140:	4b0d      	ldr	r3, [pc, #52]	@ (8001178 <send_ack_RX+0x4c>)
 8001142:	f107 0010 	add.w	r0, r7, #16
 8001146:	4a0d      	ldr	r2, [pc, #52]	@ (800117c <send_ack_RX+0x50>)
 8001148:	2140      	movs	r1, #64	@ 0x40
 800114a:	f002 fba9 	bl	80038a0 <sniprintf>
	DEBUG_PRINT(ackinfo);
 800114e:	f107 0310 	add.w	r3, r7, #16
 8001152:	4618      	mov	r0, r3
 8001154:	f002 fb34 	bl	80037c0 <iprintf>

	// Send 1-byte boolean value over LoRa
	uint8_t response = isAck ? 1 : 0;
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	73fb      	strb	r3, [r7, #15]
	LoRa_transmit(&myLoRa, &response, 1, 1000);
 800115c:	f107 010f 	add.w	r1, r7, #15
 8001160:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001164:	2201      	movs	r2, #1
 8001166:	4806      	ldr	r0, [pc, #24]	@ (8001180 <send_ack_RX+0x54>)
 8001168:	f7ff fe75 	bl	8000e56 <LoRa_transmit>
}
 800116c:	bf00      	nop
 800116e:	3750      	adds	r7, #80	@ 0x50
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	08004a38 	.word	0x08004a38
 8001178:	08004a40 	.word	0x08004a40
 800117c:	08004aa4 	.word	0x08004aa4
 8001180:	20000164 	.word	0x20000164

08001184 <receiveAndsendACK_RX>:


uint8_t receiveAndsendACK_RX(LoRa *_LoRa) {
 8001184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001188:	f2ad 5d34 	subw	sp, sp, #1332	@ 0x534
 800118c:	af00      	add	r7, sp, #0
 800118e:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8001192:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 8001196:	6018      	str	r0, [r3, #0]

	uint8_t rxSize = LoRa_receive(&myLoRa, loraRxBuffer,sizeof(loraRxBuffer));
 8001198:	2280      	movs	r2, #128	@ 0x80
 800119a:	496a      	ldr	r1, [pc, #424]	@ (8001344 <receiveAndsendACK_RX+0x1c0>)
 800119c:	486a      	ldr	r0, [pc, #424]	@ (8001348 <receiveAndsendACK_RX+0x1c4>)
 800119e:	f7ff febe 	bl	8000f1e <LoRa_receive>
 80011a2:	4603      	mov	r3, r0
 80011a4:	f887 352b 	strb.w	r3, [r7, #1323]	@ 0x52b
	if (rxSize > 0) {
 80011a8:	f897 352b 	ldrb.w	r3, [r7, #1323]	@ 0x52b
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f000 80c1 	beq.w	8001334 <receiveAndsendACK_RX+0x1b0>
 80011b2:	466b      	mov	r3, sp
 80011b4:	461e      	mov	r6, r3
	uint8_t dataLength = rxSize - 10;
 80011b6:	f897 352b 	ldrb.w	r3, [r7, #1323]	@ 0x52b
 80011ba:	3b0a      	subs	r3, #10
 80011bc:	f887 352a 	strb.w	r3, [r7, #1322]	@ 0x52a
	if (dataLength <= 0) {
 80011c0:	f897 352a 	ldrb.w	r3, [r7, #1322]	@ 0x52a
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d104      	bne.n	80011d2 <receiveAndsendACK_RX+0x4e>
	 send_ack_RX(false);
 80011c8:	2000      	movs	r0, #0
 80011ca:	f7ff ffaf 	bl	800112c <send_ack_RX>
	  return 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e0ae      	b.n	8001330 <receiveAndsendACK_RX+0x1ac>
	}

	// Extract the main message
	uint8_t mainMessage[dataLength];
 80011d2:	f897 152a 	ldrb.w	r1, [r7, #1322]	@ 0x52a
 80011d6:	460b      	mov	r3, r1
 80011d8:	3b01      	subs	r3, #1
 80011da:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
 80011de:	b2cb      	uxtb	r3, r1
 80011e0:	2200      	movs	r2, #0
 80011e2:	4698      	mov	r8, r3
 80011e4:	4691      	mov	r9, r2
 80011e6:	f04f 0200 	mov.w	r2, #0
 80011ea:	f04f 0300 	mov.w	r3, #0
 80011ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80011f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80011f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80011fa:	b2cb      	uxtb	r3, r1
 80011fc:	2200      	movs	r2, #0
 80011fe:	461c      	mov	r4, r3
 8001200:	4615      	mov	r5, r2
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	f04f 0300 	mov.w	r3, #0
 800120a:	00eb      	lsls	r3, r5, #3
 800120c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001210:	00e2      	lsls	r2, r4, #3
 8001212:	460b      	mov	r3, r1
 8001214:	3307      	adds	r3, #7
 8001216:	08db      	lsrs	r3, r3, #3
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	ebad 0d03 	sub.w	sp, sp, r3
 800121e:	466b      	mov	r3, sp
 8001220:	3300      	adds	r3, #0
 8001222:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    memcpy(mainMessage, loraRxBuffer, dataLength);
 8001226:	f897 352a 	ldrb.w	r3, [r7, #1322]	@ 0x52a
 800122a:	461a      	mov	r2, r3
 800122c:	4945      	ldr	r1, [pc, #276]	@ (8001344 <receiveAndsendACK_RX+0x1c0>)
 800122e:	f8d7 0520 	ldr.w	r0, [r7, #1312]	@ 0x520
 8001232:	f002 fcbe 	bl	8003bb2 <memcpy>

    // Extract CRC string
    char crcStr[11];
    memcpy(crcStr, &loraRxBuffer[dataLength], 10);
 8001236:	f897 352a 	ldrb.w	r3, [r7, #1322]	@ 0x52a
 800123a:	4a42      	ldr	r2, [pc, #264]	@ (8001344 <receiveAndsendACK_RX+0x1c0>)
 800123c:	1899      	adds	r1, r3, r2
 800123e:	f207 530c 	addw	r3, r7, #1292	@ 0x50c
 8001242:	220a      	movs	r2, #10
 8001244:	4618      	mov	r0, r3
 8001246:	f002 fcb4 	bl	8003bb2 <memcpy>
	crcStr[10] = '\0';
 800124a:	2300      	movs	r3, #0
 800124c:	f887 3516 	strb.w	r3, [r7, #1302]	@ 0x516

	// Convert CRC string to actual number
	uint32_t receivedCrc = (uint32_t) strtoul(crcStr, NULL, 16);
 8001250:	f207 530c 	addw	r3, r7, #1292	@ 0x50c
 8001254:	2210      	movs	r2, #16
 8001256:	2100      	movs	r1, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f002 f9e5 	bl	8003628 <strtoul>
 800125e:	4603      	mov	r3, r0
 8001260:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
	// Calculate expected CRC using only the main message
	uint32_t expectedCrc = Calculate_CRC(mainMessage,dataLength);
 8001264:	f897 352a 	ldrb.w	r3, [r7, #1322]	@ 0x52a
 8001268:	4619      	mov	r1, r3
 800126a:	f8d7 0520 	ldr.w	r0, [r7, #1312]	@ 0x520
 800126e:	f000 f871 	bl	8001354 <Calculate_CRC>
 8001272:	f8c7 0518 	str.w	r0, [r7, #1304]	@ 0x518

	// Compare CRCs
	if (receivedCrc == expectedCrc) {
 8001276:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 800127a:	f8d7 3518 	ldr.w	r3, [r7, #1304]	@ 0x518
 800127e:	429a      	cmp	r2, r3
 8001280:	d10d      	bne.n	800129e <receiveAndsendACK_RX+0x11a>
		DEBUG_PRINT("matched\r\n");
 8001282:	4832      	ldr	r0, [pc, #200]	@ (800134c <receiveAndsendACK_RX+0x1c8>)
 8001284:	f002 fb04 	bl	8003890 <puts>
	HAL_Delay(500);
 8001288:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800128c:	f000 fc84 	bl	8001b98 <HAL_Delay>
	send_ack_RX(true);
 8001290:	2001      	movs	r0, #1
 8001292:	f7ff ff4b 	bl	800112c <send_ack_RX>
    return 0;
	}

	// Print the main message
	char tempBuffer[256];
	for (int i = 0; i < dataLength; i++) {
 8001296:	2300      	movs	r3, #0
 8001298:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
 800129c:	e02a      	b.n	80012f4 <receiveAndsendACK_RX+0x170>
	send_ack_RX(false);
 800129e:	2000      	movs	r0, #0
 80012a0:	f7ff ff44 	bl	800112c <send_ack_RX>
    return 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	e043      	b.n	8001330 <receiveAndsendACK_RX+0x1ac>
        tempBuffer[i] = (mainMessage[i] >= 32 && mainMessage[i] <= 126) ? mainMessage[i] : '.';
 80012a8:	f8d7 2520 	ldr.w	r2, [r7, #1312]	@ 0x520
 80012ac:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 80012b0:	4413      	add	r3, r2
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b1f      	cmp	r3, #31
 80012b6:	d90e      	bls.n	80012d6 <receiveAndsendACK_RX+0x152>
 80012b8:	f8d7 2520 	ldr.w	r2, [r7, #1312]	@ 0x520
 80012bc:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 80012c0:	4413      	add	r3, r2
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b7e      	cmp	r3, #126	@ 0x7e
 80012c6:	d806      	bhi.n	80012d6 <receiveAndsendACK_RX+0x152>
 80012c8:	f8d7 2520 	ldr.w	r2, [r7, #1312]	@ 0x520
 80012cc:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 80012d0:	4413      	add	r3, r2
 80012d2:	7819      	ldrb	r1, [r3, #0]
 80012d4:	e000      	b.n	80012d8 <receiveAndsendACK_RX+0x154>
 80012d6:	212e      	movs	r1, #46	@ 0x2e
 80012d8:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 80012dc:	f2a3 5224 	subw	r2, r3, #1316	@ 0x524
 80012e0:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 80012e4:	4413      	add	r3, r2
 80012e6:	460a      	mov	r2, r1
 80012e8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < dataLength; i++) {
 80012ea:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 80012ee:	3301      	adds	r3, #1
 80012f0:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
 80012f4:	f897 352a 	ldrb.w	r3, [r7, #1322]	@ 0x52a
 80012f8:	f8d7 252c 	ldr.w	r2, [r7, #1324]	@ 0x52c
 80012fc:	429a      	cmp	r2, r3
 80012fe:	dbd3      	blt.n	80012a8 <receiveAndsendACK_RX+0x124>
	}
        tempBuffer[dataLength] = '\0';
 8001300:	f897 352a 	ldrb.w	r3, [r7, #1322]	@ 0x52a
 8001304:	f507 62a6 	add.w	r2, r7, #1328	@ 0x530
 8001308:	f2a2 5224 	subw	r2, r2, #1316	@ 0x524
 800130c:	2100      	movs	r1, #0
 800130e:	54d1      	strb	r1, [r2, r3]


        char formattedMessage[1024];
        snprintf(formattedMessage, sizeof(formattedMessage), "Received message: %s\r\n", tempBuffer);
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8001318:	4a0d      	ldr	r2, [pc, #52]	@ (8001350 <receiveAndsendACK_RX+0x1cc>)
 800131a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800131e:	f002 fabf 	bl	80038a0 <sniprintf>
        DEBUG_PRINT(formattedMessage);
 8001322:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001326:	4618      	mov	r0, r3
 8001328:	f002 fa4a 	bl	80037c0 <iprintf>
 800132c:	46b5      	mov	sp, r6
 800132e:	e001      	b.n	8001334 <receiveAndsendACK_RX+0x1b0>
	  return 0;
 8001330:	46b5      	mov	sp, r6
 8001332:	e000      	b.n	8001336 <receiveAndsendACK_RX+0x1b2>
    }

    return 1;
 8001334:	2301      	movs	r3, #1

}
 8001336:	4618      	mov	r0, r3
 8001338:	f207 5734 	addw	r7, r7, #1332	@ 0x534
 800133c:	46bd      	mov	sp, r7
 800133e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001342:	bf00      	nop
 8001344:	20000084 	.word	0x20000084
 8001348:	20000164 	.word	0x20000164
 800134c:	08004ab4 	.word	0x08004ab4
 8001350:	08004ac0 	.word	0x08004ac0

08001354 <Calculate_CRC>:
#include "crc_calculator.h"
#include "main.h"

uint32_t Calculate_CRC(const uint8_t *data, uint8_t length) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b0c6      	sub	sp, #280	@ 0x118
 8001358:	af00      	add	r7, sp, #0
 800135a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800135e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001362:	6018      	str	r0, [r3, #0]
 8001364:	460a      	mov	r2, r1
 8001366:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800136a:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 800136e:	701a      	strb	r2, [r3, #0]
    uint32_t crc = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    uint32_t buffer32[(256 + 3) / 4]; // Pre-allocate buffer for max data size
    uint32_t wordCount = (length + 3) / 4;
 8001376:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800137a:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	3303      	adds	r3, #3
 8001382:	2b00      	cmp	r3, #0
 8001384:	da00      	bge.n	8001388 <Calculate_CRC+0x34>
 8001386:	3303      	adds	r3, #3
 8001388:	109b      	asrs	r3, r3, #2
 800138a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    uint8_t i, j;

    // Pack bytes into 32-bit words (little-endian)
    for (i = 0; i < wordCount; i++) {
 800138e:	2300      	movs	r3, #0
 8001390:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8001394:	e044      	b.n	8001420 <Calculate_CRC+0xcc>
        uint32_t word = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
        for (j = 0; j < 4 && (i * 4 + j) < length; j++) {
 800139c:	2300      	movs	r3, #0
 800139e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80013a2:	e01d      	b.n	80013e0 <Calculate_CRC+0x8c>
            word |= (uint32_t)data[i * 4 + j] << (j * 8);
 80013a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80013a8:	009a      	lsls	r2, r3, #2
 80013aa:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80013ae:	4413      	add	r3, r2
 80013b0:	461a      	mov	r2, r3
 80013b2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80013b6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4413      	add	r3, r2
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80013d0:	4313      	orrs	r3, r2
 80013d2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
        for (j = 0; j < 4 && (i * 4 + j) < length; j++) {
 80013d6:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80013da:	3301      	adds	r3, #1
 80013dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80013e0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80013e4:	2b03      	cmp	r3, #3
 80013e6:	d80c      	bhi.n	8001402 <Calculate_CRC+0xae>
 80013e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80013ec:	009a      	lsls	r2, r3, #2
 80013ee:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80013f2:	441a      	add	r2, r3
 80013f4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80013f8:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	429a      	cmp	r2, r3
 8001400:	dbd0      	blt.n	80013a4 <Calculate_CRC+0x50>
        }
        buffer32[i] = word;
 8001402:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 8001406:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800140a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800140e:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 8001412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < wordCount; i++) {
 8001416:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800141a:	3301      	adds	r3, #1
 800141c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8001420:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001424:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001428:	429a      	cmp	r2, r3
 800142a:	d8b4      	bhi.n	8001396 <Calculate_CRC+0x42>
    }

    // Compute CRC using HAL function
    crc = HAL_CRC_Calculate(&hcrc, buffer32, wordCount);
 800142c:	f107 0308 	add.w	r3, r7, #8
 8001430:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001434:	4619      	mov	r1, r3
 8001436:	4806      	ldr	r0, [pc, #24]	@ (8001450 <Calculate_CRC+0xfc>)
 8001438:	f000 fcfb 	bl	8001e32 <HAL_CRC_Calculate>
 800143c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c

    // Apply final XOR
    return crc ^ 0xFFFFFFFF;
 8001440:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001444:	43db      	mvns	r3, r3
}
 8001446:	4618      	mov	r0, r3
 8001448:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000104 	.word	0x20000104

08001454 <LoRa_Init>:
#include "debug.h"

extern SPI_HandleTypeDef hspi1;
char buffer[256];

void LoRa_Init(void) {
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
    myLoRa.CS_port = GPIOA;
 8001458:	4b21      	ldr	r3, [pc, #132]	@ (80014e0 <LoRa_Init+0x8c>)
 800145a:	4a22      	ldr	r2, [pc, #136]	@ (80014e4 <LoRa_Init+0x90>)
 800145c:	601a      	str	r2, [r3, #0]
    myLoRa.CS_pin = GPIO_PIN_4;
 800145e:	4b20      	ldr	r3, [pc, #128]	@ (80014e0 <LoRa_Init+0x8c>)
 8001460:	2210      	movs	r2, #16
 8001462:	809a      	strh	r2, [r3, #4]
    myLoRa.reset_port = GPIOA;
 8001464:	4b1e      	ldr	r3, [pc, #120]	@ (80014e0 <LoRa_Init+0x8c>)
 8001466:	4a1f      	ldr	r2, [pc, #124]	@ (80014e4 <LoRa_Init+0x90>)
 8001468:	609a      	str	r2, [r3, #8]
    myLoRa.reset_pin = GPIO_PIN_3;
 800146a:	4b1d      	ldr	r3, [pc, #116]	@ (80014e0 <LoRa_Init+0x8c>)
 800146c:	2208      	movs	r2, #8
 800146e:	819a      	strh	r2, [r3, #12]
    myLoRa.DIO0_port = GPIOB;
 8001470:	4b1b      	ldr	r3, [pc, #108]	@ (80014e0 <LoRa_Init+0x8c>)
 8001472:	4a1d      	ldr	r2, [pc, #116]	@ (80014e8 <LoRa_Init+0x94>)
 8001474:	611a      	str	r2, [r3, #16]
    myLoRa.DIO0_pin = GPIO_PIN_0;
 8001476:	4b1a      	ldr	r3, [pc, #104]	@ (80014e0 <LoRa_Init+0x8c>)
 8001478:	2201      	movs	r2, #1
 800147a:	829a      	strh	r2, [r3, #20]
    myLoRa.hSPIx = &hspi1;
 800147c:	4b18      	ldr	r3, [pc, #96]	@ (80014e0 <LoRa_Init+0x8c>)
 800147e:	4a1b      	ldr	r2, [pc, #108]	@ (80014ec <LoRa_Init+0x98>)
 8001480:	619a      	str	r2, [r3, #24]

    myLoRa.frequency = 433;
 8001482:	4b17      	ldr	r3, [pc, #92]	@ (80014e0 <LoRa_Init+0x8c>)
 8001484:	f240 12b1 	movw	r2, #433	@ 0x1b1
 8001488:	621a      	str	r2, [r3, #32]
    myLoRa.spredingFactor = SF_7;
 800148a:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <LoRa_Init+0x8c>)
 800148c:	2207      	movs	r2, #7
 800148e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    myLoRa.bandWidth = BW_125KHz;
 8001492:	4b13      	ldr	r3, [pc, #76]	@ (80014e0 <LoRa_Init+0x8c>)
 8001494:	2207      	movs	r2, #7
 8001496:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    myLoRa.crcRate = CR_4_5;
 800149a:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <LoRa_Init+0x8c>)
 800149c:	2201      	movs	r2, #1
 800149e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    myLoRa.power = POWER_20db;
 80014a2:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <LoRa_Init+0x8c>)
 80014a4:	22ff      	movs	r2, #255	@ 0xff
 80014a6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    myLoRa.overCurrentProtection = 130;
 80014aa:	4b0d      	ldr	r3, [pc, #52]	@ (80014e0 <LoRa_Init+0x8c>)
 80014ac:	2282      	movs	r2, #130	@ 0x82
 80014ae:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    myLoRa.preamble = 8;
 80014b2:	4b0b      	ldr	r3, [pc, #44]	@ (80014e0 <LoRa_Init+0x8c>)
 80014b4:	2208      	movs	r2, #8
 80014b6:	851a      	strh	r2, [r3, #40]	@ 0x28


    // Initialize LoRa
    if (LoRa_init(&myLoRa) != LORA_OK) {
 80014b8:	4809      	ldr	r0, [pc, #36]	@ (80014e0 <LoRa_Init+0x8c>)
 80014ba:	f7ff fd90 	bl	8000fde <LoRa_init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2bc8      	cmp	r3, #200	@ 0xc8
 80014c2:	d004      	beq.n	80014ce <LoRa_Init+0x7a>
    	DEBUG_PRINT("LoRa Init Failed\r\n");
 80014c4:	480a      	ldr	r0, [pc, #40]	@ (80014f0 <LoRa_Init+0x9c>)
 80014c6:	f002 f9e3 	bl	8003890 <puts>
        while (1);
 80014ca:	bf00      	nop
 80014cc:	e7fd      	b.n	80014ca <LoRa_Init+0x76>
    }
    // Send initialization message
    DEBUG_PRINT("LoRa Transmitter & Receiver initialized\r\n");
 80014ce:	4809      	ldr	r0, [pc, #36]	@ (80014f4 <LoRa_Init+0xa0>)
 80014d0:	f002 f9de 	bl	8003890 <puts>
       DEBUG_PRINT("CarSYNC_1\r\n");
 80014d4:	4808      	ldr	r0, [pc, #32]	@ (80014f8 <LoRa_Init+0xa4>)
 80014d6:	f002 f9db 	bl	8003890 <puts>



}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000164 	.word	0x20000164
 80014e4:	40010800 	.word	0x40010800
 80014e8:	40010c00 	.word	0x40010c00
 80014ec:	2000010c 	.word	0x2000010c
 80014f0:	08004ad8 	.word	0x08004ad8
 80014f4:	08004aec 	.word	0x08004aec
 80014f8:	08004b18 	.word	0x08004b18

080014fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001500:	f000 fae8 	bl	8001ad4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001504:	f000 f83e 	bl	8001584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001508:	f000 f8c2 	bl	8001690 <MX_GPIO_Init>
  MX_CRC_Init();
 800150c:	f000 f876 	bl	80015fc <MX_CRC_Init>
  MX_SPI1_Init();
 8001510:	f000 f888 	bl	8001624 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // Initialize LoRa
  LoRa_Init();
 8001514:	f7ff ff9e 	bl	8001454 <LoRa_Init>
  DEBUG_PRINT("LoRa Init Successful\r\n");
 8001518:	4816      	ldr	r0, [pc, #88]	@ (8001574 <main+0x78>)
 800151a:	f002 f9b9 	bl	8003890 <puts>

  // Start LoRa receiving
  	  LoRa_startReceiving(&myLoRa);
 800151e:	4816      	ldr	r0, [pc, #88]	@ (8001578 <main+0x7c>)
 8001520:	f7ff fcf1 	bl	8000f06 <LoRa_startReceiving>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (receivedFlag)
 8001524:	4b15      	ldr	r3, [pc, #84]	@ (800157c <main+0x80>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0fb      	beq.n	8001524 <main+0x28>
	  		{
	  		 receivedFlag = 0;
 800152c:	4b13      	ldr	r3, [pc, #76]	@ (800157c <main+0x80>)
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
	  		 receiveAndsendACK_RX(&myLoRa);
 8001532:	4811      	ldr	r0, [pc, #68]	@ (8001578 <main+0x7c>)
 8001534:	f7ff fe26 	bl	8001184 <receiveAndsendACK_RX>
	  				 HAL_GPIO_TogglePin(Buzzer_GPIO_Port, Buzzer_Pin);
 8001538:	2101      	movs	r1, #1
 800153a:	4811      	ldr	r0, [pc, #68]	@ (8001580 <main+0x84>)
 800153c:	f000 fe48 	bl	80021d0 <HAL_GPIO_TogglePin>
	  				 HAL_Delay(100);
 8001540:	2064      	movs	r0, #100	@ 0x64
 8001542:	f000 fb29 	bl	8001b98 <HAL_Delay>
	  				 HAL_GPIO_TogglePin(Buzzer_GPIO_Port, Buzzer_Pin);
 8001546:	2101      	movs	r1, #1
 8001548:	480d      	ldr	r0, [pc, #52]	@ (8001580 <main+0x84>)
 800154a:	f000 fe41 	bl	80021d0 <HAL_GPIO_TogglePin>
	  				 HAL_Delay(100);
 800154e:	2064      	movs	r0, #100	@ 0x64
 8001550:	f000 fb22 	bl	8001b98 <HAL_Delay>
	  				 HAL_GPIO_TogglePin(Buzzer_GPIO_Port, Buzzer_Pin);
 8001554:	2101      	movs	r1, #1
 8001556:	480a      	ldr	r0, [pc, #40]	@ (8001580 <main+0x84>)
 8001558:	f000 fe3a 	bl	80021d0 <HAL_GPIO_TogglePin>
	  		     	 HAL_Delay(100);
 800155c:	2064      	movs	r0, #100	@ 0x64
 800155e:	f000 fb1b 	bl	8001b98 <HAL_Delay>
	  				 HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	2101      	movs	r1, #1
 8001566:	4806      	ldr	r0, [pc, #24]	@ (8001580 <main+0x84>)
 8001568:	f000 fe1a 	bl	80021a0 <HAL_GPIO_WritePin>
	  		     	 HAL_Delay(100);
 800156c:	2064      	movs	r0, #100	@ 0x64
 800156e:	f000 fb13 	bl	8001b98 <HAL_Delay>
	  if (receivedFlag)
 8001572:	e7d7      	b.n	8001524 <main+0x28>
 8001574:	08004b24 	.word	0x08004b24
 8001578:	20000164 	.word	0x20000164
 800157c:	20000190 	.word	0x20000190
 8001580:	40010800 	.word	0x40010800

08001584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b090      	sub	sp, #64	@ 0x40
 8001588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158a:	f107 0318 	add.w	r3, r7, #24
 800158e:	2228      	movs	r2, #40	@ 0x28
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f002 fa92 	bl	8003abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015a6:	2302      	movs	r3, #2
 80015a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015aa:	2301      	movs	r3, #1
 80015ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015ae:	2310      	movs	r3, #16
 80015b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b6:	f107 0318 	add.w	r3, r7, #24
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 fe44 	bl	8002248 <HAL_RCC_OscConfig>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <SystemClock_Config+0x46>
  {
    Error_Handler();
 80015c6:	f000 f8e7 	bl	8001798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ca:	230f      	movs	r3, #15
 80015cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f001 f8b2 	bl	800274c <HAL_RCC_ClockConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80015ee:	f000 f8d3 	bl	8001798 <Error_Handler>
  }
}
 80015f2:	bf00      	nop
 80015f4:	3740      	adds	r7, #64	@ 0x40
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <MX_CRC_Init+0x20>)
 8001602:	4a07      	ldr	r2, [pc, #28]	@ (8001620 <MX_CRC_Init+0x24>)
 8001604:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001606:	4805      	ldr	r0, [pc, #20]	@ (800161c <MX_CRC_Init+0x20>)
 8001608:	f000 fbf7 	bl	8001dfa <HAL_CRC_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001612:	f000 f8c1 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000104 	.word	0x20000104
 8001620:	40023000 	.word	0x40023000

08001624 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001628:	4b17      	ldr	r3, [pc, #92]	@ (8001688 <MX_SPI1_Init+0x64>)
 800162a:	4a18      	ldr	r2, [pc, #96]	@ (800168c <MX_SPI1_Init+0x68>)
 800162c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800162e:	4b16      	ldr	r3, [pc, #88]	@ (8001688 <MX_SPI1_Init+0x64>)
 8001630:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001634:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001636:	4b14      	ldr	r3, [pc, #80]	@ (8001688 <MX_SPI1_Init+0x64>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800163c:	4b12      	ldr	r3, [pc, #72]	@ (8001688 <MX_SPI1_Init+0x64>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001642:	4b11      	ldr	r3, [pc, #68]	@ (8001688 <MX_SPI1_Init+0x64>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001648:	4b0f      	ldr	r3, [pc, #60]	@ (8001688 <MX_SPI1_Init+0x64>)
 800164a:	2200      	movs	r2, #0
 800164c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800164e:	4b0e      	ldr	r3, [pc, #56]	@ (8001688 <MX_SPI1_Init+0x64>)
 8001650:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001654:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001656:	4b0c      	ldr	r3, [pc, #48]	@ (8001688 <MX_SPI1_Init+0x64>)
 8001658:	2200      	movs	r2, #0
 800165a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800165c:	4b0a      	ldr	r3, [pc, #40]	@ (8001688 <MX_SPI1_Init+0x64>)
 800165e:	2200      	movs	r2, #0
 8001660:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001662:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <MX_SPI1_Init+0x64>)
 8001664:	2200      	movs	r2, #0
 8001666:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001668:	4b07      	ldr	r3, [pc, #28]	@ (8001688 <MX_SPI1_Init+0x64>)
 800166a:	2200      	movs	r2, #0
 800166c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800166e:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <MX_SPI1_Init+0x64>)
 8001670:	220a      	movs	r2, #10
 8001672:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001674:	4804      	ldr	r0, [pc, #16]	@ (8001688 <MX_SPI1_Init+0x64>)
 8001676:	f001 f9c5 	bl	8002a04 <HAL_SPI_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001680:	f000 f88a 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	2000010c 	.word	0x2000010c
 800168c:	40013000 	.word	0x40013000

08001690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001696:	f107 0310 	add.w	r3, r7, #16
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a4:	4b37      	ldr	r3, [pc, #220]	@ (8001784 <MX_GPIO_Init+0xf4>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	4a36      	ldr	r2, [pc, #216]	@ (8001784 <MX_GPIO_Init+0xf4>)
 80016aa:	f043 0310 	orr.w	r3, r3, #16
 80016ae:	6193      	str	r3, [r2, #24]
 80016b0:	4b34      	ldr	r3, [pc, #208]	@ (8001784 <MX_GPIO_Init+0xf4>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f003 0310 	and.w	r3, r3, #16
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016bc:	4b31      	ldr	r3, [pc, #196]	@ (8001784 <MX_GPIO_Init+0xf4>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	4a30      	ldr	r2, [pc, #192]	@ (8001784 <MX_GPIO_Init+0xf4>)
 80016c2:	f043 0320 	orr.w	r3, r3, #32
 80016c6:	6193      	str	r3, [r2, #24]
 80016c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001784 <MX_GPIO_Init+0xf4>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	f003 0320 	and.w	r3, r3, #32
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001784 <MX_GPIO_Init+0xf4>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001784 <MX_GPIO_Init+0xf4>)
 80016da:	f043 0304 	orr.w	r3, r3, #4
 80016de:	6193      	str	r3, [r2, #24]
 80016e0:	4b28      	ldr	r3, [pc, #160]	@ (8001784 <MX_GPIO_Init+0xf4>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ec:	4b25      	ldr	r3, [pc, #148]	@ (8001784 <MX_GPIO_Init+0xf4>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	4a24      	ldr	r2, [pc, #144]	@ (8001784 <MX_GPIO_Init+0xf4>)
 80016f2:	f043 0308 	orr.w	r3, r3, #8
 80016f6:	6193      	str	r3, [r2, #24]
 80016f8:	4b22      	ldr	r3, [pc, #136]	@ (8001784 <MX_GPIO_Init+0xf4>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f003 0308 	and.w	r3, r3, #8
 8001700:	603b      	str	r3, [r7, #0]
 8001702:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Run_GPIO_Port, Run_Pin, GPIO_PIN_RESET);
 8001704:	2200      	movs	r2, #0
 8001706:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800170a:	481f      	ldr	r0, [pc, #124]	@ (8001788 <MX_GPIO_Init+0xf8>)
 800170c:	f000 fd48 	bl	80021a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_Pin|LORA_RST_Pin, GPIO_PIN_RESET);
 8001710:	2200      	movs	r2, #0
 8001712:	2109      	movs	r1, #9
 8001714:	481d      	ldr	r0, [pc, #116]	@ (800178c <MX_GPIO_Init+0xfc>)
 8001716:	f000 fd43 	bl	80021a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Run_Pin */
  GPIO_InitStruct.Pin = Run_Pin;
 800171a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800171e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001720:	2301      	movs	r3, #1
 8001722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001728:	2302      	movs	r3, #2
 800172a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Run_GPIO_Port, &GPIO_InitStruct);
 800172c:	f107 0310 	add.w	r3, r7, #16
 8001730:	4619      	mov	r1, r3
 8001732:	4815      	ldr	r0, [pc, #84]	@ (8001788 <MX_GPIO_Init+0xf8>)
 8001734:	f000 fbb0 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Pin LORA_RST_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin|LORA_RST_Pin;
 8001738:	2309      	movs	r3, #9
 800173a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173c:	2301      	movs	r3, #1
 800173e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001744:	2302      	movs	r3, #2
 8001746:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001748:	f107 0310 	add.w	r3, r7, #16
 800174c:	4619      	mov	r1, r3
 800174e:	480f      	ldr	r0, [pc, #60]	@ (800178c <MX_GPIO_Init+0xfc>)
 8001750:	f000 fba2 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_INT_Pin */
  GPIO_InitStruct.Pin = LORA_INT_Pin;
 8001754:	2301      	movs	r3, #1
 8001756:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001758:	4b0d      	ldr	r3, [pc, #52]	@ (8001790 <MX_GPIO_Init+0x100>)
 800175a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LORA_INT_GPIO_Port, &GPIO_InitStruct);
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	4619      	mov	r1, r3
 8001766:	480b      	ldr	r0, [pc, #44]	@ (8001794 <MX_GPIO_Init+0x104>)
 8001768:	f000 fb96 	bl	8001e98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800176c:	2200      	movs	r2, #0
 800176e:	2100      	movs	r1, #0
 8001770:	2006      	movs	r0, #6
 8001772:	f000 fb0c 	bl	8001d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001776:	2006      	movs	r0, #6
 8001778:	f000 fb25 	bl	8001dc6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800177c:	bf00      	nop
 800177e:	3720      	adds	r7, #32
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40021000 	.word	0x40021000
 8001788:	40011000 	.word	0x40011000
 800178c:	40010800 	.word	0x40010800
 8001790:	10110000 	.word	0x10110000
 8001794:	40010c00 	.word	0x40010c00

08001798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800179c:	b672      	cpsid	i
}
 800179e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <Error_Handler+0x8>

080017a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017aa:	4b15      	ldr	r3, [pc, #84]	@ (8001800 <HAL_MspInit+0x5c>)
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	4a14      	ldr	r2, [pc, #80]	@ (8001800 <HAL_MspInit+0x5c>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6193      	str	r3, [r2, #24]
 80017b6:	4b12      	ldr	r3, [pc, #72]	@ (8001800 <HAL_MspInit+0x5c>)
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001800 <HAL_MspInit+0x5c>)
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001800 <HAL_MspInit+0x5c>)
 80017c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017cc:	61d3      	str	r3, [r2, #28]
 80017ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001800 <HAL_MspInit+0x5c>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017da:	4b0a      	ldr	r3, [pc, #40]	@ (8001804 <HAL_MspInit+0x60>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	4a04      	ldr	r2, [pc, #16]	@ (8001804 <HAL_MspInit+0x60>)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f6:	bf00      	nop
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr
 8001800:	40021000 	.word	0x40021000
 8001804:	40010000 	.word	0x40010000

08001808 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a09      	ldr	r2, [pc, #36]	@ (800183c <HAL_CRC_MspInit+0x34>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d10b      	bne.n	8001832 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800181a:	4b09      	ldr	r3, [pc, #36]	@ (8001840 <HAL_CRC_MspInit+0x38>)
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	4a08      	ldr	r2, [pc, #32]	@ (8001840 <HAL_CRC_MspInit+0x38>)
 8001820:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001824:	6153      	str	r3, [r2, #20]
 8001826:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <HAL_CRC_MspInit+0x38>)
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8001832:	bf00      	nop
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	40023000 	.word	0x40023000
 8001840:	40021000 	.word	0x40021000

08001844 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	f107 0310 	add.w	r3, r7, #16
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a1b      	ldr	r2, [pc, #108]	@ (80018cc <HAL_SPI_MspInit+0x88>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d12f      	bne.n	80018c4 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001864:	4b1a      	ldr	r3, [pc, #104]	@ (80018d0 <HAL_SPI_MspInit+0x8c>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	4a19      	ldr	r2, [pc, #100]	@ (80018d0 <HAL_SPI_MspInit+0x8c>)
 800186a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800186e:	6193      	str	r3, [r2, #24]
 8001870:	4b17      	ldr	r3, [pc, #92]	@ (80018d0 <HAL_SPI_MspInit+0x8c>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187c:	4b14      	ldr	r3, [pc, #80]	@ (80018d0 <HAL_SPI_MspInit+0x8c>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	4a13      	ldr	r2, [pc, #76]	@ (80018d0 <HAL_SPI_MspInit+0x8c>)
 8001882:	f043 0304 	orr.w	r3, r3, #4
 8001886:	6193      	str	r3, [r2, #24]
 8001888:	4b11      	ldr	r3, [pc, #68]	@ (80018d0 <HAL_SPI_MspInit+0x8c>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LORA_NSS_Pin|GPIO_PIN_5|GPIO_PIN_7;
 8001894:	23b0      	movs	r3, #176	@ 0xb0
 8001896:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001898:	2302      	movs	r3, #2
 800189a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800189c:	2303      	movs	r3, #3
 800189e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a0:	f107 0310 	add.w	r3, r7, #16
 80018a4:	4619      	mov	r1, r3
 80018a6:	480b      	ldr	r0, [pc, #44]	@ (80018d4 <HAL_SPI_MspInit+0x90>)
 80018a8:	f000 faf6 	bl	8001e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018ac:	2340      	movs	r3, #64	@ 0x40
 80018ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b8:	f107 0310 	add.w	r3, r7, #16
 80018bc:	4619      	mov	r1, r3
 80018be:	4805      	ldr	r0, [pc, #20]	@ (80018d4 <HAL_SPI_MspInit+0x90>)
 80018c0:	f000 faea 	bl	8001e98 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80018c4:	bf00      	nop
 80018c6:	3720      	adds	r7, #32
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40013000 	.word	0x40013000
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40010800 	.word	0x40010800

080018d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <NMI_Handler+0x4>

080018e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <HardFault_Handler+0x4>

080018e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ec:	bf00      	nop
 80018ee:	e7fd      	b.n	80018ec <MemManage_Handler+0x4>

080018f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <BusFault_Handler+0x4>

080018f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <UsageFault_Handler+0x4>

08001900 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr

0800190c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001928:	f000 f91a 	bl	8001b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}

08001930 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LORA_INT_Pin);
 8001934:	2001      	movs	r0, #1
 8001936:	f000 fc65 	bl	8002204 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}

0800193e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b086      	sub	sp, #24
 8001942:	af00      	add	r7, sp, #0
 8001944:	60f8      	str	r0, [r7, #12]
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
 800194e:	e00a      	b.n	8001966 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001950:	f3af 8000 	nop.w
 8001954:	4601      	mov	r1, r0
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	1c5a      	adds	r2, r3, #1
 800195a:	60ba      	str	r2, [r7, #8]
 800195c:	b2ca      	uxtb	r2, r1
 800195e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	3301      	adds	r3, #1
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	429a      	cmp	r2, r3
 800196c:	dbf0      	blt.n	8001950 <_read+0x12>
  }

  return len;
 800196e:	687b      	ldr	r3, [r7, #4]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	e009      	b.n	800199e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	1c5a      	adds	r2, r3, #1
 800198e:	60ba      	str	r2, [r7, #8]
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	3301      	adds	r3, #1
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	dbf1      	blt.n	800198a <_write+0x12>
  }
  return len;
 80019a6:	687b      	ldr	r3, [r7, #4]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <_close>:

int _close(int file)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr

080019c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019d6:	605a      	str	r2, [r3, #4]
  return 0;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr

080019e4 <_isatty>:

int _isatty(int file)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019ec:	2301      	movs	r3, #1
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a18:	4a14      	ldr	r2, [pc, #80]	@ (8001a6c <_sbrk+0x5c>)
 8001a1a:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <_sbrk+0x60>)
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a24:	4b13      	ldr	r3, [pc, #76]	@ (8001a74 <_sbrk+0x64>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d102      	bne.n	8001a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a2c:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <_sbrk+0x64>)
 8001a2e:	4a12      	ldr	r2, [pc, #72]	@ (8001a78 <_sbrk+0x68>)
 8001a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a32:	4b10      	ldr	r3, [pc, #64]	@ (8001a74 <_sbrk+0x64>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d207      	bcs.n	8001a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a40:	f002 f88a 	bl	8003b58 <__errno>
 8001a44:	4603      	mov	r3, r0
 8001a46:	220c      	movs	r2, #12
 8001a48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4e:	e009      	b.n	8001a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a50:	4b08      	ldr	r3, [pc, #32]	@ (8001a74 <_sbrk+0x64>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a56:	4b07      	ldr	r3, [pc, #28]	@ (8001a74 <_sbrk+0x64>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	4a05      	ldr	r2, [pc, #20]	@ (8001a74 <_sbrk+0x64>)
 8001a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a62:	68fb      	ldr	r3, [r7, #12]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20005000 	.word	0x20005000
 8001a70:	00000400 	.word	0x00000400
 8001a74:	20000194 	.word	0x20000194
 8001a78:	200002e8 	.word	0x200002e8

08001a7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a88:	f7ff fff8 	bl	8001a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a8c:	480b      	ldr	r0, [pc, #44]	@ (8001abc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a8e:	490c      	ldr	r1, [pc, #48]	@ (8001ac0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a90:	4a0c      	ldr	r2, [pc, #48]	@ (8001ac4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a94:	e002      	b.n	8001a9c <LoopCopyDataInit>

08001a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9a:	3304      	adds	r3, #4

08001a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa0:	d3f9      	bcc.n	8001a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa2:	4a09      	ldr	r2, [pc, #36]	@ (8001ac8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001aa4:	4c09      	ldr	r4, [pc, #36]	@ (8001acc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa8:	e001      	b.n	8001aae <LoopFillZerobss>

08001aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aac:	3204      	adds	r2, #4

08001aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab0:	d3fb      	bcc.n	8001aaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ab2:	f002 f857 	bl	8003b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ab6:	f7ff fd21 	bl	80014fc <main>
  bx lr
 8001aba:	4770      	bx	lr
  ldr r0, =_sdata
 8001abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001ac4:	08004c9c 	.word	0x08004c9c
  ldr r2, =_sbss
 8001ac8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001acc:	200002e8 	.word	0x200002e8

08001ad0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ad0:	e7fe      	b.n	8001ad0 <ADC1_2_IRQHandler>
	...

08001ad4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad8:	4b08      	ldr	r3, [pc, #32]	@ (8001afc <HAL_Init+0x28>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a07      	ldr	r2, [pc, #28]	@ (8001afc <HAL_Init+0x28>)
 8001ade:	f043 0310 	orr.w	r3, r3, #16
 8001ae2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae4:	2003      	movs	r0, #3
 8001ae6:	f000 f947 	bl	8001d78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aea:	200f      	movs	r0, #15
 8001aec:	f000 f808 	bl	8001b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af0:	f7ff fe58 	bl	80017a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40022000 	.word	0x40022000

08001b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b08:	4b12      	ldr	r3, [pc, #72]	@ (8001b54 <HAL_InitTick+0x54>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b12      	ldr	r3, [pc, #72]	@ (8001b58 <HAL_InitTick+0x58>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	4619      	mov	r1, r3
 8001b12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 f95f 	bl	8001de2 <HAL_SYSTICK_Config>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e00e      	b.n	8001b4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b0f      	cmp	r3, #15
 8001b32:	d80a      	bhi.n	8001b4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b34:	2200      	movs	r2, #0
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3c:	f000 f927 	bl	8001d8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b40:	4a06      	ldr	r2, [pc, #24]	@ (8001b5c <HAL_InitTick+0x5c>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	e000      	b.n	8001b4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000000 	.word	0x20000000
 8001b58:	20000008 	.word	0x20000008
 8001b5c:	20000004 	.word	0x20000004

08001b60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b64:	4b05      	ldr	r3, [pc, #20]	@ (8001b7c <HAL_IncTick+0x1c>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b05      	ldr	r3, [pc, #20]	@ (8001b80 <HAL_IncTick+0x20>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	4a03      	ldr	r2, [pc, #12]	@ (8001b80 <HAL_IncTick+0x20>)
 8001b72:	6013      	str	r3, [r2, #0]
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	20000008 	.word	0x20000008
 8001b80:	20000198 	.word	0x20000198

08001b84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return uwTick;
 8001b88:	4b02      	ldr	r3, [pc, #8]	@ (8001b94 <HAL_GetTick+0x10>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	20000198 	.word	0x20000198

08001b98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba0:	f7ff fff0 	bl	8001b84 <HAL_GetTick>
 8001ba4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb0:	d005      	beq.n	8001bbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bdc <HAL_Delay+0x44>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4413      	add	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bbe:	bf00      	nop
 8001bc0:	f7ff ffe0 	bl	8001b84 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d8f7      	bhi.n	8001bc0 <HAL_Delay+0x28>
  {
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000008 	.word	0x20000008

08001be0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c24 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c12:	4a04      	ldr	r2, [pc, #16]	@ (8001c24 <__NVIC_SetPriorityGrouping+0x44>)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	60d3      	str	r3, [r2, #12]
}
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc80      	pop	{r7}
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c2c:	4b04      	ldr	r3, [pc, #16]	@ (8001c40 <__NVIC_GetPriorityGrouping+0x18>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	0a1b      	lsrs	r3, r3, #8
 8001c32:	f003 0307 	and.w	r3, r3, #7
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	db0b      	blt.n	8001c6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	f003 021f 	and.w	r2, r3, #31
 8001c5c:	4906      	ldr	r1, [pc, #24]	@ (8001c78 <__NVIC_EnableIRQ+0x34>)
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	095b      	lsrs	r3, r3, #5
 8001c64:	2001      	movs	r0, #1
 8001c66:	fa00 f202 	lsl.w	r2, r0, r2
 8001c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr
 8001c78:	e000e100 	.word	0xe000e100

08001c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	6039      	str	r1, [r7, #0]
 8001c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	db0a      	blt.n	8001ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	490c      	ldr	r1, [pc, #48]	@ (8001cc8 <__NVIC_SetPriority+0x4c>)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	0112      	lsls	r2, r2, #4
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ca4:	e00a      	b.n	8001cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	4908      	ldr	r1, [pc, #32]	@ (8001ccc <__NVIC_SetPriority+0x50>)
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	3b04      	subs	r3, #4
 8001cb4:	0112      	lsls	r2, r2, #4
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	440b      	add	r3, r1
 8001cba:	761a      	strb	r2, [r3, #24]
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000e100 	.word	0xe000e100
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b089      	sub	sp, #36	@ 0x24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f1c3 0307 	rsb	r3, r3, #7
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	bf28      	it	cs
 8001cee:	2304      	movcs	r3, #4
 8001cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	2b06      	cmp	r3, #6
 8001cf8:	d902      	bls.n	8001d00 <NVIC_EncodePriority+0x30>
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3b03      	subs	r3, #3
 8001cfe:	e000      	b.n	8001d02 <NVIC_EncodePriority+0x32>
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d04:	f04f 32ff 	mov.w	r2, #4294967295
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43da      	mvns	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	401a      	ands	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d18:	f04f 31ff 	mov.w	r1, #4294967295
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d22:	43d9      	mvns	r1, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d28:	4313      	orrs	r3, r2
         );
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3724      	adds	r7, #36	@ 0x24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d44:	d301      	bcc.n	8001d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d46:	2301      	movs	r3, #1
 8001d48:	e00f      	b.n	8001d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d74 <SysTick_Config+0x40>)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d52:	210f      	movs	r1, #15
 8001d54:	f04f 30ff 	mov.w	r0, #4294967295
 8001d58:	f7ff ff90 	bl	8001c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d5c:	4b05      	ldr	r3, [pc, #20]	@ (8001d74 <SysTick_Config+0x40>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d62:	4b04      	ldr	r3, [pc, #16]	@ (8001d74 <SysTick_Config+0x40>)
 8001d64:	2207      	movs	r2, #7
 8001d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	e000e010 	.word	0xe000e010

08001d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff ff2d 	bl	8001be0 <__NVIC_SetPriorityGrouping>
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b086      	sub	sp, #24
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	4603      	mov	r3, r0
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
 8001d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da0:	f7ff ff42 	bl	8001c28 <__NVIC_GetPriorityGrouping>
 8001da4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	68b9      	ldr	r1, [r7, #8]
 8001daa:	6978      	ldr	r0, [r7, #20]
 8001dac:	f7ff ff90 	bl	8001cd0 <NVIC_EncodePriority>
 8001db0:	4602      	mov	r2, r0
 8001db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db6:	4611      	mov	r1, r2
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff5f 	bl	8001c7c <__NVIC_SetPriority>
}
 8001dbe:	bf00      	nop
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	4603      	mov	r3, r0
 8001dce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff35 	bl	8001c44 <__NVIC_EnableIRQ>
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff ffa2 	bl	8001d34 <SysTick_Config>
 8001df0:	4603      	mov	r3, r0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e00e      	b.n	8001e2a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	795b      	ldrb	r3, [r3, #5]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d105      	bne.n	8001e22 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff fcf3 	bl	8001808 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b087      	sub	sp, #28
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	60f8      	str	r0, [r7, #12]
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2202      	movs	r2, #2
 8001e46:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0201 	orr.w	r2, r2, #1
 8001e56:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	e00a      	b.n	8001e74 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	441a      	add	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6812      	ldr	r2, [r2, #0]
 8001e6c:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	3301      	adds	r3, #1
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d3f0      	bcc.n	8001e5e <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2201      	movs	r2, #1
 8001e88:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001e8a:	693b      	ldr	r3, [r7, #16]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	371c      	adds	r7, #28
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr
	...

08001e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b08b      	sub	sp, #44	@ 0x2c
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eaa:	e169      	b.n	8002180 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001eac:	2201      	movs	r2, #1
 8001eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	69fa      	ldr	r2, [r7, #28]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	f040 8158 	bne.w	800217a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	4a9a      	ldr	r2, [pc, #616]	@ (8002138 <HAL_GPIO_Init+0x2a0>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d05e      	beq.n	8001f92 <HAL_GPIO_Init+0xfa>
 8001ed4:	4a98      	ldr	r2, [pc, #608]	@ (8002138 <HAL_GPIO_Init+0x2a0>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d875      	bhi.n	8001fc6 <HAL_GPIO_Init+0x12e>
 8001eda:	4a98      	ldr	r2, [pc, #608]	@ (800213c <HAL_GPIO_Init+0x2a4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d058      	beq.n	8001f92 <HAL_GPIO_Init+0xfa>
 8001ee0:	4a96      	ldr	r2, [pc, #600]	@ (800213c <HAL_GPIO_Init+0x2a4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d86f      	bhi.n	8001fc6 <HAL_GPIO_Init+0x12e>
 8001ee6:	4a96      	ldr	r2, [pc, #600]	@ (8002140 <HAL_GPIO_Init+0x2a8>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d052      	beq.n	8001f92 <HAL_GPIO_Init+0xfa>
 8001eec:	4a94      	ldr	r2, [pc, #592]	@ (8002140 <HAL_GPIO_Init+0x2a8>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d869      	bhi.n	8001fc6 <HAL_GPIO_Init+0x12e>
 8001ef2:	4a94      	ldr	r2, [pc, #592]	@ (8002144 <HAL_GPIO_Init+0x2ac>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d04c      	beq.n	8001f92 <HAL_GPIO_Init+0xfa>
 8001ef8:	4a92      	ldr	r2, [pc, #584]	@ (8002144 <HAL_GPIO_Init+0x2ac>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d863      	bhi.n	8001fc6 <HAL_GPIO_Init+0x12e>
 8001efe:	4a92      	ldr	r2, [pc, #584]	@ (8002148 <HAL_GPIO_Init+0x2b0>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d046      	beq.n	8001f92 <HAL_GPIO_Init+0xfa>
 8001f04:	4a90      	ldr	r2, [pc, #576]	@ (8002148 <HAL_GPIO_Init+0x2b0>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d85d      	bhi.n	8001fc6 <HAL_GPIO_Init+0x12e>
 8001f0a:	2b12      	cmp	r3, #18
 8001f0c:	d82a      	bhi.n	8001f64 <HAL_GPIO_Init+0xcc>
 8001f0e:	2b12      	cmp	r3, #18
 8001f10:	d859      	bhi.n	8001fc6 <HAL_GPIO_Init+0x12e>
 8001f12:	a201      	add	r2, pc, #4	@ (adr r2, 8001f18 <HAL_GPIO_Init+0x80>)
 8001f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f18:	08001f93 	.word	0x08001f93
 8001f1c:	08001f6d 	.word	0x08001f6d
 8001f20:	08001f7f 	.word	0x08001f7f
 8001f24:	08001fc1 	.word	0x08001fc1
 8001f28:	08001fc7 	.word	0x08001fc7
 8001f2c:	08001fc7 	.word	0x08001fc7
 8001f30:	08001fc7 	.word	0x08001fc7
 8001f34:	08001fc7 	.word	0x08001fc7
 8001f38:	08001fc7 	.word	0x08001fc7
 8001f3c:	08001fc7 	.word	0x08001fc7
 8001f40:	08001fc7 	.word	0x08001fc7
 8001f44:	08001fc7 	.word	0x08001fc7
 8001f48:	08001fc7 	.word	0x08001fc7
 8001f4c:	08001fc7 	.word	0x08001fc7
 8001f50:	08001fc7 	.word	0x08001fc7
 8001f54:	08001fc7 	.word	0x08001fc7
 8001f58:	08001fc7 	.word	0x08001fc7
 8001f5c:	08001f75 	.word	0x08001f75
 8001f60:	08001f89 	.word	0x08001f89
 8001f64:	4a79      	ldr	r2, [pc, #484]	@ (800214c <HAL_GPIO_Init+0x2b4>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d013      	beq.n	8001f92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f6a:	e02c      	b.n	8001fc6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	623b      	str	r3, [r7, #32]
          break;
 8001f72:	e029      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	623b      	str	r3, [r7, #32]
          break;
 8001f7c:	e024      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	3308      	adds	r3, #8
 8001f84:	623b      	str	r3, [r7, #32]
          break;
 8001f86:	e01f      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	330c      	adds	r3, #12
 8001f8e:	623b      	str	r3, [r7, #32]
          break;
 8001f90:	e01a      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d102      	bne.n	8001fa0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f9a:	2304      	movs	r3, #4
 8001f9c:	623b      	str	r3, [r7, #32]
          break;
 8001f9e:	e013      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d105      	bne.n	8001fb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fa8:	2308      	movs	r3, #8
 8001faa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69fa      	ldr	r2, [r7, #28]
 8001fb0:	611a      	str	r2, [r3, #16]
          break;
 8001fb2:	e009      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fb4:	2308      	movs	r3, #8
 8001fb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	615a      	str	r2, [r3, #20]
          break;
 8001fbe:	e003      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	623b      	str	r3, [r7, #32]
          break;
 8001fc4:	e000      	b.n	8001fc8 <HAL_GPIO_Init+0x130>
          break;
 8001fc6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	2bff      	cmp	r3, #255	@ 0xff
 8001fcc:	d801      	bhi.n	8001fd2 <HAL_GPIO_Init+0x13a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	e001      	b.n	8001fd6 <HAL_GPIO_Init+0x13e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	2bff      	cmp	r3, #255	@ 0xff
 8001fdc:	d802      	bhi.n	8001fe4 <HAL_GPIO_Init+0x14c>
 8001fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	e002      	b.n	8001fea <HAL_GPIO_Init+0x152>
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe6:	3b08      	subs	r3, #8
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	210f      	movs	r1, #15
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	6a39      	ldr	r1, [r7, #32]
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	fa01 f303 	lsl.w	r3, r1, r3
 8002004:	431a      	orrs	r2, r3
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 80b1 	beq.w	800217a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002018:	4b4d      	ldr	r3, [pc, #308]	@ (8002150 <HAL_GPIO_Init+0x2b8>)
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	4a4c      	ldr	r2, [pc, #304]	@ (8002150 <HAL_GPIO_Init+0x2b8>)
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	6193      	str	r3, [r2, #24]
 8002024:	4b4a      	ldr	r3, [pc, #296]	@ (8002150 <HAL_GPIO_Init+0x2b8>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002030:	4a48      	ldr	r2, [pc, #288]	@ (8002154 <HAL_GPIO_Init+0x2bc>)
 8002032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002034:	089b      	lsrs	r3, r3, #2
 8002036:	3302      	adds	r3, #2
 8002038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800203e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002040:	f003 0303 	and.w	r3, r3, #3
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	220f      	movs	r2, #15
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4013      	ands	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a40      	ldr	r2, [pc, #256]	@ (8002158 <HAL_GPIO_Init+0x2c0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d013      	beq.n	8002084 <HAL_GPIO_Init+0x1ec>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a3f      	ldr	r2, [pc, #252]	@ (800215c <HAL_GPIO_Init+0x2c4>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d00d      	beq.n	8002080 <HAL_GPIO_Init+0x1e8>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a3e      	ldr	r2, [pc, #248]	@ (8002160 <HAL_GPIO_Init+0x2c8>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d007      	beq.n	800207c <HAL_GPIO_Init+0x1e4>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a3d      	ldr	r2, [pc, #244]	@ (8002164 <HAL_GPIO_Init+0x2cc>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d101      	bne.n	8002078 <HAL_GPIO_Init+0x1e0>
 8002074:	2303      	movs	r3, #3
 8002076:	e006      	b.n	8002086 <HAL_GPIO_Init+0x1ee>
 8002078:	2304      	movs	r3, #4
 800207a:	e004      	b.n	8002086 <HAL_GPIO_Init+0x1ee>
 800207c:	2302      	movs	r3, #2
 800207e:	e002      	b.n	8002086 <HAL_GPIO_Init+0x1ee>
 8002080:	2301      	movs	r3, #1
 8002082:	e000      	b.n	8002086 <HAL_GPIO_Init+0x1ee>
 8002084:	2300      	movs	r3, #0
 8002086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002088:	f002 0203 	and.w	r2, r2, #3
 800208c:	0092      	lsls	r2, r2, #2
 800208e:	4093      	lsls	r3, r2
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	4313      	orrs	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002096:	492f      	ldr	r1, [pc, #188]	@ (8002154 <HAL_GPIO_Init+0x2bc>)
 8002098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209a:	089b      	lsrs	r3, r3, #2
 800209c:	3302      	adds	r3, #2
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d006      	beq.n	80020be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002168 <HAL_GPIO_Init+0x2d0>)
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	492c      	ldr	r1, [pc, #176]	@ (8002168 <HAL_GPIO_Init+0x2d0>)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	608b      	str	r3, [r1, #8]
 80020bc:	e006      	b.n	80020cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020be:	4b2a      	ldr	r3, [pc, #168]	@ (8002168 <HAL_GPIO_Init+0x2d0>)
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	4928      	ldr	r1, [pc, #160]	@ (8002168 <HAL_GPIO_Init+0x2d0>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d006      	beq.n	80020e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020d8:	4b23      	ldr	r3, [pc, #140]	@ (8002168 <HAL_GPIO_Init+0x2d0>)
 80020da:	68da      	ldr	r2, [r3, #12]
 80020dc:	4922      	ldr	r1, [pc, #136]	@ (8002168 <HAL_GPIO_Init+0x2d0>)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	60cb      	str	r3, [r1, #12]
 80020e4:	e006      	b.n	80020f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020e6:	4b20      	ldr	r3, [pc, #128]	@ (8002168 <HAL_GPIO_Init+0x2d0>)
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	491e      	ldr	r1, [pc, #120]	@ (8002168 <HAL_GPIO_Init+0x2d0>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d006      	beq.n	800210e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002100:	4b19      	ldr	r3, [pc, #100]	@ (8002168 <HAL_GPIO_Init+0x2d0>)
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	4918      	ldr	r1, [pc, #96]	@ (8002168 <HAL_GPIO_Init+0x2d0>)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	604b      	str	r3, [r1, #4]
 800210c:	e006      	b.n	800211c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800210e:	4b16      	ldr	r3, [pc, #88]	@ (8002168 <HAL_GPIO_Init+0x2d0>)
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	43db      	mvns	r3, r3
 8002116:	4914      	ldr	r1, [pc, #80]	@ (8002168 <HAL_GPIO_Init+0x2d0>)
 8002118:	4013      	ands	r3, r2
 800211a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d021      	beq.n	800216c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002128:	4b0f      	ldr	r3, [pc, #60]	@ (8002168 <HAL_GPIO_Init+0x2d0>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	490e      	ldr	r1, [pc, #56]	@ (8002168 <HAL_GPIO_Init+0x2d0>)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	4313      	orrs	r3, r2
 8002132:	600b      	str	r3, [r1, #0]
 8002134:	e021      	b.n	800217a <HAL_GPIO_Init+0x2e2>
 8002136:	bf00      	nop
 8002138:	10320000 	.word	0x10320000
 800213c:	10310000 	.word	0x10310000
 8002140:	10220000 	.word	0x10220000
 8002144:	10210000 	.word	0x10210000
 8002148:	10120000 	.word	0x10120000
 800214c:	10110000 	.word	0x10110000
 8002150:	40021000 	.word	0x40021000
 8002154:	40010000 	.word	0x40010000
 8002158:	40010800 	.word	0x40010800
 800215c:	40010c00 	.word	0x40010c00
 8002160:	40011000 	.word	0x40011000
 8002164:	40011400 	.word	0x40011400
 8002168:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800216c:	4b0b      	ldr	r3, [pc, #44]	@ (800219c <HAL_GPIO_Init+0x304>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	43db      	mvns	r3, r3
 8002174:	4909      	ldr	r1, [pc, #36]	@ (800219c <HAL_GPIO_Init+0x304>)
 8002176:	4013      	ands	r3, r2
 8002178:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800217a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217c:	3301      	adds	r3, #1
 800217e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002186:	fa22 f303 	lsr.w	r3, r2, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	f47f ae8e 	bne.w	8001eac <HAL_GPIO_Init+0x14>
  }
}
 8002190:	bf00      	nop
 8002192:	bf00      	nop
 8002194:	372c      	adds	r7, #44	@ 0x2c
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr
 800219c:	40010400 	.word	0x40010400

080021a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	807b      	strh	r3, [r7, #2]
 80021ac:	4613      	mov	r3, r2
 80021ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021b0:	787b      	ldrb	r3, [r7, #1]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021b6:	887a      	ldrh	r2, [r7, #2]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021bc:	e003      	b.n	80021c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021be:	887b      	ldrh	r3, [r7, #2]
 80021c0:	041a      	lsls	r2, r3, #16
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	611a      	str	r2, [r3, #16]
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021e2:	887a      	ldrh	r2, [r7, #2]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4013      	ands	r3, r2
 80021e8:	041a      	lsls	r2, r3, #16
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	43d9      	mvns	r1, r3
 80021ee:	887b      	ldrh	r3, [r7, #2]
 80021f0:	400b      	ands	r3, r1
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	611a      	str	r2, [r3, #16]
}
 80021f8:	bf00      	nop
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr
	...

08002204 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800220e:	4b08      	ldr	r3, [pc, #32]	@ (8002230 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002210:	695a      	ldr	r2, [r3, #20]
 8002212:	88fb      	ldrh	r3, [r7, #6]
 8002214:	4013      	ands	r3, r2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d006      	beq.n	8002228 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800221a:	4a05      	ldr	r2, [pc, #20]	@ (8002230 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800221c:	88fb      	ldrh	r3, [r7, #6]
 800221e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002220:	88fb      	ldrh	r3, [r7, #6]
 8002222:	4618      	mov	r0, r3
 8002224:	f000 f806 	bl	8002234 <HAL_GPIO_EXTI_Callback>
  }
}
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40010400 	.word	0x40010400

08002234 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e272      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 8087 	beq.w	8002376 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002268:	4b92      	ldr	r3, [pc, #584]	@ (80024b4 <HAL_RCC_OscConfig+0x26c>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 030c 	and.w	r3, r3, #12
 8002270:	2b04      	cmp	r3, #4
 8002272:	d00c      	beq.n	800228e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002274:	4b8f      	ldr	r3, [pc, #572]	@ (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 030c 	and.w	r3, r3, #12
 800227c:	2b08      	cmp	r3, #8
 800227e:	d112      	bne.n	80022a6 <HAL_RCC_OscConfig+0x5e>
 8002280:	4b8c      	ldr	r3, [pc, #560]	@ (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002288:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800228c:	d10b      	bne.n	80022a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228e:	4b89      	ldr	r3, [pc, #548]	@ (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d06c      	beq.n	8002374 <HAL_RCC_OscConfig+0x12c>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d168      	bne.n	8002374 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e24c      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022ae:	d106      	bne.n	80022be <HAL_RCC_OscConfig+0x76>
 80022b0:	4b80      	ldr	r3, [pc, #512]	@ (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a7f      	ldr	r2, [pc, #508]	@ (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	e02e      	b.n	800231c <HAL_RCC_OscConfig+0xd4>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10c      	bne.n	80022e0 <HAL_RCC_OscConfig+0x98>
 80022c6:	4b7b      	ldr	r3, [pc, #492]	@ (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a7a      	ldr	r2, [pc, #488]	@ (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	4b78      	ldr	r3, [pc, #480]	@ (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a77      	ldr	r2, [pc, #476]	@ (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	e01d      	b.n	800231c <HAL_RCC_OscConfig+0xd4>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022e8:	d10c      	bne.n	8002304 <HAL_RCC_OscConfig+0xbc>
 80022ea:	4b72      	ldr	r3, [pc, #456]	@ (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a71      	ldr	r2, [pc, #452]	@ (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	4b6f      	ldr	r3, [pc, #444]	@ (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a6e      	ldr	r2, [pc, #440]	@ (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	e00b      	b.n	800231c <HAL_RCC_OscConfig+0xd4>
 8002304:	4b6b      	ldr	r3, [pc, #428]	@ (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a6a      	ldr	r2, [pc, #424]	@ (80024b4 <HAL_RCC_OscConfig+0x26c>)
 800230a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	4b68      	ldr	r3, [pc, #416]	@ (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a67      	ldr	r2, [pc, #412]	@ (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002316:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800231a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d013      	beq.n	800234c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002324:	f7ff fc2e 	bl	8001b84 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800232c:	f7ff fc2a 	bl	8001b84 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b64      	cmp	r3, #100	@ 0x64
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e200      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233e:	4b5d      	ldr	r3, [pc, #372]	@ (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0f0      	beq.n	800232c <HAL_RCC_OscConfig+0xe4>
 800234a:	e014      	b.n	8002376 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234c:	f7ff fc1a 	bl	8001b84 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002354:	f7ff fc16 	bl	8001b84 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b64      	cmp	r3, #100	@ 0x64
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e1ec      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002366:	4b53      	ldr	r3, [pc, #332]	@ (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0x10c>
 8002372:	e000      	b.n	8002376 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d063      	beq.n	800244a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002382:	4b4c      	ldr	r3, [pc, #304]	@ (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00b      	beq.n	80023a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800238e:	4b49      	ldr	r3, [pc, #292]	@ (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f003 030c 	and.w	r3, r3, #12
 8002396:	2b08      	cmp	r3, #8
 8002398:	d11c      	bne.n	80023d4 <HAL_RCC_OscConfig+0x18c>
 800239a:	4b46      	ldr	r3, [pc, #280]	@ (80024b4 <HAL_RCC_OscConfig+0x26c>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d116      	bne.n	80023d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023a6:	4b43      	ldr	r3, [pc, #268]	@ (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d005      	beq.n	80023be <HAL_RCC_OscConfig+0x176>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d001      	beq.n	80023be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e1c0      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023be:	4b3d      	ldr	r3, [pc, #244]	@ (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	4939      	ldr	r1, [pc, #228]	@ (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023d2:	e03a      	b.n	800244a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d020      	beq.n	800241e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023dc:	4b36      	ldr	r3, [pc, #216]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023de:	2201      	movs	r2, #1
 80023e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e2:	f7ff fbcf 	bl	8001b84 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ea:	f7ff fbcb 	bl	8001b84 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e1a1      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fc:	4b2d      	ldr	r3, [pc, #180]	@ (80024b4 <HAL_RCC_OscConfig+0x26c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0f0      	beq.n	80023ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002408:	4b2a      	ldr	r3, [pc, #168]	@ (80024b4 <HAL_RCC_OscConfig+0x26c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	4927      	ldr	r1, [pc, #156]	@ (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002418:	4313      	orrs	r3, r2
 800241a:	600b      	str	r3, [r1, #0]
 800241c:	e015      	b.n	800244a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800241e:	4b26      	ldr	r3, [pc, #152]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7ff fbae 	bl	8001b84 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800242c:	f7ff fbaa 	bl	8001b84 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e180      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800243e:	4b1d      	ldr	r3, [pc, #116]	@ (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d03a      	beq.n	80024cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d019      	beq.n	8002492 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800245e:	4b17      	ldr	r3, [pc, #92]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 8002460:	2201      	movs	r2, #1
 8002462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002464:	f7ff fb8e 	bl	8001b84 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800246c:	f7ff fb8a 	bl	8001b84 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e160      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800247e:	4b0d      	ldr	r3, [pc, #52]	@ (80024b4 <HAL_RCC_OscConfig+0x26c>)
 8002480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0f0      	beq.n	800246c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800248a:	2001      	movs	r0, #1
 800248c:	f000 fa9c 	bl	80029c8 <RCC_Delay>
 8002490:	e01c      	b.n	80024cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002492:	4b0a      	ldr	r3, [pc, #40]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002498:	f7ff fb74 	bl	8001b84 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800249e:	e00f      	b.n	80024c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a0:	f7ff fb70 	bl	8001b84 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d908      	bls.n	80024c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e146      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000
 80024b8:	42420000 	.word	0x42420000
 80024bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c0:	4b92      	ldr	r3, [pc, #584]	@ (800270c <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1e9      	bne.n	80024a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 80a6 	beq.w	8002626 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024da:	2300      	movs	r3, #0
 80024dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024de:	4b8b      	ldr	r3, [pc, #556]	@ (800270c <HAL_RCC_OscConfig+0x4c4>)
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10d      	bne.n	8002506 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ea:	4b88      	ldr	r3, [pc, #544]	@ (800270c <HAL_RCC_OscConfig+0x4c4>)
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	4a87      	ldr	r2, [pc, #540]	@ (800270c <HAL_RCC_OscConfig+0x4c4>)
 80024f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024f4:	61d3      	str	r3, [r2, #28]
 80024f6:	4b85      	ldr	r3, [pc, #532]	@ (800270c <HAL_RCC_OscConfig+0x4c4>)
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024fe:	60bb      	str	r3, [r7, #8]
 8002500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002502:	2301      	movs	r3, #1
 8002504:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002506:	4b82      	ldr	r3, [pc, #520]	@ (8002710 <HAL_RCC_OscConfig+0x4c8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800250e:	2b00      	cmp	r3, #0
 8002510:	d118      	bne.n	8002544 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002512:	4b7f      	ldr	r3, [pc, #508]	@ (8002710 <HAL_RCC_OscConfig+0x4c8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a7e      	ldr	r2, [pc, #504]	@ (8002710 <HAL_RCC_OscConfig+0x4c8>)
 8002518:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800251c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800251e:	f7ff fb31 	bl	8001b84 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002526:	f7ff fb2d 	bl	8001b84 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b64      	cmp	r3, #100	@ 0x64
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e103      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002538:	4b75      	ldr	r3, [pc, #468]	@ (8002710 <HAL_RCC_OscConfig+0x4c8>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0f0      	beq.n	8002526 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d106      	bne.n	800255a <HAL_RCC_OscConfig+0x312>
 800254c:	4b6f      	ldr	r3, [pc, #444]	@ (800270c <HAL_RCC_OscConfig+0x4c4>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	4a6e      	ldr	r2, [pc, #440]	@ (800270c <HAL_RCC_OscConfig+0x4c4>)
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	6213      	str	r3, [r2, #32]
 8002558:	e02d      	b.n	80025b6 <HAL_RCC_OscConfig+0x36e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10c      	bne.n	800257c <HAL_RCC_OscConfig+0x334>
 8002562:	4b6a      	ldr	r3, [pc, #424]	@ (800270c <HAL_RCC_OscConfig+0x4c4>)
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	4a69      	ldr	r2, [pc, #420]	@ (800270c <HAL_RCC_OscConfig+0x4c4>)
 8002568:	f023 0301 	bic.w	r3, r3, #1
 800256c:	6213      	str	r3, [r2, #32]
 800256e:	4b67      	ldr	r3, [pc, #412]	@ (800270c <HAL_RCC_OscConfig+0x4c4>)
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	4a66      	ldr	r2, [pc, #408]	@ (800270c <HAL_RCC_OscConfig+0x4c4>)
 8002574:	f023 0304 	bic.w	r3, r3, #4
 8002578:	6213      	str	r3, [r2, #32]
 800257a:	e01c      	b.n	80025b6 <HAL_RCC_OscConfig+0x36e>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	2b05      	cmp	r3, #5
 8002582:	d10c      	bne.n	800259e <HAL_RCC_OscConfig+0x356>
 8002584:	4b61      	ldr	r3, [pc, #388]	@ (800270c <HAL_RCC_OscConfig+0x4c4>)
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	4a60      	ldr	r2, [pc, #384]	@ (800270c <HAL_RCC_OscConfig+0x4c4>)
 800258a:	f043 0304 	orr.w	r3, r3, #4
 800258e:	6213      	str	r3, [r2, #32]
 8002590:	4b5e      	ldr	r3, [pc, #376]	@ (800270c <HAL_RCC_OscConfig+0x4c4>)
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	4a5d      	ldr	r2, [pc, #372]	@ (800270c <HAL_RCC_OscConfig+0x4c4>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	6213      	str	r3, [r2, #32]
 800259c:	e00b      	b.n	80025b6 <HAL_RCC_OscConfig+0x36e>
 800259e:	4b5b      	ldr	r3, [pc, #364]	@ (800270c <HAL_RCC_OscConfig+0x4c4>)
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	4a5a      	ldr	r2, [pc, #360]	@ (800270c <HAL_RCC_OscConfig+0x4c4>)
 80025a4:	f023 0301 	bic.w	r3, r3, #1
 80025a8:	6213      	str	r3, [r2, #32]
 80025aa:	4b58      	ldr	r3, [pc, #352]	@ (800270c <HAL_RCC_OscConfig+0x4c4>)
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	4a57      	ldr	r2, [pc, #348]	@ (800270c <HAL_RCC_OscConfig+0x4c4>)
 80025b0:	f023 0304 	bic.w	r3, r3, #4
 80025b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d015      	beq.n	80025ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025be:	f7ff fae1 	bl	8001b84 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c4:	e00a      	b.n	80025dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c6:	f7ff fadd 	bl	8001b84 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e0b1      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025dc:	4b4b      	ldr	r3, [pc, #300]	@ (800270c <HAL_RCC_OscConfig+0x4c4>)
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0ee      	beq.n	80025c6 <HAL_RCC_OscConfig+0x37e>
 80025e8:	e014      	b.n	8002614 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ea:	f7ff facb 	bl	8001b84 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f0:	e00a      	b.n	8002608 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f2:	f7ff fac7 	bl	8001b84 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002600:	4293      	cmp	r3, r2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e09b      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002608:	4b40      	ldr	r3, [pc, #256]	@ (800270c <HAL_RCC_OscConfig+0x4c4>)
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1ee      	bne.n	80025f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002614:	7dfb      	ldrb	r3, [r7, #23]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d105      	bne.n	8002626 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800261a:	4b3c      	ldr	r3, [pc, #240]	@ (800270c <HAL_RCC_OscConfig+0x4c4>)
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	4a3b      	ldr	r2, [pc, #236]	@ (800270c <HAL_RCC_OscConfig+0x4c4>)
 8002620:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002624:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 8087 	beq.w	800273e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002630:	4b36      	ldr	r3, [pc, #216]	@ (800270c <HAL_RCC_OscConfig+0x4c4>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 030c 	and.w	r3, r3, #12
 8002638:	2b08      	cmp	r3, #8
 800263a:	d061      	beq.n	8002700 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	2b02      	cmp	r3, #2
 8002642:	d146      	bne.n	80026d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002644:	4b33      	ldr	r3, [pc, #204]	@ (8002714 <HAL_RCC_OscConfig+0x4cc>)
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264a:	f7ff fa9b 	bl	8001b84 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002652:	f7ff fa97 	bl	8001b84 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e06d      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002664:	4b29      	ldr	r3, [pc, #164]	@ (800270c <HAL_RCC_OscConfig+0x4c4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1f0      	bne.n	8002652 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002678:	d108      	bne.n	800268c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800267a:	4b24      	ldr	r3, [pc, #144]	@ (800270c <HAL_RCC_OscConfig+0x4c4>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	4921      	ldr	r1, [pc, #132]	@ (800270c <HAL_RCC_OscConfig+0x4c4>)
 8002688:	4313      	orrs	r3, r2
 800268a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800268c:	4b1f      	ldr	r3, [pc, #124]	@ (800270c <HAL_RCC_OscConfig+0x4c4>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a19      	ldr	r1, [r3, #32]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269c:	430b      	orrs	r3, r1
 800269e:	491b      	ldr	r1, [pc, #108]	@ (800270c <HAL_RCC_OscConfig+0x4c4>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002714 <HAL_RCC_OscConfig+0x4cc>)
 80026a6:	2201      	movs	r2, #1
 80026a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026aa:	f7ff fa6b 	bl	8001b84 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b2:	f7ff fa67 	bl	8001b84 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e03d      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026c4:	4b11      	ldr	r3, [pc, #68]	@ (800270c <HAL_RCC_OscConfig+0x4c4>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0f0      	beq.n	80026b2 <HAL_RCC_OscConfig+0x46a>
 80026d0:	e035      	b.n	800273e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d2:	4b10      	ldr	r3, [pc, #64]	@ (8002714 <HAL_RCC_OscConfig+0x4cc>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d8:	f7ff fa54 	bl	8001b84 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e0:	f7ff fa50 	bl	8001b84 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e026      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f2:	4b06      	ldr	r3, [pc, #24]	@ (800270c <HAL_RCC_OscConfig+0x4c4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0x498>
 80026fe:	e01e      	b.n	800273e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d107      	bne.n	8002718 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e019      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>
 800270c:	40021000 	.word	0x40021000
 8002710:	40007000 	.word	0x40007000
 8002714:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002718:	4b0b      	ldr	r3, [pc, #44]	@ (8002748 <HAL_RCC_OscConfig+0x500>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	429a      	cmp	r2, r3
 800272a:	d106      	bne.n	800273a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002736:	429a      	cmp	r2, r3
 8002738:	d001      	beq.n	800273e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40021000 	.word	0x40021000

0800274c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e0d0      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002760:	4b6a      	ldr	r3, [pc, #424]	@ (800290c <HAL_RCC_ClockConfig+0x1c0>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d910      	bls.n	8002790 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276e:	4b67      	ldr	r3, [pc, #412]	@ (800290c <HAL_RCC_ClockConfig+0x1c0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 0207 	bic.w	r2, r3, #7
 8002776:	4965      	ldr	r1, [pc, #404]	@ (800290c <HAL_RCC_ClockConfig+0x1c0>)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800277e:	4b63      	ldr	r3, [pc, #396]	@ (800290c <HAL_RCC_ClockConfig+0x1c0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	429a      	cmp	r2, r3
 800278a:	d001      	beq.n	8002790 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e0b8      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d020      	beq.n	80027de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d005      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027a8:	4b59      	ldr	r3, [pc, #356]	@ (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	4a58      	ldr	r2, [pc, #352]	@ (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80027b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0308 	and.w	r3, r3, #8
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027c0:	4b53      	ldr	r3, [pc, #332]	@ (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	4a52      	ldr	r2, [pc, #328]	@ (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80027ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027cc:	4b50      	ldr	r3, [pc, #320]	@ (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	494d      	ldr	r1, [pc, #308]	@ (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d040      	beq.n	800286c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d107      	bne.n	8002802 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f2:	4b47      	ldr	r3, [pc, #284]	@ (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d115      	bne.n	800282a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e07f      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b02      	cmp	r3, #2
 8002808:	d107      	bne.n	800281a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280a:	4b41      	ldr	r3, [pc, #260]	@ (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d109      	bne.n	800282a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e073      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281a:	4b3d      	ldr	r3, [pc, #244]	@ (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e06b      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800282a:	4b39      	ldr	r3, [pc, #228]	@ (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f023 0203 	bic.w	r2, r3, #3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	4936      	ldr	r1, [pc, #216]	@ (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	4313      	orrs	r3, r2
 800283a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800283c:	f7ff f9a2 	bl	8001b84 <HAL_GetTick>
 8002840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002842:	e00a      	b.n	800285a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002844:	f7ff f99e 	bl	8001b84 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002852:	4293      	cmp	r3, r2
 8002854:	d901      	bls.n	800285a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e053      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285a:	4b2d      	ldr	r3, [pc, #180]	@ (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f003 020c 	and.w	r2, r3, #12
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	429a      	cmp	r2, r3
 800286a:	d1eb      	bne.n	8002844 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800286c:	4b27      	ldr	r3, [pc, #156]	@ (800290c <HAL_RCC_ClockConfig+0x1c0>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d210      	bcs.n	800289c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287a:	4b24      	ldr	r3, [pc, #144]	@ (800290c <HAL_RCC_ClockConfig+0x1c0>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f023 0207 	bic.w	r2, r3, #7
 8002882:	4922      	ldr	r1, [pc, #136]	@ (800290c <HAL_RCC_ClockConfig+0x1c0>)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	4313      	orrs	r3, r2
 8002888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800288a:	4b20      	ldr	r3, [pc, #128]	@ (800290c <HAL_RCC_ClockConfig+0x1c0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	d001      	beq.n	800289c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e032      	b.n	8002902 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d008      	beq.n	80028ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028a8:	4b19      	ldr	r3, [pc, #100]	@ (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	4916      	ldr	r1, [pc, #88]	@ (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d009      	beq.n	80028da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028c6:	4b12      	ldr	r3, [pc, #72]	@ (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	490e      	ldr	r1, [pc, #56]	@ (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028da:	f000 f821 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 80028de:	4602      	mov	r2, r0
 80028e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002910 <HAL_RCC_ClockConfig+0x1c4>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	091b      	lsrs	r3, r3, #4
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	490a      	ldr	r1, [pc, #40]	@ (8002914 <HAL_RCC_ClockConfig+0x1c8>)
 80028ec:	5ccb      	ldrb	r3, [r1, r3]
 80028ee:	fa22 f303 	lsr.w	r3, r2, r3
 80028f2:	4a09      	ldr	r2, [pc, #36]	@ (8002918 <HAL_RCC_ClockConfig+0x1cc>)
 80028f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028f6:	4b09      	ldr	r3, [pc, #36]	@ (800291c <HAL_RCC_ClockConfig+0x1d0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff f900 	bl	8001b00 <HAL_InitTick>

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40022000 	.word	0x40022000
 8002910:	40021000 	.word	0x40021000
 8002914:	08004b3c 	.word	0x08004b3c
 8002918:	20000000 	.word	0x20000000
 800291c:	20000004 	.word	0x20000004

08002920 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	2300      	movs	r3, #0
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	2300      	movs	r3, #0
 8002934:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002936:	2300      	movs	r3, #0
 8002938:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800293a:	4b1e      	ldr	r3, [pc, #120]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	2b04      	cmp	r3, #4
 8002948:	d002      	beq.n	8002950 <HAL_RCC_GetSysClockFreq+0x30>
 800294a:	2b08      	cmp	r3, #8
 800294c:	d003      	beq.n	8002956 <HAL_RCC_GetSysClockFreq+0x36>
 800294e:	e027      	b.n	80029a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002950:	4b19      	ldr	r3, [pc, #100]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002952:	613b      	str	r3, [r7, #16]
      break;
 8002954:	e027      	b.n	80029a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	0c9b      	lsrs	r3, r3, #18
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	4a17      	ldr	r2, [pc, #92]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002960:	5cd3      	ldrb	r3, [r2, r3]
 8002962:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d010      	beq.n	8002990 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800296e:	4b11      	ldr	r3, [pc, #68]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	0c5b      	lsrs	r3, r3, #17
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	4a11      	ldr	r2, [pc, #68]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800297a:	5cd3      	ldrb	r3, [r2, r3]
 800297c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a0d      	ldr	r2, [pc, #52]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002982:	fb03 f202 	mul.w	r2, r3, r2
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	fbb2 f3f3 	udiv	r3, r2, r3
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	e004      	b.n	800299a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a0c      	ldr	r2, [pc, #48]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002994:	fb02 f303 	mul.w	r3, r2, r3
 8002998:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	613b      	str	r3, [r7, #16]
      break;
 800299e:	e002      	b.n	80029a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029a0:	4b05      	ldr	r3, [pc, #20]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80029a2:	613b      	str	r3, [r7, #16]
      break;
 80029a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029a6:	693b      	ldr	r3, [r7, #16]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	371c      	adds	r7, #28
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40021000 	.word	0x40021000
 80029b8:	007a1200 	.word	0x007a1200
 80029bc:	08004b4c 	.word	0x08004b4c
 80029c0:	08004b5c 	.word	0x08004b5c
 80029c4:	003d0900 	.word	0x003d0900

080029c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029d0:	4b0a      	ldr	r3, [pc, #40]	@ (80029fc <RCC_Delay+0x34>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002a00 <RCC_Delay+0x38>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	0a5b      	lsrs	r3, r3, #9
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	fb02 f303 	mul.w	r3, r2, r3
 80029e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029e4:	bf00      	nop
  }
  while (Delay --);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1e5a      	subs	r2, r3, #1
 80029ea:	60fa      	str	r2, [r7, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1f9      	bne.n	80029e4 <RCC_Delay+0x1c>
}
 80029f0:	bf00      	nop
 80029f2:	bf00      	nop
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr
 80029fc:	20000000 	.word	0x20000000
 8002a00:	10624dd3 	.word	0x10624dd3

08002a04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e076      	b.n	8002b04 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d108      	bne.n	8002a30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a26:	d009      	beq.n	8002a3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	61da      	str	r2, [r3, #28]
 8002a2e:	e005      	b.n	8002a3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d106      	bne.n	8002a5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7fe fef4 	bl	8001844 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002a84:	431a      	orrs	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002aac:	431a      	orrs	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac0:	ea42 0103 	orr.w	r1, r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	0c1a      	lsrs	r2, r3, #16
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f002 0204 	and.w	r2, r2, #4
 8002ae2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	69da      	ldr	r2, [r3, #28]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002af2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b088      	sub	sp, #32
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	603b      	str	r3, [r7, #0]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b1c:	f7ff f832 	bl	8001b84 <HAL_GetTick>
 8002b20:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002b22:	88fb      	ldrh	r3, [r7, #6]
 8002b24:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d001      	beq.n	8002b36 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002b32:	2302      	movs	r3, #2
 8002b34:	e12a      	b.n	8002d8c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d002      	beq.n	8002b42 <HAL_SPI_Transmit+0x36>
 8002b3c:	88fb      	ldrh	r3, [r7, #6]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e122      	b.n	8002d8c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d101      	bne.n	8002b54 <HAL_SPI_Transmit+0x48>
 8002b50:	2302      	movs	r3, #2
 8002b52:	e11b      	b.n	8002d8c <HAL_SPI_Transmit+0x280>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2203      	movs	r2, #3
 8002b60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	88fa      	ldrh	r2, [r7, #6]
 8002b74:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	88fa      	ldrh	r2, [r7, #6]
 8002b7a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ba2:	d10f      	bne.n	8002bc4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bb2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bc2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bce:	2b40      	cmp	r3, #64	@ 0x40
 8002bd0:	d007      	beq.n	8002be2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002be0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bea:	d152      	bne.n	8002c92 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d002      	beq.n	8002bfa <HAL_SPI_Transmit+0xee>
 8002bf4:	8b7b      	ldrh	r3, [r7, #26]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d145      	bne.n	8002c86 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfe:	881a      	ldrh	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0a:	1c9a      	adds	r2, r3, #2
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c1e:	e032      	b.n	8002c86 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d112      	bne.n	8002c54 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c32:	881a      	ldrh	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3e:	1c9a      	adds	r2, r3, #2
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002c52:	e018      	b.n	8002c86 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c54:	f7fe ff96 	bl	8001b84 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d803      	bhi.n	8002c6c <HAL_SPI_Transmit+0x160>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6a:	d102      	bne.n	8002c72 <HAL_SPI_Transmit+0x166>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d109      	bne.n	8002c86 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e082      	b.n	8002d8c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1c7      	bne.n	8002c20 <HAL_SPI_Transmit+0x114>
 8002c90:	e053      	b.n	8002d3a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <HAL_SPI_Transmit+0x194>
 8002c9a:	8b7b      	ldrh	r3, [r7, #26]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d147      	bne.n	8002d30 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	330c      	adds	r3, #12
 8002caa:	7812      	ldrb	r2, [r2, #0]
 8002cac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002cc6:	e033      	b.n	8002d30 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d113      	bne.n	8002cfe <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	330c      	adds	r3, #12
 8002ce0:	7812      	ldrb	r2, [r2, #0]
 8002ce2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002cfc:	e018      	b.n	8002d30 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cfe:	f7fe ff41 	bl	8001b84 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d803      	bhi.n	8002d16 <HAL_SPI_Transmit+0x20a>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d14:	d102      	bne.n	8002d1c <HAL_SPI_Transmit+0x210>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d109      	bne.n	8002d30 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e02d      	b.n	8002d8c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1c6      	bne.n	8002cc8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d3a:	69fa      	ldr	r2, [r7, #28]
 8002d3c:	6839      	ldr	r1, [r7, #0]
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 fbd2 	bl	80034e8 <SPI_EndRxTxTransaction>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10a      	bne.n	8002d6e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
  }
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3720      	adds	r7, #32
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af02      	add	r7, sp, #8
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	4613      	mov	r3, r2
 8002da2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d001      	beq.n	8002db4 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002db0:	2302      	movs	r3, #2
 8002db2:	e104      	b.n	8002fbe <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dbc:	d112      	bne.n	8002de4 <HAL_SPI_Receive+0x50>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10e      	bne.n	8002de4 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2204      	movs	r2, #4
 8002dca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002dce:	88fa      	ldrh	r2, [r7, #6]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	68b9      	ldr	r1, [r7, #8]
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 f8f3 	bl	8002fc6 <HAL_SPI_TransmitReceive>
 8002de0:	4603      	mov	r3, r0
 8002de2:	e0ec      	b.n	8002fbe <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002de4:	f7fe fece 	bl	8001b84 <HAL_GetTick>
 8002de8:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <HAL_SPI_Receive+0x62>
 8002df0:	88fb      	ldrh	r3, [r7, #6]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e0e1      	b.n	8002fbe <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <HAL_SPI_Receive+0x74>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e0da      	b.n	8002fbe <HAL_SPI_Receive+0x22a>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2204      	movs	r2, #4
 8002e14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	88fa      	ldrh	r2, [r7, #6]
 8002e28:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	88fa      	ldrh	r2, [r7, #6]
 8002e2e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e56:	d10f      	bne.n	8002e78 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002e76:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e82:	2b40      	cmp	r3, #64	@ 0x40
 8002e84:	d007      	beq.n	8002e96 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e94:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d170      	bne.n	8002f80 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002e9e:	e035      	b.n	8002f0c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d115      	bne.n	8002eda <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f103 020c 	add.w	r2, r3, #12
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eba:	7812      	ldrb	r2, [r2, #0]
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ed8:	e018      	b.n	8002f0c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002eda:	f7fe fe53 	bl	8001b84 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d803      	bhi.n	8002ef2 <HAL_SPI_Receive+0x15e>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef0:	d102      	bne.n	8002ef8 <HAL_SPI_Receive+0x164>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d109      	bne.n	8002f0c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e058      	b.n	8002fbe <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1c4      	bne.n	8002ea0 <HAL_SPI_Receive+0x10c>
 8002f16:	e038      	b.n	8002f8a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d113      	bne.n	8002f4e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f30:	b292      	uxth	r2, r2
 8002f32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f38:	1c9a      	adds	r2, r3, #2
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f4c:	e018      	b.n	8002f80 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f4e:	f7fe fe19 	bl	8001b84 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d803      	bhi.n	8002f66 <HAL_SPI_Receive+0x1d2>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f64:	d102      	bne.n	8002f6c <HAL_SPI_Receive+0x1d8>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d109      	bne.n	8002f80 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e01e      	b.n	8002fbe <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1c6      	bne.n	8002f18 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	6839      	ldr	r1, [r7, #0]
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 fa58 	bl	8003444 <SPI_EndRxTransaction>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d002      	beq.n	8002fa0 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e000      	b.n	8002fbe <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
  }
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b08a      	sub	sp, #40	@ 0x28
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	60f8      	str	r0, [r7, #12]
 8002fce:	60b9      	str	r1, [r7, #8]
 8002fd0:	607a      	str	r2, [r7, #4]
 8002fd2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fd8:	f7fe fdd4 	bl	8001b84 <HAL_GetTick>
 8002fdc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002fe4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002fec:	887b      	ldrh	r3, [r7, #2]
 8002fee:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ff0:	7ffb      	ldrb	r3, [r7, #31]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d00c      	beq.n	8003010 <HAL_SPI_TransmitReceive+0x4a>
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ffc:	d106      	bne.n	800300c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d102      	bne.n	800300c <HAL_SPI_TransmitReceive+0x46>
 8003006:	7ffb      	ldrb	r3, [r7, #31]
 8003008:	2b04      	cmp	r3, #4
 800300a:	d001      	beq.n	8003010 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800300c:	2302      	movs	r3, #2
 800300e:	e17f      	b.n	8003310 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <HAL_SPI_TransmitReceive+0x5c>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <HAL_SPI_TransmitReceive+0x5c>
 800301c:	887b      	ldrh	r3, [r7, #2]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e174      	b.n	8003310 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800302c:	2b01      	cmp	r3, #1
 800302e:	d101      	bne.n	8003034 <HAL_SPI_TransmitReceive+0x6e>
 8003030:	2302      	movs	r3, #2
 8003032:	e16d      	b.n	8003310 <HAL_SPI_TransmitReceive+0x34a>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b04      	cmp	r3, #4
 8003046:	d003      	beq.n	8003050 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2205      	movs	r2, #5
 800304c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	887a      	ldrh	r2, [r7, #2]
 8003060:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	887a      	ldrh	r2, [r7, #2]
 8003066:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	887a      	ldrh	r2, [r7, #2]
 8003072:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	887a      	ldrh	r2, [r7, #2]
 8003078:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003090:	2b40      	cmp	r3, #64	@ 0x40
 8003092:	d007      	beq.n	80030a4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030ac:	d17e      	bne.n	80031ac <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <HAL_SPI_TransmitReceive+0xf6>
 80030b6:	8afb      	ldrh	r3, [r7, #22]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d16c      	bne.n	8003196 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c0:	881a      	ldrh	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030cc:	1c9a      	adds	r2, r3, #2
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030e0:	e059      	b.n	8003196 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d11b      	bne.n	8003128 <HAL_SPI_TransmitReceive+0x162>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d016      	beq.n	8003128 <HAL_SPI_TransmitReceive+0x162>
 80030fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d113      	bne.n	8003128 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003104:	881a      	ldrh	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003110:	1c9a      	adds	r2, r3, #2
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800311a:	b29b      	uxth	r3, r3
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b01      	cmp	r3, #1
 8003134:	d119      	bne.n	800316a <HAL_SPI_TransmitReceive+0x1a4>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800313a:	b29b      	uxth	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d014      	beq.n	800316a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800314a:	b292      	uxth	r2, r2
 800314c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003152:	1c9a      	adds	r2, r3, #2
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800315c:	b29b      	uxth	r3, r3
 800315e:	3b01      	subs	r3, #1
 8003160:	b29a      	uxth	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003166:	2301      	movs	r3, #1
 8003168:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800316a:	f7fe fd0b 	bl	8001b84 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003176:	429a      	cmp	r2, r3
 8003178:	d80d      	bhi.n	8003196 <HAL_SPI_TransmitReceive+0x1d0>
 800317a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800317c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003180:	d009      	beq.n	8003196 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e0bc      	b.n	8003310 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800319a:	b29b      	uxth	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1a0      	bne.n	80030e2 <HAL_SPI_TransmitReceive+0x11c>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d19b      	bne.n	80030e2 <HAL_SPI_TransmitReceive+0x11c>
 80031aa:	e082      	b.n	80032b2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <HAL_SPI_TransmitReceive+0x1f4>
 80031b4:	8afb      	ldrh	r3, [r7, #22]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d171      	bne.n	800329e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	330c      	adds	r3, #12
 80031c4:	7812      	ldrb	r2, [r2, #0]
 80031c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031e0:	e05d      	b.n	800329e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d11c      	bne.n	800322a <HAL_SPI_TransmitReceive+0x264>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d017      	beq.n	800322a <HAL_SPI_TransmitReceive+0x264>
 80031fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d114      	bne.n	800322a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	330c      	adds	r3, #12
 800320a:	7812      	ldrb	r2, [r2, #0]
 800320c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800321c:	b29b      	uxth	r3, r3
 800321e:	3b01      	subs	r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b01      	cmp	r3, #1
 8003236:	d119      	bne.n	800326c <HAL_SPI_TransmitReceive+0x2a6>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800323c:	b29b      	uxth	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d014      	beq.n	800326c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800325e:	b29b      	uxth	r3, r3
 8003260:	3b01      	subs	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003268:	2301      	movs	r3, #1
 800326a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800326c:	f7fe fc8a 	bl	8001b84 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	6a3b      	ldr	r3, [r7, #32]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003278:	429a      	cmp	r2, r3
 800327a:	d803      	bhi.n	8003284 <HAL_SPI_TransmitReceive+0x2be>
 800327c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800327e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003282:	d102      	bne.n	800328a <HAL_SPI_TransmitReceive+0x2c4>
 8003284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003286:	2b00      	cmp	r3, #0
 8003288:	d109      	bne.n	800329e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e038      	b.n	8003310 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d19c      	bne.n	80031e2 <HAL_SPI_TransmitReceive+0x21c>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d197      	bne.n	80031e2 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032b2:	6a3a      	ldr	r2, [r7, #32]
 80032b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 f916 	bl	80034e8 <SPI_EndRxTxTransaction>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d008      	beq.n	80032d4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2220      	movs	r2, #32
 80032c6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e01d      	b.n	8003310 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10a      	bne.n	80032f2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032dc:	2300      	movs	r3, #0
 80032de:	613b      	str	r3, [r7, #16]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	613b      	str	r3, [r7, #16]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	613b      	str	r3, [r7, #16]
 80032f0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800330e:	2300      	movs	r3, #0
  }
}
 8003310:	4618      	mov	r0, r3
 8003312:	3728      	adds	r7, #40	@ 0x28
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003326:	b2db      	uxtb	r3, r3
}
 8003328:	4618      	mov	r0, r3
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	bc80      	pop	{r7}
 8003330:	4770      	bx	lr
	...

08003334 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b088      	sub	sp, #32
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	4613      	mov	r3, r2
 8003342:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003344:	f7fe fc1e 	bl	8001b84 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800334c:	1a9b      	subs	r3, r3, r2
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	4413      	add	r3, r2
 8003352:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003354:	f7fe fc16 	bl	8001b84 <HAL_GetTick>
 8003358:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800335a:	4b39      	ldr	r3, [pc, #228]	@ (8003440 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	015b      	lsls	r3, r3, #5
 8003360:	0d1b      	lsrs	r3, r3, #20
 8003362:	69fa      	ldr	r2, [r7, #28]
 8003364:	fb02 f303 	mul.w	r3, r2, r3
 8003368:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800336a:	e054      	b.n	8003416 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003372:	d050      	beq.n	8003416 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003374:	f7fe fc06 	bl	8001b84 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	69fa      	ldr	r2, [r7, #28]
 8003380:	429a      	cmp	r2, r3
 8003382:	d902      	bls.n	800338a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d13d      	bne.n	8003406 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003398:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033a2:	d111      	bne.n	80033c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033ac:	d004      	beq.n	80033b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033b6:	d107      	bne.n	80033c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033d0:	d10f      	bne.n	80033f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e017      	b.n	8003436 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	3b01      	subs	r3, #1
 8003414:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	4013      	ands	r3, r2
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	429a      	cmp	r2, r3
 8003424:	bf0c      	ite	eq
 8003426:	2301      	moveq	r3, #1
 8003428:	2300      	movne	r3, #0
 800342a:	b2db      	uxtb	r3, r3
 800342c:	461a      	mov	r2, r3
 800342e:	79fb      	ldrb	r3, [r7, #7]
 8003430:	429a      	cmp	r2, r3
 8003432:	d19b      	bne.n	800336c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3720      	adds	r7, #32
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	20000000 	.word	0x20000000

08003444 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af02      	add	r7, sp, #8
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003458:	d111      	bne.n	800347e <SPI_EndRxTransaction+0x3a>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003462:	d004      	beq.n	800346e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800346c:	d107      	bne.n	800347e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800347c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003486:	d117      	bne.n	80034b8 <SPI_EndRxTransaction+0x74>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003490:	d112      	bne.n	80034b8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2200      	movs	r2, #0
 800349a:	2101      	movs	r1, #1
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f7ff ff49 	bl	8003334 <SPI_WaitFlagStateUntilTimeout>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d01a      	beq.n	80034de <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ac:	f043 0220 	orr.w	r2, r3, #32
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e013      	b.n	80034e0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2200      	movs	r2, #0
 80034c0:	2180      	movs	r1, #128	@ 0x80
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f7ff ff36 	bl	8003334 <SPI_WaitFlagStateUntilTimeout>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d007      	beq.n	80034de <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034d2:	f043 0220 	orr.w	r2, r3, #32
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e000      	b.n	80034e0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af02      	add	r7, sp, #8
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2201      	movs	r2, #1
 80034fc:	2102      	movs	r1, #2
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f7ff ff18 	bl	8003334 <SPI_WaitFlagStateUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d007      	beq.n	800351a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800350e:	f043 0220 	orr.w	r2, r3, #32
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e013      	b.n	8003542 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2200      	movs	r2, #0
 8003522:	2180      	movs	r1, #128	@ 0x80
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f7ff ff05 	bl	8003334 <SPI_WaitFlagStateUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d007      	beq.n	8003540 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e000      	b.n	8003542 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <_strtoul_l.isra.0>:
 800354c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003550:	4686      	mov	lr, r0
 8003552:	460d      	mov	r5, r1
 8003554:	4e33      	ldr	r6, [pc, #204]	@ (8003624 <_strtoul_l.isra.0+0xd8>)
 8003556:	4628      	mov	r0, r5
 8003558:	f815 4b01 	ldrb.w	r4, [r5], #1
 800355c:	5d37      	ldrb	r7, [r6, r4]
 800355e:	f017 0708 	ands.w	r7, r7, #8
 8003562:	d1f8      	bne.n	8003556 <_strtoul_l.isra.0+0xa>
 8003564:	2c2d      	cmp	r4, #45	@ 0x2d
 8003566:	d110      	bne.n	800358a <_strtoul_l.isra.0+0x3e>
 8003568:	2701      	movs	r7, #1
 800356a:	782c      	ldrb	r4, [r5, #0]
 800356c:	1c85      	adds	r5, r0, #2
 800356e:	f033 0010 	bics.w	r0, r3, #16
 8003572:	d115      	bne.n	80035a0 <_strtoul_l.isra.0+0x54>
 8003574:	2c30      	cmp	r4, #48	@ 0x30
 8003576:	d10d      	bne.n	8003594 <_strtoul_l.isra.0+0x48>
 8003578:	7828      	ldrb	r0, [r5, #0]
 800357a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800357e:	2858      	cmp	r0, #88	@ 0x58
 8003580:	d108      	bne.n	8003594 <_strtoul_l.isra.0+0x48>
 8003582:	786c      	ldrb	r4, [r5, #1]
 8003584:	3502      	adds	r5, #2
 8003586:	2310      	movs	r3, #16
 8003588:	e00a      	b.n	80035a0 <_strtoul_l.isra.0+0x54>
 800358a:	2c2b      	cmp	r4, #43	@ 0x2b
 800358c:	bf04      	itt	eq
 800358e:	782c      	ldrbeq	r4, [r5, #0]
 8003590:	1c85      	addeq	r5, r0, #2
 8003592:	e7ec      	b.n	800356e <_strtoul_l.isra.0+0x22>
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1f6      	bne.n	8003586 <_strtoul_l.isra.0+0x3a>
 8003598:	2c30      	cmp	r4, #48	@ 0x30
 800359a:	bf14      	ite	ne
 800359c:	230a      	movne	r3, #10
 800359e:	2308      	moveq	r3, #8
 80035a0:	f04f 38ff 	mov.w	r8, #4294967295
 80035a4:	fbb8 f8f3 	udiv	r8, r8, r3
 80035a8:	2600      	movs	r6, #0
 80035aa:	fb03 f908 	mul.w	r9, r3, r8
 80035ae:	4630      	mov	r0, r6
 80035b0:	ea6f 0909 	mvn.w	r9, r9
 80035b4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80035b8:	f1bc 0f09 	cmp.w	ip, #9
 80035bc:	d810      	bhi.n	80035e0 <_strtoul_l.isra.0+0x94>
 80035be:	4664      	mov	r4, ip
 80035c0:	42a3      	cmp	r3, r4
 80035c2:	dd1e      	ble.n	8003602 <_strtoul_l.isra.0+0xb6>
 80035c4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80035c8:	d007      	beq.n	80035da <_strtoul_l.isra.0+0x8e>
 80035ca:	4580      	cmp	r8, r0
 80035cc:	d316      	bcc.n	80035fc <_strtoul_l.isra.0+0xb0>
 80035ce:	d101      	bne.n	80035d4 <_strtoul_l.isra.0+0x88>
 80035d0:	45a1      	cmp	r9, r4
 80035d2:	db13      	blt.n	80035fc <_strtoul_l.isra.0+0xb0>
 80035d4:	2601      	movs	r6, #1
 80035d6:	fb00 4003 	mla	r0, r0, r3, r4
 80035da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80035de:	e7e9      	b.n	80035b4 <_strtoul_l.isra.0+0x68>
 80035e0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80035e4:	f1bc 0f19 	cmp.w	ip, #25
 80035e8:	d801      	bhi.n	80035ee <_strtoul_l.isra.0+0xa2>
 80035ea:	3c37      	subs	r4, #55	@ 0x37
 80035ec:	e7e8      	b.n	80035c0 <_strtoul_l.isra.0+0x74>
 80035ee:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80035f2:	f1bc 0f19 	cmp.w	ip, #25
 80035f6:	d804      	bhi.n	8003602 <_strtoul_l.isra.0+0xb6>
 80035f8:	3c57      	subs	r4, #87	@ 0x57
 80035fa:	e7e1      	b.n	80035c0 <_strtoul_l.isra.0+0x74>
 80035fc:	f04f 36ff 	mov.w	r6, #4294967295
 8003600:	e7eb      	b.n	80035da <_strtoul_l.isra.0+0x8e>
 8003602:	1c73      	adds	r3, r6, #1
 8003604:	d106      	bne.n	8003614 <_strtoul_l.isra.0+0xc8>
 8003606:	2322      	movs	r3, #34	@ 0x22
 8003608:	4630      	mov	r0, r6
 800360a:	f8ce 3000 	str.w	r3, [lr]
 800360e:	b932      	cbnz	r2, 800361e <_strtoul_l.isra.0+0xd2>
 8003610:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003614:	b107      	cbz	r7, 8003618 <_strtoul_l.isra.0+0xcc>
 8003616:	4240      	negs	r0, r0
 8003618:	2a00      	cmp	r2, #0
 800361a:	d0f9      	beq.n	8003610 <_strtoul_l.isra.0+0xc4>
 800361c:	b106      	cbz	r6, 8003620 <_strtoul_l.isra.0+0xd4>
 800361e:	1e69      	subs	r1, r5, #1
 8003620:	6011      	str	r1, [r2, #0]
 8003622:	e7f5      	b.n	8003610 <_strtoul_l.isra.0+0xc4>
 8003624:	08004b5f 	.word	0x08004b5f

08003628 <strtoul>:
 8003628:	4613      	mov	r3, r2
 800362a:	460a      	mov	r2, r1
 800362c:	4601      	mov	r1, r0
 800362e:	4802      	ldr	r0, [pc, #8]	@ (8003638 <strtoul+0x10>)
 8003630:	6800      	ldr	r0, [r0, #0]
 8003632:	f7ff bf8b 	b.w	800354c <_strtoul_l.isra.0>
 8003636:	bf00      	nop
 8003638:	20000018 	.word	0x20000018

0800363c <std>:
 800363c:	2300      	movs	r3, #0
 800363e:	b510      	push	{r4, lr}
 8003640:	4604      	mov	r4, r0
 8003642:	e9c0 3300 	strd	r3, r3, [r0]
 8003646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800364a:	6083      	str	r3, [r0, #8]
 800364c:	8181      	strh	r1, [r0, #12]
 800364e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003650:	81c2      	strh	r2, [r0, #14]
 8003652:	6183      	str	r3, [r0, #24]
 8003654:	4619      	mov	r1, r3
 8003656:	2208      	movs	r2, #8
 8003658:	305c      	adds	r0, #92	@ 0x5c
 800365a:	f000 fa2f 	bl	8003abc <memset>
 800365e:	4b0d      	ldr	r3, [pc, #52]	@ (8003694 <std+0x58>)
 8003660:	6224      	str	r4, [r4, #32]
 8003662:	6263      	str	r3, [r4, #36]	@ 0x24
 8003664:	4b0c      	ldr	r3, [pc, #48]	@ (8003698 <std+0x5c>)
 8003666:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003668:	4b0c      	ldr	r3, [pc, #48]	@ (800369c <std+0x60>)
 800366a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800366c:	4b0c      	ldr	r3, [pc, #48]	@ (80036a0 <std+0x64>)
 800366e:	6323      	str	r3, [r4, #48]	@ 0x30
 8003670:	4b0c      	ldr	r3, [pc, #48]	@ (80036a4 <std+0x68>)
 8003672:	429c      	cmp	r4, r3
 8003674:	d006      	beq.n	8003684 <std+0x48>
 8003676:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800367a:	4294      	cmp	r4, r2
 800367c:	d002      	beq.n	8003684 <std+0x48>
 800367e:	33d0      	adds	r3, #208	@ 0xd0
 8003680:	429c      	cmp	r4, r3
 8003682:	d105      	bne.n	8003690 <std+0x54>
 8003684:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800368c:	f000 ba8e 	b.w	8003bac <__retarget_lock_init_recursive>
 8003690:	bd10      	pop	{r4, pc}
 8003692:	bf00      	nop
 8003694:	0800390d 	.word	0x0800390d
 8003698:	0800392f 	.word	0x0800392f
 800369c:	08003967 	.word	0x08003967
 80036a0:	0800398b 	.word	0x0800398b
 80036a4:	2000019c 	.word	0x2000019c

080036a8 <stdio_exit_handler>:
 80036a8:	4a02      	ldr	r2, [pc, #8]	@ (80036b4 <stdio_exit_handler+0xc>)
 80036aa:	4903      	ldr	r1, [pc, #12]	@ (80036b8 <stdio_exit_handler+0x10>)
 80036ac:	4803      	ldr	r0, [pc, #12]	@ (80036bc <stdio_exit_handler+0x14>)
 80036ae:	f000 b869 	b.w	8003784 <_fwalk_sglue>
 80036b2:	bf00      	nop
 80036b4:	2000000c 	.word	0x2000000c
 80036b8:	0800470d 	.word	0x0800470d
 80036bc:	2000001c 	.word	0x2000001c

080036c0 <cleanup_stdio>:
 80036c0:	6841      	ldr	r1, [r0, #4]
 80036c2:	4b0c      	ldr	r3, [pc, #48]	@ (80036f4 <cleanup_stdio+0x34>)
 80036c4:	b510      	push	{r4, lr}
 80036c6:	4299      	cmp	r1, r3
 80036c8:	4604      	mov	r4, r0
 80036ca:	d001      	beq.n	80036d0 <cleanup_stdio+0x10>
 80036cc:	f001 f81e 	bl	800470c <_fflush_r>
 80036d0:	68a1      	ldr	r1, [r4, #8]
 80036d2:	4b09      	ldr	r3, [pc, #36]	@ (80036f8 <cleanup_stdio+0x38>)
 80036d4:	4299      	cmp	r1, r3
 80036d6:	d002      	beq.n	80036de <cleanup_stdio+0x1e>
 80036d8:	4620      	mov	r0, r4
 80036da:	f001 f817 	bl	800470c <_fflush_r>
 80036de:	68e1      	ldr	r1, [r4, #12]
 80036e0:	4b06      	ldr	r3, [pc, #24]	@ (80036fc <cleanup_stdio+0x3c>)
 80036e2:	4299      	cmp	r1, r3
 80036e4:	d004      	beq.n	80036f0 <cleanup_stdio+0x30>
 80036e6:	4620      	mov	r0, r4
 80036e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036ec:	f001 b80e 	b.w	800470c <_fflush_r>
 80036f0:	bd10      	pop	{r4, pc}
 80036f2:	bf00      	nop
 80036f4:	2000019c 	.word	0x2000019c
 80036f8:	20000204 	.word	0x20000204
 80036fc:	2000026c 	.word	0x2000026c

08003700 <global_stdio_init.part.0>:
 8003700:	b510      	push	{r4, lr}
 8003702:	4b0b      	ldr	r3, [pc, #44]	@ (8003730 <global_stdio_init.part.0+0x30>)
 8003704:	4c0b      	ldr	r4, [pc, #44]	@ (8003734 <global_stdio_init.part.0+0x34>)
 8003706:	4a0c      	ldr	r2, [pc, #48]	@ (8003738 <global_stdio_init.part.0+0x38>)
 8003708:	4620      	mov	r0, r4
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	2104      	movs	r1, #4
 800370e:	2200      	movs	r2, #0
 8003710:	f7ff ff94 	bl	800363c <std>
 8003714:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003718:	2201      	movs	r2, #1
 800371a:	2109      	movs	r1, #9
 800371c:	f7ff ff8e 	bl	800363c <std>
 8003720:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003724:	2202      	movs	r2, #2
 8003726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800372a:	2112      	movs	r1, #18
 800372c:	f7ff bf86 	b.w	800363c <std>
 8003730:	200002d4 	.word	0x200002d4
 8003734:	2000019c 	.word	0x2000019c
 8003738:	080036a9 	.word	0x080036a9

0800373c <__sfp_lock_acquire>:
 800373c:	4801      	ldr	r0, [pc, #4]	@ (8003744 <__sfp_lock_acquire+0x8>)
 800373e:	f000 ba36 	b.w	8003bae <__retarget_lock_acquire_recursive>
 8003742:	bf00      	nop
 8003744:	200002dd 	.word	0x200002dd

08003748 <__sfp_lock_release>:
 8003748:	4801      	ldr	r0, [pc, #4]	@ (8003750 <__sfp_lock_release+0x8>)
 800374a:	f000 ba31 	b.w	8003bb0 <__retarget_lock_release_recursive>
 800374e:	bf00      	nop
 8003750:	200002dd 	.word	0x200002dd

08003754 <__sinit>:
 8003754:	b510      	push	{r4, lr}
 8003756:	4604      	mov	r4, r0
 8003758:	f7ff fff0 	bl	800373c <__sfp_lock_acquire>
 800375c:	6a23      	ldr	r3, [r4, #32]
 800375e:	b11b      	cbz	r3, 8003768 <__sinit+0x14>
 8003760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003764:	f7ff bff0 	b.w	8003748 <__sfp_lock_release>
 8003768:	4b04      	ldr	r3, [pc, #16]	@ (800377c <__sinit+0x28>)
 800376a:	6223      	str	r3, [r4, #32]
 800376c:	4b04      	ldr	r3, [pc, #16]	@ (8003780 <__sinit+0x2c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1f5      	bne.n	8003760 <__sinit+0xc>
 8003774:	f7ff ffc4 	bl	8003700 <global_stdio_init.part.0>
 8003778:	e7f2      	b.n	8003760 <__sinit+0xc>
 800377a:	bf00      	nop
 800377c:	080036c1 	.word	0x080036c1
 8003780:	200002d4 	.word	0x200002d4

08003784 <_fwalk_sglue>:
 8003784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003788:	4607      	mov	r7, r0
 800378a:	4688      	mov	r8, r1
 800378c:	4614      	mov	r4, r2
 800378e:	2600      	movs	r6, #0
 8003790:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003794:	f1b9 0901 	subs.w	r9, r9, #1
 8003798:	d505      	bpl.n	80037a6 <_fwalk_sglue+0x22>
 800379a:	6824      	ldr	r4, [r4, #0]
 800379c:	2c00      	cmp	r4, #0
 800379e:	d1f7      	bne.n	8003790 <_fwalk_sglue+0xc>
 80037a0:	4630      	mov	r0, r6
 80037a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037a6:	89ab      	ldrh	r3, [r5, #12]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d907      	bls.n	80037bc <_fwalk_sglue+0x38>
 80037ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037b0:	3301      	adds	r3, #1
 80037b2:	d003      	beq.n	80037bc <_fwalk_sglue+0x38>
 80037b4:	4629      	mov	r1, r5
 80037b6:	4638      	mov	r0, r7
 80037b8:	47c0      	blx	r8
 80037ba:	4306      	orrs	r6, r0
 80037bc:	3568      	adds	r5, #104	@ 0x68
 80037be:	e7e9      	b.n	8003794 <_fwalk_sglue+0x10>

080037c0 <iprintf>:
 80037c0:	b40f      	push	{r0, r1, r2, r3}
 80037c2:	b507      	push	{r0, r1, r2, lr}
 80037c4:	4906      	ldr	r1, [pc, #24]	@ (80037e0 <iprintf+0x20>)
 80037c6:	ab04      	add	r3, sp, #16
 80037c8:	6808      	ldr	r0, [r1, #0]
 80037ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80037ce:	6881      	ldr	r1, [r0, #8]
 80037d0:	9301      	str	r3, [sp, #4]
 80037d2:	f000 fc73 	bl	80040bc <_vfiprintf_r>
 80037d6:	b003      	add	sp, #12
 80037d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80037dc:	b004      	add	sp, #16
 80037de:	4770      	bx	lr
 80037e0:	20000018 	.word	0x20000018

080037e4 <_puts_r>:
 80037e4:	6a03      	ldr	r3, [r0, #32]
 80037e6:	b570      	push	{r4, r5, r6, lr}
 80037e8:	4605      	mov	r5, r0
 80037ea:	460e      	mov	r6, r1
 80037ec:	6884      	ldr	r4, [r0, #8]
 80037ee:	b90b      	cbnz	r3, 80037f4 <_puts_r+0x10>
 80037f0:	f7ff ffb0 	bl	8003754 <__sinit>
 80037f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80037f6:	07db      	lsls	r3, r3, #31
 80037f8:	d405      	bmi.n	8003806 <_puts_r+0x22>
 80037fa:	89a3      	ldrh	r3, [r4, #12]
 80037fc:	0598      	lsls	r0, r3, #22
 80037fe:	d402      	bmi.n	8003806 <_puts_r+0x22>
 8003800:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003802:	f000 f9d4 	bl	8003bae <__retarget_lock_acquire_recursive>
 8003806:	89a3      	ldrh	r3, [r4, #12]
 8003808:	0719      	lsls	r1, r3, #28
 800380a:	d502      	bpl.n	8003812 <_puts_r+0x2e>
 800380c:	6923      	ldr	r3, [r4, #16]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d135      	bne.n	800387e <_puts_r+0x9a>
 8003812:	4621      	mov	r1, r4
 8003814:	4628      	mov	r0, r5
 8003816:	f000 f8fb 	bl	8003a10 <__swsetup_r>
 800381a:	b380      	cbz	r0, 800387e <_puts_r+0x9a>
 800381c:	f04f 35ff 	mov.w	r5, #4294967295
 8003820:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003822:	07da      	lsls	r2, r3, #31
 8003824:	d405      	bmi.n	8003832 <_puts_r+0x4e>
 8003826:	89a3      	ldrh	r3, [r4, #12]
 8003828:	059b      	lsls	r3, r3, #22
 800382a:	d402      	bmi.n	8003832 <_puts_r+0x4e>
 800382c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800382e:	f000 f9bf 	bl	8003bb0 <__retarget_lock_release_recursive>
 8003832:	4628      	mov	r0, r5
 8003834:	bd70      	pop	{r4, r5, r6, pc}
 8003836:	2b00      	cmp	r3, #0
 8003838:	da04      	bge.n	8003844 <_puts_r+0x60>
 800383a:	69a2      	ldr	r2, [r4, #24]
 800383c:	429a      	cmp	r2, r3
 800383e:	dc17      	bgt.n	8003870 <_puts_r+0x8c>
 8003840:	290a      	cmp	r1, #10
 8003842:	d015      	beq.n	8003870 <_puts_r+0x8c>
 8003844:	6823      	ldr	r3, [r4, #0]
 8003846:	1c5a      	adds	r2, r3, #1
 8003848:	6022      	str	r2, [r4, #0]
 800384a:	7019      	strb	r1, [r3, #0]
 800384c:	68a3      	ldr	r3, [r4, #8]
 800384e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003852:	3b01      	subs	r3, #1
 8003854:	60a3      	str	r3, [r4, #8]
 8003856:	2900      	cmp	r1, #0
 8003858:	d1ed      	bne.n	8003836 <_puts_r+0x52>
 800385a:	2b00      	cmp	r3, #0
 800385c:	da11      	bge.n	8003882 <_puts_r+0x9e>
 800385e:	4622      	mov	r2, r4
 8003860:	210a      	movs	r1, #10
 8003862:	4628      	mov	r0, r5
 8003864:	f000 f895 	bl	8003992 <__swbuf_r>
 8003868:	3001      	adds	r0, #1
 800386a:	d0d7      	beq.n	800381c <_puts_r+0x38>
 800386c:	250a      	movs	r5, #10
 800386e:	e7d7      	b.n	8003820 <_puts_r+0x3c>
 8003870:	4622      	mov	r2, r4
 8003872:	4628      	mov	r0, r5
 8003874:	f000 f88d 	bl	8003992 <__swbuf_r>
 8003878:	3001      	adds	r0, #1
 800387a:	d1e7      	bne.n	800384c <_puts_r+0x68>
 800387c:	e7ce      	b.n	800381c <_puts_r+0x38>
 800387e:	3e01      	subs	r6, #1
 8003880:	e7e4      	b.n	800384c <_puts_r+0x68>
 8003882:	6823      	ldr	r3, [r4, #0]
 8003884:	1c5a      	adds	r2, r3, #1
 8003886:	6022      	str	r2, [r4, #0]
 8003888:	220a      	movs	r2, #10
 800388a:	701a      	strb	r2, [r3, #0]
 800388c:	e7ee      	b.n	800386c <_puts_r+0x88>
	...

08003890 <puts>:
 8003890:	4b02      	ldr	r3, [pc, #8]	@ (800389c <puts+0xc>)
 8003892:	4601      	mov	r1, r0
 8003894:	6818      	ldr	r0, [r3, #0]
 8003896:	f7ff bfa5 	b.w	80037e4 <_puts_r>
 800389a:	bf00      	nop
 800389c:	20000018 	.word	0x20000018

080038a0 <sniprintf>:
 80038a0:	b40c      	push	{r2, r3}
 80038a2:	b530      	push	{r4, r5, lr}
 80038a4:	4b18      	ldr	r3, [pc, #96]	@ (8003908 <sniprintf+0x68>)
 80038a6:	1e0c      	subs	r4, r1, #0
 80038a8:	681d      	ldr	r5, [r3, #0]
 80038aa:	b09d      	sub	sp, #116	@ 0x74
 80038ac:	da08      	bge.n	80038c0 <sniprintf+0x20>
 80038ae:	238b      	movs	r3, #139	@ 0x8b
 80038b0:	f04f 30ff 	mov.w	r0, #4294967295
 80038b4:	602b      	str	r3, [r5, #0]
 80038b6:	b01d      	add	sp, #116	@ 0x74
 80038b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038bc:	b002      	add	sp, #8
 80038be:	4770      	bx	lr
 80038c0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80038c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80038c8:	f04f 0300 	mov.w	r3, #0
 80038cc:	931b      	str	r3, [sp, #108]	@ 0x6c
 80038ce:	bf0c      	ite	eq
 80038d0:	4623      	moveq	r3, r4
 80038d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80038d6:	9304      	str	r3, [sp, #16]
 80038d8:	9307      	str	r3, [sp, #28]
 80038da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038de:	9002      	str	r0, [sp, #8]
 80038e0:	9006      	str	r0, [sp, #24]
 80038e2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80038e6:	4628      	mov	r0, r5
 80038e8:	ab21      	add	r3, sp, #132	@ 0x84
 80038ea:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80038ec:	a902      	add	r1, sp, #8
 80038ee:	9301      	str	r3, [sp, #4]
 80038f0:	f000 fac0 	bl	8003e74 <_svfiprintf_r>
 80038f4:	1c43      	adds	r3, r0, #1
 80038f6:	bfbc      	itt	lt
 80038f8:	238b      	movlt	r3, #139	@ 0x8b
 80038fa:	602b      	strlt	r3, [r5, #0]
 80038fc:	2c00      	cmp	r4, #0
 80038fe:	d0da      	beq.n	80038b6 <sniprintf+0x16>
 8003900:	2200      	movs	r2, #0
 8003902:	9b02      	ldr	r3, [sp, #8]
 8003904:	701a      	strb	r2, [r3, #0]
 8003906:	e7d6      	b.n	80038b6 <sniprintf+0x16>
 8003908:	20000018 	.word	0x20000018

0800390c <__sread>:
 800390c:	b510      	push	{r4, lr}
 800390e:	460c      	mov	r4, r1
 8003910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003914:	f000 f8fc 	bl	8003b10 <_read_r>
 8003918:	2800      	cmp	r0, #0
 800391a:	bfab      	itete	ge
 800391c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800391e:	89a3      	ldrhlt	r3, [r4, #12]
 8003920:	181b      	addge	r3, r3, r0
 8003922:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003926:	bfac      	ite	ge
 8003928:	6563      	strge	r3, [r4, #84]	@ 0x54
 800392a:	81a3      	strhlt	r3, [r4, #12]
 800392c:	bd10      	pop	{r4, pc}

0800392e <__swrite>:
 800392e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003932:	461f      	mov	r7, r3
 8003934:	898b      	ldrh	r3, [r1, #12]
 8003936:	4605      	mov	r5, r0
 8003938:	05db      	lsls	r3, r3, #23
 800393a:	460c      	mov	r4, r1
 800393c:	4616      	mov	r6, r2
 800393e:	d505      	bpl.n	800394c <__swrite+0x1e>
 8003940:	2302      	movs	r3, #2
 8003942:	2200      	movs	r2, #0
 8003944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003948:	f000 f8d0 	bl	8003aec <_lseek_r>
 800394c:	89a3      	ldrh	r3, [r4, #12]
 800394e:	4632      	mov	r2, r6
 8003950:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003954:	81a3      	strh	r3, [r4, #12]
 8003956:	4628      	mov	r0, r5
 8003958:	463b      	mov	r3, r7
 800395a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800395e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003962:	f000 b8e7 	b.w	8003b34 <_write_r>

08003966 <__sseek>:
 8003966:	b510      	push	{r4, lr}
 8003968:	460c      	mov	r4, r1
 800396a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800396e:	f000 f8bd 	bl	8003aec <_lseek_r>
 8003972:	1c43      	adds	r3, r0, #1
 8003974:	89a3      	ldrh	r3, [r4, #12]
 8003976:	bf15      	itete	ne
 8003978:	6560      	strne	r0, [r4, #84]	@ 0x54
 800397a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800397e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003982:	81a3      	strheq	r3, [r4, #12]
 8003984:	bf18      	it	ne
 8003986:	81a3      	strhne	r3, [r4, #12]
 8003988:	bd10      	pop	{r4, pc}

0800398a <__sclose>:
 800398a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800398e:	f000 b89d 	b.w	8003acc <_close_r>

08003992 <__swbuf_r>:
 8003992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003994:	460e      	mov	r6, r1
 8003996:	4614      	mov	r4, r2
 8003998:	4605      	mov	r5, r0
 800399a:	b118      	cbz	r0, 80039a4 <__swbuf_r+0x12>
 800399c:	6a03      	ldr	r3, [r0, #32]
 800399e:	b90b      	cbnz	r3, 80039a4 <__swbuf_r+0x12>
 80039a0:	f7ff fed8 	bl	8003754 <__sinit>
 80039a4:	69a3      	ldr	r3, [r4, #24]
 80039a6:	60a3      	str	r3, [r4, #8]
 80039a8:	89a3      	ldrh	r3, [r4, #12]
 80039aa:	071a      	lsls	r2, r3, #28
 80039ac:	d501      	bpl.n	80039b2 <__swbuf_r+0x20>
 80039ae:	6923      	ldr	r3, [r4, #16]
 80039b0:	b943      	cbnz	r3, 80039c4 <__swbuf_r+0x32>
 80039b2:	4621      	mov	r1, r4
 80039b4:	4628      	mov	r0, r5
 80039b6:	f000 f82b 	bl	8003a10 <__swsetup_r>
 80039ba:	b118      	cbz	r0, 80039c4 <__swbuf_r+0x32>
 80039bc:	f04f 37ff 	mov.w	r7, #4294967295
 80039c0:	4638      	mov	r0, r7
 80039c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039c4:	6823      	ldr	r3, [r4, #0]
 80039c6:	6922      	ldr	r2, [r4, #16]
 80039c8:	b2f6      	uxtb	r6, r6
 80039ca:	1a98      	subs	r0, r3, r2
 80039cc:	6963      	ldr	r3, [r4, #20]
 80039ce:	4637      	mov	r7, r6
 80039d0:	4283      	cmp	r3, r0
 80039d2:	dc05      	bgt.n	80039e0 <__swbuf_r+0x4e>
 80039d4:	4621      	mov	r1, r4
 80039d6:	4628      	mov	r0, r5
 80039d8:	f000 fe98 	bl	800470c <_fflush_r>
 80039dc:	2800      	cmp	r0, #0
 80039de:	d1ed      	bne.n	80039bc <__swbuf_r+0x2a>
 80039e0:	68a3      	ldr	r3, [r4, #8]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	60a3      	str	r3, [r4, #8]
 80039e6:	6823      	ldr	r3, [r4, #0]
 80039e8:	1c5a      	adds	r2, r3, #1
 80039ea:	6022      	str	r2, [r4, #0]
 80039ec:	701e      	strb	r6, [r3, #0]
 80039ee:	6962      	ldr	r2, [r4, #20]
 80039f0:	1c43      	adds	r3, r0, #1
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d004      	beq.n	8003a00 <__swbuf_r+0x6e>
 80039f6:	89a3      	ldrh	r3, [r4, #12]
 80039f8:	07db      	lsls	r3, r3, #31
 80039fa:	d5e1      	bpl.n	80039c0 <__swbuf_r+0x2e>
 80039fc:	2e0a      	cmp	r6, #10
 80039fe:	d1df      	bne.n	80039c0 <__swbuf_r+0x2e>
 8003a00:	4621      	mov	r1, r4
 8003a02:	4628      	mov	r0, r5
 8003a04:	f000 fe82 	bl	800470c <_fflush_r>
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	d0d9      	beq.n	80039c0 <__swbuf_r+0x2e>
 8003a0c:	e7d6      	b.n	80039bc <__swbuf_r+0x2a>
	...

08003a10 <__swsetup_r>:
 8003a10:	b538      	push	{r3, r4, r5, lr}
 8003a12:	4b29      	ldr	r3, [pc, #164]	@ (8003ab8 <__swsetup_r+0xa8>)
 8003a14:	4605      	mov	r5, r0
 8003a16:	6818      	ldr	r0, [r3, #0]
 8003a18:	460c      	mov	r4, r1
 8003a1a:	b118      	cbz	r0, 8003a24 <__swsetup_r+0x14>
 8003a1c:	6a03      	ldr	r3, [r0, #32]
 8003a1e:	b90b      	cbnz	r3, 8003a24 <__swsetup_r+0x14>
 8003a20:	f7ff fe98 	bl	8003754 <__sinit>
 8003a24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a28:	0719      	lsls	r1, r3, #28
 8003a2a:	d422      	bmi.n	8003a72 <__swsetup_r+0x62>
 8003a2c:	06da      	lsls	r2, r3, #27
 8003a2e:	d407      	bmi.n	8003a40 <__swsetup_r+0x30>
 8003a30:	2209      	movs	r2, #9
 8003a32:	602a      	str	r2, [r5, #0]
 8003a34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a38:	f04f 30ff 	mov.w	r0, #4294967295
 8003a3c:	81a3      	strh	r3, [r4, #12]
 8003a3e:	e033      	b.n	8003aa8 <__swsetup_r+0x98>
 8003a40:	0758      	lsls	r0, r3, #29
 8003a42:	d512      	bpl.n	8003a6a <__swsetup_r+0x5a>
 8003a44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a46:	b141      	cbz	r1, 8003a5a <__swsetup_r+0x4a>
 8003a48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a4c:	4299      	cmp	r1, r3
 8003a4e:	d002      	beq.n	8003a56 <__swsetup_r+0x46>
 8003a50:	4628      	mov	r0, r5
 8003a52:	f000 f8bd 	bl	8003bd0 <_free_r>
 8003a56:	2300      	movs	r3, #0
 8003a58:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a5a:	89a3      	ldrh	r3, [r4, #12]
 8003a5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003a60:	81a3      	strh	r3, [r4, #12]
 8003a62:	2300      	movs	r3, #0
 8003a64:	6063      	str	r3, [r4, #4]
 8003a66:	6923      	ldr	r3, [r4, #16]
 8003a68:	6023      	str	r3, [r4, #0]
 8003a6a:	89a3      	ldrh	r3, [r4, #12]
 8003a6c:	f043 0308 	orr.w	r3, r3, #8
 8003a70:	81a3      	strh	r3, [r4, #12]
 8003a72:	6923      	ldr	r3, [r4, #16]
 8003a74:	b94b      	cbnz	r3, 8003a8a <__swsetup_r+0x7a>
 8003a76:	89a3      	ldrh	r3, [r4, #12]
 8003a78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003a7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a80:	d003      	beq.n	8003a8a <__swsetup_r+0x7a>
 8003a82:	4621      	mov	r1, r4
 8003a84:	4628      	mov	r0, r5
 8003a86:	f000 fe8e 	bl	80047a6 <__smakebuf_r>
 8003a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a8e:	f013 0201 	ands.w	r2, r3, #1
 8003a92:	d00a      	beq.n	8003aaa <__swsetup_r+0x9a>
 8003a94:	2200      	movs	r2, #0
 8003a96:	60a2      	str	r2, [r4, #8]
 8003a98:	6962      	ldr	r2, [r4, #20]
 8003a9a:	4252      	negs	r2, r2
 8003a9c:	61a2      	str	r2, [r4, #24]
 8003a9e:	6922      	ldr	r2, [r4, #16]
 8003aa0:	b942      	cbnz	r2, 8003ab4 <__swsetup_r+0xa4>
 8003aa2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003aa6:	d1c5      	bne.n	8003a34 <__swsetup_r+0x24>
 8003aa8:	bd38      	pop	{r3, r4, r5, pc}
 8003aaa:	0799      	lsls	r1, r3, #30
 8003aac:	bf58      	it	pl
 8003aae:	6962      	ldrpl	r2, [r4, #20]
 8003ab0:	60a2      	str	r2, [r4, #8]
 8003ab2:	e7f4      	b.n	8003a9e <__swsetup_r+0x8e>
 8003ab4:	2000      	movs	r0, #0
 8003ab6:	e7f7      	b.n	8003aa8 <__swsetup_r+0x98>
 8003ab8:	20000018 	.word	0x20000018

08003abc <memset>:
 8003abc:	4603      	mov	r3, r0
 8003abe:	4402      	add	r2, r0
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d100      	bne.n	8003ac6 <memset+0xa>
 8003ac4:	4770      	bx	lr
 8003ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8003aca:	e7f9      	b.n	8003ac0 <memset+0x4>

08003acc <_close_r>:
 8003acc:	b538      	push	{r3, r4, r5, lr}
 8003ace:	2300      	movs	r3, #0
 8003ad0:	4d05      	ldr	r5, [pc, #20]	@ (8003ae8 <_close_r+0x1c>)
 8003ad2:	4604      	mov	r4, r0
 8003ad4:	4608      	mov	r0, r1
 8003ad6:	602b      	str	r3, [r5, #0]
 8003ad8:	f7fd ff6a 	bl	80019b0 <_close>
 8003adc:	1c43      	adds	r3, r0, #1
 8003ade:	d102      	bne.n	8003ae6 <_close_r+0x1a>
 8003ae0:	682b      	ldr	r3, [r5, #0]
 8003ae2:	b103      	cbz	r3, 8003ae6 <_close_r+0x1a>
 8003ae4:	6023      	str	r3, [r4, #0]
 8003ae6:	bd38      	pop	{r3, r4, r5, pc}
 8003ae8:	200002d8 	.word	0x200002d8

08003aec <_lseek_r>:
 8003aec:	b538      	push	{r3, r4, r5, lr}
 8003aee:	4604      	mov	r4, r0
 8003af0:	4608      	mov	r0, r1
 8003af2:	4611      	mov	r1, r2
 8003af4:	2200      	movs	r2, #0
 8003af6:	4d05      	ldr	r5, [pc, #20]	@ (8003b0c <_lseek_r+0x20>)
 8003af8:	602a      	str	r2, [r5, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	f7fd ff7c 	bl	80019f8 <_lseek>
 8003b00:	1c43      	adds	r3, r0, #1
 8003b02:	d102      	bne.n	8003b0a <_lseek_r+0x1e>
 8003b04:	682b      	ldr	r3, [r5, #0]
 8003b06:	b103      	cbz	r3, 8003b0a <_lseek_r+0x1e>
 8003b08:	6023      	str	r3, [r4, #0]
 8003b0a:	bd38      	pop	{r3, r4, r5, pc}
 8003b0c:	200002d8 	.word	0x200002d8

08003b10 <_read_r>:
 8003b10:	b538      	push	{r3, r4, r5, lr}
 8003b12:	4604      	mov	r4, r0
 8003b14:	4608      	mov	r0, r1
 8003b16:	4611      	mov	r1, r2
 8003b18:	2200      	movs	r2, #0
 8003b1a:	4d05      	ldr	r5, [pc, #20]	@ (8003b30 <_read_r+0x20>)
 8003b1c:	602a      	str	r2, [r5, #0]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	f7fd ff0d 	bl	800193e <_read>
 8003b24:	1c43      	adds	r3, r0, #1
 8003b26:	d102      	bne.n	8003b2e <_read_r+0x1e>
 8003b28:	682b      	ldr	r3, [r5, #0]
 8003b2a:	b103      	cbz	r3, 8003b2e <_read_r+0x1e>
 8003b2c:	6023      	str	r3, [r4, #0]
 8003b2e:	bd38      	pop	{r3, r4, r5, pc}
 8003b30:	200002d8 	.word	0x200002d8

08003b34 <_write_r>:
 8003b34:	b538      	push	{r3, r4, r5, lr}
 8003b36:	4604      	mov	r4, r0
 8003b38:	4608      	mov	r0, r1
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	4d05      	ldr	r5, [pc, #20]	@ (8003b54 <_write_r+0x20>)
 8003b40:	602a      	str	r2, [r5, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	f7fd ff18 	bl	8001978 <_write>
 8003b48:	1c43      	adds	r3, r0, #1
 8003b4a:	d102      	bne.n	8003b52 <_write_r+0x1e>
 8003b4c:	682b      	ldr	r3, [r5, #0]
 8003b4e:	b103      	cbz	r3, 8003b52 <_write_r+0x1e>
 8003b50:	6023      	str	r3, [r4, #0]
 8003b52:	bd38      	pop	{r3, r4, r5, pc}
 8003b54:	200002d8 	.word	0x200002d8

08003b58 <__errno>:
 8003b58:	4b01      	ldr	r3, [pc, #4]	@ (8003b60 <__errno+0x8>)
 8003b5a:	6818      	ldr	r0, [r3, #0]
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	20000018 	.word	0x20000018

08003b64 <__libc_init_array>:
 8003b64:	b570      	push	{r4, r5, r6, lr}
 8003b66:	2600      	movs	r6, #0
 8003b68:	4d0c      	ldr	r5, [pc, #48]	@ (8003b9c <__libc_init_array+0x38>)
 8003b6a:	4c0d      	ldr	r4, [pc, #52]	@ (8003ba0 <__libc_init_array+0x3c>)
 8003b6c:	1b64      	subs	r4, r4, r5
 8003b6e:	10a4      	asrs	r4, r4, #2
 8003b70:	42a6      	cmp	r6, r4
 8003b72:	d109      	bne.n	8003b88 <__libc_init_array+0x24>
 8003b74:	f000 fee4 	bl	8004940 <_init>
 8003b78:	2600      	movs	r6, #0
 8003b7a:	4d0a      	ldr	r5, [pc, #40]	@ (8003ba4 <__libc_init_array+0x40>)
 8003b7c:	4c0a      	ldr	r4, [pc, #40]	@ (8003ba8 <__libc_init_array+0x44>)
 8003b7e:	1b64      	subs	r4, r4, r5
 8003b80:	10a4      	asrs	r4, r4, #2
 8003b82:	42a6      	cmp	r6, r4
 8003b84:	d105      	bne.n	8003b92 <__libc_init_array+0x2e>
 8003b86:	bd70      	pop	{r4, r5, r6, pc}
 8003b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b8c:	4798      	blx	r3
 8003b8e:	3601      	adds	r6, #1
 8003b90:	e7ee      	b.n	8003b70 <__libc_init_array+0xc>
 8003b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b96:	4798      	blx	r3
 8003b98:	3601      	adds	r6, #1
 8003b9a:	e7f2      	b.n	8003b82 <__libc_init_array+0x1e>
 8003b9c:	08004c94 	.word	0x08004c94
 8003ba0:	08004c94 	.word	0x08004c94
 8003ba4:	08004c94 	.word	0x08004c94
 8003ba8:	08004c98 	.word	0x08004c98

08003bac <__retarget_lock_init_recursive>:
 8003bac:	4770      	bx	lr

08003bae <__retarget_lock_acquire_recursive>:
 8003bae:	4770      	bx	lr

08003bb0 <__retarget_lock_release_recursive>:
 8003bb0:	4770      	bx	lr

08003bb2 <memcpy>:
 8003bb2:	440a      	add	r2, r1
 8003bb4:	4291      	cmp	r1, r2
 8003bb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8003bba:	d100      	bne.n	8003bbe <memcpy+0xc>
 8003bbc:	4770      	bx	lr
 8003bbe:	b510      	push	{r4, lr}
 8003bc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bc4:	4291      	cmp	r1, r2
 8003bc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bca:	d1f9      	bne.n	8003bc0 <memcpy+0xe>
 8003bcc:	bd10      	pop	{r4, pc}
	...

08003bd0 <_free_r>:
 8003bd0:	b538      	push	{r3, r4, r5, lr}
 8003bd2:	4605      	mov	r5, r0
 8003bd4:	2900      	cmp	r1, #0
 8003bd6:	d040      	beq.n	8003c5a <_free_r+0x8a>
 8003bd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bdc:	1f0c      	subs	r4, r1, #4
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	bfb8      	it	lt
 8003be2:	18e4      	addlt	r4, r4, r3
 8003be4:	f000 f8de 	bl	8003da4 <__malloc_lock>
 8003be8:	4a1c      	ldr	r2, [pc, #112]	@ (8003c5c <_free_r+0x8c>)
 8003bea:	6813      	ldr	r3, [r2, #0]
 8003bec:	b933      	cbnz	r3, 8003bfc <_free_r+0x2c>
 8003bee:	6063      	str	r3, [r4, #4]
 8003bf0:	6014      	str	r4, [r2, #0]
 8003bf2:	4628      	mov	r0, r5
 8003bf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bf8:	f000 b8da 	b.w	8003db0 <__malloc_unlock>
 8003bfc:	42a3      	cmp	r3, r4
 8003bfe:	d908      	bls.n	8003c12 <_free_r+0x42>
 8003c00:	6820      	ldr	r0, [r4, #0]
 8003c02:	1821      	adds	r1, r4, r0
 8003c04:	428b      	cmp	r3, r1
 8003c06:	bf01      	itttt	eq
 8003c08:	6819      	ldreq	r1, [r3, #0]
 8003c0a:	685b      	ldreq	r3, [r3, #4]
 8003c0c:	1809      	addeq	r1, r1, r0
 8003c0e:	6021      	streq	r1, [r4, #0]
 8003c10:	e7ed      	b.n	8003bee <_free_r+0x1e>
 8003c12:	461a      	mov	r2, r3
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	b10b      	cbz	r3, 8003c1c <_free_r+0x4c>
 8003c18:	42a3      	cmp	r3, r4
 8003c1a:	d9fa      	bls.n	8003c12 <_free_r+0x42>
 8003c1c:	6811      	ldr	r1, [r2, #0]
 8003c1e:	1850      	adds	r0, r2, r1
 8003c20:	42a0      	cmp	r0, r4
 8003c22:	d10b      	bne.n	8003c3c <_free_r+0x6c>
 8003c24:	6820      	ldr	r0, [r4, #0]
 8003c26:	4401      	add	r1, r0
 8003c28:	1850      	adds	r0, r2, r1
 8003c2a:	4283      	cmp	r3, r0
 8003c2c:	6011      	str	r1, [r2, #0]
 8003c2e:	d1e0      	bne.n	8003bf2 <_free_r+0x22>
 8003c30:	6818      	ldr	r0, [r3, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	4408      	add	r0, r1
 8003c36:	6010      	str	r0, [r2, #0]
 8003c38:	6053      	str	r3, [r2, #4]
 8003c3a:	e7da      	b.n	8003bf2 <_free_r+0x22>
 8003c3c:	d902      	bls.n	8003c44 <_free_r+0x74>
 8003c3e:	230c      	movs	r3, #12
 8003c40:	602b      	str	r3, [r5, #0]
 8003c42:	e7d6      	b.n	8003bf2 <_free_r+0x22>
 8003c44:	6820      	ldr	r0, [r4, #0]
 8003c46:	1821      	adds	r1, r4, r0
 8003c48:	428b      	cmp	r3, r1
 8003c4a:	bf01      	itttt	eq
 8003c4c:	6819      	ldreq	r1, [r3, #0]
 8003c4e:	685b      	ldreq	r3, [r3, #4]
 8003c50:	1809      	addeq	r1, r1, r0
 8003c52:	6021      	streq	r1, [r4, #0]
 8003c54:	6063      	str	r3, [r4, #4]
 8003c56:	6054      	str	r4, [r2, #4]
 8003c58:	e7cb      	b.n	8003bf2 <_free_r+0x22>
 8003c5a:	bd38      	pop	{r3, r4, r5, pc}
 8003c5c:	200002e4 	.word	0x200002e4

08003c60 <sbrk_aligned>:
 8003c60:	b570      	push	{r4, r5, r6, lr}
 8003c62:	4e0f      	ldr	r6, [pc, #60]	@ (8003ca0 <sbrk_aligned+0x40>)
 8003c64:	460c      	mov	r4, r1
 8003c66:	6831      	ldr	r1, [r6, #0]
 8003c68:	4605      	mov	r5, r0
 8003c6a:	b911      	cbnz	r1, 8003c72 <sbrk_aligned+0x12>
 8003c6c:	f000 fe14 	bl	8004898 <_sbrk_r>
 8003c70:	6030      	str	r0, [r6, #0]
 8003c72:	4621      	mov	r1, r4
 8003c74:	4628      	mov	r0, r5
 8003c76:	f000 fe0f 	bl	8004898 <_sbrk_r>
 8003c7a:	1c43      	adds	r3, r0, #1
 8003c7c:	d103      	bne.n	8003c86 <sbrk_aligned+0x26>
 8003c7e:	f04f 34ff 	mov.w	r4, #4294967295
 8003c82:	4620      	mov	r0, r4
 8003c84:	bd70      	pop	{r4, r5, r6, pc}
 8003c86:	1cc4      	adds	r4, r0, #3
 8003c88:	f024 0403 	bic.w	r4, r4, #3
 8003c8c:	42a0      	cmp	r0, r4
 8003c8e:	d0f8      	beq.n	8003c82 <sbrk_aligned+0x22>
 8003c90:	1a21      	subs	r1, r4, r0
 8003c92:	4628      	mov	r0, r5
 8003c94:	f000 fe00 	bl	8004898 <_sbrk_r>
 8003c98:	3001      	adds	r0, #1
 8003c9a:	d1f2      	bne.n	8003c82 <sbrk_aligned+0x22>
 8003c9c:	e7ef      	b.n	8003c7e <sbrk_aligned+0x1e>
 8003c9e:	bf00      	nop
 8003ca0:	200002e0 	.word	0x200002e0

08003ca4 <_malloc_r>:
 8003ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ca8:	1ccd      	adds	r5, r1, #3
 8003caa:	f025 0503 	bic.w	r5, r5, #3
 8003cae:	3508      	adds	r5, #8
 8003cb0:	2d0c      	cmp	r5, #12
 8003cb2:	bf38      	it	cc
 8003cb4:	250c      	movcc	r5, #12
 8003cb6:	2d00      	cmp	r5, #0
 8003cb8:	4606      	mov	r6, r0
 8003cba:	db01      	blt.n	8003cc0 <_malloc_r+0x1c>
 8003cbc:	42a9      	cmp	r1, r5
 8003cbe:	d904      	bls.n	8003cca <_malloc_r+0x26>
 8003cc0:	230c      	movs	r3, #12
 8003cc2:	6033      	str	r3, [r6, #0]
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003da0 <_malloc_r+0xfc>
 8003cce:	f000 f869 	bl	8003da4 <__malloc_lock>
 8003cd2:	f8d8 3000 	ldr.w	r3, [r8]
 8003cd6:	461c      	mov	r4, r3
 8003cd8:	bb44      	cbnz	r4, 8003d2c <_malloc_r+0x88>
 8003cda:	4629      	mov	r1, r5
 8003cdc:	4630      	mov	r0, r6
 8003cde:	f7ff ffbf 	bl	8003c60 <sbrk_aligned>
 8003ce2:	1c43      	adds	r3, r0, #1
 8003ce4:	4604      	mov	r4, r0
 8003ce6:	d158      	bne.n	8003d9a <_malloc_r+0xf6>
 8003ce8:	f8d8 4000 	ldr.w	r4, [r8]
 8003cec:	4627      	mov	r7, r4
 8003cee:	2f00      	cmp	r7, #0
 8003cf0:	d143      	bne.n	8003d7a <_malloc_r+0xd6>
 8003cf2:	2c00      	cmp	r4, #0
 8003cf4:	d04b      	beq.n	8003d8e <_malloc_r+0xea>
 8003cf6:	6823      	ldr	r3, [r4, #0]
 8003cf8:	4639      	mov	r1, r7
 8003cfa:	4630      	mov	r0, r6
 8003cfc:	eb04 0903 	add.w	r9, r4, r3
 8003d00:	f000 fdca 	bl	8004898 <_sbrk_r>
 8003d04:	4581      	cmp	r9, r0
 8003d06:	d142      	bne.n	8003d8e <_malloc_r+0xea>
 8003d08:	6821      	ldr	r1, [r4, #0]
 8003d0a:	4630      	mov	r0, r6
 8003d0c:	1a6d      	subs	r5, r5, r1
 8003d0e:	4629      	mov	r1, r5
 8003d10:	f7ff ffa6 	bl	8003c60 <sbrk_aligned>
 8003d14:	3001      	adds	r0, #1
 8003d16:	d03a      	beq.n	8003d8e <_malloc_r+0xea>
 8003d18:	6823      	ldr	r3, [r4, #0]
 8003d1a:	442b      	add	r3, r5
 8003d1c:	6023      	str	r3, [r4, #0]
 8003d1e:	f8d8 3000 	ldr.w	r3, [r8]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	bb62      	cbnz	r2, 8003d80 <_malloc_r+0xdc>
 8003d26:	f8c8 7000 	str.w	r7, [r8]
 8003d2a:	e00f      	b.n	8003d4c <_malloc_r+0xa8>
 8003d2c:	6822      	ldr	r2, [r4, #0]
 8003d2e:	1b52      	subs	r2, r2, r5
 8003d30:	d420      	bmi.n	8003d74 <_malloc_r+0xd0>
 8003d32:	2a0b      	cmp	r2, #11
 8003d34:	d917      	bls.n	8003d66 <_malloc_r+0xc2>
 8003d36:	1961      	adds	r1, r4, r5
 8003d38:	42a3      	cmp	r3, r4
 8003d3a:	6025      	str	r5, [r4, #0]
 8003d3c:	bf18      	it	ne
 8003d3e:	6059      	strne	r1, [r3, #4]
 8003d40:	6863      	ldr	r3, [r4, #4]
 8003d42:	bf08      	it	eq
 8003d44:	f8c8 1000 	streq.w	r1, [r8]
 8003d48:	5162      	str	r2, [r4, r5]
 8003d4a:	604b      	str	r3, [r1, #4]
 8003d4c:	4630      	mov	r0, r6
 8003d4e:	f000 f82f 	bl	8003db0 <__malloc_unlock>
 8003d52:	f104 000b 	add.w	r0, r4, #11
 8003d56:	1d23      	adds	r3, r4, #4
 8003d58:	f020 0007 	bic.w	r0, r0, #7
 8003d5c:	1ac2      	subs	r2, r0, r3
 8003d5e:	bf1c      	itt	ne
 8003d60:	1a1b      	subne	r3, r3, r0
 8003d62:	50a3      	strne	r3, [r4, r2]
 8003d64:	e7af      	b.n	8003cc6 <_malloc_r+0x22>
 8003d66:	6862      	ldr	r2, [r4, #4]
 8003d68:	42a3      	cmp	r3, r4
 8003d6a:	bf0c      	ite	eq
 8003d6c:	f8c8 2000 	streq.w	r2, [r8]
 8003d70:	605a      	strne	r2, [r3, #4]
 8003d72:	e7eb      	b.n	8003d4c <_malloc_r+0xa8>
 8003d74:	4623      	mov	r3, r4
 8003d76:	6864      	ldr	r4, [r4, #4]
 8003d78:	e7ae      	b.n	8003cd8 <_malloc_r+0x34>
 8003d7a:	463c      	mov	r4, r7
 8003d7c:	687f      	ldr	r7, [r7, #4]
 8003d7e:	e7b6      	b.n	8003cee <_malloc_r+0x4a>
 8003d80:	461a      	mov	r2, r3
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	42a3      	cmp	r3, r4
 8003d86:	d1fb      	bne.n	8003d80 <_malloc_r+0xdc>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	6053      	str	r3, [r2, #4]
 8003d8c:	e7de      	b.n	8003d4c <_malloc_r+0xa8>
 8003d8e:	230c      	movs	r3, #12
 8003d90:	4630      	mov	r0, r6
 8003d92:	6033      	str	r3, [r6, #0]
 8003d94:	f000 f80c 	bl	8003db0 <__malloc_unlock>
 8003d98:	e794      	b.n	8003cc4 <_malloc_r+0x20>
 8003d9a:	6005      	str	r5, [r0, #0]
 8003d9c:	e7d6      	b.n	8003d4c <_malloc_r+0xa8>
 8003d9e:	bf00      	nop
 8003da0:	200002e4 	.word	0x200002e4

08003da4 <__malloc_lock>:
 8003da4:	4801      	ldr	r0, [pc, #4]	@ (8003dac <__malloc_lock+0x8>)
 8003da6:	f7ff bf02 	b.w	8003bae <__retarget_lock_acquire_recursive>
 8003daa:	bf00      	nop
 8003dac:	200002dc 	.word	0x200002dc

08003db0 <__malloc_unlock>:
 8003db0:	4801      	ldr	r0, [pc, #4]	@ (8003db8 <__malloc_unlock+0x8>)
 8003db2:	f7ff befd 	b.w	8003bb0 <__retarget_lock_release_recursive>
 8003db6:	bf00      	nop
 8003db8:	200002dc 	.word	0x200002dc

08003dbc <__ssputs_r>:
 8003dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dc0:	461f      	mov	r7, r3
 8003dc2:	688e      	ldr	r6, [r1, #8]
 8003dc4:	4682      	mov	sl, r0
 8003dc6:	42be      	cmp	r6, r7
 8003dc8:	460c      	mov	r4, r1
 8003dca:	4690      	mov	r8, r2
 8003dcc:	680b      	ldr	r3, [r1, #0]
 8003dce:	d82d      	bhi.n	8003e2c <__ssputs_r+0x70>
 8003dd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003dd4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003dd8:	d026      	beq.n	8003e28 <__ssputs_r+0x6c>
 8003dda:	6965      	ldr	r5, [r4, #20]
 8003ddc:	6909      	ldr	r1, [r1, #16]
 8003dde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003de2:	eba3 0901 	sub.w	r9, r3, r1
 8003de6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003dea:	1c7b      	adds	r3, r7, #1
 8003dec:	444b      	add	r3, r9
 8003dee:	106d      	asrs	r5, r5, #1
 8003df0:	429d      	cmp	r5, r3
 8003df2:	bf38      	it	cc
 8003df4:	461d      	movcc	r5, r3
 8003df6:	0553      	lsls	r3, r2, #21
 8003df8:	d527      	bpl.n	8003e4a <__ssputs_r+0x8e>
 8003dfa:	4629      	mov	r1, r5
 8003dfc:	f7ff ff52 	bl	8003ca4 <_malloc_r>
 8003e00:	4606      	mov	r6, r0
 8003e02:	b360      	cbz	r0, 8003e5e <__ssputs_r+0xa2>
 8003e04:	464a      	mov	r2, r9
 8003e06:	6921      	ldr	r1, [r4, #16]
 8003e08:	f7ff fed3 	bl	8003bb2 <memcpy>
 8003e0c:	89a3      	ldrh	r3, [r4, #12]
 8003e0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003e12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e16:	81a3      	strh	r3, [r4, #12]
 8003e18:	6126      	str	r6, [r4, #16]
 8003e1a:	444e      	add	r6, r9
 8003e1c:	6026      	str	r6, [r4, #0]
 8003e1e:	463e      	mov	r6, r7
 8003e20:	6165      	str	r5, [r4, #20]
 8003e22:	eba5 0509 	sub.w	r5, r5, r9
 8003e26:	60a5      	str	r5, [r4, #8]
 8003e28:	42be      	cmp	r6, r7
 8003e2a:	d900      	bls.n	8003e2e <__ssputs_r+0x72>
 8003e2c:	463e      	mov	r6, r7
 8003e2e:	4632      	mov	r2, r6
 8003e30:	4641      	mov	r1, r8
 8003e32:	6820      	ldr	r0, [r4, #0]
 8003e34:	f000 fcf3 	bl	800481e <memmove>
 8003e38:	2000      	movs	r0, #0
 8003e3a:	68a3      	ldr	r3, [r4, #8]
 8003e3c:	1b9b      	subs	r3, r3, r6
 8003e3e:	60a3      	str	r3, [r4, #8]
 8003e40:	6823      	ldr	r3, [r4, #0]
 8003e42:	4433      	add	r3, r6
 8003e44:	6023      	str	r3, [r4, #0]
 8003e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e4a:	462a      	mov	r2, r5
 8003e4c:	f000 fd42 	bl	80048d4 <_realloc_r>
 8003e50:	4606      	mov	r6, r0
 8003e52:	2800      	cmp	r0, #0
 8003e54:	d1e0      	bne.n	8003e18 <__ssputs_r+0x5c>
 8003e56:	4650      	mov	r0, sl
 8003e58:	6921      	ldr	r1, [r4, #16]
 8003e5a:	f7ff feb9 	bl	8003bd0 <_free_r>
 8003e5e:	230c      	movs	r3, #12
 8003e60:	f8ca 3000 	str.w	r3, [sl]
 8003e64:	89a3      	ldrh	r3, [r4, #12]
 8003e66:	f04f 30ff 	mov.w	r0, #4294967295
 8003e6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e6e:	81a3      	strh	r3, [r4, #12]
 8003e70:	e7e9      	b.n	8003e46 <__ssputs_r+0x8a>
	...

08003e74 <_svfiprintf_r>:
 8003e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e78:	4698      	mov	r8, r3
 8003e7a:	898b      	ldrh	r3, [r1, #12]
 8003e7c:	4607      	mov	r7, r0
 8003e7e:	061b      	lsls	r3, r3, #24
 8003e80:	460d      	mov	r5, r1
 8003e82:	4614      	mov	r4, r2
 8003e84:	b09d      	sub	sp, #116	@ 0x74
 8003e86:	d510      	bpl.n	8003eaa <_svfiprintf_r+0x36>
 8003e88:	690b      	ldr	r3, [r1, #16]
 8003e8a:	b973      	cbnz	r3, 8003eaa <_svfiprintf_r+0x36>
 8003e8c:	2140      	movs	r1, #64	@ 0x40
 8003e8e:	f7ff ff09 	bl	8003ca4 <_malloc_r>
 8003e92:	6028      	str	r0, [r5, #0]
 8003e94:	6128      	str	r0, [r5, #16]
 8003e96:	b930      	cbnz	r0, 8003ea6 <_svfiprintf_r+0x32>
 8003e98:	230c      	movs	r3, #12
 8003e9a:	603b      	str	r3, [r7, #0]
 8003e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea0:	b01d      	add	sp, #116	@ 0x74
 8003ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ea6:	2340      	movs	r3, #64	@ 0x40
 8003ea8:	616b      	str	r3, [r5, #20]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	9309      	str	r3, [sp, #36]	@ 0x24
 8003eae:	2320      	movs	r3, #32
 8003eb0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003eb4:	2330      	movs	r3, #48	@ 0x30
 8003eb6:	f04f 0901 	mov.w	r9, #1
 8003eba:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ebe:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004058 <_svfiprintf_r+0x1e4>
 8003ec2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003ec6:	4623      	mov	r3, r4
 8003ec8:	469a      	mov	sl, r3
 8003eca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ece:	b10a      	cbz	r2, 8003ed4 <_svfiprintf_r+0x60>
 8003ed0:	2a25      	cmp	r2, #37	@ 0x25
 8003ed2:	d1f9      	bne.n	8003ec8 <_svfiprintf_r+0x54>
 8003ed4:	ebba 0b04 	subs.w	fp, sl, r4
 8003ed8:	d00b      	beq.n	8003ef2 <_svfiprintf_r+0x7e>
 8003eda:	465b      	mov	r3, fp
 8003edc:	4622      	mov	r2, r4
 8003ede:	4629      	mov	r1, r5
 8003ee0:	4638      	mov	r0, r7
 8003ee2:	f7ff ff6b 	bl	8003dbc <__ssputs_r>
 8003ee6:	3001      	adds	r0, #1
 8003ee8:	f000 80a7 	beq.w	800403a <_svfiprintf_r+0x1c6>
 8003eec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003eee:	445a      	add	r2, fp
 8003ef0:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 809f 	beq.w	800403a <_svfiprintf_r+0x1c6>
 8003efc:	2300      	movs	r3, #0
 8003efe:	f04f 32ff 	mov.w	r2, #4294967295
 8003f02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f06:	f10a 0a01 	add.w	sl, sl, #1
 8003f0a:	9304      	str	r3, [sp, #16]
 8003f0c:	9307      	str	r3, [sp, #28]
 8003f0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003f12:	931a      	str	r3, [sp, #104]	@ 0x68
 8003f14:	4654      	mov	r4, sl
 8003f16:	2205      	movs	r2, #5
 8003f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f1c:	484e      	ldr	r0, [pc, #312]	@ (8004058 <_svfiprintf_r+0x1e4>)
 8003f1e:	f000 fccb 	bl	80048b8 <memchr>
 8003f22:	9a04      	ldr	r2, [sp, #16]
 8003f24:	b9d8      	cbnz	r0, 8003f5e <_svfiprintf_r+0xea>
 8003f26:	06d0      	lsls	r0, r2, #27
 8003f28:	bf44      	itt	mi
 8003f2a:	2320      	movmi	r3, #32
 8003f2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f30:	0711      	lsls	r1, r2, #28
 8003f32:	bf44      	itt	mi
 8003f34:	232b      	movmi	r3, #43	@ 0x2b
 8003f36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8003f3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f40:	d015      	beq.n	8003f6e <_svfiprintf_r+0xfa>
 8003f42:	4654      	mov	r4, sl
 8003f44:	2000      	movs	r0, #0
 8003f46:	f04f 0c0a 	mov.w	ip, #10
 8003f4a:	9a07      	ldr	r2, [sp, #28]
 8003f4c:	4621      	mov	r1, r4
 8003f4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f52:	3b30      	subs	r3, #48	@ 0x30
 8003f54:	2b09      	cmp	r3, #9
 8003f56:	d94b      	bls.n	8003ff0 <_svfiprintf_r+0x17c>
 8003f58:	b1b0      	cbz	r0, 8003f88 <_svfiprintf_r+0x114>
 8003f5a:	9207      	str	r2, [sp, #28]
 8003f5c:	e014      	b.n	8003f88 <_svfiprintf_r+0x114>
 8003f5e:	eba0 0308 	sub.w	r3, r0, r8
 8003f62:	fa09 f303 	lsl.w	r3, r9, r3
 8003f66:	4313      	orrs	r3, r2
 8003f68:	46a2      	mov	sl, r4
 8003f6a:	9304      	str	r3, [sp, #16]
 8003f6c:	e7d2      	b.n	8003f14 <_svfiprintf_r+0xa0>
 8003f6e:	9b03      	ldr	r3, [sp, #12]
 8003f70:	1d19      	adds	r1, r3, #4
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	9103      	str	r1, [sp, #12]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	bfbb      	ittet	lt
 8003f7a:	425b      	neglt	r3, r3
 8003f7c:	f042 0202 	orrlt.w	r2, r2, #2
 8003f80:	9307      	strge	r3, [sp, #28]
 8003f82:	9307      	strlt	r3, [sp, #28]
 8003f84:	bfb8      	it	lt
 8003f86:	9204      	strlt	r2, [sp, #16]
 8003f88:	7823      	ldrb	r3, [r4, #0]
 8003f8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f8c:	d10a      	bne.n	8003fa4 <_svfiprintf_r+0x130>
 8003f8e:	7863      	ldrb	r3, [r4, #1]
 8003f90:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f92:	d132      	bne.n	8003ffa <_svfiprintf_r+0x186>
 8003f94:	9b03      	ldr	r3, [sp, #12]
 8003f96:	3402      	adds	r4, #2
 8003f98:	1d1a      	adds	r2, r3, #4
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	9203      	str	r2, [sp, #12]
 8003f9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003fa2:	9305      	str	r3, [sp, #20]
 8003fa4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800405c <_svfiprintf_r+0x1e8>
 8003fa8:	2203      	movs	r2, #3
 8003faa:	4650      	mov	r0, sl
 8003fac:	7821      	ldrb	r1, [r4, #0]
 8003fae:	f000 fc83 	bl	80048b8 <memchr>
 8003fb2:	b138      	cbz	r0, 8003fc4 <_svfiprintf_r+0x150>
 8003fb4:	2240      	movs	r2, #64	@ 0x40
 8003fb6:	9b04      	ldr	r3, [sp, #16]
 8003fb8:	eba0 000a 	sub.w	r0, r0, sl
 8003fbc:	4082      	lsls	r2, r0
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	3401      	adds	r4, #1
 8003fc2:	9304      	str	r3, [sp, #16]
 8003fc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fc8:	2206      	movs	r2, #6
 8003fca:	4825      	ldr	r0, [pc, #148]	@ (8004060 <_svfiprintf_r+0x1ec>)
 8003fcc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003fd0:	f000 fc72 	bl	80048b8 <memchr>
 8003fd4:	2800      	cmp	r0, #0
 8003fd6:	d036      	beq.n	8004046 <_svfiprintf_r+0x1d2>
 8003fd8:	4b22      	ldr	r3, [pc, #136]	@ (8004064 <_svfiprintf_r+0x1f0>)
 8003fda:	bb1b      	cbnz	r3, 8004024 <_svfiprintf_r+0x1b0>
 8003fdc:	9b03      	ldr	r3, [sp, #12]
 8003fde:	3307      	adds	r3, #7
 8003fe0:	f023 0307 	bic.w	r3, r3, #7
 8003fe4:	3308      	adds	r3, #8
 8003fe6:	9303      	str	r3, [sp, #12]
 8003fe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fea:	4433      	add	r3, r6
 8003fec:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fee:	e76a      	b.n	8003ec6 <_svfiprintf_r+0x52>
 8003ff0:	460c      	mov	r4, r1
 8003ff2:	2001      	movs	r0, #1
 8003ff4:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ff8:	e7a8      	b.n	8003f4c <_svfiprintf_r+0xd8>
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	f04f 0c0a 	mov.w	ip, #10
 8004000:	4619      	mov	r1, r3
 8004002:	3401      	adds	r4, #1
 8004004:	9305      	str	r3, [sp, #20]
 8004006:	4620      	mov	r0, r4
 8004008:	f810 2b01 	ldrb.w	r2, [r0], #1
 800400c:	3a30      	subs	r2, #48	@ 0x30
 800400e:	2a09      	cmp	r2, #9
 8004010:	d903      	bls.n	800401a <_svfiprintf_r+0x1a6>
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0c6      	beq.n	8003fa4 <_svfiprintf_r+0x130>
 8004016:	9105      	str	r1, [sp, #20]
 8004018:	e7c4      	b.n	8003fa4 <_svfiprintf_r+0x130>
 800401a:	4604      	mov	r4, r0
 800401c:	2301      	movs	r3, #1
 800401e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004022:	e7f0      	b.n	8004006 <_svfiprintf_r+0x192>
 8004024:	ab03      	add	r3, sp, #12
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	462a      	mov	r2, r5
 800402a:	4638      	mov	r0, r7
 800402c:	4b0e      	ldr	r3, [pc, #56]	@ (8004068 <_svfiprintf_r+0x1f4>)
 800402e:	a904      	add	r1, sp, #16
 8004030:	f3af 8000 	nop.w
 8004034:	1c42      	adds	r2, r0, #1
 8004036:	4606      	mov	r6, r0
 8004038:	d1d6      	bne.n	8003fe8 <_svfiprintf_r+0x174>
 800403a:	89ab      	ldrh	r3, [r5, #12]
 800403c:	065b      	lsls	r3, r3, #25
 800403e:	f53f af2d 	bmi.w	8003e9c <_svfiprintf_r+0x28>
 8004042:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004044:	e72c      	b.n	8003ea0 <_svfiprintf_r+0x2c>
 8004046:	ab03      	add	r3, sp, #12
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	462a      	mov	r2, r5
 800404c:	4638      	mov	r0, r7
 800404e:	4b06      	ldr	r3, [pc, #24]	@ (8004068 <_svfiprintf_r+0x1f4>)
 8004050:	a904      	add	r1, sp, #16
 8004052:	f000 f9bd 	bl	80043d0 <_printf_i>
 8004056:	e7ed      	b.n	8004034 <_svfiprintf_r+0x1c0>
 8004058:	08004c5f 	.word	0x08004c5f
 800405c:	08004c65 	.word	0x08004c65
 8004060:	08004c69 	.word	0x08004c69
 8004064:	00000000 	.word	0x00000000
 8004068:	08003dbd 	.word	0x08003dbd

0800406c <__sfputc_r>:
 800406c:	6893      	ldr	r3, [r2, #8]
 800406e:	b410      	push	{r4}
 8004070:	3b01      	subs	r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	6093      	str	r3, [r2, #8]
 8004076:	da07      	bge.n	8004088 <__sfputc_r+0x1c>
 8004078:	6994      	ldr	r4, [r2, #24]
 800407a:	42a3      	cmp	r3, r4
 800407c:	db01      	blt.n	8004082 <__sfputc_r+0x16>
 800407e:	290a      	cmp	r1, #10
 8004080:	d102      	bne.n	8004088 <__sfputc_r+0x1c>
 8004082:	bc10      	pop	{r4}
 8004084:	f7ff bc85 	b.w	8003992 <__swbuf_r>
 8004088:	6813      	ldr	r3, [r2, #0]
 800408a:	1c58      	adds	r0, r3, #1
 800408c:	6010      	str	r0, [r2, #0]
 800408e:	7019      	strb	r1, [r3, #0]
 8004090:	4608      	mov	r0, r1
 8004092:	bc10      	pop	{r4}
 8004094:	4770      	bx	lr

08004096 <__sfputs_r>:
 8004096:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004098:	4606      	mov	r6, r0
 800409a:	460f      	mov	r7, r1
 800409c:	4614      	mov	r4, r2
 800409e:	18d5      	adds	r5, r2, r3
 80040a0:	42ac      	cmp	r4, r5
 80040a2:	d101      	bne.n	80040a8 <__sfputs_r+0x12>
 80040a4:	2000      	movs	r0, #0
 80040a6:	e007      	b.n	80040b8 <__sfputs_r+0x22>
 80040a8:	463a      	mov	r2, r7
 80040aa:	4630      	mov	r0, r6
 80040ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040b0:	f7ff ffdc 	bl	800406c <__sfputc_r>
 80040b4:	1c43      	adds	r3, r0, #1
 80040b6:	d1f3      	bne.n	80040a0 <__sfputs_r+0xa>
 80040b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080040bc <_vfiprintf_r>:
 80040bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040c0:	460d      	mov	r5, r1
 80040c2:	4614      	mov	r4, r2
 80040c4:	4698      	mov	r8, r3
 80040c6:	4606      	mov	r6, r0
 80040c8:	b09d      	sub	sp, #116	@ 0x74
 80040ca:	b118      	cbz	r0, 80040d4 <_vfiprintf_r+0x18>
 80040cc:	6a03      	ldr	r3, [r0, #32]
 80040ce:	b90b      	cbnz	r3, 80040d4 <_vfiprintf_r+0x18>
 80040d0:	f7ff fb40 	bl	8003754 <__sinit>
 80040d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80040d6:	07d9      	lsls	r1, r3, #31
 80040d8:	d405      	bmi.n	80040e6 <_vfiprintf_r+0x2a>
 80040da:	89ab      	ldrh	r3, [r5, #12]
 80040dc:	059a      	lsls	r2, r3, #22
 80040de:	d402      	bmi.n	80040e6 <_vfiprintf_r+0x2a>
 80040e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80040e2:	f7ff fd64 	bl	8003bae <__retarget_lock_acquire_recursive>
 80040e6:	89ab      	ldrh	r3, [r5, #12]
 80040e8:	071b      	lsls	r3, r3, #28
 80040ea:	d501      	bpl.n	80040f0 <_vfiprintf_r+0x34>
 80040ec:	692b      	ldr	r3, [r5, #16]
 80040ee:	b99b      	cbnz	r3, 8004118 <_vfiprintf_r+0x5c>
 80040f0:	4629      	mov	r1, r5
 80040f2:	4630      	mov	r0, r6
 80040f4:	f7ff fc8c 	bl	8003a10 <__swsetup_r>
 80040f8:	b170      	cbz	r0, 8004118 <_vfiprintf_r+0x5c>
 80040fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80040fc:	07dc      	lsls	r4, r3, #31
 80040fe:	d504      	bpl.n	800410a <_vfiprintf_r+0x4e>
 8004100:	f04f 30ff 	mov.w	r0, #4294967295
 8004104:	b01d      	add	sp, #116	@ 0x74
 8004106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800410a:	89ab      	ldrh	r3, [r5, #12]
 800410c:	0598      	lsls	r0, r3, #22
 800410e:	d4f7      	bmi.n	8004100 <_vfiprintf_r+0x44>
 8004110:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004112:	f7ff fd4d 	bl	8003bb0 <__retarget_lock_release_recursive>
 8004116:	e7f3      	b.n	8004100 <_vfiprintf_r+0x44>
 8004118:	2300      	movs	r3, #0
 800411a:	9309      	str	r3, [sp, #36]	@ 0x24
 800411c:	2320      	movs	r3, #32
 800411e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004122:	2330      	movs	r3, #48	@ 0x30
 8004124:	f04f 0901 	mov.w	r9, #1
 8004128:	f8cd 800c 	str.w	r8, [sp, #12]
 800412c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80042d8 <_vfiprintf_r+0x21c>
 8004130:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004134:	4623      	mov	r3, r4
 8004136:	469a      	mov	sl, r3
 8004138:	f813 2b01 	ldrb.w	r2, [r3], #1
 800413c:	b10a      	cbz	r2, 8004142 <_vfiprintf_r+0x86>
 800413e:	2a25      	cmp	r2, #37	@ 0x25
 8004140:	d1f9      	bne.n	8004136 <_vfiprintf_r+0x7a>
 8004142:	ebba 0b04 	subs.w	fp, sl, r4
 8004146:	d00b      	beq.n	8004160 <_vfiprintf_r+0xa4>
 8004148:	465b      	mov	r3, fp
 800414a:	4622      	mov	r2, r4
 800414c:	4629      	mov	r1, r5
 800414e:	4630      	mov	r0, r6
 8004150:	f7ff ffa1 	bl	8004096 <__sfputs_r>
 8004154:	3001      	adds	r0, #1
 8004156:	f000 80a7 	beq.w	80042a8 <_vfiprintf_r+0x1ec>
 800415a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800415c:	445a      	add	r2, fp
 800415e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004160:	f89a 3000 	ldrb.w	r3, [sl]
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 809f 	beq.w	80042a8 <_vfiprintf_r+0x1ec>
 800416a:	2300      	movs	r3, #0
 800416c:	f04f 32ff 	mov.w	r2, #4294967295
 8004170:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004174:	f10a 0a01 	add.w	sl, sl, #1
 8004178:	9304      	str	r3, [sp, #16]
 800417a:	9307      	str	r3, [sp, #28]
 800417c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004180:	931a      	str	r3, [sp, #104]	@ 0x68
 8004182:	4654      	mov	r4, sl
 8004184:	2205      	movs	r2, #5
 8004186:	f814 1b01 	ldrb.w	r1, [r4], #1
 800418a:	4853      	ldr	r0, [pc, #332]	@ (80042d8 <_vfiprintf_r+0x21c>)
 800418c:	f000 fb94 	bl	80048b8 <memchr>
 8004190:	9a04      	ldr	r2, [sp, #16]
 8004192:	b9d8      	cbnz	r0, 80041cc <_vfiprintf_r+0x110>
 8004194:	06d1      	lsls	r1, r2, #27
 8004196:	bf44      	itt	mi
 8004198:	2320      	movmi	r3, #32
 800419a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800419e:	0713      	lsls	r3, r2, #28
 80041a0:	bf44      	itt	mi
 80041a2:	232b      	movmi	r3, #43	@ 0x2b
 80041a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80041a8:	f89a 3000 	ldrb.w	r3, [sl]
 80041ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80041ae:	d015      	beq.n	80041dc <_vfiprintf_r+0x120>
 80041b0:	4654      	mov	r4, sl
 80041b2:	2000      	movs	r0, #0
 80041b4:	f04f 0c0a 	mov.w	ip, #10
 80041b8:	9a07      	ldr	r2, [sp, #28]
 80041ba:	4621      	mov	r1, r4
 80041bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041c0:	3b30      	subs	r3, #48	@ 0x30
 80041c2:	2b09      	cmp	r3, #9
 80041c4:	d94b      	bls.n	800425e <_vfiprintf_r+0x1a2>
 80041c6:	b1b0      	cbz	r0, 80041f6 <_vfiprintf_r+0x13a>
 80041c8:	9207      	str	r2, [sp, #28]
 80041ca:	e014      	b.n	80041f6 <_vfiprintf_r+0x13a>
 80041cc:	eba0 0308 	sub.w	r3, r0, r8
 80041d0:	fa09 f303 	lsl.w	r3, r9, r3
 80041d4:	4313      	orrs	r3, r2
 80041d6:	46a2      	mov	sl, r4
 80041d8:	9304      	str	r3, [sp, #16]
 80041da:	e7d2      	b.n	8004182 <_vfiprintf_r+0xc6>
 80041dc:	9b03      	ldr	r3, [sp, #12]
 80041de:	1d19      	adds	r1, r3, #4
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	9103      	str	r1, [sp, #12]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	bfbb      	ittet	lt
 80041e8:	425b      	neglt	r3, r3
 80041ea:	f042 0202 	orrlt.w	r2, r2, #2
 80041ee:	9307      	strge	r3, [sp, #28]
 80041f0:	9307      	strlt	r3, [sp, #28]
 80041f2:	bfb8      	it	lt
 80041f4:	9204      	strlt	r2, [sp, #16]
 80041f6:	7823      	ldrb	r3, [r4, #0]
 80041f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80041fa:	d10a      	bne.n	8004212 <_vfiprintf_r+0x156>
 80041fc:	7863      	ldrb	r3, [r4, #1]
 80041fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8004200:	d132      	bne.n	8004268 <_vfiprintf_r+0x1ac>
 8004202:	9b03      	ldr	r3, [sp, #12]
 8004204:	3402      	adds	r4, #2
 8004206:	1d1a      	adds	r2, r3, #4
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	9203      	str	r2, [sp, #12]
 800420c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004210:	9305      	str	r3, [sp, #20]
 8004212:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80042dc <_vfiprintf_r+0x220>
 8004216:	2203      	movs	r2, #3
 8004218:	4650      	mov	r0, sl
 800421a:	7821      	ldrb	r1, [r4, #0]
 800421c:	f000 fb4c 	bl	80048b8 <memchr>
 8004220:	b138      	cbz	r0, 8004232 <_vfiprintf_r+0x176>
 8004222:	2240      	movs	r2, #64	@ 0x40
 8004224:	9b04      	ldr	r3, [sp, #16]
 8004226:	eba0 000a 	sub.w	r0, r0, sl
 800422a:	4082      	lsls	r2, r0
 800422c:	4313      	orrs	r3, r2
 800422e:	3401      	adds	r4, #1
 8004230:	9304      	str	r3, [sp, #16]
 8004232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004236:	2206      	movs	r2, #6
 8004238:	4829      	ldr	r0, [pc, #164]	@ (80042e0 <_vfiprintf_r+0x224>)
 800423a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800423e:	f000 fb3b 	bl	80048b8 <memchr>
 8004242:	2800      	cmp	r0, #0
 8004244:	d03f      	beq.n	80042c6 <_vfiprintf_r+0x20a>
 8004246:	4b27      	ldr	r3, [pc, #156]	@ (80042e4 <_vfiprintf_r+0x228>)
 8004248:	bb1b      	cbnz	r3, 8004292 <_vfiprintf_r+0x1d6>
 800424a:	9b03      	ldr	r3, [sp, #12]
 800424c:	3307      	adds	r3, #7
 800424e:	f023 0307 	bic.w	r3, r3, #7
 8004252:	3308      	adds	r3, #8
 8004254:	9303      	str	r3, [sp, #12]
 8004256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004258:	443b      	add	r3, r7
 800425a:	9309      	str	r3, [sp, #36]	@ 0x24
 800425c:	e76a      	b.n	8004134 <_vfiprintf_r+0x78>
 800425e:	460c      	mov	r4, r1
 8004260:	2001      	movs	r0, #1
 8004262:	fb0c 3202 	mla	r2, ip, r2, r3
 8004266:	e7a8      	b.n	80041ba <_vfiprintf_r+0xfe>
 8004268:	2300      	movs	r3, #0
 800426a:	f04f 0c0a 	mov.w	ip, #10
 800426e:	4619      	mov	r1, r3
 8004270:	3401      	adds	r4, #1
 8004272:	9305      	str	r3, [sp, #20]
 8004274:	4620      	mov	r0, r4
 8004276:	f810 2b01 	ldrb.w	r2, [r0], #1
 800427a:	3a30      	subs	r2, #48	@ 0x30
 800427c:	2a09      	cmp	r2, #9
 800427e:	d903      	bls.n	8004288 <_vfiprintf_r+0x1cc>
 8004280:	2b00      	cmp	r3, #0
 8004282:	d0c6      	beq.n	8004212 <_vfiprintf_r+0x156>
 8004284:	9105      	str	r1, [sp, #20]
 8004286:	e7c4      	b.n	8004212 <_vfiprintf_r+0x156>
 8004288:	4604      	mov	r4, r0
 800428a:	2301      	movs	r3, #1
 800428c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004290:	e7f0      	b.n	8004274 <_vfiprintf_r+0x1b8>
 8004292:	ab03      	add	r3, sp, #12
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	462a      	mov	r2, r5
 8004298:	4630      	mov	r0, r6
 800429a:	4b13      	ldr	r3, [pc, #76]	@ (80042e8 <_vfiprintf_r+0x22c>)
 800429c:	a904      	add	r1, sp, #16
 800429e:	f3af 8000 	nop.w
 80042a2:	4607      	mov	r7, r0
 80042a4:	1c78      	adds	r0, r7, #1
 80042a6:	d1d6      	bne.n	8004256 <_vfiprintf_r+0x19a>
 80042a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80042aa:	07d9      	lsls	r1, r3, #31
 80042ac:	d405      	bmi.n	80042ba <_vfiprintf_r+0x1fe>
 80042ae:	89ab      	ldrh	r3, [r5, #12]
 80042b0:	059a      	lsls	r2, r3, #22
 80042b2:	d402      	bmi.n	80042ba <_vfiprintf_r+0x1fe>
 80042b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80042b6:	f7ff fc7b 	bl	8003bb0 <__retarget_lock_release_recursive>
 80042ba:	89ab      	ldrh	r3, [r5, #12]
 80042bc:	065b      	lsls	r3, r3, #25
 80042be:	f53f af1f 	bmi.w	8004100 <_vfiprintf_r+0x44>
 80042c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80042c4:	e71e      	b.n	8004104 <_vfiprintf_r+0x48>
 80042c6:	ab03      	add	r3, sp, #12
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	462a      	mov	r2, r5
 80042cc:	4630      	mov	r0, r6
 80042ce:	4b06      	ldr	r3, [pc, #24]	@ (80042e8 <_vfiprintf_r+0x22c>)
 80042d0:	a904      	add	r1, sp, #16
 80042d2:	f000 f87d 	bl	80043d0 <_printf_i>
 80042d6:	e7e4      	b.n	80042a2 <_vfiprintf_r+0x1e6>
 80042d8:	08004c5f 	.word	0x08004c5f
 80042dc:	08004c65 	.word	0x08004c65
 80042e0:	08004c69 	.word	0x08004c69
 80042e4:	00000000 	.word	0x00000000
 80042e8:	08004097 	.word	0x08004097

080042ec <_printf_common>:
 80042ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042f0:	4616      	mov	r6, r2
 80042f2:	4698      	mov	r8, r3
 80042f4:	688a      	ldr	r2, [r1, #8]
 80042f6:	690b      	ldr	r3, [r1, #16]
 80042f8:	4607      	mov	r7, r0
 80042fa:	4293      	cmp	r3, r2
 80042fc:	bfb8      	it	lt
 80042fe:	4613      	movlt	r3, r2
 8004300:	6033      	str	r3, [r6, #0]
 8004302:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004306:	460c      	mov	r4, r1
 8004308:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800430c:	b10a      	cbz	r2, 8004312 <_printf_common+0x26>
 800430e:	3301      	adds	r3, #1
 8004310:	6033      	str	r3, [r6, #0]
 8004312:	6823      	ldr	r3, [r4, #0]
 8004314:	0699      	lsls	r1, r3, #26
 8004316:	bf42      	ittt	mi
 8004318:	6833      	ldrmi	r3, [r6, #0]
 800431a:	3302      	addmi	r3, #2
 800431c:	6033      	strmi	r3, [r6, #0]
 800431e:	6825      	ldr	r5, [r4, #0]
 8004320:	f015 0506 	ands.w	r5, r5, #6
 8004324:	d106      	bne.n	8004334 <_printf_common+0x48>
 8004326:	f104 0a19 	add.w	sl, r4, #25
 800432a:	68e3      	ldr	r3, [r4, #12]
 800432c:	6832      	ldr	r2, [r6, #0]
 800432e:	1a9b      	subs	r3, r3, r2
 8004330:	42ab      	cmp	r3, r5
 8004332:	dc2b      	bgt.n	800438c <_printf_common+0xa0>
 8004334:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004338:	6822      	ldr	r2, [r4, #0]
 800433a:	3b00      	subs	r3, #0
 800433c:	bf18      	it	ne
 800433e:	2301      	movne	r3, #1
 8004340:	0692      	lsls	r2, r2, #26
 8004342:	d430      	bmi.n	80043a6 <_printf_common+0xba>
 8004344:	4641      	mov	r1, r8
 8004346:	4638      	mov	r0, r7
 8004348:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800434c:	47c8      	blx	r9
 800434e:	3001      	adds	r0, #1
 8004350:	d023      	beq.n	800439a <_printf_common+0xae>
 8004352:	6823      	ldr	r3, [r4, #0]
 8004354:	6922      	ldr	r2, [r4, #16]
 8004356:	f003 0306 	and.w	r3, r3, #6
 800435a:	2b04      	cmp	r3, #4
 800435c:	bf14      	ite	ne
 800435e:	2500      	movne	r5, #0
 8004360:	6833      	ldreq	r3, [r6, #0]
 8004362:	f04f 0600 	mov.w	r6, #0
 8004366:	bf08      	it	eq
 8004368:	68e5      	ldreq	r5, [r4, #12]
 800436a:	f104 041a 	add.w	r4, r4, #26
 800436e:	bf08      	it	eq
 8004370:	1aed      	subeq	r5, r5, r3
 8004372:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004376:	bf08      	it	eq
 8004378:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800437c:	4293      	cmp	r3, r2
 800437e:	bfc4      	itt	gt
 8004380:	1a9b      	subgt	r3, r3, r2
 8004382:	18ed      	addgt	r5, r5, r3
 8004384:	42b5      	cmp	r5, r6
 8004386:	d11a      	bne.n	80043be <_printf_common+0xd2>
 8004388:	2000      	movs	r0, #0
 800438a:	e008      	b.n	800439e <_printf_common+0xb2>
 800438c:	2301      	movs	r3, #1
 800438e:	4652      	mov	r2, sl
 8004390:	4641      	mov	r1, r8
 8004392:	4638      	mov	r0, r7
 8004394:	47c8      	blx	r9
 8004396:	3001      	adds	r0, #1
 8004398:	d103      	bne.n	80043a2 <_printf_common+0xb6>
 800439a:	f04f 30ff 	mov.w	r0, #4294967295
 800439e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043a2:	3501      	adds	r5, #1
 80043a4:	e7c1      	b.n	800432a <_printf_common+0x3e>
 80043a6:	2030      	movs	r0, #48	@ 0x30
 80043a8:	18e1      	adds	r1, r4, r3
 80043aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80043b4:	4422      	add	r2, r4
 80043b6:	3302      	adds	r3, #2
 80043b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80043bc:	e7c2      	b.n	8004344 <_printf_common+0x58>
 80043be:	2301      	movs	r3, #1
 80043c0:	4622      	mov	r2, r4
 80043c2:	4641      	mov	r1, r8
 80043c4:	4638      	mov	r0, r7
 80043c6:	47c8      	blx	r9
 80043c8:	3001      	adds	r0, #1
 80043ca:	d0e6      	beq.n	800439a <_printf_common+0xae>
 80043cc:	3601      	adds	r6, #1
 80043ce:	e7d9      	b.n	8004384 <_printf_common+0x98>

080043d0 <_printf_i>:
 80043d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043d4:	7e0f      	ldrb	r7, [r1, #24]
 80043d6:	4691      	mov	r9, r2
 80043d8:	2f78      	cmp	r7, #120	@ 0x78
 80043da:	4680      	mov	r8, r0
 80043dc:	460c      	mov	r4, r1
 80043de:	469a      	mov	sl, r3
 80043e0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80043e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80043e6:	d807      	bhi.n	80043f8 <_printf_i+0x28>
 80043e8:	2f62      	cmp	r7, #98	@ 0x62
 80043ea:	d80a      	bhi.n	8004402 <_printf_i+0x32>
 80043ec:	2f00      	cmp	r7, #0
 80043ee:	f000 80d1 	beq.w	8004594 <_printf_i+0x1c4>
 80043f2:	2f58      	cmp	r7, #88	@ 0x58
 80043f4:	f000 80b8 	beq.w	8004568 <_printf_i+0x198>
 80043f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80043fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004400:	e03a      	b.n	8004478 <_printf_i+0xa8>
 8004402:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004406:	2b15      	cmp	r3, #21
 8004408:	d8f6      	bhi.n	80043f8 <_printf_i+0x28>
 800440a:	a101      	add	r1, pc, #4	@ (adr r1, 8004410 <_printf_i+0x40>)
 800440c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004410:	08004469 	.word	0x08004469
 8004414:	0800447d 	.word	0x0800447d
 8004418:	080043f9 	.word	0x080043f9
 800441c:	080043f9 	.word	0x080043f9
 8004420:	080043f9 	.word	0x080043f9
 8004424:	080043f9 	.word	0x080043f9
 8004428:	0800447d 	.word	0x0800447d
 800442c:	080043f9 	.word	0x080043f9
 8004430:	080043f9 	.word	0x080043f9
 8004434:	080043f9 	.word	0x080043f9
 8004438:	080043f9 	.word	0x080043f9
 800443c:	0800457b 	.word	0x0800457b
 8004440:	080044a7 	.word	0x080044a7
 8004444:	08004535 	.word	0x08004535
 8004448:	080043f9 	.word	0x080043f9
 800444c:	080043f9 	.word	0x080043f9
 8004450:	0800459d 	.word	0x0800459d
 8004454:	080043f9 	.word	0x080043f9
 8004458:	080044a7 	.word	0x080044a7
 800445c:	080043f9 	.word	0x080043f9
 8004460:	080043f9 	.word	0x080043f9
 8004464:	0800453d 	.word	0x0800453d
 8004468:	6833      	ldr	r3, [r6, #0]
 800446a:	1d1a      	adds	r2, r3, #4
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6032      	str	r2, [r6, #0]
 8004470:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004474:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004478:	2301      	movs	r3, #1
 800447a:	e09c      	b.n	80045b6 <_printf_i+0x1e6>
 800447c:	6833      	ldr	r3, [r6, #0]
 800447e:	6820      	ldr	r0, [r4, #0]
 8004480:	1d19      	adds	r1, r3, #4
 8004482:	6031      	str	r1, [r6, #0]
 8004484:	0606      	lsls	r6, r0, #24
 8004486:	d501      	bpl.n	800448c <_printf_i+0xbc>
 8004488:	681d      	ldr	r5, [r3, #0]
 800448a:	e003      	b.n	8004494 <_printf_i+0xc4>
 800448c:	0645      	lsls	r5, r0, #25
 800448e:	d5fb      	bpl.n	8004488 <_printf_i+0xb8>
 8004490:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004494:	2d00      	cmp	r5, #0
 8004496:	da03      	bge.n	80044a0 <_printf_i+0xd0>
 8004498:	232d      	movs	r3, #45	@ 0x2d
 800449a:	426d      	negs	r5, r5
 800449c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044a0:	230a      	movs	r3, #10
 80044a2:	4858      	ldr	r0, [pc, #352]	@ (8004604 <_printf_i+0x234>)
 80044a4:	e011      	b.n	80044ca <_printf_i+0xfa>
 80044a6:	6821      	ldr	r1, [r4, #0]
 80044a8:	6833      	ldr	r3, [r6, #0]
 80044aa:	0608      	lsls	r0, r1, #24
 80044ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80044b0:	d402      	bmi.n	80044b8 <_printf_i+0xe8>
 80044b2:	0649      	lsls	r1, r1, #25
 80044b4:	bf48      	it	mi
 80044b6:	b2ad      	uxthmi	r5, r5
 80044b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80044ba:	6033      	str	r3, [r6, #0]
 80044bc:	bf14      	ite	ne
 80044be:	230a      	movne	r3, #10
 80044c0:	2308      	moveq	r3, #8
 80044c2:	4850      	ldr	r0, [pc, #320]	@ (8004604 <_printf_i+0x234>)
 80044c4:	2100      	movs	r1, #0
 80044c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80044ca:	6866      	ldr	r6, [r4, #4]
 80044cc:	2e00      	cmp	r6, #0
 80044ce:	60a6      	str	r6, [r4, #8]
 80044d0:	db05      	blt.n	80044de <_printf_i+0x10e>
 80044d2:	6821      	ldr	r1, [r4, #0]
 80044d4:	432e      	orrs	r6, r5
 80044d6:	f021 0104 	bic.w	r1, r1, #4
 80044da:	6021      	str	r1, [r4, #0]
 80044dc:	d04b      	beq.n	8004576 <_printf_i+0x1a6>
 80044de:	4616      	mov	r6, r2
 80044e0:	fbb5 f1f3 	udiv	r1, r5, r3
 80044e4:	fb03 5711 	mls	r7, r3, r1, r5
 80044e8:	5dc7      	ldrb	r7, [r0, r7]
 80044ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80044ee:	462f      	mov	r7, r5
 80044f0:	42bb      	cmp	r3, r7
 80044f2:	460d      	mov	r5, r1
 80044f4:	d9f4      	bls.n	80044e0 <_printf_i+0x110>
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d10b      	bne.n	8004512 <_printf_i+0x142>
 80044fa:	6823      	ldr	r3, [r4, #0]
 80044fc:	07df      	lsls	r7, r3, #31
 80044fe:	d508      	bpl.n	8004512 <_printf_i+0x142>
 8004500:	6923      	ldr	r3, [r4, #16]
 8004502:	6861      	ldr	r1, [r4, #4]
 8004504:	4299      	cmp	r1, r3
 8004506:	bfde      	ittt	le
 8004508:	2330      	movle	r3, #48	@ 0x30
 800450a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800450e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004512:	1b92      	subs	r2, r2, r6
 8004514:	6122      	str	r2, [r4, #16]
 8004516:	464b      	mov	r3, r9
 8004518:	4621      	mov	r1, r4
 800451a:	4640      	mov	r0, r8
 800451c:	f8cd a000 	str.w	sl, [sp]
 8004520:	aa03      	add	r2, sp, #12
 8004522:	f7ff fee3 	bl	80042ec <_printf_common>
 8004526:	3001      	adds	r0, #1
 8004528:	d14a      	bne.n	80045c0 <_printf_i+0x1f0>
 800452a:	f04f 30ff 	mov.w	r0, #4294967295
 800452e:	b004      	add	sp, #16
 8004530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004534:	6823      	ldr	r3, [r4, #0]
 8004536:	f043 0320 	orr.w	r3, r3, #32
 800453a:	6023      	str	r3, [r4, #0]
 800453c:	2778      	movs	r7, #120	@ 0x78
 800453e:	4832      	ldr	r0, [pc, #200]	@ (8004608 <_printf_i+0x238>)
 8004540:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004544:	6823      	ldr	r3, [r4, #0]
 8004546:	6831      	ldr	r1, [r6, #0]
 8004548:	061f      	lsls	r7, r3, #24
 800454a:	f851 5b04 	ldr.w	r5, [r1], #4
 800454e:	d402      	bmi.n	8004556 <_printf_i+0x186>
 8004550:	065f      	lsls	r7, r3, #25
 8004552:	bf48      	it	mi
 8004554:	b2ad      	uxthmi	r5, r5
 8004556:	6031      	str	r1, [r6, #0]
 8004558:	07d9      	lsls	r1, r3, #31
 800455a:	bf44      	itt	mi
 800455c:	f043 0320 	orrmi.w	r3, r3, #32
 8004560:	6023      	strmi	r3, [r4, #0]
 8004562:	b11d      	cbz	r5, 800456c <_printf_i+0x19c>
 8004564:	2310      	movs	r3, #16
 8004566:	e7ad      	b.n	80044c4 <_printf_i+0xf4>
 8004568:	4826      	ldr	r0, [pc, #152]	@ (8004604 <_printf_i+0x234>)
 800456a:	e7e9      	b.n	8004540 <_printf_i+0x170>
 800456c:	6823      	ldr	r3, [r4, #0]
 800456e:	f023 0320 	bic.w	r3, r3, #32
 8004572:	6023      	str	r3, [r4, #0]
 8004574:	e7f6      	b.n	8004564 <_printf_i+0x194>
 8004576:	4616      	mov	r6, r2
 8004578:	e7bd      	b.n	80044f6 <_printf_i+0x126>
 800457a:	6833      	ldr	r3, [r6, #0]
 800457c:	6825      	ldr	r5, [r4, #0]
 800457e:	1d18      	adds	r0, r3, #4
 8004580:	6961      	ldr	r1, [r4, #20]
 8004582:	6030      	str	r0, [r6, #0]
 8004584:	062e      	lsls	r6, r5, #24
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	d501      	bpl.n	800458e <_printf_i+0x1be>
 800458a:	6019      	str	r1, [r3, #0]
 800458c:	e002      	b.n	8004594 <_printf_i+0x1c4>
 800458e:	0668      	lsls	r0, r5, #25
 8004590:	d5fb      	bpl.n	800458a <_printf_i+0x1ba>
 8004592:	8019      	strh	r1, [r3, #0]
 8004594:	2300      	movs	r3, #0
 8004596:	4616      	mov	r6, r2
 8004598:	6123      	str	r3, [r4, #16]
 800459a:	e7bc      	b.n	8004516 <_printf_i+0x146>
 800459c:	6833      	ldr	r3, [r6, #0]
 800459e:	2100      	movs	r1, #0
 80045a0:	1d1a      	adds	r2, r3, #4
 80045a2:	6032      	str	r2, [r6, #0]
 80045a4:	681e      	ldr	r6, [r3, #0]
 80045a6:	6862      	ldr	r2, [r4, #4]
 80045a8:	4630      	mov	r0, r6
 80045aa:	f000 f985 	bl	80048b8 <memchr>
 80045ae:	b108      	cbz	r0, 80045b4 <_printf_i+0x1e4>
 80045b0:	1b80      	subs	r0, r0, r6
 80045b2:	6060      	str	r0, [r4, #4]
 80045b4:	6863      	ldr	r3, [r4, #4]
 80045b6:	6123      	str	r3, [r4, #16]
 80045b8:	2300      	movs	r3, #0
 80045ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045be:	e7aa      	b.n	8004516 <_printf_i+0x146>
 80045c0:	4632      	mov	r2, r6
 80045c2:	4649      	mov	r1, r9
 80045c4:	4640      	mov	r0, r8
 80045c6:	6923      	ldr	r3, [r4, #16]
 80045c8:	47d0      	blx	sl
 80045ca:	3001      	adds	r0, #1
 80045cc:	d0ad      	beq.n	800452a <_printf_i+0x15a>
 80045ce:	6823      	ldr	r3, [r4, #0]
 80045d0:	079b      	lsls	r3, r3, #30
 80045d2:	d413      	bmi.n	80045fc <_printf_i+0x22c>
 80045d4:	68e0      	ldr	r0, [r4, #12]
 80045d6:	9b03      	ldr	r3, [sp, #12]
 80045d8:	4298      	cmp	r0, r3
 80045da:	bfb8      	it	lt
 80045dc:	4618      	movlt	r0, r3
 80045de:	e7a6      	b.n	800452e <_printf_i+0x15e>
 80045e0:	2301      	movs	r3, #1
 80045e2:	4632      	mov	r2, r6
 80045e4:	4649      	mov	r1, r9
 80045e6:	4640      	mov	r0, r8
 80045e8:	47d0      	blx	sl
 80045ea:	3001      	adds	r0, #1
 80045ec:	d09d      	beq.n	800452a <_printf_i+0x15a>
 80045ee:	3501      	adds	r5, #1
 80045f0:	68e3      	ldr	r3, [r4, #12]
 80045f2:	9903      	ldr	r1, [sp, #12]
 80045f4:	1a5b      	subs	r3, r3, r1
 80045f6:	42ab      	cmp	r3, r5
 80045f8:	dcf2      	bgt.n	80045e0 <_printf_i+0x210>
 80045fa:	e7eb      	b.n	80045d4 <_printf_i+0x204>
 80045fc:	2500      	movs	r5, #0
 80045fe:	f104 0619 	add.w	r6, r4, #25
 8004602:	e7f5      	b.n	80045f0 <_printf_i+0x220>
 8004604:	08004c70 	.word	0x08004c70
 8004608:	08004c81 	.word	0x08004c81

0800460c <__sflush_r>:
 800460c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004612:	0716      	lsls	r6, r2, #28
 8004614:	4605      	mov	r5, r0
 8004616:	460c      	mov	r4, r1
 8004618:	d454      	bmi.n	80046c4 <__sflush_r+0xb8>
 800461a:	684b      	ldr	r3, [r1, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	dc02      	bgt.n	8004626 <__sflush_r+0x1a>
 8004620:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004622:	2b00      	cmp	r3, #0
 8004624:	dd48      	ble.n	80046b8 <__sflush_r+0xac>
 8004626:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004628:	2e00      	cmp	r6, #0
 800462a:	d045      	beq.n	80046b8 <__sflush_r+0xac>
 800462c:	2300      	movs	r3, #0
 800462e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004632:	682f      	ldr	r7, [r5, #0]
 8004634:	6a21      	ldr	r1, [r4, #32]
 8004636:	602b      	str	r3, [r5, #0]
 8004638:	d030      	beq.n	800469c <__sflush_r+0x90>
 800463a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800463c:	89a3      	ldrh	r3, [r4, #12]
 800463e:	0759      	lsls	r1, r3, #29
 8004640:	d505      	bpl.n	800464e <__sflush_r+0x42>
 8004642:	6863      	ldr	r3, [r4, #4]
 8004644:	1ad2      	subs	r2, r2, r3
 8004646:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004648:	b10b      	cbz	r3, 800464e <__sflush_r+0x42>
 800464a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800464c:	1ad2      	subs	r2, r2, r3
 800464e:	2300      	movs	r3, #0
 8004650:	4628      	mov	r0, r5
 8004652:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004654:	6a21      	ldr	r1, [r4, #32]
 8004656:	47b0      	blx	r6
 8004658:	1c43      	adds	r3, r0, #1
 800465a:	89a3      	ldrh	r3, [r4, #12]
 800465c:	d106      	bne.n	800466c <__sflush_r+0x60>
 800465e:	6829      	ldr	r1, [r5, #0]
 8004660:	291d      	cmp	r1, #29
 8004662:	d82b      	bhi.n	80046bc <__sflush_r+0xb0>
 8004664:	4a28      	ldr	r2, [pc, #160]	@ (8004708 <__sflush_r+0xfc>)
 8004666:	40ca      	lsrs	r2, r1
 8004668:	07d6      	lsls	r6, r2, #31
 800466a:	d527      	bpl.n	80046bc <__sflush_r+0xb0>
 800466c:	2200      	movs	r2, #0
 800466e:	6062      	str	r2, [r4, #4]
 8004670:	6922      	ldr	r2, [r4, #16]
 8004672:	04d9      	lsls	r1, r3, #19
 8004674:	6022      	str	r2, [r4, #0]
 8004676:	d504      	bpl.n	8004682 <__sflush_r+0x76>
 8004678:	1c42      	adds	r2, r0, #1
 800467a:	d101      	bne.n	8004680 <__sflush_r+0x74>
 800467c:	682b      	ldr	r3, [r5, #0]
 800467e:	b903      	cbnz	r3, 8004682 <__sflush_r+0x76>
 8004680:	6560      	str	r0, [r4, #84]	@ 0x54
 8004682:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004684:	602f      	str	r7, [r5, #0]
 8004686:	b1b9      	cbz	r1, 80046b8 <__sflush_r+0xac>
 8004688:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800468c:	4299      	cmp	r1, r3
 800468e:	d002      	beq.n	8004696 <__sflush_r+0x8a>
 8004690:	4628      	mov	r0, r5
 8004692:	f7ff fa9d 	bl	8003bd0 <_free_r>
 8004696:	2300      	movs	r3, #0
 8004698:	6363      	str	r3, [r4, #52]	@ 0x34
 800469a:	e00d      	b.n	80046b8 <__sflush_r+0xac>
 800469c:	2301      	movs	r3, #1
 800469e:	4628      	mov	r0, r5
 80046a0:	47b0      	blx	r6
 80046a2:	4602      	mov	r2, r0
 80046a4:	1c50      	adds	r0, r2, #1
 80046a6:	d1c9      	bne.n	800463c <__sflush_r+0x30>
 80046a8:	682b      	ldr	r3, [r5, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0c6      	beq.n	800463c <__sflush_r+0x30>
 80046ae:	2b1d      	cmp	r3, #29
 80046b0:	d001      	beq.n	80046b6 <__sflush_r+0xaa>
 80046b2:	2b16      	cmp	r3, #22
 80046b4:	d11d      	bne.n	80046f2 <__sflush_r+0xe6>
 80046b6:	602f      	str	r7, [r5, #0]
 80046b8:	2000      	movs	r0, #0
 80046ba:	e021      	b.n	8004700 <__sflush_r+0xf4>
 80046bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046c0:	b21b      	sxth	r3, r3
 80046c2:	e01a      	b.n	80046fa <__sflush_r+0xee>
 80046c4:	690f      	ldr	r7, [r1, #16]
 80046c6:	2f00      	cmp	r7, #0
 80046c8:	d0f6      	beq.n	80046b8 <__sflush_r+0xac>
 80046ca:	0793      	lsls	r3, r2, #30
 80046cc:	bf18      	it	ne
 80046ce:	2300      	movne	r3, #0
 80046d0:	680e      	ldr	r6, [r1, #0]
 80046d2:	bf08      	it	eq
 80046d4:	694b      	ldreq	r3, [r1, #20]
 80046d6:	1bf6      	subs	r6, r6, r7
 80046d8:	600f      	str	r7, [r1, #0]
 80046da:	608b      	str	r3, [r1, #8]
 80046dc:	2e00      	cmp	r6, #0
 80046de:	ddeb      	ble.n	80046b8 <__sflush_r+0xac>
 80046e0:	4633      	mov	r3, r6
 80046e2:	463a      	mov	r2, r7
 80046e4:	4628      	mov	r0, r5
 80046e6:	6a21      	ldr	r1, [r4, #32]
 80046e8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80046ec:	47e0      	blx	ip
 80046ee:	2800      	cmp	r0, #0
 80046f0:	dc07      	bgt.n	8004702 <__sflush_r+0xf6>
 80046f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046fa:	f04f 30ff 	mov.w	r0, #4294967295
 80046fe:	81a3      	strh	r3, [r4, #12]
 8004700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004702:	4407      	add	r7, r0
 8004704:	1a36      	subs	r6, r6, r0
 8004706:	e7e9      	b.n	80046dc <__sflush_r+0xd0>
 8004708:	20400001 	.word	0x20400001

0800470c <_fflush_r>:
 800470c:	b538      	push	{r3, r4, r5, lr}
 800470e:	690b      	ldr	r3, [r1, #16]
 8004710:	4605      	mov	r5, r0
 8004712:	460c      	mov	r4, r1
 8004714:	b913      	cbnz	r3, 800471c <_fflush_r+0x10>
 8004716:	2500      	movs	r5, #0
 8004718:	4628      	mov	r0, r5
 800471a:	bd38      	pop	{r3, r4, r5, pc}
 800471c:	b118      	cbz	r0, 8004726 <_fflush_r+0x1a>
 800471e:	6a03      	ldr	r3, [r0, #32]
 8004720:	b90b      	cbnz	r3, 8004726 <_fflush_r+0x1a>
 8004722:	f7ff f817 	bl	8003754 <__sinit>
 8004726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d0f3      	beq.n	8004716 <_fflush_r+0xa>
 800472e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004730:	07d0      	lsls	r0, r2, #31
 8004732:	d404      	bmi.n	800473e <_fflush_r+0x32>
 8004734:	0599      	lsls	r1, r3, #22
 8004736:	d402      	bmi.n	800473e <_fflush_r+0x32>
 8004738:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800473a:	f7ff fa38 	bl	8003bae <__retarget_lock_acquire_recursive>
 800473e:	4628      	mov	r0, r5
 8004740:	4621      	mov	r1, r4
 8004742:	f7ff ff63 	bl	800460c <__sflush_r>
 8004746:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004748:	4605      	mov	r5, r0
 800474a:	07da      	lsls	r2, r3, #31
 800474c:	d4e4      	bmi.n	8004718 <_fflush_r+0xc>
 800474e:	89a3      	ldrh	r3, [r4, #12]
 8004750:	059b      	lsls	r3, r3, #22
 8004752:	d4e1      	bmi.n	8004718 <_fflush_r+0xc>
 8004754:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004756:	f7ff fa2b 	bl	8003bb0 <__retarget_lock_release_recursive>
 800475a:	e7dd      	b.n	8004718 <_fflush_r+0xc>

0800475c <__swhatbuf_r>:
 800475c:	b570      	push	{r4, r5, r6, lr}
 800475e:	460c      	mov	r4, r1
 8004760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004764:	4615      	mov	r5, r2
 8004766:	2900      	cmp	r1, #0
 8004768:	461e      	mov	r6, r3
 800476a:	b096      	sub	sp, #88	@ 0x58
 800476c:	da0c      	bge.n	8004788 <__swhatbuf_r+0x2c>
 800476e:	89a3      	ldrh	r3, [r4, #12]
 8004770:	2100      	movs	r1, #0
 8004772:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004776:	bf14      	ite	ne
 8004778:	2340      	movne	r3, #64	@ 0x40
 800477a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800477e:	2000      	movs	r0, #0
 8004780:	6031      	str	r1, [r6, #0]
 8004782:	602b      	str	r3, [r5, #0]
 8004784:	b016      	add	sp, #88	@ 0x58
 8004786:	bd70      	pop	{r4, r5, r6, pc}
 8004788:	466a      	mov	r2, sp
 800478a:	f000 f863 	bl	8004854 <_fstat_r>
 800478e:	2800      	cmp	r0, #0
 8004790:	dbed      	blt.n	800476e <__swhatbuf_r+0x12>
 8004792:	9901      	ldr	r1, [sp, #4]
 8004794:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004798:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800479c:	4259      	negs	r1, r3
 800479e:	4159      	adcs	r1, r3
 80047a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80047a4:	e7eb      	b.n	800477e <__swhatbuf_r+0x22>

080047a6 <__smakebuf_r>:
 80047a6:	898b      	ldrh	r3, [r1, #12]
 80047a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047aa:	079d      	lsls	r5, r3, #30
 80047ac:	4606      	mov	r6, r0
 80047ae:	460c      	mov	r4, r1
 80047b0:	d507      	bpl.n	80047c2 <__smakebuf_r+0x1c>
 80047b2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80047b6:	6023      	str	r3, [r4, #0]
 80047b8:	6123      	str	r3, [r4, #16]
 80047ba:	2301      	movs	r3, #1
 80047bc:	6163      	str	r3, [r4, #20]
 80047be:	b003      	add	sp, #12
 80047c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047c2:	466a      	mov	r2, sp
 80047c4:	ab01      	add	r3, sp, #4
 80047c6:	f7ff ffc9 	bl	800475c <__swhatbuf_r>
 80047ca:	9f00      	ldr	r7, [sp, #0]
 80047cc:	4605      	mov	r5, r0
 80047ce:	4639      	mov	r1, r7
 80047d0:	4630      	mov	r0, r6
 80047d2:	f7ff fa67 	bl	8003ca4 <_malloc_r>
 80047d6:	b948      	cbnz	r0, 80047ec <__smakebuf_r+0x46>
 80047d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047dc:	059a      	lsls	r2, r3, #22
 80047de:	d4ee      	bmi.n	80047be <__smakebuf_r+0x18>
 80047e0:	f023 0303 	bic.w	r3, r3, #3
 80047e4:	f043 0302 	orr.w	r3, r3, #2
 80047e8:	81a3      	strh	r3, [r4, #12]
 80047ea:	e7e2      	b.n	80047b2 <__smakebuf_r+0xc>
 80047ec:	89a3      	ldrh	r3, [r4, #12]
 80047ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80047f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047f6:	81a3      	strh	r3, [r4, #12]
 80047f8:	9b01      	ldr	r3, [sp, #4]
 80047fa:	6020      	str	r0, [r4, #0]
 80047fc:	b15b      	cbz	r3, 8004816 <__smakebuf_r+0x70>
 80047fe:	4630      	mov	r0, r6
 8004800:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004804:	f000 f838 	bl	8004878 <_isatty_r>
 8004808:	b128      	cbz	r0, 8004816 <__smakebuf_r+0x70>
 800480a:	89a3      	ldrh	r3, [r4, #12]
 800480c:	f023 0303 	bic.w	r3, r3, #3
 8004810:	f043 0301 	orr.w	r3, r3, #1
 8004814:	81a3      	strh	r3, [r4, #12]
 8004816:	89a3      	ldrh	r3, [r4, #12]
 8004818:	431d      	orrs	r5, r3
 800481a:	81a5      	strh	r5, [r4, #12]
 800481c:	e7cf      	b.n	80047be <__smakebuf_r+0x18>

0800481e <memmove>:
 800481e:	4288      	cmp	r0, r1
 8004820:	b510      	push	{r4, lr}
 8004822:	eb01 0402 	add.w	r4, r1, r2
 8004826:	d902      	bls.n	800482e <memmove+0x10>
 8004828:	4284      	cmp	r4, r0
 800482a:	4623      	mov	r3, r4
 800482c:	d807      	bhi.n	800483e <memmove+0x20>
 800482e:	1e43      	subs	r3, r0, #1
 8004830:	42a1      	cmp	r1, r4
 8004832:	d008      	beq.n	8004846 <memmove+0x28>
 8004834:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004838:	f803 2f01 	strb.w	r2, [r3, #1]!
 800483c:	e7f8      	b.n	8004830 <memmove+0x12>
 800483e:	4601      	mov	r1, r0
 8004840:	4402      	add	r2, r0
 8004842:	428a      	cmp	r2, r1
 8004844:	d100      	bne.n	8004848 <memmove+0x2a>
 8004846:	bd10      	pop	{r4, pc}
 8004848:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800484c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004850:	e7f7      	b.n	8004842 <memmove+0x24>
	...

08004854 <_fstat_r>:
 8004854:	b538      	push	{r3, r4, r5, lr}
 8004856:	2300      	movs	r3, #0
 8004858:	4d06      	ldr	r5, [pc, #24]	@ (8004874 <_fstat_r+0x20>)
 800485a:	4604      	mov	r4, r0
 800485c:	4608      	mov	r0, r1
 800485e:	4611      	mov	r1, r2
 8004860:	602b      	str	r3, [r5, #0]
 8004862:	f7fd f8b0 	bl	80019c6 <_fstat>
 8004866:	1c43      	adds	r3, r0, #1
 8004868:	d102      	bne.n	8004870 <_fstat_r+0x1c>
 800486a:	682b      	ldr	r3, [r5, #0]
 800486c:	b103      	cbz	r3, 8004870 <_fstat_r+0x1c>
 800486e:	6023      	str	r3, [r4, #0]
 8004870:	bd38      	pop	{r3, r4, r5, pc}
 8004872:	bf00      	nop
 8004874:	200002d8 	.word	0x200002d8

08004878 <_isatty_r>:
 8004878:	b538      	push	{r3, r4, r5, lr}
 800487a:	2300      	movs	r3, #0
 800487c:	4d05      	ldr	r5, [pc, #20]	@ (8004894 <_isatty_r+0x1c>)
 800487e:	4604      	mov	r4, r0
 8004880:	4608      	mov	r0, r1
 8004882:	602b      	str	r3, [r5, #0]
 8004884:	f7fd f8ae 	bl	80019e4 <_isatty>
 8004888:	1c43      	adds	r3, r0, #1
 800488a:	d102      	bne.n	8004892 <_isatty_r+0x1a>
 800488c:	682b      	ldr	r3, [r5, #0]
 800488e:	b103      	cbz	r3, 8004892 <_isatty_r+0x1a>
 8004890:	6023      	str	r3, [r4, #0]
 8004892:	bd38      	pop	{r3, r4, r5, pc}
 8004894:	200002d8 	.word	0x200002d8

08004898 <_sbrk_r>:
 8004898:	b538      	push	{r3, r4, r5, lr}
 800489a:	2300      	movs	r3, #0
 800489c:	4d05      	ldr	r5, [pc, #20]	@ (80048b4 <_sbrk_r+0x1c>)
 800489e:	4604      	mov	r4, r0
 80048a0:	4608      	mov	r0, r1
 80048a2:	602b      	str	r3, [r5, #0]
 80048a4:	f7fd f8b4 	bl	8001a10 <_sbrk>
 80048a8:	1c43      	adds	r3, r0, #1
 80048aa:	d102      	bne.n	80048b2 <_sbrk_r+0x1a>
 80048ac:	682b      	ldr	r3, [r5, #0]
 80048ae:	b103      	cbz	r3, 80048b2 <_sbrk_r+0x1a>
 80048b0:	6023      	str	r3, [r4, #0]
 80048b2:	bd38      	pop	{r3, r4, r5, pc}
 80048b4:	200002d8 	.word	0x200002d8

080048b8 <memchr>:
 80048b8:	4603      	mov	r3, r0
 80048ba:	b510      	push	{r4, lr}
 80048bc:	b2c9      	uxtb	r1, r1
 80048be:	4402      	add	r2, r0
 80048c0:	4293      	cmp	r3, r2
 80048c2:	4618      	mov	r0, r3
 80048c4:	d101      	bne.n	80048ca <memchr+0x12>
 80048c6:	2000      	movs	r0, #0
 80048c8:	e003      	b.n	80048d2 <memchr+0x1a>
 80048ca:	7804      	ldrb	r4, [r0, #0]
 80048cc:	3301      	adds	r3, #1
 80048ce:	428c      	cmp	r4, r1
 80048d0:	d1f6      	bne.n	80048c0 <memchr+0x8>
 80048d2:	bd10      	pop	{r4, pc}

080048d4 <_realloc_r>:
 80048d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048d8:	4607      	mov	r7, r0
 80048da:	4614      	mov	r4, r2
 80048dc:	460d      	mov	r5, r1
 80048de:	b921      	cbnz	r1, 80048ea <_realloc_r+0x16>
 80048e0:	4611      	mov	r1, r2
 80048e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048e6:	f7ff b9dd 	b.w	8003ca4 <_malloc_r>
 80048ea:	b92a      	cbnz	r2, 80048f8 <_realloc_r+0x24>
 80048ec:	f7ff f970 	bl	8003bd0 <_free_r>
 80048f0:	4625      	mov	r5, r4
 80048f2:	4628      	mov	r0, r5
 80048f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048f8:	f000 f81a 	bl	8004930 <_malloc_usable_size_r>
 80048fc:	4284      	cmp	r4, r0
 80048fe:	4606      	mov	r6, r0
 8004900:	d802      	bhi.n	8004908 <_realloc_r+0x34>
 8004902:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004906:	d8f4      	bhi.n	80048f2 <_realloc_r+0x1e>
 8004908:	4621      	mov	r1, r4
 800490a:	4638      	mov	r0, r7
 800490c:	f7ff f9ca 	bl	8003ca4 <_malloc_r>
 8004910:	4680      	mov	r8, r0
 8004912:	b908      	cbnz	r0, 8004918 <_realloc_r+0x44>
 8004914:	4645      	mov	r5, r8
 8004916:	e7ec      	b.n	80048f2 <_realloc_r+0x1e>
 8004918:	42b4      	cmp	r4, r6
 800491a:	4622      	mov	r2, r4
 800491c:	4629      	mov	r1, r5
 800491e:	bf28      	it	cs
 8004920:	4632      	movcs	r2, r6
 8004922:	f7ff f946 	bl	8003bb2 <memcpy>
 8004926:	4629      	mov	r1, r5
 8004928:	4638      	mov	r0, r7
 800492a:	f7ff f951 	bl	8003bd0 <_free_r>
 800492e:	e7f1      	b.n	8004914 <_realloc_r+0x40>

08004930 <_malloc_usable_size_r>:
 8004930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004934:	1f18      	subs	r0, r3, #4
 8004936:	2b00      	cmp	r3, #0
 8004938:	bfbc      	itt	lt
 800493a:	580b      	ldrlt	r3, [r1, r0]
 800493c:	18c0      	addlt	r0, r0, r3
 800493e:	4770      	bx	lr

08004940 <_init>:
 8004940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004942:	bf00      	nop
 8004944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004946:	bc08      	pop	{r3}
 8004948:	469e      	mov	lr, r3
 800494a:	4770      	bx	lr

0800494c <_fini>:
 800494c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800494e:	bf00      	nop
 8004950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004952:	bc08      	pop	{r3}
 8004954:	469e      	mov	lr, r3
 8004956:	4770      	bx	lr
