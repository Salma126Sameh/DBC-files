
RX_LORA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001369c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e70  08013840  08013840  00014840  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080146b0  080146b0  00016370  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080146b0  080146b0  000156b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080146b8  080146b8  00016370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080146b8  080146b8  000156b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080146bc  080146bc  000156bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000370  20000000  080146c0  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005a0c  20000370  08014a30  00016370  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005d7c  08014a30  00016d7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016370  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026884  00000000  00000000  000163a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005eed  00000000  00000000  0003cc24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002178  00000000  00000000  00042b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000019e2  00000000  00000000  00044c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001efc8  00000000  00000000  00046672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b3e1  00000000  00000000  0006563a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3914  00000000  00000000  00090a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013432f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a3fc  00000000  00000000  00134374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  0013e770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000370 	.word	0x20000370
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013824 	.word	0x08013824

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000374 	.word	0x20000374
 80001dc:	08013824 	.word	0x08013824

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b9be 	b.w	8000f8c <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f83c 	bl	8000c94 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2lz>:
 8000c28:	b538      	push	{r3, r4, r5, lr}
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	4604      	mov	r4, r0
 8000c30:	460d      	mov	r5, r1
 8000c32:	f7ff ff5b 	bl	8000aec <__aeabi_dcmplt>
 8000c36:	b928      	cbnz	r0, 8000c44 <__aeabi_d2lz+0x1c>
 8000c38:	4620      	mov	r0, r4
 8000c3a:	4629      	mov	r1, r5
 8000c3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c40:	f000 b80a 	b.w	8000c58 <__aeabi_d2ulz>
 8000c44:	4620      	mov	r0, r4
 8000c46:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c4a:	f000 f805 	bl	8000c58 <__aeabi_d2ulz>
 8000c4e:	4240      	negs	r0, r0
 8000c50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c54:	bd38      	pop	{r3, r4, r5, pc}
 8000c56:	bf00      	nop

08000c58 <__aeabi_d2ulz>:
 8000c58:	b5d0      	push	{r4, r6, r7, lr}
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c8c <__aeabi_d2ulz+0x34>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	4606      	mov	r6, r0
 8000c60:	460f      	mov	r7, r1
 8000c62:	f7ff fcd1 	bl	8000608 <__aeabi_dmul>
 8000c66:	f7ff ffa7 	bl	8000bb8 <__aeabi_d2uiz>
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	f7ff fc52 	bl	8000514 <__aeabi_ui2d>
 8000c70:	4b07      	ldr	r3, [pc, #28]	@ (8000c90 <__aeabi_d2ulz+0x38>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	f7ff fcc8 	bl	8000608 <__aeabi_dmul>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	4630      	mov	r0, r6
 8000c7e:	4639      	mov	r1, r7
 8000c80:	f7ff fb0a 	bl	8000298 <__aeabi_dsub>
 8000c84:	f7ff ff98 	bl	8000bb8 <__aeabi_d2uiz>
 8000c88:	4621      	mov	r1, r4
 8000c8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c8c:	3df00000 	.word	0x3df00000
 8000c90:	41f00000 	.word	0x41f00000

08000c94 <__udivmoddi4>:
 8000c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c98:	9d08      	ldr	r5, [sp, #32]
 8000c9a:	468e      	mov	lr, r1
 8000c9c:	4604      	mov	r4, r0
 8000c9e:	4688      	mov	r8, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d14a      	bne.n	8000d3a <__udivmoddi4+0xa6>
 8000ca4:	428a      	cmp	r2, r1
 8000ca6:	4617      	mov	r7, r2
 8000ca8:	d962      	bls.n	8000d70 <__udivmoddi4+0xdc>
 8000caa:	fab2 f682 	clz	r6, r2
 8000cae:	b14e      	cbz	r6, 8000cc4 <__udivmoddi4+0x30>
 8000cb0:	f1c6 0320 	rsb	r3, r6, #32
 8000cb4:	fa01 f806 	lsl.w	r8, r1, r6
 8000cb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cbc:	40b7      	lsls	r7, r6
 8000cbe:	ea43 0808 	orr.w	r8, r3, r8
 8000cc2:	40b4      	lsls	r4, r6
 8000cc4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc8:	fa1f fc87 	uxth.w	ip, r7
 8000ccc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cd0:	0c23      	lsrs	r3, r4, #16
 8000cd2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cd6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cda:	fb01 f20c 	mul.w	r2, r1, ip
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d909      	bls.n	8000cf6 <__udivmoddi4+0x62>
 8000ce2:	18fb      	adds	r3, r7, r3
 8000ce4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ce8:	f080 80ea 	bcs.w	8000ec0 <__udivmoddi4+0x22c>
 8000cec:	429a      	cmp	r2, r3
 8000cee:	f240 80e7 	bls.w	8000ec0 <__udivmoddi4+0x22c>
 8000cf2:	3902      	subs	r1, #2
 8000cf4:	443b      	add	r3, r7
 8000cf6:	1a9a      	subs	r2, r3, r2
 8000cf8:	b2a3      	uxth	r3, r4
 8000cfa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cfe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d06:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0a:	459c      	cmp	ip, r3
 8000d0c:	d909      	bls.n	8000d22 <__udivmoddi4+0x8e>
 8000d0e:	18fb      	adds	r3, r7, r3
 8000d10:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d14:	f080 80d6 	bcs.w	8000ec4 <__udivmoddi4+0x230>
 8000d18:	459c      	cmp	ip, r3
 8000d1a:	f240 80d3 	bls.w	8000ec4 <__udivmoddi4+0x230>
 8000d1e:	443b      	add	r3, r7
 8000d20:	3802      	subs	r0, #2
 8000d22:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d26:	eba3 030c 	sub.w	r3, r3, ip
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	b11d      	cbz	r5, 8000d36 <__udivmoddi4+0xa2>
 8000d2e:	40f3      	lsrs	r3, r6
 8000d30:	2200      	movs	r2, #0
 8000d32:	e9c5 3200 	strd	r3, r2, [r5]
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	d905      	bls.n	8000d4a <__udivmoddi4+0xb6>
 8000d3e:	b10d      	cbz	r5, 8000d44 <__udivmoddi4+0xb0>
 8000d40:	e9c5 0100 	strd	r0, r1, [r5]
 8000d44:	2100      	movs	r1, #0
 8000d46:	4608      	mov	r0, r1
 8000d48:	e7f5      	b.n	8000d36 <__udivmoddi4+0xa2>
 8000d4a:	fab3 f183 	clz	r1, r3
 8000d4e:	2900      	cmp	r1, #0
 8000d50:	d146      	bne.n	8000de0 <__udivmoddi4+0x14c>
 8000d52:	4573      	cmp	r3, lr
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xc8>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 8105 	bhi.w	8000f66 <__udivmoddi4+0x2d2>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	4690      	mov	r8, r2
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e5      	beq.n	8000d36 <__udivmoddi4+0xa2>
 8000d6a:	e9c5 4800 	strd	r4, r8, [r5]
 8000d6e:	e7e2      	b.n	8000d36 <__udivmoddi4+0xa2>
 8000d70:	2a00      	cmp	r2, #0
 8000d72:	f000 8090 	beq.w	8000e96 <__udivmoddi4+0x202>
 8000d76:	fab2 f682 	clz	r6, r2
 8000d7a:	2e00      	cmp	r6, #0
 8000d7c:	f040 80a4 	bne.w	8000ec8 <__udivmoddi4+0x234>
 8000d80:	1a8a      	subs	r2, r1, r2
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d88:	b280      	uxth	r0, r0
 8000d8a:	b2bc      	uxth	r4, r7
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d92:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d9a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d907      	bls.n	8000db2 <__udivmoddi4+0x11e>
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000da8:	d202      	bcs.n	8000db0 <__udivmoddi4+0x11c>
 8000daa:	429a      	cmp	r2, r3
 8000dac:	f200 80e0 	bhi.w	8000f70 <__udivmoddi4+0x2dc>
 8000db0:	46c4      	mov	ip, r8
 8000db2:	1a9b      	subs	r3, r3, r2
 8000db4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000db8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dbc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dc0:	fb02 f404 	mul.w	r4, r2, r4
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	d907      	bls.n	8000dd8 <__udivmoddi4+0x144>
 8000dc8:	18fb      	adds	r3, r7, r3
 8000dca:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dce:	d202      	bcs.n	8000dd6 <__udivmoddi4+0x142>
 8000dd0:	429c      	cmp	r4, r3
 8000dd2:	f200 80ca 	bhi.w	8000f6a <__udivmoddi4+0x2d6>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	1b1b      	subs	r3, r3, r4
 8000dda:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dde:	e7a5      	b.n	8000d2c <__udivmoddi4+0x98>
 8000de0:	f1c1 0620 	rsb	r6, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 f706 	lsr.w	r7, r2, r6
 8000dea:	431f      	orrs	r7, r3
 8000dec:	fa0e f401 	lsl.w	r4, lr, r1
 8000df0:	fa20 f306 	lsr.w	r3, r0, r6
 8000df4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000df8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fa00 f801 	lsl.w	r8, r0, r1
 8000e02:	fa1f fc87 	uxth.w	ip, r7
 8000e06:	fbbe f0f9 	udiv	r0, lr, r9
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e10:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e14:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e18:	45a6      	cmp	lr, r4
 8000e1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1e:	d909      	bls.n	8000e34 <__udivmoddi4+0x1a0>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e26:	f080 809c 	bcs.w	8000f62 <__udivmoddi4+0x2ce>
 8000e2a:	45a6      	cmp	lr, r4
 8000e2c:	f240 8099 	bls.w	8000f62 <__udivmoddi4+0x2ce>
 8000e30:	3802      	subs	r0, #2
 8000e32:	443c      	add	r4, r7
 8000e34:	eba4 040e 	sub.w	r4, r4, lr
 8000e38:	fa1f fe83 	uxth.w	lr, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e48:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e4c:	45a4      	cmp	ip, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1ce>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e56:	f080 8082 	bcs.w	8000f5e <__udivmoddi4+0x2ca>
 8000e5a:	45a4      	cmp	ip, r4
 8000e5c:	d97f      	bls.n	8000f5e <__udivmoddi4+0x2ca>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	443c      	add	r4, r7
 8000e62:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e66:	eba4 040c 	sub.w	r4, r4, ip
 8000e6a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e6e:	4564      	cmp	r4, ip
 8000e70:	4673      	mov	r3, lr
 8000e72:	46e1      	mov	r9, ip
 8000e74:	d362      	bcc.n	8000f3c <__udivmoddi4+0x2a8>
 8000e76:	d05f      	beq.n	8000f38 <__udivmoddi4+0x2a4>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x1fe>
 8000e7a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e7e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e82:	fa04 f606 	lsl.w	r6, r4, r6
 8000e86:	fa22 f301 	lsr.w	r3, r2, r1
 8000e8a:	431e      	orrs	r6, r3
 8000e8c:	40cc      	lsrs	r4, r1
 8000e8e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e92:	2100      	movs	r1, #0
 8000e94:	e74f      	b.n	8000d36 <__udivmoddi4+0xa2>
 8000e96:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e9a:	0c01      	lsrs	r1, r0, #16
 8000e9c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ea0:	b280      	uxth	r0, r0
 8000ea2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	4638      	mov	r0, r7
 8000eaa:	463c      	mov	r4, r7
 8000eac:	46b8      	mov	r8, r7
 8000eae:	46be      	mov	lr, r7
 8000eb0:	2620      	movs	r6, #32
 8000eb2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eb6:	eba2 0208 	sub.w	r2, r2, r8
 8000eba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ebe:	e766      	b.n	8000d8e <__udivmoddi4+0xfa>
 8000ec0:	4601      	mov	r1, r0
 8000ec2:	e718      	b.n	8000cf6 <__udivmoddi4+0x62>
 8000ec4:	4610      	mov	r0, r2
 8000ec6:	e72c      	b.n	8000d22 <__udivmoddi4+0x8e>
 8000ec8:	f1c6 0220 	rsb	r2, r6, #32
 8000ecc:	fa2e f302 	lsr.w	r3, lr, r2
 8000ed0:	40b7      	lsls	r7, r6
 8000ed2:	40b1      	lsls	r1, r6
 8000ed4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ed8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000edc:	430a      	orrs	r2, r1
 8000ede:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ee2:	b2bc      	uxth	r4, r7
 8000ee4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ee8:	0c11      	lsrs	r1, r2, #16
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb08 f904 	mul.w	r9, r8, r4
 8000ef2:	40b0      	lsls	r0, r6
 8000ef4:	4589      	cmp	r9, r1
 8000ef6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000efa:	b280      	uxth	r0, r0
 8000efc:	d93e      	bls.n	8000f7c <__udivmoddi4+0x2e8>
 8000efe:	1879      	adds	r1, r7, r1
 8000f00:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f04:	d201      	bcs.n	8000f0a <__udivmoddi4+0x276>
 8000f06:	4589      	cmp	r9, r1
 8000f08:	d81f      	bhi.n	8000f4a <__udivmoddi4+0x2b6>
 8000f0a:	eba1 0109 	sub.w	r1, r1, r9
 8000f0e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f12:	fb09 f804 	mul.w	r8, r9, r4
 8000f16:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1a:	b292      	uxth	r2, r2
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d229      	bcs.n	8000f78 <__udivmoddi4+0x2e4>
 8000f24:	18ba      	adds	r2, r7, r2
 8000f26:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f2a:	d2c4      	bcs.n	8000eb6 <__udivmoddi4+0x222>
 8000f2c:	4542      	cmp	r2, r8
 8000f2e:	d2c2      	bcs.n	8000eb6 <__udivmoddi4+0x222>
 8000f30:	f1a9 0102 	sub.w	r1, r9, #2
 8000f34:	443a      	add	r2, r7
 8000f36:	e7be      	b.n	8000eb6 <__udivmoddi4+0x222>
 8000f38:	45f0      	cmp	r8, lr
 8000f3a:	d29d      	bcs.n	8000e78 <__udivmoddi4+0x1e4>
 8000f3c:	ebbe 0302 	subs.w	r3, lr, r2
 8000f40:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f44:	3801      	subs	r0, #1
 8000f46:	46e1      	mov	r9, ip
 8000f48:	e796      	b.n	8000e78 <__udivmoddi4+0x1e4>
 8000f4a:	eba7 0909 	sub.w	r9, r7, r9
 8000f4e:	4449      	add	r1, r9
 8000f50:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f54:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f58:	fb09 f804 	mul.w	r8, r9, r4
 8000f5c:	e7db      	b.n	8000f16 <__udivmoddi4+0x282>
 8000f5e:	4673      	mov	r3, lr
 8000f60:	e77f      	b.n	8000e62 <__udivmoddi4+0x1ce>
 8000f62:	4650      	mov	r0, sl
 8000f64:	e766      	b.n	8000e34 <__udivmoddi4+0x1a0>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e6fd      	b.n	8000d66 <__udivmoddi4+0xd2>
 8000f6a:	443b      	add	r3, r7
 8000f6c:	3a02      	subs	r2, #2
 8000f6e:	e733      	b.n	8000dd8 <__udivmoddi4+0x144>
 8000f70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f74:	443b      	add	r3, r7
 8000f76:	e71c      	b.n	8000db2 <__udivmoddi4+0x11e>
 8000f78:	4649      	mov	r1, r9
 8000f7a:	e79c      	b.n	8000eb6 <__udivmoddi4+0x222>
 8000f7c:	eba1 0109 	sub.w	r1, r1, r9
 8000f80:	46c4      	mov	ip, r8
 8000f82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f86:	fb09 f804 	mul.w	r8, r9, r4
 8000f8a:	e7c4      	b.n	8000f16 <__udivmoddi4+0x282>

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <sendATCommand>:
uint8_t mqtt_connect_packet[] = { 0x10, 0x12, 0x00, 0x04, 0x4D, 0x51, 0x54,
		0x54, 0x04, 0X02, 0x00, 0x3C, 0x00, 0x06, 0x41, 0x42, 0x43, 0x44, 0x45,
		0x46, 0x1A // <- This is the CTRL+Z (0x1A) to mark end of transmission
		};
SIM868_Status_t sendATCommand(UART_HandleTypeDef *huart, const char *command,
		char *response, uint16_t timeout) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b0b4      	sub	sp, #208	@ 0xd0
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	807b      	strh	r3, [r7, #2]

	// Clear only when necessary
	memset(rxBuffer, 0, MAX_RESPONSE_LEN);
 8000f9e:	2280      	movs	r2, #128	@ 0x80
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4839      	ldr	r0, [pc, #228]	@ (8001088 <sendATCommand+0xf8>)
 8000fa4:	f00f faf7 	bl	8010596 <memset>
	memset(response, 0, MAX_RESPONSE_LEN);
 8000fa8:	2280      	movs	r2, #128	@ 0x80
 8000faa:	2100      	movs	r1, #0
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f00f faf2 	bl	8010596 <memset>

	// Send the AT command
	if (HAL_UART_Transmit(huart, (uint8_t*) command, strlen(command), timeout)
 8000fb2:	68b8      	ldr	r0, [r7, #8]
 8000fb4:	f7ff f964 	bl	8000280 <strlen>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	887b      	ldrh	r3, [r7, #2]
 8000fbe:	68b9      	ldr	r1, [r7, #8]
 8000fc0:	68f8      	ldr	r0, [r7, #12]
 8000fc2:	f007 fb29 	bl	8008618 <HAL_UART_Transmit>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d015      	beq.n	8000ff8 <sendATCommand+0x68>
			!= HAL_OK) {
		char buffer[64];
			snprintf(buffer, sizeof(buffer), "#RED#Failed to transmit command\n");
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	4a2e      	ldr	r2, [pc, #184]	@ (800108c <sendATCommand+0xfc>)
 8000fd2:	2140      	movs	r1, #64	@ 0x40
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f00f fa43 	bl	8010460 <sniprintf>
			CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 8000fda:	f107 0310 	add.w	r3, r7, #16
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff f94e 	bl	8000280 <strlen>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	4611      	mov	r1, r2
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f00d f9b8 	bl	800e364 <CDC_Transmit_FS>
			return SIM868_ERROR;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e042      	b.n	800107e <sendATCommand+0xee>
	}
	if (HAL_UART_Transmit(huart, (uint8_t*) "\r\n", strlen("\r\n"), timeout)
 8000ff8:	887b      	ldrh	r3, [r7, #2]
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	4924      	ldr	r1, [pc, #144]	@ (8001090 <sendATCommand+0x100>)
 8000ffe:	68f8      	ldr	r0, [r7, #12]
 8001000:	f007 fb0a 	bl	8008618 <HAL_UART_Transmit>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d015      	beq.n	8001036 <sendATCommand+0xa6>
			!= HAL_OK) {
		 char buffer[64];
			 snprintf(buffer, sizeof(buffer), "#RED#Failed to transmit command\n");
 800100a:	f107 0310 	add.w	r3, r7, #16
 800100e:	4a1f      	ldr	r2, [pc, #124]	@ (800108c <sendATCommand+0xfc>)
 8001010:	2140      	movs	r1, #64	@ 0x40
 8001012:	4618      	mov	r0, r3
 8001014:	f00f fa24 	bl	8010460 <sniprintf>
			 CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff f92f 	bl	8000280 <strlen>
 8001022:	4603      	mov	r3, r0
 8001024:	b29a      	uxth	r2, r3
 8001026:	f107 0310 	add.w	r3, r7, #16
 800102a:	4611      	mov	r1, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f00d f999 	bl	800e364 <CDC_Transmit_FS>
			 return SIM868_ERROR;
 8001032:	2303      	movs	r3, #3
 8001034:	e023      	b.n	800107e <sendATCommand+0xee>
	}

	// Receive the response
	HAL_UART_Receive(huart, rxBuffer, MAX_RESPONSE_LEN - 1, timeout);
 8001036:	887b      	ldrh	r3, [r7, #2]
 8001038:	227f      	movs	r2, #127	@ 0x7f
 800103a:	4913      	ldr	r1, [pc, #76]	@ (8001088 <sendATCommand+0xf8>)
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	f007 fb76 	bl	800872e <HAL_UART_Receive>

	// Copy and null-terminate the response
	strncpy(response, (char*) rxBuffer, MAX_RESPONSE_LEN - 1);
 8001042:	227f      	movs	r2, #127	@ 0x7f
 8001044:	4910      	ldr	r1, [pc, #64]	@ (8001088 <sendATCommand+0xf8>)
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f00f fabf 	bl	80105ca <strncpy>
	response[MAX_RESPONSE_LEN - 1] = '\0';
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	337f      	adds	r3, #127	@ 0x7f
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
	char buffer[128];
	snprintf(buffer, sizeof(buffer), "#GRN#SendAtCommand = %s\n", response);
 8001054:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a0e      	ldr	r2, [pc, #56]	@ (8001094 <sendATCommand+0x104>)
 800105c:	2180      	movs	r1, #128	@ 0x80
 800105e:	f00f f9ff 	bl	8010460 <sniprintf>
	CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 8001062:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff f90a 	bl	8000280 <strlen>
 800106c:	4603      	mov	r3, r0
 800106e:	b29a      	uxth	r2, r3
 8001070:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001074:	4611      	mov	r1, r2
 8001076:	4618      	mov	r0, r3
 8001078:	f00d f974 	bl	800e364 <CDC_Transmit_FS>
	return SIM868_SUCCESS;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	37d0      	adds	r7, #208	@ 0xd0
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	2000038c 	.word	0x2000038c
 800108c:	08013840 	.word	0x08013840
 8001090:	08013864 	.word	0x08013864
 8001094:	08013868 	.word	0x08013868

08001098 <SIM868_Init>:

SIM868_Status_t SIM868_Init(UART_HandleTypeDef *huart) {
 8001098:	b5b0      	push	{r4, r5, r7, lr}
 800109a:	b0d0      	sub	sp, #320	@ 0x140
 800109c:	af00      	add	r7, sp, #0
 800109e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80010a2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80010a6:	6018      	str	r0, [r3, #0]
	char response[MAX_RESPONSE_LEN];

	// Check basic communication
	if (sendATCommand(huart, "AT", response, UART_TIMEOUT) != SIM868_SUCCESS) {
 80010a8:	f107 02bc 	add.w	r2, r7, #188	@ 0xbc
 80010ac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80010b0:	f5a3 709e 	sub.w	r0, r3, #316	@ 0x13c
 80010b4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80010b8:	4956      	ldr	r1, [pc, #344]	@ (8001214 <SIM868_Init+0x17c>)
 80010ba:	6800      	ldr	r0, [r0, #0]
 80010bc:	f7ff ff68 	bl	8000f90 <sendATCommand>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d015      	beq.n	80010f2 <SIM868_Init+0x5a>
		char buffer[64];
	    snprintf(buffer, sizeof(buffer), "#RED#Didn't send AT command\n");
 80010c6:	f107 0308 	add.w	r3, r7, #8
 80010ca:	4a53      	ldr	r2, [pc, #332]	@ (8001218 <SIM868_Init+0x180>)
 80010cc:	2140      	movs	r1, #64	@ 0x40
 80010ce:	4618      	mov	r0, r3
 80010d0:	f00f f9c6 	bl	8010460 <sniprintf>
		CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 80010d4:	f107 0308 	add.w	r3, r7, #8
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff f8d1 	bl	8000280 <strlen>
 80010de:	4603      	mov	r3, r0
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	f107 0308 	add.w	r3, r7, #8
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f00d f93b 	bl	800e364 <CDC_Transmit_FS>
	    return SIM868_ERROR;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e08a      	b.n	8001208 <SIM868_Init+0x170>
	}

	// Check for OK response
	if (strstr(response, "OK") == NULL) {
 80010f2:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80010f6:	4949      	ldr	r1, [pc, #292]	@ (800121c <SIM868_Init+0x184>)
 80010f8:	4618      	mov	r0, r3
 80010fa:	f00f fad8 	bl	80106ae <strstr>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d115      	bne.n	8001130 <SIM868_Init+0x98>
		char buffer[64];
		snprintf(buffer, sizeof(buffer), "Didn't get OK from AT\n");
 8001104:	f107 0308 	add.w	r3, r7, #8
 8001108:	4a45      	ldr	r2, [pc, #276]	@ (8001220 <SIM868_Init+0x188>)
 800110a:	2140      	movs	r1, #64	@ 0x40
 800110c:	4618      	mov	r0, r3
 800110e:	f00f f9a7 	bl	8010460 <sniprintf>
		CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 8001112:	f107 0308 	add.w	r3, r7, #8
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff f8b2 	bl	8000280 <strlen>
 800111c:	4603      	mov	r3, r0
 800111e:	b29a      	uxth	r2, r3
 8001120:	f107 0308 	add.w	r3, r7, #8
 8001124:	4611      	mov	r1, r2
 8001126:	4618      	mov	r0, r3
 8001128:	f00d f91c 	bl	800e364 <CDC_Transmit_FS>
		return SIM868_ERROR;
 800112c:	2303      	movs	r3, #3
 800112e:	e06b      	b.n	8001208 <SIM868_Init+0x170>
	}

	// Continue with the rest of initialization
	const char *init_commands[] = {
 8001130:	4b3c      	ldr	r3, [pc, #240]	@ (8001224 <SIM868_Init+0x18c>)
 8001132:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8001136:	461d      	mov	r5, r3
 8001138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800113a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800113c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800113e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001144:	682b      	ldr	r3, [r5, #0]
 8001146:	6023      	str	r3, [r4, #0]
			 * 1 Quick send mode – when the data is sent to module, it will responsd DATA ACCEPT:<n>,<length>, while not responding SEND OK.*/
//			"AT+CIPQSEND = 0",
			"AT+CIPATS=0", "AT+CIPSPRT=2",
			"AT+CIPSTART=\"TCP\",\"broker.hivemq.com\",\"1883\"" };

	for (int i = 0; i < sizeof(init_commands) / sizeof(init_commands[0]); ++i) {
 8001148:	2300      	movs	r3, #0
 800114a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800114e:	e037      	b.n	80011c0 <SIM868_Init+0x128>
		if (sendATCommand(huart, init_commands[i], response, UART_TIMEOUT)
 8001150:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800115a:	443b      	add	r3, r7
 800115c:	f853 1cb8 	ldr.w	r1, [r3, #-184]
 8001160:	f107 02bc 	add.w	r2, r7, #188	@ 0xbc
 8001164:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001168:	f5a3 709e 	sub.w	r0, r3, #316	@ 0x13c
 800116c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001170:	6800      	ldr	r0, [r0, #0]
 8001172:	f7ff ff0d 	bl	8000f90 <sendATCommand>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d01c      	beq.n	80011b6 <SIM868_Init+0x11e>
				!= SIM868_SUCCESS) {

			char buffer[128];
			snprintf(buffer, sizeof(buffer), "#RED#Failed command: %s\n", init_commands[i]);
 800117c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8001186:	443b      	add	r3, r7
 8001188:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 800118c:	f107 0008 	add.w	r0, r7, #8
 8001190:	4a25      	ldr	r2, [pc, #148]	@ (8001228 <SIM868_Init+0x190>)
 8001192:	2180      	movs	r1, #128	@ 0x80
 8001194:	f00f f964 	bl	8010460 <sniprintf>
			CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 8001198:	f107 0308 	add.w	r3, r7, #8
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f86f 	bl	8000280 <strlen>
 80011a2:	4603      	mov	r3, r0
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	f107 0308 	add.w	r3, r7, #8
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f00d f8d9 	bl	800e364 <CDC_Transmit_FS>
			return SIM868_ERROR;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e028      	b.n	8001208 <SIM868_Init+0x170>
	for (int i = 0; i < sizeof(init_commands) / sizeof(init_commands[0]); ++i) {
 80011b6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80011ba:	3301      	adds	r3, #1
 80011bc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80011c0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80011c4:	2b0c      	cmp	r3, #12
 80011c6:	d9c3      	bls.n	8001150 <SIM868_Init+0xb8>
	 ====================================================================================================================== */

	//	10 12 00 04 4D 51 54 54 04 02 00 3C 00 06 41 42 43 44 45 46 1A # connect packet
	//	10 2C 00 06 4D 51 49 73 64 70 03 C2 00 3C 00 06 41 42 43 44 45 46 00 07 43 61 72 53 79 6E 63 00 0C 71 41 55 5A 42 64 61 53 49 55 4C 78 1A
	// send MQTT connection packet
	HAL_Delay(2000);
 80011c8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80011cc:	f002 ff7a 	bl	80040c4 <HAL_Delay>
	sendATCommand(huart, "AT+CIPSEND", response, UART_TIMEOUT);
 80011d0:	f107 02bc 	add.w	r2, r7, #188	@ 0xbc
 80011d4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80011d8:	f5a3 709e 	sub.w	r0, r3, #316	@ 0x13c
 80011dc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80011e0:	4912      	ldr	r1, [pc, #72]	@ (800122c <SIM868_Init+0x194>)
 80011e2:	6800      	ldr	r0, [r0, #0]
 80011e4:	f7ff fed4 	bl	8000f90 <sendATCommand>
	sendMQTTPacket(huart, mqtt_connect_packet, sizeof(mqtt_connect_packet),
 80011e8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80011ec:	f5a3 709e 	sub.w	r0, r3, #316	@ 0x13c
 80011f0:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80011f4:	2215      	movs	r2, #21
 80011f6:	490e      	ldr	r1, [pc, #56]	@ (8001230 <SIM868_Init+0x198>)
 80011f8:	6800      	ldr	r0, [r0, #0]
 80011fa:	f000 fbcf 	bl	800199c <sendMQTTPacket>
			4000);
	HAL_Delay(1000);
 80011fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001202:	f002 ff5f 	bl	80040c4 <HAL_Delay>
	return SIM868_SUCCESS;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800120e:	46bd      	mov	sp, r7
 8001210:	bdb0      	pop	{r4, r5, r7, pc}
 8001212:	bf00      	nop
 8001214:	08013884 	.word	0x08013884
 8001218:	08013888 	.word	0x08013888
 800121c:	080138a8 	.word	0x080138a8
 8001220:	080138ac 	.word	0x080138ac
 8001224:	080139c4 	.word	0x080139c4
 8001228:	080138c4 	.word	0x080138c4
 800122c:	080138e0 	.word	0x080138e0
 8001230:	20000000 	.word	0x20000000

08001234 <SIM868_check_signal>:

SIM868_Status_t SIM868_check_signal(UART_HandleTypeDef *huart) {
 8001234:	b5b0      	push	{r4, r5, r7, lr}
 8001236:	b0bc      	sub	sp, #240	@ 0xf0
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
    char *data;
    char *token;
    uint8_t rssi, ber;

    while (1) {
        sendATCommand(huart, "AT+CSQ", response, UART_TIMEOUT);
 800123c:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8001240:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001244:	4963      	ldr	r1, [pc, #396]	@ (80013d4 <SIM868_check_signal+0x1a0>)
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff fea2 	bl	8000f90 <sendATCommand>

        // Ensure the response is null-terminated
        response[127] = '\0';
 800124c:	2300      	movs	r3, #0
 800124e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        // Locate the start of the signal quality data
        data = strstr(response, "+CSQ: ");
 8001252:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001256:	4960      	ldr	r1, [pc, #384]	@ (80013d8 <SIM868_check_signal+0x1a4>)
 8001258:	4618      	mov	r0, r3
 800125a:	f00f fa28 	bl	80106ae <strstr>
 800125e:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
        if (data != NULL) {
 8001262:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001266:	2b00      	cmp	r3, #0
 8001268:	f000 8096 	beq.w	8001398 <SIM868_check_signal+0x164>
            // Skip the "+CSQ: " part
            data += 6;
 800126c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001270:	3306      	adds	r3, #6
 8001272:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

            // Tokenize the response to extract RSSI and BER
            token = strtok(data, ",");
 8001276:	4959      	ldr	r1, [pc, #356]	@ (80013dc <SIM868_check_signal+0x1a8>)
 8001278:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 800127c:	f00f f9b8 	bl	80105f0 <strtok>
 8001280:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
            if (token != NULL) {
 8001284:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 8085 	beq.w	8001398 <SIM868_check_signal+0x164>
                rssi = (uint8_t)atoi(token);
 800128e:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8001292:	f00d fcbc 	bl	800ec0e <atoi>
 8001296:	4603      	mov	r3, r0
 8001298:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
                char debug_msg[64];
                sprintf(debug_msg, "RSSI: %d\n", rssi);
 800129c:	f897 20e7 	ldrb.w	r2, [r7, #231]	@ 0xe7
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	494e      	ldr	r1, [pc, #312]	@ (80013e0 <SIM868_check_signal+0x1ac>)
 80012a6:	4618      	mov	r0, r3
 80012a8:	f00f f910 	bl	80104cc <siprintf>
                CDC_Transmit_FS((uint8_t*)debug_msg, strlen(debug_msg));
 80012ac:	f107 030c 	add.w	r3, r7, #12
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7fe ffe5 	bl	8000280 <strlen>
 80012b6:	4603      	mov	r3, r0
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	f107 030c 	add.w	r3, r7, #12
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f00d f84f 	bl	800e364 <CDC_Transmit_FS>
                // Check if RSSI is above threshold
                if (rssi > 10) {
 80012c6:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 80012ca:	2b0a      	cmp	r3, #10
 80012cc:	d964      	bls.n	8001398 <SIM868_check_signal+0x164>
                    token = strtok(NULL, ",");
 80012ce:	4943      	ldr	r1, [pc, #268]	@ (80013dc <SIM868_check_signal+0x1a8>)
 80012d0:	2000      	movs	r0, #0
 80012d2:	f00f f98d 	bl	80105f0 <strtok>
 80012d6:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
                    if (token != NULL) {
 80012da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d05a      	beq.n	8001398 <SIM868_check_signal+0x164>
                        ber = (uint8_t)atoi(token);
 80012e2:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 80012e6:	f00d fc92 	bl	800ec0e <atoi>
 80012ea:	4603      	mov	r3, r0
 80012ec:	f887 30e6 	strb.w	r3, [r7, #230]	@ 0xe6
                        sprintf(debug_msg, "BER: %d\n", ber);
 80012f0:	f897 20e6 	ldrb.w	r2, [r7, #230]	@ 0xe6
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	493a      	ldr	r1, [pc, #232]	@ (80013e4 <SIM868_check_signal+0x1b0>)
 80012fa:	4618      	mov	r0, r3
 80012fc:	f00f f8e6 	bl	80104cc <siprintf>
                        CDC_Transmit_FS((uint8_t*)debug_msg, strlen(debug_msg));
 8001300:	f107 030c 	add.w	r3, r7, #12
 8001304:	4618      	mov	r0, r3
 8001306:	f7fe ffbb 	bl	8000280 <strlen>
 800130a:	4603      	mov	r3, r0
 800130c:	b29a      	uxth	r2, r3
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	4611      	mov	r1, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f00d f825 	bl	800e364 <CDC_Transmit_FS>
                        // Check if BER is acceptable
                        if (ber == 0) {
 800131a:	f897 30e6 	ldrb.w	r3, [r7, #230]	@ 0xe6
 800131e:	2b00      	cmp	r3, #0
 8001320:	d13a      	bne.n	8001398 <SIM868_check_signal+0x164>
                        	sprintf(debug_msg, "---------------------------------\n");
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	4930      	ldr	r1, [pc, #192]	@ (80013e8 <SIM868_check_signal+0x1b4>)
 8001328:	4618      	mov	r0, r3
 800132a:	f00f f8cf 	bl	80104cc <siprintf>
                        	CDC_Transmit_FS((uint8_t*)debug_msg, strlen(debug_msg));
 800132e:	f107 030c 	add.w	r3, r7, #12
 8001332:	4618      	mov	r0, r3
 8001334:	f7fe ffa4 	bl	8000280 <strlen>
 8001338:	4603      	mov	r3, r0
 800133a:	b29a      	uxth	r2, r3
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	4611      	mov	r1, r2
 8001342:	4618      	mov	r0, r3
 8001344:	f00d f80e 	bl	800e364 <CDC_Transmit_FS>
                        	sprintf(debug_msg, "-------------- Done -------------\n");
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	4927      	ldr	r1, [pc, #156]	@ (80013ec <SIM868_check_signal+0x1b8>)
 800134e:	4618      	mov	r0, r3
 8001350:	f00f f8bc 	bl	80104cc <siprintf>
                        	CDC_Transmit_FS((uint8_t*)debug_msg, strlen(debug_msg));
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	4618      	mov	r0, r3
 800135a:	f7fe ff91 	bl	8000280 <strlen>
 800135e:	4603      	mov	r3, r0
 8001360:	b29a      	uxth	r2, r3
 8001362:	f107 030c 	add.w	r3, r7, #12
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f00c fffb 	bl	800e364 <CDC_Transmit_FS>
                        	sprintf(debug_msg, "---------------------------------\n");
 800136e:	f107 030c 	add.w	r3, r7, #12
 8001372:	491d      	ldr	r1, [pc, #116]	@ (80013e8 <SIM868_check_signal+0x1b4>)
 8001374:	4618      	mov	r0, r3
 8001376:	f00f f8a9 	bl	80104cc <siprintf>
                        	CDC_Transmit_FS((uint8_t*)debug_msg, strlen(debug_msg));
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	4618      	mov	r0, r3
 8001380:	f7fe ff7e 	bl	8000280 <strlen>
 8001384:	4603      	mov	r3, r0
 8001386:	b29a      	uxth	r2, r3
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	4611      	mov	r1, r2
 800138e:	4618      	mov	r0, r3
 8001390:	f00c ffe8 	bl	800e364 <CDC_Transmit_FS>
                            return SIM868_SUCCESS;
 8001394:	2300      	movs	r3, #0
 8001396:	e019      	b.n	80013cc <SIM868_check_signal+0x198>
                }
            }
        }

        // If we reach here, the signal quality is not acceptable, retry
          char retry_msg[] = "Signal quality not acceptable, retrying...\n";
 8001398:	4b15      	ldr	r3, [pc, #84]	@ (80013f0 <SIM868_check_signal+0x1bc>)
 800139a:	f107 040c 	add.w	r4, r7, #12
 800139e:	461d      	mov	r5, r3
 80013a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
          CDC_Transmit_FS((uint8_t*)retry_msg, strlen(retry_msg));    }
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7fe ff63 	bl	8000280 <strlen>
 80013ba:	4603      	mov	r3, r0
 80013bc:	b29a      	uxth	r2, r3
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	4611      	mov	r1, r2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f00c ffcd 	bl	800e364 <CDC_Transmit_FS>
    while (1) {
 80013ca:	e737      	b.n	800123c <SIM868_check_signal+0x8>

    // If the loop exits without returning, there was an error
    char error_msg[] = "Failed to parse input.\n";
    CDC_Transmit_FS((uint8_t*)error_msg, strlen(error_msg));
    return SIM868_ERROR;
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	37f0      	adds	r7, #240	@ 0xf0
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bdb0      	pop	{r4, r5, r7, pc}
 80013d4:	080138fc 	.word	0x080138fc
 80013d8:	080139f8 	.word	0x080139f8
 80013dc:	08013a00 	.word	0x08013a00
 80013e0:	08013a04 	.word	0x08013a04
 80013e4:	08013a10 	.word	0x08013a10
 80013e8:	08013a1c 	.word	0x08013a1c
 80013ec:	08013a40 	.word	0x08013a40
 80013f0:	08013a64 	.word	0x08013a64

080013f4 <SIM868_GetGPSLocation>:
}
void SIM868_PowerOFF(GPIO_TypeDef *port, uint16_t pin) {
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
}
SIM868_Status_t SIM868_GetGPSLocation(UART_HandleTypeDef *huart,
		GPS_Location_t *location) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b0b8      	sub	sp, #224	@ 0xe0
 80013f8:	af02      	add	r7, sp, #8
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
	static char response[128]; // Static buffer to save memory

	// Initialize location to default values
	memset(location, 0, sizeof(GPS_Location_t));
 80013fe:	223d      	movs	r2, #61	@ 0x3d
 8001400:	2100      	movs	r1, #0
 8001402:	6838      	ldr	r0, [r7, #0]
 8001404:	f00f f8c7 	bl	8010596 <memset>
	location->valid = 0;  // Mark as invalid
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	7813      	ldrb	r3, [r2, #0]
 800140c:	f023 0301 	bic.w	r3, r3, #1
 8001410:	7013      	strb	r3, [r2, #0]

	// Request GPS information
	sendATCommand(huart, "AT+CGNSINF", response, UART_TIMEOUT);
 8001412:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001416:	4aae      	ldr	r2, [pc, #696]	@ (80016d0 <SIM868_GetGPSLocation+0x2dc>)
 8001418:	49ae      	ldr	r1, [pc, #696]	@ (80016d4 <SIM868_GetGPSLocation+0x2e0>)
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff fdb8 	bl	8000f90 <sendATCommand>

	// Extract GPS data
	char *data_start = strstr(response, "+CGNSINF:");
 8001420:	49ad      	ldr	r1, [pc, #692]	@ (80016d8 <SIM868_GetGPSLocation+0x2e4>)
 8001422:	48ab      	ldr	r0, [pc, #684]	@ (80016d0 <SIM868_GetGPSLocation+0x2dc>)
 8001424:	f00f f943 	bl	80106ae <strstr>
 8001428:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
	if (data_start == NULL) {
 800142c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001430:	2b00      	cmp	r3, #0
 8001432:	d115      	bne.n	8001460 <SIM868_GetGPSLocation+0x6c>
		char buffer[64];
		snprintf(buffer, sizeof(buffer), "Failed to find +CGNSINF: in response\n");
 8001434:	f107 0308 	add.w	r3, r7, #8
 8001438:	4aa8      	ldr	r2, [pc, #672]	@ (80016dc <SIM868_GetGPSLocation+0x2e8>)
 800143a:	2140      	movs	r1, #64	@ 0x40
 800143c:	4618      	mov	r0, r3
 800143e:	f00f f80f 	bl	8010460 <sniprintf>
		CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 8001442:	f107 0308 	add.w	r3, r7, #8
 8001446:	4618      	mov	r0, r3
 8001448:	f7fe ff1a 	bl	8000280 <strlen>
 800144c:	4603      	mov	r3, r0
 800144e:	b29a      	uxth	r2, r3
 8001450:	f107 0308 	add.w	r3, r7, #8
 8001454:	4611      	mov	r1, r2
 8001456:	4618      	mov	r0, r3
 8001458:	f00c ff84 	bl	800e364 <CDC_Transmit_FS>
		return SIM868_INVALID_RESPONSE;
 800145c:	2302      	movs	r3, #2
 800145e:	e132      	b.n	80016c6 <SIM868_GetGPSLocation+0x2d2>
	}

	// Parse using tokenization
	char *saveptr = NULL;
 8001460:	2300      	movs	r3, #0
 8001462:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	char *token = strtok_r(data_start + 10, ",", &saveptr); // Skip "+CGNSINF: "
 8001466:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800146a:	330a      	adds	r3, #10
 800146c:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 8001470:	499b      	ldr	r1, [pc, #620]	@ (80016e0 <SIM868_GetGPSLocation+0x2ec>)
 8001472:	4618      	mov	r0, r3
 8001474:	f00f f918 	bl	80106a8 <strtok_r>
 8001478:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
	int field_index = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

	// Process each token
	while (token != NULL && field_index <= 7) { // Only process up to course field
 8001482:	e0e1      	b.n	8001648 <SIM868_GetGPSLocation+0x254>
		switch (field_index) {
 8001484:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001488:	2b07      	cmp	r3, #7
 800148a:	f200 80cf 	bhi.w	800162c <SIM868_GetGPSLocation+0x238>
 800148e:	a201      	add	r2, pc, #4	@ (adr r2, 8001494 <SIM868_GetGPSLocation+0xa0>)
 8001490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001494:	080014b5 	.word	0x080014b5
 8001498:	080014ed 	.word	0x080014ed
 800149c:	08001525 	.word	0x08001525
 80014a0:	080015c1 	.word	0x080015c1
 80014a4:	080015d9 	.word	0x080015d9
 80014a8:	0800162d 	.word	0x0800162d
 80014ac:	080015f3 	.word	0x080015f3
 80014b0:	0800160b 	.word	0x0800160b
		case 0: // Run status
			if (*token != '1') {
 80014b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b31      	cmp	r3, #49	@ 0x31
 80014bc:	f000 80b1 	beq.w	8001622 <SIM868_GetGPSLocation+0x22e>
				char buffer[64];
				snprintf(buffer, sizeof(buffer), "GNSS not running\n");
 80014c0:	f107 0308 	add.w	r3, r7, #8
 80014c4:	4a87      	ldr	r2, [pc, #540]	@ (80016e4 <SIM868_GetGPSLocation+0x2f0>)
 80014c6:	2140      	movs	r1, #64	@ 0x40
 80014c8:	4618      	mov	r0, r3
 80014ca:	f00e ffc9 	bl	8010460 <sniprintf>
				CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 80014ce:	f107 0308 	add.w	r3, r7, #8
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7fe fed4 	bl	8000280 <strlen>
 80014d8:	4603      	mov	r3, r0
 80014da:	b29a      	uxth	r2, r3
 80014dc:	f107 0308 	add.w	r3, r7, #8
 80014e0:	4611      	mov	r1, r2
 80014e2:	4618      	mov	r0, r3
 80014e4:	f00c ff3e 	bl	800e364 <CDC_Transmit_FS>
				return SIM868_NO_FIX;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e0ec      	b.n	80016c6 <SIM868_GetGPSLocation+0x2d2>
			}
			break;

		case 1: // Fix status
			if (*token != '1') {
 80014ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b31      	cmp	r3, #49	@ 0x31
 80014f4:	f000 8097 	beq.w	8001626 <SIM868_GetGPSLocation+0x232>
				char buffer[64];
				snprintf(buffer, sizeof(buffer), "No GPS fix\n");
 80014f8:	f107 0308 	add.w	r3, r7, #8
 80014fc:	4a7a      	ldr	r2, [pc, #488]	@ (80016e8 <SIM868_GetGPSLocation+0x2f4>)
 80014fe:	2140      	movs	r1, #64	@ 0x40
 8001500:	4618      	mov	r0, r3
 8001502:	f00e ffad 	bl	8010460 <sniprintf>
				CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe feb8 	bl	8000280 <strlen>
 8001510:	4603      	mov	r3, r0
 8001512:	b29a      	uxth	r2, r3
 8001514:	f107 0308 	add.w	r3, r7, #8
 8001518:	4611      	mov	r1, r2
 800151a:	4618      	mov	r0, r3
 800151c:	f00c ff22 	bl	800e364 <CDC_Transmit_FS>
				return SIM868_NO_FIX;
 8001520:	2301      	movs	r3, #1
 8001522:	e0d0      	b.n	80016c6 <SIM868_GetGPSLocation+0x2d2>
			}
			break;

		case 2: // UTC time
			if (strlen(token) >= 14) {
 8001524:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8001528:	f7fe feaa 	bl	8000280 <strlen>
 800152c:	4603      	mov	r3, r0
 800152e:	2b0d      	cmp	r3, #13
 8001530:	d97b      	bls.n	800162a <SIM868_GetGPSLocation+0x236>
				// Extract time components
				memcpy(location->time_str.year, token, 4);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	3329      	adds	r3, #41	@ 0x29
 8001536:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800153a:	6812      	ldr	r2, [r2, #0]
 800153c:	601a      	str	r2, [r3, #0]
				location->time_str.year[4] = 0;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

				memcpy(location->time_str.month, token + 4, 2);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	332e      	adds	r3, #46	@ 0x2e
 800154a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800154e:	3204      	adds	r2, #4
 8001550:	8812      	ldrh	r2, [r2, #0]
 8001552:	b292      	uxth	r2, r2
 8001554:	801a      	strh	r2, [r3, #0]
				location->time_str.month[2] = 0;
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

				memcpy(location->time_str.day, token + 6, 2);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	3331      	adds	r3, #49	@ 0x31
 8001562:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001566:	3206      	adds	r2, #6
 8001568:	8812      	ldrh	r2, [r2, #0]
 800156a:	b292      	uxth	r2, r2
 800156c:	801a      	strh	r2, [r3, #0]
				location->time_str.day[2] = 0;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

				memcpy(location->time_str.hour, token + 8, 2);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	3334      	adds	r3, #52	@ 0x34
 800157a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800157e:	3208      	adds	r2, #8
 8001580:	8812      	ldrh	r2, [r2, #0]
 8001582:	b292      	uxth	r2, r2
 8001584:	801a      	strh	r2, [r3, #0]
				location->time_str.hour[2] = 0;
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

				memcpy(location->time_str.minute, token + 10, 2);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	3337      	adds	r3, #55	@ 0x37
 8001592:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001596:	320a      	adds	r2, #10
 8001598:	8812      	ldrh	r2, [r2, #0]
 800159a:	b292      	uxth	r2, r2
 800159c:	801a      	strh	r2, [r3, #0]
				location->time_str.minute[2] = 0;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

				memcpy(location->time_str.second, token + 12, 2);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	333a      	adds	r3, #58	@ 0x3a
 80015aa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80015ae:	320c      	adds	r2, #12
 80015b0:	8812      	ldrh	r2, [r2, #0]
 80015b2:	b292      	uxth	r2, r2
 80015b4:	801a      	strh	r2, [r3, #0]
				location->time_str.second[2] = 0;
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
			}
			break;
 80015be:	e034      	b.n	800162a <SIM868_GetGPSLocation+0x236>

		case 3: // Latitude
			strncpy(location->lat_str, token, sizeof(location->lat_str) - 1);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	3301      	adds	r3, #1
 80015c4:	220b      	movs	r2, #11
 80015c6:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 80015ca:	4618      	mov	r0, r3
 80015cc:	f00e fffd 	bl	80105ca <strncpy>
			location->lat_str[sizeof(location->lat_str) - 1] = 0; // Ensure null termination
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	2200      	movs	r2, #0
 80015d4:	731a      	strb	r2, [r3, #12]
			break;
 80015d6:	e029      	b.n	800162c <SIM868_GetGPSLocation+0x238>

		case 4: // Longitude
			strncpy(location->lon_str, token, sizeof(location->lon_str) - 1);
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	331d      	adds	r3, #29
 80015dc:	220b      	movs	r2, #11
 80015de:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 80015e2:	4618      	mov	r0, r3
 80015e4:	f00e fff1 	bl	80105ca <strncpy>
			location->lon_str[sizeof(location->lon_str) - 1] = 0; // Ensure null termination
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			break;
 80015f0:	e01c      	b.n	800162c <SIM868_GetGPSLocation+0x238>

		case 5: // Altitude (skip)
			break;

		case 6: // Speed
			strncpy(location->speed_str, token,
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	330d      	adds	r3, #13
 80015f6:	2207      	movs	r2, #7
 80015f8:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 80015fc:	4618      	mov	r0, r3
 80015fe:	f00e ffe4 	bl	80105ca <strncpy>
					sizeof(location->speed_str) - 1);
			location->speed_str[sizeof(location->speed_str) - 1] = 0; // Ensure null termination
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	2200      	movs	r2, #0
 8001606:	751a      	strb	r2, [r3, #20]
			break;
 8001608:	e010      	b.n	800162c <SIM868_GetGPSLocation+0x238>

		case 7: // Course
			strncpy(location->course_str, token,
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	3315      	adds	r3, #21
 800160e:	2207      	movs	r2, #7
 8001610:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8001614:	4618      	mov	r0, r3
 8001616:	f00e ffd8 	bl	80105ca <strncpy>
					sizeof(location->course_str) - 1);
			location->course_str[sizeof(location->course_str) - 1] = 0; // Ensure null termination
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	2200      	movs	r2, #0
 800161e:	771a      	strb	r2, [r3, #28]
			break;
 8001620:	e004      	b.n	800162c <SIM868_GetGPSLocation+0x238>
			break;
 8001622:	bf00      	nop
 8001624:	e002      	b.n	800162c <SIM868_GetGPSLocation+0x238>
			break;
 8001626:	bf00      	nop
 8001628:	e000      	b.n	800162c <SIM868_GetGPSLocation+0x238>
			break;
 800162a:	bf00      	nop
		}

		// Get next token
		token = strtok_r(NULL, ",", &saveptr);
 800162c:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8001630:	461a      	mov	r2, r3
 8001632:	492b      	ldr	r1, [pc, #172]	@ (80016e0 <SIM868_GetGPSLocation+0x2ec>)
 8001634:	2000      	movs	r0, #0
 8001636:	f00f f837 	bl	80106a8 <strtok_r>
 800163a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		field_index++;
 800163e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001642:	3301      	adds	r3, #1
 8001644:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	while (token != NULL && field_index <= 7) { // Only process up to course field
 8001648:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800164c:	2b00      	cmp	r3, #0
 800164e:	d004      	beq.n	800165a <SIM868_GetGPSLocation+0x266>
 8001650:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001654:	2b07      	cmp	r3, #7
 8001656:	f77f af15 	ble.w	8001484 <SIM868_GetGPSLocation+0x90>
	}

	// Set validity flag based on having latitude and longitude
	location->valid =
			(location->lat_str[0] != '\0' && location->lon_str[0] != '\0') ?
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	785b      	ldrb	r3, [r3, #1]
					1 : 0;
 800165e:	2b00      	cmp	r3, #0
 8001660:	d005      	beq.n	800166e <SIM868_GetGPSLocation+0x27a>
			(location->lat_str[0] != '\0' && location->lon_str[0] != '\0') ?
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	7f5b      	ldrb	r3, [r3, #29]
					1 : 0;
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <SIM868_GetGPSLocation+0x27a>
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <SIM868_GetGPSLocation+0x27c>
 800166e:	2300      	movs	r3, #0
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	b2d9      	uxtb	r1, r3
	location->valid =
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	7813      	ldrb	r3, [r2, #0]
 800167a:	f361 0300 	bfi	r3, r1, #0, #1
 800167e:	7013      	strb	r3, [r2, #0]


	    char buffer[128];
	    snprintf(buffer, sizeof(buffer), "Parsed location: lat=%s, lon=%s\n", location->lat_str, location->lon_str);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	1c5a      	adds	r2, r3, #1
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	331d      	adds	r3, #29
 8001688:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	4613      	mov	r3, r2
 8001690:	4a16      	ldr	r2, [pc, #88]	@ (80016ec <SIM868_GetGPSLocation+0x2f8>)
 8001692:	2180      	movs	r1, #128	@ 0x80
 8001694:	f00e fee4 	bl	8010460 <sniprintf>
	    CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 8001698:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe fdef 	bl	8000280 <strlen>
 80016a2:	4603      	mov	r3, r0
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f00c fe59 	bl	800e364 <CDC_Transmit_FS>

	return (location->valid) ? SIM868_SUCCESS : SIM868_NO_FIX;
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	bf0c      	ite	eq
 80016c0:	2301      	moveq	r3, #1
 80016c2:	2300      	movne	r3, #0
 80016c4:	b2db      	uxtb	r3, r3
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	37d8      	adds	r7, #216	@ 0xd8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	2000040c 	.word	0x2000040c
 80016d4:	08013a90 	.word	0x08013a90
 80016d8:	08013a9c 	.word	0x08013a9c
 80016dc:	08013aa8 	.word	0x08013aa8
 80016e0:	08013a00 	.word	0x08013a00
 80016e4:	08013ad0 	.word	0x08013ad0
 80016e8:	08013ae4 	.word	0x08013ae4
 80016ec:	08013af0 	.word	0x08013af0

080016f0 <SIM868_sendPostData>:
	}

	// Optional: Add custom handling for specific responses, like checking HTTP status code or data
}

void SIM868_sendPostData(UART_HandleTypeDef *huart, const char *json) {
 80016f0:	b5b0      	push	{r4, r5, r7, lr}
 80016f2:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80016fc:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8001700:	6018      	str	r0, [r3, #0]
 8001702:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001706:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800170a:	6019      	str	r1, [r3, #0]
	char response[MAX_RESPONSE_LEN];
	char cmd[200];

	// List of AT commands to execute before sending data
	const char *commands[] = { "AT",  // 1. Basic connectivity
 800170c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001710:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001714:	4a97      	ldr	r2, [pc, #604]	@ (8001974 <SIM868_sendPostData+0x284>)
 8001716:	461c      	mov	r4, r3
 8001718:	4615      	mov	r5, r2
 800171a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800171c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800171e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001722:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001726:	e884 0003 	stmia.w	r4, {r0, r1}
			"AT+HTTPPARA=\"URL\",\"https://httpbin.org/post\"", // 5. Set URL
			"AT+HTTPPARA=\"CONTENT\",\"application/json\"" // Set content type
			};

	// Iterate over the command list and send each command
	for (int i = 0; i < sizeof(commands) / sizeof(commands[0]); i++) {
 800172a:	2300      	movs	r3, #0
 800172c:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8001730:	e036      	b.n	80017a0 <SIM868_sendPostData+0xb0>
		if (sendATCommand(huart, commands[i], response, UART_TIMEOUT)
 8001732:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001736:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800173a:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 800173e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001742:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
 8001746:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800174a:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 800174e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001752:	6800      	ldr	r0, [r0, #0]
 8001754:	f7ff fc1c 	bl	8000f90 <sendATCommand>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d01b      	beq.n	8001796 <SIM868_sendPostData+0xa6>
				!= SIM868_SUCCESS) {
			char buffer[128];
			snprintf(buffer, sizeof(buffer), "Command failed: %s\n", commands[i]);
 800175e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001762:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001766:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 800176a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800176e:	f107 000c 	add.w	r0, r7, #12
 8001772:	4a81      	ldr	r2, [pc, #516]	@ (8001978 <SIM868_sendPostData+0x288>)
 8001774:	2180      	movs	r1, #128	@ 0x80
 8001776:	f00e fe73 	bl	8010460 <sniprintf>
			CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 800177a:	f107 030c 	add.w	r3, r7, #12
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe fd7e 	bl	8000280 <strlen>
 8001784:	4603      	mov	r3, r0
 8001786:	b29a      	uxth	r2, r3
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	4611      	mov	r1, r2
 800178e:	4618      	mov	r0, r3
 8001790:	f00c fde8 	bl	800e364 <CDC_Transmit_FS>
 8001794:	e0e9      	b.n	800196a <SIM868_sendPostData+0x27a>
	for (int i = 0; i < sizeof(commands) / sizeof(commands[0]); i++) {
 8001796:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800179a:	3301      	adds	r3, #1
 800179c:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 80017a0:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80017a4:	2b09      	cmp	r3, #9
 80017a6:	d9c4      	bls.n	8001732 <SIM868_sendPostData+0x42>
		}
	}

	// 6. Prepare JSON data length
	snprintf(cmd, sizeof(cmd), "AT+HTTPDATA=%lu,10000",
			(unsigned long) strlen(json));
 80017a8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80017ac:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80017b0:	6818      	ldr	r0, [r3, #0]
 80017b2:	f7fe fd65 	bl	8000280 <strlen>
 80017b6:	4603      	mov	r3, r0
	snprintf(cmd, sizeof(cmd), "AT+HTTPDATA=%lu,10000",
 80017b8:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 80017bc:	4a6f      	ldr	r2, [pc, #444]	@ (800197c <SIM868_sendPostData+0x28c>)
 80017be:	21c8      	movs	r1, #200	@ 0xc8
 80017c0:	f00e fe4e 	bl	8010460 <sniprintf>
	if (sendATCommand(huart, cmd, response, UART_TIMEOUT) != SIM868_SUCCESS) {
 80017c4:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
 80017c8:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 80017cc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80017d0:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 80017d4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80017d8:	6800      	ldr	r0, [r0, #0]
 80017da:	f7ff fbd9 	bl	8000f90 <sendATCommand>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d014      	beq.n	800180e <SIM868_sendPostData+0x11e>
		char buffer[64];
		snprintf(buffer, sizeof(buffer), "Failed to send HTTP data length\n");
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	4a65      	ldr	r2, [pc, #404]	@ (8001980 <SIM868_sendPostData+0x290>)
 80017ea:	2140      	movs	r1, #64	@ 0x40
 80017ec:	4618      	mov	r0, r3
 80017ee:	f00e fe37 	bl	8010460 <sniprintf>
		CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 80017f2:	f107 030c 	add.w	r3, r7, #12
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe fd42 	bl	8000280 <strlen>
 80017fc:	4603      	mov	r3, r0
 80017fe:	b29a      	uxth	r2, r3
 8001800:	f107 030c 	add.w	r3, r7, #12
 8001804:	4611      	mov	r1, r2
 8001806:	4618      	mov	r0, r3
 8001808:	f00c fdac 	bl	800e364 <CDC_Transmit_FS>
 800180c:	e0ad      	b.n	800196a <SIM868_sendPostData+0x27a>
		return;
	}

	// 7. Wait for the "DOWNLOAD" prompt and then send the JSON data
	HAL_Delay(500); // Wait for "DOWNLOAD" prompt
 800180e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001812:	f002 fc57 	bl	80040c4 <HAL_Delay>
	HAL_UART_Transmit(huart, (uint8_t*) json, strlen(json), UART_TIMEOUT);
 8001816:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800181a:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800181e:	6818      	ldr	r0, [r3, #0]
 8001820:	f7fe fd2e 	bl	8000280 <strlen>
 8001824:	4603      	mov	r3, r0
 8001826:	b29a      	uxth	r2, r3
 8001828:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800182c:	f5a3 7104 	sub.w	r1, r3, #528	@ 0x210
 8001830:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001834:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 8001838:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800183c:	6809      	ldr	r1, [r1, #0]
 800183e:	6800      	ldr	r0, [r0, #0]
 8001840:	f006 feea 	bl	8008618 <HAL_UART_Transmit>
	HAL_Delay(1000);  // Give time for data to be accepted
 8001844:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001848:	f002 fc3c 	bl	80040c4 <HAL_Delay>

	// 8. Execute POST
	if (sendATCommand(huart, "AT+HTTPACTION=1", response, 10000)
 800184c:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
 8001850:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001854:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 8001858:	f242 7310 	movw	r3, #10000	@ 0x2710
 800185c:	4949      	ldr	r1, [pc, #292]	@ (8001984 <SIM868_sendPostData+0x294>)
 800185e:	6800      	ldr	r0, [r0, #0]
 8001860:	f7ff fb96 	bl	8000f90 <sendATCommand>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d014      	beq.n	8001894 <SIM868_sendPostData+0x1a4>
			!= SIM868_SUCCESS) {
		char buffer[64];
		snprintf(buffer, sizeof(buffer), "Failed to execute POST request\n");
 800186a:	f107 030c 	add.w	r3, r7, #12
 800186e:	4a46      	ldr	r2, [pc, #280]	@ (8001988 <SIM868_sendPostData+0x298>)
 8001870:	2140      	movs	r1, #64	@ 0x40
 8001872:	4618      	mov	r0, r3
 8001874:	f00e fdf4 	bl	8010460 <sniprintf>
		CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 8001878:	f107 030c 	add.w	r3, r7, #12
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fcff 	bl	8000280 <strlen>
 8001882:	4603      	mov	r3, r0
 8001884:	b29a      	uxth	r2, r3
 8001886:	f107 030c 	add.w	r3, r7, #12
 800188a:	4611      	mov	r1, r2
 800188c:	4618      	mov	r0, r3
 800188e:	f00c fd69 	bl	800e364 <CDC_Transmit_FS>
 8001892:	e06a      	b.n	800196a <SIM868_sendPostData+0x27a>
		return;
	}

	// 9. Read response
	if (sendATCommand(huart, "AT+HTTPREAD", response, 10000)
 8001894:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
 8001898:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800189c:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 80018a0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80018a4:	4939      	ldr	r1, [pc, #228]	@ (800198c <SIM868_sendPostData+0x29c>)
 80018a6:	6800      	ldr	r0, [r0, #0]
 80018a8:	f7ff fb72 	bl	8000f90 <sendATCommand>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d014      	beq.n	80018dc <SIM868_sendPostData+0x1ec>
			!= SIM868_SUCCESS) {
		char buffer[64];
		snprintf(buffer, sizeof(buffer), "Failed to read HTTP response\n");
 80018b2:	f107 030c 	add.w	r3, r7, #12
 80018b6:	4a36      	ldr	r2, [pc, #216]	@ (8001990 <SIM868_sendPostData+0x2a0>)
 80018b8:	2140      	movs	r1, #64	@ 0x40
 80018ba:	4618      	mov	r0, r3
 80018bc:	f00e fdd0 	bl	8010460 <sniprintf>
		CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 80018c0:	f107 030c 	add.w	r3, r7, #12
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fcdb 	bl	8000280 <strlen>
 80018ca:	4603      	mov	r3, r0
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	f107 030c 	add.w	r3, r7, #12
 80018d2:	4611      	mov	r1, r2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f00c fd45 	bl	800e364 <CDC_Transmit_FS>
 80018da:	e046      	b.n	800196a <SIM868_sendPostData+0x27a>
		return;
	}

	// 10. Close everything
	const char *closeCommands[] = { "AT+HTTPTERM",  // Terminate HTTP
 80018dc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80018e0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80018e4:	4a2b      	ldr	r2, [pc, #172]	@ (8001994 <SIM868_sendPostData+0x2a4>)
 80018e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80018e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			"AT+CIPSHUT",  // Shut down network connection
			"AT+SAPBR=0,1"  // Close GPRS context
			};

	// Iterate over the close command list and send each command
	for (int i = 0; i < sizeof(closeCommands) / sizeof(closeCommands[0]); i++) {
 80018ec:	2300      	movs	r3, #0
 80018ee:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 80018f2:	e036      	b.n	8001962 <SIM868_sendPostData+0x272>
		if (sendATCommand(huart, closeCommands[i], response, UART_TIMEOUT)
 80018f4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80018f8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80018fc:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8001900:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001904:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
 8001908:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800190c:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 8001910:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001914:	6800      	ldr	r0, [r0, #0]
 8001916:	f7ff fb3b 	bl	8000f90 <sendATCommand>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d01b      	beq.n	8001958 <SIM868_sendPostData+0x268>
				!= SIM868_SUCCESS) {
			char buffer[128];
			snprintf(buffer, sizeof(buffer), "Failed to send close command: %s\n", closeCommands[i]);
 8001920:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001924:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001928:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 800192c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001930:	f107 000c 	add.w	r0, r7, #12
 8001934:	4a18      	ldr	r2, [pc, #96]	@ (8001998 <SIM868_sendPostData+0x2a8>)
 8001936:	2180      	movs	r1, #128	@ 0x80
 8001938:	f00e fd92 	bl	8010460 <sniprintf>
			CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 800193c:	f107 030c 	add.w	r3, r7, #12
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fc9d 	bl	8000280 <strlen>
 8001946:	4603      	mov	r3, r0
 8001948:	b29a      	uxth	r2, r3
 800194a:	f107 030c 	add.w	r3, r7, #12
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f00c fd07 	bl	800e364 <CDC_Transmit_FS>
 8001956:	e008      	b.n	800196a <SIM868_sendPostData+0x27a>
	for (int i = 0; i < sizeof(closeCommands) / sizeof(closeCommands[0]); i++) {
 8001958:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800195c:	3301      	adds	r3, #1
 800195e:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 8001962:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8001966:	2b02      	cmp	r3, #2
 8001968:	d9c4      	bls.n	80018f4 <SIM868_sendPostData+0x204>
			return;
		}
	}
}
 800196a:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800196e:	46bd      	mov	sp, r7
 8001970:	bdb0      	pop	{r4, r5, r7, pc}
 8001972:	bf00      	nop
 8001974:	08013d50 	.word	0x08013d50
 8001978:	08013b14 	.word	0x08013b14
 800197c:	08013c44 	.word	0x08013c44
 8001980:	08013c5c 	.word	0x08013c5c
 8001984:	08013c80 	.word	0x08013c80
 8001988:	08013c90 	.word	0x08013c90
 800198c:	08013be4 	.word	0x08013be4
 8001990:	08013cb0 	.word	0x08013cb0
 8001994:	08013d78 	.word	0x08013d78
 8001998:	08013cd0 	.word	0x08013cd0

0800199c <sendMQTTPacket>:

SIM868_Status_t sendMQTTPacket(UART_HandleTypeDef *huart, uint8_t *data,
		uint16_t len, uint16_t timeout) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b094      	sub	sp, #80	@ 0x50
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	4611      	mov	r1, r2
 80019a8:	461a      	mov	r2, r3
 80019aa:	460b      	mov	r3, r1
 80019ac:	80fb      	strh	r3, [r7, #6]
 80019ae:	4613      	mov	r3, r2
 80019b0:	80bb      	strh	r3, [r7, #4]

	char buffer[64];
	    snprintf(buffer, sizeof(buffer), ">> Sending MQTT Packet...\n");
 80019b2:	f107 0310 	add.w	r3, r7, #16
 80019b6:	4a25      	ldr	r2, [pc, #148]	@ (8001a4c <sendMQTTPacket+0xb0>)
 80019b8:	2140      	movs	r1, #64	@ 0x40
 80019ba:	4618      	mov	r0, r3
 80019bc:	f00e fd50 	bl	8010460 <sniprintf>
	    CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 80019c0:	f107 0310 	add.w	r3, r7, #16
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fc5b 	bl	8000280 <strlen>
 80019ca:	4603      	mov	r3, r0
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	f107 0310 	add.w	r3, r7, #16
 80019d2:	4611      	mov	r1, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f00c fcc5 	bl	800e364 <CDC_Transmit_FS>

	// Transmit raw binary data
	if (HAL_UART_Transmit(huart, data, len, timeout) != HAL_OK) {
 80019da:	88bb      	ldrh	r3, [r7, #4]
 80019dc:	88fa      	ldrh	r2, [r7, #6]
 80019de:	68b9      	ldr	r1, [r7, #8]
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f006 fe19 	bl	8008618 <HAL_UART_Transmit>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d015      	beq.n	8001a18 <sendMQTTPacket+0x7c>
		snprintf(buffer, sizeof(buffer), "#RED#Failed to transmit raw data\n");
 80019ec:	f107 0310 	add.w	r3, r7, #16
 80019f0:	4a17      	ldr	r2, [pc, #92]	@ (8001a50 <sendMQTTPacket+0xb4>)
 80019f2:	2140      	movs	r1, #64	@ 0x40
 80019f4:	4618      	mov	r0, r3
 80019f6:	f00e fd33 	bl	8010460 <sniprintf>
		CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 80019fa:	f107 0310 	add.w	r3, r7, #16
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fc3e 	bl	8000280 <strlen>
 8001a04:	4603      	mov	r3, r0
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	f107 0310 	add.w	r3, r7, #16
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f00c fca8 	bl	800e364 <CDC_Transmit_FS>
		return SIM868_ERROR;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e014      	b.n	8001a42 <sendMQTTPacket+0xa6>

// Always null-terminate the received buffer
//	rxBuffer[sizeof(rxBuffer) - 1] = '\0';
//	DEBUG_PRINT("#ORG#SendAtCommand = %s", (char*) rxBuffer);
//	DEBUG_PRINT("#ORG#Raw data transmitted (%d bytes)\n", len);
	snprintf(buffer, sizeof(buffer), ">> Done!\n");
 8001a18:	f107 0310 	add.w	r3, r7, #16
 8001a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a54 <sendMQTTPacket+0xb8>)
 8001a1e:	2140      	movs	r1, #64	@ 0x40
 8001a20:	4618      	mov	r0, r3
 8001a22:	f00e fd1d 	bl	8010460 <sniprintf>
	CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 8001a26:	f107 0310 	add.w	r3, r7, #16
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7fe fc28 	bl	8000280 <strlen>
 8001a30:	4603      	mov	r3, r0
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	f107 0310 	add.w	r3, r7, #16
 8001a38:	4611      	mov	r1, r2
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f00c fc92 	bl	800e364 <CDC_Transmit_FS>
	return SIM868_SUCCESS;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3750      	adds	r7, #80	@ 0x50
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	08013d84 	.word	0x08013d84
 8001a50:	08013da0 	.word	0x08013da0
 8001a54:	08013dc4 	.word	0x08013dc4

08001a58 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8001a62:	2101      	movs	r1, #1
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 f9fe 	bl	8001e66 <LoRa_read>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	73bb      	strb	r3, [r7, #14]
	data = read;
 8001a6e:	7bbb      	ldrb	r3, [r7, #14]
 8001a70:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d107      	bne.n	8001a88 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8001a78:	7bbb      	ldrb	r3, [r7, #14]
 8001a7a:	f023 0307 	bic.w	r3, r3, #7
 8001a7e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	61da      	str	r2, [r3, #28]
 8001a86:	e03e      	b.n	8001b06 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d10c      	bne.n	8001aa8 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8001a8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a92:	f023 0307 	bic.w	r3, r3, #7
 8001a96:	b25b      	sxtb	r3, r3
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	b25b      	sxtb	r3, r3
 8001a9e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	61da      	str	r2, [r3, #28]
 8001aa6:	e02e      	b.n	8001b06 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	d10c      	bne.n	8001ac8 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8001aae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001ab2:	f023 0307 	bic.w	r3, r3, #7
 8001ab6:	b25b      	sxtb	r3, r3
 8001ab8:	f043 0303 	orr.w	r3, r3, #3
 8001abc:	b25b      	sxtb	r3, r3
 8001abe:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	61da      	str	r2, [r3, #28]
 8001ac6:	e01e      	b.n	8001b06 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	2b05      	cmp	r3, #5
 8001acc:	d10c      	bne.n	8001ae8 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8001ace:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001ad2:	f023 0307 	bic.w	r3, r3, #7
 8001ad6:	b25b      	sxtb	r3, r3
 8001ad8:	f043 0305 	orr.w	r3, r3, #5
 8001adc:	b25b      	sxtb	r3, r3
 8001ade:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2205      	movs	r2, #5
 8001ae4:	61da      	str	r2, [r3, #28]
 8001ae6:	e00e      	b.n	8001b06 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	2b06      	cmp	r3, #6
 8001aec:	d10b      	bne.n	8001b06 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8001aee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001af2:	f023 0307 	bic.w	r3, r3, #7
 8001af6:	b25b      	sxtb	r3, r3
 8001af8:	f043 0306 	orr.w	r3, r3, #6
 8001afc:	b25b      	sxtb	r3, r3
 8001afe:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2206      	movs	r2, #6
 8001b04:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f000 f9c4 	bl	8001e9a <LoRa_write>
	//HAL_Delay(10);
}
 8001b12:	bf00      	nop
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b084      	sub	sp, #16
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	603b      	str	r3, [r7, #0]
 8001b26:	4613      	mov	r3, r2
 8001b28:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6818      	ldr	r0, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	889b      	ldrh	r3, [r3, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	4619      	mov	r1, r3
 8001b36:	f002 fd9f 	bl	8004678 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6998      	ldr	r0, [r3, #24]
 8001b3e:	88fa      	ldrh	r2, [r7, #6]
 8001b40:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001b44:	68b9      	ldr	r1, [r7, #8]
 8001b46:	f005 fd52 	bl	80075ee <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001b4a:	bf00      	nop
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f006 f952 	bl	8007dfa <HAL_SPI_GetState>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d1f7      	bne.n	8001b4c <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6998      	ldr	r0, [r3, #24]
 8001b60:	8b3a      	ldrh	r2, [r7, #24]
 8001b62:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001b66:	6839      	ldr	r1, [r7, #0]
 8001b68:	f005 fe85 	bl	8007876 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001b6c:	bf00      	nop
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f006 f941 	bl	8007dfa <HAL_SPI_GetState>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d1f7      	bne.n	8001b6e <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6818      	ldr	r0, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	889b      	ldrh	r3, [r3, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f002 fd75 	bl	8004678 <HAL_GPIO_WritePin>
}
 8001b8e:	bf00      	nop
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b084      	sub	sp, #16
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	60f8      	str	r0, [r7, #12]
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	603b      	str	r3, [r7, #0]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6818      	ldr	r0, [r3, #0]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	889b      	ldrh	r3, [r3, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f002 fd61 	bl	8004678 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6998      	ldr	r0, [r3, #24]
 8001bba:	88fa      	ldrh	r2, [r7, #6]
 8001bbc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001bc0:	68b9      	ldr	r1, [r7, #8]
 8001bc2:	f005 fd14 	bl	80075ee <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001bc6:	bf00      	nop
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f006 f914 	bl	8007dfa <HAL_SPI_GetState>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d1f7      	bne.n	8001bc8 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6998      	ldr	r0, [r3, #24]
 8001bdc:	8b3a      	ldrh	r2, [r7, #24]
 8001bde:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001be2:	6839      	ldr	r1, [r7, #0]
 8001be4:	f005 fd03 	bl	80075ee <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001be8:	bf00      	nop
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f006 f903 	bl	8007dfa <HAL_SPI_GetState>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d1f7      	bne.n	8001bea <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6818      	ldr	r0, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	889b      	ldrh	r3, [r3, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	4619      	mov	r1, r3
 8001c06:	f002 fd37 	bl	8004678 <HAL_GPIO_WritePin>
}
 8001c0a:	bf00      	nop
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b084      	sub	sp, #16
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8001c1e:	2126      	movs	r1, #38	@ 0x26
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f920 	bl	8001e66 <LoRa_read>
 8001c26:	4603      	mov	r3, r0
 8001c28:	73bb      	strb	r3, [r7, #14]

	if(value)
 8001c2a:	78fb      	ldrb	r3, [r7, #3]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d004      	beq.n	8001c3a <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8001c30:	7bbb      	ldrb	r3, [r7, #14]
 8001c32:	f043 0308 	orr.w	r3, r3, #8
 8001c36:	73fb      	strb	r3, [r7, #15]
 8001c38:	e003      	b.n	8001c42 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8001c3a:	7bbb      	ldrb	r3, [r7, #14]
 8001c3c:	f023 0308 	bic.w	r3, r3, #8
 8001c40:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
 8001c44:	461a      	mov	r2, r3
 8001c46:	2126      	movs	r1, #38	@ 0x26
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f926 	bl	8001e9a <LoRa_write>
	HAL_Delay(10);
 8001c4e:	200a      	movs	r0, #10
 8001c50:	f002 fa38 	bl	80040c4 <HAL_Delay>
}
 8001c54:	bf00      	nop
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b096      	sub	sp, #88	@ 0x58
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8001c64:	4a17      	ldr	r2, [pc, #92]	@ (8001cc4 <LoRa_setAutoLDO+0x68>)
 8001c66:	f107 0308 	add.w	r3, r7, #8
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	2250      	movs	r2, #80	@ 0x50
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f00e fdab 	bl	80107ca <memcpy>

	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	4093      	lsls	r3, r2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe fc57 	bl	8000534 <__aeabi_i2d>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	3358      	adds	r3, #88	@ 0x58
 8001c90:	443b      	add	r3, r7
 8001c92:	3b50      	subs	r3, #80	@ 0x50
 8001c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c98:	f7fe fde0 	bl	800085c <__aeabi_ddiv>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	f7fe ff60 	bl	8000b68 <__aeabi_d2iz>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b10      	cmp	r3, #16
 8001cac:	bfcc      	ite	gt
 8001cae:	2301      	movgt	r3, #1
 8001cb0:	2300      	movle	r3, #0
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff ffab 	bl	8001c12 <LoRa_setLowDaraRateOptimization>
}
 8001cbc:	bf00      	nop
 8001cbe:	3758      	adds	r7, #88	@ 0x58
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	08013dd0 	.word	0x08013dd0

08001cc8 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	04db      	lsls	r3, r3, #19
 8001cd6:	115b      	asrs	r3, r3, #5
 8001cd8:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	0c1b      	lsrs	r3, r3, #16
 8001cde:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8001ce0:	7afb      	ldrb	r3, [r7, #11]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	2106      	movs	r1, #6
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f8d7 	bl	8001e9a <LoRa_write>
	HAL_Delay(5);
 8001cec:	2005      	movs	r0, #5
 8001cee:	f002 f9e9 	bl	80040c4 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	0a1b      	lsrs	r3, r3, #8
 8001cf6:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001cf8:	7afb      	ldrb	r3, [r7, #11]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	2107      	movs	r1, #7
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f8cb 	bl	8001e9a <LoRa_write>
	HAL_Delay(5);
 8001d04:	2005      	movs	r0, #5
 8001d06:	f002 f9dd 	bl	80040c4 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8001d0e:	7afb      	ldrb	r3, [r7, #11]
 8001d10:	461a      	mov	r2, r3
 8001d12:	2108      	movs	r1, #8
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 f8c0 	bl	8001e9a <LoRa_write>
	HAL_Delay(5);
 8001d1a:	2005      	movs	r0, #5
 8001d1c:	f002 f9d2 	bl	80040c4 <HAL_Delay>
}
 8001d20:	bf00      	nop
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2b0c      	cmp	r3, #12
 8001d36:	dd01      	ble.n	8001d3c <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001d38:	230c      	movs	r3, #12
 8001d3a:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	2b06      	cmp	r3, #6
 8001d40:	dc01      	bgt.n	8001d46 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8001d42:	2307      	movs	r3, #7
 8001d44:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001d46:	211e      	movs	r1, #30
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f88c 	bl	8001e66 <LoRa_read>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8001d52:	200a      	movs	r0, #10
 8001d54:	f002 f9b6 	bl	80040c4 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	011b      	lsls	r3, r3, #4
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	4413      	add	r3, r2
 8001d6a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8001d6c:	7bbb      	ldrb	r3, [r7, #14]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	211e      	movs	r1, #30
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f891 	bl	8001e9a <LoRa_write>
	HAL_Delay(10);
 8001d78:	200a      	movs	r0, #10
 8001d7a:	f002 f9a3 	bl	80040c4 <HAL_Delay>

	LoRa_setAutoLDO(_LoRa);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ff6c 	bl	8001c5c <LoRa_setAutoLDO>
}
 8001d84:	bf00      	nop
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8001d98:	78fb      	ldrb	r3, [r7, #3]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	2109      	movs	r1, #9
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f87b 	bl	8001e9a <LoRa_write>
	HAL_Delay(10);
 8001da4:	200a      	movs	r0, #10
 8001da6:	f002 f98d 	bl	80040c4 <HAL_Delay>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001dc4:	78fb      	ldrb	r3, [r7, #3]
 8001dc6:	2b2c      	cmp	r3, #44	@ 0x2c
 8001dc8:	d801      	bhi.n	8001dce <LoRa_setOCP+0x1a>
		current = 45;
 8001dca:	232d      	movs	r3, #45	@ 0x2d
 8001dcc:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	2bf0      	cmp	r3, #240	@ 0xf0
 8001dd2:	d901      	bls.n	8001dd8 <LoRa_setOCP+0x24>
		current = 240;
 8001dd4:	23f0      	movs	r3, #240	@ 0xf0
 8001dd6:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	2b78      	cmp	r3, #120	@ 0x78
 8001ddc:	d809      	bhi.n	8001df2 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8001dde:	78fb      	ldrb	r3, [r7, #3]
 8001de0:	3b2d      	subs	r3, #45	@ 0x2d
 8001de2:	4a12      	ldr	r2, [pc, #72]	@ (8001e2c <LoRa_setOCP+0x78>)
 8001de4:	fb82 1203 	smull	r1, r2, r2, r3
 8001de8:	1052      	asrs	r2, r2, #1
 8001dea:	17db      	asrs	r3, r3, #31
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	73fb      	strb	r3, [r7, #15]
 8001df0:	e00b      	b.n	8001e0a <LoRa_setOCP+0x56>
	else if(current <= 240)
 8001df2:	78fb      	ldrb	r3, [r7, #3]
 8001df4:	2bf0      	cmp	r3, #240	@ 0xf0
 8001df6:	d808      	bhi.n	8001e0a <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001df8:	78fb      	ldrb	r3, [r7, #3]
 8001dfa:	331e      	adds	r3, #30
 8001dfc:	4a0b      	ldr	r2, [pc, #44]	@ (8001e2c <LoRa_setOCP+0x78>)
 8001dfe:	fb82 1203 	smull	r1, r2, r2, r3
 8001e02:	1092      	asrs	r2, r2, #2
 8001e04:	17db      	asrs	r3, r3, #31
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
 8001e0c:	3320      	adds	r3, #32
 8001e0e:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
 8001e12:	461a      	mov	r2, r3
 8001e14:	210b      	movs	r1, #11
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f83f 	bl	8001e9a <LoRa_write>
	HAL_Delay(10);
 8001e1c:	200a      	movs	r0, #10
 8001e1e:	f002 f951 	bl	80040c4 <HAL_Delay>
}
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	66666667 	.word	0x66666667

08001e30 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001e38:	211e      	movs	r1, #30
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f813 	bl	8001e66 <LoRa_read>
 8001e40:	4603      	mov	r3, r0
 8001e42:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
 8001e46:	f043 0307 	orr.w	r3, r3, #7
 8001e4a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001e4c:	7bbb      	ldrb	r3, [r7, #14]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	211e      	movs	r1, #30
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f821 	bl	8001e9a <LoRa_write>
	HAL_Delay(10);
 8001e58:	200a      	movs	r0, #10
 8001e5a:	f002 f933 	bl	80040c4 <HAL_Delay>
}
 8001e5e:	bf00      	nop
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b086      	sub	sp, #24
 8001e6a:	af02      	add	r7, sp, #8
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	460b      	mov	r3, r1
 8001e70:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8001e72:	78fb      	ldrb	r3, [r7, #3]
 8001e74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8001e7c:	f107 030f 	add.w	r3, r7, #15
 8001e80:	f107 010e 	add.w	r1, r7, #14
 8001e84:	2201      	movs	r2, #1
 8001e86:	9200      	str	r2, [sp, #0]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff fe45 	bl	8001b1a <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b086      	sub	sp, #24
 8001e9e:	af02      	add	r7, sp, #8
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	70fb      	strb	r3, [r7, #3]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8001eaa:	78fb      	ldrb	r3, [r7, #3]
 8001eac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001eb4:	78bb      	ldrb	r3, [r7, #2]
 8001eb6:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001eb8:	f107 030f 	add.w	r3, r7, #15
 8001ebc:	f107 010e 	add.w	r1, r7, #14
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	9200      	str	r2, [sp, #0]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff fe65 	bl	8001b96 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8001ecc:	bf00      	nop
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	607a      	str	r2, [r7, #4]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	72fb      	strb	r3, [r7, #11]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8001ee8:	7afb      	ldrb	r3, [r7, #11]
 8001eea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6818      	ldr	r0, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	889b      	ldrh	r3, [r3, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	4619      	mov	r1, r3
 8001efe:	f002 fbbb 	bl	8004678 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6998      	ldr	r0, [r3, #24]
 8001f06:	f107 0117 	add.w	r1, r7, #23
 8001f0a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f005 fb6d 	bl	80075ee <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001f14:	bf00      	nop
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f005 ff6d 	bl	8007dfa <HAL_SPI_GetState>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d1f7      	bne.n	8001f16 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6998      	ldr	r0, [r3, #24]
 8001f2a:	7abb      	ldrb	r3, [r7, #10]
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	f005 fb5b 	bl	80075ee <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001f38:	bf00      	nop
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f005 ff5b 	bl	8007dfa <HAL_SPI_GetState>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d1f7      	bne.n	8001f3a <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6818      	ldr	r0, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	889b      	ldrh	r3, [r3, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	4619      	mov	r1, r3
 8001f56:	f002 fb8f 	bl	8004678 <HAL_GPIO_WritePin>
}
 8001f5a:	bf00      	nop
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]

	return 1;
 8001f6a:	2301      	movs	r3, #1
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	4611      	mov	r1, r2
 8001f84:	461a      	mov	r2, r3
 8001f86:	460b      	mov	r3, r1
 8001f88:	71fb      	strb	r3, [r7, #7]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001f94:	2101      	movs	r1, #1
 8001f96:	68f8      	ldr	r0, [r7, #12]
 8001f98:	f7ff fd5e 	bl	8001a58 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8001f9c:	210e      	movs	r1, #14
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f7ff ff61 	bl	8001e66 <LoRa_read>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001fa8:	7cfb      	ldrb	r3, [r7, #19]
 8001faa:	461a      	mov	r2, r3
 8001fac:	210d      	movs	r1, #13
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f7ff ff73 	bl	8001e9a <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	2122      	movs	r1, #34	@ 0x22
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f7ff ff6d 	bl	8001e9a <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f7ff ff84 	bl	8001ed4 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8001fcc:	2103      	movs	r1, #3
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f7ff fd42 	bl	8001a58 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001fd4:	2112      	movs	r1, #18
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f7ff ff45 	bl	8001e66 <LoRa_read>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8001fe0:	7cfb      	ldrb	r3, [r7, #19]
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00a      	beq.n	8002000 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001fea:	22ff      	movs	r2, #255	@ 0xff
 8001fec:	2112      	movs	r1, #18
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f7ff ff53 	bl	8001e9a <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001ff4:	6979      	ldr	r1, [r7, #20]
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f7ff fd2e 	bl	8001a58 <LoRa_gotoMode>
			return 1;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e00f      	b.n	8002020 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8002000:	88bb      	ldrh	r3, [r7, #4]
 8002002:	3b01      	subs	r3, #1
 8002004:	80bb      	strh	r3, [r7, #4]
 8002006:	88bb      	ldrh	r3, [r7, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d105      	bne.n	8002018 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 800200c:	6979      	ldr	r1, [r7, #20]
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f7ff fd22 	bl	8001a58 <LoRa_gotoMode>
				return 0;
 8002014:	2300      	movs	r3, #0
 8002016:	e003      	b.n	8002020 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8002018:	2001      	movs	r0, #1
 800201a:	f002 f853 	bl	80040c4 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 800201e:	e7d9      	b.n	8001fd4 <LoRa_transmit+0x5c>
	}
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8002030:	2105      	movs	r1, #5
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff fd10 	bl	8001a58 <LoRa_gotoMode>
}
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8002040:	b590      	push	{r4, r7, lr}
 8002042:	b089      	sub	sp, #36	@ 0x24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	4613      	mov	r3, r2
 800204c:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8002052:	2300      	movs	r3, #0
 8002054:	61bb      	str	r3, [r7, #24]
 8002056:	e007      	b.n	8002068 <LoRa_receive+0x28>
		data[i]=0;
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	4413      	add	r3, r2
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	3301      	adds	r3, #1
 8002066:	61bb      	str	r3, [r7, #24]
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	429a      	cmp	r2, r3
 800206e:	dbf3      	blt.n	8002058 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8002070:	2101      	movs	r1, #1
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f7ff fcf0 	bl	8001a58 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8002078:	2112      	movs	r1, #18
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f7ff fef3 	bl	8001e66 <LoRa_read>
 8002080:	4603      	mov	r3, r0
 8002082:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8002084:	7cfb      	ldrb	r3, [r7, #19]
 8002086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800208a:	2b00      	cmp	r3, #0
 800208c:	d02f      	beq.n	80020ee <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 800208e:	22ff      	movs	r2, #255	@ 0xff
 8002090:	2112      	movs	r1, #18
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f7ff ff01 	bl	8001e9a <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8002098:	2113      	movs	r1, #19
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f7ff fee3 	bl	8001e66 <LoRa_read>
 80020a0:	4603      	mov	r3, r0
 80020a2:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 80020a4:	2110      	movs	r1, #16
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f7ff fedd 	bl	8001e66 <LoRa_read>
 80020ac:	4603      	mov	r3, r0
 80020ae:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80020b0:	7cfb      	ldrb	r3, [r7, #19]
 80020b2:	461a      	mov	r2, r3
 80020b4:	210d      	movs	r1, #13
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f7ff feef 	bl	8001e9a <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 80020bc:	7cba      	ldrb	r2, [r7, #18]
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	4293      	cmp	r3, r2
 80020c2:	bf28      	it	cs
 80020c4:	4613      	movcs	r3, r2
 80020c6:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	e00b      	b.n	80020e6 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	18d4      	adds	r4, r2, r3
 80020d4:	2100      	movs	r1, #0
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f7ff fec5 	bl	8001e66 <LoRa_read>
 80020dc:	4603      	mov	r3, r0
 80020de:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	3301      	adds	r3, #1
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	7ffb      	ldrb	r3, [r7, #31]
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	dbef      	blt.n	80020ce <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80020ee:	2105      	movs	r1, #5
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f7ff fcb1 	bl	8001a58 <LoRa_gotoMode>
    return min;
 80020f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3724      	adds	r7, #36	@ 0x24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd90      	pop	{r4, r7, pc}

08002100 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff ff2a 	bl	8001f62 <LoRa_isvalid>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 8096 	beq.w	8002242 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8002116:	2100      	movs	r1, #0
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff fc9d 	bl	8001a58 <LoRa_gotoMode>
			HAL_Delay(10);
 800211e:	200a      	movs	r0, #10
 8002120:	f001 ffd0 	bl	80040c4 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8002124:	2101      	movs	r1, #1
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff fe9d 	bl	8001e66 <LoRa_read>
 800212c:	4603      	mov	r3, r0
 800212e:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8002130:	200a      	movs	r0, #10
 8002132:	f001 ffc7 	bl	80040c4 <HAL_Delay>
			data = read | 0x80;
 8002136:	7bfb      	ldrb	r3, [r7, #15]
 8002138:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800213c:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 800213e:	7bbb      	ldrb	r3, [r7, #14]
 8002140:	461a      	mov	r2, r3
 8002142:	2101      	movs	r1, #1
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff fea8 	bl	8001e9a <LoRa_write>
			HAL_Delay(100);
 800214a:	2064      	movs	r0, #100	@ 0x64
 800214c:	f001 ffba 	bl	80040c4 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	4619      	mov	r1, r3
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff fdb6 	bl	8001cc8 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002162:	4619      	mov	r1, r3
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff fe11 	bl	8001d8c <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8002170:	4619      	mov	r1, r3
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff fe1e 	bl	8001db4 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8002178:	2223      	movs	r2, #35	@ 0x23
 800217a:	210c      	movs	r1, #12
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f7ff fe8c 	bl	8001e9a <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff fe54 	bl	8001e30 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800218e:	4619      	mov	r1, r3
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff fdc9 	bl	8001d28 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8002196:	22ff      	movs	r2, #255	@ 0xff
 8002198:	211f      	movs	r1, #31
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff fe7d 	bl	8001e9a <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80021aa:	011b      	lsls	r3, r3, #4
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	4413      	add	r3, r2
 80021ba:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 80021bc:	7bbb      	ldrb	r3, [r7, #14]
 80021be:	461a      	mov	r2, r3
 80021c0:	211d      	movs	r1, #29
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff fe69 	bl	8001e9a <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff fd47 	bl	8001c5c <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021d2:	0a1b      	lsrs	r3, r3, #8
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	2120      	movs	r1, #32
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff fe5c 	bl	8001e9a <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	461a      	mov	r2, r3
 80021ea:	2121      	movs	r1, #33	@ 0x21
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7ff fe54 	bl	8001e9a <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 80021f2:	2140      	movs	r1, #64	@ 0x40
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7ff fe36 	bl	8001e66 <LoRa_read>
 80021fa:	4603      	mov	r3, r0
 80021fc:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8002204:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8002206:	7bbb      	ldrb	r3, [r7, #14]
 8002208:	461a      	mov	r2, r3
 800220a:	2140      	movs	r1, #64	@ 0x40
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff fe44 	bl	8001e9a <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8002212:	2101      	movs	r1, #1
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff fc1f 	bl	8001a58 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8002220:	200a      	movs	r0, #10
 8002222:	f001 ff4f 	bl	80040c4 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8002226:	2142      	movs	r1, #66	@ 0x42
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff fe1c 	bl	8001e66 <LoRa_read>
 800222e:	4603      	mov	r3, r0
 8002230:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8002232:	7bfb      	ldrb	r3, [r7, #15]
 8002234:	2b12      	cmp	r3, #18
 8002236:	d101      	bne.n	800223c <LoRa_init+0x13c>
				return LORA_OK;
 8002238:	23c8      	movs	r3, #200	@ 0xc8
 800223a:	e004      	b.n	8002246 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 800223c:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8002240:	e001      	b.n	8002246 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8002242:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <receive_ack_TX>:

uint8_t loraRxBuffer[128];
extern LoRa myLoRa;


bool receive_ack_TX(void) {
 8002250:	b580      	push	{r7, lr}
 8002252:	b094      	sub	sp, #80	@ 0x50
 8002254:	af00      	add	r7, sp, #0
	uint8_t ackByte = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	char buffer[64];
	bool responseReceived = false;
 800225c:	2300      	movs	r3, #0
 800225e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	CDC_Transmit_FS((uint8_t*) "Waiting for ACK...\r\n",
 8002262:	2114      	movs	r1, #20
 8002264:	4831      	ldr	r0, [pc, #196]	@ (800232c <receive_ack_TX+0xdc>)
 8002266:	f00c f87d 	bl	800e364 <CDC_Transmit_FS>
			strlen("Waiting for ACK...\r\n"));

	uint32_t startTime = HAL_GetTick();
 800226a:	f001 ff1f 	bl	80040ac <HAL_GetTick>
 800226e:	64b8      	str	r0, [r7, #72]	@ 0x48
	while (HAL_GetTick() - startTime < 2000) { // Wait up to 2 seconds
 8002270:	e030      	b.n	80022d4 <receive_ack_TX+0x84>
		int receivedLen = LoRa_receive(&myLoRa, &ackByte, 1);
 8002272:	f107 0343 	add.w	r3, r7, #67	@ 0x43
 8002276:	2201      	movs	r2, #1
 8002278:	4619      	mov	r1, r3
 800227a:	482d      	ldr	r0, [pc, #180]	@ (8002330 <receive_ack_TX+0xe0>)
 800227c:	f7ff fee0 	bl	8002040 <LoRa_receive>
 8002280:	4603      	mov	r3, r0
 8002282:	647b      	str	r3, [r7, #68]	@ 0x44

		if (receivedLen == 1) {
 8002284:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002286:	2b01      	cmp	r3, #1
 8002288:	d11d      	bne.n	80022c6 <receive_ack_TX+0x76>
			snprintf(buffer, sizeof(buffer), "ACK byte received: %d\r\n",
 800228a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800228e:	4638      	mov	r0, r7
 8002290:	4a28      	ldr	r2, [pc, #160]	@ (8002334 <receive_ack_TX+0xe4>)
 8002292:	2140      	movs	r1, #64	@ 0x40
 8002294:	f00e f8e4 	bl	8010460 <sniprintf>
					ackByte);
			CDC_Transmit_FS((uint8_t*) buffer, strlen(buffer));
 8002298:	463b      	mov	r3, r7
 800229a:	4618      	mov	r0, r3
 800229c:	f7fd fff0 	bl	8000280 <strlen>
 80022a0:	4603      	mov	r3, r0
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	463b      	mov	r3, r7
 80022a6:	4611      	mov	r1, r2
 80022a8:	4618      	mov	r0, r3
 80022aa:	f00c f85b 	bl	800e364 <CDC_Transmit_FS>

			if (ackByte == 1) {
 80022ae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d103      	bne.n	80022be <receive_ack_TX+0x6e>
				responseReceived = true;  // ACK
 80022b6:	2301      	movs	r3, #1
 80022b8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			} else {
				responseReceived = false; // NACK
			}
			break;
 80022bc:	e012      	b.n	80022e4 <receive_ack_TX+0x94>
				responseReceived = false; // NACK
 80022be:	2300      	movs	r3, #0
 80022c0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			break;
 80022c4:	e00e      	b.n	80022e4 <receive_ack_TX+0x94>
		} else {
			CDC_Transmit_FS((uint8_t*) "No data received yet...\r\n",
 80022c6:	2119      	movs	r1, #25
 80022c8:	481b      	ldr	r0, [pc, #108]	@ (8002338 <receive_ack_TX+0xe8>)
 80022ca:	f00c f84b 	bl	800e364 <CDC_Transmit_FS>
					strlen("No data received yet...\r\n"));
			HAL_Delay(100);
 80022ce:	2064      	movs	r0, #100	@ 0x64
 80022d0:	f001 fef8 	bl	80040c4 <HAL_Delay>
	while (HAL_GetTick() - startTime < 2000) { // Wait up to 2 seconds
 80022d4:	f001 feea 	bl	80040ac <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80022e2:	d3c6      	bcc.n	8002272 <receive_ack_TX+0x22>
		}
	}

	if (!responseReceived) {
 80022e4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80022e8:	f083 0301 	eor.w	r3, r3, #1
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d011      	beq.n	8002316 <receive_ack_TX+0xc6>
		snprintf(buffer, sizeof(buffer),
 80022f2:	463b      	mov	r3, r7
 80022f4:	4a11      	ldr	r2, [pc, #68]	@ (800233c <receive_ack_TX+0xec>)
 80022f6:	2140      	movs	r1, #64	@ 0x40
 80022f8:	4618      	mov	r0, r3
 80022fa:	f00e f8b1 	bl	8010460 <sniprintf>
				"No ACK received (timeout or NACK)\r\n");
		CDC_Transmit_FS((uint8_t*) buffer, strlen(buffer));
 80022fe:	463b      	mov	r3, r7
 8002300:	4618      	mov	r0, r3
 8002302:	f7fd ffbd 	bl	8000280 <strlen>
 8002306:	4603      	mov	r3, r0
 8002308:	b29a      	uxth	r2, r3
 800230a:	463b      	mov	r3, r7
 800230c:	4611      	mov	r1, r2
 800230e:	4618      	mov	r0, r3
 8002310:	f00c f828 	bl	800e364 <CDC_Transmit_FS>
 8002314:	e003      	b.n	800231e <receive_ack_TX+0xce>
	} else {
		CDC_Transmit_FS((uint8_t*) "ACK confirmed!\r\n",
 8002316:	2110      	movs	r1, #16
 8002318:	4809      	ldr	r0, [pc, #36]	@ (8002340 <receive_ack_TX+0xf0>)
 800231a:	f00c f823 	bl	800e364 <CDC_Transmit_FS>
				strlen("ACK confirmed!\r\n"));
	}

	return responseReceived;
 800231e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8002322:	4618      	mov	r0, r3
 8002324:	3750      	adds	r7, #80	@ 0x50
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	08013e20 	.word	0x08013e20
 8002330:	20000a18 	.word	0x20000a18
 8002334:	08013e38 	.word	0x08013e38
 8002338:	08013e50 	.word	0x08013e50
 800233c:	08013e6c 	.word	0x08013e6c
 8002340:	08013e90 	.word	0x08013e90

08002344 <sendMessageAndWaitForAck_TX>:
//void sendMessageAndWaitForAck(LoRa *lora, uint8_t *messageBuffer) {

void sendMessageAndWaitForAck_TX(LoRa *lora, const uint8_t *messageBuffer) {
 8002344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002348:	b0cd      	sub	sp, #308	@ 0x134
 800234a:	af00      	add	r7, sp, #0
 800234c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002350:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002354:	6018      	str	r0, [r3, #0]
 8002356:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800235a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800235e:	6019      	str	r1, [r3, #0]
 8002360:	466b      	mov	r3, sp
 8002362:	461e      	mov	r6, r3

	//uint8_t msgLen = strlen(messageBuffer); // Cast to char* to fix warning
	uint8_t msgLen = strlen((const char*)messageBuffer); // Cast to char* to fix warning
 8002364:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002368:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800236c:	6818      	ldr	r0, [r3, #0]
 800236e:	f7fd ff87 	bl	8000280 <strlen>
 8002372:	4603      	mov	r3, r0
 8002374:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

	// Calculate CRC for the original message
	uint32_t crc = Calculate_CRC((uint8_t*) messageBuffer, msgLen); // 0xf65adea6
 8002378:	f897 212f 	ldrb.w	r2, [r7, #303]	@ 0x12f
 800237c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002380:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002384:	4611      	mov	r1, r2
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	f000 fa0c 	bl	80027a4 <Calculate_CRC>
 800238c:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

	// Delay for 200ms (maybe for LoRa to settle, or other reasons)
	HAL_Delay(500);
 8002390:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002394:	f001 fe96 	bl	80040c4 <HAL_Delay>

	// Transmit "CRC: " via CDC
	CDC_Transmit_FS((uint8_t*) "CRC: ", strlen("CRC: "));
 8002398:	2105      	movs	r1, #5
 800239a:	4868      	ldr	r0, [pc, #416]	@ (800253c <sendMessageAndWaitForAck_TX+0x1f8>)
 800239c:	f00b ffe2 	bl	800e364 <CDC_Transmit_FS>

	// Format the CRC as a string
	char crcString[11]; // Enough space for "0xXXXXXXXX" + null terminator

	//snprintf(crcString, sizeof(crcString), "0x%08X\r\n", (unsigned int) crc); // Format CRC as an 8-digit hex number
	snprintf(crcString, sizeof(crcString), "0x%08lX", crc); // Format CRC as an 8-digit hex number
 80023a0:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 80023a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80023a8:	4a65      	ldr	r2, [pc, #404]	@ (8002540 <sendMessageAndWaitForAck_TX+0x1fc>)
 80023aa:	210b      	movs	r1, #11
 80023ac:	f00e f858 	bl	8010460 <sniprintf>

	// Transmit the formatted CRC string via CDC
	CDC_Transmit_FS((uint8_t*) crcString, strlen(crcString));
 80023b0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fd ff63 	bl	8000280 <strlen>
 80023ba:	4603      	mov	r3, r0
 80023bc:	b29a      	uxth	r2, r3
 80023be:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80023c2:	4611      	mov	r1, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f00b ffcd 	bl	800e364 <CDC_Transmit_FS>



	// Buffer to hold the CRC in hexadecimal string format
	//snprintf(crcString, sizeof(crcString), "0x%08X", crc); // Convert CRC to "0xXXXXXXXX"
	snprintf(crcString, sizeof(crcString), "0x%08lX", crc); // Convert CRC to "0xXXXXXXXX"
 80023ca:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 80023ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80023d2:	4a5b      	ldr	r2, [pc, #364]	@ (8002540 <sendMessageAndWaitForAck_TX+0x1fc>)
 80023d4:	210b      	movs	r1, #11
 80023d6:	f00e f843 	bl	8010460 <sniprintf>

//	CDC_Transmit_FS((uint8_t*) "\n", strlen("\n"));

	// Total length of the packet: message + CRC string
	uint8_t packetLen = msgLen + strlen(crcString);
 80023da:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fd ff4e 	bl	8000280 <strlen>
 80023e4:	4603      	mov	r3, r0
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80023ec:	4413      	add	r3, r2
 80023ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
	char packet[packetLen + 1]; // +1 for null terminator
 80023f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80023f6:	1c59      	adds	r1, r3, #1
 80023f8:	1e4b      	subs	r3, r1, #1
 80023fa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80023fe:	460a      	mov	r2, r1
 8002400:	2300      	movs	r3, #0
 8002402:	4690      	mov	r8, r2
 8002404:	4699      	mov	r9, r3
 8002406:	f04f 0200 	mov.w	r2, #0
 800240a:	f04f 0300 	mov.w	r3, #0
 800240e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002412:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002416:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800241a:	460a      	mov	r2, r1
 800241c:	2300      	movs	r3, #0
 800241e:	4614      	mov	r4, r2
 8002420:	461d      	mov	r5, r3
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	f04f 0300 	mov.w	r3, #0
 800242a:	00eb      	lsls	r3, r5, #3
 800242c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002430:	00e2      	lsls	r2, r4, #3
 8002432:	460b      	mov	r3, r1
 8002434:	3307      	adds	r3, #7
 8002436:	08db      	lsrs	r3, r3, #3
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	ebad 0d03 	sub.w	sp, sp, r3
 800243e:	466b      	mov	r3, sp
 8002440:	3300      	adds	r3, #0
 8002442:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	// Copy the message into the packet
	memcpy(packet, messageBuffer, msgLen);
 8002446:	f897 212f 	ldrb.w	r2, [r7, #303]	@ 0x12f
 800244a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800244e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002452:	6819      	ldr	r1, [r3, #0]
 8002454:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8002458:	f00e f9b7 	bl	80107ca <memcpy>
	// Append the CRC string to the packet
	memcpy(packet + msgLen, crcString, strlen(crcString) + 1); // Include null terminator
 800245c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002460:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002464:	18d4      	adds	r4, r2, r3
 8002466:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800246a:	4618      	mov	r0, r3
 800246c:	f7fd ff08 	bl	8000280 <strlen>
 8002470:	4603      	mov	r3, r0
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002478:	4619      	mov	r1, r3
 800247a:	4620      	mov	r0, r4
 800247c:	f00e f9a5 	bl	80107ca <memcpy>
//
//	CDC_Transmit_FS((uint8_t*) packet, packetLen);
//	CDC_Transmit_FS((uint8_t*) "\n", strlen("\n"));

	// Transmit the combined packet via LoRa
	uint8_t result = LoRa_transmit(lora, (uint8_t*) packet, packetLen, 1000);
 8002480:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 8002484:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002488:	f5a3 7096 	sub.w	r0, r3, #300	@ 0x12c
 800248c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002490:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 8002494:	6800      	ldr	r0, [r0, #0]
 8002496:	f7ff fd6f 	bl	8001f78 <LoRa_transmit>
 800249a:	4603      	mov	r3, r0
 800249c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b

	// Check for acknowledgment
	if (result) {
 80024a0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d042      	beq.n	800252e <sendMessageAndWaitForAck_TX+0x1ea>
		bool ackReceived = receive_ack_TX();
 80024a8:	f7ff fed2 	bl	8002250 <receive_ack_TX>
 80024ac:	4603      	mov	r3, r0
 80024ae:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
		char buffer[256];
		sprintf(buffer, "ACK raw value: %s\r\n",
 80024b2:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <sendMessageAndWaitForAck_TX+0x17a>
 80024ba:	4a22      	ldr	r2, [pc, #136]	@ (8002544 <sendMessageAndWaitForAck_TX+0x200>)
 80024bc:	e000      	b.n	80024c0 <sendMessageAndWaitForAck_TX+0x17c>
 80024be:	4a22      	ldr	r2, [pc, #136]	@ (8002548 <sendMessageAndWaitForAck_TX+0x204>)
 80024c0:	f107 030c 	add.w	r3, r7, #12
 80024c4:	4921      	ldr	r1, [pc, #132]	@ (800254c <sendMessageAndWaitForAck_TX+0x208>)
 80024c6:	4618      	mov	r0, r3
 80024c8:	f00e f800 	bl	80104cc <siprintf>
				ackReceived ? "true" : "false");
		CDC_Transmit_FS((uint8_t*) buffer, strlen(buffer));
 80024cc:	f107 030c 	add.w	r3, r7, #12
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fd fed5 	bl	8000280 <strlen>
 80024d6:	4603      	mov	r3, r0
 80024d8:	b29a      	uxth	r2, r3
 80024da:	f107 030c 	add.w	r3, r7, #12
 80024de:	4611      	mov	r1, r2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f00b ff3f 	bl	800e364 <CDC_Transmit_FS>

		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80024e6:	2201      	movs	r2, #1
 80024e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024ec:	4818      	ldr	r0, [pc, #96]	@ (8002550 <sendMessageAndWaitForAck_TX+0x20c>)
 80024ee:	f002 f8c3 	bl	8004678 <HAL_GPIO_WritePin>
		if (ackReceived) {
 80024f2:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d006      	beq.n	8002508 <sendMessageAndWaitForAck_TX+0x1c4>
			sprintf(buffer, "ACK received successfully.\r\n");
 80024fa:	f107 030c 	add.w	r3, r7, #12
 80024fe:	4915      	ldr	r1, [pc, #84]	@ (8002554 <sendMessageAndWaitForAck_TX+0x210>)
 8002500:	4618      	mov	r0, r3
 8002502:	f00d ffe3 	bl	80104cc <siprintf>
 8002506:	e005      	b.n	8002514 <sendMessageAndWaitForAck_TX+0x1d0>

		} else {
			sprintf(buffer, "No ACK received.\r\n");
 8002508:	f107 030c 	add.w	r3, r7, #12
 800250c:	4912      	ldr	r1, [pc, #72]	@ (8002558 <sendMessageAndWaitForAck_TX+0x214>)
 800250e:	4618      	mov	r0, r3
 8002510:	f00d ffdc 	bl	80104cc <siprintf>
		}
		CDC_Transmit_FS((uint8_t*) buffer, strlen(buffer));
 8002514:	f107 030c 	add.w	r3, r7, #12
 8002518:	4618      	mov	r0, r3
 800251a:	f7fd feb1 	bl	8000280 <strlen>
 800251e:	4603      	mov	r3, r0
 8002520:	b29a      	uxth	r2, r3
 8002522:	f107 030c 	add.w	r3, r7, #12
 8002526:	4611      	mov	r1, r2
 8002528:	4618      	mov	r0, r3
 800252a:	f00b ff1b 	bl	800e364 <CDC_Transmit_FS>
 800252e:	46b5      	mov	sp, r6

	}

}
 8002530:	bf00      	nop
 8002532:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8002536:	46bd      	mov	sp, r7
 8002538:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800253c:	08013ea4 	.word	0x08013ea4
 8002540:	08013eac 	.word	0x08013eac
 8002544:	08013eb4 	.word	0x08013eb4
 8002548:	08013ebc 	.word	0x08013ebc
 800254c:	08013ec4 	.word	0x08013ec4
 8002550:	40020800 	.word	0x40020800
 8002554:	08013ed8 	.word	0x08013ed8
 8002558:	08013ef8 	.word	0x08013ef8

0800255c <send_ack_RX>:


void send_ack_RX(bool isAck) {
 800255c:	b580      	push	{r7, lr}
 800255e:	b094      	sub	sp, #80	@ 0x50
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	71fb      	strb	r3, [r7, #7]
	// Debug message via USB
	char ackinfo[64];
	snprintf(ackinfo, sizeof(ackinfo), "ACK_INFO: %s\r\n", isAck ? "true" : "false");
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <send_ack_RX+0x14>
 800256c:	4b11      	ldr	r3, [pc, #68]	@ (80025b4 <send_ack_RX+0x58>)
 800256e:	e000      	b.n	8002572 <send_ack_RX+0x16>
 8002570:	4b11      	ldr	r3, [pc, #68]	@ (80025b8 <send_ack_RX+0x5c>)
 8002572:	f107 0010 	add.w	r0, r7, #16
 8002576:	4a11      	ldr	r2, [pc, #68]	@ (80025bc <send_ack_RX+0x60>)
 8002578:	2140      	movs	r1, #64	@ 0x40
 800257a:	f00d ff71 	bl	8010460 <sniprintf>
	CDC_Transmit_FS((uint8_t*)ackinfo, strlen(ackinfo));
 800257e:	f107 0310 	add.w	r3, r7, #16
 8002582:	4618      	mov	r0, r3
 8002584:	f7fd fe7c 	bl	8000280 <strlen>
 8002588:	4603      	mov	r3, r0
 800258a:	b29a      	uxth	r2, r3
 800258c:	f107 0310 	add.w	r3, r7, #16
 8002590:	4611      	mov	r1, r2
 8002592:	4618      	mov	r0, r3
 8002594:	f00b fee6 	bl	800e364 <CDC_Transmit_FS>

	// Send 1-byte boolean value over LoRa
	uint8_t response = isAck ? 1 : 0;
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	73fb      	strb	r3, [r7, #15]
	LoRa_transmit(&myLoRa, &response, 1, 1000);
 800259c:	f107 010f 	add.w	r1, r7, #15
 80025a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025a4:	2201      	movs	r2, #1
 80025a6:	4806      	ldr	r0, [pc, #24]	@ (80025c0 <send_ack_RX+0x64>)
 80025a8:	f7ff fce6 	bl	8001f78 <LoRa_transmit>
}
 80025ac:	bf00      	nop
 80025ae:	3750      	adds	r7, #80	@ 0x50
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	08013eb4 	.word	0x08013eb4
 80025b8:	08013ebc 	.word	0x08013ebc
 80025bc:	08013f0c 	.word	0x08013f0c
 80025c0:	20000a18 	.word	0x20000a18

080025c4 <receiveAndsendACK_RX>:


uint8_t receiveAndsendACK_RX(LoRa *_LoRa) {
 80025c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025c8:	f2ad 5d34 	subw	sp, sp, #1332	@ 0x534
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 80025d2:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 80025d6:	6018      	str	r0, [r3, #0]

	uint8_t rxSize = LoRa_receive(&myLoRa, loraRxBuffer,sizeof(loraRxBuffer));
 80025d8:	2280      	movs	r2, #128	@ 0x80
 80025da:	496e      	ldr	r1, [pc, #440]	@ (8002794 <receiveAndsendACK_RX+0x1d0>)
 80025dc:	486e      	ldr	r0, [pc, #440]	@ (8002798 <receiveAndsendACK_RX+0x1d4>)
 80025de:	f7ff fd2f 	bl	8002040 <LoRa_receive>
 80025e2:	4603      	mov	r3, r0
 80025e4:	f887 352b 	strb.w	r3, [r7, #1323]	@ 0x52b
	if (rxSize > 0) {
 80025e8:	f897 352b 	ldrb.w	r3, [r7, #1323]	@ 0x52b
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 80c9 	beq.w	8002784 <receiveAndsendACK_RX+0x1c0>
 80025f2:	466b      	mov	r3, sp
 80025f4:	461e      	mov	r6, r3
	uint8_t dataLength = rxSize - 10;
 80025f6:	f897 352b 	ldrb.w	r3, [r7, #1323]	@ 0x52b
 80025fa:	3b0a      	subs	r3, #10
 80025fc:	f887 352a 	strb.w	r3, [r7, #1322]	@ 0x52a
	if (dataLength <= 0) {
 8002600:	f897 352a 	ldrb.w	r3, [r7, #1322]	@ 0x52a
 8002604:	2b00      	cmp	r3, #0
 8002606:	d104      	bne.n	8002612 <receiveAndsendACK_RX+0x4e>
	 send_ack_RX(false);
 8002608:	2000      	movs	r0, #0
 800260a:	f7ff ffa7 	bl	800255c <send_ack_RX>
	  return 0;
 800260e:	2300      	movs	r3, #0
 8002610:	e0b6      	b.n	8002780 <receiveAndsendACK_RX+0x1bc>
	}

	// Extract the main message
	uint8_t mainMessage[dataLength];
 8002612:	f897 152a 	ldrb.w	r1, [r7, #1322]	@ 0x52a
 8002616:	460b      	mov	r3, r1
 8002618:	3b01      	subs	r3, #1
 800261a:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
 800261e:	b2cb      	uxtb	r3, r1
 8002620:	2200      	movs	r2, #0
 8002622:	4698      	mov	r8, r3
 8002624:	4691      	mov	r9, r2
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002632:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002636:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800263a:	b2cb      	uxtb	r3, r1
 800263c:	2200      	movs	r2, #0
 800263e:	461c      	mov	r4, r3
 8002640:	4615      	mov	r5, r2
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	00eb      	lsls	r3, r5, #3
 800264c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002650:	00e2      	lsls	r2, r4, #3
 8002652:	460b      	mov	r3, r1
 8002654:	3307      	adds	r3, #7
 8002656:	08db      	lsrs	r3, r3, #3
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	ebad 0d03 	sub.w	sp, sp, r3
 800265e:	466b      	mov	r3, sp
 8002660:	3300      	adds	r3, #0
 8002662:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    memcpy(mainMessage, loraRxBuffer, dataLength);
 8002666:	f897 352a 	ldrb.w	r3, [r7, #1322]	@ 0x52a
 800266a:	461a      	mov	r2, r3
 800266c:	4949      	ldr	r1, [pc, #292]	@ (8002794 <receiveAndsendACK_RX+0x1d0>)
 800266e:	f8d7 0520 	ldr.w	r0, [r7, #1312]	@ 0x520
 8002672:	f00e f8aa 	bl	80107ca <memcpy>

    // Extract CRC string
    char crcStr[11];
    memcpy(crcStr, &loraRxBuffer[dataLength], 10);
 8002676:	f897 352a 	ldrb.w	r3, [r7, #1322]	@ 0x52a
 800267a:	4a46      	ldr	r2, [pc, #280]	@ (8002794 <receiveAndsendACK_RX+0x1d0>)
 800267c:	1899      	adds	r1, r3, r2
 800267e:	f207 530c 	addw	r3, r7, #1292	@ 0x50c
 8002682:	220a      	movs	r2, #10
 8002684:	4618      	mov	r0, r3
 8002686:	f00e f8a0 	bl	80107ca <memcpy>
	crcStr[10] = '\0';
 800268a:	2300      	movs	r3, #0
 800268c:	f887 3516 	strb.w	r3, [r7, #1302]	@ 0x516

	// Convert CRC string to actual number
	uint32_t receivedCrc = (uint32_t) strtoul(crcStr, NULL, 16);
 8002690:	f207 530c 	addw	r3, r7, #1292	@ 0x50c
 8002694:	2210      	movs	r2, #16
 8002696:	2100      	movs	r1, #0
 8002698:	4618      	mov	r0, r3
 800269a:	f00d f9bf 	bl	800fa1c <strtoul>
 800269e:	f8c7 051c 	str.w	r0, [r7, #1308]	@ 0x51c
	// Calculate expected CRC using only the main message
	uint32_t expectedCrc = Calculate_CRC(mainMessage,dataLength);
 80026a2:	f897 352a 	ldrb.w	r3, [r7, #1322]	@ 0x52a
 80026a6:	4619      	mov	r1, r3
 80026a8:	f8d7 0520 	ldr.w	r0, [r7, #1312]	@ 0x520
 80026ac:	f000 f87a 	bl	80027a4 <Calculate_CRC>
 80026b0:	f8c7 0518 	str.w	r0, [r7, #1304]	@ 0x518

	// Compare CRCs
	if (receivedCrc == expectedCrc) {
 80026b4:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 80026b8:	f8d7 3518 	ldr.w	r3, [r7, #1304]	@ 0x518
 80026bc:	429a      	cmp	r2, r3
 80026be:	d10e      	bne.n	80026de <receiveAndsendACK_RX+0x11a>
	CDC_Transmit_FS((uint8_t*) "matched\r\n",strlen("matched\r\n"));
 80026c0:	2109      	movs	r1, #9
 80026c2:	4836      	ldr	r0, [pc, #216]	@ (800279c <receiveAndsendACK_RX+0x1d8>)
 80026c4:	f00b fe4e 	bl	800e364 <CDC_Transmit_FS>
	HAL_Delay(500);
 80026c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80026cc:	f001 fcfa 	bl	80040c4 <HAL_Delay>
	send_ack_RX(true);
 80026d0:	2001      	movs	r0, #1
 80026d2:	f7ff ff43 	bl	800255c <send_ack_RX>
    return 0;
	}

	// Print the main message
	char tempBuffer[256];
	for (int i = 0; i < dataLength; i++) {
 80026d6:	2300      	movs	r3, #0
 80026d8:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
 80026dc:	e02a      	b.n	8002734 <receiveAndsendACK_RX+0x170>
	send_ack_RX(false);
 80026de:	2000      	movs	r0, #0
 80026e0:	f7ff ff3c 	bl	800255c <send_ack_RX>
    return 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	e04b      	b.n	8002780 <receiveAndsendACK_RX+0x1bc>
        tempBuffer[i] = (mainMessage[i] >= 32 && mainMessage[i] <= 126) ? mainMessage[i] : '.';
 80026e8:	f8d7 2520 	ldr.w	r2, [r7, #1312]	@ 0x520
 80026ec:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 80026f0:	4413      	add	r3, r2
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b1f      	cmp	r3, #31
 80026f6:	d90e      	bls.n	8002716 <receiveAndsendACK_RX+0x152>
 80026f8:	f8d7 2520 	ldr.w	r2, [r7, #1312]	@ 0x520
 80026fc:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 8002700:	4413      	add	r3, r2
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b7e      	cmp	r3, #126	@ 0x7e
 8002706:	d806      	bhi.n	8002716 <receiveAndsendACK_RX+0x152>
 8002708:	f8d7 2520 	ldr.w	r2, [r7, #1312]	@ 0x520
 800270c:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 8002710:	4413      	add	r3, r2
 8002712:	7819      	ldrb	r1, [r3, #0]
 8002714:	e000      	b.n	8002718 <receiveAndsendACK_RX+0x154>
 8002716:	212e      	movs	r1, #46	@ 0x2e
 8002718:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 800271c:	f2a3 5224 	subw	r2, r3, #1316	@ 0x524
 8002720:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 8002724:	4413      	add	r3, r2
 8002726:	460a      	mov	r2, r1
 8002728:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < dataLength; i++) {
 800272a:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 800272e:	3301      	adds	r3, #1
 8002730:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
 8002734:	f897 352a 	ldrb.w	r3, [r7, #1322]	@ 0x52a
 8002738:	f8d7 252c 	ldr.w	r2, [r7, #1324]	@ 0x52c
 800273c:	429a      	cmp	r2, r3
 800273e:	dbd3      	blt.n	80026e8 <receiveAndsendACK_RX+0x124>
	}
        tempBuffer[dataLength] = '\0';
 8002740:	f897 352a 	ldrb.w	r3, [r7, #1322]	@ 0x52a
 8002744:	f507 62a6 	add.w	r2, r7, #1328	@ 0x530
 8002748:	f2a2 5224 	subw	r2, r2, #1316	@ 0x524
 800274c:	2100      	movs	r1, #0
 800274e:	54d1      	strb	r1, [r2, r3]


        char formattedMessage[1024];
        snprintf(formattedMessage, sizeof(formattedMessage), "Received message: %s\r\n", tempBuffer);
 8002750:	f107 030c 	add.w	r3, r7, #12
 8002754:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8002758:	4a11      	ldr	r2, [pc, #68]	@ (80027a0 <receiveAndsendACK_RX+0x1dc>)
 800275a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800275e:	f00d fe7f 	bl	8010460 <sniprintf>
        CDC_Transmit_FS((uint8_t*)formattedMessage, strlen(formattedMessage));
 8002762:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002766:	4618      	mov	r0, r3
 8002768:	f7fd fd8a 	bl	8000280 <strlen>
 800276c:	4603      	mov	r3, r0
 800276e:	b29a      	uxth	r2, r3
 8002770:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002774:	4611      	mov	r1, r2
 8002776:	4618      	mov	r0, r3
 8002778:	f00b fdf4 	bl	800e364 <CDC_Transmit_FS>
 800277c:	46b5      	mov	sp, r6
 800277e:	e001      	b.n	8002784 <receiveAndsendACK_RX+0x1c0>
	  return 0;
 8002780:	46b5      	mov	sp, r6
 8002782:	e000      	b.n	8002786 <receiveAndsendACK_RX+0x1c2>
    }

    return 1;
 8002784:	2301      	movs	r3, #1

}
 8002786:	4618      	mov	r0, r3
 8002788:	f207 5734 	addw	r7, r7, #1332	@ 0x534
 800278c:	46bd      	mov	sp, r7
 800278e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002792:	bf00      	nop
 8002794:	2000048c 	.word	0x2000048c
 8002798:	20000a18 	.word	0x20000a18
 800279c:	08013f1c 	.word	0x08013f1c
 80027a0:	08013f28 	.word	0x08013f28

080027a4 <Calculate_CRC>:

#include "crc_calculator.h"
#include "main.h"


uint32_t Calculate_CRC(const uint8_t *data, uint8_t length) {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b0c6      	sub	sp, #280	@ 0x118
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80027ae:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80027b2:	6018      	str	r0, [r3, #0]
 80027b4:	460a      	mov	r2, r1
 80027b6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80027ba:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 80027be:	701a      	strb	r2, [r3, #0]
    uint32_t crc = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    uint32_t buffer32[(256 + 3) / 4]; // Pre-allocate buffer for max data size
    uint32_t wordCount = (length + 3) / 4;
 80027c6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80027ca:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	3303      	adds	r3, #3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	da00      	bge.n	80027d8 <Calculate_CRC+0x34>
 80027d6:	3303      	adds	r3, #3
 80027d8:	109b      	asrs	r3, r3, #2
 80027da:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    uint8_t i, j;

    // Pack bytes into 32-bit words (little-endian)
    for (i = 0; i < wordCount; i++) {
 80027de:	2300      	movs	r3, #0
 80027e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80027e4:	e044      	b.n	8002870 <Calculate_CRC+0xcc>
        uint32_t word = 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
        for (j = 0; j < 4 && (i * 4 + j) < length; j++) {
 80027ec:	2300      	movs	r3, #0
 80027ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80027f2:	e01d      	b.n	8002830 <Calculate_CRC+0x8c>
            word |= (uint32_t)data[i * 4 + j] << (j * 8);
 80027f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80027f8:	009a      	lsls	r2, r3, #2
 80027fa:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80027fe:	4413      	add	r3, r2
 8002800:	461a      	mov	r2, r3
 8002802:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002806:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4413      	add	r3, r2
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	461a      	mov	r2, r3
 8002812:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
        for (j = 0; j < 4 && (i * 4 + j) < length; j++) {
 8002826:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800282a:	3301      	adds	r3, #1
 800282c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8002830:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8002834:	2b03      	cmp	r3, #3
 8002836:	d80c      	bhi.n	8002852 <Calculate_CRC+0xae>
 8002838:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800283c:	009a      	lsls	r2, r3, #2
 800283e:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8002842:	441a      	add	r2, r3
 8002844:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002848:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	dbd0      	blt.n	80027f4 <Calculate_CRC+0x50>
        }
        buffer32[i] = word;
 8002852:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 8002856:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800285a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800285e:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 8002862:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < wordCount; i++) {
 8002866:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800286a:	3301      	adds	r3, #1
 800286c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8002870:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002874:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8002878:	429a      	cmp	r2, r3
 800287a:	d8b4      	bhi.n	80027e6 <Calculate_CRC+0x42>
    }

    // Compute CRC using HAL function
    crc = HAL_CRC_Calculate(&hcrc, buffer32, wordCount);
 800287c:	f107 0308 	add.w	r3, r7, #8
 8002880:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8002884:	4619      	mov	r1, r3
 8002886:	4806      	ldr	r0, [pc, #24]	@ (80028a0 <Calculate_CRC+0xfc>)
 8002888:	f001 fd3e 	bl	8004308 <HAL_CRC_Calculate>
 800288c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c

    // Apply final XOR
    return crc ^ 0xFFFFFFFF;
 8002890:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002894:	43db      	mvns	r3, r3
}
 8002896:	4618      	mov	r0, r3
 8002898:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20000860 	.word	0x20000860

080028a4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4a07      	ldr	r2, [pc, #28]	@ (80028d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80028b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	4a06      	ldr	r2, [pc, #24]	@ (80028d4 <vApplicationGetIdleTaskMemory+0x30>)
 80028ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2280      	movs	r2, #128	@ 0x80
 80028c0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80028c2:	bf00      	nop
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	2000050c 	.word	0x2000050c
 80028d4:	20000560 	.word	0x20000560

080028d8 <LoRa_Init>:
char buffer[256];

extern SPI_HandleTypeDef hspi1;


void LoRa_Init(void) {
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
    myLoRa.CS_port = GPIOB;
 80028dc:	4b32      	ldr	r3, [pc, #200]	@ (80029a8 <LoRa_Init+0xd0>)
 80028de:	4a33      	ldr	r2, [pc, #204]	@ (80029ac <LoRa_Init+0xd4>)
 80028e0:	601a      	str	r2, [r3, #0]
    myLoRa.CS_pin = GPIO_PIN_0;
 80028e2:	4b31      	ldr	r3, [pc, #196]	@ (80029a8 <LoRa_Init+0xd0>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	809a      	strh	r2, [r3, #4]
    myLoRa.reset_port = GPIOB;
 80028e8:	4b2f      	ldr	r3, [pc, #188]	@ (80029a8 <LoRa_Init+0xd0>)
 80028ea:	4a30      	ldr	r2, [pc, #192]	@ (80029ac <LoRa_Init+0xd4>)
 80028ec:	609a      	str	r2, [r3, #8]
    myLoRa.reset_pin = GPIO_PIN_1;
 80028ee:	4b2e      	ldr	r3, [pc, #184]	@ (80029a8 <LoRa_Init+0xd0>)
 80028f0:	2202      	movs	r2, #2
 80028f2:	819a      	strh	r2, [r3, #12]
    myLoRa.DIO0_port = GPIOB;
 80028f4:	4b2c      	ldr	r3, [pc, #176]	@ (80029a8 <LoRa_Init+0xd0>)
 80028f6:	4a2d      	ldr	r2, [pc, #180]	@ (80029ac <LoRa_Init+0xd4>)
 80028f8:	611a      	str	r2, [r3, #16]
    myLoRa.DIO0_pin = GPIO_PIN_2;
 80028fa:	4b2b      	ldr	r3, [pc, #172]	@ (80029a8 <LoRa_Init+0xd0>)
 80028fc:	2204      	movs	r2, #4
 80028fe:	829a      	strh	r2, [r3, #20]
    myLoRa.hSPIx = &hspi1; // Use the external hspi1
 8002900:	4b29      	ldr	r3, [pc, #164]	@ (80029a8 <LoRa_Init+0xd0>)
 8002902:	4a2b      	ldr	r2, [pc, #172]	@ (80029b0 <LoRa_Init+0xd8>)
 8002904:	619a      	str	r2, [r3, #24]

    myLoRa.frequency = 433;
 8002906:	4b28      	ldr	r3, [pc, #160]	@ (80029a8 <LoRa_Init+0xd0>)
 8002908:	f240 12b1 	movw	r2, #433	@ 0x1b1
 800290c:	621a      	str	r2, [r3, #32]
    myLoRa.spredingFactor = SF_7;
 800290e:	4b26      	ldr	r3, [pc, #152]	@ (80029a8 <LoRa_Init+0xd0>)
 8002910:	2207      	movs	r2, #7
 8002912:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    myLoRa.bandWidth = BW_125KHz;
 8002916:	4b24      	ldr	r3, [pc, #144]	@ (80029a8 <LoRa_Init+0xd0>)
 8002918:	2207      	movs	r2, #7
 800291a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    myLoRa.crcRate = CR_4_5;
 800291e:	4b22      	ldr	r3, [pc, #136]	@ (80029a8 <LoRa_Init+0xd0>)
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    myLoRa.power = POWER_20db;
 8002926:	4b20      	ldr	r3, [pc, #128]	@ (80029a8 <LoRa_Init+0xd0>)
 8002928:	22ff      	movs	r2, #255	@ 0xff
 800292a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    myLoRa.overCurrentProtection = 130;
 800292e:	4b1e      	ldr	r3, [pc, #120]	@ (80029a8 <LoRa_Init+0xd0>)
 8002930:	2282      	movs	r2, #130	@ 0x82
 8002932:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    myLoRa.preamble = 8;
 8002936:	4b1c      	ldr	r3, [pc, #112]	@ (80029a8 <LoRa_Init+0xd0>)
 8002938:	2208      	movs	r2, #8
 800293a:	851a      	strh	r2, [r3, #40]	@ 0x28

    // Initialize LoRa
     if (LoRa_init(&myLoRa) != LORA_OK) {
 800293c:	481a      	ldr	r0, [pc, #104]	@ (80029a8 <LoRa_Init+0xd0>)
 800293e:	f7ff fbdf 	bl	8002100 <LoRa_init>
 8002942:	4603      	mov	r3, r0
 8002944:	2bc8      	cmp	r3, #200	@ 0xc8
 8002946:	d00e      	beq.n	8002966 <LoRa_Init+0x8e>
       sprintf(buffer, "LoRa Init Failed\r\n");
 8002948:	491a      	ldr	r1, [pc, #104]	@ (80029b4 <LoRa_Init+0xdc>)
 800294a:	481b      	ldr	r0, [pc, #108]	@ (80029b8 <LoRa_Init+0xe0>)
 800294c:	f00d fdbe 	bl	80104cc <siprintf>
       CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 8002950:	4819      	ldr	r0, [pc, #100]	@ (80029b8 <LoRa_Init+0xe0>)
 8002952:	f7fd fc95 	bl	8000280 <strlen>
 8002956:	4603      	mov	r3, r0
 8002958:	b29b      	uxth	r3, r3
 800295a:	4619      	mov	r1, r3
 800295c:	4816      	ldr	r0, [pc, #88]	@ (80029b8 <LoRa_Init+0xe0>)
 800295e:	f00b fd01 	bl	800e364 <CDC_Transmit_FS>
       while (1);
 8002962:	bf00      	nop
 8002964:	e7fd      	b.n	8002962 <LoRa_Init+0x8a>
     }
     // Send initialization message
     sprintf(buffer, "LoRa Transmitter & Receiver initialized\r\n");
 8002966:	4915      	ldr	r1, [pc, #84]	@ (80029bc <LoRa_Init+0xe4>)
 8002968:	4813      	ldr	r0, [pc, #76]	@ (80029b8 <LoRa_Init+0xe0>)
 800296a:	f00d fdaf 	bl	80104cc <siprintf>
     CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 800296e:	4812      	ldr	r0, [pc, #72]	@ (80029b8 <LoRa_Init+0xe0>)
 8002970:	f7fd fc86 	bl	8000280 <strlen>
 8002974:	4603      	mov	r3, r0
 8002976:	b29b      	uxth	r3, r3
 8002978:	4619      	mov	r1, r3
 800297a:	480f      	ldr	r0, [pc, #60]	@ (80029b8 <LoRa_Init+0xe0>)
 800297c:	f00b fcf2 	bl	800e364 <CDC_Transmit_FS>
 	HAL_Delay(3000);
 8002980:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002984:	f001 fb9e 	bl	80040c4 <HAL_Delay>
     sprintf(buffer, "CarSYNC_2\r\n");
 8002988:	490d      	ldr	r1, [pc, #52]	@ (80029c0 <LoRa_Init+0xe8>)
 800298a:	480b      	ldr	r0, [pc, #44]	@ (80029b8 <LoRa_Init+0xe0>)
 800298c:	f00d fd9e 	bl	80104cc <siprintf>
     CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 8002990:	4809      	ldr	r0, [pc, #36]	@ (80029b8 <LoRa_Init+0xe0>)
 8002992:	f7fd fc75 	bl	8000280 <strlen>
 8002996:	4603      	mov	r3, r0
 8002998:	b29b      	uxth	r3, r3
 800299a:	4619      	mov	r1, r3
 800299c:	4806      	ldr	r0, [pc, #24]	@ (80029b8 <LoRa_Init+0xe0>)
 800299e:	f00b fce1 	bl	800e364 <CDC_Transmit_FS>


}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000a18 	.word	0x20000a18
 80029ac:	40020400 	.word	0x40020400
 80029b0:	200008bc 	.word	0x200008bc
 80029b4:	08013f40 	.word	0x08013f40
 80029b8:	20000760 	.word	0x20000760
 80029bc:	08013f54 	.word	0x08013f54
 80029c0:	08013f80 	.word	0x08013f80

080029c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029c4:	b5b0      	push	{r4, r5, r7, lr}
 80029c6:	b0b2      	sub	sp, #200	@ 0xc8
 80029c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029ca:	f001 fb39 	bl	8004040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029ce:	f000 f8c3 	bl	8002b58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029d2:	f000 f9fb 	bl	8002dcc <MX_GPIO_Init>
  MX_CRC_Init();
 80029d6:	f000 f92b 	bl	8002c30 <MX_CRC_Init>
  MX_I2C1_Init();
 80029da:	f000 f93d 	bl	8002c58 <MX_I2C1_Init>
  MX_SPI1_Init();
 80029de:	f000 f969 	bl	8002cb4 <MX_SPI1_Init>
  MX_USART2_Init();
 80029e2:	f000 f9c7 	bl	8002d74 <MX_USART2_Init>
  MX_USART1_UART_Init();
 80029e6:	f000 f99b 	bl	8002d20 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize sensors and modules
    MPU6050_Init(&hi2c1);
 80029ea:	484a      	ldr	r0, [pc, #296]	@ (8002b14 <main+0x150>)
 80029ec:	f000 fbaa 	bl	8003144 <MPU6050_Init>
    SIM868_Init(&huart1);
 80029f0:	4849      	ldr	r0, [pc, #292]	@ (8002b18 <main+0x154>)
 80029f2:	f7fe fb51 	bl	8001098 <SIM868_Init>
    LoRa_Init();
 80029f6:	f7ff ff6f 	bl	80028d8 <LoRa_Init>

	 // Start LoRa receiving
	  LoRa_startReceiving(&myLoRa);
 80029fa:	4848      	ldr	r0, [pc, #288]	@ (8002b1c <main+0x158>)
 80029fc:	f7ff fb14 	bl	8002028 <LoRa_startReceiving>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of MPU6050Task */
  osThreadDef(MPU6050Task, MPU6050_Task, osPriorityRealtime, 0, 128);
 8002a00:	4b47      	ldr	r3, [pc, #284]	@ (8002b20 <main+0x15c>)
 8002a02:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 8002a06:	461d      	mov	r5, r3
 8002a08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MPU6050TaskHandle = osThreadCreate(osThread(MPU6050Task), NULL);
 8002a14:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002a18:	2100      	movs	r1, #0
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f00a f884 	bl	800cb28 <osThreadCreate>
 8002a20:	4603      	mov	r3, r0
 8002a22:	4a40      	ldr	r2, [pc, #256]	@ (8002b24 <main+0x160>)
 8002a24:	6013      	str	r3, [r2, #0]

  /* definition and creation of DecodeTask */
  osThreadDef(DecodeTask, Decode_Task, osPriorityHigh, 0, 128);
 8002a26:	4b40      	ldr	r3, [pc, #256]	@ (8002b28 <main+0x164>)
 8002a28:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 8002a2c:	461d      	mov	r5, r3
 8002a2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a32:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DecodeTaskHandle = osThreadCreate(osThread(DecodeTask), NULL);
 8002a3a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8002a3e:	2100      	movs	r1, #0
 8002a40:	4618      	mov	r0, r3
 8002a42:	f00a f871 	bl	800cb28 <osThreadCreate>
 8002a46:	4603      	mov	r3, r0
 8002a48:	4a38      	ldr	r2, [pc, #224]	@ (8002b2c <main+0x168>)
 8002a4a:	6013      	str	r3, [r2, #0]

  /* definition and creation of MQTTPublishTask */
  osThreadDef(MQTTPublishTask, MQTT_Publish_Task, osPriorityAboveNormal, 0, 128);
 8002a4c:	4b38      	ldr	r3, [pc, #224]	@ (8002b30 <main+0x16c>)
 8002a4e:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8002a52:	461d      	mov	r5, r3
 8002a54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MQTTPublishTaskHandle = osThreadCreate(osThread(MQTTPublishTask), NULL);
 8002a60:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002a64:	2100      	movs	r1, #0
 8002a66:	4618      	mov	r0, r3
 8002a68:	f00a f85e 	bl	800cb28 <osThreadCreate>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	4a31      	ldr	r2, [pc, #196]	@ (8002b34 <main+0x170>)
 8002a70:	6013      	str	r3, [r2, #0]

  /* definition and creation of GPSTask */
  osThreadDef(GPSTask, GPS_Task, osPriorityAboveNormal, 0, 128);
 8002a72:	4b31      	ldr	r3, [pc, #196]	@ (8002b38 <main+0x174>)
 8002a74:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8002a78:	461d      	mov	r5, r3
 8002a7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GPSTaskHandle = osThreadCreate(osThread(GPSTask), NULL);
 8002a86:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f00a f84b 	bl	800cb28 <osThreadCreate>
 8002a92:	4603      	mov	r3, r0
 8002a94:	4a29      	ldr	r2, [pc, #164]	@ (8002b3c <main+0x178>)
 8002a96:	6013      	str	r3, [r2, #0]

  /* definition and creation of SignalDetection */
  osThreadDef(SignalDetection, Signal_Detection, osPriorityAboveNormal, 0, 128);
 8002a98:	4b29      	ldr	r3, [pc, #164]	@ (8002b40 <main+0x17c>)
 8002a9a:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8002a9e:	461d      	mov	r5, r3
 8002aa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002aa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002aa4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002aa8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SignalDetectionHandle = osThreadCreate(osThread(SignalDetection), NULL);
 8002aac:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f00a f838 	bl	800cb28 <osThreadCreate>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4a22      	ldr	r2, [pc, #136]	@ (8002b44 <main+0x180>)
 8002abc:	6013      	str	r3, [r2, #0]

  /* definition and creation of SenderTask */
  osThreadDef(SenderTask, Sender_Task, osPriorityNormal, 0, 128);
 8002abe:	4b22      	ldr	r3, [pc, #136]	@ (8002b48 <main+0x184>)
 8002ac0:	f107 0420 	add.w	r4, r7, #32
 8002ac4:	461d      	mov	r5, r3
 8002ac6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ac8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002aca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002ace:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SenderTaskHandle = osThreadCreate(osThread(SenderTask), NULL);
 8002ad2:	f107 0320 	add.w	r3, r7, #32
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f00a f825 	bl	800cb28 <osThreadCreate>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	4a1a      	ldr	r2, [pc, #104]	@ (8002b4c <main+0x188>)
 8002ae2:	6013      	str	r3, [r2, #0]

  /* definition and creation of LoRaReceiveTask */
  osThreadDef(LoRaReceiveTask, LoRa_Receive_Task, osPriorityBelowNormal, 0, 128);
 8002ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8002b50 <main+0x18c>)
 8002ae6:	1d3c      	adds	r4, r7, #4
 8002ae8:	461d      	mov	r5, r3
 8002aea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002aec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002aee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002af2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LoRaReceiveTaskHandle = osThreadCreate(osThread(LoRaReceiveTask), NULL);
 8002af6:	1d3b      	adds	r3, r7, #4
 8002af8:	2100      	movs	r1, #0
 8002afa:	4618      	mov	r0, r3
 8002afc:	f00a f814 	bl	800cb28 <osThreadCreate>
 8002b00:	4603      	mov	r3, r0
 8002b02:	4a14      	ldr	r2, [pc, #80]	@ (8002b54 <main+0x190>)
 8002b04:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002b06:	f00a f808 	bl	800cb1a <osKernelStart>
//	 }
//		if (receivedFlag)
//		{
//		 receivedFlag = 0;
//		 receiveAndsendACK_RX(&myLoRa);
	    vTaskDelay(pdMS_TO_TICKS(10));
 8002b0a:	200a      	movs	r0, #10
 8002b0c:	f00a fab8 	bl	800d080 <vTaskDelay>
 8002b10:	e7fb      	b.n	8002b0a <main+0x146>
 8002b12:	bf00      	nop
 8002b14:	20000868 	.word	0x20000868
 8002b18:	20000914 	.word	0x20000914
 8002b1c:	20000a18 	.word	0x20000a18
 8002b20:	08013f98 	.word	0x08013f98
 8002b24:	200009a0 	.word	0x200009a0
 8002b28:	08013fc0 	.word	0x08013fc0
 8002b2c:	200009a4 	.word	0x200009a4
 8002b30:	08013fec 	.word	0x08013fec
 8002b34:	200009a8 	.word	0x200009a8
 8002b38:	08014010 	.word	0x08014010
 8002b3c:	200009ac 	.word	0x200009ac
 8002b40:	0801403c 	.word	0x0801403c
 8002b44:	200009b0 	.word	0x200009b0
 8002b48:	08014064 	.word	0x08014064
 8002b4c:	200009b4 	.word	0x200009b4
 8002b50:	08014090 	.word	0x08014090
 8002b54:	200009b8 	.word	0x200009b8

08002b58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b094      	sub	sp, #80	@ 0x50
 8002b5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b5e:	f107 0320 	add.w	r3, r7, #32
 8002b62:	2230      	movs	r2, #48	@ 0x30
 8002b64:	2100      	movs	r1, #0
 8002b66:	4618      	mov	r0, r3
 8002b68:	f00d fd15 	bl	8010596 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b6c:	f107 030c 	add.w	r3, r7, #12
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	60da      	str	r2, [r3, #12]
 8002b7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60bb      	str	r3, [r7, #8]
 8002b80:	4b29      	ldr	r3, [pc, #164]	@ (8002c28 <SystemClock_Config+0xd0>)
 8002b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b84:	4a28      	ldr	r2, [pc, #160]	@ (8002c28 <SystemClock_Config+0xd0>)
 8002b86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b8c:	4b26      	ldr	r3, [pc, #152]	@ (8002c28 <SystemClock_Config+0xd0>)
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b94:	60bb      	str	r3, [r7, #8]
 8002b96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b98:	2300      	movs	r3, #0
 8002b9a:	607b      	str	r3, [r7, #4]
 8002b9c:	4b23      	ldr	r3, [pc, #140]	@ (8002c2c <SystemClock_Config+0xd4>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002ba4:	4a21      	ldr	r2, [pc, #132]	@ (8002c2c <SystemClock_Config+0xd4>)
 8002ba6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	4b1f      	ldr	r3, [pc, #124]	@ (8002c2c <SystemClock_Config+0xd4>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002bb4:	607b      	str	r3, [r7, #4]
 8002bb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bbc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bc6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002bcc:	2319      	movs	r3, #25
 8002bce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002bd0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002bd4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002bd6:	2304      	movs	r3, #4
 8002bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002bda:	2307      	movs	r3, #7
 8002bdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bde:	f107 0320 	add.w	r3, r7, #32
 8002be2:	4618      	mov	r0, r3
 8002be4:	f003 fff0 	bl	8006bc8 <HAL_RCC_OscConfig>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002bee:	f000 faa3 	bl	8003138 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bf2:	230f      	movs	r3, #15
 8002bf4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002bfe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c04:	2300      	movs	r3, #0
 8002c06:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c08:	f107 030c 	add.w	r3, r7, #12
 8002c0c:	2102      	movs	r1, #2
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f004 fa52 	bl	80070b8 <HAL_RCC_ClockConfig>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002c1a:	f000 fa8d 	bl	8003138 <Error_Handler>
  }
}
 8002c1e:	bf00      	nop
 8002c20:	3750      	adds	r7, #80	@ 0x50
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	40007000 	.word	0x40007000

08002c30 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002c34:	4b06      	ldr	r3, [pc, #24]	@ (8002c50 <MX_CRC_Init+0x20>)
 8002c36:	4a07      	ldr	r2, [pc, #28]	@ (8002c54 <MX_CRC_Init+0x24>)
 8002c38:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002c3a:	4805      	ldr	r0, [pc, #20]	@ (8002c50 <MX_CRC_Init+0x20>)
 8002c3c:	f001 fb48 	bl	80042d0 <HAL_CRC_Init>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002c46:	f000 fa77 	bl	8003138 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20000860 	.word	0x20000860
 8002c54:	40023000 	.word	0x40023000

08002c58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c5c:	4b12      	ldr	r3, [pc, #72]	@ (8002ca8 <MX_I2C1_Init+0x50>)
 8002c5e:	4a13      	ldr	r2, [pc, #76]	@ (8002cac <MX_I2C1_Init+0x54>)
 8002c60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002c62:	4b11      	ldr	r3, [pc, #68]	@ (8002ca8 <MX_I2C1_Init+0x50>)
 8002c64:	4a12      	ldr	r2, [pc, #72]	@ (8002cb0 <MX_I2C1_Init+0x58>)
 8002c66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c68:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca8 <MX_I2C1_Init+0x50>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca8 <MX_I2C1_Init+0x50>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c74:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca8 <MX_I2C1_Init+0x50>)
 8002c76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca8 <MX_I2C1_Init+0x50>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002c82:	4b09      	ldr	r3, [pc, #36]	@ (8002ca8 <MX_I2C1_Init+0x50>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c88:	4b07      	ldr	r3, [pc, #28]	@ (8002ca8 <MX_I2C1_Init+0x50>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ca8 <MX_I2C1_Init+0x50>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c94:	4804      	ldr	r0, [pc, #16]	@ (8002ca8 <MX_I2C1_Init+0x50>)
 8002c96:	f001 fd21 	bl	80046dc <HAL_I2C_Init>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002ca0:	f000 fa4a 	bl	8003138 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ca4:	bf00      	nop
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	20000868 	.word	0x20000868
 8002cac:	40005400 	.word	0x40005400
 8002cb0:	000186a0 	.word	0x000186a0

08002cb4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002cb8:	4b17      	ldr	r3, [pc, #92]	@ (8002d18 <MX_SPI1_Init+0x64>)
 8002cba:	4a18      	ldr	r2, [pc, #96]	@ (8002d1c <MX_SPI1_Init+0x68>)
 8002cbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002cbe:	4b16      	ldr	r3, [pc, #88]	@ (8002d18 <MX_SPI1_Init+0x64>)
 8002cc0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002cc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002cc6:	4b14      	ldr	r3, [pc, #80]	@ (8002d18 <MX_SPI1_Init+0x64>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ccc:	4b12      	ldr	r3, [pc, #72]	@ (8002d18 <MX_SPI1_Init+0x64>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cd2:	4b11      	ldr	r3, [pc, #68]	@ (8002d18 <MX_SPI1_Init+0x64>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8002d18 <MX_SPI1_Init+0x64>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cde:	4b0e      	ldr	r3, [pc, #56]	@ (8002d18 <MX_SPI1_Init+0x64>)
 8002ce0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ce4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8002d18 <MX_SPI1_Init+0x64>)
 8002ce8:	2218      	movs	r2, #24
 8002cea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cec:	4b0a      	ldr	r3, [pc, #40]	@ (8002d18 <MX_SPI1_Init+0x64>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cf2:	4b09      	ldr	r3, [pc, #36]	@ (8002d18 <MX_SPI1_Init+0x64>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cf8:	4b07      	ldr	r3, [pc, #28]	@ (8002d18 <MX_SPI1_Init+0x64>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002cfe:	4b06      	ldr	r3, [pc, #24]	@ (8002d18 <MX_SPI1_Init+0x64>)
 8002d00:	220a      	movs	r2, #10
 8002d02:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d04:	4804      	ldr	r0, [pc, #16]	@ (8002d18 <MX_SPI1_Init+0x64>)
 8002d06:	f004 fbe9 	bl	80074dc <HAL_SPI_Init>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002d10:	f000 fa12 	bl	8003138 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d14:	bf00      	nop
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	200008bc 	.word	0x200008bc
 8002d1c:	40013000 	.word	0x40013000

08002d20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d24:	4b11      	ldr	r3, [pc, #68]	@ (8002d6c <MX_USART1_UART_Init+0x4c>)
 8002d26:	4a12      	ldr	r2, [pc, #72]	@ (8002d70 <MX_USART1_UART_Init+0x50>)
 8002d28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d2a:	4b10      	ldr	r3, [pc, #64]	@ (8002d6c <MX_USART1_UART_Init+0x4c>)
 8002d2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d32:	4b0e      	ldr	r3, [pc, #56]	@ (8002d6c <MX_USART1_UART_Init+0x4c>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d38:	4b0c      	ldr	r3, [pc, #48]	@ (8002d6c <MX_USART1_UART_Init+0x4c>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d6c <MX_USART1_UART_Init+0x4c>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d44:	4b09      	ldr	r3, [pc, #36]	@ (8002d6c <MX_USART1_UART_Init+0x4c>)
 8002d46:	220c      	movs	r2, #12
 8002d48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d4a:	4b08      	ldr	r3, [pc, #32]	@ (8002d6c <MX_USART1_UART_Init+0x4c>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d50:	4b06      	ldr	r3, [pc, #24]	@ (8002d6c <MX_USART1_UART_Init+0x4c>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d56:	4805      	ldr	r0, [pc, #20]	@ (8002d6c <MX_USART1_UART_Init+0x4c>)
 8002d58:	f005 fc0e 	bl	8008578 <HAL_UART_Init>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002d62:	f000 f9e9 	bl	8003138 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20000914 	.word	0x20000914
 8002d70:	40011000 	.word	0x40011000

08002d74 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8002d78:	4b12      	ldr	r3, [pc, #72]	@ (8002dc4 <MX_USART2_Init+0x50>)
 8002d7a:	4a13      	ldr	r2, [pc, #76]	@ (8002dc8 <MX_USART2_Init+0x54>)
 8002d7c:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8002d7e:	4b11      	ldr	r3, [pc, #68]	@ (8002dc4 <MX_USART2_Init+0x50>)
 8002d80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d84:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8002d86:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc4 <MX_USART2_Init+0x50>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8002d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc4 <MX_USART2_Init+0x50>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8002d92:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc4 <MX_USART2_Init+0x50>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8002d98:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc4 <MX_USART2_Init+0x50>)
 8002d9a:	220c      	movs	r2, #12
 8002d9c:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8002d9e:	4b09      	ldr	r3, [pc, #36]	@ (8002dc4 <MX_USART2_Init+0x50>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8002da4:	4b07      	ldr	r3, [pc, #28]	@ (8002dc4 <MX_USART2_Init+0x50>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8002daa:	4b06      	ldr	r3, [pc, #24]	@ (8002dc4 <MX_USART2_Init+0x50>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8002db0:	4804      	ldr	r0, [pc, #16]	@ (8002dc4 <MX_USART2_Init+0x50>)
 8002db2:	f006 f883 	bl	8008ebc <HAL_USART_Init>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8002dbc:	f000 f9bc 	bl	8003138 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002dc0:	bf00      	nop
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	2000095c 	.word	0x2000095c
 8002dc8:	40004400 	.word	0x40004400

08002dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08a      	sub	sp, #40	@ 0x28
 8002dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd2:	f107 0314 	add.w	r3, r7, #20
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	605a      	str	r2, [r3, #4]
 8002ddc:	609a      	str	r2, [r3, #8]
 8002dde:	60da      	str	r2, [r3, #12]
 8002de0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002de2:	2300      	movs	r3, #0
 8002de4:	613b      	str	r3, [r7, #16]
 8002de6:	4b46      	ldr	r3, [pc, #280]	@ (8002f00 <MX_GPIO_Init+0x134>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dea:	4a45      	ldr	r2, [pc, #276]	@ (8002f00 <MX_GPIO_Init+0x134>)
 8002dec:	f043 0304 	orr.w	r3, r3, #4
 8002df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002df2:	4b43      	ldr	r3, [pc, #268]	@ (8002f00 <MX_GPIO_Init+0x134>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	613b      	str	r3, [r7, #16]
 8002dfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	4b3f      	ldr	r3, [pc, #252]	@ (8002f00 <MX_GPIO_Init+0x134>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e06:	4a3e      	ldr	r2, [pc, #248]	@ (8002f00 <MX_GPIO_Init+0x134>)
 8002e08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e0e:	4b3c      	ldr	r3, [pc, #240]	@ (8002f00 <MX_GPIO_Init+0x134>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	4b38      	ldr	r3, [pc, #224]	@ (8002f00 <MX_GPIO_Init+0x134>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e22:	4a37      	ldr	r2, [pc, #220]	@ (8002f00 <MX_GPIO_Init+0x134>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e2a:	4b35      	ldr	r3, [pc, #212]	@ (8002f00 <MX_GPIO_Init+0x134>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	607b      	str	r3, [r7, #4]
 8002e3a:	4b31      	ldr	r3, [pc, #196]	@ (8002f00 <MX_GPIO_Init+0x134>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3e:	4a30      	ldr	r2, [pc, #192]	@ (8002f00 <MX_GPIO_Init+0x134>)
 8002e40:	f043 0302 	orr.w	r3, r3, #2
 8002e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e46:	4b2e      	ldr	r3, [pc, #184]	@ (8002f00 <MX_GPIO_Init+0x134>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	607b      	str	r3, [r7, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002e52:	2201      	movs	r2, #1
 8002e54:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002e58:	482a      	ldr	r0, [pc, #168]	@ (8002f04 <MX_GPIO_Init+0x138>)
 8002e5a:	f001 fc0d 	bl	8004678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RESET_Pin, GPIO_PIN_SET);
 8002e5e:	2201      	movs	r2, #1
 8002e60:	2103      	movs	r1, #3
 8002e62:	4829      	ldr	r0, [pc, #164]	@ (8002f08 <MX_GPIO_Init+0x13c>)
 8002e64:	f001 fc08 	bl	8004678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e6e:	4827      	ldr	r0, [pc, #156]	@ (8002f0c <MX_GPIO_Init+0x140>)
 8002e70:	f001 fc02 	bl	8004678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002e74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e82:	2300      	movs	r3, #0
 8002e84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002e86:	f107 0314 	add.w	r3, r7, #20
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	481d      	ldr	r0, [pc, #116]	@ (8002f04 <MX_GPIO_Init+0x138>)
 8002e8e:	f001 fa6f 	bl	8004370 <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_Pin RESET_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|RESET_Pin;
 8002e92:	2303      	movs	r3, #3
 8002e94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e96:	2301      	movs	r3, #1
 8002e98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea2:	f107 0314 	add.w	r3, r7, #20
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4817      	ldr	r0, [pc, #92]	@ (8002f08 <MX_GPIO_Init+0x13c>)
 8002eaa:	f001 fa61 	bl	8004370 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8002eae:	2304      	movs	r3, #4
 8002eb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002eb2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002eb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8002ebc:	f107 0314 	add.w	r3, r7, #20
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4811      	ldr	r0, [pc, #68]	@ (8002f08 <MX_GPIO_Init+0x13c>)
 8002ec4:	f001 fa54 	bl	8004370 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8002ec8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ecc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8002eda:	f107 0314 	add.w	r3, r7, #20
 8002ede:	4619      	mov	r1, r3
 8002ee0:	480a      	ldr	r0, [pc, #40]	@ (8002f0c <MX_GPIO_Init+0x140>)
 8002ee2:	f001 fa45 	bl	8004370 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2105      	movs	r1, #5
 8002eea:	2008      	movs	r0, #8
 8002eec:	f001 f9c6 	bl	800427c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002ef0:	2008      	movs	r0, #8
 8002ef2:	f001 f9df 	bl	80042b4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002ef6:	bf00      	nop
 8002ef8:	3728      	adds	r7, #40	@ 0x28
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40023800 	.word	0x40023800
 8002f04:	40020800 	.word	0x40020800
 8002f08:	40020400 	.word	0x40020400
 8002f0c:	40020000 	.word	0x40020000

08002f10 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == myLoRa.DIO0_pin) {
 8002f1a:	4b07      	ldr	r3, [pc, #28]	@ (8002f38 <HAL_GPIO_EXTI_Callback+0x28>)
 8002f1c:	8a9b      	ldrh	r3, [r3, #20]
 8002f1e:	88fa      	ldrh	r2, [r7, #6]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d102      	bne.n	8002f2a <HAL_GPIO_EXTI_Callback+0x1a>
		// This indicates a packet has been received
		// We'll handle it in the main loop
		receivedFlag = 1;
 8002f24:	4b05      	ldr	r3, [pc, #20]	@ (8002f3c <HAL_GPIO_EXTI_Callback+0x2c>)
 8002f26:	2201      	movs	r2, #1
 8002f28:	701a      	strb	r2, [r3, #0]
	}
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	20000a18 	.word	0x20000a18
 8002f3c:	20000a44 	.word	0x20000a44

08002f40 <MPU6050_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_MPU6050_Task */
void MPU6050_Task(void const * argument)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002f48:	f00b f94e 	bl	800e1e8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  MPU6050_Data(&hi2c1, &MPU6050);
 8002f4c:	4904      	ldr	r1, [pc, #16]	@ (8002f60 <MPU6050_Task+0x20>)
 8002f4e:	4805      	ldr	r0, [pc, #20]	@ (8002f64 <MPU6050_Task+0x24>)
 8002f50:	f000 fcc2 	bl	80038d8 <MPU6050_Data>
	  vTaskDelay(pdMS_TO_TICKS(500)); // Use FreeRTOS delay
 8002f54:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002f58:	f00a f892 	bl	800d080 <vTaskDelay>
	  MPU6050_Data(&hi2c1, &MPU6050);
 8002f5c:	bf00      	nop
 8002f5e:	e7f5      	b.n	8002f4c <MPU6050_Task+0xc>
 8002f60:	200009c0 	.word	0x200009c0
 8002f64:	20000868 	.word	0x20000868

08002f68 <Decode_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Decode_Task */
void Decode_Task(void const * argument)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Decode_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002f70:	2001      	movs	r0, #1
 8002f72:	f009 fe25 	bl	800cbc0 <osDelay>
 8002f76:	e7fb      	b.n	8002f70 <Decode_Task+0x8>

08002f78 <MQTT_Publish_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MQTT_Publish_Task */
void MQTT_Publish_Task(void const * argument)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MQTT_Publish_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002f80:	2001      	movs	r0, #1
 8002f82:	f009 fe1d 	bl	800cbc0 <osDelay>
 8002f86:	e7fb      	b.n	8002f80 <MQTT_Publish_Task+0x8>

08002f88 <GPS_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GPS_Task */
void GPS_Task(void const * argument)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b0a4      	sub	sp, #144	@ 0x90
 8002f8c:	af02      	add	r7, sp, #8
 8002f8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPS_Task */
  /* Infinite loop */
  for(;;)
  {
	  if (SIM868_GetGPSLocation(&huart1, &lastKnownLocation) == SIM868_SUCCESS) {
 8002f90:	4910      	ldr	r1, [pc, #64]	@ (8002fd4 <GPS_Task+0x4c>)
 8002f92:	4811      	ldr	r0, [pc, #68]	@ (8002fd8 <GPS_Task+0x50>)
 8002f94:	f7fe fa2e 	bl	80013f4 <SIM868_GetGPSLocation>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d115      	bne.n	8002fca <GPS_Task+0x42>
	       char buffer[128];
	       snprintf(buffer, sizeof(buffer), "GPS: %s, %s\r\n", lastKnownLocation.lat_str, lastKnownLocation.lon_str);
 8002f9e:	f107 0008 	add.w	r0, r7, #8
 8002fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8002fdc <GPS_Task+0x54>)
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe0 <GPS_Task+0x58>)
 8002fa8:	4a0e      	ldr	r2, [pc, #56]	@ (8002fe4 <GPS_Task+0x5c>)
 8002faa:	2180      	movs	r1, #128	@ 0x80
 8002fac:	f00d fa58 	bl	8010460 <sniprintf>
	       CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 8002fb0:	f107 0308 	add.w	r3, r7, #8
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fd f963 	bl	8000280 <strlen>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	f107 0308 	add.w	r3, r7, #8
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f00b f9cd 	bl	800e364 <CDC_Transmit_FS>
	   }
	          vTaskDelay(pdMS_TO_TICKS(10000)); // Every 10 sec
 8002fca:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002fce:	f00a f857 	bl	800d080 <vTaskDelay>
	  if (SIM868_GetGPSLocation(&huart1, &lastKnownLocation) == SIM868_SUCCESS) {
 8002fd2:	e7dd      	b.n	8002f90 <GPS_Task+0x8>
 8002fd4:	20000a48 	.word	0x20000a48
 8002fd8:	20000914 	.word	0x20000914
 8002fdc:	20000a65 	.word	0x20000a65
 8002fe0:	20000a49 	.word	0x20000a49
 8002fe4:	080140ac 	.word	0x080140ac

08002fe8 <Signal_Detection>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Signal_Detection */
void Signal_Detection(void const * argument)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Signal_Detection */
  /* Infinite loop */
  for(;;)
  {
	  if (SIM868_check_signal(&huart1) == SIM868_SUCCESS) {
 8002ff0:	4808      	ldr	r0, [pc, #32]	@ (8003014 <Signal_Detection+0x2c>)
 8002ff2:	f7fe f91f 	bl	8001234 <SIM868_check_signal>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d103      	bne.n	8003004 <Signal_Detection+0x1c>
	              useLoRa = false;
 8002ffc:	4b06      	ldr	r3, [pc, #24]	@ (8003018 <Signal_Detection+0x30>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	701a      	strb	r2, [r3, #0]
 8003002:	e002      	b.n	800300a <Signal_Detection+0x22>
	          } else {
	              useLoRa = true;
 8003004:	4b04      	ldr	r3, [pc, #16]	@ (8003018 <Signal_Detection+0x30>)
 8003006:	2201      	movs	r2, #1
 8003008:	701a      	strb	r2, [r3, #0]
	          }
	          vTaskDelay(pdMS_TO_TICKS(5000)); // Every 5 sec
 800300a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800300e:	f00a f837 	bl	800d080 <vTaskDelay>
	  if (SIM868_check_signal(&huart1) == SIM868_SUCCESS) {
 8003012:	e7ed      	b.n	8002ff0 <Signal_Detection+0x8>
 8003014:	20000914 	.word	0x20000914
 8003018:	20000a45 	.word	0x20000a45

0800301c <Sender_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Sender_Task */
void Sender_Task(void const * argument)
{
 800301c:	b5b0      	push	{r4, r5, r7, lr}
 800301e:	ed2d 8b02 	vpush	{d8}
 8003022:	b0d0      	sub	sp, #320	@ 0x140
 8003024:	af04      	add	r7, sp, #16
 8003026:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800302a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800302e:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Sender_Task */
	const char accidentMessage[] = "Vehicle flipped! Alert received.";
 8003030:	4b24      	ldr	r3, [pc, #144]	@ (80030c4 <Sender_Task+0xa8>)
 8003032:	f507 7486 	add.w	r4, r7, #268	@ 0x10c
 8003036:	461d      	mov	r5, r3
 8003038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800303a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800303c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800303e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003040:	682b      	ldr	r3, [r5, #0]
 8003042:	7023      	strb	r3, [r4, #0]
  /* Infinite loop */
  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8003044:	f04f 31ff 	mov.w	r1, #4294967295
 8003048:	2001      	movs	r0, #1
 800304a:	f00a fb49 	bl	800d6e0 <ulTaskNotifyTake>
	   if (vehicleFlipped)
 800304e:	4b1e      	ldr	r3, [pc, #120]	@ (80030c8 <Sender_Task+0xac>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d030      	beq.n	80030b8 <Sender_Task+0x9c>
	   {
		   if (!useLoRa)
 8003056:	4b1d      	ldr	r3, [pc, #116]	@ (80030cc <Sender_Task+0xb0>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	f083 0301 	eor.w	r3, r3, #1
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d020      	beq.n	80030a6 <Sender_Task+0x8a>
		   {
			  char jsonPayload[256];
		   snprintf(jsonPayload, sizeof(jsonPayload),
 8003064:	481a      	ldr	r0, [pc, #104]	@ (80030d0 <Sender_Task+0xb4>)
 8003066:	f00b fdcf 	bl	800ec08 <atof>
 800306a:	eeb0 8a40 	vmov.f32	s16, s0
 800306e:	eef0 8a60 	vmov.f32	s17, s1
 8003072:	4818      	ldr	r0, [pc, #96]	@ (80030d4 <Sender_Task+0xb8>)
 8003074:	f00b fdc8 	bl	800ec08 <atof>
 8003078:	eeb0 7a40 	vmov.f32	s14, s0
 800307c:	eef0 7a60 	vmov.f32	s15, s1
 8003080:	f107 030c 	add.w	r3, r7, #12
 8003084:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003088:	ed8d 8b00 	vstr	d8, [sp]
 800308c:	4a12      	ldr	r2, [pc, #72]	@ (80030d8 <Sender_Task+0xbc>)
 800308e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003092:	4618      	mov	r0, r3
 8003094:	f00d f9e4 	bl	8010460 <sniprintf>
				   "{\"accident\":true,\"location\":{\"lat\":%f,\"lon\":%f}}",
				   atof(lastKnownLocation.lat_str), atof(lastKnownLocation.lon_str));
		   SIM868_sendPostData(&huart1, jsonPayload);
 8003098:	f107 030c 	add.w	r3, r7, #12
 800309c:	4619      	mov	r1, r3
 800309e:	480f      	ldr	r0, [pc, #60]	@ (80030dc <Sender_Task+0xc0>)
 80030a0:	f7fe fb26 	bl	80016f0 <SIM868_sendPostData>
 80030a4:	e005      	b.n	80030b2 <Sender_Task+0x96>
		   } else {
			   sendMessageAndWaitForAck_TX(&myLoRa, (uint8_t*)accidentMessage);
 80030a6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80030aa:	4619      	mov	r1, r3
 80030ac:	480c      	ldr	r0, [pc, #48]	@ (80030e0 <Sender_Task+0xc4>)
 80030ae:	f7ff f949 	bl	8002344 <sendMessageAndWaitForAck_TX>
		   }
		   vehicleFlipped = false;
 80030b2:	4b05      	ldr	r3, [pc, #20]	@ (80030c8 <Sender_Task+0xac>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	701a      	strb	r2, [r3, #0]
	   }
	   vTaskDelay(pdMS_TO_TICKS(1000));
 80030b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80030bc:	f009 ffe0 	bl	800d080 <vTaskDelay>
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80030c0:	e7c0      	b.n	8003044 <Sender_Task+0x28>
 80030c2:	bf00      	nop
 80030c4:	080140f0 	.word	0x080140f0
 80030c8:	20000a8c 	.word	0x20000a8c
 80030cc:	20000a45 	.word	0x20000a45
 80030d0:	20000a49 	.word	0x20000a49
 80030d4:	20000a65 	.word	0x20000a65
 80030d8:	080140bc 	.word	0x080140bc
 80030dc:	20000914 	.word	0x20000914
 80030e0:	20000a18 	.word	0x20000a18

080030e4 <LoRa_Receive_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LoRa_Receive_Task */
void LoRa_Receive_Task(void const * argument)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LoRa_Receive_Task */
  /* Infinite loop */
  for(;;)
  {
	  if (receivedFlag)
 80030ec:	4b07      	ldr	r3, [pc, #28]	@ (800310c <LoRa_Receive_Task+0x28>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <LoRa_Receive_Task+0x1c>
	  {
		 receivedFlag = 0;
 80030f4:	4b05      	ldr	r3, [pc, #20]	@ (800310c <LoRa_Receive_Task+0x28>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	701a      	strb	r2, [r3, #0]
		 receiveAndsendACK_RX(&myLoRa);
 80030fa:	4805      	ldr	r0, [pc, #20]	@ (8003110 <LoRa_Receive_Task+0x2c>)
 80030fc:	f7ff fa62 	bl	80025c4 <receiveAndsendACK_RX>
	  }
	     vTaskDelay(pdMS_TO_TICKS(1000));
 8003100:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003104:	f009 ffbc 	bl	800d080 <vTaskDelay>
	  if (receivedFlag)
 8003108:	e7f0      	b.n	80030ec <LoRa_Receive_Task+0x8>
 800310a:	bf00      	nop
 800310c:	20000a44 	.word	0x20000a44
 8003110:	20000a18 	.word	0x20000a18

08003114 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a04      	ldr	r2, [pc, #16]	@ (8003134 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d101      	bne.n	800312a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8003126:	f000 ffad 	bl	8004084 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40000400 	.word	0x40000400

08003138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800313c:	b672      	cpsid	i
}
 800313e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003140:	bf00      	nop
 8003142:	e7fd      	b.n	8003140 <Error_Handler+0x8>

08003144 <MPU6050_Init>:
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

// Initialize MPU6050
uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8003144:	b580      	push	{r7, lr}
 8003146:	b088      	sub	sp, #32
 8003148:	af04      	add	r7, sp, #16
 800314a:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800314c:	2364      	movs	r3, #100	@ 0x64
 800314e:	9302      	str	r3, [sp, #8]
 8003150:	2301      	movs	r3, #1
 8003152:	9301      	str	r3, [sp, #4]
 8003154:	f107 030f 	add.w	r3, r7, #15
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	2301      	movs	r3, #1
 800315c:	2275      	movs	r2, #117	@ 0x75
 800315e:	21d0      	movs	r1, #208	@ 0xd0
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f001 fcf9 	bl	8004b58 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 is the expected response
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	2b68      	cmp	r3, #104	@ 0x68
 800316a:	d13d      	bne.n	80031e8 <MPU6050_Init+0xa4>
    {
        // Wake up the sensor by writing 0 to PWR_MGMT_1 register
        Data = 0;
 800316c:	2300      	movs	r3, #0
 800316e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8003170:	2364      	movs	r3, #100	@ 0x64
 8003172:	9302      	str	r3, [sp, #8]
 8003174:	2301      	movs	r3, #1
 8003176:	9301      	str	r3, [sp, #4]
 8003178:	f107 030e 	add.w	r3, r7, #14
 800317c:	9300      	str	r3, [sp, #0]
 800317e:	2301      	movs	r3, #1
 8003180:	226b      	movs	r2, #107	@ 0x6b
 8003182:	21d0      	movs	r1, #208	@ 0xd0
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f001 fbed 	bl	8004964 <HAL_I2C_Mem_Write>

        // Set sample rate to 1 kHz
        Data = 0x07;
 800318a:	2307      	movs	r3, #7
 800318c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800318e:	2364      	movs	r3, #100	@ 0x64
 8003190:	9302      	str	r3, [sp, #8]
 8003192:	2301      	movs	r3, #1
 8003194:	9301      	str	r3, [sp, #4]
 8003196:	f107 030e 	add.w	r3, r7, #14
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	2301      	movs	r3, #1
 800319e:	2219      	movs	r2, #25
 80031a0:	21d0      	movs	r1, #208	@ 0xd0
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f001 fbde 	bl	8004964 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ±2g range
        Data = 0x00;
 80031a8:	2300      	movs	r3, #0
 80031aa:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80031ac:	2364      	movs	r3, #100	@ 0x64
 80031ae:	9302      	str	r3, [sp, #8]
 80031b0:	2301      	movs	r3, #1
 80031b2:	9301      	str	r3, [sp, #4]
 80031b4:	f107 030e 	add.w	r3, r7, #14
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	2301      	movs	r3, #1
 80031bc:	221c      	movs	r2, #28
 80031be:	21d0      	movs	r1, #208	@ 0xd0
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f001 fbcf 	bl	8004964 <HAL_I2C_Mem_Write>

        // Set Gyro configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ±250 deg/sec range
        Data = 0x00;
 80031c6:	2300      	movs	r3, #0
 80031c8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80031ca:	2364      	movs	r3, #100	@ 0x64
 80031cc:	9302      	str	r3, [sp, #8]
 80031ce:	2301      	movs	r3, #1
 80031d0:	9301      	str	r3, [sp, #4]
 80031d2:	f107 030e 	add.w	r3, r7, #14
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	2301      	movs	r3, #1
 80031da:	221b      	movs	r2, #27
 80031dc:	21d0      	movs	r1, #208	@ 0xd0
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f001 fbc0 	bl	8004964 <HAL_I2C_Mem_Write>
        return 0;  // Initialization successful
 80031e4:	2300      	movs	r3, #0
 80031e6:	e000      	b.n	80031ea <MPU6050_Init+0xa6>
    }
    return 1;  // Initialization failed
 80031e8:	2301      	movs	r3, #1
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	0000      	movs	r0, r0
 80031f4:	0000      	movs	r0, r0
	...

080031f8 <MPU6050_Read_All>:
    // Convert raw data to temperature in Celsius
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

// Read all sensor data
void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80031f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031fc:	b094      	sub	sp, #80	@ 0x50
 80031fe:	af04      	add	r7, sp, #16
 8003200:	6078      	str	r0, [r7, #4]
 8003202:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];  // Buffer for raw data
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8003204:	2364      	movs	r3, #100	@ 0x64
 8003206:	9302      	str	r3, [sp, #8]
 8003208:	230e      	movs	r3, #14
 800320a:	9301      	str	r3, [sp, #4]
 800320c:	f107 0308 	add.w	r3, r7, #8
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	2301      	movs	r3, #1
 8003214:	223b      	movs	r2, #59	@ 0x3b
 8003216:	21d0      	movs	r1, #208	@ 0xd0
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f001 fc9d 	bl	8004b58 <HAL_I2C_Mem_Read>

    // Parse accelerometer data
    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800321e:	7a3b      	ldrb	r3, [r7, #8]
 8003220:	b21b      	sxth	r3, r3
 8003222:	021b      	lsls	r3, r3, #8
 8003224:	b21a      	sxth	r2, r3
 8003226:	7a7b      	ldrb	r3, [r7, #9]
 8003228:	b21b      	sxth	r3, r3
 800322a:	4313      	orrs	r3, r2
 800322c:	b21a      	sxth	r2, r3
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8003232:	7abb      	ldrb	r3, [r7, #10]
 8003234:	b21b      	sxth	r3, r3
 8003236:	021b      	lsls	r3, r3, #8
 8003238:	b21a      	sxth	r2, r3
 800323a:	7afb      	ldrb	r3, [r7, #11]
 800323c:	b21b      	sxth	r3, r3
 800323e:	4313      	orrs	r3, r2
 8003240:	b21a      	sxth	r2, r3
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8003246:	7b3b      	ldrb	r3, [r7, #12]
 8003248:	b21b      	sxth	r3, r3
 800324a:	021b      	lsls	r3, r3, #8
 800324c:	b21a      	sxth	r2, r3
 800324e:	7b7b      	ldrb	r3, [r7, #13]
 8003250:	b21b      	sxth	r3, r3
 8003252:	4313      	orrs	r3, r2
 8003254:	b21a      	sxth	r2, r3
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	809a      	strh	r2, [r3, #4]

    // Parse temperature data
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 800325a:	7bbb      	ldrb	r3, [r7, #14]
 800325c:	b21b      	sxth	r3, r3
 800325e:	021b      	lsls	r3, r3, #8
 8003260:	b21a      	sxth	r2, r3
 8003262:	7bfb      	ldrb	r3, [r7, #15]
 8003264:	b21b      	sxth	r3, r3
 8003266:	4313      	orrs	r3, r2
 8003268:	86fb      	strh	r3, [r7, #54]	@ 0x36

    // Parse gyroscope data
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 800326a:	7c3b      	ldrb	r3, [r7, #16]
 800326c:	b21b      	sxth	r3, r3
 800326e:	021b      	lsls	r3, r3, #8
 8003270:	b21a      	sxth	r2, r3
 8003272:	7c7b      	ldrb	r3, [r7, #17]
 8003274:	b21b      	sxth	r3, r3
 8003276:	4313      	orrs	r3, r2
 8003278:	b21a      	sxth	r2, r3
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 800327e:	7cbb      	ldrb	r3, [r7, #18]
 8003280:	b21b      	sxth	r3, r3
 8003282:	021b      	lsls	r3, r3, #8
 8003284:	b21a      	sxth	r2, r3
 8003286:	7cfb      	ldrb	r3, [r7, #19]
 8003288:	b21b      	sxth	r3, r3
 800328a:	4313      	orrs	r3, r2
 800328c:	b21a      	sxth	r2, r3
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8003292:	7d3b      	ldrb	r3, [r7, #20]
 8003294:	b21b      	sxth	r3, r3
 8003296:	021b      	lsls	r3, r3, #8
 8003298:	b21a      	sxth	r2, r3
 800329a:	7d7b      	ldrb	r3, [r7, #21]
 800329c:	b21b      	sxth	r3, r3
 800329e:	4313      	orrs	r3, r2
 80032a0:	b21a      	sxth	r2, r3
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	849a      	strh	r2, [r3, #36]	@ 0x24

    // Convert to proper units
    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fd f941 	bl	8000534 <__aeabi_i2d>
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	4bbe      	ldr	r3, [pc, #760]	@ (80035b0 <MPU6050_Read_All+0x3b8>)
 80032b8:	f7fd fad0 	bl	800085c <__aeabi_ddiv>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	6839      	ldr	r1, [r7, #0]
 80032c2:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7fd f931 	bl	8000534 <__aeabi_i2d>
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	4bb6      	ldr	r3, [pc, #728]	@ (80035b0 <MPU6050_Read_All+0x3b8>)
 80032d8:	f7fd fac0 	bl	800085c <__aeabi_ddiv>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	6839      	ldr	r1, [r7, #0]
 80032e2:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fd f921 	bl	8000534 <__aeabi_i2d>
 80032f2:	a3a9      	add	r3, pc, #676	@ (adr r3, 8003598 <MPU6050_Read_All+0x3a0>)
 80032f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f8:	f7fd fab0 	bl	800085c <__aeabi_ddiv>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	6839      	ldr	r1, [r7, #0]
 8003302:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8003306:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800330a:	ee07 3a90 	vmov	s15, r3
 800330e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003312:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 80035b4 <MPU6050_Read_All+0x3bc>
 8003316:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800331a:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 80035b8 <MPU6050_Read_All+0x3c0>
 800331e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800332e:	4618      	mov	r0, r3
 8003330:	f7fd f900 	bl	8000534 <__aeabi_i2d>
 8003334:	a39a      	add	r3, pc, #616	@ (adr r3, 80035a0 <MPU6050_Read_All+0x3a8>)
 8003336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333a:	f7fd fa8f 	bl	800085c <__aeabi_ddiv>
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	6839      	ldr	r1, [r7, #0]
 8003344:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 800334e:	4618      	mov	r0, r3
 8003350:	f7fd f8f0 	bl	8000534 <__aeabi_i2d>
 8003354:	a392      	add	r3, pc, #584	@ (adr r3, 80035a0 <MPU6050_Read_All+0x3a8>)
 8003356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335a:	f7fd fa7f 	bl	800085c <__aeabi_ddiv>
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	6839      	ldr	r1, [r7, #0]
 8003364:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800336e:	4618      	mov	r0, r3
 8003370:	f7fd f8e0 	bl	8000534 <__aeabi_i2d>
 8003374:	a38a      	add	r3, pc, #552	@ (adr r3, 80035a0 <MPU6050_Read_All+0x3a8>)
 8003376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337a:	f7fd fa6f 	bl	800085c <__aeabi_ddiv>
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	6839      	ldr	r1, [r7, #0]
 8003384:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman filter calculations
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8003388:	f000 fe90 	bl	80040ac <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	4b8b      	ldr	r3, [pc, #556]	@ (80035bc <MPU6050_Read_All+0x3c4>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	4618      	mov	r0, r3
 8003396:	f7fd f8bd 	bl	8000514 <__aeabi_ui2d>
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	4b88      	ldr	r3, [pc, #544]	@ (80035c0 <MPU6050_Read_All+0x3c8>)
 80033a0:	f7fd fa5c 	bl	800085c <__aeabi_ddiv>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 80033ac:	f000 fe7e 	bl	80040ac <HAL_GetTick>
 80033b0:	4603      	mov	r3, r0
 80033b2:	4a82      	ldr	r2, [pc, #520]	@ (80035bc <MPU6050_Read_All+0x3c4>)
 80033b4:	6013      	str	r3, [r2, #0]
    double roll;

    // Calculate roll and pitch
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033bc:	461a      	mov	r2, r3
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033c4:	fb03 f202 	mul.w	r2, r3, r2
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80033ce:	4619      	mov	r1, r3
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80033d6:	fb01 f303 	mul.w	r3, r1, r3
 80033da:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fd f8a9 	bl	8000534 <__aeabi_i2d>
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	ec43 2b10 	vmov	d0, r2, r3
 80033ea:	f00f feaf 	bl	801314c <sqrt>
 80033ee:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 80033f2:	f04f 0200 	mov.w	r2, #0
 80033f6:	f04f 0300 	mov.w	r3, #0
 80033fa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80033fe:	f7fd fb6b 	bl	8000ad8 <__aeabi_dcmpeq>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d11f      	bne.n	8003448 <MPU6050_Read_All+0x250>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800340e:	4618      	mov	r0, r3
 8003410:	f7fd f890 	bl	8000534 <__aeabi_i2d>
 8003414:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003418:	f7fd fa20 	bl	800085c <__aeabi_ddiv>
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	ec43 2b17 	vmov	d7, r2, r3
 8003424:	eeb0 0a47 	vmov.f32	s0, s14
 8003428:	eef0 0a67 	vmov.f32	s1, s15
 800342c:	f00f febc 	bl	80131a8 <atan>
 8003430:	ec51 0b10 	vmov	r0, r1, d0
 8003434:	a35c      	add	r3, pc, #368	@ (adr r3, 80035a8 <MPU6050_Read_All+0x3b0>)
 8003436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343a:	f7fd f8e5 	bl	8000608 <__aeabi_dmul>
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8003446:	e005      	b.n	8003454 <MPU6050_Read_All+0x25c>
    } else {
        roll = 0.0;
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	f04f 0300 	mov.w	r3, #0
 8003450:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	f9b3 3000 	ldrsh.w	r3, [r3]
 800345a:	425b      	negs	r3, r3
 800345c:	4618      	mov	r0, r3
 800345e:	f7fd f869 	bl	8000534 <__aeabi_i2d>
 8003462:	4682      	mov	sl, r0
 8003464:	468b      	mov	fp, r1
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800346c:	4618      	mov	r0, r3
 800346e:	f7fd f861 	bl	8000534 <__aeabi_i2d>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	ec43 2b11 	vmov	d1, r2, r3
 800347a:	ec4b ab10 	vmov	d0, sl, fp
 800347e:	f00f fe63 	bl	8013148 <atan2>
 8003482:	ec51 0b10 	vmov	r0, r1, d0
 8003486:	a348      	add	r3, pc, #288	@ (adr r3, 80035a8 <MPU6050_Read_All+0x3b0>)
 8003488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348c:	f7fd f8bc 	bl	8000608 <__aeabi_dmul>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	e9c7 2306 	strd	r2, r3, [r7, #24]
    // Handle pitch discontinuity
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	4b49      	ldr	r3, [pc, #292]	@ (80035c4 <MPU6050_Read_All+0x3cc>)
 800349e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80034a2:	f7fd fb23 	bl	8000aec <__aeabi_dcmplt>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00a      	beq.n	80034c2 <MPU6050_Read_All+0x2ca>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	4b44      	ldr	r3, [pc, #272]	@ (80035c8 <MPU6050_Read_All+0x3d0>)
 80034b8:	f7fd fb36 	bl	8000b28 <__aeabi_dcmpgt>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d114      	bne.n	80034ec <MPU6050_Read_All+0x2f4>
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	4b40      	ldr	r3, [pc, #256]	@ (80035c8 <MPU6050_Read_All+0x3d0>)
 80034c8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80034cc:	f7fd fb2c 	bl	8000b28 <__aeabi_dcmpgt>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d015      	beq.n	8003502 <MPU6050_Read_All+0x30a>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	4b38      	ldr	r3, [pc, #224]	@ (80035c4 <MPU6050_Read_All+0x3cc>)
 80034e2:	f7fd fb03 	bl	8000aec <__aeabi_dcmplt>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <MPU6050_Read_All+0x30a>
        KalmanY.angle = pitch;
 80034ec:	4937      	ldr	r1, [pc, #220]	@ (80035cc <MPU6050_Read_All+0x3d4>)
 80034ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034f2:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80034f6:	6839      	ldr	r1, [r7, #0]
 80034f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034fc:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8003500:	e014      	b.n	800352c <MPU6050_Read_All+0x334>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8003508:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 800350c:	eeb0 1a47 	vmov.f32	s2, s14
 8003510:	eef0 1a67 	vmov.f32	s3, s15
 8003514:	ed97 0b06 	vldr	d0, [r7, #24]
 8003518:	482c      	ldr	r0, [pc, #176]	@ (80035cc <MPU6050_Read_All+0x3d4>)
 800351a:	f000 f85b 	bl	80035d4 <Kalman_getAngle>
 800351e:	eeb0 7a40 	vmov.f32	s14, s0
 8003522:	eef0 7a60 	vmov.f32	s15, s1
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }

    // Correct roll direction based on pitch
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8003532:	4690      	mov	r8, r2
 8003534:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	4b22      	ldr	r3, [pc, #136]	@ (80035c8 <MPU6050_Read_All+0x3d0>)
 800353e:	4640      	mov	r0, r8
 8003540:	4649      	mov	r1, r9
 8003542:	f7fd faf1 	bl	8000b28 <__aeabi_dcmpgt>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d008      	beq.n	800355e <MPU6050_Read_All+0x366>
        DataStruct->Gx = -DataStruct->Gx;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8003552:	4614      	mov	r4, r2
 8003554:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8003564:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8003568:	eeb0 1a47 	vmov.f32	s2, s14
 800356c:	eef0 1a67 	vmov.f32	s3, s15
 8003570:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8003574:	4816      	ldr	r0, [pc, #88]	@ (80035d0 <MPU6050_Read_All+0x3d8>)
 8003576:	f000 f82d 	bl	80035d4 <Kalman_getAngle>
 800357a:	eeb0 7a40 	vmov.f32	s14, s0
 800357e:	eef0 7a60 	vmov.f32	s15, s1
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48

}
 8003588:	bf00      	nop
 800358a:	3740      	adds	r7, #64	@ 0x40
 800358c:	46bd      	mov	sp, r7
 800358e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003592:	bf00      	nop
 8003594:	f3af 8000 	nop.w
 8003598:	00000000 	.word	0x00000000
 800359c:	40cc2900 	.word	0x40cc2900
 80035a0:	00000000 	.word	0x00000000
 80035a4:	40606000 	.word	0x40606000
 80035a8:	1a63c1f8 	.word	0x1a63c1f8
 80035ac:	404ca5dc 	.word	0x404ca5dc
 80035b0:	40d00000 	.word	0x40d00000
 80035b4:	43aa0000 	.word	0x43aa0000
 80035b8:	42121eb8 	.word	0x42121eb8
 80035bc:	20000a88 	.word	0x20000a88
 80035c0:	408f4000 	.word	0x408f4000
 80035c4:	c0568000 	.word	0xc0568000
 80035c8:	40568000 	.word	0x40568000
 80035cc:	20000060 	.word	0x20000060
 80035d0:	20000018 	.word	0x20000018

080035d4 <Kalman_getAngle>:
// Kalman filter implementation
double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 80035d4:	b5b0      	push	{r4, r5, r7, lr}
 80035d6:	b096      	sub	sp, #88	@ 0x58
 80035d8:	af00      	add	r7, sp, #0
 80035da:	61f8      	str	r0, [r7, #28]
 80035dc:	ed87 0b04 	vstr	d0, [r7, #16]
 80035e0:	ed87 1b02 	vstr	d1, [r7, #8]
 80035e4:	ed87 2b00 	vstr	d2, [r7]
    // Predict step
    double rate = newRate - Kalman->bias;
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80035ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035f2:	f7fc fe51 	bl	8000298 <__aeabi_dsub>
 80035f6:	4602      	mov	r2, r0
 80035f8:	460b      	mov	r3, r1
 80035fa:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003604:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003608:	e9d7 0100 	ldrd	r0, r1, [r7]
 800360c:	f7fc fffc 	bl	8000608 <__aeabi_dmul>
 8003610:	4602      	mov	r2, r0
 8003612:	460b      	mov	r3, r1
 8003614:	4620      	mov	r0, r4
 8003616:	4629      	mov	r1, r5
 8003618:	f7fc fe40 	bl	800029c <__adddf3>
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	69f9      	ldr	r1, [r7, #28]
 8003622:	e9c1 2306 	strd	r2, r3, [r1, #24]

    // Update error covariance matrix
    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8003632:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003636:	f7fc ffe7 	bl	8000608 <__aeabi_dmul>
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	4610      	mov	r0, r2
 8003640:	4619      	mov	r1, r3
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8003648:	f7fc fe26 	bl	8000298 <__aeabi_dsub>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4610      	mov	r0, r2
 8003652:	4619      	mov	r1, r3
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800365a:	f7fc fe1d 	bl	8000298 <__aeabi_dsub>
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	4610      	mov	r0, r2
 8003664:	4619      	mov	r1, r3
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366c:	f7fc fe16 	bl	800029c <__adddf3>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	4610      	mov	r0, r2
 8003676:	4619      	mov	r1, r3
 8003678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800367c:	f7fc ffc4 	bl	8000608 <__aeabi_dmul>
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	4620      	mov	r0, r4
 8003686:	4629      	mov	r1, r5
 8003688:	f7fc fe08 	bl	800029c <__adddf3>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	69f9      	ldr	r1, [r7, #28]
 8003692:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80036a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036a6:	f7fc ffaf 	bl	8000608 <__aeabi_dmul>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	4620      	mov	r0, r4
 80036b0:	4629      	mov	r1, r5
 80036b2:	f7fc fdf1 	bl	8000298 <__aeabi_dsub>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	69f9      	ldr	r1, [r7, #28]
 80036bc:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80036cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036d0:	f7fc ff9a 	bl	8000608 <__aeabi_dmul>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4620      	mov	r0, r4
 80036da:	4629      	mov	r1, r5
 80036dc:	f7fc fddc 	bl	8000298 <__aeabi_dsub>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	69f9      	ldr	r1, [r7, #28]
 80036e6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80036f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036fa:	f7fc ff85 	bl	8000608 <__aeabi_dmul>
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	4620      	mov	r0, r4
 8003704:	4629      	mov	r1, r5
 8003706:	f7fc fdc9 	bl	800029c <__adddf3>
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	69f9      	ldr	r1, [r7, #28]
 8003710:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    // Calculate Kalman gain
    double S = Kalman->P[0][0] + Kalman->R_measure;
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003720:	f7fc fdbc 	bl	800029c <__adddf3>
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8003732:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003736:	f7fd f891 	bl	800085c <__aeabi_ddiv>
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8003748:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800374c:	f7fd f886 	bl	800085c <__aeabi_ddiv>
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    // Update step
    double y = newAngle - Kalman->angle;
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800375e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003762:	f7fc fd99 	bl	8000298 <__aeabi_dsub>
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003774:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003778:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800377c:	f7fc ff44 	bl	8000608 <__aeabi_dmul>
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	4620      	mov	r0, r4
 8003786:	4629      	mov	r1, r5
 8003788:	f7fc fd88 	bl	800029c <__adddf3>
 800378c:	4602      	mov	r2, r0
 800378e:	460b      	mov	r3, r1
 8003790:	69f9      	ldr	r1, [r7, #28]
 8003792:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800379c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80037a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80037a4:	f7fc ff30 	bl	8000608 <__aeabi_dmul>
 80037a8:	4602      	mov	r2, r0
 80037aa:	460b      	mov	r3, r1
 80037ac:	4620      	mov	r0, r4
 80037ae:	4629      	mov	r1, r5
 80037b0:	f7fc fd74 	bl	800029c <__adddf3>
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	69f9      	ldr	r1, [r7, #28]
 80037ba:	e9c1 2308 	strd	r2, r3, [r1, #32]

    // Update error covariance matrix
    double P00_temp = Kalman->P[0][0];
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80037c4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80037ce:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    Kalman->P[0][0] -= K[0] * P00_temp;
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80037d8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80037dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80037e0:	f7fc ff12 	bl	8000608 <__aeabi_dmul>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4620      	mov	r0, r4
 80037ea:	4629      	mov	r1, r5
 80037ec:	f7fc fd54 	bl	8000298 <__aeabi_dsub>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	69f9      	ldr	r1, [r7, #28]
 80037f6:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8003800:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003804:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003808:	f7fc fefe 	bl	8000608 <__aeabi_dmul>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	4620      	mov	r0, r4
 8003812:	4629      	mov	r1, r5
 8003814:	f7fc fd40 	bl	8000298 <__aeabi_dsub>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	69f9      	ldr	r1, [r7, #28]
 800381e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8003828:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800382c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003830:	f7fc feea 	bl	8000608 <__aeabi_dmul>
 8003834:	4602      	mov	r2, r0
 8003836:	460b      	mov	r3, r1
 8003838:	4620      	mov	r0, r4
 800383a:	4629      	mov	r1, r5
 800383c:	f7fc fd2c 	bl	8000298 <__aeabi_dsub>
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	69f9      	ldr	r1, [r7, #28]
 8003846:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8003850:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003854:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003858:	f7fc fed6 	bl	8000608 <__aeabi_dmul>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4620      	mov	r0, r4
 8003862:	4629      	mov	r1, r5
 8003864:	f7fc fd18 	bl	8000298 <__aeabi_dsub>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	69f9      	ldr	r1, [r7, #28]
 800386e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003878:	ec43 2b17 	vmov	d7, r2, r3
};
 800387c:	eeb0 0a47 	vmov.f32	s0, s14
 8003880:	eef0 0a67 	vmov.f32	s1, s15
 8003884:	3758      	adds	r7, #88	@ 0x58
 8003886:	46bd      	mov	sp, r7
 8003888:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800388c <set_last_read_angle_data>:
double last_x_angle = 0.0;
double last_y_angle = 0.0;
//double last_z_angle = 0.0;

/* Function to update the last read angles */
void set_last_read_angle_data(unsigned long time, double x, double y, double z) {
 800388c:	b480      	push	{r7}
 800388e:	b089      	sub	sp, #36	@ 0x24
 8003890:	af00      	add	r7, sp, #0
 8003892:	61f8      	str	r0, [r7, #28]
 8003894:	ed87 0b04 	vstr	d0, [r7, #16]
 8003898:	ed87 1b02 	vstr	d1, [r7, #8]
 800389c:	ed87 2b00 	vstr	d2, [r7]
    last_read_time = time;
 80038a0:	4a09      	ldr	r2, [pc, #36]	@ (80038c8 <set_last_read_angle_data+0x3c>)
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	6013      	str	r3, [r2, #0]
    last_x_angle = x;
 80038a6:	4909      	ldr	r1, [pc, #36]	@ (80038cc <set_last_read_angle_data+0x40>)
 80038a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80038ac:	e9c1 2300 	strd	r2, r3, [r1]
    last_y_angle = y;
 80038b0:	4907      	ldr	r1, [pc, #28]	@ (80038d0 <set_last_read_angle_data+0x44>)
 80038b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038b6:	e9c1 2300 	strd	r2, r3, [r1]
 //   last_z_angle = z;
}
 80038ba:	bf00      	nop
 80038bc:	3724      	adds	r7, #36	@ 0x24
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	20000a90 	.word	0x20000a90
 80038cc:	20000a98 	.word	0x20000a98
 80038d0:	20000aa0 	.word	0x20000aa0
 80038d4:	00000000 	.word	0x00000000

080038d8 <MPU6050_Data>:
//double get_last_z_angle() {
//    return last_z_angle;
//}

/* Function to handle MPU6050 sensor readings and processing */
void MPU6050_Data(I2C_HandleTypeDef *I2Cx, MPU6050_t *MPU6050) {
 80038d8:	b5b0      	push	{r4, r5, r7, lr}
 80038da:	b0ae      	sub	sp, #184	@ 0xb8
 80038dc:	af06      	add	r7, sp, #24
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
    MPU6050_Read_All(I2Cx, MPU6050);
 80038e2:	68b9      	ldr	r1, [r7, #8]
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f7ff fc87 	bl	80031f8 <MPU6050_Read_All>
    double angle_x = MPU6050->KalmanAngleX;
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80038f0:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
    double angle_y = MPU6050->KalmanAngleY;
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80038fa:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90


    // Check if the vehicle's angle exceeds a certain threshold (e.g., 45 degrees)
      if (fabs(angle_x) > 45.0 || fabs(angle_y) > 45.0) {
 80038fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003902:	603b      	str	r3, [r7, #0]
 8003904:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003908:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800390c:	607b      	str	r3, [r7, #4]
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	4b35      	ldr	r3, [pc, #212]	@ (80039e8 <MPU6050_Data+0x110>)
 8003914:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003918:	f7fd f906 	bl	8000b28 <__aeabi_dcmpgt>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10f      	bne.n	8003942 <MPU6050_Data+0x6a>
 8003922:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 8003926:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800392a:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	4b2d      	ldr	r3, [pc, #180]	@ (80039e8 <MPU6050_Data+0x110>)
 8003934:	4620      	mov	r0, r4
 8003936:	4629      	mov	r1, r5
 8003938:	f7fd f8f6 	bl	8000b28 <__aeabi_dcmpgt>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d01a      	beq.n	8003978 <MPU6050_Data+0xa0>
    	  vehicleFlipped = true;  // Set the vehicleFlipped flag
 8003942:	4b2a      	ldr	r3, [pc, #168]	@ (80039ec <MPU6050_Data+0x114>)
 8003944:	2201      	movs	r2, #1
 8003946:	701a      	strb	r2, [r3, #0]

    	  // Notify LoRa Sender Task using FreeRTOS task notification
    	   BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003948:	2300      	movs	r3, #0
 800394a:	617b      	str	r3, [r7, #20]
    	  vTaskNotifyGiveFromISR(SenderTaskHandle, &xHigherPriorityTaskWoken);
 800394c:	4b28      	ldr	r3, [pc, #160]	@ (80039f0 <MPU6050_Data+0x118>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f107 0214 	add.w	r2, r7, #20
 8003954:	4611      	mov	r1, r2
 8003956:	4618      	mov	r0, r3
 8003958:	f009 ff0a 	bl	800d770 <vTaskNotifyGiveFromISR>

    	  if (xHigherPriorityTaskWoken) {
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <MPU6050_Data+0xa0>
    		  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);  // Trigger context switch if needed
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d007      	beq.n	8003978 <MPU6050_Data+0xa0>
 8003968:	4b22      	ldr	r3, [pc, #136]	@ (80039f4 <MPU6050_Data+0x11c>)
 800396a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	f3bf 8f6f 	isb	sy


      }

    // Update the last read angles
    set_last_read_angle_data(HAL_GetTick(), angle_x, angle_y, 0.0);
 8003978:	f000 fb98 	bl	80040ac <HAL_GetTick>
 800397c:	4603      	mov	r3, r0
 800397e:	ed9f 2b18 	vldr	d2, [pc, #96]	@ 80039e0 <MPU6050_Data+0x108>
 8003982:	ed97 1b24 	vldr	d1, [r7, #144]	@ 0x90
 8003986:	ed97 0b26 	vldr	d0, [r7, #152]	@ 0x98
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff ff7e 	bl	800388c <set_last_read_angle_data>
    snprintf(datax, sizeof(datax),"\nAngle values\n"
                   " X:%3.4f\n Y:%3.4f\n"
                   "Temperature:%3.4f\n\n\n",
                   angle_x,
                   angle_y,
                  MPU6050->Temperature);
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    snprintf(datax, sizeof(datax),"\nAngle values\n"
 8003994:	4618      	mov	r0, r3
 8003996:	f7fc fddf 	bl	8000558 <__aeabi_f2d>
 800399a:	4602      	mov	r2, r0
 800399c:	460b      	mov	r3, r1
 800399e:	f107 0018 	add.w	r0, r7, #24
 80039a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80039a6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80039aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80039ae:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80039b2:	e9cd 2300 	strd	r2, r3, [sp]
 80039b6:	4a10      	ldr	r2, [pc, #64]	@ (80039f8 <MPU6050_Data+0x120>)
 80039b8:	2178      	movs	r1, #120	@ 0x78
 80039ba:	f00c fd51 	bl	8010460 <sniprintf>

  CDC_Transmit_FS((uint8_t*)datax, strlen(datax));
 80039be:	f107 0318 	add.w	r3, r7, #24
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fc fc5c 	bl	8000280 <strlen>
 80039c8:	4603      	mov	r3, r0
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	f107 0318 	add.w	r3, r7, #24
 80039d0:	4611      	mov	r1, r2
 80039d2:	4618      	mov	r0, r3
 80039d4:	f00a fcc6 	bl	800e364 <CDC_Transmit_FS>

}
 80039d8:	bf00      	nop
 80039da:	37a0      	adds	r7, #160	@ 0xa0
 80039dc:	46bd      	mov	sp, r7
 80039de:	bdb0      	pop	{r4, r5, r7, pc}
	...
 80039e8:	40468000 	.word	0x40468000
 80039ec:	20000a8c 	.word	0x20000a8c
 80039f0:	200009b4 	.word	0x200009b4
 80039f4:	e000ed04 	.word	0xe000ed04
 80039f8:	08014114 	.word	0x08014114

080039fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	607b      	str	r3, [r7, #4]
 8003a06:	4b12      	ldr	r3, [pc, #72]	@ (8003a50 <HAL_MspInit+0x54>)
 8003a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0a:	4a11      	ldr	r2, [pc, #68]	@ (8003a50 <HAL_MspInit+0x54>)
 8003a0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a10:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a12:	4b0f      	ldr	r3, [pc, #60]	@ (8003a50 <HAL_MspInit+0x54>)
 8003a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a1a:	607b      	str	r3, [r7, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	603b      	str	r3, [r7, #0]
 8003a22:	4b0b      	ldr	r3, [pc, #44]	@ (8003a50 <HAL_MspInit+0x54>)
 8003a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a26:	4a0a      	ldr	r2, [pc, #40]	@ (8003a50 <HAL_MspInit+0x54>)
 8003a28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a2e:	4b08      	ldr	r3, [pc, #32]	@ (8003a50 <HAL_MspInit+0x54>)
 8003a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a36:	603b      	str	r3, [r7, #0]
 8003a38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	210f      	movs	r1, #15
 8003a3e:	f06f 0001 	mvn.w	r0, #1
 8003a42:	f000 fc1b 	bl	800427c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a46:	bf00      	nop
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	40023800 	.word	0x40023800

08003a54 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a0b      	ldr	r2, [pc, #44]	@ (8003a90 <HAL_CRC_MspInit+0x3c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d10d      	bne.n	8003a82 <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a94 <HAL_CRC_MspInit+0x40>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6e:	4a09      	ldr	r2, [pc, #36]	@ (8003a94 <HAL_CRC_MspInit+0x40>)
 8003a70:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a76:	4b07      	ldr	r3, [pc, #28]	@ (8003a94 <HAL_CRC_MspInit+0x40>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8003a82:	bf00      	nop
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	40023000 	.word	0x40023000
 8003a94:	40023800 	.word	0x40023800

08003a98 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b08a      	sub	sp, #40	@ 0x28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa0:	f107 0314 	add.w	r3, r7, #20
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	605a      	str	r2, [r3, #4]
 8003aaa:	609a      	str	r2, [r3, #8]
 8003aac:	60da      	str	r2, [r3, #12]
 8003aae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a19      	ldr	r2, [pc, #100]	@ (8003b1c <HAL_I2C_MspInit+0x84>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d12b      	bne.n	8003b12 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aba:	2300      	movs	r3, #0
 8003abc:	613b      	str	r3, [r7, #16]
 8003abe:	4b18      	ldr	r3, [pc, #96]	@ (8003b20 <HAL_I2C_MspInit+0x88>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac2:	4a17      	ldr	r2, [pc, #92]	@ (8003b20 <HAL_I2C_MspInit+0x88>)
 8003ac4:	f043 0302 	orr.w	r3, r3, #2
 8003ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aca:	4b15      	ldr	r3, [pc, #84]	@ (8003b20 <HAL_I2C_MspInit+0x88>)
 8003acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	613b      	str	r3, [r7, #16]
 8003ad4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ad6:	23c0      	movs	r3, #192	@ 0xc0
 8003ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ada:	2312      	movs	r3, #18
 8003adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ae6:	2304      	movs	r3, #4
 8003ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aea:	f107 0314 	add.w	r3, r7, #20
 8003aee:	4619      	mov	r1, r3
 8003af0:	480c      	ldr	r0, [pc, #48]	@ (8003b24 <HAL_I2C_MspInit+0x8c>)
 8003af2:	f000 fc3d 	bl	8004370 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003af6:	2300      	movs	r3, #0
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	4b09      	ldr	r3, [pc, #36]	@ (8003b20 <HAL_I2C_MspInit+0x88>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afe:	4a08      	ldr	r2, [pc, #32]	@ (8003b20 <HAL_I2C_MspInit+0x88>)
 8003b00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b06:	4b06      	ldr	r3, [pc, #24]	@ (8003b20 <HAL_I2C_MspInit+0x88>)
 8003b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003b12:	bf00      	nop
 8003b14:	3728      	adds	r7, #40	@ 0x28
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40005400 	.word	0x40005400
 8003b20:	40023800 	.word	0x40023800
 8003b24:	40020400 	.word	0x40020400

08003b28 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08a      	sub	sp, #40	@ 0x28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b30:	f107 0314 	add.w	r3, r7, #20
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	605a      	str	r2, [r3, #4]
 8003b3a:	609a      	str	r2, [r3, #8]
 8003b3c:	60da      	str	r2, [r3, #12]
 8003b3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a19      	ldr	r2, [pc, #100]	@ (8003bac <HAL_SPI_MspInit+0x84>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d12b      	bne.n	8003ba2 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	613b      	str	r3, [r7, #16]
 8003b4e:	4b18      	ldr	r3, [pc, #96]	@ (8003bb0 <HAL_SPI_MspInit+0x88>)
 8003b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b52:	4a17      	ldr	r2, [pc, #92]	@ (8003bb0 <HAL_SPI_MspInit+0x88>)
 8003b54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b5a:	4b15      	ldr	r3, [pc, #84]	@ (8003bb0 <HAL_SPI_MspInit+0x88>)
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b62:	613b      	str	r3, [r7, #16]
 8003b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b66:	2300      	movs	r3, #0
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	4b11      	ldr	r3, [pc, #68]	@ (8003bb0 <HAL_SPI_MspInit+0x88>)
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6e:	4a10      	ldr	r2, [pc, #64]	@ (8003bb0 <HAL_SPI_MspInit+0x88>)
 8003b70:	f043 0301 	orr.w	r3, r3, #1
 8003b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b76:	4b0e      	ldr	r3, [pc, #56]	@ (8003bb0 <HAL_SPI_MspInit+0x88>)
 8003b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003b82:	23e0      	movs	r3, #224	@ 0xe0
 8003b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b86:	2302      	movs	r3, #2
 8003b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b92:	2305      	movs	r3, #5
 8003b94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b96:	f107 0314 	add.w	r3, r7, #20
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4805      	ldr	r0, [pc, #20]	@ (8003bb4 <HAL_SPI_MspInit+0x8c>)
 8003b9e:	f000 fbe7 	bl	8004370 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003ba2:	bf00      	nop
 8003ba4:	3728      	adds	r7, #40	@ 0x28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40013000 	.word	0x40013000
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	40020000 	.word	0x40020000

08003bb8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b08a      	sub	sp, #40	@ 0x28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc0:	f107 0314 	add.w	r3, r7, #20
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	605a      	str	r2, [r3, #4]
 8003bca:	609a      	str	r2, [r3, #8]
 8003bcc:	60da      	str	r2, [r3, #12]
 8003bce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a19      	ldr	r2, [pc, #100]	@ (8003c3c <HAL_UART_MspInit+0x84>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d12c      	bne.n	8003c34 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bda:	2300      	movs	r3, #0
 8003bdc:	613b      	str	r3, [r7, #16]
 8003bde:	4b18      	ldr	r3, [pc, #96]	@ (8003c40 <HAL_UART_MspInit+0x88>)
 8003be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be2:	4a17      	ldr	r2, [pc, #92]	@ (8003c40 <HAL_UART_MspInit+0x88>)
 8003be4:	f043 0310 	orr.w	r3, r3, #16
 8003be8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bea:	4b15      	ldr	r3, [pc, #84]	@ (8003c40 <HAL_UART_MspInit+0x88>)
 8003bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bee:	f003 0310 	and.w	r3, r3, #16
 8003bf2:	613b      	str	r3, [r7, #16]
 8003bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]
 8003bfa:	4b11      	ldr	r3, [pc, #68]	@ (8003c40 <HAL_UART_MspInit+0x88>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfe:	4a10      	ldr	r2, [pc, #64]	@ (8003c40 <HAL_UART_MspInit+0x88>)
 8003c00:	f043 0301 	orr.w	r3, r3, #1
 8003c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c06:	4b0e      	ldr	r3, [pc, #56]	@ (8003c40 <HAL_UART_MspInit+0x88>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003c12:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c18:	2302      	movs	r3, #2
 8003c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c20:	2303      	movs	r3, #3
 8003c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c24:	2307      	movs	r3, #7
 8003c26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c28:	f107 0314 	add.w	r3, r7, #20
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4805      	ldr	r0, [pc, #20]	@ (8003c44 <HAL_UART_MspInit+0x8c>)
 8003c30:	f000 fb9e 	bl	8004370 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8003c34:	bf00      	nop
 8003c36:	3728      	adds	r7, #40	@ 0x28
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40011000 	.word	0x40011000
 8003c40:	40023800 	.word	0x40023800
 8003c44:	40020000 	.word	0x40020000

08003c48 <HAL_USART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param husart: USART handle pointer
  * @retval None
  */
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08a      	sub	sp, #40	@ 0x28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c50:	f107 0314 	add.w	r3, r7, #20
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	605a      	str	r2, [r3, #4]
 8003c5a:	609a      	str	r2, [r3, #8]
 8003c5c:	60da      	str	r2, [r3, #12]
 8003c5e:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a19      	ldr	r2, [pc, #100]	@ (8003ccc <HAL_USART_MspInit+0x84>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d12b      	bne.n	8003cc2 <HAL_USART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	613b      	str	r3, [r7, #16]
 8003c6e:	4b18      	ldr	r3, [pc, #96]	@ (8003cd0 <HAL_USART_MspInit+0x88>)
 8003c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c72:	4a17      	ldr	r2, [pc, #92]	@ (8003cd0 <HAL_USART_MspInit+0x88>)
 8003c74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c78:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c7a:	4b15      	ldr	r3, [pc, #84]	@ (8003cd0 <HAL_USART_MspInit+0x88>)
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c82:	613b      	str	r3, [r7, #16]
 8003c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c86:	2300      	movs	r3, #0
 8003c88:	60fb      	str	r3, [r7, #12]
 8003c8a:	4b11      	ldr	r3, [pc, #68]	@ (8003cd0 <HAL_USART_MspInit+0x88>)
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8e:	4a10      	ldr	r2, [pc, #64]	@ (8003cd0 <HAL_USART_MspInit+0x88>)
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c96:	4b0e      	ldr	r3, [pc, #56]	@ (8003cd0 <HAL_USART_MspInit+0x88>)
 8003c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8003ca2:	231c      	movs	r3, #28
 8003ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003cb2:	2307      	movs	r3, #7
 8003cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cb6:	f107 0314 	add.w	r3, r7, #20
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4805      	ldr	r0, [pc, #20]	@ (8003cd4 <HAL_USART_MspInit+0x8c>)
 8003cbe:	f000 fb57 	bl	8004370 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8003cc2:	bf00      	nop
 8003cc4:	3728      	adds	r7, #40	@ 0x28
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	40004400 	.word	0x40004400
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	40020000 	.word	0x40020000

08003cd8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b08e      	sub	sp, #56	@ 0x38
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8003ce8:	2300      	movs	r3, #0
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	4b33      	ldr	r3, [pc, #204]	@ (8003dbc <HAL_InitTick+0xe4>)
 8003cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf0:	4a32      	ldr	r2, [pc, #200]	@ (8003dbc <HAL_InitTick+0xe4>)
 8003cf2:	f043 0302 	orr.w	r3, r3, #2
 8003cf6:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cf8:	4b30      	ldr	r3, [pc, #192]	@ (8003dbc <HAL_InitTick+0xe4>)
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	60fb      	str	r3, [r7, #12]
 8003d02:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d04:	f107 0210 	add.w	r2, r7, #16
 8003d08:	f107 0314 	add.w	r3, r7, #20
 8003d0c:	4611      	mov	r1, r2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f003 fbb2 	bl	8007478 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003d14:	6a3b      	ldr	r3, [r7, #32]
 8003d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d103      	bne.n	8003d26 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003d1e:	f003 fb83 	bl	8007428 <HAL_RCC_GetPCLK1Freq>
 8003d22:	6378      	str	r0, [r7, #52]	@ 0x34
 8003d24:	e004      	b.n	8003d30 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003d26:	f003 fb7f 	bl	8007428 <HAL_RCC_GetPCLK1Freq>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d32:	4a23      	ldr	r2, [pc, #140]	@ (8003dc0 <HAL_InitTick+0xe8>)
 8003d34:	fba2 2303 	umull	r2, r3, r2, r3
 8003d38:	0c9b      	lsrs	r3, r3, #18
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8003d3e:	4b21      	ldr	r3, [pc, #132]	@ (8003dc4 <HAL_InitTick+0xec>)
 8003d40:	4a21      	ldr	r2, [pc, #132]	@ (8003dc8 <HAL_InitTick+0xf0>)
 8003d42:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8003d44:	4b1f      	ldr	r3, [pc, #124]	@ (8003dc4 <HAL_InitTick+0xec>)
 8003d46:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003d4a:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8003d4c:	4a1d      	ldr	r2, [pc, #116]	@ (8003dc4 <HAL_InitTick+0xec>)
 8003d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d50:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8003d52:	4b1c      	ldr	r3, [pc, #112]	@ (8003dc4 <HAL_InitTick+0xec>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d58:	4b1a      	ldr	r3, [pc, #104]	@ (8003dc4 <HAL_InitTick+0xec>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d5e:	4b19      	ldr	r3, [pc, #100]	@ (8003dc4 <HAL_InitTick+0xec>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8003d64:	4817      	ldr	r0, [pc, #92]	@ (8003dc4 <HAL_InitTick+0xec>)
 8003d66:	f004 f999 	bl	800809c <HAL_TIM_Base_Init>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003d70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d11b      	bne.n	8003db0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8003d78:	4812      	ldr	r0, [pc, #72]	@ (8003dc4 <HAL_InitTick+0xec>)
 8003d7a:	f004 f9e9 	bl	8008150 <HAL_TIM_Base_Start_IT>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003d84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d111      	bne.n	8003db0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003d8c:	201d      	movs	r0, #29
 8003d8e:	f000 fa91 	bl	80042b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b0f      	cmp	r3, #15
 8003d96:	d808      	bhi.n	8003daa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8003d98:	2200      	movs	r2, #0
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	201d      	movs	r0, #29
 8003d9e:	f000 fa6d 	bl	800427c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003da2:	4a0a      	ldr	r2, [pc, #40]	@ (8003dcc <HAL_InitTick+0xf4>)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6013      	str	r3, [r2, #0]
 8003da8:	e002      	b.n	8003db0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003db0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3738      	adds	r7, #56	@ 0x38
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	431bde83 	.word	0x431bde83
 8003dc4:	20000aa8 	.word	0x20000aa8
 8003dc8:	40000400 	.word	0x40000400
 8003dcc:	200000ac 	.word	0x200000ac

08003dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003dd4:	bf00      	nop
 8003dd6:	e7fd      	b.n	8003dd4 <NMI_Handler+0x4>

08003dd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ddc:	bf00      	nop
 8003dde:	e7fd      	b.n	8003ddc <HardFault_Handler+0x4>

08003de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003de4:	bf00      	nop
 8003de6:	e7fd      	b.n	8003de4 <MemManage_Handler+0x4>

08003de8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003dec:	bf00      	nop
 8003dee:	e7fd      	b.n	8003dec <BusFault_Handler+0x4>

08003df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003df4:	bf00      	nop
 8003df6:	e7fd      	b.n	8003df4 <UsageFault_Handler+0x4>

08003df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dfc:	bf00      	nop
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8003e0a:	2004      	movs	r0, #4
 8003e0c:	f000 fc4e 	bl	80046ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003e10:	bf00      	nop
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003e18:	4802      	ldr	r0, [pc, #8]	@ (8003e24 <TIM3_IRQHandler+0x10>)
 8003e1a:	f004 f9fb 	bl	8008214 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003e1e:	bf00      	nop
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	20000aa8 	.word	0x20000aa8

08003e28 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003e2c:	4802      	ldr	r0, [pc, #8]	@ (8003e38 <OTG_FS_IRQHandler+0x10>)
 8003e2e:	f001 fdbd 	bl	80059ac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003e32:	bf00      	nop
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	2000552c 	.word	0x2000552c

08003e3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
  return 1;
 8003e40:	2301      	movs	r3, #1
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <_kill>:

int _kill(int pid, int sig)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003e56:	f00c fc8b 	bl	8010770 <__errno>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2216      	movs	r2, #22
 8003e5e:	601a      	str	r2, [r3, #0]
  return -1;
 8003e60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3708      	adds	r7, #8
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <_exit>:

void _exit (int status)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003e74:	f04f 31ff 	mov.w	r1, #4294967295
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7ff ffe7 	bl	8003e4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003e7e:	bf00      	nop
 8003e80:	e7fd      	b.n	8003e7e <_exit+0x12>

08003e82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b086      	sub	sp, #24
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	60f8      	str	r0, [r7, #12]
 8003e8a:	60b9      	str	r1, [r7, #8]
 8003e8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e8e:	2300      	movs	r3, #0
 8003e90:	617b      	str	r3, [r7, #20]
 8003e92:	e00a      	b.n	8003eaa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003e94:	f3af 8000 	nop.w
 8003e98:	4601      	mov	r1, r0
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	1c5a      	adds	r2, r3, #1
 8003e9e:	60ba      	str	r2, [r7, #8]
 8003ea0:	b2ca      	uxtb	r2, r1
 8003ea2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	617b      	str	r3, [r7, #20]
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	dbf0      	blt.n	8003e94 <_read+0x12>
  }

  return len;
 8003eb2:	687b      	ldr	r3, [r7, #4]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	e009      	b.n	8003ee2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	1c5a      	adds	r2, r3, #1
 8003ed2:	60ba      	str	r2, [r7, #8]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	617b      	str	r3, [r7, #20]
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	dbf1      	blt.n	8003ece <_write+0x12>
  }
  return len;
 8003eea:	687b      	ldr	r3, [r7, #4]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3718      	adds	r7, #24
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <_close>:

int _close(int file)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003efc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f1c:	605a      	str	r2, [r3, #4]
  return 0;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <_isatty>:

int _isatty(int file)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f34:	2301      	movs	r3, #1
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b085      	sub	sp, #20
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	60f8      	str	r0, [r7, #12]
 8003f4a:	60b9      	str	r1, [r7, #8]
 8003f4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f64:	4a14      	ldr	r2, [pc, #80]	@ (8003fb8 <_sbrk+0x5c>)
 8003f66:	4b15      	ldr	r3, [pc, #84]	@ (8003fbc <_sbrk+0x60>)
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f70:	4b13      	ldr	r3, [pc, #76]	@ (8003fc0 <_sbrk+0x64>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d102      	bne.n	8003f7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f78:	4b11      	ldr	r3, [pc, #68]	@ (8003fc0 <_sbrk+0x64>)
 8003f7a:	4a12      	ldr	r2, [pc, #72]	@ (8003fc4 <_sbrk+0x68>)
 8003f7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f7e:	4b10      	ldr	r3, [pc, #64]	@ (8003fc0 <_sbrk+0x64>)
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4413      	add	r3, r2
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d207      	bcs.n	8003f9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f8c:	f00c fbf0 	bl	8010770 <__errno>
 8003f90:	4603      	mov	r3, r0
 8003f92:	220c      	movs	r2, #12
 8003f94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f96:	f04f 33ff 	mov.w	r3, #4294967295
 8003f9a:	e009      	b.n	8003fb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f9c:	4b08      	ldr	r3, [pc, #32]	@ (8003fc0 <_sbrk+0x64>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003fa2:	4b07      	ldr	r3, [pc, #28]	@ (8003fc0 <_sbrk+0x64>)
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4413      	add	r3, r2
 8003faa:	4a05      	ldr	r2, [pc, #20]	@ (8003fc0 <_sbrk+0x64>)
 8003fac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003fae:	68fb      	ldr	r3, [r7, #12]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	20010000 	.word	0x20010000
 8003fbc:	00000400 	.word	0x00000400
 8003fc0:	20000af0 	.word	0x20000af0
 8003fc4:	20005d80 	.word	0x20005d80

08003fc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fcc:	4b06      	ldr	r3, [pc, #24]	@ (8003fe8 <SystemInit+0x20>)
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd2:	4a05      	ldr	r2, [pc, #20]	@ (8003fe8 <SystemInit+0x20>)
 8003fd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003fd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003fdc:	bf00      	nop
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	e000ed00 	.word	0xe000ed00

08003fec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003fec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004024 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003ff0:	f7ff ffea 	bl	8003fc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ff4:	480c      	ldr	r0, [pc, #48]	@ (8004028 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003ff6:	490d      	ldr	r1, [pc, #52]	@ (800402c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8004030 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ffc:	e002      	b.n	8004004 <LoopCopyDataInit>

08003ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004002:	3304      	adds	r3, #4

08004004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004008:	d3f9      	bcc.n	8003ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800400a:	4a0a      	ldr	r2, [pc, #40]	@ (8004034 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800400c:	4c0a      	ldr	r4, [pc, #40]	@ (8004038 <LoopFillZerobss+0x22>)
  movs r3, #0
 800400e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004010:	e001      	b.n	8004016 <LoopFillZerobss>

08004012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004014:	3204      	adds	r2, #4

08004016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004018:	d3fb      	bcc.n	8004012 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800401a:	f00c fbaf 	bl	801077c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800401e:	f7fe fcd1 	bl	80029c4 <main>
  bx  lr    
 8004022:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004024:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800402c:	20000370 	.word	0x20000370
  ldr r2, =_sidata
 8004030:	080146c0 	.word	0x080146c0
  ldr r2, =_sbss
 8004034:	20000370 	.word	0x20000370
  ldr r4, =_ebss
 8004038:	20005d7c 	.word	0x20005d7c

0800403c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800403c:	e7fe      	b.n	800403c <ADC_IRQHandler>
	...

08004040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004044:	4b0e      	ldr	r3, [pc, #56]	@ (8004080 <HAL_Init+0x40>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a0d      	ldr	r2, [pc, #52]	@ (8004080 <HAL_Init+0x40>)
 800404a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800404e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004050:	4b0b      	ldr	r3, [pc, #44]	@ (8004080 <HAL_Init+0x40>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a0a      	ldr	r2, [pc, #40]	@ (8004080 <HAL_Init+0x40>)
 8004056:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800405a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800405c:	4b08      	ldr	r3, [pc, #32]	@ (8004080 <HAL_Init+0x40>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a07      	ldr	r2, [pc, #28]	@ (8004080 <HAL_Init+0x40>)
 8004062:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004066:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004068:	2003      	movs	r0, #3
 800406a:	f000 f8fc 	bl	8004266 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800406e:	200f      	movs	r0, #15
 8004070:	f7ff fe32 	bl	8003cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004074:	f7ff fcc2 	bl	80039fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	40023c00 	.word	0x40023c00

08004084 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004088:	4b06      	ldr	r3, [pc, #24]	@ (80040a4 <HAL_IncTick+0x20>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	461a      	mov	r2, r3
 800408e:	4b06      	ldr	r3, [pc, #24]	@ (80040a8 <HAL_IncTick+0x24>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4413      	add	r3, r2
 8004094:	4a04      	ldr	r2, [pc, #16]	@ (80040a8 <HAL_IncTick+0x24>)
 8004096:	6013      	str	r3, [r2, #0]
}
 8004098:	bf00      	nop
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	200000b0 	.word	0x200000b0
 80040a8:	20000af4 	.word	0x20000af4

080040ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  return uwTick;
 80040b0:	4b03      	ldr	r3, [pc, #12]	@ (80040c0 <HAL_GetTick+0x14>)
 80040b2:	681b      	ldr	r3, [r3, #0]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	20000af4 	.word	0x20000af4

080040c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040cc:	f7ff ffee 	bl	80040ac <HAL_GetTick>
 80040d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040dc:	d005      	beq.n	80040ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040de:	4b0a      	ldr	r3, [pc, #40]	@ (8004108 <HAL_Delay+0x44>)
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	461a      	mov	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4413      	add	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80040ea:	bf00      	nop
 80040ec:	f7ff ffde 	bl	80040ac <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d8f7      	bhi.n	80040ec <HAL_Delay+0x28>
  {
  }
}
 80040fc:	bf00      	nop
 80040fe:	bf00      	nop
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	200000b0 	.word	0x200000b0

0800410c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800411c:	4b0c      	ldr	r3, [pc, #48]	@ (8004150 <__NVIC_SetPriorityGrouping+0x44>)
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004128:	4013      	ands	r3, r2
 800412a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004134:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004138:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800413c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800413e:	4a04      	ldr	r2, [pc, #16]	@ (8004150 <__NVIC_SetPriorityGrouping+0x44>)
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	60d3      	str	r3, [r2, #12]
}
 8004144:	bf00      	nop
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	e000ed00 	.word	0xe000ed00

08004154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004158:	4b04      	ldr	r3, [pc, #16]	@ (800416c <__NVIC_GetPriorityGrouping+0x18>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	0a1b      	lsrs	r3, r3, #8
 800415e:	f003 0307 	and.w	r3, r3, #7
}
 8004162:	4618      	mov	r0, r3
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	e000ed00 	.word	0xe000ed00

08004170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	4603      	mov	r3, r0
 8004178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800417a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800417e:	2b00      	cmp	r3, #0
 8004180:	db0b      	blt.n	800419a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004182:	79fb      	ldrb	r3, [r7, #7]
 8004184:	f003 021f 	and.w	r2, r3, #31
 8004188:	4907      	ldr	r1, [pc, #28]	@ (80041a8 <__NVIC_EnableIRQ+0x38>)
 800418a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418e:	095b      	lsrs	r3, r3, #5
 8004190:	2001      	movs	r0, #1
 8004192:	fa00 f202 	lsl.w	r2, r0, r2
 8004196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800419a:	bf00      	nop
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	e000e100 	.word	0xe000e100

080041ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	4603      	mov	r3, r0
 80041b4:	6039      	str	r1, [r7, #0]
 80041b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	db0a      	blt.n	80041d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	b2da      	uxtb	r2, r3
 80041c4:	490c      	ldr	r1, [pc, #48]	@ (80041f8 <__NVIC_SetPriority+0x4c>)
 80041c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ca:	0112      	lsls	r2, r2, #4
 80041cc:	b2d2      	uxtb	r2, r2
 80041ce:	440b      	add	r3, r1
 80041d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041d4:	e00a      	b.n	80041ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	4908      	ldr	r1, [pc, #32]	@ (80041fc <__NVIC_SetPriority+0x50>)
 80041dc:	79fb      	ldrb	r3, [r7, #7]
 80041de:	f003 030f 	and.w	r3, r3, #15
 80041e2:	3b04      	subs	r3, #4
 80041e4:	0112      	lsls	r2, r2, #4
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	440b      	add	r3, r1
 80041ea:	761a      	strb	r2, [r3, #24]
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	e000e100 	.word	0xe000e100
 80041fc:	e000ed00 	.word	0xe000ed00

08004200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004200:	b480      	push	{r7}
 8004202:	b089      	sub	sp, #36	@ 0x24
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f003 0307 	and.w	r3, r3, #7
 8004212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	f1c3 0307 	rsb	r3, r3, #7
 800421a:	2b04      	cmp	r3, #4
 800421c:	bf28      	it	cs
 800421e:	2304      	movcs	r3, #4
 8004220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	3304      	adds	r3, #4
 8004226:	2b06      	cmp	r3, #6
 8004228:	d902      	bls.n	8004230 <NVIC_EncodePriority+0x30>
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	3b03      	subs	r3, #3
 800422e:	e000      	b.n	8004232 <NVIC_EncodePriority+0x32>
 8004230:	2300      	movs	r3, #0
 8004232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004234:	f04f 32ff 	mov.w	r2, #4294967295
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	fa02 f303 	lsl.w	r3, r2, r3
 800423e:	43da      	mvns	r2, r3
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	401a      	ands	r2, r3
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004248:	f04f 31ff 	mov.w	r1, #4294967295
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	fa01 f303 	lsl.w	r3, r1, r3
 8004252:	43d9      	mvns	r1, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004258:	4313      	orrs	r3, r2
         );
}
 800425a:	4618      	mov	r0, r3
 800425c:	3724      	adds	r7, #36	@ 0x24
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b082      	sub	sp, #8
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7ff ff4c 	bl	800410c <__NVIC_SetPriorityGrouping>
}
 8004274:	bf00      	nop
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	4603      	mov	r3, r0
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800428a:	2300      	movs	r3, #0
 800428c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800428e:	f7ff ff61 	bl	8004154 <__NVIC_GetPriorityGrouping>
 8004292:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	68b9      	ldr	r1, [r7, #8]
 8004298:	6978      	ldr	r0, [r7, #20]
 800429a:	f7ff ffb1 	bl	8004200 <NVIC_EncodePriority>
 800429e:	4602      	mov	r2, r0
 80042a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042a4:	4611      	mov	r1, r2
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7ff ff80 	bl	80041ac <__NVIC_SetPriority>
}
 80042ac:	bf00      	nop
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	4603      	mov	r3, r0
 80042bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff ff54 	bl	8004170 <__NVIC_EnableIRQ>
}
 80042c8:	bf00      	nop
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e00e      	b.n	8004300 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	795b      	ldrb	r3, [r3, #5]
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d105      	bne.n	80042f8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7ff fbae 	bl	8003a54 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8004308:	b480      	push	{r7}
 800430a:	b087      	sub	sp, #28
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8004314:	2300      	movs	r3, #0
 8004316:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2202      	movs	r2, #2
 800431c:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f042 0201 	orr.w	r2, r2, #1
 800432c:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800432e:	2300      	movs	r3, #0
 8004330:	617b      	str	r3, [r7, #20]
 8004332:	e00a      	b.n	800434a <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	441a      	add	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6812      	ldr	r2, [r2, #0]
 8004342:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	3301      	adds	r3, #1
 8004348:	617b      	str	r3, [r7, #20]
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	429a      	cmp	r2, r3
 8004350:	d3f0      	bcc.n	8004334 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2201      	movs	r2, #1
 800435e:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8004360:	693b      	ldr	r3, [r7, #16]
}
 8004362:	4618      	mov	r0, r3
 8004364:	371c      	adds	r7, #28
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
	...

08004370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004370:	b480      	push	{r7}
 8004372:	b089      	sub	sp, #36	@ 0x24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800437a:	2300      	movs	r3, #0
 800437c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800437e:	2300      	movs	r3, #0
 8004380:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004382:	2300      	movs	r3, #0
 8004384:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004386:	2300      	movs	r3, #0
 8004388:	61fb      	str	r3, [r7, #28]
 800438a:	e159      	b.n	8004640 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800438c:	2201      	movs	r2, #1
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	fa02 f303 	lsl.w	r3, r2, r3
 8004394:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	4013      	ands	r3, r2
 800439e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	f040 8148 	bne.w	800463a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d005      	beq.n	80043c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d130      	bne.n	8004424 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	2203      	movs	r2, #3
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	43db      	mvns	r3, r3
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	4013      	ands	r3, r2
 80043d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	fa02 f303 	lsl.w	r3, r2, r3
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043f8:	2201      	movs	r2, #1
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004400:	43db      	mvns	r3, r3
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	4013      	ands	r3, r2
 8004406:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	091b      	lsrs	r3, r3, #4
 800440e:	f003 0201 	and.w	r2, r3, #1
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	fa02 f303 	lsl.w	r3, r2, r3
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	4313      	orrs	r3, r2
 800441c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f003 0303 	and.w	r3, r3, #3
 800442c:	2b03      	cmp	r3, #3
 800442e:	d017      	beq.n	8004460 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	2203      	movs	r2, #3
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	43db      	mvns	r3, r3
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	4013      	ands	r3, r2
 8004446:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	4313      	orrs	r3, r2
 8004458:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f003 0303 	and.w	r3, r3, #3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d123      	bne.n	80044b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	08da      	lsrs	r2, r3, #3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3208      	adds	r2, #8
 8004474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004478:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	220f      	movs	r2, #15
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	43db      	mvns	r3, r3
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	4013      	ands	r3, r2
 800448e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	691a      	ldr	r2, [r3, #16]
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	fa02 f303 	lsl.w	r3, r2, r3
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	08da      	lsrs	r2, r3, #3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	3208      	adds	r2, #8
 80044ae:	69b9      	ldr	r1, [r7, #24]
 80044b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	2203      	movs	r2, #3
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	43db      	mvns	r3, r3
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	4013      	ands	r3, r2
 80044ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f003 0203 	and.w	r2, r3, #3
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	fa02 f303 	lsl.w	r3, r2, r3
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	4313      	orrs	r3, r2
 80044e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 80a2 	beq.w	800463a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044f6:	2300      	movs	r3, #0
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	4b57      	ldr	r3, [pc, #348]	@ (8004658 <HAL_GPIO_Init+0x2e8>)
 80044fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044fe:	4a56      	ldr	r2, [pc, #344]	@ (8004658 <HAL_GPIO_Init+0x2e8>)
 8004500:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004504:	6453      	str	r3, [r2, #68]	@ 0x44
 8004506:	4b54      	ldr	r3, [pc, #336]	@ (8004658 <HAL_GPIO_Init+0x2e8>)
 8004508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800450a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004512:	4a52      	ldr	r2, [pc, #328]	@ (800465c <HAL_GPIO_Init+0x2ec>)
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	089b      	lsrs	r3, r3, #2
 8004518:	3302      	adds	r3, #2
 800451a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800451e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	f003 0303 	and.w	r3, r3, #3
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	220f      	movs	r2, #15
 800452a:	fa02 f303 	lsl.w	r3, r2, r3
 800452e:	43db      	mvns	r3, r3
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	4013      	ands	r3, r2
 8004534:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a49      	ldr	r2, [pc, #292]	@ (8004660 <HAL_GPIO_Init+0x2f0>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d019      	beq.n	8004572 <HAL_GPIO_Init+0x202>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a48      	ldr	r2, [pc, #288]	@ (8004664 <HAL_GPIO_Init+0x2f4>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d013      	beq.n	800456e <HAL_GPIO_Init+0x1fe>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a47      	ldr	r2, [pc, #284]	@ (8004668 <HAL_GPIO_Init+0x2f8>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d00d      	beq.n	800456a <HAL_GPIO_Init+0x1fa>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a46      	ldr	r2, [pc, #280]	@ (800466c <HAL_GPIO_Init+0x2fc>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d007      	beq.n	8004566 <HAL_GPIO_Init+0x1f6>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a45      	ldr	r2, [pc, #276]	@ (8004670 <HAL_GPIO_Init+0x300>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d101      	bne.n	8004562 <HAL_GPIO_Init+0x1f2>
 800455e:	2304      	movs	r3, #4
 8004560:	e008      	b.n	8004574 <HAL_GPIO_Init+0x204>
 8004562:	2307      	movs	r3, #7
 8004564:	e006      	b.n	8004574 <HAL_GPIO_Init+0x204>
 8004566:	2303      	movs	r3, #3
 8004568:	e004      	b.n	8004574 <HAL_GPIO_Init+0x204>
 800456a:	2302      	movs	r3, #2
 800456c:	e002      	b.n	8004574 <HAL_GPIO_Init+0x204>
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <HAL_GPIO_Init+0x204>
 8004572:	2300      	movs	r3, #0
 8004574:	69fa      	ldr	r2, [r7, #28]
 8004576:	f002 0203 	and.w	r2, r2, #3
 800457a:	0092      	lsls	r2, r2, #2
 800457c:	4093      	lsls	r3, r2
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	4313      	orrs	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004584:	4935      	ldr	r1, [pc, #212]	@ (800465c <HAL_GPIO_Init+0x2ec>)
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	089b      	lsrs	r3, r3, #2
 800458a:	3302      	adds	r3, #2
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004592:	4b38      	ldr	r3, [pc, #224]	@ (8004674 <HAL_GPIO_Init+0x304>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	43db      	mvns	r3, r3
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	4013      	ands	r3, r2
 80045a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045b6:	4a2f      	ldr	r2, [pc, #188]	@ (8004674 <HAL_GPIO_Init+0x304>)
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004674 <HAL_GPIO_Init+0x304>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	43db      	mvns	r3, r3
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	4013      	ands	r3, r2
 80045ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045e0:	4a24      	ldr	r2, [pc, #144]	@ (8004674 <HAL_GPIO_Init+0x304>)
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045e6:	4b23      	ldr	r3, [pc, #140]	@ (8004674 <HAL_GPIO_Init+0x304>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	43db      	mvns	r3, r3
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	4013      	ands	r3, r2
 80045f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800460a:	4a1a      	ldr	r2, [pc, #104]	@ (8004674 <HAL_GPIO_Init+0x304>)
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004610:	4b18      	ldr	r3, [pc, #96]	@ (8004674 <HAL_GPIO_Init+0x304>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	43db      	mvns	r3, r3
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	4013      	ands	r3, r2
 800461e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	4313      	orrs	r3, r2
 8004632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004634:	4a0f      	ldr	r2, [pc, #60]	@ (8004674 <HAL_GPIO_Init+0x304>)
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	3301      	adds	r3, #1
 800463e:	61fb      	str	r3, [r7, #28]
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	2b0f      	cmp	r3, #15
 8004644:	f67f aea2 	bls.w	800438c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004648:	bf00      	nop
 800464a:	bf00      	nop
 800464c:	3724      	adds	r7, #36	@ 0x24
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40023800 	.word	0x40023800
 800465c:	40013800 	.word	0x40013800
 8004660:	40020000 	.word	0x40020000
 8004664:	40020400 	.word	0x40020400
 8004668:	40020800 	.word	0x40020800
 800466c:	40020c00 	.word	0x40020c00
 8004670:	40021000 	.word	0x40021000
 8004674:	40013c00 	.word	0x40013c00

08004678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	460b      	mov	r3, r1
 8004682:	807b      	strh	r3, [r7, #2]
 8004684:	4613      	mov	r3, r2
 8004686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004688:	787b      	ldrb	r3, [r7, #1]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800468e:	887a      	ldrh	r2, [r7, #2]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004694:	e003      	b.n	800469e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004696:	887b      	ldrh	r3, [r7, #2]
 8004698:	041a      	lsls	r2, r3, #16
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	619a      	str	r2, [r3, #24]
}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
	...

080046ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	4603      	mov	r3, r0
 80046b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80046b6:	4b08      	ldr	r3, [pc, #32]	@ (80046d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046b8:	695a      	ldr	r2, [r3, #20]
 80046ba:	88fb      	ldrh	r3, [r7, #6]
 80046bc:	4013      	ands	r3, r2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d006      	beq.n	80046d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046c2:	4a05      	ldr	r2, [pc, #20]	@ (80046d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046c4:	88fb      	ldrh	r3, [r7, #6]
 80046c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046c8:	88fb      	ldrh	r3, [r7, #6]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fe fc20 	bl	8002f10 <HAL_GPIO_EXTI_Callback>
  }
}
 80046d0:	bf00      	nop
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	40013c00 	.word	0x40013c00

080046dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e12b      	b.n	8004946 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d106      	bne.n	8004708 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7ff f9c8 	bl	8003a98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2224      	movs	r2, #36	@ 0x24
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0201 	bic.w	r2, r2, #1
 800471e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800472e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800473e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004740:	f002 fe72 	bl	8007428 <HAL_RCC_GetPCLK1Freq>
 8004744:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	4a81      	ldr	r2, [pc, #516]	@ (8004950 <HAL_I2C_Init+0x274>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d807      	bhi.n	8004760 <HAL_I2C_Init+0x84>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4a80      	ldr	r2, [pc, #512]	@ (8004954 <HAL_I2C_Init+0x278>)
 8004754:	4293      	cmp	r3, r2
 8004756:	bf94      	ite	ls
 8004758:	2301      	movls	r3, #1
 800475a:	2300      	movhi	r3, #0
 800475c:	b2db      	uxtb	r3, r3
 800475e:	e006      	b.n	800476e <HAL_I2C_Init+0x92>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4a7d      	ldr	r2, [pc, #500]	@ (8004958 <HAL_I2C_Init+0x27c>)
 8004764:	4293      	cmp	r3, r2
 8004766:	bf94      	ite	ls
 8004768:	2301      	movls	r3, #1
 800476a:	2300      	movhi	r3, #0
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e0e7      	b.n	8004946 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4a78      	ldr	r2, [pc, #480]	@ (800495c <HAL_I2C_Init+0x280>)
 800477a:	fba2 2303 	umull	r2, r3, r2, r3
 800477e:	0c9b      	lsrs	r3, r3, #18
 8004780:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	430a      	orrs	r2, r1
 8004794:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	4a6a      	ldr	r2, [pc, #424]	@ (8004950 <HAL_I2C_Init+0x274>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d802      	bhi.n	80047b0 <HAL_I2C_Init+0xd4>
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	3301      	adds	r3, #1
 80047ae:	e009      	b.n	80047c4 <HAL_I2C_Init+0xe8>
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80047b6:	fb02 f303 	mul.w	r3, r2, r3
 80047ba:	4a69      	ldr	r2, [pc, #420]	@ (8004960 <HAL_I2C_Init+0x284>)
 80047bc:	fba2 2303 	umull	r2, r3, r2, r3
 80047c0:	099b      	lsrs	r3, r3, #6
 80047c2:	3301      	adds	r3, #1
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6812      	ldr	r2, [r2, #0]
 80047c8:	430b      	orrs	r3, r1
 80047ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80047d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	495c      	ldr	r1, [pc, #368]	@ (8004950 <HAL_I2C_Init+0x274>)
 80047e0:	428b      	cmp	r3, r1
 80047e2:	d819      	bhi.n	8004818 <HAL_I2C_Init+0x13c>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	1e59      	subs	r1, r3, #1
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80047f2:	1c59      	adds	r1, r3, #1
 80047f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80047f8:	400b      	ands	r3, r1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00a      	beq.n	8004814 <HAL_I2C_Init+0x138>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	1e59      	subs	r1, r3, #1
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	fbb1 f3f3 	udiv	r3, r1, r3
 800480c:	3301      	adds	r3, #1
 800480e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004812:	e051      	b.n	80048b8 <HAL_I2C_Init+0x1dc>
 8004814:	2304      	movs	r3, #4
 8004816:	e04f      	b.n	80048b8 <HAL_I2C_Init+0x1dc>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d111      	bne.n	8004844 <HAL_I2C_Init+0x168>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	1e58      	subs	r0, r3, #1
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6859      	ldr	r1, [r3, #4]
 8004828:	460b      	mov	r3, r1
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	440b      	add	r3, r1
 800482e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004832:	3301      	adds	r3, #1
 8004834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004838:	2b00      	cmp	r3, #0
 800483a:	bf0c      	ite	eq
 800483c:	2301      	moveq	r3, #1
 800483e:	2300      	movne	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	e012      	b.n	800486a <HAL_I2C_Init+0x18e>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	1e58      	subs	r0, r3, #1
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6859      	ldr	r1, [r3, #4]
 800484c:	460b      	mov	r3, r1
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	0099      	lsls	r1, r3, #2
 8004854:	440b      	add	r3, r1
 8004856:	fbb0 f3f3 	udiv	r3, r0, r3
 800485a:	3301      	adds	r3, #1
 800485c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004860:	2b00      	cmp	r3, #0
 8004862:	bf0c      	ite	eq
 8004864:	2301      	moveq	r3, #1
 8004866:	2300      	movne	r3, #0
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <HAL_I2C_Init+0x196>
 800486e:	2301      	movs	r3, #1
 8004870:	e022      	b.n	80048b8 <HAL_I2C_Init+0x1dc>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10e      	bne.n	8004898 <HAL_I2C_Init+0x1bc>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	1e58      	subs	r0, r3, #1
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6859      	ldr	r1, [r3, #4]
 8004882:	460b      	mov	r3, r1
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	440b      	add	r3, r1
 8004888:	fbb0 f3f3 	udiv	r3, r0, r3
 800488c:	3301      	adds	r3, #1
 800488e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004892:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004896:	e00f      	b.n	80048b8 <HAL_I2C_Init+0x1dc>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	1e58      	subs	r0, r3, #1
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6859      	ldr	r1, [r3, #4]
 80048a0:	460b      	mov	r3, r1
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	440b      	add	r3, r1
 80048a6:	0099      	lsls	r1, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ae:	3301      	adds	r3, #1
 80048b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	6809      	ldr	r1, [r1, #0]
 80048bc:	4313      	orrs	r3, r2
 80048be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	69da      	ldr	r2, [r3, #28]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	431a      	orrs	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80048e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	6911      	ldr	r1, [r2, #16]
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	68d2      	ldr	r2, [r2, #12]
 80048f2:	4311      	orrs	r1, r2
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6812      	ldr	r2, [r2, #0]
 80048f8:	430b      	orrs	r3, r1
 80048fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695a      	ldr	r2, [r3, #20]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 0201 	orr.w	r2, r2, #1
 8004926:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2220      	movs	r2, #32
 8004932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	000186a0 	.word	0x000186a0
 8004954:	001e847f 	.word	0x001e847f
 8004958:	003d08ff 	.word	0x003d08ff
 800495c:	431bde83 	.word	0x431bde83
 8004960:	10624dd3 	.word	0x10624dd3

08004964 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af02      	add	r7, sp, #8
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	4608      	mov	r0, r1
 800496e:	4611      	mov	r1, r2
 8004970:	461a      	mov	r2, r3
 8004972:	4603      	mov	r3, r0
 8004974:	817b      	strh	r3, [r7, #10]
 8004976:	460b      	mov	r3, r1
 8004978:	813b      	strh	r3, [r7, #8]
 800497a:	4613      	mov	r3, r2
 800497c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800497e:	f7ff fb95 	bl	80040ac <HAL_GetTick>
 8004982:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b20      	cmp	r3, #32
 800498e:	f040 80d9 	bne.w	8004b44 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	2319      	movs	r3, #25
 8004998:	2201      	movs	r2, #1
 800499a:	496d      	ldr	r1, [pc, #436]	@ (8004b50 <HAL_I2C_Mem_Write+0x1ec>)
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 fc8b 	bl	80052b8 <I2C_WaitOnFlagUntilTimeout>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80049a8:	2302      	movs	r3, #2
 80049aa:	e0cc      	b.n	8004b46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d101      	bne.n	80049ba <HAL_I2C_Mem_Write+0x56>
 80049b6:	2302      	movs	r3, #2
 80049b8:	e0c5      	b.n	8004b46 <HAL_I2C_Mem_Write+0x1e2>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d007      	beq.n	80049e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0201 	orr.w	r2, r2, #1
 80049de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2221      	movs	r2, #33	@ 0x21
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2240      	movs	r2, #64	@ 0x40
 80049fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6a3a      	ldr	r2, [r7, #32]
 8004a0a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004a10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4a4d      	ldr	r2, [pc, #308]	@ (8004b54 <HAL_I2C_Mem_Write+0x1f0>)
 8004a20:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a22:	88f8      	ldrh	r0, [r7, #6]
 8004a24:	893a      	ldrh	r2, [r7, #8]
 8004a26:	8979      	ldrh	r1, [r7, #10]
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	9301      	str	r3, [sp, #4]
 8004a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	4603      	mov	r3, r0
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 fac2 	bl	8004fbc <I2C_RequestMemoryWrite>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d052      	beq.n	8004ae4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e081      	b.n	8004b46 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f000 fd50 	bl	80054ec <I2C_WaitOnTXEFlagUntilTimeout>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00d      	beq.n	8004a6e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d107      	bne.n	8004a6a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e06b      	b.n	8004b46 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a72:	781a      	ldrb	r2, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7e:	1c5a      	adds	r2, r3, #1
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	3b01      	subs	r3, #1
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b04      	cmp	r3, #4
 8004aaa:	d11b      	bne.n	8004ae4 <HAL_I2C_Mem_Write+0x180>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d017      	beq.n	8004ae4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab8:	781a      	ldrb	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac4:	1c5a      	adds	r2, r3, #1
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	3b01      	subs	r3, #1
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1aa      	bne.n	8004a42 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f000 fd43 	bl	800557c <I2C_WaitOnBTFFlagUntilTimeout>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00d      	beq.n	8004b18 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b00:	2b04      	cmp	r3, #4
 8004b02:	d107      	bne.n	8004b14 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b12:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e016      	b.n	8004b46 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b40:	2300      	movs	r3, #0
 8004b42:	e000      	b.n	8004b46 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004b44:	2302      	movs	r3, #2
  }
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3718      	adds	r7, #24
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	00100002 	.word	0x00100002
 8004b54:	ffff0000 	.word	0xffff0000

08004b58 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08c      	sub	sp, #48	@ 0x30
 8004b5c:	af02      	add	r7, sp, #8
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	4608      	mov	r0, r1
 8004b62:	4611      	mov	r1, r2
 8004b64:	461a      	mov	r2, r3
 8004b66:	4603      	mov	r3, r0
 8004b68:	817b      	strh	r3, [r7, #10]
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	813b      	strh	r3, [r7, #8]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b72:	f7ff fa9b 	bl	80040ac <HAL_GetTick>
 8004b76:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b20      	cmp	r3, #32
 8004b82:	f040 8214 	bne.w	8004fae <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	2319      	movs	r3, #25
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	497b      	ldr	r1, [pc, #492]	@ (8004d7c <HAL_I2C_Mem_Read+0x224>)
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f000 fb91 	bl	80052b8 <I2C_WaitOnFlagUntilTimeout>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e207      	b.n	8004fb0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d101      	bne.n	8004bae <HAL_I2C_Mem_Read+0x56>
 8004baa:	2302      	movs	r3, #2
 8004bac:	e200      	b.n	8004fb0 <HAL_I2C_Mem_Read+0x458>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d007      	beq.n	8004bd4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0201 	orr.w	r2, r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004be2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2222      	movs	r2, #34	@ 0x22
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2240      	movs	r2, #64	@ 0x40
 8004bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bfe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004c04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4a5b      	ldr	r2, [pc, #364]	@ (8004d80 <HAL_I2C_Mem_Read+0x228>)
 8004c14:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c16:	88f8      	ldrh	r0, [r7, #6]
 8004c18:	893a      	ldrh	r2, [r7, #8]
 8004c1a:	8979      	ldrh	r1, [r7, #10]
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1e:	9301      	str	r3, [sp, #4]
 8004c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	4603      	mov	r3, r0
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 fa5e 	bl	80050e8 <I2C_RequestMemoryRead>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e1bc      	b.n	8004fb0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d113      	bne.n	8004c66 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c3e:	2300      	movs	r3, #0
 8004c40:	623b      	str	r3, [r7, #32]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	623b      	str	r3, [r7, #32]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	623b      	str	r3, [r7, #32]
 8004c52:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	e190      	b.n	8004f88 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d11b      	bne.n	8004ca6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c7e:	2300      	movs	r3, #0
 8004c80:	61fb      	str	r3, [r7, #28]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	61fb      	str	r3, [r7, #28]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	61fb      	str	r3, [r7, #28]
 8004c92:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	e170      	b.n	8004f88 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d11b      	bne.n	8004ce6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cbc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ccc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61bb      	str	r3, [r7, #24]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	61bb      	str	r3, [r7, #24]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	61bb      	str	r3, [r7, #24]
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	e150      	b.n	8004f88 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	617b      	str	r3, [r7, #20]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	617b      	str	r3, [r7, #20]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	617b      	str	r3, [r7, #20]
 8004cfa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004cfc:	e144      	b.n	8004f88 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d02:	2b03      	cmp	r3, #3
 8004d04:	f200 80f1 	bhi.w	8004eea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d123      	bne.n	8004d58 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d12:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 fc79 	bl	800560c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e145      	b.n	8004fb0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	691a      	ldr	r2, [r3, #16]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2e:	b2d2      	uxtb	r2, r2
 8004d30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d36:	1c5a      	adds	r2, r3, #1
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d56:	e117      	b.n	8004f88 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d14e      	bne.n	8004dfe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d66:	2200      	movs	r2, #0
 8004d68:	4906      	ldr	r1, [pc, #24]	@ (8004d84 <HAL_I2C_Mem_Read+0x22c>)
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 faa4 	bl	80052b8 <I2C_WaitOnFlagUntilTimeout>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d008      	beq.n	8004d88 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e11a      	b.n	8004fb0 <HAL_I2C_Mem_Read+0x458>
 8004d7a:	bf00      	nop
 8004d7c:	00100002 	.word	0x00100002
 8004d80:	ffff0000 	.word	0xffff0000
 8004d84:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	691a      	ldr	r2, [r3, #16]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004daa:	1c5a      	adds	r2, r3, #1
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	691a      	ldr	r2, [r3, #16]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd4:	b2d2      	uxtb	r2, r2
 8004dd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ddc:	1c5a      	adds	r2, r3, #1
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004de6:	3b01      	subs	r3, #1
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	3b01      	subs	r3, #1
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004dfc:	e0c4      	b.n	8004f88 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e04:	2200      	movs	r2, #0
 8004e06:	496c      	ldr	r1, [pc, #432]	@ (8004fb8 <HAL_I2C_Mem_Read+0x460>)
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 fa55 	bl	80052b8 <I2C_WaitOnFlagUntilTimeout>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d001      	beq.n	8004e18 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e0cb      	b.n	8004fb0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	691a      	ldr	r2, [r3, #16]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e44:	3b01      	subs	r3, #1
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e60:	2200      	movs	r2, #0
 8004e62:	4955      	ldr	r1, [pc, #340]	@ (8004fb8 <HAL_I2C_Mem_Read+0x460>)
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 fa27 	bl	80052b8 <I2C_WaitOnFlagUntilTimeout>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e09d      	b.n	8004fb0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	691a      	ldr	r2, [r3, #16]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8e:	b2d2      	uxtb	r2, r2
 8004e90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e96:	1c5a      	adds	r2, r3, #1
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	691a      	ldr	r2, [r3, #16]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec0:	b2d2      	uxtb	r2, r2
 8004ec2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec8:	1c5a      	adds	r2, r3, #1
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ee8:	e04e      	b.n	8004f88 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 fb8c 	bl	800560c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e058      	b.n	8004fb0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	691a      	ldr	r2, [r3, #16]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	f003 0304 	and.w	r3, r3, #4
 8004f3a:	2b04      	cmp	r3, #4
 8004f3c:	d124      	bne.n	8004f88 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f42:	2b03      	cmp	r3, #3
 8004f44:	d107      	bne.n	8004f56 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f54:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	691a      	ldr	r2, [r3, #16]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f60:	b2d2      	uxtb	r2, r2
 8004f62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	3b01      	subs	r3, #1
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f47f aeb6 	bne.w	8004cfe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2220      	movs	r2, #32
 8004f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004faa:	2300      	movs	r3, #0
 8004fac:	e000      	b.n	8004fb0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004fae:	2302      	movs	r3, #2
  }
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3728      	adds	r7, #40	@ 0x28
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	00010004 	.word	0x00010004

08004fbc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b088      	sub	sp, #32
 8004fc0:	af02      	add	r7, sp, #8
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	4608      	mov	r0, r1
 8004fc6:	4611      	mov	r1, r2
 8004fc8:	461a      	mov	r2, r3
 8004fca:	4603      	mov	r3, r0
 8004fcc:	817b      	strh	r3, [r7, #10]
 8004fce:	460b      	mov	r3, r1
 8004fd0:	813b      	strh	r3, [r7, #8]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fe4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 f960 	bl	80052b8 <I2C_WaitOnFlagUntilTimeout>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00d      	beq.n	800501a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005008:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800500c:	d103      	bne.n	8005016 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005014:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e05f      	b.n	80050da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800501a:	897b      	ldrh	r3, [r7, #10]
 800501c:	b2db      	uxtb	r3, r3
 800501e:	461a      	mov	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005028:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800502a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502c:	6a3a      	ldr	r2, [r7, #32]
 800502e:	492d      	ldr	r1, [pc, #180]	@ (80050e4 <I2C_RequestMemoryWrite+0x128>)
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 f9bb 	bl	80053ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e04c      	b.n	80050da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005040:	2300      	movs	r3, #0
 8005042:	617b      	str	r3, [r7, #20]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005058:	6a39      	ldr	r1, [r7, #32]
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 fa46 	bl	80054ec <I2C_WaitOnTXEFlagUntilTimeout>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00d      	beq.n	8005082 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506a:	2b04      	cmp	r3, #4
 800506c:	d107      	bne.n	800507e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800507c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e02b      	b.n	80050da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005082:	88fb      	ldrh	r3, [r7, #6]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d105      	bne.n	8005094 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005088:	893b      	ldrh	r3, [r7, #8]
 800508a:	b2da      	uxtb	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	611a      	str	r2, [r3, #16]
 8005092:	e021      	b.n	80050d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005094:	893b      	ldrh	r3, [r7, #8]
 8005096:	0a1b      	lsrs	r3, r3, #8
 8005098:	b29b      	uxth	r3, r3
 800509a:	b2da      	uxtb	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050a4:	6a39      	ldr	r1, [r7, #32]
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 fa20 	bl	80054ec <I2C_WaitOnTXEFlagUntilTimeout>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00d      	beq.n	80050ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	d107      	bne.n	80050ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e005      	b.n	80050da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050ce:	893b      	ldrh	r3, [r7, #8]
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3718      	adds	r7, #24
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	00010002 	.word	0x00010002

080050e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b088      	sub	sp, #32
 80050ec:	af02      	add	r7, sp, #8
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	4608      	mov	r0, r1
 80050f2:	4611      	mov	r1, r2
 80050f4:	461a      	mov	r2, r3
 80050f6:	4603      	mov	r3, r0
 80050f8:	817b      	strh	r3, [r7, #10]
 80050fa:	460b      	mov	r3, r1
 80050fc:	813b      	strh	r3, [r7, #8]
 80050fe:	4613      	mov	r3, r2
 8005100:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005110:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005120:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	6a3b      	ldr	r3, [r7, #32]
 8005128:	2200      	movs	r2, #0
 800512a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 f8c2 	bl	80052b8 <I2C_WaitOnFlagUntilTimeout>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00d      	beq.n	8005156 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005144:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005148:	d103      	bne.n	8005152 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005150:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e0aa      	b.n	80052ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005156:	897b      	ldrh	r3, [r7, #10]
 8005158:	b2db      	uxtb	r3, r3
 800515a:	461a      	mov	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005164:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005168:	6a3a      	ldr	r2, [r7, #32]
 800516a:	4952      	ldr	r1, [pc, #328]	@ (80052b4 <I2C_RequestMemoryRead+0x1cc>)
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 f91d 	bl	80053ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e097      	b.n	80052ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800517c:	2300      	movs	r3, #0
 800517e:	617b      	str	r3, [r7, #20]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	617b      	str	r3, [r7, #20]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	617b      	str	r3, [r7, #20]
 8005190:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005192:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005194:	6a39      	ldr	r1, [r7, #32]
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f000 f9a8 	bl	80054ec <I2C_WaitOnTXEFlagUntilTimeout>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00d      	beq.n	80051be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a6:	2b04      	cmp	r3, #4
 80051a8:	d107      	bne.n	80051ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e076      	b.n	80052ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051be:	88fb      	ldrh	r3, [r7, #6]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d105      	bne.n	80051d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051c4:	893b      	ldrh	r3, [r7, #8]
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	611a      	str	r2, [r3, #16]
 80051ce:	e021      	b.n	8005214 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80051d0:	893b      	ldrh	r3, [r7, #8]
 80051d2:	0a1b      	lsrs	r3, r3, #8
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051e0:	6a39      	ldr	r1, [r7, #32]
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 f982 	bl	80054ec <I2C_WaitOnTXEFlagUntilTimeout>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00d      	beq.n	800520a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f2:	2b04      	cmp	r3, #4
 80051f4:	d107      	bne.n	8005206 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005204:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e050      	b.n	80052ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800520a:	893b      	ldrh	r3, [r7, #8]
 800520c:	b2da      	uxtb	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005214:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005216:	6a39      	ldr	r1, [r7, #32]
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 f967 	bl	80054ec <I2C_WaitOnTXEFlagUntilTimeout>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00d      	beq.n	8005240 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005228:	2b04      	cmp	r3, #4
 800522a:	d107      	bne.n	800523c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800523a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e035      	b.n	80052ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800524e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	2200      	movs	r2, #0
 8005258:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f000 f82b 	bl	80052b8 <I2C_WaitOnFlagUntilTimeout>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00d      	beq.n	8005284 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005272:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005276:	d103      	bne.n	8005280 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800527e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e013      	b.n	80052ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005284:	897b      	ldrh	r3, [r7, #10]
 8005286:	b2db      	uxtb	r3, r3
 8005288:	f043 0301 	orr.w	r3, r3, #1
 800528c:	b2da      	uxtb	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005296:	6a3a      	ldr	r2, [r7, #32]
 8005298:	4906      	ldr	r1, [pc, #24]	@ (80052b4 <I2C_RequestMemoryRead+0x1cc>)
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f000 f886 	bl	80053ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e000      	b.n	80052ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3718      	adds	r7, #24
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	00010002 	.word	0x00010002

080052b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	603b      	str	r3, [r7, #0]
 80052c4:	4613      	mov	r3, r2
 80052c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052c8:	e048      	b.n	800535c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d0:	d044      	beq.n	800535c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052d2:	f7fe feeb 	bl	80040ac <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d302      	bcc.n	80052e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d139      	bne.n	800535c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	0c1b      	lsrs	r3, r3, #16
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d10d      	bne.n	800530e <I2C_WaitOnFlagUntilTimeout+0x56>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	695b      	ldr	r3, [r3, #20]
 80052f8:	43da      	mvns	r2, r3
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	4013      	ands	r3, r2
 80052fe:	b29b      	uxth	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	bf0c      	ite	eq
 8005304:	2301      	moveq	r3, #1
 8005306:	2300      	movne	r3, #0
 8005308:	b2db      	uxtb	r3, r3
 800530a:	461a      	mov	r2, r3
 800530c:	e00c      	b.n	8005328 <I2C_WaitOnFlagUntilTimeout+0x70>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	43da      	mvns	r2, r3
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	4013      	ands	r3, r2
 800531a:	b29b      	uxth	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	bf0c      	ite	eq
 8005320:	2301      	moveq	r3, #1
 8005322:	2300      	movne	r3, #0
 8005324:	b2db      	uxtb	r3, r3
 8005326:	461a      	mov	r2, r3
 8005328:	79fb      	ldrb	r3, [r7, #7]
 800532a:	429a      	cmp	r2, r3
 800532c:	d116      	bne.n	800535c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2220      	movs	r2, #32
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005348:	f043 0220 	orr.w	r2, r3, #32
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e023      	b.n	80053a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	0c1b      	lsrs	r3, r3, #16
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b01      	cmp	r3, #1
 8005364:	d10d      	bne.n	8005382 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	43da      	mvns	r2, r3
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	4013      	ands	r3, r2
 8005372:	b29b      	uxth	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	bf0c      	ite	eq
 8005378:	2301      	moveq	r3, #1
 800537a:	2300      	movne	r3, #0
 800537c:	b2db      	uxtb	r3, r3
 800537e:	461a      	mov	r2, r3
 8005380:	e00c      	b.n	800539c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	43da      	mvns	r2, r3
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	4013      	ands	r3, r2
 800538e:	b29b      	uxth	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	bf0c      	ite	eq
 8005394:	2301      	moveq	r3, #1
 8005396:	2300      	movne	r3, #0
 8005398:	b2db      	uxtb	r3, r3
 800539a:	461a      	mov	r2, r3
 800539c:	79fb      	ldrb	r3, [r7, #7]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d093      	beq.n	80052ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053ba:	e071      	b.n	80054a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053ca:	d123      	bne.n	8005414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80053e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005400:	f043 0204 	orr.w	r2, r3, #4
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e067      	b.n	80054e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541a:	d041      	beq.n	80054a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800541c:	f7fe fe46 	bl	80040ac <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	429a      	cmp	r2, r3
 800542a:	d302      	bcc.n	8005432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d136      	bne.n	80054a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	0c1b      	lsrs	r3, r3, #16
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b01      	cmp	r3, #1
 800543a:	d10c      	bne.n	8005456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	43da      	mvns	r2, r3
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	4013      	ands	r3, r2
 8005448:	b29b      	uxth	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	bf14      	ite	ne
 800544e:	2301      	movne	r3, #1
 8005450:	2300      	moveq	r3, #0
 8005452:	b2db      	uxtb	r3, r3
 8005454:	e00b      	b.n	800546e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	43da      	mvns	r2, r3
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	4013      	ands	r3, r2
 8005462:	b29b      	uxth	r3, r3
 8005464:	2b00      	cmp	r3, #0
 8005466:	bf14      	ite	ne
 8005468:	2301      	movne	r3, #1
 800546a:	2300      	moveq	r3, #0
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d016      	beq.n	80054a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2220      	movs	r2, #32
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548c:	f043 0220 	orr.w	r2, r3, #32
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e021      	b.n	80054e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	0c1b      	lsrs	r3, r3, #16
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d10c      	bne.n	80054c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	43da      	mvns	r2, r3
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	4013      	ands	r3, r2
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	bf14      	ite	ne
 80054bc:	2301      	movne	r3, #1
 80054be:	2300      	moveq	r3, #0
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	e00b      	b.n	80054dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	43da      	mvns	r2, r3
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	4013      	ands	r3, r2
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	bf14      	ite	ne
 80054d6:	2301      	movne	r3, #1
 80054d8:	2300      	moveq	r3, #0
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f47f af6d 	bne.w	80053bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054f8:	e034      	b.n	8005564 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 f8e3 	bl	80056c6 <I2C_IsAcknowledgeFailed>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e034      	b.n	8005574 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005510:	d028      	beq.n	8005564 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005512:	f7fe fdcb 	bl	80040ac <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	429a      	cmp	r2, r3
 8005520:	d302      	bcc.n	8005528 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d11d      	bne.n	8005564 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005532:	2b80      	cmp	r3, #128	@ 0x80
 8005534:	d016      	beq.n	8005564 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2220      	movs	r2, #32
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005550:	f043 0220 	orr.w	r2, r3, #32
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e007      	b.n	8005574 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800556e:	2b80      	cmp	r3, #128	@ 0x80
 8005570:	d1c3      	bne.n	80054fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005588:	e034      	b.n	80055f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f000 f89b 	bl	80056c6 <I2C_IsAcknowledgeFailed>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e034      	b.n	8005604 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a0:	d028      	beq.n	80055f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a2:	f7fe fd83 	bl	80040ac <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d302      	bcc.n	80055b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d11d      	bne.n	80055f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	f003 0304 	and.w	r3, r3, #4
 80055c2:	2b04      	cmp	r3, #4
 80055c4:	d016      	beq.n	80055f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2220      	movs	r2, #32
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e0:	f043 0220 	orr.w	r2, r3, #32
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e007      	b.n	8005604 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	f003 0304 	and.w	r3, r3, #4
 80055fe:	2b04      	cmp	r3, #4
 8005600:	d1c3      	bne.n	800558a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005618:	e049      	b.n	80056ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	f003 0310 	and.w	r3, r3, #16
 8005624:	2b10      	cmp	r3, #16
 8005626:	d119      	bne.n	800565c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f06f 0210 	mvn.w	r2, #16
 8005630:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2220      	movs	r2, #32
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e030      	b.n	80056be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800565c:	f7fe fd26 	bl	80040ac <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	429a      	cmp	r2, r3
 800566a:	d302      	bcc.n	8005672 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d11d      	bne.n	80056ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800567c:	2b40      	cmp	r3, #64	@ 0x40
 800567e:	d016      	beq.n	80056ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2220      	movs	r2, #32
 800568a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800569a:	f043 0220 	orr.w	r2, r3, #32
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e007      	b.n	80056be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056b8:	2b40      	cmp	r3, #64	@ 0x40
 80056ba:	d1ae      	bne.n	800561a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056dc:	d11b      	bne.n	8005716 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80056e6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005702:	f043 0204 	orr.w	r2, r3, #4
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e000      	b.n	8005718 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af02      	add	r7, sp, #8
 800572a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e101      	b.n	800593a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b00      	cmp	r3, #0
 8005746:	d106      	bne.n	8005756 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f008 ff4f 	bl	800e5f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2203      	movs	r2, #3
 800575a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005764:	d102      	bne.n	800576c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4618      	mov	r0, r3
 8005772:	f003 ff94 	bl	800969e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6818      	ldr	r0, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	7c1a      	ldrb	r2, [r3, #16]
 800577e:	f88d 2000 	strb.w	r2, [sp]
 8005782:	3304      	adds	r3, #4
 8005784:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005786:	f003 fe73 	bl	8009470 <USB_CoreInit>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d005      	beq.n	800579c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e0ce      	b.n	800593a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2100      	movs	r1, #0
 80057a2:	4618      	mov	r0, r3
 80057a4:	f003 ff8c 	bl	80096c0 <USB_SetCurrentMode>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d005      	beq.n	80057ba <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2202      	movs	r2, #2
 80057b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e0bf      	b.n	800593a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057ba:	2300      	movs	r3, #0
 80057bc:	73fb      	strb	r3, [r7, #15]
 80057be:	e04a      	b.n	8005856 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80057c0:	7bfa      	ldrb	r2, [r7, #15]
 80057c2:	6879      	ldr	r1, [r7, #4]
 80057c4:	4613      	mov	r3, r2
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	4413      	add	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	440b      	add	r3, r1
 80057ce:	3315      	adds	r3, #21
 80057d0:	2201      	movs	r2, #1
 80057d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80057d4:	7bfa      	ldrb	r2, [r7, #15]
 80057d6:	6879      	ldr	r1, [r7, #4]
 80057d8:	4613      	mov	r3, r2
 80057da:	00db      	lsls	r3, r3, #3
 80057dc:	4413      	add	r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	440b      	add	r3, r1
 80057e2:	3314      	adds	r3, #20
 80057e4:	7bfa      	ldrb	r2, [r7, #15]
 80057e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80057e8:	7bfa      	ldrb	r2, [r7, #15]
 80057ea:	7bfb      	ldrb	r3, [r7, #15]
 80057ec:	b298      	uxth	r0, r3
 80057ee:	6879      	ldr	r1, [r7, #4]
 80057f0:	4613      	mov	r3, r2
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	4413      	add	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	440b      	add	r3, r1
 80057fa:	332e      	adds	r3, #46	@ 0x2e
 80057fc:	4602      	mov	r2, r0
 80057fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005800:	7bfa      	ldrb	r2, [r7, #15]
 8005802:	6879      	ldr	r1, [r7, #4]
 8005804:	4613      	mov	r3, r2
 8005806:	00db      	lsls	r3, r3, #3
 8005808:	4413      	add	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	440b      	add	r3, r1
 800580e:	3318      	adds	r3, #24
 8005810:	2200      	movs	r2, #0
 8005812:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005814:	7bfa      	ldrb	r2, [r7, #15]
 8005816:	6879      	ldr	r1, [r7, #4]
 8005818:	4613      	mov	r3, r2
 800581a:	00db      	lsls	r3, r3, #3
 800581c:	4413      	add	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	440b      	add	r3, r1
 8005822:	331c      	adds	r3, #28
 8005824:	2200      	movs	r2, #0
 8005826:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005828:	7bfa      	ldrb	r2, [r7, #15]
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	4613      	mov	r3, r2
 800582e:	00db      	lsls	r3, r3, #3
 8005830:	4413      	add	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	440b      	add	r3, r1
 8005836:	3320      	adds	r3, #32
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800583c:	7bfa      	ldrb	r2, [r7, #15]
 800583e:	6879      	ldr	r1, [r7, #4]
 8005840:	4613      	mov	r3, r2
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	4413      	add	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	440b      	add	r3, r1
 800584a:	3324      	adds	r3, #36	@ 0x24
 800584c:	2200      	movs	r2, #0
 800584e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005850:	7bfb      	ldrb	r3, [r7, #15]
 8005852:	3301      	adds	r3, #1
 8005854:	73fb      	strb	r3, [r7, #15]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	791b      	ldrb	r3, [r3, #4]
 800585a:	7bfa      	ldrb	r2, [r7, #15]
 800585c:	429a      	cmp	r2, r3
 800585e:	d3af      	bcc.n	80057c0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005860:	2300      	movs	r3, #0
 8005862:	73fb      	strb	r3, [r7, #15]
 8005864:	e044      	b.n	80058f0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005866:	7bfa      	ldrb	r2, [r7, #15]
 8005868:	6879      	ldr	r1, [r7, #4]
 800586a:	4613      	mov	r3, r2
 800586c:	00db      	lsls	r3, r3, #3
 800586e:	4413      	add	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	440b      	add	r3, r1
 8005874:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005878:	2200      	movs	r2, #0
 800587a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800587c:	7bfa      	ldrb	r2, [r7, #15]
 800587e:	6879      	ldr	r1, [r7, #4]
 8005880:	4613      	mov	r3, r2
 8005882:	00db      	lsls	r3, r3, #3
 8005884:	4413      	add	r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	440b      	add	r3, r1
 800588a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800588e:	7bfa      	ldrb	r2, [r7, #15]
 8005890:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005892:	7bfa      	ldrb	r2, [r7, #15]
 8005894:	6879      	ldr	r1, [r7, #4]
 8005896:	4613      	mov	r3, r2
 8005898:	00db      	lsls	r3, r3, #3
 800589a:	4413      	add	r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	440b      	add	r3, r1
 80058a0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80058a4:	2200      	movs	r2, #0
 80058a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80058a8:	7bfa      	ldrb	r2, [r7, #15]
 80058aa:	6879      	ldr	r1, [r7, #4]
 80058ac:	4613      	mov	r3, r2
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	4413      	add	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	440b      	add	r3, r1
 80058b6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80058ba:	2200      	movs	r2, #0
 80058bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80058be:	7bfa      	ldrb	r2, [r7, #15]
 80058c0:	6879      	ldr	r1, [r7, #4]
 80058c2:	4613      	mov	r3, r2
 80058c4:	00db      	lsls	r3, r3, #3
 80058c6:	4413      	add	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	440b      	add	r3, r1
 80058cc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80058d0:	2200      	movs	r2, #0
 80058d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80058d4:	7bfa      	ldrb	r2, [r7, #15]
 80058d6:	6879      	ldr	r1, [r7, #4]
 80058d8:	4613      	mov	r3, r2
 80058da:	00db      	lsls	r3, r3, #3
 80058dc:	4413      	add	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	440b      	add	r3, r1
 80058e2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80058e6:	2200      	movs	r2, #0
 80058e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
 80058ec:	3301      	adds	r3, #1
 80058ee:	73fb      	strb	r3, [r7, #15]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	791b      	ldrb	r3, [r3, #4]
 80058f4:	7bfa      	ldrb	r2, [r7, #15]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d3b5      	bcc.n	8005866 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6818      	ldr	r0, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	7c1a      	ldrb	r2, [r3, #16]
 8005902:	f88d 2000 	strb.w	r2, [sp]
 8005906:	3304      	adds	r3, #4
 8005908:	cb0e      	ldmia	r3, {r1, r2, r3}
 800590a:	f003 ff25 	bl	8009758 <USB_DevInit>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d005      	beq.n	8005920 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e00c      	b.n	800593a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4618      	mov	r0, r3
 8005934:	f004 ff6f 	bl	800a816 <USB_DevDisconnect>

  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005942:	b580      	push	{r7, lr}
 8005944:	b084      	sub	sp, #16
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005956:	2b01      	cmp	r3, #1
 8005958:	d101      	bne.n	800595e <HAL_PCD_Start+0x1c>
 800595a:	2302      	movs	r3, #2
 800595c:	e022      	b.n	80059a4 <HAL_PCD_Start+0x62>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800596e:	2b00      	cmp	r3, #0
 8005970:	d009      	beq.n	8005986 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005976:	2b01      	cmp	r3, #1
 8005978:	d105      	bne.n	8005986 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800597e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4618      	mov	r0, r3
 800598c:	f003 fe76 	bl	800967c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4618      	mov	r0, r3
 8005996:	f004 ff1d 	bl	800a7d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80059ac:	b590      	push	{r4, r7, lr}
 80059ae:	b08d      	sub	sp, #52	@ 0x34
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f004 ffdb 	bl	800a97e <USB_GetMode>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f040 848c 	bne.w	80062e8 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f004 ff3f 	bl	800a858 <USB_ReadInterrupts>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 8482 	beq.w	80062e6 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	0a1b      	lsrs	r3, r3, #8
 80059ec:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f004 ff2c 	bl	800a858 <USB_ReadInterrupts>
 8005a00:	4603      	mov	r3, r0
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d107      	bne.n	8005a1a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	695a      	ldr	r2, [r3, #20]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f002 0202 	and.w	r2, r2, #2
 8005a18:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f004 ff1a 	bl	800a858 <USB_ReadInterrupts>
 8005a24:	4603      	mov	r3, r0
 8005a26:	f003 0310 	and.w	r3, r3, #16
 8005a2a:	2b10      	cmp	r3, #16
 8005a2c:	d161      	bne.n	8005af2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	699a      	ldr	r2, [r3, #24]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f022 0210 	bic.w	r2, r2, #16
 8005a3c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	f003 020f 	and.w	r2, r3, #15
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	00db      	lsls	r3, r3, #3
 8005a4e:	4413      	add	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	4413      	add	r3, r2
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005a64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a68:	d124      	bne.n	8005ab4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005a70:	4013      	ands	r3, r2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d035      	beq.n	8005ae2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	091b      	lsrs	r3, r3, #4
 8005a7e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005a80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	461a      	mov	r2, r3
 8005a88:	6a38      	ldr	r0, [r7, #32]
 8005a8a:	f004 fd51 	bl	800a530 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	091b      	lsrs	r3, r3, #4
 8005a96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a9a:	441a      	add	r2, r3
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	695a      	ldr	r2, [r3, #20]
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	091b      	lsrs	r3, r3, #4
 8005aa8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005aac:	441a      	add	r2, r3
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	615a      	str	r2, [r3, #20]
 8005ab2:	e016      	b.n	8005ae2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005aba:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005abe:	d110      	bne.n	8005ae2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005ac6:	2208      	movs	r2, #8
 8005ac8:	4619      	mov	r1, r3
 8005aca:	6a38      	ldr	r0, [r7, #32]
 8005acc:	f004 fd30 	bl	800a530 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	695a      	ldr	r2, [r3, #20]
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	091b      	lsrs	r3, r3, #4
 8005ad8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005adc:	441a      	add	r2, r3
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	699a      	ldr	r2, [r3, #24]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f042 0210 	orr.w	r2, r2, #16
 8005af0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f004 feae 	bl	800a858 <USB_ReadInterrupts>
 8005afc:	4603      	mov	r3, r0
 8005afe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b02:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005b06:	f040 80a7 	bne.w	8005c58 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f004 feb3 	bl	800a87e <USB_ReadDevAllOutEpInterrupt>
 8005b18:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005b1a:	e099      	b.n	8005c50 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 808e 	beq.w	8005c44 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b2e:	b2d2      	uxtb	r2, r2
 8005b30:	4611      	mov	r1, r2
 8005b32:	4618      	mov	r0, r3
 8005b34:	f004 fed7 	bl	800a8e6 <USB_ReadDevOutEPInterrupt>
 8005b38:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	f003 0301 	and.w	r3, r3, #1
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00c      	beq.n	8005b5e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b50:	461a      	mov	r2, r3
 8005b52:	2301      	movs	r3, #1
 8005b54:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005b56:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 fea3 	bl	80068a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	f003 0308 	and.w	r3, r3, #8
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00c      	beq.n	8005b82 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b74:	461a      	mov	r2, r3
 8005b76:	2308      	movs	r3, #8
 8005b78:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005b7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 ff79 	bl	8006a74 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	f003 0310 	and.w	r3, r3, #16
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d008      	beq.n	8005b9e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b98:	461a      	mov	r2, r3
 8005b9a:	2310      	movs	r3, #16
 8005b9c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f003 0302 	and.w	r3, r3, #2
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d030      	beq.n	8005c0a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bb0:	2b80      	cmp	r3, #128	@ 0x80
 8005bb2:	d109      	bne.n	8005bc8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	69fa      	ldr	r2, [r7, #28]
 8005bbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005bc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005bc6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005bc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bca:	4613      	mov	r3, r2
 8005bcc:	00db      	lsls	r3, r3, #3
 8005bce:	4413      	add	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	4413      	add	r3, r2
 8005bda:	3304      	adds	r3, #4
 8005bdc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	78db      	ldrb	r3, [r3, #3]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d108      	bne.n	8005bf8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	2200      	movs	r2, #0
 8005bea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f008 fdfa 	bl	800e7ec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c04:	461a      	mov	r2, r3
 8005c06:	2302      	movs	r3, #2
 8005c08:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f003 0320 	and.w	r3, r3, #32
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d008      	beq.n	8005c26 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c20:	461a      	mov	r2, r3
 8005c22:	2320      	movs	r3, #32
 8005c24:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d009      	beq.n	8005c44 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005c42:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c46:	3301      	adds	r3, #1
 8005c48:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c4c:	085b      	lsrs	r3, r3, #1
 8005c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f47f af62 	bne.w	8005b1c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f004 fdfb 	bl	800a858 <USB_ReadInterrupts>
 8005c62:	4603      	mov	r3, r0
 8005c64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c68:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c6c:	f040 80db 	bne.w	8005e26 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4618      	mov	r0, r3
 8005c76:	f004 fe1c 	bl	800a8b2 <USB_ReadDevAllInEpInterrupt>
 8005c7a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005c80:	e0cd      	b.n	8005e1e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 80c2 	beq.w	8005e12 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c94:	b2d2      	uxtb	r2, r2
 8005c96:	4611      	mov	r1, r2
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f004 fe42 	bl	800a922 <USB_ReadDevInEPInterrupt>
 8005c9e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d057      	beq.n	8005d5a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cac:	f003 030f 	and.w	r3, r3, #15
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	43db      	mvns	r3, r3
 8005cc4:	69f9      	ldr	r1, [r7, #28]
 8005cc6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005cca:	4013      	ands	r3, r2
 8005ccc:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd0:	015a      	lsls	r2, r3, #5
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cda:	461a      	mov	r2, r3
 8005cdc:	2301      	movs	r3, #1
 8005cde:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	799b      	ldrb	r3, [r3, #6]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d132      	bne.n	8005d4e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005ce8:	6879      	ldr	r1, [r7, #4]
 8005cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cec:	4613      	mov	r3, r2
 8005cee:	00db      	lsls	r3, r3, #3
 8005cf0:	4413      	add	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	440b      	add	r3, r1
 8005cf6:	3320      	adds	r3, #32
 8005cf8:	6819      	ldr	r1, [r3, #0]
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cfe:	4613      	mov	r3, r2
 8005d00:	00db      	lsls	r3, r3, #3
 8005d02:	4413      	add	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4403      	add	r3, r0
 8005d08:	331c      	adds	r3, #28
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4419      	add	r1, r3
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d12:	4613      	mov	r3, r2
 8005d14:	00db      	lsls	r3, r3, #3
 8005d16:	4413      	add	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4403      	add	r3, r0
 8005d1c:	3320      	adds	r3, #32
 8005d1e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d113      	bne.n	8005d4e <HAL_PCD_IRQHandler+0x3a2>
 8005d26:	6879      	ldr	r1, [r7, #4]
 8005d28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	00db      	lsls	r3, r3, #3
 8005d2e:	4413      	add	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	440b      	add	r3, r1
 8005d34:	3324      	adds	r3, #36	@ 0x24
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d108      	bne.n	8005d4e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6818      	ldr	r0, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005d46:	461a      	mov	r2, r3
 8005d48:	2101      	movs	r1, #1
 8005d4a:	f004 fe49 	bl	800a9e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	4619      	mov	r1, r3
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f008 fcce 	bl	800e6f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	f003 0308 	and.w	r3, r3, #8
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d008      	beq.n	8005d76 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d70:	461a      	mov	r2, r3
 8005d72:	2308      	movs	r3, #8
 8005d74:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f003 0310 	and.w	r3, r3, #16
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d008      	beq.n	8005d92 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	2310      	movs	r3, #16
 8005d90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d008      	beq.n	8005dae <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005da8:	461a      	mov	r2, r3
 8005daa:	2340      	movs	r3, #64	@ 0x40
 8005dac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	f003 0302 	and.w	r3, r3, #2
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d023      	beq.n	8005e00 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005db8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005dba:	6a38      	ldr	r0, [r7, #32]
 8005dbc:	f003 fe30 	bl	8009a20 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005dc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	00db      	lsls	r3, r3, #3
 8005dc6:	4413      	add	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	3310      	adds	r3, #16
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	4413      	add	r3, r2
 8005dd0:	3304      	adds	r3, #4
 8005dd2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	78db      	ldrb	r3, [r3, #3]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d108      	bne.n	8005dee <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	2200      	movs	r2, #0
 8005de0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	4619      	mov	r1, r3
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f008 fd11 	bl	800e810 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df0:	015a      	lsls	r2, r3, #5
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	4413      	add	r3, r2
 8005df6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d003      	beq.n	8005e12 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005e0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 fcbd 	bl	800678c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e14:	3301      	adds	r3, #1
 8005e16:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e1a:	085b      	lsrs	r3, r3, #1
 8005e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f47f af2e 	bne.w	8005c82 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f004 fd14 	bl	800a858 <USB_ReadInterrupts>
 8005e30:	4603      	mov	r3, r0
 8005e32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e3a:	d122      	bne.n	8005e82 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	69fa      	ldr	r2, [r7, #28]
 8005e46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e4a:	f023 0301 	bic.w	r3, r3, #1
 8005e4e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d108      	bne.n	8005e6c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005e62:	2100      	movs	r1, #0
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 fea3 	bl	8006bb0 <HAL_PCDEx_LPM_Callback>
 8005e6a:	e002      	b.n	8005e72 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f008 fcaf 	bl	800e7d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	695a      	ldr	r2, [r3, #20]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005e80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4618      	mov	r0, r3
 8005e88:	f004 fce6 	bl	800a858 <USB_ReadInterrupts>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e96:	d112      	bne.n	8005ebe <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d102      	bne.n	8005eae <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f008 fc6b 	bl	800e784 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	695a      	ldr	r2, [r3, #20]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005ebc:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f004 fcc8 	bl	800a858 <USB_ReadInterrupts>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ed2:	f040 80b7 	bne.w	8006044 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	69fa      	ldr	r2, [r7, #28]
 8005ee0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ee4:	f023 0301 	bic.w	r3, r3, #1
 8005ee8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2110      	movs	r1, #16
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f003 fd95 	bl	8009a20 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005efa:	e046      	b.n	8005f8a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f08:	461a      	mov	r2, r3
 8005f0a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005f0e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f20:	0151      	lsls	r1, r2, #5
 8005f22:	69fa      	ldr	r2, [r7, #28]
 8005f24:	440a      	add	r2, r1
 8005f26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f2a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005f2e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005f42:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f54:	0151      	lsls	r1, r2, #5
 8005f56:	69fa      	ldr	r2, [r7, #28]
 8005f58:	440a      	add	r2, r1
 8005f5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f5e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005f62:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f66:	015a      	lsls	r2, r3, #5
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f74:	0151      	lsls	r1, r2, #5
 8005f76:	69fa      	ldr	r2, [r7, #28]
 8005f78:	440a      	add	r2, r1
 8005f7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f7e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005f82:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f86:	3301      	adds	r3, #1
 8005f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	791b      	ldrb	r3, [r3, #4]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d3b2      	bcc.n	8005efc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	69fa      	ldr	r2, [r7, #28]
 8005fa0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fa4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005fa8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	7bdb      	ldrb	r3, [r3, #15]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d016      	beq.n	8005fe0 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fbc:	69fa      	ldr	r2, [r7, #28]
 8005fbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fc2:	f043 030b 	orr.w	r3, r3, #11
 8005fc6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fd2:	69fa      	ldr	r2, [r7, #28]
 8005fd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fd8:	f043 030b 	orr.w	r3, r3, #11
 8005fdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8005fde:	e015      	b.n	800600c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	69fa      	ldr	r2, [r7, #28]
 8005fea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005ff2:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005ff6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	69fa      	ldr	r2, [r7, #28]
 8006002:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006006:	f043 030b 	orr.w	r3, r3, #11
 800600a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	69fa      	ldr	r2, [r7, #28]
 8006016:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800601a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800601e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6818      	ldr	r0, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800602e:	461a      	mov	r2, r3
 8006030:	f004 fcd6 	bl	800a9e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	695a      	ldr	r2, [r3, #20]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006042:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4618      	mov	r0, r3
 800604a:	f004 fc05 	bl	800a858 <USB_ReadInterrupts>
 800604e:	4603      	mov	r3, r0
 8006050:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006054:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006058:	d123      	bne.n	80060a2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4618      	mov	r0, r3
 8006060:	f004 fc9b 	bl	800a99a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4618      	mov	r0, r3
 800606a:	f003 fd52 	bl	8009b12 <USB_GetDevSpeed>
 800606e:	4603      	mov	r3, r0
 8006070:	461a      	mov	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681c      	ldr	r4, [r3, #0]
 800607a:	f001 f9c9 	bl	8007410 <HAL_RCC_GetHCLKFreq>
 800607e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006084:	461a      	mov	r2, r3
 8006086:	4620      	mov	r0, r4
 8006088:	f003 fa56 	bl	8009538 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f008 fb5a 	bl	800e746 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	695a      	ldr	r2, [r3, #20]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80060a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4618      	mov	r0, r3
 80060a8:	f004 fbd6 	bl	800a858 <USB_ReadInterrupts>
 80060ac:	4603      	mov	r3, r0
 80060ae:	f003 0308 	and.w	r3, r3, #8
 80060b2:	2b08      	cmp	r3, #8
 80060b4:	d10a      	bne.n	80060cc <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f008 fb37 	bl	800e72a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	695a      	ldr	r2, [r3, #20]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f002 0208 	and.w	r2, r2, #8
 80060ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f004 fbc1 	bl	800a858 <USB_ReadInterrupts>
 80060d6:	4603      	mov	r3, r0
 80060d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060dc:	2b80      	cmp	r3, #128	@ 0x80
 80060de:	d123      	bne.n	8006128 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80060e0:	6a3b      	ldr	r3, [r7, #32]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060ec:	2301      	movs	r3, #1
 80060ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80060f0:	e014      	b.n	800611c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80060f2:	6879      	ldr	r1, [r7, #4]
 80060f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060f6:	4613      	mov	r3, r2
 80060f8:	00db      	lsls	r3, r3, #3
 80060fa:	4413      	add	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	440b      	add	r3, r1
 8006100:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d105      	bne.n	8006116 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800610a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610c:	b2db      	uxtb	r3, r3
 800610e:	4619      	mov	r1, r3
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 fb0a 	bl	800672a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006118:	3301      	adds	r3, #1
 800611a:	627b      	str	r3, [r7, #36]	@ 0x24
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	791b      	ldrb	r3, [r3, #4]
 8006120:	461a      	mov	r2, r3
 8006122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006124:	4293      	cmp	r3, r2
 8006126:	d3e4      	bcc.n	80060f2 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4618      	mov	r0, r3
 800612e:	f004 fb93 	bl	800a858 <USB_ReadInterrupts>
 8006132:	4603      	mov	r3, r0
 8006134:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006138:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800613c:	d13c      	bne.n	80061b8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800613e:	2301      	movs	r3, #1
 8006140:	627b      	str	r3, [r7, #36]	@ 0x24
 8006142:	e02b      	b.n	800619c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006154:	6879      	ldr	r1, [r7, #4]
 8006156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006158:	4613      	mov	r3, r2
 800615a:	00db      	lsls	r3, r3, #3
 800615c:	4413      	add	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	440b      	add	r3, r1
 8006162:	3318      	adds	r3, #24
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d115      	bne.n	8006196 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800616a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800616c:	2b00      	cmp	r3, #0
 800616e:	da12      	bge.n	8006196 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006170:	6879      	ldr	r1, [r7, #4]
 8006172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006174:	4613      	mov	r3, r2
 8006176:	00db      	lsls	r3, r3, #3
 8006178:	4413      	add	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	440b      	add	r3, r1
 800617e:	3317      	adds	r3, #23
 8006180:	2201      	movs	r2, #1
 8006182:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006186:	b2db      	uxtb	r3, r3
 8006188:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800618c:	b2db      	uxtb	r3, r3
 800618e:	4619      	mov	r1, r3
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 faca 	bl	800672a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006198:	3301      	adds	r3, #1
 800619a:	627b      	str	r3, [r7, #36]	@ 0x24
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	791b      	ldrb	r3, [r3, #4]
 80061a0:	461a      	mov	r2, r3
 80061a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d3cd      	bcc.n	8006144 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	695a      	ldr	r2, [r3, #20]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80061b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4618      	mov	r0, r3
 80061be:	f004 fb4b 	bl	800a858 <USB_ReadInterrupts>
 80061c2:	4603      	mov	r3, r0
 80061c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80061c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061cc:	d156      	bne.n	800627c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80061ce:	2301      	movs	r3, #1
 80061d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80061d2:	e045      	b.n	8006260 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80061d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80061e4:	6879      	ldr	r1, [r7, #4]
 80061e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061e8:	4613      	mov	r3, r2
 80061ea:	00db      	lsls	r3, r3, #3
 80061ec:	4413      	add	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	440b      	add	r3, r1
 80061f2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d12e      	bne.n	800625a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80061fc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80061fe:	2b00      	cmp	r3, #0
 8006200:	da2b      	bge.n	800625a <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	0c1a      	lsrs	r2, r3, #16
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800620c:	4053      	eors	r3, r2
 800620e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006212:	2b00      	cmp	r3, #0
 8006214:	d121      	bne.n	800625a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006216:	6879      	ldr	r1, [r7, #4]
 8006218:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800621a:	4613      	mov	r3, r2
 800621c:	00db      	lsls	r3, r3, #3
 800621e:	4413      	add	r3, r2
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	440b      	add	r3, r1
 8006224:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006228:	2201      	movs	r2, #1
 800622a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	695b      	ldr	r3, [r3, #20]
 800623c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10a      	bne.n	800625a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	69fa      	ldr	r2, [r7, #28]
 800624e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006252:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006256:	6053      	str	r3, [r2, #4]
            break;
 8006258:	e008      	b.n	800626c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800625a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625c:	3301      	adds	r3, #1
 800625e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	791b      	ldrb	r3, [r3, #4]
 8006264:	461a      	mov	r2, r3
 8006266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006268:	4293      	cmp	r3, r2
 800626a:	d3b3      	bcc.n	80061d4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	695a      	ldr	r2, [r3, #20]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800627a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4618      	mov	r0, r3
 8006282:	f004 fae9 	bl	800a858 <USB_ReadInterrupts>
 8006286:	4603      	mov	r3, r0
 8006288:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800628c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006290:	d10a      	bne.n	80062a8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f008 face 	bl	800e834 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	695a      	ldr	r2, [r3, #20]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80062a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4618      	mov	r0, r3
 80062ae:	f004 fad3 	bl	800a858 <USB_ReadInterrupts>
 80062b2:	4603      	mov	r3, r0
 80062b4:	f003 0304 	and.w	r3, r3, #4
 80062b8:	2b04      	cmp	r3, #4
 80062ba:	d115      	bne.n	80062e8 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	f003 0304 	and.w	r3, r3, #4
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d002      	beq.n	80062d4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f008 fabe 	bl	800e850 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6859      	ldr	r1, [r3, #4]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	69ba      	ldr	r2, [r7, #24]
 80062e0:	430a      	orrs	r2, r1
 80062e2:	605a      	str	r2, [r3, #4]
 80062e4:	e000      	b.n	80062e8 <HAL_PCD_IRQHandler+0x93c>
      return;
 80062e6:	bf00      	nop
    }
  }
}
 80062e8:	3734      	adds	r7, #52	@ 0x34
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd90      	pop	{r4, r7, pc}

080062ee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b082      	sub	sp, #8
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
 80062f6:	460b      	mov	r3, r1
 80062f8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006300:	2b01      	cmp	r3, #1
 8006302:	d101      	bne.n	8006308 <HAL_PCD_SetAddress+0x1a>
 8006304:	2302      	movs	r3, #2
 8006306:	e012      	b.n	800632e <HAL_PCD_SetAddress+0x40>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	78fa      	ldrb	r2, [r7, #3]
 8006314:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	78fa      	ldrb	r2, [r7, #3]
 800631c:	4611      	mov	r1, r2
 800631e:	4618      	mov	r0, r3
 8006320:	f004 fa32 	bl	800a788 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b084      	sub	sp, #16
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
 800633e:	4608      	mov	r0, r1
 8006340:	4611      	mov	r1, r2
 8006342:	461a      	mov	r2, r3
 8006344:	4603      	mov	r3, r0
 8006346:	70fb      	strb	r3, [r7, #3]
 8006348:	460b      	mov	r3, r1
 800634a:	803b      	strh	r3, [r7, #0]
 800634c:	4613      	mov	r3, r2
 800634e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006350:	2300      	movs	r3, #0
 8006352:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006354:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006358:	2b00      	cmp	r3, #0
 800635a:	da0f      	bge.n	800637c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800635c:	78fb      	ldrb	r3, [r7, #3]
 800635e:	f003 020f 	and.w	r2, r3, #15
 8006362:	4613      	mov	r3, r2
 8006364:	00db      	lsls	r3, r3, #3
 8006366:	4413      	add	r3, r2
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	3310      	adds	r3, #16
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	4413      	add	r3, r2
 8006370:	3304      	adds	r3, #4
 8006372:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2201      	movs	r2, #1
 8006378:	705a      	strb	r2, [r3, #1]
 800637a:	e00f      	b.n	800639c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800637c:	78fb      	ldrb	r3, [r7, #3]
 800637e:	f003 020f 	and.w	r2, r3, #15
 8006382:	4613      	mov	r3, r2
 8006384:	00db      	lsls	r3, r3, #3
 8006386:	4413      	add	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	4413      	add	r3, r2
 8006392:	3304      	adds	r3, #4
 8006394:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800639c:	78fb      	ldrb	r3, [r7, #3]
 800639e:	f003 030f 	and.w	r3, r3, #15
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80063a8:	883b      	ldrh	r3, [r7, #0]
 80063aa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	78ba      	ldrb	r2, [r7, #2]
 80063b6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	785b      	ldrb	r3, [r3, #1]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d004      	beq.n	80063ca <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	461a      	mov	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80063ca:	78bb      	ldrb	r3, [r7, #2]
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d102      	bne.n	80063d6 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d101      	bne.n	80063e4 <HAL_PCD_EP_Open+0xae>
 80063e0:	2302      	movs	r3, #2
 80063e2:	e00e      	b.n	8006402 <HAL_PCD_EP_Open+0xcc>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68f9      	ldr	r1, [r7, #12]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f003 fbb2 	bl	8009b5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006400:	7afb      	ldrb	r3, [r7, #11]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b084      	sub	sp, #16
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	460b      	mov	r3, r1
 8006414:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006416:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800641a:	2b00      	cmp	r3, #0
 800641c:	da0f      	bge.n	800643e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800641e:	78fb      	ldrb	r3, [r7, #3]
 8006420:	f003 020f 	and.w	r2, r3, #15
 8006424:	4613      	mov	r3, r2
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	4413      	add	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	3310      	adds	r3, #16
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	4413      	add	r3, r2
 8006432:	3304      	adds	r3, #4
 8006434:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2201      	movs	r2, #1
 800643a:	705a      	strb	r2, [r3, #1]
 800643c:	e00f      	b.n	800645e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800643e:	78fb      	ldrb	r3, [r7, #3]
 8006440:	f003 020f 	and.w	r2, r3, #15
 8006444:	4613      	mov	r3, r2
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	4413      	add	r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	4413      	add	r3, r2
 8006454:	3304      	adds	r3, #4
 8006456:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800645e:	78fb      	ldrb	r3, [r7, #3]
 8006460:	f003 030f 	and.w	r3, r3, #15
 8006464:	b2da      	uxtb	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006470:	2b01      	cmp	r3, #1
 8006472:	d101      	bne.n	8006478 <HAL_PCD_EP_Close+0x6e>
 8006474:	2302      	movs	r3, #2
 8006476:	e00e      	b.n	8006496 <HAL_PCD_EP_Close+0x8c>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68f9      	ldr	r1, [r7, #12]
 8006486:	4618      	mov	r0, r3
 8006488:	f003 fbf0 	bl	8009c6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b086      	sub	sp, #24
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	60f8      	str	r0, [r7, #12]
 80064a6:	607a      	str	r2, [r7, #4]
 80064a8:	603b      	str	r3, [r7, #0]
 80064aa:	460b      	mov	r3, r1
 80064ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064ae:	7afb      	ldrb	r3, [r7, #11]
 80064b0:	f003 020f 	and.w	r2, r3, #15
 80064b4:	4613      	mov	r3, r2
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	4413      	add	r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	4413      	add	r3, r2
 80064c4:	3304      	adds	r3, #4
 80064c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	683a      	ldr	r2, [r7, #0]
 80064d2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	2200      	movs	r2, #0
 80064d8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2200      	movs	r2, #0
 80064de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064e0:	7afb      	ldrb	r3, [r7, #11]
 80064e2:	f003 030f 	and.w	r3, r3, #15
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	799b      	ldrb	r3, [r3, #6]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d102      	bne.n	80064fa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6818      	ldr	r0, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	799b      	ldrb	r3, [r3, #6]
 8006502:	461a      	mov	r2, r3
 8006504:	6979      	ldr	r1, [r7, #20]
 8006506:	f003 fc8d 	bl	8009e24 <USB_EPStartXfer>

  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3718      	adds	r7, #24
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	460b      	mov	r3, r1
 800651e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006520:	78fb      	ldrb	r3, [r7, #3]
 8006522:	f003 020f 	and.w	r2, r3, #15
 8006526:	6879      	ldr	r1, [r7, #4]
 8006528:	4613      	mov	r3, r2
 800652a:	00db      	lsls	r3, r3, #3
 800652c:	4413      	add	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	440b      	add	r3, r1
 8006532:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006536:	681b      	ldr	r3, [r3, #0]
}
 8006538:	4618      	mov	r0, r3
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	607a      	str	r2, [r7, #4]
 800654e:	603b      	str	r3, [r7, #0]
 8006550:	460b      	mov	r3, r1
 8006552:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006554:	7afb      	ldrb	r3, [r7, #11]
 8006556:	f003 020f 	and.w	r2, r3, #15
 800655a:	4613      	mov	r3, r2
 800655c:	00db      	lsls	r3, r3, #3
 800655e:	4413      	add	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	3310      	adds	r3, #16
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	4413      	add	r3, r2
 8006568:	3304      	adds	r3, #4
 800656a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	683a      	ldr	r2, [r7, #0]
 8006576:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	2200      	movs	r2, #0
 800657c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2201      	movs	r2, #1
 8006582:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006584:	7afb      	ldrb	r3, [r7, #11]
 8006586:	f003 030f 	and.w	r3, r3, #15
 800658a:	b2da      	uxtb	r2, r3
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	799b      	ldrb	r3, [r3, #6]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d102      	bne.n	800659e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6818      	ldr	r0, [r3, #0]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	799b      	ldrb	r3, [r3, #6]
 80065a6:	461a      	mov	r2, r3
 80065a8:	6979      	ldr	r1, [r7, #20]
 80065aa:	f003 fc3b 	bl	8009e24 <USB_EPStartXfer>

  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3718      	adds	r7, #24
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	460b      	mov	r3, r1
 80065c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80065c4:	78fb      	ldrb	r3, [r7, #3]
 80065c6:	f003 030f 	and.w	r3, r3, #15
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	7912      	ldrb	r2, [r2, #4]
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d901      	bls.n	80065d6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e04f      	b.n	8006676 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80065d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	da0f      	bge.n	80065fe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065de:	78fb      	ldrb	r3, [r7, #3]
 80065e0:	f003 020f 	and.w	r2, r3, #15
 80065e4:	4613      	mov	r3, r2
 80065e6:	00db      	lsls	r3, r3, #3
 80065e8:	4413      	add	r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	3310      	adds	r3, #16
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	4413      	add	r3, r2
 80065f2:	3304      	adds	r3, #4
 80065f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2201      	movs	r2, #1
 80065fa:	705a      	strb	r2, [r3, #1]
 80065fc:	e00d      	b.n	800661a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80065fe:	78fa      	ldrb	r2, [r7, #3]
 8006600:	4613      	mov	r3, r2
 8006602:	00db      	lsls	r3, r3, #3
 8006604:	4413      	add	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	4413      	add	r3, r2
 8006610:	3304      	adds	r3, #4
 8006612:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2201      	movs	r2, #1
 800661e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006620:	78fb      	ldrb	r3, [r7, #3]
 8006622:	f003 030f 	and.w	r3, r3, #15
 8006626:	b2da      	uxtb	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006632:	2b01      	cmp	r3, #1
 8006634:	d101      	bne.n	800663a <HAL_PCD_EP_SetStall+0x82>
 8006636:	2302      	movs	r3, #2
 8006638:	e01d      	b.n	8006676 <HAL_PCD_EP_SetStall+0xbe>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68f9      	ldr	r1, [r7, #12]
 8006648:	4618      	mov	r0, r3
 800664a:	f003 ffc9 	bl	800a5e0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800664e:	78fb      	ldrb	r3, [r7, #3]
 8006650:	f003 030f 	and.w	r3, r3, #15
 8006654:	2b00      	cmp	r3, #0
 8006656:	d109      	bne.n	800666c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6818      	ldr	r0, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	7999      	ldrb	r1, [r3, #6]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006666:	461a      	mov	r2, r3
 8006668:	f004 f9ba 	bl	800a9e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b084      	sub	sp, #16
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	460b      	mov	r3, r1
 8006688:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800668a:	78fb      	ldrb	r3, [r7, #3]
 800668c:	f003 030f 	and.w	r3, r3, #15
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	7912      	ldrb	r2, [r2, #4]
 8006694:	4293      	cmp	r3, r2
 8006696:	d901      	bls.n	800669c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e042      	b.n	8006722 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800669c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	da0f      	bge.n	80066c4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066a4:	78fb      	ldrb	r3, [r7, #3]
 80066a6:	f003 020f 	and.w	r2, r3, #15
 80066aa:	4613      	mov	r3, r2
 80066ac:	00db      	lsls	r3, r3, #3
 80066ae:	4413      	add	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	3310      	adds	r3, #16
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	4413      	add	r3, r2
 80066b8:	3304      	adds	r3, #4
 80066ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2201      	movs	r2, #1
 80066c0:	705a      	strb	r2, [r3, #1]
 80066c2:	e00f      	b.n	80066e4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066c4:	78fb      	ldrb	r3, [r7, #3]
 80066c6:	f003 020f 	and.w	r2, r3, #15
 80066ca:	4613      	mov	r3, r2
 80066cc:	00db      	lsls	r3, r3, #3
 80066ce:	4413      	add	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	4413      	add	r3, r2
 80066da:	3304      	adds	r3, #4
 80066dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80066ea:	78fb      	ldrb	r3, [r7, #3]
 80066ec:	f003 030f 	and.w	r3, r3, #15
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d101      	bne.n	8006704 <HAL_PCD_EP_ClrStall+0x86>
 8006700:	2302      	movs	r3, #2
 8006702:	e00e      	b.n	8006722 <HAL_PCD_EP_ClrStall+0xa4>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68f9      	ldr	r1, [r7, #12]
 8006712:	4618      	mov	r0, r3
 8006714:	f003 ffd2 	bl	800a6bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b084      	sub	sp, #16
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
 8006732:	460b      	mov	r3, r1
 8006734:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006736:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800673a:	2b00      	cmp	r3, #0
 800673c:	da0c      	bge.n	8006758 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800673e:	78fb      	ldrb	r3, [r7, #3]
 8006740:	f003 020f 	and.w	r2, r3, #15
 8006744:	4613      	mov	r3, r2
 8006746:	00db      	lsls	r3, r3, #3
 8006748:	4413      	add	r3, r2
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	3310      	adds	r3, #16
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	4413      	add	r3, r2
 8006752:	3304      	adds	r3, #4
 8006754:	60fb      	str	r3, [r7, #12]
 8006756:	e00c      	b.n	8006772 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006758:	78fb      	ldrb	r3, [r7, #3]
 800675a:	f003 020f 	and.w	r2, r3, #15
 800675e:	4613      	mov	r3, r2
 8006760:	00db      	lsls	r3, r3, #3
 8006762:	4413      	add	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	4413      	add	r3, r2
 800676e:	3304      	adds	r3, #4
 8006770:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68f9      	ldr	r1, [r7, #12]
 8006778:	4618      	mov	r0, r3
 800677a:	f003 fdf1 	bl	800a360 <USB_EPStopXfer>
 800677e:	4603      	mov	r3, r0
 8006780:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006782:	7afb      	ldrb	r3, [r7, #11]
}
 8006784:	4618      	mov	r0, r3
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b08a      	sub	sp, #40	@ 0x28
 8006790:	af02      	add	r7, sp, #8
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	4613      	mov	r3, r2
 80067a4:	00db      	lsls	r3, r3, #3
 80067a6:	4413      	add	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	3310      	adds	r3, #16
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	4413      	add	r3, r2
 80067b0:	3304      	adds	r3, #4
 80067b2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	695a      	ldr	r2, [r3, #20]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d901      	bls.n	80067c4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e06b      	b.n	800689c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	691a      	ldr	r2, [r3, #16]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	69fa      	ldr	r2, [r7, #28]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d902      	bls.n	80067e0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	3303      	adds	r3, #3
 80067e4:	089b      	lsrs	r3, r3, #2
 80067e6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80067e8:	e02a      	b.n	8006840 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	691a      	ldr	r2, [r3, #16]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	69fa      	ldr	r2, [r7, #28]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d902      	bls.n	8006806 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	3303      	adds	r3, #3
 800680a:	089b      	lsrs	r3, r3, #2
 800680c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	68d9      	ldr	r1, [r3, #12]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	b2da      	uxtb	r2, r3
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	4603      	mov	r3, r0
 8006822:	6978      	ldr	r0, [r7, #20]
 8006824:	f003 fe46 	bl	800a4b4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	68da      	ldr	r2, [r3, #12]
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	441a      	add	r2, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	695a      	ldr	r2, [r3, #20]
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	441a      	add	r2, r3
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	015a      	lsls	r2, r3, #5
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	4413      	add	r3, r2
 8006848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	429a      	cmp	r2, r3
 8006854:	d809      	bhi.n	800686a <PCD_WriteEmptyTxFifo+0xde>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	695a      	ldr	r2, [r3, #20]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800685e:	429a      	cmp	r2, r3
 8006860:	d203      	bcs.n	800686a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1bf      	bne.n	80067ea <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	691a      	ldr	r2, [r3, #16]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	429a      	cmp	r2, r3
 8006874:	d811      	bhi.n	800689a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	f003 030f 	and.w	r3, r3, #15
 800687c:	2201      	movs	r2, #1
 800687e:	fa02 f303 	lsl.w	r3, r2, r3
 8006882:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800688a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	43db      	mvns	r3, r3
 8006890:	6939      	ldr	r1, [r7, #16]
 8006892:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006896:	4013      	ands	r3, r2
 8006898:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3720      	adds	r7, #32
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b088      	sub	sp, #32
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	333c      	adds	r3, #60	@ 0x3c
 80068bc:	3304      	adds	r3, #4
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	799b      	ldrb	r3, [r3, #6]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d17b      	bne.n	80069d2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	f003 0308 	and.w	r3, r3, #8
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d015      	beq.n	8006910 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	4a61      	ldr	r2, [pc, #388]	@ (8006a6c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	f240 80b9 	bls.w	8006a60 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 80b3 	beq.w	8006a60 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	015a      	lsls	r2, r3, #5
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	4413      	add	r3, r2
 8006902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006906:	461a      	mov	r2, r3
 8006908:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800690c:	6093      	str	r3, [r2, #8]
 800690e:	e0a7      	b.n	8006a60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	f003 0320 	and.w	r3, r3, #32
 8006916:	2b00      	cmp	r3, #0
 8006918:	d009      	beq.n	800692e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	015a      	lsls	r2, r3, #5
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	4413      	add	r3, r2
 8006922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006926:	461a      	mov	r2, r3
 8006928:	2320      	movs	r3, #32
 800692a:	6093      	str	r3, [r2, #8]
 800692c:	e098      	b.n	8006a60 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006934:	2b00      	cmp	r3, #0
 8006936:	f040 8093 	bne.w	8006a60 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	4a4b      	ldr	r2, [pc, #300]	@ (8006a6c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d90f      	bls.n	8006962 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00a      	beq.n	8006962 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	015a      	lsls	r2, r3, #5
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	4413      	add	r3, r2
 8006954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006958:	461a      	mov	r2, r3
 800695a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800695e:	6093      	str	r3, [r2, #8]
 8006960:	e07e      	b.n	8006a60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006962:	683a      	ldr	r2, [r7, #0]
 8006964:	4613      	mov	r3, r2
 8006966:	00db      	lsls	r3, r3, #3
 8006968:	4413      	add	r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	4413      	add	r3, r2
 8006974:	3304      	adds	r3, #4
 8006976:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6a1a      	ldr	r2, [r3, #32]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	0159      	lsls	r1, r3, #5
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	440b      	add	r3, r1
 8006984:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800698e:	1ad2      	subs	r2, r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d114      	bne.n	80069c4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d109      	bne.n	80069b6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6818      	ldr	r0, [r3, #0]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80069ac:	461a      	mov	r2, r3
 80069ae:	2101      	movs	r1, #1
 80069b0:	f004 f816 	bl	800a9e0 <USB_EP0_OutStart>
 80069b4:	e006      	b.n	80069c4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	68da      	ldr	r2, [r3, #12]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	441a      	add	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	4619      	mov	r1, r3
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f007 fe78 	bl	800e6c0 <HAL_PCD_DataOutStageCallback>
 80069d0:	e046      	b.n	8006a60 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	4a26      	ldr	r2, [pc, #152]	@ (8006a70 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d124      	bne.n	8006a24 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00a      	beq.n	80069fa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069f0:	461a      	mov	r2, r3
 80069f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069f6:	6093      	str	r3, [r2, #8]
 80069f8:	e032      	b.n	8006a60 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	f003 0320 	and.w	r3, r3, #32
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d008      	beq.n	8006a16 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a10:	461a      	mov	r2, r3
 8006a12:	2320      	movs	r3, #32
 8006a14:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f007 fe4f 	bl	800e6c0 <HAL_PCD_DataOutStageCallback>
 8006a22:	e01d      	b.n	8006a60 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d114      	bne.n	8006a54 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006a2a:	6879      	ldr	r1, [r7, #4]
 8006a2c:	683a      	ldr	r2, [r7, #0]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	00db      	lsls	r3, r3, #3
 8006a32:	4413      	add	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	440b      	add	r3, r1
 8006a38:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d108      	bne.n	8006a54 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6818      	ldr	r0, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	2100      	movs	r1, #0
 8006a50:	f003 ffc6 	bl	800a9e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	4619      	mov	r1, r3
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f007 fe30 	bl	800e6c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3720      	adds	r7, #32
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	4f54300a 	.word	0x4f54300a
 8006a70:	4f54310a 	.word	0x4f54310a

08006a74 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	333c      	adds	r3, #60	@ 0x3c
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	4a15      	ldr	r2, [pc, #84]	@ (8006afc <PCD_EP_OutSetupPacket_int+0x88>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d90e      	bls.n	8006ac8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d009      	beq.n	8006ac8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ac6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f007 fde7 	bl	800e69c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8006afc <PCD_EP_OutSetupPacket_int+0x88>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d90c      	bls.n	8006af0 <PCD_EP_OutSetupPacket_int+0x7c>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	799b      	ldrb	r3, [r3, #6]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d108      	bne.n	8006af0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6818      	ldr	r0, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006ae8:	461a      	mov	r2, r3
 8006aea:	2101      	movs	r1, #1
 8006aec:	f003 ff78 	bl	800a9e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3718      	adds	r7, #24
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	4f54300a 	.word	0x4f54300a

08006b00 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	460b      	mov	r3, r1
 8006b0a:	70fb      	strb	r3, [r7, #3]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b16:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006b18:	78fb      	ldrb	r3, [r7, #3]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d107      	bne.n	8006b2e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006b1e:	883b      	ldrh	r3, [r7, #0]
 8006b20:	0419      	lsls	r1, r3, #16
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	629a      	str	r2, [r3, #40]	@ 0x28
 8006b2c:	e028      	b.n	8006b80 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b34:	0c1b      	lsrs	r3, r3, #16
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	4413      	add	r3, r2
 8006b3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	73fb      	strb	r3, [r7, #15]
 8006b40:	e00d      	b.n	8006b5e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	7bfb      	ldrb	r3, [r7, #15]
 8006b48:	3340      	adds	r3, #64	@ 0x40
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	4413      	add	r3, r2
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	0c1b      	lsrs	r3, r3, #16
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	4413      	add	r3, r2
 8006b56:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006b58:	7bfb      	ldrb	r3, [r7, #15]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	73fb      	strb	r3, [r7, #15]
 8006b5e:	7bfa      	ldrb	r2, [r7, #15]
 8006b60:	78fb      	ldrb	r3, [r7, #3]
 8006b62:	3b01      	subs	r3, #1
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d3ec      	bcc.n	8006b42 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006b68:	883b      	ldrh	r3, [r7, #0]
 8006b6a:	0418      	lsls	r0, r3, #16
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6819      	ldr	r1, [r3, #0]
 8006b70:	78fb      	ldrb	r3, [r7, #3]
 8006b72:	3b01      	subs	r3, #1
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	4302      	orrs	r2, r0
 8006b78:	3340      	adds	r3, #64	@ 0x40
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	440b      	add	r3, r1
 8006b7e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b083      	sub	sp, #12
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	460b      	mov	r3, r1
 8006b98:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	887a      	ldrh	r2, [r7, #2]
 8006ba0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	460b      	mov	r3, r1
 8006bba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d101      	bne.n	8006bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e267      	b.n	80070aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d075      	beq.n	8006cd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006be6:	4b88      	ldr	r3, [pc, #544]	@ (8006e08 <HAL_RCC_OscConfig+0x240>)
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f003 030c 	and.w	r3, r3, #12
 8006bee:	2b04      	cmp	r3, #4
 8006bf0:	d00c      	beq.n	8006c0c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bf2:	4b85      	ldr	r3, [pc, #532]	@ (8006e08 <HAL_RCC_OscConfig+0x240>)
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006bfa:	2b08      	cmp	r3, #8
 8006bfc:	d112      	bne.n	8006c24 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bfe:	4b82      	ldr	r3, [pc, #520]	@ (8006e08 <HAL_RCC_OscConfig+0x240>)
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c0a:	d10b      	bne.n	8006c24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c0c:	4b7e      	ldr	r3, [pc, #504]	@ (8006e08 <HAL_RCC_OscConfig+0x240>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d05b      	beq.n	8006cd0 <HAL_RCC_OscConfig+0x108>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d157      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e242      	b.n	80070aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c2c:	d106      	bne.n	8006c3c <HAL_RCC_OscConfig+0x74>
 8006c2e:	4b76      	ldr	r3, [pc, #472]	@ (8006e08 <HAL_RCC_OscConfig+0x240>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a75      	ldr	r2, [pc, #468]	@ (8006e08 <HAL_RCC_OscConfig+0x240>)
 8006c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c38:	6013      	str	r3, [r2, #0]
 8006c3a:	e01d      	b.n	8006c78 <HAL_RCC_OscConfig+0xb0>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c44:	d10c      	bne.n	8006c60 <HAL_RCC_OscConfig+0x98>
 8006c46:	4b70      	ldr	r3, [pc, #448]	@ (8006e08 <HAL_RCC_OscConfig+0x240>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a6f      	ldr	r2, [pc, #444]	@ (8006e08 <HAL_RCC_OscConfig+0x240>)
 8006c4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c50:	6013      	str	r3, [r2, #0]
 8006c52:	4b6d      	ldr	r3, [pc, #436]	@ (8006e08 <HAL_RCC_OscConfig+0x240>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a6c      	ldr	r2, [pc, #432]	@ (8006e08 <HAL_RCC_OscConfig+0x240>)
 8006c58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c5c:	6013      	str	r3, [r2, #0]
 8006c5e:	e00b      	b.n	8006c78 <HAL_RCC_OscConfig+0xb0>
 8006c60:	4b69      	ldr	r3, [pc, #420]	@ (8006e08 <HAL_RCC_OscConfig+0x240>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a68      	ldr	r2, [pc, #416]	@ (8006e08 <HAL_RCC_OscConfig+0x240>)
 8006c66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c6a:	6013      	str	r3, [r2, #0]
 8006c6c:	4b66      	ldr	r3, [pc, #408]	@ (8006e08 <HAL_RCC_OscConfig+0x240>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a65      	ldr	r2, [pc, #404]	@ (8006e08 <HAL_RCC_OscConfig+0x240>)
 8006c72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d013      	beq.n	8006ca8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c80:	f7fd fa14 	bl	80040ac <HAL_GetTick>
 8006c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c86:	e008      	b.n	8006c9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c88:	f7fd fa10 	bl	80040ac <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	2b64      	cmp	r3, #100	@ 0x64
 8006c94:	d901      	bls.n	8006c9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e207      	b.n	80070aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c9a:	4b5b      	ldr	r3, [pc, #364]	@ (8006e08 <HAL_RCC_OscConfig+0x240>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d0f0      	beq.n	8006c88 <HAL_RCC_OscConfig+0xc0>
 8006ca6:	e014      	b.n	8006cd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ca8:	f7fd fa00 	bl	80040ac <HAL_GetTick>
 8006cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cae:	e008      	b.n	8006cc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cb0:	f7fd f9fc 	bl	80040ac <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	2b64      	cmp	r3, #100	@ 0x64
 8006cbc:	d901      	bls.n	8006cc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e1f3      	b.n	80070aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cc2:	4b51      	ldr	r3, [pc, #324]	@ (8006e08 <HAL_RCC_OscConfig+0x240>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1f0      	bne.n	8006cb0 <HAL_RCC_OscConfig+0xe8>
 8006cce:	e000      	b.n	8006cd2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 0302 	and.w	r3, r3, #2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d063      	beq.n	8006da6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006cde:	4b4a      	ldr	r3, [pc, #296]	@ (8006e08 <HAL_RCC_OscConfig+0x240>)
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f003 030c 	and.w	r3, r3, #12
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00b      	beq.n	8006d02 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cea:	4b47      	ldr	r3, [pc, #284]	@ (8006e08 <HAL_RCC_OscConfig+0x240>)
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006cf2:	2b08      	cmp	r3, #8
 8006cf4:	d11c      	bne.n	8006d30 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cf6:	4b44      	ldr	r3, [pc, #272]	@ (8006e08 <HAL_RCC_OscConfig+0x240>)
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d116      	bne.n	8006d30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d02:	4b41      	ldr	r3, [pc, #260]	@ (8006e08 <HAL_RCC_OscConfig+0x240>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0302 	and.w	r3, r3, #2
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d005      	beq.n	8006d1a <HAL_RCC_OscConfig+0x152>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d001      	beq.n	8006d1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e1c7      	b.n	80070aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d1a:	4b3b      	ldr	r3, [pc, #236]	@ (8006e08 <HAL_RCC_OscConfig+0x240>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	00db      	lsls	r3, r3, #3
 8006d28:	4937      	ldr	r1, [pc, #220]	@ (8006e08 <HAL_RCC_OscConfig+0x240>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d2e:	e03a      	b.n	8006da6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d020      	beq.n	8006d7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d38:	4b34      	ldr	r3, [pc, #208]	@ (8006e0c <HAL_RCC_OscConfig+0x244>)
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d3e:	f7fd f9b5 	bl	80040ac <HAL_GetTick>
 8006d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d44:	e008      	b.n	8006d58 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d46:	f7fd f9b1 	bl	80040ac <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d901      	bls.n	8006d58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e1a8      	b.n	80070aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d58:	4b2b      	ldr	r3, [pc, #172]	@ (8006e08 <HAL_RCC_OscConfig+0x240>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0302 	and.w	r3, r3, #2
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d0f0      	beq.n	8006d46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d64:	4b28      	ldr	r3, [pc, #160]	@ (8006e08 <HAL_RCC_OscConfig+0x240>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	00db      	lsls	r3, r3, #3
 8006d72:	4925      	ldr	r1, [pc, #148]	@ (8006e08 <HAL_RCC_OscConfig+0x240>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	600b      	str	r3, [r1, #0]
 8006d78:	e015      	b.n	8006da6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d7a:	4b24      	ldr	r3, [pc, #144]	@ (8006e0c <HAL_RCC_OscConfig+0x244>)
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d80:	f7fd f994 	bl	80040ac <HAL_GetTick>
 8006d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d86:	e008      	b.n	8006d9a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d88:	f7fd f990 	bl	80040ac <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d901      	bls.n	8006d9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e187      	b.n	80070aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8006e08 <HAL_RCC_OscConfig+0x240>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 0302 	and.w	r3, r3, #2
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1f0      	bne.n	8006d88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0308 	and.w	r3, r3, #8
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d036      	beq.n	8006e20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d016      	beq.n	8006de8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006dba:	4b15      	ldr	r3, [pc, #84]	@ (8006e10 <HAL_RCC_OscConfig+0x248>)
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dc0:	f7fd f974 	bl	80040ac <HAL_GetTick>
 8006dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dc6:	e008      	b.n	8006dda <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006dc8:	f7fd f970 	bl	80040ac <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d901      	bls.n	8006dda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e167      	b.n	80070aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dda:	4b0b      	ldr	r3, [pc, #44]	@ (8006e08 <HAL_RCC_OscConfig+0x240>)
 8006ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dde:	f003 0302 	and.w	r3, r3, #2
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d0f0      	beq.n	8006dc8 <HAL_RCC_OscConfig+0x200>
 8006de6:	e01b      	b.n	8006e20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006de8:	4b09      	ldr	r3, [pc, #36]	@ (8006e10 <HAL_RCC_OscConfig+0x248>)
 8006dea:	2200      	movs	r2, #0
 8006dec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dee:	f7fd f95d 	bl	80040ac <HAL_GetTick>
 8006df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006df4:	e00e      	b.n	8006e14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006df6:	f7fd f959 	bl	80040ac <HAL_GetTick>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	d907      	bls.n	8006e14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e150      	b.n	80070aa <HAL_RCC_OscConfig+0x4e2>
 8006e08:	40023800 	.word	0x40023800
 8006e0c:	42470000 	.word	0x42470000
 8006e10:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e14:	4b88      	ldr	r3, [pc, #544]	@ (8007038 <HAL_RCC_OscConfig+0x470>)
 8006e16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e18:	f003 0302 	and.w	r3, r3, #2
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1ea      	bne.n	8006df6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0304 	and.w	r3, r3, #4
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f000 8097 	beq.w	8006f5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e32:	4b81      	ldr	r3, [pc, #516]	@ (8007038 <HAL_RCC_OscConfig+0x470>)
 8006e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10f      	bne.n	8006e5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e3e:	2300      	movs	r3, #0
 8006e40:	60bb      	str	r3, [r7, #8]
 8006e42:	4b7d      	ldr	r3, [pc, #500]	@ (8007038 <HAL_RCC_OscConfig+0x470>)
 8006e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e46:	4a7c      	ldr	r2, [pc, #496]	@ (8007038 <HAL_RCC_OscConfig+0x470>)
 8006e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006e4e:	4b7a      	ldr	r3, [pc, #488]	@ (8007038 <HAL_RCC_OscConfig+0x470>)
 8006e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e56:	60bb      	str	r3, [r7, #8]
 8006e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e5e:	4b77      	ldr	r3, [pc, #476]	@ (800703c <HAL_RCC_OscConfig+0x474>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d118      	bne.n	8006e9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e6a:	4b74      	ldr	r3, [pc, #464]	@ (800703c <HAL_RCC_OscConfig+0x474>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a73      	ldr	r2, [pc, #460]	@ (800703c <HAL_RCC_OscConfig+0x474>)
 8006e70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e76:	f7fd f919 	bl	80040ac <HAL_GetTick>
 8006e7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e7c:	e008      	b.n	8006e90 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e7e:	f7fd f915 	bl	80040ac <HAL_GetTick>
 8006e82:	4602      	mov	r2, r0
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d901      	bls.n	8006e90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e10c      	b.n	80070aa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e90:	4b6a      	ldr	r3, [pc, #424]	@ (800703c <HAL_RCC_OscConfig+0x474>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d0f0      	beq.n	8006e7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d106      	bne.n	8006eb2 <HAL_RCC_OscConfig+0x2ea>
 8006ea4:	4b64      	ldr	r3, [pc, #400]	@ (8007038 <HAL_RCC_OscConfig+0x470>)
 8006ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ea8:	4a63      	ldr	r2, [pc, #396]	@ (8007038 <HAL_RCC_OscConfig+0x470>)
 8006eaa:	f043 0301 	orr.w	r3, r3, #1
 8006eae:	6713      	str	r3, [r2, #112]	@ 0x70
 8006eb0:	e01c      	b.n	8006eec <HAL_RCC_OscConfig+0x324>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	2b05      	cmp	r3, #5
 8006eb8:	d10c      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x30c>
 8006eba:	4b5f      	ldr	r3, [pc, #380]	@ (8007038 <HAL_RCC_OscConfig+0x470>)
 8006ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ebe:	4a5e      	ldr	r2, [pc, #376]	@ (8007038 <HAL_RCC_OscConfig+0x470>)
 8006ec0:	f043 0304 	orr.w	r3, r3, #4
 8006ec4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ec6:	4b5c      	ldr	r3, [pc, #368]	@ (8007038 <HAL_RCC_OscConfig+0x470>)
 8006ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eca:	4a5b      	ldr	r2, [pc, #364]	@ (8007038 <HAL_RCC_OscConfig+0x470>)
 8006ecc:	f043 0301 	orr.w	r3, r3, #1
 8006ed0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ed2:	e00b      	b.n	8006eec <HAL_RCC_OscConfig+0x324>
 8006ed4:	4b58      	ldr	r3, [pc, #352]	@ (8007038 <HAL_RCC_OscConfig+0x470>)
 8006ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ed8:	4a57      	ldr	r2, [pc, #348]	@ (8007038 <HAL_RCC_OscConfig+0x470>)
 8006eda:	f023 0301 	bic.w	r3, r3, #1
 8006ede:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ee0:	4b55      	ldr	r3, [pc, #340]	@ (8007038 <HAL_RCC_OscConfig+0x470>)
 8006ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ee4:	4a54      	ldr	r2, [pc, #336]	@ (8007038 <HAL_RCC_OscConfig+0x470>)
 8006ee6:	f023 0304 	bic.w	r3, r3, #4
 8006eea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d015      	beq.n	8006f20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ef4:	f7fd f8da 	bl	80040ac <HAL_GetTick>
 8006ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006efa:	e00a      	b.n	8006f12 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006efc:	f7fd f8d6 	bl	80040ac <HAL_GetTick>
 8006f00:	4602      	mov	r2, r0
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d901      	bls.n	8006f12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e0cb      	b.n	80070aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f12:	4b49      	ldr	r3, [pc, #292]	@ (8007038 <HAL_RCC_OscConfig+0x470>)
 8006f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f16:	f003 0302 	and.w	r3, r3, #2
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d0ee      	beq.n	8006efc <HAL_RCC_OscConfig+0x334>
 8006f1e:	e014      	b.n	8006f4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f20:	f7fd f8c4 	bl	80040ac <HAL_GetTick>
 8006f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f26:	e00a      	b.n	8006f3e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f28:	f7fd f8c0 	bl	80040ac <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d901      	bls.n	8006f3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e0b5      	b.n	80070aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f3e:	4b3e      	ldr	r3, [pc, #248]	@ (8007038 <HAL_RCC_OscConfig+0x470>)
 8006f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f42:	f003 0302 	and.w	r3, r3, #2
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1ee      	bne.n	8006f28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006f4a:	7dfb      	ldrb	r3, [r7, #23]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d105      	bne.n	8006f5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f50:	4b39      	ldr	r3, [pc, #228]	@ (8007038 <HAL_RCC_OscConfig+0x470>)
 8006f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f54:	4a38      	ldr	r2, [pc, #224]	@ (8007038 <HAL_RCC_OscConfig+0x470>)
 8006f56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f000 80a1 	beq.w	80070a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f66:	4b34      	ldr	r3, [pc, #208]	@ (8007038 <HAL_RCC_OscConfig+0x470>)
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f003 030c 	and.w	r3, r3, #12
 8006f6e:	2b08      	cmp	r3, #8
 8006f70:	d05c      	beq.n	800702c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d141      	bne.n	8006ffe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f7a:	4b31      	ldr	r3, [pc, #196]	@ (8007040 <HAL_RCC_OscConfig+0x478>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f80:	f7fd f894 	bl	80040ac <HAL_GetTick>
 8006f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f86:	e008      	b.n	8006f9a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f88:	f7fd f890 	bl	80040ac <HAL_GetTick>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d901      	bls.n	8006f9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e087      	b.n	80070aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f9a:	4b27      	ldr	r3, [pc, #156]	@ (8007038 <HAL_RCC_OscConfig+0x470>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1f0      	bne.n	8006f88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	69da      	ldr	r2, [r3, #28]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	431a      	orrs	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb4:	019b      	lsls	r3, r3, #6
 8006fb6:	431a      	orrs	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fbc:	085b      	lsrs	r3, r3, #1
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	041b      	lsls	r3, r3, #16
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fc8:	061b      	lsls	r3, r3, #24
 8006fca:	491b      	ldr	r1, [pc, #108]	@ (8007038 <HAL_RCC_OscConfig+0x470>)
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8007040 <HAL_RCC_OscConfig+0x478>)
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fd6:	f7fd f869 	bl	80040ac <HAL_GetTick>
 8006fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fdc:	e008      	b.n	8006ff0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fde:	f7fd f865 	bl	80040ac <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d901      	bls.n	8006ff0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e05c      	b.n	80070aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ff0:	4b11      	ldr	r3, [pc, #68]	@ (8007038 <HAL_RCC_OscConfig+0x470>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d0f0      	beq.n	8006fde <HAL_RCC_OscConfig+0x416>
 8006ffc:	e054      	b.n	80070a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ffe:	4b10      	ldr	r3, [pc, #64]	@ (8007040 <HAL_RCC_OscConfig+0x478>)
 8007000:	2200      	movs	r2, #0
 8007002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007004:	f7fd f852 	bl	80040ac <HAL_GetTick>
 8007008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800700a:	e008      	b.n	800701e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800700c:	f7fd f84e 	bl	80040ac <HAL_GetTick>
 8007010:	4602      	mov	r2, r0
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	2b02      	cmp	r3, #2
 8007018:	d901      	bls.n	800701e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e045      	b.n	80070aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800701e:	4b06      	ldr	r3, [pc, #24]	@ (8007038 <HAL_RCC_OscConfig+0x470>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1f0      	bne.n	800700c <HAL_RCC_OscConfig+0x444>
 800702a:	e03d      	b.n	80070a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	699b      	ldr	r3, [r3, #24]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d107      	bne.n	8007044 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e038      	b.n	80070aa <HAL_RCC_OscConfig+0x4e2>
 8007038:	40023800 	.word	0x40023800
 800703c:	40007000 	.word	0x40007000
 8007040:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007044:	4b1b      	ldr	r3, [pc, #108]	@ (80070b4 <HAL_RCC_OscConfig+0x4ec>)
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	2b01      	cmp	r3, #1
 8007050:	d028      	beq.n	80070a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800705c:	429a      	cmp	r2, r3
 800705e:	d121      	bne.n	80070a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800706a:	429a      	cmp	r2, r3
 800706c:	d11a      	bne.n	80070a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007074:	4013      	ands	r3, r2
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800707a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800707c:	4293      	cmp	r3, r2
 800707e:	d111      	bne.n	80070a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800708a:	085b      	lsrs	r3, r3, #1
 800708c:	3b01      	subs	r3, #1
 800708e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007090:	429a      	cmp	r2, r3
 8007092:	d107      	bne.n	80070a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d001      	beq.n	80070a8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e000      	b.n	80070aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3718      	adds	r7, #24
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	40023800 	.word	0x40023800

080070b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d101      	bne.n	80070cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e0cc      	b.n	8007266 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80070cc:	4b68      	ldr	r3, [pc, #416]	@ (8007270 <HAL_RCC_ClockConfig+0x1b8>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0307 	and.w	r3, r3, #7
 80070d4:	683a      	ldr	r2, [r7, #0]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d90c      	bls.n	80070f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070da:	4b65      	ldr	r3, [pc, #404]	@ (8007270 <HAL_RCC_ClockConfig+0x1b8>)
 80070dc:	683a      	ldr	r2, [r7, #0]
 80070de:	b2d2      	uxtb	r2, r2
 80070e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070e2:	4b63      	ldr	r3, [pc, #396]	@ (8007270 <HAL_RCC_ClockConfig+0x1b8>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0307 	and.w	r3, r3, #7
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d001      	beq.n	80070f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e0b8      	b.n	8007266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0302 	and.w	r3, r3, #2
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d020      	beq.n	8007142 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0304 	and.w	r3, r3, #4
 8007108:	2b00      	cmp	r3, #0
 800710a:	d005      	beq.n	8007118 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800710c:	4b59      	ldr	r3, [pc, #356]	@ (8007274 <HAL_RCC_ClockConfig+0x1bc>)
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	4a58      	ldr	r2, [pc, #352]	@ (8007274 <HAL_RCC_ClockConfig+0x1bc>)
 8007112:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007116:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0308 	and.w	r3, r3, #8
 8007120:	2b00      	cmp	r3, #0
 8007122:	d005      	beq.n	8007130 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007124:	4b53      	ldr	r3, [pc, #332]	@ (8007274 <HAL_RCC_ClockConfig+0x1bc>)
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	4a52      	ldr	r2, [pc, #328]	@ (8007274 <HAL_RCC_ClockConfig+0x1bc>)
 800712a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800712e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007130:	4b50      	ldr	r3, [pc, #320]	@ (8007274 <HAL_RCC_ClockConfig+0x1bc>)
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	494d      	ldr	r1, [pc, #308]	@ (8007274 <HAL_RCC_ClockConfig+0x1bc>)
 800713e:	4313      	orrs	r3, r2
 8007140:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 0301 	and.w	r3, r3, #1
 800714a:	2b00      	cmp	r3, #0
 800714c:	d044      	beq.n	80071d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d107      	bne.n	8007166 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007156:	4b47      	ldr	r3, [pc, #284]	@ (8007274 <HAL_RCC_ClockConfig+0x1bc>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d119      	bne.n	8007196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e07f      	b.n	8007266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	2b02      	cmp	r3, #2
 800716c:	d003      	beq.n	8007176 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007172:	2b03      	cmp	r3, #3
 8007174:	d107      	bne.n	8007186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007176:	4b3f      	ldr	r3, [pc, #252]	@ (8007274 <HAL_RCC_ClockConfig+0x1bc>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d109      	bne.n	8007196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e06f      	b.n	8007266 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007186:	4b3b      	ldr	r3, [pc, #236]	@ (8007274 <HAL_RCC_ClockConfig+0x1bc>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0302 	and.w	r3, r3, #2
 800718e:	2b00      	cmp	r3, #0
 8007190:	d101      	bne.n	8007196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e067      	b.n	8007266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007196:	4b37      	ldr	r3, [pc, #220]	@ (8007274 <HAL_RCC_ClockConfig+0x1bc>)
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f023 0203 	bic.w	r2, r3, #3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	4934      	ldr	r1, [pc, #208]	@ (8007274 <HAL_RCC_ClockConfig+0x1bc>)
 80071a4:	4313      	orrs	r3, r2
 80071a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80071a8:	f7fc ff80 	bl	80040ac <HAL_GetTick>
 80071ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071ae:	e00a      	b.n	80071c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071b0:	f7fc ff7c 	bl	80040ac <HAL_GetTick>
 80071b4:	4602      	mov	r2, r0
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071be:	4293      	cmp	r3, r2
 80071c0:	d901      	bls.n	80071c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e04f      	b.n	8007266 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071c6:	4b2b      	ldr	r3, [pc, #172]	@ (8007274 <HAL_RCC_ClockConfig+0x1bc>)
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f003 020c 	and.w	r2, r3, #12
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d1eb      	bne.n	80071b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071d8:	4b25      	ldr	r3, [pc, #148]	@ (8007270 <HAL_RCC_ClockConfig+0x1b8>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0307 	and.w	r3, r3, #7
 80071e0:	683a      	ldr	r2, [r7, #0]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d20c      	bcs.n	8007200 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071e6:	4b22      	ldr	r3, [pc, #136]	@ (8007270 <HAL_RCC_ClockConfig+0x1b8>)
 80071e8:	683a      	ldr	r2, [r7, #0]
 80071ea:	b2d2      	uxtb	r2, r2
 80071ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ee:	4b20      	ldr	r3, [pc, #128]	@ (8007270 <HAL_RCC_ClockConfig+0x1b8>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 0307 	and.w	r3, r3, #7
 80071f6:	683a      	ldr	r2, [r7, #0]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d001      	beq.n	8007200 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e032      	b.n	8007266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 0304 	and.w	r3, r3, #4
 8007208:	2b00      	cmp	r3, #0
 800720a:	d008      	beq.n	800721e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800720c:	4b19      	ldr	r3, [pc, #100]	@ (8007274 <HAL_RCC_ClockConfig+0x1bc>)
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	4916      	ldr	r1, [pc, #88]	@ (8007274 <HAL_RCC_ClockConfig+0x1bc>)
 800721a:	4313      	orrs	r3, r2
 800721c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0308 	and.w	r3, r3, #8
 8007226:	2b00      	cmp	r3, #0
 8007228:	d009      	beq.n	800723e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800722a:	4b12      	ldr	r3, [pc, #72]	@ (8007274 <HAL_RCC_ClockConfig+0x1bc>)
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	00db      	lsls	r3, r3, #3
 8007238:	490e      	ldr	r1, [pc, #56]	@ (8007274 <HAL_RCC_ClockConfig+0x1bc>)
 800723a:	4313      	orrs	r3, r2
 800723c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800723e:	f000 f821 	bl	8007284 <HAL_RCC_GetSysClockFreq>
 8007242:	4602      	mov	r2, r0
 8007244:	4b0b      	ldr	r3, [pc, #44]	@ (8007274 <HAL_RCC_ClockConfig+0x1bc>)
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	091b      	lsrs	r3, r3, #4
 800724a:	f003 030f 	and.w	r3, r3, #15
 800724e:	490a      	ldr	r1, [pc, #40]	@ (8007278 <HAL_RCC_ClockConfig+0x1c0>)
 8007250:	5ccb      	ldrb	r3, [r1, r3]
 8007252:	fa22 f303 	lsr.w	r3, r2, r3
 8007256:	4a09      	ldr	r2, [pc, #36]	@ (800727c <HAL_RCC_ClockConfig+0x1c4>)
 8007258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800725a:	4b09      	ldr	r3, [pc, #36]	@ (8007280 <HAL_RCC_ClockConfig+0x1c8>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4618      	mov	r0, r3
 8007260:	f7fc fd3a 	bl	8003cd8 <HAL_InitTick>

  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	40023c00 	.word	0x40023c00
 8007274:	40023800 	.word	0x40023800
 8007278:	0801419c 	.word	0x0801419c
 800727c:	200000a8 	.word	0x200000a8
 8007280:	200000ac 	.word	0x200000ac

08007284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007288:	b090      	sub	sp, #64	@ 0x40
 800728a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800728c:	2300      	movs	r3, #0
 800728e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007290:	2300      	movs	r3, #0
 8007292:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8007294:	2300      	movs	r3, #0
 8007296:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007298:	2300      	movs	r3, #0
 800729a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800729c:	4b59      	ldr	r3, [pc, #356]	@ (8007404 <HAL_RCC_GetSysClockFreq+0x180>)
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	f003 030c 	and.w	r3, r3, #12
 80072a4:	2b08      	cmp	r3, #8
 80072a6:	d00d      	beq.n	80072c4 <HAL_RCC_GetSysClockFreq+0x40>
 80072a8:	2b08      	cmp	r3, #8
 80072aa:	f200 80a1 	bhi.w	80073f0 <HAL_RCC_GetSysClockFreq+0x16c>
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d002      	beq.n	80072b8 <HAL_RCC_GetSysClockFreq+0x34>
 80072b2:	2b04      	cmp	r3, #4
 80072b4:	d003      	beq.n	80072be <HAL_RCC_GetSysClockFreq+0x3a>
 80072b6:	e09b      	b.n	80073f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80072b8:	4b53      	ldr	r3, [pc, #332]	@ (8007408 <HAL_RCC_GetSysClockFreq+0x184>)
 80072ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80072bc:	e09b      	b.n	80073f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80072be:	4b53      	ldr	r3, [pc, #332]	@ (800740c <HAL_RCC_GetSysClockFreq+0x188>)
 80072c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80072c2:	e098      	b.n	80073f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80072c4:	4b4f      	ldr	r3, [pc, #316]	@ (8007404 <HAL_RCC_GetSysClockFreq+0x180>)
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80072ce:	4b4d      	ldr	r3, [pc, #308]	@ (8007404 <HAL_RCC_GetSysClockFreq+0x180>)
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d028      	beq.n	800732c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072da:	4b4a      	ldr	r3, [pc, #296]	@ (8007404 <HAL_RCC_GetSysClockFreq+0x180>)
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	099b      	lsrs	r3, r3, #6
 80072e0:	2200      	movs	r2, #0
 80072e2:	623b      	str	r3, [r7, #32]
 80072e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80072e6:	6a3b      	ldr	r3, [r7, #32]
 80072e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80072ec:	2100      	movs	r1, #0
 80072ee:	4b47      	ldr	r3, [pc, #284]	@ (800740c <HAL_RCC_GetSysClockFreq+0x188>)
 80072f0:	fb03 f201 	mul.w	r2, r3, r1
 80072f4:	2300      	movs	r3, #0
 80072f6:	fb00 f303 	mul.w	r3, r0, r3
 80072fa:	4413      	add	r3, r2
 80072fc:	4a43      	ldr	r2, [pc, #268]	@ (800740c <HAL_RCC_GetSysClockFreq+0x188>)
 80072fe:	fba0 1202 	umull	r1, r2, r0, r2
 8007302:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007304:	460a      	mov	r2, r1
 8007306:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007308:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800730a:	4413      	add	r3, r2
 800730c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800730e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007310:	2200      	movs	r2, #0
 8007312:	61bb      	str	r3, [r7, #24]
 8007314:	61fa      	str	r2, [r7, #28]
 8007316:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800731a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800731e:	f7f9 fc6b 	bl	8000bf8 <__aeabi_uldivmod>
 8007322:	4602      	mov	r2, r0
 8007324:	460b      	mov	r3, r1
 8007326:	4613      	mov	r3, r2
 8007328:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800732a:	e053      	b.n	80073d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800732c:	4b35      	ldr	r3, [pc, #212]	@ (8007404 <HAL_RCC_GetSysClockFreq+0x180>)
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	099b      	lsrs	r3, r3, #6
 8007332:	2200      	movs	r2, #0
 8007334:	613b      	str	r3, [r7, #16]
 8007336:	617a      	str	r2, [r7, #20]
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800733e:	f04f 0b00 	mov.w	fp, #0
 8007342:	4652      	mov	r2, sl
 8007344:	465b      	mov	r3, fp
 8007346:	f04f 0000 	mov.w	r0, #0
 800734a:	f04f 0100 	mov.w	r1, #0
 800734e:	0159      	lsls	r1, r3, #5
 8007350:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007354:	0150      	lsls	r0, r2, #5
 8007356:	4602      	mov	r2, r0
 8007358:	460b      	mov	r3, r1
 800735a:	ebb2 080a 	subs.w	r8, r2, sl
 800735e:	eb63 090b 	sbc.w	r9, r3, fp
 8007362:	f04f 0200 	mov.w	r2, #0
 8007366:	f04f 0300 	mov.w	r3, #0
 800736a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800736e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007372:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007376:	ebb2 0408 	subs.w	r4, r2, r8
 800737a:	eb63 0509 	sbc.w	r5, r3, r9
 800737e:	f04f 0200 	mov.w	r2, #0
 8007382:	f04f 0300 	mov.w	r3, #0
 8007386:	00eb      	lsls	r3, r5, #3
 8007388:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800738c:	00e2      	lsls	r2, r4, #3
 800738e:	4614      	mov	r4, r2
 8007390:	461d      	mov	r5, r3
 8007392:	eb14 030a 	adds.w	r3, r4, sl
 8007396:	603b      	str	r3, [r7, #0]
 8007398:	eb45 030b 	adc.w	r3, r5, fp
 800739c:	607b      	str	r3, [r7, #4]
 800739e:	f04f 0200 	mov.w	r2, #0
 80073a2:	f04f 0300 	mov.w	r3, #0
 80073a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80073aa:	4629      	mov	r1, r5
 80073ac:	028b      	lsls	r3, r1, #10
 80073ae:	4621      	mov	r1, r4
 80073b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80073b4:	4621      	mov	r1, r4
 80073b6:	028a      	lsls	r2, r1, #10
 80073b8:	4610      	mov	r0, r2
 80073ba:	4619      	mov	r1, r3
 80073bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073be:	2200      	movs	r2, #0
 80073c0:	60bb      	str	r3, [r7, #8]
 80073c2:	60fa      	str	r2, [r7, #12]
 80073c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073c8:	f7f9 fc16 	bl	8000bf8 <__aeabi_uldivmod>
 80073cc:	4602      	mov	r2, r0
 80073ce:	460b      	mov	r3, r1
 80073d0:	4613      	mov	r3, r2
 80073d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80073d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007404 <HAL_RCC_GetSysClockFreq+0x180>)
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	0c1b      	lsrs	r3, r3, #16
 80073da:	f003 0303 	and.w	r3, r3, #3
 80073de:	3301      	adds	r3, #1
 80073e0:	005b      	lsls	r3, r3, #1
 80073e2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80073e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80073e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80073ee:	e002      	b.n	80073f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80073f0:	4b05      	ldr	r3, [pc, #20]	@ (8007408 <HAL_RCC_GetSysClockFreq+0x184>)
 80073f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80073f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3740      	adds	r7, #64	@ 0x40
 80073fc:	46bd      	mov	sp, r7
 80073fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007402:	bf00      	nop
 8007404:	40023800 	.word	0x40023800
 8007408:	00f42400 	.word	0x00f42400
 800740c:	017d7840 	.word	0x017d7840

08007410 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007410:	b480      	push	{r7}
 8007412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007414:	4b03      	ldr	r3, [pc, #12]	@ (8007424 <HAL_RCC_GetHCLKFreq+0x14>)
 8007416:	681b      	ldr	r3, [r3, #0]
}
 8007418:	4618      	mov	r0, r3
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	200000a8 	.word	0x200000a8

08007428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800742c:	f7ff fff0 	bl	8007410 <HAL_RCC_GetHCLKFreq>
 8007430:	4602      	mov	r2, r0
 8007432:	4b05      	ldr	r3, [pc, #20]	@ (8007448 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	0a9b      	lsrs	r3, r3, #10
 8007438:	f003 0307 	and.w	r3, r3, #7
 800743c:	4903      	ldr	r1, [pc, #12]	@ (800744c <HAL_RCC_GetPCLK1Freq+0x24>)
 800743e:	5ccb      	ldrb	r3, [r1, r3]
 8007440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007444:	4618      	mov	r0, r3
 8007446:	bd80      	pop	{r7, pc}
 8007448:	40023800 	.word	0x40023800
 800744c:	080141ac 	.word	0x080141ac

08007450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007454:	f7ff ffdc 	bl	8007410 <HAL_RCC_GetHCLKFreq>
 8007458:	4602      	mov	r2, r0
 800745a:	4b05      	ldr	r3, [pc, #20]	@ (8007470 <HAL_RCC_GetPCLK2Freq+0x20>)
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	0b5b      	lsrs	r3, r3, #13
 8007460:	f003 0307 	and.w	r3, r3, #7
 8007464:	4903      	ldr	r1, [pc, #12]	@ (8007474 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007466:	5ccb      	ldrb	r3, [r1, r3]
 8007468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800746c:	4618      	mov	r0, r3
 800746e:	bd80      	pop	{r7, pc}
 8007470:	40023800 	.word	0x40023800
 8007474:	080141ac 	.word	0x080141ac

08007478 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	220f      	movs	r2, #15
 8007486:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007488:	4b12      	ldr	r3, [pc, #72]	@ (80074d4 <HAL_RCC_GetClockConfig+0x5c>)
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f003 0203 	and.w	r2, r3, #3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007494:	4b0f      	ldr	r3, [pc, #60]	@ (80074d4 <HAL_RCC_GetClockConfig+0x5c>)
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80074a0:	4b0c      	ldr	r3, [pc, #48]	@ (80074d4 <HAL_RCC_GetClockConfig+0x5c>)
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80074ac:	4b09      	ldr	r3, [pc, #36]	@ (80074d4 <HAL_RCC_GetClockConfig+0x5c>)
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	08db      	lsrs	r3, r3, #3
 80074b2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80074ba:	4b07      	ldr	r3, [pc, #28]	@ (80074d8 <HAL_RCC_GetClockConfig+0x60>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 0207 	and.w	r2, r3, #7
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	601a      	str	r2, [r3, #0]
}
 80074c6:	bf00      	nop
 80074c8:	370c      	adds	r7, #12
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	40023800 	.word	0x40023800
 80074d8:	40023c00 	.word	0x40023c00

080074dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d101      	bne.n	80074ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e07b      	b.n	80075e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d108      	bne.n	8007508 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80074fe:	d009      	beq.n	8007514 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	61da      	str	r2, [r3, #28]
 8007506:	e005      	b.n	8007514 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007520:	b2db      	uxtb	r3, r3
 8007522:	2b00      	cmp	r3, #0
 8007524:	d106      	bne.n	8007534 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7fc fafa 	bl	8003b28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2202      	movs	r2, #2
 8007538:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800754a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800755c:	431a      	orrs	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007566:	431a      	orrs	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	f003 0302 	and.w	r3, r3, #2
 8007570:	431a      	orrs	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	431a      	orrs	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007584:	431a      	orrs	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	69db      	ldr	r3, [r3, #28]
 800758a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800758e:	431a      	orrs	r2, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a1b      	ldr	r3, [r3, #32]
 8007594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007598:	ea42 0103 	orr.w	r1, r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	430a      	orrs	r2, r1
 80075aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	0c1b      	lsrs	r3, r3, #16
 80075b2:	f003 0104 	and.w	r1, r3, #4
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ba:	f003 0210 	and.w	r2, r3, #16
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	69da      	ldr	r2, [r3, #28]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80075d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b088      	sub	sp, #32
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	60f8      	str	r0, [r7, #12]
 80075f6:	60b9      	str	r1, [r7, #8]
 80075f8:	603b      	str	r3, [r7, #0]
 80075fa:	4613      	mov	r3, r2
 80075fc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075fe:	f7fc fd55 	bl	80040ac <HAL_GetTick>
 8007602:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007604:	88fb      	ldrh	r3, [r7, #6]
 8007606:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2b01      	cmp	r3, #1
 8007612:	d001      	beq.n	8007618 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007614:	2302      	movs	r3, #2
 8007616:	e12a      	b.n	800786e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d002      	beq.n	8007624 <HAL_SPI_Transmit+0x36>
 800761e:	88fb      	ldrh	r3, [r7, #6]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d101      	bne.n	8007628 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e122      	b.n	800786e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800762e:	2b01      	cmp	r3, #1
 8007630:	d101      	bne.n	8007636 <HAL_SPI_Transmit+0x48>
 8007632:	2302      	movs	r3, #2
 8007634:	e11b      	b.n	800786e <HAL_SPI_Transmit+0x280>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2203      	movs	r2, #3
 8007642:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	88fa      	ldrh	r2, [r7, #6]
 8007656:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	88fa      	ldrh	r2, [r7, #6]
 800765c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2200      	movs	r2, #0
 8007674:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007684:	d10f      	bne.n	80076a6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007694:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80076a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076b0:	2b40      	cmp	r3, #64	@ 0x40
 80076b2:	d007      	beq.n	80076c4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076cc:	d152      	bne.n	8007774 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d002      	beq.n	80076dc <HAL_SPI_Transmit+0xee>
 80076d6:	8b7b      	ldrh	r3, [r7, #26]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d145      	bne.n	8007768 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e0:	881a      	ldrh	r2, [r3, #0]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ec:	1c9a      	adds	r2, r3, #2
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	3b01      	subs	r3, #1
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007700:	e032      	b.n	8007768 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f003 0302 	and.w	r3, r3, #2
 800770c:	2b02      	cmp	r3, #2
 800770e:	d112      	bne.n	8007736 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007714:	881a      	ldrh	r2, [r3, #0]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007720:	1c9a      	adds	r2, r3, #2
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800772a:	b29b      	uxth	r3, r3
 800772c:	3b01      	subs	r3, #1
 800772e:	b29a      	uxth	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007734:	e018      	b.n	8007768 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007736:	f7fc fcb9 	bl	80040ac <HAL_GetTick>
 800773a:	4602      	mov	r2, r0
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	429a      	cmp	r2, r3
 8007744:	d803      	bhi.n	800774e <HAL_SPI_Transmit+0x160>
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800774c:	d102      	bne.n	8007754 <HAL_SPI_Transmit+0x166>
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d109      	bne.n	8007768 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e082      	b.n	800786e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800776c:	b29b      	uxth	r3, r3
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1c7      	bne.n	8007702 <HAL_SPI_Transmit+0x114>
 8007772:	e053      	b.n	800781c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d002      	beq.n	8007782 <HAL_SPI_Transmit+0x194>
 800777c:	8b7b      	ldrh	r3, [r7, #26]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d147      	bne.n	8007812 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	330c      	adds	r3, #12
 800778c:	7812      	ldrb	r2, [r2, #0]
 800778e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007794:	1c5a      	adds	r2, r3, #1
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800779e:	b29b      	uxth	r3, r3
 80077a0:	3b01      	subs	r3, #1
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80077a8:	e033      	b.n	8007812 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	f003 0302 	and.w	r3, r3, #2
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d113      	bne.n	80077e0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	330c      	adds	r3, #12
 80077c2:	7812      	ldrb	r2, [r2, #0]
 80077c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ca:	1c5a      	adds	r2, r3, #1
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	3b01      	subs	r3, #1
 80077d8:	b29a      	uxth	r2, r3
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80077de:	e018      	b.n	8007812 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077e0:	f7fc fc64 	bl	80040ac <HAL_GetTick>
 80077e4:	4602      	mov	r2, r0
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d803      	bhi.n	80077f8 <HAL_SPI_Transmit+0x20a>
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f6:	d102      	bne.n	80077fe <HAL_SPI_Transmit+0x210>
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d109      	bne.n	8007812 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2201      	movs	r2, #1
 8007802:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800780e:	2303      	movs	r3, #3
 8007810:	e02d      	b.n	800786e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007816:	b29b      	uxth	r3, r3
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1c6      	bne.n	80077aa <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800781c:	69fa      	ldr	r2, [r7, #28]
 800781e:	6839      	ldr	r1, [r7, #0]
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f000 fbe7 	bl	8007ff4 <SPI_EndRxTxTransaction>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2220      	movs	r2, #32
 8007830:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d10a      	bne.n	8007850 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800783a:	2300      	movs	r3, #0
 800783c:	617b      	str	r3, [r7, #20]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	617b      	str	r3, [r7, #20]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	617b      	str	r3, [r7, #20]
 800784e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007864:	2b00      	cmp	r3, #0
 8007866:	d001      	beq.n	800786c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	e000      	b.n	800786e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800786c:	2300      	movs	r3, #0
  }
}
 800786e:	4618      	mov	r0, r3
 8007870:	3720      	adds	r7, #32
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b088      	sub	sp, #32
 800787a:	af02      	add	r7, sp, #8
 800787c:	60f8      	str	r0, [r7, #12]
 800787e:	60b9      	str	r1, [r7, #8]
 8007880:	603b      	str	r3, [r7, #0]
 8007882:	4613      	mov	r3, r2
 8007884:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b01      	cmp	r3, #1
 8007890:	d001      	beq.n	8007896 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8007892:	2302      	movs	r3, #2
 8007894:	e104      	b.n	8007aa0 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <HAL_SPI_Receive+0x2c>
 800789c:	88fb      	ldrh	r3, [r7, #6]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d101      	bne.n	80078a6 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e0fc      	b.n	8007aa0 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80078ae:	d112      	bne.n	80078d6 <HAL_SPI_Receive+0x60>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10e      	bne.n	80078d6 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2204      	movs	r2, #4
 80078bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80078c0:	88fa      	ldrh	r2, [r7, #6]
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	9300      	str	r3, [sp, #0]
 80078c6:	4613      	mov	r3, r2
 80078c8:	68ba      	ldr	r2, [r7, #8]
 80078ca:	68b9      	ldr	r1, [r7, #8]
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f000 f8eb 	bl	8007aa8 <HAL_SPI_TransmitReceive>
 80078d2:	4603      	mov	r3, r0
 80078d4:	e0e4      	b.n	8007aa0 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078d6:	f7fc fbe9 	bl	80040ac <HAL_GetTick>
 80078da:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d101      	bne.n	80078ea <HAL_SPI_Receive+0x74>
 80078e6:	2302      	movs	r3, #2
 80078e8:	e0da      	b.n	8007aa0 <HAL_SPI_Receive+0x22a>
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2204      	movs	r2, #4
 80078f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	88fa      	ldrh	r2, [r7, #6]
 800790a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	88fa      	ldrh	r2, [r7, #6]
 8007910:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2200      	movs	r2, #0
 800791c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007938:	d10f      	bne.n	800795a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007948:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007958:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007964:	2b40      	cmp	r3, #64	@ 0x40
 8007966:	d007      	beq.n	8007978 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007976:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d170      	bne.n	8007a62 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007980:	e035      	b.n	80079ee <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	f003 0301 	and.w	r3, r3, #1
 800798c:	2b01      	cmp	r3, #1
 800798e:	d115      	bne.n	80079bc <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f103 020c 	add.w	r2, r3, #12
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800799c:	7812      	ldrb	r2, [r2, #0]
 800799e:	b2d2      	uxtb	r2, r2
 80079a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079a6:	1c5a      	adds	r2, r3, #1
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	3b01      	subs	r3, #1
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80079ba:	e018      	b.n	80079ee <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079bc:	f7fc fb76 	bl	80040ac <HAL_GetTick>
 80079c0:	4602      	mov	r2, r0
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	683a      	ldr	r2, [r7, #0]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d803      	bhi.n	80079d4 <HAL_SPI_Receive+0x15e>
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d2:	d102      	bne.n	80079da <HAL_SPI_Receive+0x164>
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d109      	bne.n	80079ee <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2201      	movs	r2, #1
 80079de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80079ea:	2303      	movs	r3, #3
 80079ec:	e058      	b.n	8007aa0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d1c4      	bne.n	8007982 <HAL_SPI_Receive+0x10c>
 80079f8:	e038      	b.n	8007a6c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	f003 0301 	and.w	r3, r3, #1
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d113      	bne.n	8007a30 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68da      	ldr	r2, [r3, #12]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a12:	b292      	uxth	r2, r2
 8007a14:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a1a:	1c9a      	adds	r2, r3, #2
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	3b01      	subs	r3, #1
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007a2e:	e018      	b.n	8007a62 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a30:	f7fc fb3c 	bl	80040ac <HAL_GetTick>
 8007a34:	4602      	mov	r2, r0
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	683a      	ldr	r2, [r7, #0]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d803      	bhi.n	8007a48 <HAL_SPI_Receive+0x1d2>
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a46:	d102      	bne.n	8007a4e <HAL_SPI_Receive+0x1d8>
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d109      	bne.n	8007a62 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2201      	movs	r2, #1
 8007a52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	e01e      	b.n	8007aa0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1c6      	bne.n	80079fa <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a6c:	697a      	ldr	r2, [r7, #20]
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f000 fa59 	bl	8007f28 <SPI_EndRxTransaction>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d002      	beq.n	8007a82 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2220      	movs	r2, #32
 8007a80:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d001      	beq.n	8007a9e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e000      	b.n	8007aa0 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8007a9e:	2300      	movs	r3, #0
  }
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3718      	adds	r7, #24
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b08a      	sub	sp, #40	@ 0x28
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	607a      	str	r2, [r7, #4]
 8007ab4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007aba:	f7fc faf7 	bl	80040ac <HAL_GetTick>
 8007abe:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ac6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007ace:	887b      	ldrh	r3, [r7, #2]
 8007ad0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007ad2:	7ffb      	ldrb	r3, [r7, #31]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d00c      	beq.n	8007af2 <HAL_SPI_TransmitReceive+0x4a>
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ade:	d106      	bne.n	8007aee <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d102      	bne.n	8007aee <HAL_SPI_TransmitReceive+0x46>
 8007ae8:	7ffb      	ldrb	r3, [r7, #31]
 8007aea:	2b04      	cmp	r3, #4
 8007aec:	d001      	beq.n	8007af2 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007aee:	2302      	movs	r3, #2
 8007af0:	e17f      	b.n	8007df2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d005      	beq.n	8007b04 <HAL_SPI_TransmitReceive+0x5c>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d002      	beq.n	8007b04 <HAL_SPI_TransmitReceive+0x5c>
 8007afe:	887b      	ldrh	r3, [r7, #2]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d101      	bne.n	8007b08 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e174      	b.n	8007df2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d101      	bne.n	8007b16 <HAL_SPI_TransmitReceive+0x6e>
 8007b12:	2302      	movs	r3, #2
 8007b14:	e16d      	b.n	8007df2 <HAL_SPI_TransmitReceive+0x34a>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	2b04      	cmp	r3, #4
 8007b28:	d003      	beq.n	8007b32 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2205      	movs	r2, #5
 8007b2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2200      	movs	r2, #0
 8007b36:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	887a      	ldrh	r2, [r7, #2]
 8007b42:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	887a      	ldrh	r2, [r7, #2]
 8007b48:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	887a      	ldrh	r2, [r7, #2]
 8007b54:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	887a      	ldrh	r2, [r7, #2]
 8007b5a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b72:	2b40      	cmp	r3, #64	@ 0x40
 8007b74:	d007      	beq.n	8007b86 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b8e:	d17e      	bne.n	8007c8e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d002      	beq.n	8007b9e <HAL_SPI_TransmitReceive+0xf6>
 8007b98:	8afb      	ldrh	r3, [r7, #22]
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d16c      	bne.n	8007c78 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ba2:	881a      	ldrh	r2, [r3, #0]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bae:	1c9a      	adds	r2, r3, #2
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bc2:	e059      	b.n	8007c78 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	f003 0302 	and.w	r3, r3, #2
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d11b      	bne.n	8007c0a <HAL_SPI_TransmitReceive+0x162>
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d016      	beq.n	8007c0a <HAL_SPI_TransmitReceive+0x162>
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d113      	bne.n	8007c0a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007be6:	881a      	ldrh	r2, [r3, #0]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bf2:	1c9a      	adds	r2, r3, #2
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c06:	2300      	movs	r3, #0
 8007c08:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	f003 0301 	and.w	r3, r3, #1
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d119      	bne.n	8007c4c <HAL_SPI_TransmitReceive+0x1a4>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d014      	beq.n	8007c4c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68da      	ldr	r2, [r3, #12]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c2c:	b292      	uxth	r2, r2
 8007c2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c34:	1c9a      	adds	r2, r3, #2
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	3b01      	subs	r3, #1
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007c4c:	f7fc fa2e 	bl	80040ac <HAL_GetTick>
 8007c50:	4602      	mov	r2, r0
 8007c52:	6a3b      	ldr	r3, [r7, #32]
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d80d      	bhi.n	8007c78 <HAL_SPI_TransmitReceive+0x1d0>
 8007c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c62:	d009      	beq.n	8007c78 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007c74:	2303      	movs	r3, #3
 8007c76:	e0bc      	b.n	8007df2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1a0      	bne.n	8007bc4 <HAL_SPI_TransmitReceive+0x11c>
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d19b      	bne.n	8007bc4 <HAL_SPI_TransmitReceive+0x11c>
 8007c8c:	e082      	b.n	8007d94 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d002      	beq.n	8007c9c <HAL_SPI_TransmitReceive+0x1f4>
 8007c96:	8afb      	ldrh	r3, [r7, #22]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d171      	bne.n	8007d80 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	330c      	adds	r3, #12
 8007ca6:	7812      	ldrb	r2, [r2, #0]
 8007ca8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cae:	1c5a      	adds	r2, r3, #1
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cc2:	e05d      	b.n	8007d80 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f003 0302 	and.w	r3, r3, #2
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d11c      	bne.n	8007d0c <HAL_SPI_TransmitReceive+0x264>
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d017      	beq.n	8007d0c <HAL_SPI_TransmitReceive+0x264>
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d114      	bne.n	8007d0c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	330c      	adds	r3, #12
 8007cec:	7812      	ldrb	r2, [r2, #0]
 8007cee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cf4:	1c5a      	adds	r2, r3, #1
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	3b01      	subs	r3, #1
 8007d02:	b29a      	uxth	r2, r3
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f003 0301 	and.w	r3, r3, #1
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d119      	bne.n	8007d4e <HAL_SPI_TransmitReceive+0x2a6>
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d014      	beq.n	8007d4e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68da      	ldr	r2, [r3, #12]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d2e:	b2d2      	uxtb	r2, r2
 8007d30:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d36:	1c5a      	adds	r2, r3, #1
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	3b01      	subs	r3, #1
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007d4e:	f7fc f9ad 	bl	80040ac <HAL_GetTick>
 8007d52:	4602      	mov	r2, r0
 8007d54:	6a3b      	ldr	r3, [r7, #32]
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d803      	bhi.n	8007d66 <HAL_SPI_TransmitReceive+0x2be>
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d64:	d102      	bne.n	8007d6c <HAL_SPI_TransmitReceive+0x2c4>
 8007d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d109      	bne.n	8007d80 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	e038      	b.n	8007df2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d19c      	bne.n	8007cc4 <HAL_SPI_TransmitReceive+0x21c>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d197      	bne.n	8007cc4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d94:	6a3a      	ldr	r2, [r7, #32]
 8007d96:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f000 f92b 	bl	8007ff4 <SPI_EndRxTxTransaction>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d008      	beq.n	8007db6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2220      	movs	r2, #32
 8007da8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e01d      	b.n	8007df2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10a      	bne.n	8007dd4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	613b      	str	r3, [r7, #16]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	613b      	str	r3, [r7, #16]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	613b      	str	r3, [r7, #16]
 8007dd2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d001      	beq.n	8007df0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e000      	b.n	8007df2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007df0:	2300      	movs	r3, #0
  }
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3728      	adds	r7, #40	@ 0x28
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b083      	sub	sp, #12
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e08:	b2db      	uxtb	r3, r3
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	370c      	adds	r7, #12
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr
	...

08007e18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b088      	sub	sp, #32
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	603b      	str	r3, [r7, #0]
 8007e24:	4613      	mov	r3, r2
 8007e26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e28:	f7fc f940 	bl	80040ac <HAL_GetTick>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e30:	1a9b      	subs	r3, r3, r2
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	4413      	add	r3, r2
 8007e36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007e38:	f7fc f938 	bl	80040ac <HAL_GetTick>
 8007e3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e3e:	4b39      	ldr	r3, [pc, #228]	@ (8007f24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	015b      	lsls	r3, r3, #5
 8007e44:	0d1b      	lsrs	r3, r3, #20
 8007e46:	69fa      	ldr	r2, [r7, #28]
 8007e48:	fb02 f303 	mul.w	r3, r2, r3
 8007e4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e4e:	e055      	b.n	8007efc <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e56:	d051      	beq.n	8007efc <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e58:	f7fc f928 	bl	80040ac <HAL_GetTick>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	69fa      	ldr	r2, [r7, #28]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d902      	bls.n	8007e6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d13d      	bne.n	8007eea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007e7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e86:	d111      	bne.n	8007eac <SPI_WaitFlagStateUntilTimeout+0x94>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e90:	d004      	beq.n	8007e9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e9a:	d107      	bne.n	8007eac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007eaa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007eb4:	d10f      	bne.n	8007ed6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007ec4:	601a      	str	r2, [r3, #0]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007ed4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	e018      	b.n	8007f1c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d102      	bne.n	8007ef6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	61fb      	str	r3, [r7, #28]
 8007ef4:	e002      	b.n	8007efc <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	689a      	ldr	r2, [r3, #8]
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	4013      	ands	r3, r2
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	bf0c      	ite	eq
 8007f0c:	2301      	moveq	r3, #1
 8007f0e:	2300      	movne	r3, #0
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	461a      	mov	r2, r3
 8007f14:	79fb      	ldrb	r3, [r7, #7]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d19a      	bne.n	8007e50 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3720      	adds	r7, #32
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	200000a8 	.word	0x200000a8

08007f28 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af02      	add	r7, sp, #8
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f3c:	d111      	bne.n	8007f62 <SPI_EndRxTransaction+0x3a>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f46:	d004      	beq.n	8007f52 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f50:	d107      	bne.n	8007f62 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f60:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f6a:	d12a      	bne.n	8007fc2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f74:	d012      	beq.n	8007f9c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	9300      	str	r3, [sp, #0]
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	2180      	movs	r1, #128	@ 0x80
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	f7ff ff49 	bl	8007e18 <SPI_WaitFlagStateUntilTimeout>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d02d      	beq.n	8007fe8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f90:	f043 0220 	orr.w	r2, r3, #32
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e026      	b.n	8007fea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	9300      	str	r3, [sp, #0]
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	2101      	movs	r1, #1
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f7ff ff36 	bl	8007e18 <SPI_WaitFlagStateUntilTimeout>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d01a      	beq.n	8007fe8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fb6:	f043 0220 	orr.w	r2, r3, #32
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	e013      	b.n	8007fea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	2101      	movs	r1, #1
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f7ff ff23 	bl	8007e18 <SPI_WaitFlagStateUntilTimeout>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d007      	beq.n	8007fe8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fdc:	f043 0220 	orr.w	r2, r3, #32
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	e000      	b.n	8007fea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
	...

08007ff4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b088      	sub	sp, #32
 8007ff8:	af02      	add	r7, sp, #8
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	9300      	str	r3, [sp, #0]
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	2201      	movs	r2, #1
 8008008:	2102      	movs	r1, #2
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f7ff ff04 	bl	8007e18 <SPI_WaitFlagStateUntilTimeout>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d007      	beq.n	8008026 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800801a:	f043 0220 	orr.w	r2, r3, #32
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008022:	2303      	movs	r3, #3
 8008024:	e032      	b.n	800808c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008026:	4b1b      	ldr	r3, [pc, #108]	@ (8008094 <SPI_EndRxTxTransaction+0xa0>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a1b      	ldr	r2, [pc, #108]	@ (8008098 <SPI_EndRxTxTransaction+0xa4>)
 800802c:	fba2 2303 	umull	r2, r3, r2, r3
 8008030:	0d5b      	lsrs	r3, r3, #21
 8008032:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008036:	fb02 f303 	mul.w	r3, r2, r3
 800803a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008044:	d112      	bne.n	800806c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	9300      	str	r3, [sp, #0]
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	2200      	movs	r2, #0
 800804e:	2180      	movs	r1, #128	@ 0x80
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f7ff fee1 	bl	8007e18 <SPI_WaitFlagStateUntilTimeout>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d016      	beq.n	800808a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008060:	f043 0220 	orr.w	r2, r3, #32
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008068:	2303      	movs	r3, #3
 800806a:	e00f      	b.n	800808c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00a      	beq.n	8008088 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	3b01      	subs	r3, #1
 8008076:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008082:	2b80      	cmp	r3, #128	@ 0x80
 8008084:	d0f2      	beq.n	800806c <SPI_EndRxTxTransaction+0x78>
 8008086:	e000      	b.n	800808a <SPI_EndRxTxTransaction+0x96>
        break;
 8008088:	bf00      	nop
  }

  return HAL_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3718      	adds	r7, #24
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	200000a8 	.word	0x200000a8
 8008098:	165e9f81 	.word	0x165e9f81

0800809c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d101      	bne.n	80080ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	e041      	b.n	8008132 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d106      	bne.n	80080c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f839 	bl	800813a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2202      	movs	r2, #2
 80080cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	3304      	adds	r3, #4
 80080d8:	4619      	mov	r1, r3
 80080da:	4610      	mov	r0, r2
 80080dc:	f000 f9b2 	bl	8008444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3708      	adds	r7, #8
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800813a:	b480      	push	{r7}
 800813c:	b083      	sub	sp, #12
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008142:	bf00      	nop
 8008144:	370c      	adds	r7, #12
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr
	...

08008150 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800815e:	b2db      	uxtb	r3, r3
 8008160:	2b01      	cmp	r3, #1
 8008162:	d001      	beq.n	8008168 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	e044      	b.n	80081f2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2202      	movs	r2, #2
 800816c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68da      	ldr	r2, [r3, #12]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f042 0201 	orr.w	r2, r2, #1
 800817e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a1e      	ldr	r2, [pc, #120]	@ (8008200 <HAL_TIM_Base_Start_IT+0xb0>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d018      	beq.n	80081bc <HAL_TIM_Base_Start_IT+0x6c>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008192:	d013      	beq.n	80081bc <HAL_TIM_Base_Start_IT+0x6c>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a1a      	ldr	r2, [pc, #104]	@ (8008204 <HAL_TIM_Base_Start_IT+0xb4>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d00e      	beq.n	80081bc <HAL_TIM_Base_Start_IT+0x6c>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a19      	ldr	r2, [pc, #100]	@ (8008208 <HAL_TIM_Base_Start_IT+0xb8>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d009      	beq.n	80081bc <HAL_TIM_Base_Start_IT+0x6c>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a17      	ldr	r2, [pc, #92]	@ (800820c <HAL_TIM_Base_Start_IT+0xbc>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d004      	beq.n	80081bc <HAL_TIM_Base_Start_IT+0x6c>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a16      	ldr	r2, [pc, #88]	@ (8008210 <HAL_TIM_Base_Start_IT+0xc0>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d111      	bne.n	80081e0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	f003 0307 	and.w	r3, r3, #7
 80081c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2b06      	cmp	r3, #6
 80081cc:	d010      	beq.n	80081f0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f042 0201 	orr.w	r2, r2, #1
 80081dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081de:	e007      	b.n	80081f0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f042 0201 	orr.w	r2, r2, #1
 80081ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3714      	adds	r7, #20
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	40010000 	.word	0x40010000
 8008204:	40000400 	.word	0x40000400
 8008208:	40000800 	.word	0x40000800
 800820c:	40000c00 	.word	0x40000c00
 8008210:	40014000 	.word	0x40014000

08008214 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	f003 0302 	and.w	r3, r3, #2
 8008232:	2b00      	cmp	r3, #0
 8008234:	d020      	beq.n	8008278 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f003 0302 	and.w	r3, r3, #2
 800823c:	2b00      	cmp	r3, #0
 800823e:	d01b      	beq.n	8008278 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f06f 0202 	mvn.w	r2, #2
 8008248:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2201      	movs	r2, #1
 800824e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	f003 0303 	and.w	r3, r3, #3
 800825a:	2b00      	cmp	r3, #0
 800825c:	d003      	beq.n	8008266 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f8d2 	bl	8008408 <HAL_TIM_IC_CaptureCallback>
 8008264:	e005      	b.n	8008272 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 f8c4 	bl	80083f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 f8d5 	bl	800841c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	f003 0304 	and.w	r3, r3, #4
 800827e:	2b00      	cmp	r3, #0
 8008280:	d020      	beq.n	80082c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f003 0304 	and.w	r3, r3, #4
 8008288:	2b00      	cmp	r3, #0
 800828a:	d01b      	beq.n	80082c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f06f 0204 	mvn.w	r2, #4
 8008294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2202      	movs	r2, #2
 800829a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d003      	beq.n	80082b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 f8ac 	bl	8008408 <HAL_TIM_IC_CaptureCallback>
 80082b0:	e005      	b.n	80082be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 f89e 	bl	80083f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f8af 	bl	800841c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	f003 0308 	and.w	r3, r3, #8
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d020      	beq.n	8008310 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f003 0308 	and.w	r3, r3, #8
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d01b      	beq.n	8008310 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f06f 0208 	mvn.w	r2, #8
 80082e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2204      	movs	r2, #4
 80082e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	69db      	ldr	r3, [r3, #28]
 80082ee:	f003 0303 	and.w	r3, r3, #3
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d003      	beq.n	80082fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 f886 	bl	8008408 <HAL_TIM_IC_CaptureCallback>
 80082fc:	e005      	b.n	800830a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f878 	bl	80083f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f889 	bl	800841c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	f003 0310 	and.w	r3, r3, #16
 8008316:	2b00      	cmp	r3, #0
 8008318:	d020      	beq.n	800835c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f003 0310 	and.w	r3, r3, #16
 8008320:	2b00      	cmp	r3, #0
 8008322:	d01b      	beq.n	800835c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f06f 0210 	mvn.w	r2, #16
 800832c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2208      	movs	r2, #8
 8008332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	69db      	ldr	r3, [r3, #28]
 800833a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800833e:	2b00      	cmp	r3, #0
 8008340:	d003      	beq.n	800834a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f860 	bl	8008408 <HAL_TIM_IC_CaptureCallback>
 8008348:	e005      	b.n	8008356 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f852 	bl	80083f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f863 	bl	800841c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	f003 0301 	and.w	r3, r3, #1
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00c      	beq.n	8008380 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f003 0301 	and.w	r3, r3, #1
 800836c:	2b00      	cmp	r3, #0
 800836e:	d007      	beq.n	8008380 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f06f 0201 	mvn.w	r2, #1
 8008378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f7fa feca 	bl	8003114 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00c      	beq.n	80083a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008390:	2b00      	cmp	r3, #0
 8008392:	d007      	beq.n	80083a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800839c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 f8e0 	bl	8008564 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00c      	beq.n	80083c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d007      	beq.n	80083c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80083c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f834 	bl	8008430 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	f003 0320 	and.w	r3, r3, #32
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00c      	beq.n	80083ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f003 0320 	and.w	r3, r3, #32
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d007      	beq.n	80083ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f06f 0220 	mvn.w	r2, #32
 80083e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 f8b2 	bl	8008550 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80083ec:	bf00      	nop
 80083ee:	3710      	adds	r7, #16
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80083fc:	bf00      	nop
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008410:	bf00      	nop
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008424:	bf00      	nop
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008438:	bf00      	nop
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4a37      	ldr	r2, [pc, #220]	@ (8008534 <TIM_Base_SetConfig+0xf0>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d00f      	beq.n	800847c <TIM_Base_SetConfig+0x38>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008462:	d00b      	beq.n	800847c <TIM_Base_SetConfig+0x38>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a34      	ldr	r2, [pc, #208]	@ (8008538 <TIM_Base_SetConfig+0xf4>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d007      	beq.n	800847c <TIM_Base_SetConfig+0x38>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a33      	ldr	r2, [pc, #204]	@ (800853c <TIM_Base_SetConfig+0xf8>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d003      	beq.n	800847c <TIM_Base_SetConfig+0x38>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a32      	ldr	r2, [pc, #200]	@ (8008540 <TIM_Base_SetConfig+0xfc>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d108      	bne.n	800848e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008482:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	4313      	orrs	r3, r2
 800848c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a28      	ldr	r2, [pc, #160]	@ (8008534 <TIM_Base_SetConfig+0xf0>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d01b      	beq.n	80084ce <TIM_Base_SetConfig+0x8a>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800849c:	d017      	beq.n	80084ce <TIM_Base_SetConfig+0x8a>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a25      	ldr	r2, [pc, #148]	@ (8008538 <TIM_Base_SetConfig+0xf4>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d013      	beq.n	80084ce <TIM_Base_SetConfig+0x8a>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a24      	ldr	r2, [pc, #144]	@ (800853c <TIM_Base_SetConfig+0xf8>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d00f      	beq.n	80084ce <TIM_Base_SetConfig+0x8a>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a23      	ldr	r2, [pc, #140]	@ (8008540 <TIM_Base_SetConfig+0xfc>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d00b      	beq.n	80084ce <TIM_Base_SetConfig+0x8a>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4a22      	ldr	r2, [pc, #136]	@ (8008544 <TIM_Base_SetConfig+0x100>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d007      	beq.n	80084ce <TIM_Base_SetConfig+0x8a>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a21      	ldr	r2, [pc, #132]	@ (8008548 <TIM_Base_SetConfig+0x104>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d003      	beq.n	80084ce <TIM_Base_SetConfig+0x8a>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4a20      	ldr	r2, [pc, #128]	@ (800854c <TIM_Base_SetConfig+0x108>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d108      	bne.n	80084e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	4313      	orrs	r3, r2
 80084de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	689a      	ldr	r2, [r3, #8]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a0c      	ldr	r2, [pc, #48]	@ (8008534 <TIM_Base_SetConfig+0xf0>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d103      	bne.n	800850e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	691a      	ldr	r2, [r3, #16]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f043 0204 	orr.w	r2, r3, #4
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2201      	movs	r2, #1
 800851e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	601a      	str	r2, [r3, #0]
}
 8008526:	bf00      	nop
 8008528:	3714      	adds	r7, #20
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop
 8008534:	40010000 	.word	0x40010000
 8008538:	40000400 	.word	0x40000400
 800853c:	40000800 	.word	0x40000800
 8008540:	40000c00 	.word	0x40000c00
 8008544:	40014000 	.word	0x40014000
 8008548:	40014400 	.word	0x40014400
 800854c:	40014800 	.word	0x40014800

08008550 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008558:	bf00      	nop
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800856c:	bf00      	nop
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d101      	bne.n	800858a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	e042      	b.n	8008610 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008590:	b2db      	uxtb	r3, r3
 8008592:	2b00      	cmp	r3, #0
 8008594:	d106      	bne.n	80085a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f7fb fb0a 	bl	8003bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2224      	movs	r2, #36	@ 0x24
 80085a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	68da      	ldr	r2, [r3, #12]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80085ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 fa09 	bl	80089d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	691a      	ldr	r2, [r3, #16]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80085d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	695a      	ldr	r2, [r3, #20]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80085e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	68da      	ldr	r2, [r3, #12]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80085f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2220      	movs	r2, #32
 80085fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2220      	movs	r2, #32
 8008604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b08a      	sub	sp, #40	@ 0x28
 800861c:	af02      	add	r7, sp, #8
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	603b      	str	r3, [r7, #0]
 8008624:	4613      	mov	r3, r2
 8008626:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008628:	2300      	movs	r3, #0
 800862a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008632:	b2db      	uxtb	r3, r3
 8008634:	2b20      	cmp	r3, #32
 8008636:	d175      	bne.n	8008724 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d002      	beq.n	8008644 <HAL_UART_Transmit+0x2c>
 800863e:	88fb      	ldrh	r3, [r7, #6]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d101      	bne.n	8008648 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	e06e      	b.n	8008726 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2221      	movs	r2, #33	@ 0x21
 8008652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008656:	f7fb fd29 	bl	80040ac <HAL_GetTick>
 800865a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	88fa      	ldrh	r2, [r7, #6]
 8008660:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	88fa      	ldrh	r2, [r7, #6]
 8008666:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008670:	d108      	bne.n	8008684 <HAL_UART_Transmit+0x6c>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d104      	bne.n	8008684 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800867a:	2300      	movs	r3, #0
 800867c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	61bb      	str	r3, [r7, #24]
 8008682:	e003      	b.n	800868c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008688:	2300      	movs	r3, #0
 800868a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800868c:	e02e      	b.n	80086ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	2200      	movs	r2, #0
 8008696:	2180      	movs	r1, #128	@ 0x80
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f000 f8df 	bl	800885c <UART_WaitOnFlagUntilTimeout>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d005      	beq.n	80086b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2220      	movs	r2, #32
 80086a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80086ac:	2303      	movs	r3, #3
 80086ae:	e03a      	b.n	8008726 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d10b      	bne.n	80086ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80086b6:	69bb      	ldr	r3, [r7, #24]
 80086b8:	881b      	ldrh	r3, [r3, #0]
 80086ba:	461a      	mov	r2, r3
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	3302      	adds	r3, #2
 80086ca:	61bb      	str	r3, [r7, #24]
 80086cc:	e007      	b.n	80086de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	781a      	ldrb	r2, [r3, #0]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	3301      	adds	r3, #1
 80086dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	3b01      	subs	r3, #1
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1cb      	bne.n	800868e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	9300      	str	r3, [sp, #0]
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	2200      	movs	r2, #0
 80086fe:	2140      	movs	r1, #64	@ 0x40
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f000 f8ab 	bl	800885c <UART_WaitOnFlagUntilTimeout>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d005      	beq.n	8008718 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2220      	movs	r2, #32
 8008710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008714:	2303      	movs	r3, #3
 8008716:	e006      	b.n	8008726 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2220      	movs	r2, #32
 800871c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008720:	2300      	movs	r3, #0
 8008722:	e000      	b.n	8008726 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008724:	2302      	movs	r3, #2
  }
}
 8008726:	4618      	mov	r0, r3
 8008728:	3720      	adds	r7, #32
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800872e:	b580      	push	{r7, lr}
 8008730:	b08a      	sub	sp, #40	@ 0x28
 8008732:	af02      	add	r7, sp, #8
 8008734:	60f8      	str	r0, [r7, #12]
 8008736:	60b9      	str	r1, [r7, #8]
 8008738:	603b      	str	r3, [r7, #0]
 800873a:	4613      	mov	r3, r2
 800873c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800873e:	2300      	movs	r3, #0
 8008740:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008748:	b2db      	uxtb	r3, r3
 800874a:	2b20      	cmp	r3, #32
 800874c:	f040 8081 	bne.w	8008852 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d002      	beq.n	800875c <HAL_UART_Receive+0x2e>
 8008756:	88fb      	ldrh	r3, [r7, #6]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d101      	bne.n	8008760 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	e079      	b.n	8008854 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2222      	movs	r2, #34	@ 0x22
 800876a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008774:	f7fb fc9a 	bl	80040ac <HAL_GetTick>
 8008778:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	88fa      	ldrh	r2, [r7, #6]
 800877e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	88fa      	ldrh	r2, [r7, #6]
 8008784:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800878e:	d108      	bne.n	80087a2 <HAL_UART_Receive+0x74>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	691b      	ldr	r3, [r3, #16]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d104      	bne.n	80087a2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8008798:	2300      	movs	r3, #0
 800879a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	61bb      	str	r3, [r7, #24]
 80087a0:	e003      	b.n	80087aa <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80087a6:	2300      	movs	r3, #0
 80087a8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80087aa:	e047      	b.n	800883c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	9300      	str	r3, [sp, #0]
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	2200      	movs	r2, #0
 80087b4:	2120      	movs	r1, #32
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f000 f850 	bl	800885c <UART_WaitOnFlagUntilTimeout>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d005      	beq.n	80087ce <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2220      	movs	r2, #32
 80087c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80087ca:	2303      	movs	r3, #3
 80087cc:	e042      	b.n	8008854 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d10c      	bne.n	80087ee <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	b29b      	uxth	r3, r3
 80087dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	69bb      	ldr	r3, [r7, #24]
 80087e4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	3302      	adds	r3, #2
 80087ea:	61bb      	str	r3, [r7, #24]
 80087ec:	e01f      	b.n	800882e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087f6:	d007      	beq.n	8008808 <HAL_UART_Receive+0xda>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d10a      	bne.n	8008816 <HAL_UART_Receive+0xe8>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d106      	bne.n	8008816 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	b2da      	uxtb	r2, r3
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	701a      	strb	r2, [r3, #0]
 8008814:	e008      	b.n	8008828 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	b2db      	uxtb	r3, r3
 800881e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008822:	b2da      	uxtb	r2, r3
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	3301      	adds	r3, #1
 800882c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008832:	b29b      	uxth	r3, r3
 8008834:	3b01      	subs	r3, #1
 8008836:	b29a      	uxth	r2, r3
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008840:	b29b      	uxth	r3, r3
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1b2      	bne.n	80087ac <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2220      	movs	r2, #32
 800884a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	e000      	b.n	8008854 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008852:	2302      	movs	r3, #2
  }
}
 8008854:	4618      	mov	r0, r3
 8008856:	3720      	adds	r7, #32
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b086      	sub	sp, #24
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	603b      	str	r3, [r7, #0]
 8008868:	4613      	mov	r3, r2
 800886a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800886c:	e03b      	b.n	80088e6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800886e:	6a3b      	ldr	r3, [r7, #32]
 8008870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008874:	d037      	beq.n	80088e6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008876:	f7fb fc19 	bl	80040ac <HAL_GetTick>
 800887a:	4602      	mov	r2, r0
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	6a3a      	ldr	r2, [r7, #32]
 8008882:	429a      	cmp	r2, r3
 8008884:	d302      	bcc.n	800888c <UART_WaitOnFlagUntilTimeout+0x30>
 8008886:	6a3b      	ldr	r3, [r7, #32]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d101      	bne.n	8008890 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800888c:	2303      	movs	r3, #3
 800888e:	e03a      	b.n	8008906 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	f003 0304 	and.w	r3, r3, #4
 800889a:	2b00      	cmp	r3, #0
 800889c:	d023      	beq.n	80088e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	2b80      	cmp	r3, #128	@ 0x80
 80088a2:	d020      	beq.n	80088e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	2b40      	cmp	r3, #64	@ 0x40
 80088a8:	d01d      	beq.n	80088e6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 0308 	and.w	r3, r3, #8
 80088b4:	2b08      	cmp	r3, #8
 80088b6:	d116      	bne.n	80088e6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80088b8:	2300      	movs	r3, #0
 80088ba:	617b      	str	r3, [r7, #20]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	617b      	str	r3, [r7, #20]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	617b      	str	r3, [r7, #20]
 80088cc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088ce:	68f8      	ldr	r0, [r7, #12]
 80088d0:	f000 f81d 	bl	800890e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2208      	movs	r2, #8
 80088d8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	e00f      	b.n	8008906 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	4013      	ands	r3, r2
 80088f0:	68ba      	ldr	r2, [r7, #8]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	bf0c      	ite	eq
 80088f6:	2301      	moveq	r3, #1
 80088f8:	2300      	movne	r3, #0
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	461a      	mov	r2, r3
 80088fe:	79fb      	ldrb	r3, [r7, #7]
 8008900:	429a      	cmp	r2, r3
 8008902:	d0b4      	beq.n	800886e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3718      	adds	r7, #24
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800890e:	b480      	push	{r7}
 8008910:	b095      	sub	sp, #84	@ 0x54
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	330c      	adds	r3, #12
 800891c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008920:	e853 3f00 	ldrex	r3, [r3]
 8008924:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008928:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800892c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	330c      	adds	r3, #12
 8008934:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008936:	643a      	str	r2, [r7, #64]	@ 0x40
 8008938:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800893a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800893c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800893e:	e841 2300 	strex	r3, r2, [r1]
 8008942:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1e5      	bne.n	8008916 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	3314      	adds	r3, #20
 8008950:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008952:	6a3b      	ldr	r3, [r7, #32]
 8008954:	e853 3f00 	ldrex	r3, [r3]
 8008958:	61fb      	str	r3, [r7, #28]
   return(result);
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	f023 0301 	bic.w	r3, r3, #1
 8008960:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	3314      	adds	r3, #20
 8008968:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800896a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800896c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008970:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008972:	e841 2300 	strex	r3, r2, [r1]
 8008976:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897a:	2b00      	cmp	r3, #0
 800897c:	d1e5      	bne.n	800894a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008982:	2b01      	cmp	r3, #1
 8008984:	d119      	bne.n	80089ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	330c      	adds	r3, #12
 800898c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	e853 3f00 	ldrex	r3, [r3]
 8008994:	60bb      	str	r3, [r7, #8]
   return(result);
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	f023 0310 	bic.w	r3, r3, #16
 800899c:	647b      	str	r3, [r7, #68]	@ 0x44
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	330c      	adds	r3, #12
 80089a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80089a6:	61ba      	str	r2, [r7, #24]
 80089a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089aa:	6979      	ldr	r1, [r7, #20]
 80089ac:	69ba      	ldr	r2, [r7, #24]
 80089ae:	e841 2300 	strex	r3, r2, [r1]
 80089b2:	613b      	str	r3, [r7, #16]
   return(result);
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1e5      	bne.n	8008986 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2220      	movs	r2, #32
 80089be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80089c8:	bf00      	nop
 80089ca:	3754      	adds	r7, #84	@ 0x54
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089d8:	b0c0      	sub	sp, #256	@ 0x100
 80089da:	af00      	add	r7, sp, #0
 80089dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	691b      	ldr	r3, [r3, #16]
 80089e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80089ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089f0:	68d9      	ldr	r1, [r3, #12]
 80089f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	ea40 0301 	orr.w	r3, r0, r1
 80089fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80089fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a02:	689a      	ldr	r2, [r3, #8]
 8008a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a08:	691b      	ldr	r3, [r3, #16]
 8008a0a:	431a      	orrs	r2, r3
 8008a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a10:	695b      	ldr	r3, [r3, #20]
 8008a12:	431a      	orrs	r2, r3
 8008a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a18:	69db      	ldr	r3, [r3, #28]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008a2c:	f021 010c 	bic.w	r1, r1, #12
 8008a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008a3a:	430b      	orrs	r3, r1
 8008a3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	695b      	ldr	r3, [r3, #20]
 8008a46:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a4e:	6999      	ldr	r1, [r3, #24]
 8008a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	ea40 0301 	orr.w	r3, r0, r1
 8008a5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	4b8f      	ldr	r3, [pc, #572]	@ (8008ca0 <UART_SetConfig+0x2cc>)
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d005      	beq.n	8008a74 <UART_SetConfig+0xa0>
 8008a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	4b8d      	ldr	r3, [pc, #564]	@ (8008ca4 <UART_SetConfig+0x2d0>)
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d104      	bne.n	8008a7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a74:	f7fe fcec 	bl	8007450 <HAL_RCC_GetPCLK2Freq>
 8008a78:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008a7c:	e003      	b.n	8008a86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008a7e:	f7fe fcd3 	bl	8007428 <HAL_RCC_GetPCLK1Freq>
 8008a82:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a8a:	69db      	ldr	r3, [r3, #28]
 8008a8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a90:	f040 810c 	bne.w	8008cac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008a9e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008aa2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008aa6:	4622      	mov	r2, r4
 8008aa8:	462b      	mov	r3, r5
 8008aaa:	1891      	adds	r1, r2, r2
 8008aac:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008aae:	415b      	adcs	r3, r3
 8008ab0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ab2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008ab6:	4621      	mov	r1, r4
 8008ab8:	eb12 0801 	adds.w	r8, r2, r1
 8008abc:	4629      	mov	r1, r5
 8008abe:	eb43 0901 	adc.w	r9, r3, r1
 8008ac2:	f04f 0200 	mov.w	r2, #0
 8008ac6:	f04f 0300 	mov.w	r3, #0
 8008aca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008ace:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008ad2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008ad6:	4690      	mov	r8, r2
 8008ad8:	4699      	mov	r9, r3
 8008ada:	4623      	mov	r3, r4
 8008adc:	eb18 0303 	adds.w	r3, r8, r3
 8008ae0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008ae4:	462b      	mov	r3, r5
 8008ae6:	eb49 0303 	adc.w	r3, r9, r3
 8008aea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008afa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008afe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008b02:	460b      	mov	r3, r1
 8008b04:	18db      	adds	r3, r3, r3
 8008b06:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b08:	4613      	mov	r3, r2
 8008b0a:	eb42 0303 	adc.w	r3, r2, r3
 8008b0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008b10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008b14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008b18:	f7f8 f86e 	bl	8000bf8 <__aeabi_uldivmod>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	460b      	mov	r3, r1
 8008b20:	4b61      	ldr	r3, [pc, #388]	@ (8008ca8 <UART_SetConfig+0x2d4>)
 8008b22:	fba3 2302 	umull	r2, r3, r3, r2
 8008b26:	095b      	lsrs	r3, r3, #5
 8008b28:	011c      	lsls	r4, r3, #4
 8008b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008b34:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008b38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008b3c:	4642      	mov	r2, r8
 8008b3e:	464b      	mov	r3, r9
 8008b40:	1891      	adds	r1, r2, r2
 8008b42:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008b44:	415b      	adcs	r3, r3
 8008b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008b4c:	4641      	mov	r1, r8
 8008b4e:	eb12 0a01 	adds.w	sl, r2, r1
 8008b52:	4649      	mov	r1, r9
 8008b54:	eb43 0b01 	adc.w	fp, r3, r1
 8008b58:	f04f 0200 	mov.w	r2, #0
 8008b5c:	f04f 0300 	mov.w	r3, #0
 8008b60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008b64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008b68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b6c:	4692      	mov	sl, r2
 8008b6e:	469b      	mov	fp, r3
 8008b70:	4643      	mov	r3, r8
 8008b72:	eb1a 0303 	adds.w	r3, sl, r3
 8008b76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008b7a:	464b      	mov	r3, r9
 8008b7c:	eb4b 0303 	adc.w	r3, fp, r3
 8008b80:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008b90:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008b94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008b98:	460b      	mov	r3, r1
 8008b9a:	18db      	adds	r3, r3, r3
 8008b9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b9e:	4613      	mov	r3, r2
 8008ba0:	eb42 0303 	adc.w	r3, r2, r3
 8008ba4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ba6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008baa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008bae:	f7f8 f823 	bl	8000bf8 <__aeabi_uldivmod>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	4611      	mov	r1, r2
 8008bb8:	4b3b      	ldr	r3, [pc, #236]	@ (8008ca8 <UART_SetConfig+0x2d4>)
 8008bba:	fba3 2301 	umull	r2, r3, r3, r1
 8008bbe:	095b      	lsrs	r3, r3, #5
 8008bc0:	2264      	movs	r2, #100	@ 0x64
 8008bc2:	fb02 f303 	mul.w	r3, r2, r3
 8008bc6:	1acb      	subs	r3, r1, r3
 8008bc8:	00db      	lsls	r3, r3, #3
 8008bca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008bce:	4b36      	ldr	r3, [pc, #216]	@ (8008ca8 <UART_SetConfig+0x2d4>)
 8008bd0:	fba3 2302 	umull	r2, r3, r3, r2
 8008bd4:	095b      	lsrs	r3, r3, #5
 8008bd6:	005b      	lsls	r3, r3, #1
 8008bd8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008bdc:	441c      	add	r4, r3
 8008bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008be2:	2200      	movs	r2, #0
 8008be4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008be8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008bec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008bf0:	4642      	mov	r2, r8
 8008bf2:	464b      	mov	r3, r9
 8008bf4:	1891      	adds	r1, r2, r2
 8008bf6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008bf8:	415b      	adcs	r3, r3
 8008bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008c00:	4641      	mov	r1, r8
 8008c02:	1851      	adds	r1, r2, r1
 8008c04:	6339      	str	r1, [r7, #48]	@ 0x30
 8008c06:	4649      	mov	r1, r9
 8008c08:	414b      	adcs	r3, r1
 8008c0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c0c:	f04f 0200 	mov.w	r2, #0
 8008c10:	f04f 0300 	mov.w	r3, #0
 8008c14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008c18:	4659      	mov	r1, fp
 8008c1a:	00cb      	lsls	r3, r1, #3
 8008c1c:	4651      	mov	r1, sl
 8008c1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c22:	4651      	mov	r1, sl
 8008c24:	00ca      	lsls	r2, r1, #3
 8008c26:	4610      	mov	r0, r2
 8008c28:	4619      	mov	r1, r3
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	4642      	mov	r2, r8
 8008c2e:	189b      	adds	r3, r3, r2
 8008c30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008c34:	464b      	mov	r3, r9
 8008c36:	460a      	mov	r2, r1
 8008c38:	eb42 0303 	adc.w	r3, r2, r3
 8008c3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008c4c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008c50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008c54:	460b      	mov	r3, r1
 8008c56:	18db      	adds	r3, r3, r3
 8008c58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	eb42 0303 	adc.w	r3, r2, r3
 8008c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008c66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008c6a:	f7f7 ffc5 	bl	8000bf8 <__aeabi_uldivmod>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	460b      	mov	r3, r1
 8008c72:	4b0d      	ldr	r3, [pc, #52]	@ (8008ca8 <UART_SetConfig+0x2d4>)
 8008c74:	fba3 1302 	umull	r1, r3, r3, r2
 8008c78:	095b      	lsrs	r3, r3, #5
 8008c7a:	2164      	movs	r1, #100	@ 0x64
 8008c7c:	fb01 f303 	mul.w	r3, r1, r3
 8008c80:	1ad3      	subs	r3, r2, r3
 8008c82:	00db      	lsls	r3, r3, #3
 8008c84:	3332      	adds	r3, #50	@ 0x32
 8008c86:	4a08      	ldr	r2, [pc, #32]	@ (8008ca8 <UART_SetConfig+0x2d4>)
 8008c88:	fba2 2303 	umull	r2, r3, r2, r3
 8008c8c:	095b      	lsrs	r3, r3, #5
 8008c8e:	f003 0207 	and.w	r2, r3, #7
 8008c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4422      	add	r2, r4
 8008c9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008c9c:	e106      	b.n	8008eac <UART_SetConfig+0x4d8>
 8008c9e:	bf00      	nop
 8008ca0:	40011000 	.word	0x40011000
 8008ca4:	40011400 	.word	0x40011400
 8008ca8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008cac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008cb6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008cba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008cbe:	4642      	mov	r2, r8
 8008cc0:	464b      	mov	r3, r9
 8008cc2:	1891      	adds	r1, r2, r2
 8008cc4:	6239      	str	r1, [r7, #32]
 8008cc6:	415b      	adcs	r3, r3
 8008cc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008cce:	4641      	mov	r1, r8
 8008cd0:	1854      	adds	r4, r2, r1
 8008cd2:	4649      	mov	r1, r9
 8008cd4:	eb43 0501 	adc.w	r5, r3, r1
 8008cd8:	f04f 0200 	mov.w	r2, #0
 8008cdc:	f04f 0300 	mov.w	r3, #0
 8008ce0:	00eb      	lsls	r3, r5, #3
 8008ce2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ce6:	00e2      	lsls	r2, r4, #3
 8008ce8:	4614      	mov	r4, r2
 8008cea:	461d      	mov	r5, r3
 8008cec:	4643      	mov	r3, r8
 8008cee:	18e3      	adds	r3, r4, r3
 8008cf0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008cf4:	464b      	mov	r3, r9
 8008cf6:	eb45 0303 	adc.w	r3, r5, r3
 8008cfa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008d0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008d0e:	f04f 0200 	mov.w	r2, #0
 8008d12:	f04f 0300 	mov.w	r3, #0
 8008d16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008d1a:	4629      	mov	r1, r5
 8008d1c:	008b      	lsls	r3, r1, #2
 8008d1e:	4621      	mov	r1, r4
 8008d20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d24:	4621      	mov	r1, r4
 8008d26:	008a      	lsls	r2, r1, #2
 8008d28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008d2c:	f7f7 ff64 	bl	8000bf8 <__aeabi_uldivmod>
 8008d30:	4602      	mov	r2, r0
 8008d32:	460b      	mov	r3, r1
 8008d34:	4b60      	ldr	r3, [pc, #384]	@ (8008eb8 <UART_SetConfig+0x4e4>)
 8008d36:	fba3 2302 	umull	r2, r3, r3, r2
 8008d3a:	095b      	lsrs	r3, r3, #5
 8008d3c:	011c      	lsls	r4, r3, #4
 8008d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d42:	2200      	movs	r2, #0
 8008d44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008d48:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008d4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008d50:	4642      	mov	r2, r8
 8008d52:	464b      	mov	r3, r9
 8008d54:	1891      	adds	r1, r2, r2
 8008d56:	61b9      	str	r1, [r7, #24]
 8008d58:	415b      	adcs	r3, r3
 8008d5a:	61fb      	str	r3, [r7, #28]
 8008d5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d60:	4641      	mov	r1, r8
 8008d62:	1851      	adds	r1, r2, r1
 8008d64:	6139      	str	r1, [r7, #16]
 8008d66:	4649      	mov	r1, r9
 8008d68:	414b      	adcs	r3, r1
 8008d6a:	617b      	str	r3, [r7, #20]
 8008d6c:	f04f 0200 	mov.w	r2, #0
 8008d70:	f04f 0300 	mov.w	r3, #0
 8008d74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008d78:	4659      	mov	r1, fp
 8008d7a:	00cb      	lsls	r3, r1, #3
 8008d7c:	4651      	mov	r1, sl
 8008d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d82:	4651      	mov	r1, sl
 8008d84:	00ca      	lsls	r2, r1, #3
 8008d86:	4610      	mov	r0, r2
 8008d88:	4619      	mov	r1, r3
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	4642      	mov	r2, r8
 8008d8e:	189b      	adds	r3, r3, r2
 8008d90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008d94:	464b      	mov	r3, r9
 8008d96:	460a      	mov	r2, r1
 8008d98:	eb42 0303 	adc.w	r3, r2, r3
 8008d9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008daa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008dac:	f04f 0200 	mov.w	r2, #0
 8008db0:	f04f 0300 	mov.w	r3, #0
 8008db4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008db8:	4649      	mov	r1, r9
 8008dba:	008b      	lsls	r3, r1, #2
 8008dbc:	4641      	mov	r1, r8
 8008dbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008dc2:	4641      	mov	r1, r8
 8008dc4:	008a      	lsls	r2, r1, #2
 8008dc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008dca:	f7f7 ff15 	bl	8000bf8 <__aeabi_uldivmod>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	4611      	mov	r1, r2
 8008dd4:	4b38      	ldr	r3, [pc, #224]	@ (8008eb8 <UART_SetConfig+0x4e4>)
 8008dd6:	fba3 2301 	umull	r2, r3, r3, r1
 8008dda:	095b      	lsrs	r3, r3, #5
 8008ddc:	2264      	movs	r2, #100	@ 0x64
 8008dde:	fb02 f303 	mul.w	r3, r2, r3
 8008de2:	1acb      	subs	r3, r1, r3
 8008de4:	011b      	lsls	r3, r3, #4
 8008de6:	3332      	adds	r3, #50	@ 0x32
 8008de8:	4a33      	ldr	r2, [pc, #204]	@ (8008eb8 <UART_SetConfig+0x4e4>)
 8008dea:	fba2 2303 	umull	r2, r3, r2, r3
 8008dee:	095b      	lsrs	r3, r3, #5
 8008df0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008df4:	441c      	add	r4, r3
 8008df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	673b      	str	r3, [r7, #112]	@ 0x70
 8008dfe:	677a      	str	r2, [r7, #116]	@ 0x74
 8008e00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008e04:	4642      	mov	r2, r8
 8008e06:	464b      	mov	r3, r9
 8008e08:	1891      	adds	r1, r2, r2
 8008e0a:	60b9      	str	r1, [r7, #8]
 8008e0c:	415b      	adcs	r3, r3
 8008e0e:	60fb      	str	r3, [r7, #12]
 8008e10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e14:	4641      	mov	r1, r8
 8008e16:	1851      	adds	r1, r2, r1
 8008e18:	6039      	str	r1, [r7, #0]
 8008e1a:	4649      	mov	r1, r9
 8008e1c:	414b      	adcs	r3, r1
 8008e1e:	607b      	str	r3, [r7, #4]
 8008e20:	f04f 0200 	mov.w	r2, #0
 8008e24:	f04f 0300 	mov.w	r3, #0
 8008e28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008e2c:	4659      	mov	r1, fp
 8008e2e:	00cb      	lsls	r3, r1, #3
 8008e30:	4651      	mov	r1, sl
 8008e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e36:	4651      	mov	r1, sl
 8008e38:	00ca      	lsls	r2, r1, #3
 8008e3a:	4610      	mov	r0, r2
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	4603      	mov	r3, r0
 8008e40:	4642      	mov	r2, r8
 8008e42:	189b      	adds	r3, r3, r2
 8008e44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e46:	464b      	mov	r3, r9
 8008e48:	460a      	mov	r2, r1
 8008e4a:	eb42 0303 	adc.w	r3, r2, r3
 8008e4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e5a:	667a      	str	r2, [r7, #100]	@ 0x64
 8008e5c:	f04f 0200 	mov.w	r2, #0
 8008e60:	f04f 0300 	mov.w	r3, #0
 8008e64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008e68:	4649      	mov	r1, r9
 8008e6a:	008b      	lsls	r3, r1, #2
 8008e6c:	4641      	mov	r1, r8
 8008e6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e72:	4641      	mov	r1, r8
 8008e74:	008a      	lsls	r2, r1, #2
 8008e76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008e7a:	f7f7 febd 	bl	8000bf8 <__aeabi_uldivmod>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	460b      	mov	r3, r1
 8008e82:	4b0d      	ldr	r3, [pc, #52]	@ (8008eb8 <UART_SetConfig+0x4e4>)
 8008e84:	fba3 1302 	umull	r1, r3, r3, r2
 8008e88:	095b      	lsrs	r3, r3, #5
 8008e8a:	2164      	movs	r1, #100	@ 0x64
 8008e8c:	fb01 f303 	mul.w	r3, r1, r3
 8008e90:	1ad3      	subs	r3, r2, r3
 8008e92:	011b      	lsls	r3, r3, #4
 8008e94:	3332      	adds	r3, #50	@ 0x32
 8008e96:	4a08      	ldr	r2, [pc, #32]	@ (8008eb8 <UART_SetConfig+0x4e4>)
 8008e98:	fba2 2303 	umull	r2, r3, r2, r3
 8008e9c:	095b      	lsrs	r3, r3, #5
 8008e9e:	f003 020f 	and.w	r2, r3, #15
 8008ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4422      	add	r2, r4
 8008eaa:	609a      	str	r2, [r3, #8]
}
 8008eac:	bf00      	nop
 8008eae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008eb8:	51eb851f 	.word	0x51eb851f

08008ebc <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d101      	bne.n	8008ece <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e033      	b.n	8008f36 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d106      	bne.n	8008ee8 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f7fa feb0 	bl	8003c48 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2202      	movs	r2, #2
 8008eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 f825 	bl	8008f40 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	691a      	ldr	r2, [r3, #16]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008f04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	695a      	ldr	r2, [r3, #20]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008f14:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68da      	ldr	r2, [r3, #12]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008f24:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	641a      	str	r2, [r3, #64]	@ 0x40
  husart->State = HAL_USART_STATE_READY;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3708      	adds	r7, #8
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
	...

08008f40 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8008f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f44:	b0c6      	sub	sp, #280	@ 0x118
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg = 0x00U;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8008f52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	68d9      	ldr	r1, [r3, #12]
 8008f5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	f021 030c 	bic.w	r3, r1, #12
 8008f64:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8008f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8008f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f76:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008f7a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8008f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f82:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8008f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f88:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8008f8a:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8008f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f90:	6a1b      	ldr	r3, [r3, #32]
 8008f92:	431a      	orrs	r2, r3
 8008f94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f98:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8008f9a:	431a      	orrs	r2, r3
 8008f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008fa6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8008faa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fb4:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8008fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8008fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fc6:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8008fca:	f023 030c 	bic.w	r3, r3, #12
 8008fce:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8008fd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fd6:	689a      	ldr	r2, [r3, #8]
 8008fd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fdc:	691b      	ldr	r3, [r3, #16]
 8008fde:	431a      	orrs	r2, r3
 8008fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fe4:	695b      	ldr	r3, [r3, #20]
 8008fe6:	431a      	orrs	r2, r3
 8008fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fec:	4313      	orrs	r3, r2
 8008fee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ff2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8008ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009000:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8009002:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	6959      	ldr	r1, [r3, #20]
 800900a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
 8009014:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8009016:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	4b8b      	ldr	r3, [pc, #556]	@ (800924c <USART_SetConfig+0x30c>)
 800901e:	429a      	cmp	r2, r3
 8009020:	d006      	beq.n	8009030 <USART_SetConfig+0xf0>
 8009022:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	4b89      	ldr	r3, [pc, #548]	@ (8009250 <USART_SetConfig+0x310>)
 800902a:	429a      	cmp	r2, r3
 800902c:	f040 8114 	bne.w	8009258 <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009030:	f7fe fa0e 	bl	8007450 <HAL_RCC_GetPCLK2Freq>
 8009034:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8009038:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800903c:	2200      	movs	r2, #0
 800903e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009042:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8009046:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800904a:	4622      	mov	r2, r4
 800904c:	462b      	mov	r3, r5
 800904e:	1891      	adds	r1, r2, r2
 8009050:	6739      	str	r1, [r7, #112]	@ 0x70
 8009052:	415b      	adcs	r3, r3
 8009054:	677b      	str	r3, [r7, #116]	@ 0x74
 8009056:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800905a:	4621      	mov	r1, r4
 800905c:	eb12 0801 	adds.w	r8, r2, r1
 8009060:	4629      	mov	r1, r5
 8009062:	eb43 0901 	adc.w	r9, r3, r1
 8009066:	f04f 0200 	mov.w	r2, #0
 800906a:	f04f 0300 	mov.w	r3, #0
 800906e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009072:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009076:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800907a:	4690      	mov	r8, r2
 800907c:	4699      	mov	r9, r3
 800907e:	4623      	mov	r3, r4
 8009080:	eb18 0303 	adds.w	r3, r8, r3
 8009084:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009088:	462b      	mov	r3, r5
 800908a:	eb49 0303 	adc.w	r3, r9, r3
 800908e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009092:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800909e:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80090a2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80090a6:	460b      	mov	r3, r1
 80090a8:	18db      	adds	r3, r3, r3
 80090aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80090ac:	4613      	mov	r3, r2
 80090ae:	eb42 0303 	adc.w	r3, r2, r3
 80090b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80090b4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80090b8:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 80090bc:	f7f7 fd9c 	bl	8000bf8 <__aeabi_uldivmod>
 80090c0:	4602      	mov	r2, r0
 80090c2:	460b      	mov	r3, r1
 80090c4:	4b63      	ldr	r3, [pc, #396]	@ (8009254 <USART_SetConfig+0x314>)
 80090c6:	fba3 2302 	umull	r2, r3, r3, r2
 80090ca:	095b      	lsrs	r3, r3, #5
 80090cc:	011c      	lsls	r4, r3, #4
 80090ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80090d2:	2200      	movs	r2, #0
 80090d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80090d8:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80090dc:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80090e0:	4642      	mov	r2, r8
 80090e2:	464b      	mov	r3, r9
 80090e4:	1891      	adds	r1, r2, r2
 80090e6:	6639      	str	r1, [r7, #96]	@ 0x60
 80090e8:	415b      	adcs	r3, r3
 80090ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80090ec:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80090f0:	4641      	mov	r1, r8
 80090f2:	1851      	adds	r1, r2, r1
 80090f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80090f6:	4649      	mov	r1, r9
 80090f8:	414b      	adcs	r3, r1
 80090fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80090fc:	f04f 0200 	mov.w	r2, #0
 8009100:	f04f 0300 	mov.w	r3, #0
 8009104:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 8009108:	4659      	mov	r1, fp
 800910a:	00cb      	lsls	r3, r1, #3
 800910c:	4651      	mov	r1, sl
 800910e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009112:	4651      	mov	r1, sl
 8009114:	00ca      	lsls	r2, r1, #3
 8009116:	4610      	mov	r0, r2
 8009118:	4619      	mov	r1, r3
 800911a:	4603      	mov	r3, r0
 800911c:	4642      	mov	r2, r8
 800911e:	189b      	adds	r3, r3, r2
 8009120:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009124:	464b      	mov	r3, r9
 8009126:	460a      	mov	r2, r1
 8009128:	eb42 0303 	adc.w	r3, r2, r3
 800912c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009130:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800913c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009140:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009144:	460b      	mov	r3, r1
 8009146:	18db      	adds	r3, r3, r3
 8009148:	653b      	str	r3, [r7, #80]	@ 0x50
 800914a:	4613      	mov	r3, r2
 800914c:	eb42 0303 	adc.w	r3, r2, r3
 8009150:	657b      	str	r3, [r7, #84]	@ 0x54
 8009152:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009156:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800915a:	f7f7 fd4d 	bl	8000bf8 <__aeabi_uldivmod>
 800915e:	4602      	mov	r2, r0
 8009160:	460b      	mov	r3, r1
 8009162:	4611      	mov	r1, r2
 8009164:	4b3b      	ldr	r3, [pc, #236]	@ (8009254 <USART_SetConfig+0x314>)
 8009166:	fba3 2301 	umull	r2, r3, r3, r1
 800916a:	095b      	lsrs	r3, r3, #5
 800916c:	2264      	movs	r2, #100	@ 0x64
 800916e:	fb02 f303 	mul.w	r3, r2, r3
 8009172:	1acb      	subs	r3, r1, r3
 8009174:	00db      	lsls	r3, r3, #3
 8009176:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800917a:	4b36      	ldr	r3, [pc, #216]	@ (8009254 <USART_SetConfig+0x314>)
 800917c:	fba3 2302 	umull	r2, r3, r3, r2
 8009180:	095b      	lsrs	r3, r3, #5
 8009182:	005b      	lsls	r3, r3, #1
 8009184:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009188:	441c      	add	r4, r3
 800918a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800918e:	2200      	movs	r2, #0
 8009190:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009194:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009198:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800919c:	4642      	mov	r2, r8
 800919e:	464b      	mov	r3, r9
 80091a0:	1891      	adds	r1, r2, r2
 80091a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80091a4:	415b      	adcs	r3, r3
 80091a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80091ac:	4641      	mov	r1, r8
 80091ae:	1851      	adds	r1, r2, r1
 80091b0:	6439      	str	r1, [r7, #64]	@ 0x40
 80091b2:	4649      	mov	r1, r9
 80091b4:	414b      	adcs	r3, r1
 80091b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80091b8:	f04f 0200 	mov.w	r2, #0
 80091bc:	f04f 0300 	mov.w	r3, #0
 80091c0:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	@ 0x40
 80091c4:	4659      	mov	r1, fp
 80091c6:	00cb      	lsls	r3, r1, #3
 80091c8:	4651      	mov	r1, sl
 80091ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091ce:	4651      	mov	r1, sl
 80091d0:	00ca      	lsls	r2, r1, #3
 80091d2:	4610      	mov	r0, r2
 80091d4:	4619      	mov	r1, r3
 80091d6:	4603      	mov	r3, r0
 80091d8:	4642      	mov	r2, r8
 80091da:	189b      	adds	r3, r3, r2
 80091dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80091e0:	464b      	mov	r3, r9
 80091e2:	460a      	mov	r2, r1
 80091e4:	eb42 0303 	adc.w	r3, r2, r3
 80091e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80091ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80091f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80091fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009200:	460b      	mov	r3, r1
 8009202:	18db      	adds	r3, r3, r3
 8009204:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009206:	4613      	mov	r3, r2
 8009208:	eb42 0303 	adc.w	r3, r2, r3
 800920c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800920e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009212:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009216:	f7f7 fcef 	bl	8000bf8 <__aeabi_uldivmod>
 800921a:	4602      	mov	r2, r0
 800921c:	460b      	mov	r3, r1
 800921e:	4b0d      	ldr	r3, [pc, #52]	@ (8009254 <USART_SetConfig+0x314>)
 8009220:	fba3 1302 	umull	r1, r3, r3, r2
 8009224:	095b      	lsrs	r3, r3, #5
 8009226:	2164      	movs	r1, #100	@ 0x64
 8009228:	fb01 f303 	mul.w	r3, r1, r3
 800922c:	1ad3      	subs	r3, r2, r3
 800922e:	00db      	lsls	r3, r3, #3
 8009230:	3332      	adds	r3, #50	@ 0x32
 8009232:	4a08      	ldr	r2, [pc, #32]	@ (8009254 <USART_SetConfig+0x314>)
 8009234:	fba2 2303 	umull	r2, r3, r2, r3
 8009238:	095b      	lsrs	r3, r3, #5
 800923a:	f003 0207 	and.w	r2, r3, #7
 800923e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4422      	add	r2, r4
 8009246:	609a      	str	r2, [r3, #8]
 8009248:	e109      	b.n	800945e <USART_SetConfig+0x51e>
 800924a:	bf00      	nop
 800924c:	40011000 	.word	0x40011000
 8009250:	40011400 	.word	0x40011400
 8009254:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009258:	f7fe f8e6 	bl	8007428 <HAL_RCC_GetPCLK1Freq>
 800925c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8009260:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009264:	2200      	movs	r2, #0
 8009266:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800926a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800926e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009272:	4642      	mov	r2, r8
 8009274:	464b      	mov	r3, r9
 8009276:	1891      	adds	r1, r2, r2
 8009278:	6339      	str	r1, [r7, #48]	@ 0x30
 800927a:	415b      	adcs	r3, r3
 800927c:	637b      	str	r3, [r7, #52]	@ 0x34
 800927e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8009282:	4641      	mov	r1, r8
 8009284:	1854      	adds	r4, r2, r1
 8009286:	4649      	mov	r1, r9
 8009288:	eb43 0501 	adc.w	r5, r3, r1
 800928c:	f04f 0200 	mov.w	r2, #0
 8009290:	f04f 0300 	mov.w	r3, #0
 8009294:	00eb      	lsls	r3, r5, #3
 8009296:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800929a:	00e2      	lsls	r2, r4, #3
 800929c:	4614      	mov	r4, r2
 800929e:	461d      	mov	r5, r3
 80092a0:	4643      	mov	r3, r8
 80092a2:	18e3      	adds	r3, r4, r3
 80092a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80092a8:	464b      	mov	r3, r9
 80092aa:	eb45 0303 	adc.w	r3, r5, r3
 80092ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80092b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	2200      	movs	r2, #0
 80092ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80092be:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80092c2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80092c6:	460b      	mov	r3, r1
 80092c8:	18db      	adds	r3, r3, r3
 80092ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80092cc:	4613      	mov	r3, r2
 80092ce:	eb42 0303 	adc.w	r3, r2, r3
 80092d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80092d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80092d8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80092dc:	f7f7 fc8c 	bl	8000bf8 <__aeabi_uldivmod>
 80092e0:	4602      	mov	r2, r0
 80092e2:	460b      	mov	r3, r1
 80092e4:	4b61      	ldr	r3, [pc, #388]	@ (800946c <USART_SetConfig+0x52c>)
 80092e6:	fba3 2302 	umull	r2, r3, r3, r2
 80092ea:	095b      	lsrs	r3, r3, #5
 80092ec:	011c      	lsls	r4, r3, #4
 80092ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80092f2:	2200      	movs	r2, #0
 80092f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80092f8:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80092fc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009300:	4642      	mov	r2, r8
 8009302:	464b      	mov	r3, r9
 8009304:	1891      	adds	r1, r2, r2
 8009306:	6239      	str	r1, [r7, #32]
 8009308:	415b      	adcs	r3, r3
 800930a:	627b      	str	r3, [r7, #36]	@ 0x24
 800930c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009310:	4641      	mov	r1, r8
 8009312:	eb12 0a01 	adds.w	sl, r2, r1
 8009316:	4649      	mov	r1, r9
 8009318:	eb43 0b01 	adc.w	fp, r3, r1
 800931c:	f04f 0200 	mov.w	r2, #0
 8009320:	f04f 0300 	mov.w	r3, #0
 8009324:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009328:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800932c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009330:	4692      	mov	sl, r2
 8009332:	469b      	mov	fp, r3
 8009334:	4643      	mov	r3, r8
 8009336:	eb1a 0303 	adds.w	r3, sl, r3
 800933a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800933e:	464b      	mov	r3, r9
 8009340:	eb4b 0303 	adc.w	r3, fp, r3
 8009344:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009348:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009354:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009358:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800935c:	460b      	mov	r3, r1
 800935e:	18db      	adds	r3, r3, r3
 8009360:	61bb      	str	r3, [r7, #24]
 8009362:	4613      	mov	r3, r2
 8009364:	eb42 0303 	adc.w	r3, r2, r3
 8009368:	61fb      	str	r3, [r7, #28]
 800936a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800936e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009372:	f7f7 fc41 	bl	8000bf8 <__aeabi_uldivmod>
 8009376:	4602      	mov	r2, r0
 8009378:	460b      	mov	r3, r1
 800937a:	4611      	mov	r1, r2
 800937c:	4b3b      	ldr	r3, [pc, #236]	@ (800946c <USART_SetConfig+0x52c>)
 800937e:	fba3 2301 	umull	r2, r3, r3, r1
 8009382:	095b      	lsrs	r3, r3, #5
 8009384:	2264      	movs	r2, #100	@ 0x64
 8009386:	fb02 f303 	mul.w	r3, r2, r3
 800938a:	1acb      	subs	r3, r1, r3
 800938c:	00db      	lsls	r3, r3, #3
 800938e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009392:	4b36      	ldr	r3, [pc, #216]	@ (800946c <USART_SetConfig+0x52c>)
 8009394:	fba3 2302 	umull	r2, r3, r3, r2
 8009398:	095b      	lsrs	r3, r3, #5
 800939a:	005b      	lsls	r3, r3, #1
 800939c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80093a0:	441c      	add	r4, r3
 80093a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80093a6:	2200      	movs	r2, #0
 80093a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80093ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80093b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80093b4:	4642      	mov	r2, r8
 80093b6:	464b      	mov	r3, r9
 80093b8:	1891      	adds	r1, r2, r2
 80093ba:	6139      	str	r1, [r7, #16]
 80093bc:	415b      	adcs	r3, r3
 80093be:	617b      	str	r3, [r7, #20]
 80093c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80093c4:	4641      	mov	r1, r8
 80093c6:	1851      	adds	r1, r2, r1
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	4649      	mov	r1, r9
 80093cc:	414b      	adcs	r3, r1
 80093ce:	60fb      	str	r3, [r7, #12]
 80093d0:	f04f 0200 	mov.w	r2, #0
 80093d4:	f04f 0300 	mov.w	r3, #0
 80093d8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80093dc:	4659      	mov	r1, fp
 80093de:	00cb      	lsls	r3, r1, #3
 80093e0:	4651      	mov	r1, sl
 80093e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093e6:	4651      	mov	r1, sl
 80093e8:	00ca      	lsls	r2, r1, #3
 80093ea:	4610      	mov	r0, r2
 80093ec:	4619      	mov	r1, r3
 80093ee:	4603      	mov	r3, r0
 80093f0:	4642      	mov	r2, r8
 80093f2:	189b      	adds	r3, r3, r2
 80093f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80093f8:	464b      	mov	r3, r9
 80093fa:	460a      	mov	r2, r1
 80093fc:	eb42 0303 	adc.w	r3, r2, r3
 8009400:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009404:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800940e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009410:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009414:	460b      	mov	r3, r1
 8009416:	18db      	adds	r3, r3, r3
 8009418:	603b      	str	r3, [r7, #0]
 800941a:	4613      	mov	r3, r2
 800941c:	eb42 0303 	adc.w	r3, r2, r3
 8009420:	607b      	str	r3, [r7, #4]
 8009422:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009426:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800942a:	f7f7 fbe5 	bl	8000bf8 <__aeabi_uldivmod>
 800942e:	4602      	mov	r2, r0
 8009430:	460b      	mov	r3, r1
 8009432:	4b0e      	ldr	r3, [pc, #56]	@ (800946c <USART_SetConfig+0x52c>)
 8009434:	fba3 1302 	umull	r1, r3, r3, r2
 8009438:	095b      	lsrs	r3, r3, #5
 800943a:	2164      	movs	r1, #100	@ 0x64
 800943c:	fb01 f303 	mul.w	r3, r1, r3
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	00db      	lsls	r3, r3, #3
 8009444:	3332      	adds	r3, #50	@ 0x32
 8009446:	4a09      	ldr	r2, [pc, #36]	@ (800946c <USART_SetConfig+0x52c>)
 8009448:	fba2 2303 	umull	r2, r3, r2, r3
 800944c:	095b      	lsrs	r3, r3, #5
 800944e:	f003 0207 	and.w	r2, r3, #7
 8009452:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4422      	add	r2, r4
 800945a:	609a      	str	r2, [r3, #8]
  }
}
 800945c:	bf00      	nop
 800945e:	bf00      	nop
 8009460:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8009464:	46bd      	mov	sp, r7
 8009466:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800946a:	bf00      	nop
 800946c:	51eb851f 	.word	0x51eb851f

08009470 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009470:	b084      	sub	sp, #16
 8009472:	b580      	push	{r7, lr}
 8009474:	b084      	sub	sp, #16
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
 800947a:	f107 001c 	add.w	r0, r7, #28
 800947e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009482:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009486:	2b01      	cmp	r3, #1
 8009488:	d123      	bne.n	80094d2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800948e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800949e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80094b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d105      	bne.n	80094c6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	68db      	ldr	r3, [r3, #12]
 80094be:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f001 fae8 	bl	800aa9c <USB_CoreReset>
 80094cc:	4603      	mov	r3, r0
 80094ce:	73fb      	strb	r3, [r7, #15]
 80094d0:	e01b      	b.n	800950a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f001 fadc 	bl	800aa9c <USB_CoreReset>
 80094e4:	4603      	mov	r3, r0
 80094e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80094e8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d106      	bne.n	80094fe <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	639a      	str	r2, [r3, #56]	@ 0x38
 80094fc:	e005      	b.n	800950a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009502:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800950a:	7fbb      	ldrb	r3, [r7, #30]
 800950c:	2b01      	cmp	r3, #1
 800950e:	d10b      	bne.n	8009528 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	f043 0206 	orr.w	r2, r3, #6
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	f043 0220 	orr.w	r2, r3, #32
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009528:	7bfb      	ldrb	r3, [r7, #15]
}
 800952a:	4618      	mov	r0, r3
 800952c:	3710      	adds	r7, #16
 800952e:	46bd      	mov	sp, r7
 8009530:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009534:	b004      	add	sp, #16
 8009536:	4770      	bx	lr

08009538 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009538:	b480      	push	{r7}
 800953a:	b087      	sub	sp, #28
 800953c:	af00      	add	r7, sp, #0
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	4613      	mov	r3, r2
 8009544:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009546:	79fb      	ldrb	r3, [r7, #7]
 8009548:	2b02      	cmp	r3, #2
 800954a:	d165      	bne.n	8009618 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	4a41      	ldr	r2, [pc, #260]	@ (8009654 <USB_SetTurnaroundTime+0x11c>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d906      	bls.n	8009562 <USB_SetTurnaroundTime+0x2a>
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	4a40      	ldr	r2, [pc, #256]	@ (8009658 <USB_SetTurnaroundTime+0x120>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d202      	bcs.n	8009562 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800955c:	230f      	movs	r3, #15
 800955e:	617b      	str	r3, [r7, #20]
 8009560:	e062      	b.n	8009628 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	4a3c      	ldr	r2, [pc, #240]	@ (8009658 <USB_SetTurnaroundTime+0x120>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d306      	bcc.n	8009578 <USB_SetTurnaroundTime+0x40>
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	4a3b      	ldr	r2, [pc, #236]	@ (800965c <USB_SetTurnaroundTime+0x124>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d202      	bcs.n	8009578 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009572:	230e      	movs	r3, #14
 8009574:	617b      	str	r3, [r7, #20]
 8009576:	e057      	b.n	8009628 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	4a38      	ldr	r2, [pc, #224]	@ (800965c <USB_SetTurnaroundTime+0x124>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d306      	bcc.n	800958e <USB_SetTurnaroundTime+0x56>
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	4a37      	ldr	r2, [pc, #220]	@ (8009660 <USB_SetTurnaroundTime+0x128>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d202      	bcs.n	800958e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009588:	230d      	movs	r3, #13
 800958a:	617b      	str	r3, [r7, #20]
 800958c:	e04c      	b.n	8009628 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	4a33      	ldr	r2, [pc, #204]	@ (8009660 <USB_SetTurnaroundTime+0x128>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d306      	bcc.n	80095a4 <USB_SetTurnaroundTime+0x6c>
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	4a32      	ldr	r2, [pc, #200]	@ (8009664 <USB_SetTurnaroundTime+0x12c>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d802      	bhi.n	80095a4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800959e:	230c      	movs	r3, #12
 80095a0:	617b      	str	r3, [r7, #20]
 80095a2:	e041      	b.n	8009628 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	4a2f      	ldr	r2, [pc, #188]	@ (8009664 <USB_SetTurnaroundTime+0x12c>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d906      	bls.n	80095ba <USB_SetTurnaroundTime+0x82>
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	4a2e      	ldr	r2, [pc, #184]	@ (8009668 <USB_SetTurnaroundTime+0x130>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d802      	bhi.n	80095ba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80095b4:	230b      	movs	r3, #11
 80095b6:	617b      	str	r3, [r7, #20]
 80095b8:	e036      	b.n	8009628 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	4a2a      	ldr	r2, [pc, #168]	@ (8009668 <USB_SetTurnaroundTime+0x130>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d906      	bls.n	80095d0 <USB_SetTurnaroundTime+0x98>
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	4a29      	ldr	r2, [pc, #164]	@ (800966c <USB_SetTurnaroundTime+0x134>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d802      	bhi.n	80095d0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80095ca:	230a      	movs	r3, #10
 80095cc:	617b      	str	r3, [r7, #20]
 80095ce:	e02b      	b.n	8009628 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	4a26      	ldr	r2, [pc, #152]	@ (800966c <USB_SetTurnaroundTime+0x134>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d906      	bls.n	80095e6 <USB_SetTurnaroundTime+0xae>
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	4a25      	ldr	r2, [pc, #148]	@ (8009670 <USB_SetTurnaroundTime+0x138>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d202      	bcs.n	80095e6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80095e0:	2309      	movs	r3, #9
 80095e2:	617b      	str	r3, [r7, #20]
 80095e4:	e020      	b.n	8009628 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	4a21      	ldr	r2, [pc, #132]	@ (8009670 <USB_SetTurnaroundTime+0x138>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d306      	bcc.n	80095fc <USB_SetTurnaroundTime+0xc4>
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	4a20      	ldr	r2, [pc, #128]	@ (8009674 <USB_SetTurnaroundTime+0x13c>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d802      	bhi.n	80095fc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80095f6:	2308      	movs	r3, #8
 80095f8:	617b      	str	r3, [r7, #20]
 80095fa:	e015      	b.n	8009628 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	4a1d      	ldr	r2, [pc, #116]	@ (8009674 <USB_SetTurnaroundTime+0x13c>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d906      	bls.n	8009612 <USB_SetTurnaroundTime+0xda>
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	4a1c      	ldr	r2, [pc, #112]	@ (8009678 <USB_SetTurnaroundTime+0x140>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d202      	bcs.n	8009612 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800960c:	2307      	movs	r3, #7
 800960e:	617b      	str	r3, [r7, #20]
 8009610:	e00a      	b.n	8009628 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009612:	2306      	movs	r3, #6
 8009614:	617b      	str	r3, [r7, #20]
 8009616:	e007      	b.n	8009628 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009618:	79fb      	ldrb	r3, [r7, #7]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d102      	bne.n	8009624 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800961e:	2309      	movs	r3, #9
 8009620:	617b      	str	r3, [r7, #20]
 8009622:	e001      	b.n	8009628 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009624:	2309      	movs	r3, #9
 8009626:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	68da      	ldr	r2, [r3, #12]
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	029b      	lsls	r3, r3, #10
 800963c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009640:	431a      	orrs	r2, r3
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	371c      	adds	r7, #28
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr
 8009654:	00d8acbf 	.word	0x00d8acbf
 8009658:	00e4e1c0 	.word	0x00e4e1c0
 800965c:	00f42400 	.word	0x00f42400
 8009660:	01067380 	.word	0x01067380
 8009664:	011a499f 	.word	0x011a499f
 8009668:	01312cff 	.word	0x01312cff
 800966c:	014ca43f 	.word	0x014ca43f
 8009670:	016e3600 	.word	0x016e3600
 8009674:	01a6ab1f 	.word	0x01a6ab1f
 8009678:	01e84800 	.word	0x01e84800

0800967c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	f043 0201 	orr.w	r2, r3, #1
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	370c      	adds	r7, #12
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr

0800969e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800969e:	b480      	push	{r7}
 80096a0:	b083      	sub	sp, #12
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	f023 0201 	bic.w	r2, r3, #1
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80096b2:	2300      	movs	r3, #0
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	460b      	mov	r3, r1
 80096ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80096cc:	2300      	movs	r3, #0
 80096ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	68db      	ldr	r3, [r3, #12]
 80096d4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80096dc:	78fb      	ldrb	r3, [r7, #3]
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d115      	bne.n	800970e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80096ee:	200a      	movs	r0, #10
 80096f0:	f7fa fce8 	bl	80040c4 <HAL_Delay>
      ms += 10U;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	330a      	adds	r3, #10
 80096f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f001 f93f 	bl	800a97e <USB_GetMode>
 8009700:	4603      	mov	r3, r0
 8009702:	2b01      	cmp	r3, #1
 8009704:	d01e      	beq.n	8009744 <USB_SetCurrentMode+0x84>
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2bc7      	cmp	r3, #199	@ 0xc7
 800970a:	d9f0      	bls.n	80096ee <USB_SetCurrentMode+0x2e>
 800970c:	e01a      	b.n	8009744 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800970e:	78fb      	ldrb	r3, [r7, #3]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d115      	bne.n	8009740 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009720:	200a      	movs	r0, #10
 8009722:	f7fa fccf 	bl	80040c4 <HAL_Delay>
      ms += 10U;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	330a      	adds	r3, #10
 800972a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f001 f926 	bl	800a97e <USB_GetMode>
 8009732:	4603      	mov	r3, r0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d005      	beq.n	8009744 <USB_SetCurrentMode+0x84>
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2bc7      	cmp	r3, #199	@ 0xc7
 800973c:	d9f0      	bls.n	8009720 <USB_SetCurrentMode+0x60>
 800973e:	e001      	b.n	8009744 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009740:	2301      	movs	r3, #1
 8009742:	e005      	b.n	8009750 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2bc8      	cmp	r3, #200	@ 0xc8
 8009748:	d101      	bne.n	800974e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800974a:	2301      	movs	r3, #1
 800974c:	e000      	b.n	8009750 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009758:	b084      	sub	sp, #16
 800975a:	b580      	push	{r7, lr}
 800975c:	b086      	sub	sp, #24
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
 8009762:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009766:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800976a:	2300      	movs	r3, #0
 800976c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009772:	2300      	movs	r3, #0
 8009774:	613b      	str	r3, [r7, #16]
 8009776:	e009      	b.n	800978c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	3340      	adds	r3, #64	@ 0x40
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	4413      	add	r3, r2
 8009782:	2200      	movs	r2, #0
 8009784:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	3301      	adds	r3, #1
 800978a:	613b      	str	r3, [r7, #16]
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	2b0e      	cmp	r3, #14
 8009790:	d9f2      	bls.n	8009778 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009792:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009796:	2b00      	cmp	r3, #0
 8009798:	d11c      	bne.n	80097d4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	68fa      	ldr	r2, [r7, #12]
 80097a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80097a8:	f043 0302 	orr.w	r3, r3, #2
 80097ac:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097b2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097be:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097ca:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80097d2:	e00b      	b.n	80097ec <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097d8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097e4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80097f2:	461a      	mov	r2, r3
 80097f4:	2300      	movs	r3, #0
 80097f6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80097f8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d10d      	bne.n	800981c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009800:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009804:	2b00      	cmp	r3, #0
 8009806:	d104      	bne.n	8009812 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009808:	2100      	movs	r1, #0
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 f968 	bl	8009ae0 <USB_SetDevSpeed>
 8009810:	e008      	b.n	8009824 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009812:	2101      	movs	r1, #1
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 f963 	bl	8009ae0 <USB_SetDevSpeed>
 800981a:	e003      	b.n	8009824 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800981c:	2103      	movs	r1, #3
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 f95e 	bl	8009ae0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009824:	2110      	movs	r1, #16
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 f8fa 	bl	8009a20 <USB_FlushTxFifo>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d001      	beq.n	8009836 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8009832:	2301      	movs	r3, #1
 8009834:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 f924 	bl	8009a84 <USB_FlushRxFifo>
 800983c:	4603      	mov	r3, r0
 800983e:	2b00      	cmp	r3, #0
 8009840:	d001      	beq.n	8009846 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8009842:	2301      	movs	r3, #1
 8009844:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800984c:	461a      	mov	r2, r3
 800984e:	2300      	movs	r3, #0
 8009850:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009858:	461a      	mov	r2, r3
 800985a:	2300      	movs	r3, #0
 800985c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009864:	461a      	mov	r2, r3
 8009866:	2300      	movs	r3, #0
 8009868:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800986a:	2300      	movs	r3, #0
 800986c:	613b      	str	r3, [r7, #16]
 800986e:	e043      	b.n	80098f8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	015a      	lsls	r2, r3, #5
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	4413      	add	r3, r2
 8009878:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009882:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009886:	d118      	bne.n	80098ba <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d10a      	bne.n	80098a4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	015a      	lsls	r2, r3, #5
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	4413      	add	r3, r2
 8009896:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800989a:	461a      	mov	r2, r3
 800989c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80098a0:	6013      	str	r3, [r2, #0]
 80098a2:	e013      	b.n	80098cc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	015a      	lsls	r2, r3, #5
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	4413      	add	r3, r2
 80098ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098b0:	461a      	mov	r2, r3
 80098b2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80098b6:	6013      	str	r3, [r2, #0]
 80098b8:	e008      	b.n	80098cc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	015a      	lsls	r2, r3, #5
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	4413      	add	r3, r2
 80098c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098c6:	461a      	mov	r2, r3
 80098c8:	2300      	movs	r3, #0
 80098ca:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	015a      	lsls	r2, r3, #5
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	4413      	add	r3, r2
 80098d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098d8:	461a      	mov	r2, r3
 80098da:	2300      	movs	r3, #0
 80098dc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	015a      	lsls	r2, r3, #5
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	4413      	add	r3, r2
 80098e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098ea:	461a      	mov	r2, r3
 80098ec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80098f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	3301      	adds	r3, #1
 80098f6:	613b      	str	r3, [r7, #16]
 80098f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80098fc:	461a      	mov	r2, r3
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	4293      	cmp	r3, r2
 8009902:	d3b5      	bcc.n	8009870 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009904:	2300      	movs	r3, #0
 8009906:	613b      	str	r3, [r7, #16]
 8009908:	e043      	b.n	8009992 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	015a      	lsls	r2, r3, #5
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	4413      	add	r3, r2
 8009912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800991c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009920:	d118      	bne.n	8009954 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d10a      	bne.n	800993e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	015a      	lsls	r2, r3, #5
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	4413      	add	r3, r2
 8009930:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009934:	461a      	mov	r2, r3
 8009936:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800993a:	6013      	str	r3, [r2, #0]
 800993c:	e013      	b.n	8009966 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	015a      	lsls	r2, r3, #5
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	4413      	add	r3, r2
 8009946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800994a:	461a      	mov	r2, r3
 800994c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009950:	6013      	str	r3, [r2, #0]
 8009952:	e008      	b.n	8009966 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	015a      	lsls	r2, r3, #5
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	4413      	add	r3, r2
 800995c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009960:	461a      	mov	r2, r3
 8009962:	2300      	movs	r3, #0
 8009964:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	015a      	lsls	r2, r3, #5
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	4413      	add	r3, r2
 800996e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009972:	461a      	mov	r2, r3
 8009974:	2300      	movs	r3, #0
 8009976:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	015a      	lsls	r2, r3, #5
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	4413      	add	r3, r2
 8009980:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009984:	461a      	mov	r2, r3
 8009986:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800998a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	3301      	adds	r3, #1
 8009990:	613b      	str	r3, [r7, #16]
 8009992:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009996:	461a      	mov	r2, r3
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	4293      	cmp	r3, r2
 800999c:	d3b5      	bcc.n	800990a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	68fa      	ldr	r2, [r7, #12]
 80099a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80099ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099b0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80099be:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80099c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d105      	bne.n	80099d4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	699b      	ldr	r3, [r3, #24]
 80099cc:	f043 0210 	orr.w	r2, r3, #16
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	699a      	ldr	r2, [r3, #24]
 80099d8:	4b10      	ldr	r3, [pc, #64]	@ (8009a1c <USB_DevInit+0x2c4>)
 80099da:	4313      	orrs	r3, r2
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80099e0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d005      	beq.n	80099f4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	699b      	ldr	r3, [r3, #24]
 80099ec:	f043 0208 	orr.w	r2, r3, #8
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80099f4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d107      	bne.n	8009a0c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	699b      	ldr	r3, [r3, #24]
 8009a00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a04:	f043 0304 	orr.w	r3, r3, #4
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3718      	adds	r7, #24
 8009a12:	46bd      	mov	sp, r7
 8009a14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a18:	b004      	add	sp, #16
 8009a1a:	4770      	bx	lr
 8009a1c:	803c3800 	.word	0x803c3800

08009a20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	3301      	adds	r3, #1
 8009a32:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a3a:	d901      	bls.n	8009a40 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009a3c:	2303      	movs	r3, #3
 8009a3e:	e01b      	b.n	8009a78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	691b      	ldr	r3, [r3, #16]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	daf2      	bge.n	8009a2e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	019b      	lsls	r3, r3, #6
 8009a50:	f043 0220 	orr.w	r2, r3, #32
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a64:	d901      	bls.n	8009a6a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009a66:	2303      	movs	r3, #3
 8009a68:	e006      	b.n	8009a78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	f003 0320 	and.w	r3, r3, #32
 8009a72:	2b20      	cmp	r3, #32
 8009a74:	d0f0      	beq.n	8009a58 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3714      	adds	r7, #20
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr

08009a84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b085      	sub	sp, #20
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	3301      	adds	r3, #1
 8009a94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a9c:	d901      	bls.n	8009aa2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009a9e:	2303      	movs	r3, #3
 8009aa0:	e018      	b.n	8009ad4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	daf2      	bge.n	8009a90 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2210      	movs	r2, #16
 8009ab2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009ac0:	d901      	bls.n	8009ac6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009ac2:	2303      	movs	r3, #3
 8009ac4:	e006      	b.n	8009ad4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	691b      	ldr	r3, [r3, #16]
 8009aca:	f003 0310 	and.w	r3, r3, #16
 8009ace:	2b10      	cmp	r3, #16
 8009ad0:	d0f0      	beq.n	8009ab4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009ad2:	2300      	movs	r3, #0
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3714      	adds	r7, #20
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b085      	sub	sp, #20
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	460b      	mov	r3, r1
 8009aea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	78fb      	ldrb	r3, [r7, #3]
 8009afa:	68f9      	ldr	r1, [r7, #12]
 8009afc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b00:	4313      	orrs	r3, r2
 8009b02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009b04:	2300      	movs	r3, #0
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3714      	adds	r7, #20
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr

08009b12 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009b12:	b480      	push	{r7}
 8009b14:	b087      	sub	sp, #28
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	f003 0306 	and.w	r3, r3, #6
 8009b2a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d102      	bne.n	8009b38 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009b32:	2300      	movs	r3, #0
 8009b34:	75fb      	strb	r3, [r7, #23]
 8009b36:	e00a      	b.n	8009b4e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2b02      	cmp	r3, #2
 8009b3c:	d002      	beq.n	8009b44 <USB_GetDevSpeed+0x32>
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2b06      	cmp	r3, #6
 8009b42:	d102      	bne.n	8009b4a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009b44:	2302      	movs	r3, #2
 8009b46:	75fb      	strb	r3, [r7, #23]
 8009b48:	e001      	b.n	8009b4e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009b4a:	230f      	movs	r3, #15
 8009b4c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	371c      	adds	r7, #28
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	785b      	ldrb	r3, [r3, #1]
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d13a      	bne.n	8009bee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b7e:	69da      	ldr	r2, [r3, #28]
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	f003 030f 	and.w	r3, r3, #15
 8009b88:	2101      	movs	r1, #1
 8009b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	68f9      	ldr	r1, [r7, #12]
 8009b92:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b96:	4313      	orrs	r3, r2
 8009b98:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	015a      	lsls	r2, r3, #5
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d155      	bne.n	8009c5c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	015a      	lsls	r2, r3, #5
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	4413      	add	r3, r2
 8009bb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	791b      	ldrb	r3, [r3, #4]
 8009bca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009bcc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	059b      	lsls	r3, r3, #22
 8009bd2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	68ba      	ldr	r2, [r7, #8]
 8009bd8:	0151      	lsls	r1, r2, #5
 8009bda:	68fa      	ldr	r2, [r7, #12]
 8009bdc:	440a      	add	r2, r1
 8009bde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009be2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009be6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bea:	6013      	str	r3, [r2, #0]
 8009bec:	e036      	b.n	8009c5c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bf4:	69da      	ldr	r2, [r3, #28]
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	f003 030f 	and.w	r3, r3, #15
 8009bfe:	2101      	movs	r1, #1
 8009c00:	fa01 f303 	lsl.w	r3, r1, r3
 8009c04:	041b      	lsls	r3, r3, #16
 8009c06:	68f9      	ldr	r1, [r7, #12]
 8009c08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	015a      	lsls	r2, r3, #5
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	4413      	add	r3, r2
 8009c18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d11a      	bne.n	8009c5c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	015a      	lsls	r2, r3, #5
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	689b      	ldr	r3, [r3, #8]
 8009c38:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	791b      	ldrb	r3, [r3, #4]
 8009c40:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009c42:	430b      	orrs	r3, r1
 8009c44:	4313      	orrs	r3, r2
 8009c46:	68ba      	ldr	r2, [r7, #8]
 8009c48:	0151      	lsls	r1, r2, #5
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	440a      	add	r2, r1
 8009c4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009c56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c5a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009c5c:	2300      	movs	r3, #0
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3714      	adds	r7, #20
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr
	...

08009c6c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b085      	sub	sp, #20
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	785b      	ldrb	r3, [r3, #1]
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d161      	bne.n	8009d4c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	015a      	lsls	r2, r3, #5
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	4413      	add	r3, r2
 8009c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c9e:	d11f      	bne.n	8009ce0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	015a      	lsls	r2, r3, #5
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	68ba      	ldr	r2, [r7, #8]
 8009cb0:	0151      	lsls	r1, r2, #5
 8009cb2:	68fa      	ldr	r2, [r7, #12]
 8009cb4:	440a      	add	r2, r1
 8009cb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009cba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009cbe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	015a      	lsls	r2, r3, #5
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	68ba      	ldr	r2, [r7, #8]
 8009cd0:	0151      	lsls	r1, r2, #5
 8009cd2:	68fa      	ldr	r2, [r7, #12]
 8009cd4:	440a      	add	r2, r1
 8009cd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009cda:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009cde:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ce6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	f003 030f 	and.w	r3, r3, #15
 8009cf0:	2101      	movs	r1, #1
 8009cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	43db      	mvns	r3, r3
 8009cfa:	68f9      	ldr	r1, [r7, #12]
 8009cfc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d00:	4013      	ands	r3, r2
 8009d02:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d0a:	69da      	ldr	r2, [r3, #28]
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	f003 030f 	and.w	r3, r3, #15
 8009d14:	2101      	movs	r1, #1
 8009d16:	fa01 f303 	lsl.w	r3, r1, r3
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	43db      	mvns	r3, r3
 8009d1e:	68f9      	ldr	r1, [r7, #12]
 8009d20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d24:	4013      	ands	r3, r2
 8009d26:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	015a      	lsls	r2, r3, #5
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	4413      	add	r3, r2
 8009d30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	0159      	lsls	r1, r3, #5
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	440b      	add	r3, r1
 8009d3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d42:	4619      	mov	r1, r3
 8009d44:	4b35      	ldr	r3, [pc, #212]	@ (8009e1c <USB_DeactivateEndpoint+0x1b0>)
 8009d46:	4013      	ands	r3, r2
 8009d48:	600b      	str	r3, [r1, #0]
 8009d4a:	e060      	b.n	8009e0e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	015a      	lsls	r2, r3, #5
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	4413      	add	r3, r2
 8009d54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d62:	d11f      	bne.n	8009da4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	015a      	lsls	r2, r3, #5
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68ba      	ldr	r2, [r7, #8]
 8009d74:	0151      	lsls	r1, r2, #5
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	440a      	add	r2, r1
 8009d7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d7e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009d82:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	015a      	lsls	r2, r3, #5
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	68ba      	ldr	r2, [r7, #8]
 8009d94:	0151      	lsls	r1, r2, #5
 8009d96:	68fa      	ldr	r2, [r7, #12]
 8009d98:	440a      	add	r2, r1
 8009d9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009da2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009daa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	f003 030f 	and.w	r3, r3, #15
 8009db4:	2101      	movs	r1, #1
 8009db6:	fa01 f303 	lsl.w	r3, r1, r3
 8009dba:	041b      	lsls	r3, r3, #16
 8009dbc:	43db      	mvns	r3, r3
 8009dbe:	68f9      	ldr	r1, [r7, #12]
 8009dc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009dc4:	4013      	ands	r3, r2
 8009dc6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dce:	69da      	ldr	r2, [r3, #28]
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	f003 030f 	and.w	r3, r3, #15
 8009dd8:	2101      	movs	r1, #1
 8009dda:	fa01 f303 	lsl.w	r3, r1, r3
 8009dde:	041b      	lsls	r3, r3, #16
 8009de0:	43db      	mvns	r3, r3
 8009de2:	68f9      	ldr	r1, [r7, #12]
 8009de4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009de8:	4013      	ands	r3, r2
 8009dea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	015a      	lsls	r2, r3, #5
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	4413      	add	r3, r2
 8009df4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	0159      	lsls	r1, r3, #5
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	440b      	add	r3, r1
 8009e02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e06:	4619      	mov	r1, r3
 8009e08:	4b05      	ldr	r3, [pc, #20]	@ (8009e20 <USB_DeactivateEndpoint+0x1b4>)
 8009e0a:	4013      	ands	r3, r2
 8009e0c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3714      	adds	r7, #20
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr
 8009e1c:	ec337800 	.word	0xec337800
 8009e20:	eff37800 	.word	0xeff37800

08009e24 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b08a      	sub	sp, #40	@ 0x28
 8009e28:	af02      	add	r7, sp, #8
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	4613      	mov	r3, r2
 8009e30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	785b      	ldrb	r3, [r3, #1]
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	f040 817f 	bne.w	800a144 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	691b      	ldr	r3, [r3, #16]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d132      	bne.n	8009eb4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	015a      	lsls	r2, r3, #5
 8009e52:	69fb      	ldr	r3, [r7, #28]
 8009e54:	4413      	add	r3, r2
 8009e56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e5a:	691b      	ldr	r3, [r3, #16]
 8009e5c:	69ba      	ldr	r2, [r7, #24]
 8009e5e:	0151      	lsls	r1, r2, #5
 8009e60:	69fa      	ldr	r2, [r7, #28]
 8009e62:	440a      	add	r2, r1
 8009e64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e68:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009e6c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009e70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009e72:	69bb      	ldr	r3, [r7, #24]
 8009e74:	015a      	lsls	r2, r3, #5
 8009e76:	69fb      	ldr	r3, [r7, #28]
 8009e78:	4413      	add	r3, r2
 8009e7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	69ba      	ldr	r2, [r7, #24]
 8009e82:	0151      	lsls	r1, r2, #5
 8009e84:	69fa      	ldr	r2, [r7, #28]
 8009e86:	440a      	add	r2, r1
 8009e88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009e90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e92:	69bb      	ldr	r3, [r7, #24]
 8009e94:	015a      	lsls	r2, r3, #5
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	4413      	add	r3, r2
 8009e9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e9e:	691b      	ldr	r3, [r3, #16]
 8009ea0:	69ba      	ldr	r2, [r7, #24]
 8009ea2:	0151      	lsls	r1, r2, #5
 8009ea4:	69fa      	ldr	r2, [r7, #28]
 8009ea6:	440a      	add	r2, r1
 8009ea8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009eac:	0cdb      	lsrs	r3, r3, #19
 8009eae:	04db      	lsls	r3, r3, #19
 8009eb0:	6113      	str	r3, [r2, #16]
 8009eb2:	e097      	b.n	8009fe4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	015a      	lsls	r2, r3, #5
 8009eb8:	69fb      	ldr	r3, [r7, #28]
 8009eba:	4413      	add	r3, r2
 8009ebc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ec0:	691b      	ldr	r3, [r3, #16]
 8009ec2:	69ba      	ldr	r2, [r7, #24]
 8009ec4:	0151      	lsls	r1, r2, #5
 8009ec6:	69fa      	ldr	r2, [r7, #28]
 8009ec8:	440a      	add	r2, r1
 8009eca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ece:	0cdb      	lsrs	r3, r3, #19
 8009ed0:	04db      	lsls	r3, r3, #19
 8009ed2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009ed4:	69bb      	ldr	r3, [r7, #24]
 8009ed6:	015a      	lsls	r2, r3, #5
 8009ed8:	69fb      	ldr	r3, [r7, #28]
 8009eda:	4413      	add	r3, r2
 8009edc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ee0:	691b      	ldr	r3, [r3, #16]
 8009ee2:	69ba      	ldr	r2, [r7, #24]
 8009ee4:	0151      	lsls	r1, r2, #5
 8009ee6:	69fa      	ldr	r2, [r7, #28]
 8009ee8:	440a      	add	r2, r1
 8009eea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009eee:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009ef2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009ef6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009ef8:	69bb      	ldr	r3, [r7, #24]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d11a      	bne.n	8009f34 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	691a      	ldr	r2, [r3, #16]
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d903      	bls.n	8009f12 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	689a      	ldr	r2, [r3, #8]
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009f12:	69bb      	ldr	r3, [r7, #24]
 8009f14:	015a      	lsls	r2, r3, #5
 8009f16:	69fb      	ldr	r3, [r7, #28]
 8009f18:	4413      	add	r3, r2
 8009f1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f1e:	691b      	ldr	r3, [r3, #16]
 8009f20:	69ba      	ldr	r2, [r7, #24]
 8009f22:	0151      	lsls	r1, r2, #5
 8009f24:	69fa      	ldr	r2, [r7, #28]
 8009f26:	440a      	add	r2, r1
 8009f28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009f30:	6113      	str	r3, [r2, #16]
 8009f32:	e044      	b.n	8009fbe <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	691a      	ldr	r2, [r3, #16]
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	4413      	add	r3, r2
 8009f3e:	1e5a      	subs	r2, r3, #1
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f48:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	015a      	lsls	r2, r3, #5
 8009f4e:	69fb      	ldr	r3, [r7, #28]
 8009f50:	4413      	add	r3, r2
 8009f52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f56:	691a      	ldr	r2, [r3, #16]
 8009f58:	8afb      	ldrh	r3, [r7, #22]
 8009f5a:	04d9      	lsls	r1, r3, #19
 8009f5c:	4ba4      	ldr	r3, [pc, #656]	@ (800a1f0 <USB_EPStartXfer+0x3cc>)
 8009f5e:	400b      	ands	r3, r1
 8009f60:	69b9      	ldr	r1, [r7, #24]
 8009f62:	0148      	lsls	r0, r1, #5
 8009f64:	69f9      	ldr	r1, [r7, #28]
 8009f66:	4401      	add	r1, r0
 8009f68:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	791b      	ldrb	r3, [r3, #4]
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d122      	bne.n	8009fbe <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009f78:	69bb      	ldr	r3, [r7, #24]
 8009f7a:	015a      	lsls	r2, r3, #5
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	4413      	add	r3, r2
 8009f80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f84:	691b      	ldr	r3, [r3, #16]
 8009f86:	69ba      	ldr	r2, [r7, #24]
 8009f88:	0151      	lsls	r1, r2, #5
 8009f8a:	69fa      	ldr	r2, [r7, #28]
 8009f8c:	440a      	add	r2, r1
 8009f8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f92:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009f96:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8009f98:	69bb      	ldr	r3, [r7, #24]
 8009f9a:	015a      	lsls	r2, r3, #5
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fa4:	691a      	ldr	r2, [r3, #16]
 8009fa6:	8afb      	ldrh	r3, [r7, #22]
 8009fa8:	075b      	lsls	r3, r3, #29
 8009faa:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009fae:	69b9      	ldr	r1, [r7, #24]
 8009fb0:	0148      	lsls	r0, r1, #5
 8009fb2:	69f9      	ldr	r1, [r7, #28]
 8009fb4:	4401      	add	r1, r0
 8009fb6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	015a      	lsls	r2, r3, #5
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fca:	691a      	ldr	r2, [r3, #16]
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	691b      	ldr	r3, [r3, #16]
 8009fd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fd4:	69b9      	ldr	r1, [r7, #24]
 8009fd6:	0148      	lsls	r0, r1, #5
 8009fd8:	69f9      	ldr	r1, [r7, #28]
 8009fda:	4401      	add	r1, r0
 8009fdc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009fe4:	79fb      	ldrb	r3, [r7, #7]
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d14b      	bne.n	800a082 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	69db      	ldr	r3, [r3, #28]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d009      	beq.n	800a006 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	015a      	lsls	r2, r3, #5
 8009ff6:	69fb      	ldr	r3, [r7, #28]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ffe:	461a      	mov	r2, r3
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	69db      	ldr	r3, [r3, #28]
 800a004:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	791b      	ldrb	r3, [r3, #4]
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d128      	bne.n	800a060 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a00e:	69fb      	ldr	r3, [r7, #28]
 800a010:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d110      	bne.n	800a040 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a01e:	69bb      	ldr	r3, [r7, #24]
 800a020:	015a      	lsls	r2, r3, #5
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	4413      	add	r3, r2
 800a026:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	69ba      	ldr	r2, [r7, #24]
 800a02e:	0151      	lsls	r1, r2, #5
 800a030:	69fa      	ldr	r2, [r7, #28]
 800a032:	440a      	add	r2, r1
 800a034:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a038:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a03c:	6013      	str	r3, [r2, #0]
 800a03e:	e00f      	b.n	800a060 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	015a      	lsls	r2, r3, #5
 800a044:	69fb      	ldr	r3, [r7, #28]
 800a046:	4413      	add	r3, r2
 800a048:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	69ba      	ldr	r2, [r7, #24]
 800a050:	0151      	lsls	r1, r2, #5
 800a052:	69fa      	ldr	r2, [r7, #28]
 800a054:	440a      	add	r2, r1
 800a056:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a05a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a05e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a060:	69bb      	ldr	r3, [r7, #24]
 800a062:	015a      	lsls	r2, r3, #5
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	4413      	add	r3, r2
 800a068:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	69ba      	ldr	r2, [r7, #24]
 800a070:	0151      	lsls	r1, r2, #5
 800a072:	69fa      	ldr	r2, [r7, #28]
 800a074:	440a      	add	r2, r1
 800a076:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a07a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a07e:	6013      	str	r3, [r2, #0]
 800a080:	e166      	b.n	800a350 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	015a      	lsls	r2, r3, #5
 800a086:	69fb      	ldr	r3, [r7, #28]
 800a088:	4413      	add	r3, r2
 800a08a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	69ba      	ldr	r2, [r7, #24]
 800a092:	0151      	lsls	r1, r2, #5
 800a094:	69fa      	ldr	r2, [r7, #28]
 800a096:	440a      	add	r2, r1
 800a098:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a09c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a0a0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	791b      	ldrb	r3, [r3, #4]
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d015      	beq.n	800a0d6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	f000 814e 	beq.w	800a350 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	f003 030f 	and.w	r3, r3, #15
 800a0c4:	2101      	movs	r1, #1
 800a0c6:	fa01 f303 	lsl.w	r3, r1, r3
 800a0ca:	69f9      	ldr	r1, [r7, #28]
 800a0cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	634b      	str	r3, [r1, #52]	@ 0x34
 800a0d4:	e13c      	b.n	800a350 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a0d6:	69fb      	ldr	r3, [r7, #28]
 800a0d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0dc:	689b      	ldr	r3, [r3, #8]
 800a0de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d110      	bne.n	800a108 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	015a      	lsls	r2, r3, #5
 800a0ea:	69fb      	ldr	r3, [r7, #28]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	69ba      	ldr	r2, [r7, #24]
 800a0f6:	0151      	lsls	r1, r2, #5
 800a0f8:	69fa      	ldr	r2, [r7, #28]
 800a0fa:	440a      	add	r2, r1
 800a0fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a100:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a104:	6013      	str	r3, [r2, #0]
 800a106:	e00f      	b.n	800a128 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a108:	69bb      	ldr	r3, [r7, #24]
 800a10a:	015a      	lsls	r2, r3, #5
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	4413      	add	r3, r2
 800a110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	69ba      	ldr	r2, [r7, #24]
 800a118:	0151      	lsls	r1, r2, #5
 800a11a:	69fa      	ldr	r2, [r7, #28]
 800a11c:	440a      	add	r2, r1
 800a11e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a122:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a126:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	68d9      	ldr	r1, [r3, #12]
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	781a      	ldrb	r2, [r3, #0]
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	691b      	ldr	r3, [r3, #16]
 800a134:	b298      	uxth	r0, r3
 800a136:	79fb      	ldrb	r3, [r7, #7]
 800a138:	9300      	str	r3, [sp, #0]
 800a13a:	4603      	mov	r3, r0
 800a13c:	68f8      	ldr	r0, [r7, #12]
 800a13e:	f000 f9b9 	bl	800a4b4 <USB_WritePacket>
 800a142:	e105      	b.n	800a350 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	015a      	lsls	r2, r3, #5
 800a148:	69fb      	ldr	r3, [r7, #28]
 800a14a:	4413      	add	r3, r2
 800a14c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a150:	691b      	ldr	r3, [r3, #16]
 800a152:	69ba      	ldr	r2, [r7, #24]
 800a154:	0151      	lsls	r1, r2, #5
 800a156:	69fa      	ldr	r2, [r7, #28]
 800a158:	440a      	add	r2, r1
 800a15a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a15e:	0cdb      	lsrs	r3, r3, #19
 800a160:	04db      	lsls	r3, r3, #19
 800a162:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a164:	69bb      	ldr	r3, [r7, #24]
 800a166:	015a      	lsls	r2, r3, #5
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	4413      	add	r3, r2
 800a16c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a170:	691b      	ldr	r3, [r3, #16]
 800a172:	69ba      	ldr	r2, [r7, #24]
 800a174:	0151      	lsls	r1, r2, #5
 800a176:	69fa      	ldr	r2, [r7, #28]
 800a178:	440a      	add	r2, r1
 800a17a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a17e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a182:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a186:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d132      	bne.n	800a1f4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	691b      	ldr	r3, [r3, #16]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d003      	beq.n	800a19e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	689a      	ldr	r2, [r3, #8]
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	689a      	ldr	r2, [r3, #8]
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	015a      	lsls	r2, r3, #5
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1b2:	691a      	ldr	r2, [r3, #16]
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	6a1b      	ldr	r3, [r3, #32]
 800a1b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a1bc:	69b9      	ldr	r1, [r7, #24]
 800a1be:	0148      	lsls	r0, r1, #5
 800a1c0:	69f9      	ldr	r1, [r7, #28]
 800a1c2:	4401      	add	r1, r0
 800a1c4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a1cc:	69bb      	ldr	r3, [r7, #24]
 800a1ce:	015a      	lsls	r2, r3, #5
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	4413      	add	r3, r2
 800a1d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1d8:	691b      	ldr	r3, [r3, #16]
 800a1da:	69ba      	ldr	r2, [r7, #24]
 800a1dc:	0151      	lsls	r1, r2, #5
 800a1de:	69fa      	ldr	r2, [r7, #28]
 800a1e0:	440a      	add	r2, r1
 800a1e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a1ea:	6113      	str	r3, [r2, #16]
 800a1ec:	e062      	b.n	800a2b4 <USB_EPStartXfer+0x490>
 800a1ee:	bf00      	nop
 800a1f0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	691b      	ldr	r3, [r3, #16]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d123      	bne.n	800a244 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a1fc:	69bb      	ldr	r3, [r7, #24]
 800a1fe:	015a      	lsls	r2, r3, #5
 800a200:	69fb      	ldr	r3, [r7, #28]
 800a202:	4413      	add	r3, r2
 800a204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a208:	691a      	ldr	r2, [r3, #16]
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	689b      	ldr	r3, [r3, #8]
 800a20e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a212:	69b9      	ldr	r1, [r7, #24]
 800a214:	0148      	lsls	r0, r1, #5
 800a216:	69f9      	ldr	r1, [r7, #28]
 800a218:	4401      	add	r1, r0
 800a21a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a21e:	4313      	orrs	r3, r2
 800a220:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	015a      	lsls	r2, r3, #5
 800a226:	69fb      	ldr	r3, [r7, #28]
 800a228:	4413      	add	r3, r2
 800a22a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a22e:	691b      	ldr	r3, [r3, #16]
 800a230:	69ba      	ldr	r2, [r7, #24]
 800a232:	0151      	lsls	r1, r2, #5
 800a234:	69fa      	ldr	r2, [r7, #28]
 800a236:	440a      	add	r2, r1
 800a238:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a23c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a240:	6113      	str	r3, [r2, #16]
 800a242:	e037      	b.n	800a2b4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	691a      	ldr	r2, [r3, #16]
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	4413      	add	r3, r2
 800a24e:	1e5a      	subs	r2, r3, #1
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	fbb2 f3f3 	udiv	r3, r2, r3
 800a258:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	689b      	ldr	r3, [r3, #8]
 800a25e:	8afa      	ldrh	r2, [r7, #22]
 800a260:	fb03 f202 	mul.w	r2, r3, r2
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a268:	69bb      	ldr	r3, [r7, #24]
 800a26a:	015a      	lsls	r2, r3, #5
 800a26c:	69fb      	ldr	r3, [r7, #28]
 800a26e:	4413      	add	r3, r2
 800a270:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a274:	691a      	ldr	r2, [r3, #16]
 800a276:	8afb      	ldrh	r3, [r7, #22]
 800a278:	04d9      	lsls	r1, r3, #19
 800a27a:	4b38      	ldr	r3, [pc, #224]	@ (800a35c <USB_EPStartXfer+0x538>)
 800a27c:	400b      	ands	r3, r1
 800a27e:	69b9      	ldr	r1, [r7, #24]
 800a280:	0148      	lsls	r0, r1, #5
 800a282:	69f9      	ldr	r1, [r7, #28]
 800a284:	4401      	add	r1, r0
 800a286:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a28a:	4313      	orrs	r3, r2
 800a28c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a28e:	69bb      	ldr	r3, [r7, #24]
 800a290:	015a      	lsls	r2, r3, #5
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	4413      	add	r3, r2
 800a296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a29a:	691a      	ldr	r2, [r3, #16]
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	6a1b      	ldr	r3, [r3, #32]
 800a2a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2a4:	69b9      	ldr	r1, [r7, #24]
 800a2a6:	0148      	lsls	r0, r1, #5
 800a2a8:	69f9      	ldr	r1, [r7, #28]
 800a2aa:	4401      	add	r1, r0
 800a2ac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a2b4:	79fb      	ldrb	r3, [r7, #7]
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d10d      	bne.n	800a2d6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	68db      	ldr	r3, [r3, #12]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d009      	beq.n	800a2d6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	68d9      	ldr	r1, [r3, #12]
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	015a      	lsls	r2, r3, #5
 800a2ca:	69fb      	ldr	r3, [r7, #28]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2d2:	460a      	mov	r2, r1
 800a2d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	791b      	ldrb	r3, [r3, #4]
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d128      	bne.n	800a330 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a2de:	69fb      	ldr	r3, [r7, #28]
 800a2e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2e4:	689b      	ldr	r3, [r3, #8]
 800a2e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d110      	bne.n	800a310 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a2ee:	69bb      	ldr	r3, [r7, #24]
 800a2f0:	015a      	lsls	r2, r3, #5
 800a2f2:	69fb      	ldr	r3, [r7, #28]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	69ba      	ldr	r2, [r7, #24]
 800a2fe:	0151      	lsls	r1, r2, #5
 800a300:	69fa      	ldr	r2, [r7, #28]
 800a302:	440a      	add	r2, r1
 800a304:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a308:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a30c:	6013      	str	r3, [r2, #0]
 800a30e:	e00f      	b.n	800a330 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a310:	69bb      	ldr	r3, [r7, #24]
 800a312:	015a      	lsls	r2, r3, #5
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	4413      	add	r3, r2
 800a318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	69ba      	ldr	r2, [r7, #24]
 800a320:	0151      	lsls	r1, r2, #5
 800a322:	69fa      	ldr	r2, [r7, #28]
 800a324:	440a      	add	r2, r1
 800a326:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a32a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a32e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	015a      	lsls	r2, r3, #5
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	4413      	add	r3, r2
 800a338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	69ba      	ldr	r2, [r7, #24]
 800a340:	0151      	lsls	r1, r2, #5
 800a342:	69fa      	ldr	r2, [r7, #28]
 800a344:	440a      	add	r2, r1
 800a346:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a34a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a34e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	3720      	adds	r7, #32
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	1ff80000 	.word	0x1ff80000

0800a360 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a360:	b480      	push	{r7}
 800a362:	b087      	sub	sp, #28
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a36a:	2300      	movs	r3, #0
 800a36c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a36e:	2300      	movs	r3, #0
 800a370:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	785b      	ldrb	r3, [r3, #1]
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d14a      	bne.n	800a414 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	015a      	lsls	r2, r3, #5
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	4413      	add	r3, r2
 800a388:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a392:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a396:	f040 8086 	bne.w	800a4a6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	015a      	lsls	r2, r3, #5
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	4413      	add	r3, r2
 800a3a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	683a      	ldr	r2, [r7, #0]
 800a3ac:	7812      	ldrb	r2, [r2, #0]
 800a3ae:	0151      	lsls	r1, r2, #5
 800a3b0:	693a      	ldr	r2, [r7, #16]
 800a3b2:	440a      	add	r2, r1
 800a3b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a3bc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	015a      	lsls	r2, r3, #5
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	4413      	add	r3, r2
 800a3c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	683a      	ldr	r2, [r7, #0]
 800a3d0:	7812      	ldrb	r2, [r2, #0]
 800a3d2:	0151      	lsls	r1, r2, #5
 800a3d4:	693a      	ldr	r2, [r7, #16]
 800a3d6:	440a      	add	r2, r1
 800a3d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a3e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d902      	bls.n	800a3f8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	75fb      	strb	r3, [r7, #23]
          break;
 800a3f6:	e056      	b.n	800a4a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	015a      	lsls	r2, r3, #5
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	4413      	add	r3, r2
 800a402:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a40c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a410:	d0e7      	beq.n	800a3e2 <USB_EPStopXfer+0x82>
 800a412:	e048      	b.n	800a4a6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	015a      	lsls	r2, r3, #5
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	4413      	add	r3, r2
 800a41e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a428:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a42c:	d13b      	bne.n	800a4a6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	015a      	lsls	r2, r3, #5
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	4413      	add	r3, r2
 800a438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	683a      	ldr	r2, [r7, #0]
 800a440:	7812      	ldrb	r2, [r2, #0]
 800a442:	0151      	lsls	r1, r2, #5
 800a444:	693a      	ldr	r2, [r7, #16]
 800a446:	440a      	add	r2, r1
 800a448:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a44c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a450:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	015a      	lsls	r2, r3, #5
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	4413      	add	r3, r2
 800a45c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	683a      	ldr	r2, [r7, #0]
 800a464:	7812      	ldrb	r2, [r2, #0]
 800a466:	0151      	lsls	r1, r2, #5
 800a468:	693a      	ldr	r2, [r7, #16]
 800a46a:	440a      	add	r2, r1
 800a46c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a470:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a474:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	3301      	adds	r3, #1
 800a47a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a482:	4293      	cmp	r3, r2
 800a484:	d902      	bls.n	800a48c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	75fb      	strb	r3, [r7, #23]
          break;
 800a48a:	e00c      	b.n	800a4a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	015a      	lsls	r2, r3, #5
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	4413      	add	r3, r2
 800a496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4a4:	d0e7      	beq.n	800a476 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a4a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	371c      	adds	r7, #28
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b089      	sub	sp, #36	@ 0x24
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	4611      	mov	r1, r2
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	71fb      	strb	r3, [r7, #7]
 800a4c6:	4613      	mov	r3, r2
 800a4c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a4d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d123      	bne.n	800a522 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a4da:	88bb      	ldrh	r3, [r7, #4]
 800a4dc:	3303      	adds	r3, #3
 800a4de:	089b      	lsrs	r3, r3, #2
 800a4e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	61bb      	str	r3, [r7, #24]
 800a4e6:	e018      	b.n	800a51a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a4e8:	79fb      	ldrb	r3, [r7, #7]
 800a4ea:	031a      	lsls	r2, r3, #12
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	4413      	add	r3, r2
 800a4f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	69fb      	ldr	r3, [r7, #28]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a4fc:	69fb      	ldr	r3, [r7, #28]
 800a4fe:	3301      	adds	r3, #1
 800a500:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a502:	69fb      	ldr	r3, [r7, #28]
 800a504:	3301      	adds	r3, #1
 800a506:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a508:	69fb      	ldr	r3, [r7, #28]
 800a50a:	3301      	adds	r3, #1
 800a50c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a50e:	69fb      	ldr	r3, [r7, #28]
 800a510:	3301      	adds	r3, #1
 800a512:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a514:	69bb      	ldr	r3, [r7, #24]
 800a516:	3301      	adds	r3, #1
 800a518:	61bb      	str	r3, [r7, #24]
 800a51a:	69ba      	ldr	r2, [r7, #24]
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d3e2      	bcc.n	800a4e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a522:	2300      	movs	r3, #0
}
 800a524:	4618      	mov	r0, r3
 800a526:	3724      	adds	r7, #36	@ 0x24
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a530:	b480      	push	{r7}
 800a532:	b08b      	sub	sp, #44	@ 0x2c
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	4613      	mov	r3, r2
 800a53c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a546:	88fb      	ldrh	r3, [r7, #6]
 800a548:	089b      	lsrs	r3, r3, #2
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a54e:	88fb      	ldrh	r3, [r7, #6]
 800a550:	f003 0303 	and.w	r3, r3, #3
 800a554:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a556:	2300      	movs	r3, #0
 800a558:	623b      	str	r3, [r7, #32]
 800a55a:	e014      	b.n	800a586 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a566:	601a      	str	r2, [r3, #0]
    pDest++;
 800a568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a56a:	3301      	adds	r3, #1
 800a56c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a570:	3301      	adds	r3, #1
 800a572:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a576:	3301      	adds	r3, #1
 800a578:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a57c:	3301      	adds	r3, #1
 800a57e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a580:	6a3b      	ldr	r3, [r7, #32]
 800a582:	3301      	adds	r3, #1
 800a584:	623b      	str	r3, [r7, #32]
 800a586:	6a3a      	ldr	r2, [r7, #32]
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d3e6      	bcc.n	800a55c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a58e:	8bfb      	ldrh	r3, [r7, #30]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d01e      	beq.n	800a5d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a594:	2300      	movs	r3, #0
 800a596:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a598:	69bb      	ldr	r3, [r7, #24]
 800a59a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a59e:	461a      	mov	r2, r3
 800a5a0:	f107 0310 	add.w	r3, r7, #16
 800a5a4:	6812      	ldr	r2, [r2, #0]
 800a5a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a5a8:	693a      	ldr	r2, [r7, #16]
 800a5aa:	6a3b      	ldr	r3, [r7, #32]
 800a5ac:	b2db      	uxtb	r3, r3
 800a5ae:	00db      	lsls	r3, r3, #3
 800a5b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a5b4:	b2da      	uxtb	r2, r3
 800a5b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5b8:	701a      	strb	r2, [r3, #0]
      i++;
 800a5ba:	6a3b      	ldr	r3, [r7, #32]
 800a5bc:	3301      	adds	r3, #1
 800a5be:	623b      	str	r3, [r7, #32]
      pDest++;
 800a5c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a5c6:	8bfb      	ldrh	r3, [r7, #30]
 800a5c8:	3b01      	subs	r3, #1
 800a5ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a5cc:	8bfb      	ldrh	r3, [r7, #30]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d1ea      	bne.n	800a5a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	372c      	adds	r7, #44	@ 0x2c
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b085      	sub	sp, #20
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	785b      	ldrb	r3, [r3, #1]
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	d12c      	bne.n	800a656 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	015a      	lsls	r2, r3, #5
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	4413      	add	r3, r2
 800a604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	db12      	blt.n	800a634 <USB_EPSetStall+0x54>
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d00f      	beq.n	800a634 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	015a      	lsls	r2, r3, #5
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	4413      	add	r3, r2
 800a61c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	68ba      	ldr	r2, [r7, #8]
 800a624:	0151      	lsls	r1, r2, #5
 800a626:	68fa      	ldr	r2, [r7, #12]
 800a628:	440a      	add	r2, r1
 800a62a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a62e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a632:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	015a      	lsls	r2, r3, #5
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	4413      	add	r3, r2
 800a63c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	68ba      	ldr	r2, [r7, #8]
 800a644:	0151      	lsls	r1, r2, #5
 800a646:	68fa      	ldr	r2, [r7, #12]
 800a648:	440a      	add	r2, r1
 800a64a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a64e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a652:	6013      	str	r3, [r2, #0]
 800a654:	e02b      	b.n	800a6ae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	015a      	lsls	r2, r3, #5
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	4413      	add	r3, r2
 800a65e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	db12      	blt.n	800a68e <USB_EPSetStall+0xae>
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d00f      	beq.n	800a68e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	015a      	lsls	r2, r3, #5
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	4413      	add	r3, r2
 800a676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	68ba      	ldr	r2, [r7, #8]
 800a67e:	0151      	lsls	r1, r2, #5
 800a680:	68fa      	ldr	r2, [r7, #12]
 800a682:	440a      	add	r2, r1
 800a684:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a688:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a68c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	015a      	lsls	r2, r3, #5
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	4413      	add	r3, r2
 800a696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	68ba      	ldr	r2, [r7, #8]
 800a69e:	0151      	lsls	r1, r2, #5
 800a6a0:	68fa      	ldr	r2, [r7, #12]
 800a6a2:	440a      	add	r2, r1
 800a6a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a6ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a6ae:	2300      	movs	r3, #0
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3714      	adds	r7, #20
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b085      	sub	sp, #20
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	785b      	ldrb	r3, [r3, #1]
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d128      	bne.n	800a72a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	015a      	lsls	r2, r3, #5
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	4413      	add	r3, r2
 800a6e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	68ba      	ldr	r2, [r7, #8]
 800a6e8:	0151      	lsls	r1, r2, #5
 800a6ea:	68fa      	ldr	r2, [r7, #12]
 800a6ec:	440a      	add	r2, r1
 800a6ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a6f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	791b      	ldrb	r3, [r3, #4]
 800a6fc:	2b03      	cmp	r3, #3
 800a6fe:	d003      	beq.n	800a708 <USB_EPClearStall+0x4c>
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	791b      	ldrb	r3, [r3, #4]
 800a704:	2b02      	cmp	r3, #2
 800a706:	d138      	bne.n	800a77a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	015a      	lsls	r2, r3, #5
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	4413      	add	r3, r2
 800a710:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	68ba      	ldr	r2, [r7, #8]
 800a718:	0151      	lsls	r1, r2, #5
 800a71a:	68fa      	ldr	r2, [r7, #12]
 800a71c:	440a      	add	r2, r1
 800a71e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a726:	6013      	str	r3, [r2, #0]
 800a728:	e027      	b.n	800a77a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	015a      	lsls	r2, r3, #5
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	4413      	add	r3, r2
 800a732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	68ba      	ldr	r2, [r7, #8]
 800a73a:	0151      	lsls	r1, r2, #5
 800a73c:	68fa      	ldr	r2, [r7, #12]
 800a73e:	440a      	add	r2, r1
 800a740:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a744:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a748:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	791b      	ldrb	r3, [r3, #4]
 800a74e:	2b03      	cmp	r3, #3
 800a750:	d003      	beq.n	800a75a <USB_EPClearStall+0x9e>
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	791b      	ldrb	r3, [r3, #4]
 800a756:	2b02      	cmp	r3, #2
 800a758:	d10f      	bne.n	800a77a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	015a      	lsls	r2, r3, #5
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	4413      	add	r3, r2
 800a762:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	68ba      	ldr	r2, [r7, #8]
 800a76a:	0151      	lsls	r1, r2, #5
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	440a      	add	r2, r1
 800a770:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a778:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a77a:	2300      	movs	r3, #0
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3714      	adds	r7, #20
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a788:	b480      	push	{r7}
 800a78a:	b085      	sub	sp, #20
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	460b      	mov	r3, r1
 800a792:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	68fa      	ldr	r2, [r7, #12]
 800a7a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a7a6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a7aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	78fb      	ldrb	r3, [r7, #3]
 800a7b6:	011b      	lsls	r3, r3, #4
 800a7b8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a7bc:	68f9      	ldr	r1, [r7, #12]
 800a7be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a7c6:	2300      	movs	r3, #0
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3714      	adds	r7, #20
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b085      	sub	sp, #20
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	68fa      	ldr	r2, [r7, #12]
 800a7ea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a7ee:	f023 0303 	bic.w	r3, r3, #3
 800a7f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	68fa      	ldr	r2, [r7, #12]
 800a7fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a802:	f023 0302 	bic.w	r3, r3, #2
 800a806:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3714      	adds	r7, #20
 800a80e:	46bd      	mov	sp, r7
 800a810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a814:	4770      	bx	lr

0800a816 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a816:	b480      	push	{r7}
 800a818:	b085      	sub	sp, #20
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	68fa      	ldr	r2, [r7, #12]
 800a82c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a830:	f023 0303 	bic.w	r3, r3, #3
 800a834:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	68fa      	ldr	r2, [r7, #12]
 800a840:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a844:	f043 0302 	orr.w	r3, r3, #2
 800a848:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a84a:	2300      	movs	r3, #0
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3714      	adds	r7, #20
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr

0800a858 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a858:	b480      	push	{r7}
 800a85a:	b085      	sub	sp, #20
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	695b      	ldr	r3, [r3, #20]
 800a864:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	699b      	ldr	r3, [r3, #24]
 800a86a:	68fa      	ldr	r2, [r7, #12]
 800a86c:	4013      	ands	r3, r2
 800a86e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a870:	68fb      	ldr	r3, [r7, #12]
}
 800a872:	4618      	mov	r0, r3
 800a874:	3714      	adds	r7, #20
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr

0800a87e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a87e:	b480      	push	{r7}
 800a880:	b085      	sub	sp, #20
 800a882:	af00      	add	r7, sp, #0
 800a884:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a890:	699b      	ldr	r3, [r3, #24]
 800a892:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a89a:	69db      	ldr	r3, [r3, #28]
 800a89c:	68ba      	ldr	r2, [r7, #8]
 800a89e:	4013      	ands	r3, r2
 800a8a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	0c1b      	lsrs	r3, r3, #16
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3714      	adds	r7, #20
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr

0800a8b2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a8b2:	b480      	push	{r7}
 800a8b4:	b085      	sub	sp, #20
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8c4:	699b      	ldr	r3, [r3, #24]
 800a8c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8ce:	69db      	ldr	r3, [r3, #28]
 800a8d0:	68ba      	ldr	r2, [r7, #8]
 800a8d2:	4013      	ands	r3, r2
 800a8d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	b29b      	uxth	r3, r3
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3714      	adds	r7, #20
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr

0800a8e6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a8e6:	b480      	push	{r7}
 800a8e8:	b085      	sub	sp, #20
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a8f6:	78fb      	ldrb	r3, [r7, #3]
 800a8f8:	015a      	lsls	r2, r3, #5
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a902:	689b      	ldr	r3, [r3, #8]
 800a904:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a90c:	695b      	ldr	r3, [r3, #20]
 800a90e:	68ba      	ldr	r2, [r7, #8]
 800a910:	4013      	ands	r3, r2
 800a912:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a914:	68bb      	ldr	r3, [r7, #8]
}
 800a916:	4618      	mov	r0, r3
 800a918:	3714      	adds	r7, #20
 800a91a:	46bd      	mov	sp, r7
 800a91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a920:	4770      	bx	lr

0800a922 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a922:	b480      	push	{r7}
 800a924:	b087      	sub	sp, #28
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
 800a92a:	460b      	mov	r3, r1
 800a92c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a938:	691b      	ldr	r3, [r3, #16]
 800a93a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a944:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a946:	78fb      	ldrb	r3, [r7, #3]
 800a948:	f003 030f 	and.w	r3, r3, #15
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	fa22 f303 	lsr.w	r3, r2, r3
 800a952:	01db      	lsls	r3, r3, #7
 800a954:	b2db      	uxtb	r3, r3
 800a956:	693a      	ldr	r2, [r7, #16]
 800a958:	4313      	orrs	r3, r2
 800a95a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a95c:	78fb      	ldrb	r3, [r7, #3]
 800a95e:	015a      	lsls	r2, r3, #5
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	4413      	add	r3, r2
 800a964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a968:	689b      	ldr	r3, [r3, #8]
 800a96a:	693a      	ldr	r2, [r7, #16]
 800a96c:	4013      	ands	r3, r2
 800a96e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a970:	68bb      	ldr	r3, [r7, #8]
}
 800a972:	4618      	mov	r0, r3
 800a974:	371c      	adds	r7, #28
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr

0800a97e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a97e:	b480      	push	{r7}
 800a980:	b083      	sub	sp, #12
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	695b      	ldr	r3, [r3, #20]
 800a98a:	f003 0301 	and.w	r3, r3, #1
}
 800a98e:	4618      	mov	r0, r3
 800a990:	370c      	adds	r7, #12
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr

0800a99a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a99a:	b480      	push	{r7}
 800a99c:	b085      	sub	sp, #20
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	68fa      	ldr	r2, [r7, #12]
 800a9b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9b4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a9b8:	f023 0307 	bic.w	r3, r3, #7
 800a9bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	68fa      	ldr	r2, [r7, #12]
 800a9c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a9cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a9d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a9d2:	2300      	movs	r3, #0
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3714      	adds	r7, #20
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b087      	sub	sp, #28
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	607a      	str	r2, [r7, #4]
 800a9ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	333c      	adds	r3, #60	@ 0x3c
 800a9f6:	3304      	adds	r3, #4
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	4a26      	ldr	r2, [pc, #152]	@ (800aa98 <USB_EP0_OutStart+0xb8>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d90a      	bls.n	800aa1a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aa10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa14:	d101      	bne.n	800aa1a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800aa16:	2300      	movs	r3, #0
 800aa18:	e037      	b.n	800aa8a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa20:	461a      	mov	r2, r3
 800aa22:	2300      	movs	r3, #0
 800aa24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa2c:	691b      	ldr	r3, [r3, #16]
 800aa2e:	697a      	ldr	r2, [r7, #20]
 800aa30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aa38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa40:	691b      	ldr	r3, [r3, #16]
 800aa42:	697a      	ldr	r2, [r7, #20]
 800aa44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa48:	f043 0318 	orr.w	r3, r3, #24
 800aa4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa54:	691b      	ldr	r3, [r3, #16]
 800aa56:	697a      	ldr	r2, [r7, #20]
 800aa58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa5c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800aa60:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800aa62:	7afb      	ldrb	r3, [r7, #11]
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d10f      	bne.n	800aa88 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa6e:	461a      	mov	r2, r3
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	697a      	ldr	r2, [r7, #20]
 800aa7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa82:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800aa86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aa88:	2300      	movs	r3, #0
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	371c      	adds	r7, #28
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr
 800aa96:	bf00      	nop
 800aa98:	4f54300a 	.word	0x4f54300a

0800aa9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b085      	sub	sp, #20
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	3301      	adds	r3, #1
 800aaac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aab4:	d901      	bls.n	800aaba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aab6:	2303      	movs	r3, #3
 800aab8:	e022      	b.n	800ab00 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	691b      	ldr	r3, [r3, #16]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	daf2      	bge.n	800aaa8 <USB_CoreReset+0xc>

  count = 10U;
 800aac2:	230a      	movs	r3, #10
 800aac4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800aac6:	e002      	b.n	800aace <USB_CoreReset+0x32>
  {
    count--;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	3b01      	subs	r3, #1
 800aacc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d1f9      	bne.n	800aac8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	691b      	ldr	r3, [r3, #16]
 800aad8:	f043 0201 	orr.w	r2, r3, #1
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	3301      	adds	r3, #1
 800aae4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aaec:	d901      	bls.n	800aaf2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800aaee:	2303      	movs	r3, #3
 800aaf0:	e006      	b.n	800ab00 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	691b      	ldr	r3, [r3, #16]
 800aaf6:	f003 0301 	and.w	r3, r3, #1
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d0f0      	beq.n	800aae0 <USB_CoreReset+0x44>

  return HAL_OK;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3714      	adds	r7, #20
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	460b      	mov	r3, r1
 800ab16:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ab18:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ab1c:	f004 f830 	bl	800eb80 <USBD_static_malloc>
 800ab20:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d109      	bne.n	800ab3c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	32b0      	adds	r2, #176	@ 0xb0
 800ab32:	2100      	movs	r1, #0
 800ab34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ab38:	2302      	movs	r3, #2
 800ab3a:	e0d4      	b.n	800ace6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ab3c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ab40:	2100      	movs	r1, #0
 800ab42:	68f8      	ldr	r0, [r7, #12]
 800ab44:	f005 fd27 	bl	8010596 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	32b0      	adds	r2, #176	@ 0xb0
 800ab52:	68f9      	ldr	r1, [r7, #12]
 800ab54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	32b0      	adds	r2, #176	@ 0xb0
 800ab62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	7c1b      	ldrb	r3, [r3, #16]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d138      	bne.n	800abe6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ab74:	4b5e      	ldr	r3, [pc, #376]	@ (800acf0 <USBD_CDC_Init+0x1e4>)
 800ab76:	7819      	ldrb	r1, [r3, #0]
 800ab78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ab7c:	2202      	movs	r2, #2
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f003 fedb 	bl	800e93a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ab84:	4b5a      	ldr	r3, [pc, #360]	@ (800acf0 <USBD_CDC_Init+0x1e4>)
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	f003 020f 	and.w	r2, r3, #15
 800ab8c:	6879      	ldr	r1, [r7, #4]
 800ab8e:	4613      	mov	r3, r2
 800ab90:	009b      	lsls	r3, r3, #2
 800ab92:	4413      	add	r3, r2
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	440b      	add	r3, r1
 800ab98:	3323      	adds	r3, #35	@ 0x23
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ab9e:	4b55      	ldr	r3, [pc, #340]	@ (800acf4 <USBD_CDC_Init+0x1e8>)
 800aba0:	7819      	ldrb	r1, [r3, #0]
 800aba2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aba6:	2202      	movs	r2, #2
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f003 fec6 	bl	800e93a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800abae:	4b51      	ldr	r3, [pc, #324]	@ (800acf4 <USBD_CDC_Init+0x1e8>)
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	f003 020f 	and.w	r2, r3, #15
 800abb6:	6879      	ldr	r1, [r7, #4]
 800abb8:	4613      	mov	r3, r2
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	4413      	add	r3, r2
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	440b      	add	r3, r1
 800abc2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800abc6:	2201      	movs	r2, #1
 800abc8:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800abca:	4b4b      	ldr	r3, [pc, #300]	@ (800acf8 <USBD_CDC_Init+0x1ec>)
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	f003 020f 	and.w	r2, r3, #15
 800abd2:	6879      	ldr	r1, [r7, #4]
 800abd4:	4613      	mov	r3, r2
 800abd6:	009b      	lsls	r3, r3, #2
 800abd8:	4413      	add	r3, r2
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	440b      	add	r3, r1
 800abde:	331c      	adds	r3, #28
 800abe0:	2210      	movs	r2, #16
 800abe2:	601a      	str	r2, [r3, #0]
 800abe4:	e035      	b.n	800ac52 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800abe6:	4b42      	ldr	r3, [pc, #264]	@ (800acf0 <USBD_CDC_Init+0x1e4>)
 800abe8:	7819      	ldrb	r1, [r3, #0]
 800abea:	2340      	movs	r3, #64	@ 0x40
 800abec:	2202      	movs	r2, #2
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f003 fea3 	bl	800e93a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800abf4:	4b3e      	ldr	r3, [pc, #248]	@ (800acf0 <USBD_CDC_Init+0x1e4>)
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	f003 020f 	and.w	r2, r3, #15
 800abfc:	6879      	ldr	r1, [r7, #4]
 800abfe:	4613      	mov	r3, r2
 800ac00:	009b      	lsls	r3, r3, #2
 800ac02:	4413      	add	r3, r2
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	440b      	add	r3, r1
 800ac08:	3323      	adds	r3, #35	@ 0x23
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ac0e:	4b39      	ldr	r3, [pc, #228]	@ (800acf4 <USBD_CDC_Init+0x1e8>)
 800ac10:	7819      	ldrb	r1, [r3, #0]
 800ac12:	2340      	movs	r3, #64	@ 0x40
 800ac14:	2202      	movs	r2, #2
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f003 fe8f 	bl	800e93a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ac1c:	4b35      	ldr	r3, [pc, #212]	@ (800acf4 <USBD_CDC_Init+0x1e8>)
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	f003 020f 	and.w	r2, r3, #15
 800ac24:	6879      	ldr	r1, [r7, #4]
 800ac26:	4613      	mov	r3, r2
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	4413      	add	r3, r2
 800ac2c:	009b      	lsls	r3, r3, #2
 800ac2e:	440b      	add	r3, r1
 800ac30:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800ac34:	2201      	movs	r2, #1
 800ac36:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ac38:	4b2f      	ldr	r3, [pc, #188]	@ (800acf8 <USBD_CDC_Init+0x1ec>)
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	f003 020f 	and.w	r2, r3, #15
 800ac40:	6879      	ldr	r1, [r7, #4]
 800ac42:	4613      	mov	r3, r2
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	4413      	add	r3, r2
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	440b      	add	r3, r1
 800ac4c:	331c      	adds	r3, #28
 800ac4e:	2210      	movs	r2, #16
 800ac50:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ac52:	4b29      	ldr	r3, [pc, #164]	@ (800acf8 <USBD_CDC_Init+0x1ec>)
 800ac54:	7819      	ldrb	r1, [r3, #0]
 800ac56:	2308      	movs	r3, #8
 800ac58:	2203      	movs	r2, #3
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f003 fe6d 	bl	800e93a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ac60:	4b25      	ldr	r3, [pc, #148]	@ (800acf8 <USBD_CDC_Init+0x1ec>)
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	f003 020f 	and.w	r2, r3, #15
 800ac68:	6879      	ldr	r1, [r7, #4]
 800ac6a:	4613      	mov	r3, r2
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	4413      	add	r3, r2
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	440b      	add	r3, r1
 800ac74:	3323      	adds	r3, #35	@ 0x23
 800ac76:	2201      	movs	r2, #1
 800ac78:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	33b0      	adds	r3, #176	@ 0xb0
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	4413      	add	r3, r2
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2200      	movs	r2, #0
 800aca2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800acac:	2b00      	cmp	r3, #0
 800acae:	d101      	bne.n	800acb4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800acb0:	2302      	movs	r3, #2
 800acb2:	e018      	b.n	800ace6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	7c1b      	ldrb	r3, [r3, #16]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d10a      	bne.n	800acd2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800acbc:	4b0d      	ldr	r3, [pc, #52]	@ (800acf4 <USBD_CDC_Init+0x1e8>)
 800acbe:	7819      	ldrb	r1, [r3, #0]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800acc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f003 ff24 	bl	800eb18 <USBD_LL_PrepareReceive>
 800acd0:	e008      	b.n	800ace4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800acd2:	4b08      	ldr	r3, [pc, #32]	@ (800acf4 <USBD_CDC_Init+0x1e8>)
 800acd4:	7819      	ldrb	r1, [r3, #0]
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800acdc:	2340      	movs	r3, #64	@ 0x40
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f003 ff1a 	bl	800eb18 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ace4:	2300      	movs	r3, #0
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3710      	adds	r7, #16
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
 800acee:	bf00      	nop
 800acf0:	2000013b 	.word	0x2000013b
 800acf4:	2000013c 	.word	0x2000013c
 800acf8:	2000013d 	.word	0x2000013d

0800acfc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b082      	sub	sp, #8
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	460b      	mov	r3, r1
 800ad06:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ad08:	4b3a      	ldr	r3, [pc, #232]	@ (800adf4 <USBD_CDC_DeInit+0xf8>)
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f003 fe39 	bl	800e986 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ad14:	4b37      	ldr	r3, [pc, #220]	@ (800adf4 <USBD_CDC_DeInit+0xf8>)
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	f003 020f 	and.w	r2, r3, #15
 800ad1c:	6879      	ldr	r1, [r7, #4]
 800ad1e:	4613      	mov	r3, r2
 800ad20:	009b      	lsls	r3, r3, #2
 800ad22:	4413      	add	r3, r2
 800ad24:	009b      	lsls	r3, r3, #2
 800ad26:	440b      	add	r3, r1
 800ad28:	3323      	adds	r3, #35	@ 0x23
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ad2e:	4b32      	ldr	r3, [pc, #200]	@ (800adf8 <USBD_CDC_DeInit+0xfc>)
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	4619      	mov	r1, r3
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f003 fe26 	bl	800e986 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ad3a:	4b2f      	ldr	r3, [pc, #188]	@ (800adf8 <USBD_CDC_DeInit+0xfc>)
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	f003 020f 	and.w	r2, r3, #15
 800ad42:	6879      	ldr	r1, [r7, #4]
 800ad44:	4613      	mov	r3, r2
 800ad46:	009b      	lsls	r3, r3, #2
 800ad48:	4413      	add	r3, r2
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	440b      	add	r3, r1
 800ad4e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800ad52:	2200      	movs	r2, #0
 800ad54:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ad56:	4b29      	ldr	r3, [pc, #164]	@ (800adfc <USBD_CDC_DeInit+0x100>)
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f003 fe12 	bl	800e986 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ad62:	4b26      	ldr	r3, [pc, #152]	@ (800adfc <USBD_CDC_DeInit+0x100>)
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	f003 020f 	and.w	r2, r3, #15
 800ad6a:	6879      	ldr	r1, [r7, #4]
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	009b      	lsls	r3, r3, #2
 800ad70:	4413      	add	r3, r2
 800ad72:	009b      	lsls	r3, r3, #2
 800ad74:	440b      	add	r3, r1
 800ad76:	3323      	adds	r3, #35	@ 0x23
 800ad78:	2200      	movs	r2, #0
 800ad7a:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ad7c:	4b1f      	ldr	r3, [pc, #124]	@ (800adfc <USBD_CDC_DeInit+0x100>)
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	f003 020f 	and.w	r2, r3, #15
 800ad84:	6879      	ldr	r1, [r7, #4]
 800ad86:	4613      	mov	r3, r2
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	4413      	add	r3, r2
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	440b      	add	r3, r1
 800ad90:	331c      	adds	r3, #28
 800ad92:	2200      	movs	r2, #0
 800ad94:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	32b0      	adds	r2, #176	@ 0xb0
 800ada0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d01f      	beq.n	800ade8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	33b0      	adds	r3, #176	@ 0xb0
 800adb2:	009b      	lsls	r3, r3, #2
 800adb4:	4413      	add	r3, r2
 800adb6:	685b      	ldr	r3, [r3, #4]
 800adb8:	685b      	ldr	r3, [r3, #4]
 800adba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	32b0      	adds	r2, #176	@ 0xb0
 800adc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adca:	4618      	mov	r0, r3
 800adcc:	f003 fee6 	bl	800eb9c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	32b0      	adds	r2, #176	@ 0xb0
 800adda:	2100      	movs	r1, #0
 800addc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2200      	movs	r2, #0
 800ade4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ade8:	2300      	movs	r3, #0
}
 800adea:	4618      	mov	r0, r3
 800adec:	3708      	adds	r7, #8
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	2000013b 	.word	0x2000013b
 800adf8:	2000013c 	.word	0x2000013c
 800adfc:	2000013d 	.word	0x2000013d

0800ae00 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b086      	sub	sp, #24
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	32b0      	adds	r2, #176	@ 0xb0
 800ae14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae18:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae22:	2300      	movs	r3, #0
 800ae24:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d101      	bne.n	800ae30 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ae2c:	2303      	movs	r3, #3
 800ae2e:	e0bf      	b.n	800afb0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d050      	beq.n	800aede <USBD_CDC_Setup+0xde>
 800ae3c:	2b20      	cmp	r3, #32
 800ae3e:	f040 80af 	bne.w	800afa0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	88db      	ldrh	r3, [r3, #6]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d03a      	beq.n	800aec0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	b25b      	sxtb	r3, r3
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	da1b      	bge.n	800ae8c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	33b0      	adds	r3, #176	@ 0xb0
 800ae5e:	009b      	lsls	r3, r3, #2
 800ae60:	4413      	add	r3, r2
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	689b      	ldr	r3, [r3, #8]
 800ae66:	683a      	ldr	r2, [r7, #0]
 800ae68:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ae6a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ae6c:	683a      	ldr	r2, [r7, #0]
 800ae6e:	88d2      	ldrh	r2, [r2, #6]
 800ae70:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	88db      	ldrh	r3, [r3, #6]
 800ae76:	2b07      	cmp	r3, #7
 800ae78:	bf28      	it	cs
 800ae7a:	2307      	movcs	r3, #7
 800ae7c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	89fa      	ldrh	r2, [r7, #14]
 800ae82:	4619      	mov	r1, r3
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f001 fda9 	bl	800c9dc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ae8a:	e090      	b.n	800afae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	785a      	ldrb	r2, [r3, #1]
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	88db      	ldrh	r3, [r3, #6]
 800ae9a:	2b3f      	cmp	r3, #63	@ 0x3f
 800ae9c:	d803      	bhi.n	800aea6 <USBD_CDC_Setup+0xa6>
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	88db      	ldrh	r3, [r3, #6]
 800aea2:	b2da      	uxtb	r2, r3
 800aea4:	e000      	b.n	800aea8 <USBD_CDC_Setup+0xa8>
 800aea6:	2240      	movs	r2, #64	@ 0x40
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800aeae:	6939      	ldr	r1, [r7, #16]
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800aeb6:	461a      	mov	r2, r3
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f001 fdbe 	bl	800ca3a <USBD_CtlPrepareRx>
      break;
 800aebe:	e076      	b.n	800afae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	33b0      	adds	r3, #176	@ 0xb0
 800aeca:	009b      	lsls	r3, r3, #2
 800aecc:	4413      	add	r3, r2
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	689b      	ldr	r3, [r3, #8]
 800aed2:	683a      	ldr	r2, [r7, #0]
 800aed4:	7850      	ldrb	r0, [r2, #1]
 800aed6:	2200      	movs	r2, #0
 800aed8:	6839      	ldr	r1, [r7, #0]
 800aeda:	4798      	blx	r3
      break;
 800aedc:	e067      	b.n	800afae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	785b      	ldrb	r3, [r3, #1]
 800aee2:	2b0b      	cmp	r3, #11
 800aee4:	d851      	bhi.n	800af8a <USBD_CDC_Setup+0x18a>
 800aee6:	a201      	add	r2, pc, #4	@ (adr r2, 800aeec <USBD_CDC_Setup+0xec>)
 800aee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeec:	0800af1d 	.word	0x0800af1d
 800aef0:	0800af99 	.word	0x0800af99
 800aef4:	0800af8b 	.word	0x0800af8b
 800aef8:	0800af8b 	.word	0x0800af8b
 800aefc:	0800af8b 	.word	0x0800af8b
 800af00:	0800af8b 	.word	0x0800af8b
 800af04:	0800af8b 	.word	0x0800af8b
 800af08:	0800af8b 	.word	0x0800af8b
 800af0c:	0800af8b 	.word	0x0800af8b
 800af10:	0800af8b 	.word	0x0800af8b
 800af14:	0800af47 	.word	0x0800af47
 800af18:	0800af71 	.word	0x0800af71
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af22:	b2db      	uxtb	r3, r3
 800af24:	2b03      	cmp	r3, #3
 800af26:	d107      	bne.n	800af38 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800af28:	f107 030a 	add.w	r3, r7, #10
 800af2c:	2202      	movs	r2, #2
 800af2e:	4619      	mov	r1, r3
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f001 fd53 	bl	800c9dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af36:	e032      	b.n	800af9e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800af38:	6839      	ldr	r1, [r7, #0]
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f001 fcd1 	bl	800c8e2 <USBD_CtlError>
            ret = USBD_FAIL;
 800af40:	2303      	movs	r3, #3
 800af42:	75fb      	strb	r3, [r7, #23]
          break;
 800af44:	e02b      	b.n	800af9e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af4c:	b2db      	uxtb	r3, r3
 800af4e:	2b03      	cmp	r3, #3
 800af50:	d107      	bne.n	800af62 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800af52:	f107 030d 	add.w	r3, r7, #13
 800af56:	2201      	movs	r2, #1
 800af58:	4619      	mov	r1, r3
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f001 fd3e 	bl	800c9dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af60:	e01d      	b.n	800af9e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800af62:	6839      	ldr	r1, [r7, #0]
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f001 fcbc 	bl	800c8e2 <USBD_CtlError>
            ret = USBD_FAIL;
 800af6a:	2303      	movs	r3, #3
 800af6c:	75fb      	strb	r3, [r7, #23]
          break;
 800af6e:	e016      	b.n	800af9e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af76:	b2db      	uxtb	r3, r3
 800af78:	2b03      	cmp	r3, #3
 800af7a:	d00f      	beq.n	800af9c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800af7c:	6839      	ldr	r1, [r7, #0]
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f001 fcaf 	bl	800c8e2 <USBD_CtlError>
            ret = USBD_FAIL;
 800af84:	2303      	movs	r3, #3
 800af86:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800af88:	e008      	b.n	800af9c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800af8a:	6839      	ldr	r1, [r7, #0]
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f001 fca8 	bl	800c8e2 <USBD_CtlError>
          ret = USBD_FAIL;
 800af92:	2303      	movs	r3, #3
 800af94:	75fb      	strb	r3, [r7, #23]
          break;
 800af96:	e002      	b.n	800af9e <USBD_CDC_Setup+0x19e>
          break;
 800af98:	bf00      	nop
 800af9a:	e008      	b.n	800afae <USBD_CDC_Setup+0x1ae>
          break;
 800af9c:	bf00      	nop
      }
      break;
 800af9e:	e006      	b.n	800afae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800afa0:	6839      	ldr	r1, [r7, #0]
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f001 fc9d 	bl	800c8e2 <USBD_CtlError>
      ret = USBD_FAIL;
 800afa8:	2303      	movs	r3, #3
 800afaa:	75fb      	strb	r3, [r7, #23]
      break;
 800afac:	bf00      	nop
  }

  return (uint8_t)ret;
 800afae:	7dfb      	ldrb	r3, [r7, #23]
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3718      	adds	r7, #24
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b084      	sub	sp, #16
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	460b      	mov	r3, r1
 800afc2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800afca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	32b0      	adds	r2, #176	@ 0xb0
 800afd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d101      	bne.n	800afe2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800afde:	2303      	movs	r3, #3
 800afe0:	e065      	b.n	800b0ae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	32b0      	adds	r2, #176	@ 0xb0
 800afec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aff0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aff2:	78fb      	ldrb	r3, [r7, #3]
 800aff4:	f003 020f 	and.w	r2, r3, #15
 800aff8:	6879      	ldr	r1, [r7, #4]
 800affa:	4613      	mov	r3, r2
 800affc:	009b      	lsls	r3, r3, #2
 800affe:	4413      	add	r3, r2
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	440b      	add	r3, r1
 800b004:	3314      	adds	r3, #20
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d02f      	beq.n	800b06c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b00c:	78fb      	ldrb	r3, [r7, #3]
 800b00e:	f003 020f 	and.w	r2, r3, #15
 800b012:	6879      	ldr	r1, [r7, #4]
 800b014:	4613      	mov	r3, r2
 800b016:	009b      	lsls	r3, r3, #2
 800b018:	4413      	add	r3, r2
 800b01a:	009b      	lsls	r3, r3, #2
 800b01c:	440b      	add	r3, r1
 800b01e:	3314      	adds	r3, #20
 800b020:	681a      	ldr	r2, [r3, #0]
 800b022:	78fb      	ldrb	r3, [r7, #3]
 800b024:	f003 010f 	and.w	r1, r3, #15
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	460b      	mov	r3, r1
 800b02c:	00db      	lsls	r3, r3, #3
 800b02e:	440b      	add	r3, r1
 800b030:	009b      	lsls	r3, r3, #2
 800b032:	4403      	add	r3, r0
 800b034:	331c      	adds	r3, #28
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	fbb2 f1f3 	udiv	r1, r2, r3
 800b03c:	fb01 f303 	mul.w	r3, r1, r3
 800b040:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b042:	2b00      	cmp	r3, #0
 800b044:	d112      	bne.n	800b06c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b046:	78fb      	ldrb	r3, [r7, #3]
 800b048:	f003 020f 	and.w	r2, r3, #15
 800b04c:	6879      	ldr	r1, [r7, #4]
 800b04e:	4613      	mov	r3, r2
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	4413      	add	r3, r2
 800b054:	009b      	lsls	r3, r3, #2
 800b056:	440b      	add	r3, r1
 800b058:	3314      	adds	r3, #20
 800b05a:	2200      	movs	r2, #0
 800b05c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b05e:	78f9      	ldrb	r1, [r7, #3]
 800b060:	2300      	movs	r3, #0
 800b062:	2200      	movs	r2, #0
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f003 fd36 	bl	800ead6 <USBD_LL_Transmit>
 800b06a:	e01f      	b.n	800b0ac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	2200      	movs	r2, #0
 800b070:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b07a:	687a      	ldr	r2, [r7, #4]
 800b07c:	33b0      	adds	r3, #176	@ 0xb0
 800b07e:	009b      	lsls	r3, r3, #2
 800b080:	4413      	add	r3, r2
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	691b      	ldr	r3, [r3, #16]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d010      	beq.n	800b0ac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	33b0      	adds	r3, #176	@ 0xb0
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	4413      	add	r3, r2
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	691b      	ldr	r3, [r3, #16]
 800b09c:	68ba      	ldr	r2, [r7, #8]
 800b09e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b0a2:	68ba      	ldr	r2, [r7, #8]
 800b0a4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b0a8:	78fa      	ldrb	r2, [r7, #3]
 800b0aa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b0ac:	2300      	movs	r3, #0
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3710      	adds	r7, #16
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}

0800b0b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b0b6:	b580      	push	{r7, lr}
 800b0b8:	b084      	sub	sp, #16
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
 800b0be:	460b      	mov	r3, r1
 800b0c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	32b0      	adds	r2, #176	@ 0xb0
 800b0cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0d0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	32b0      	adds	r2, #176	@ 0xb0
 800b0dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d101      	bne.n	800b0e8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b0e4:	2303      	movs	r3, #3
 800b0e6:	e01a      	b.n	800b11e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b0e8:	78fb      	ldrb	r3, [r7, #3]
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f003 fd34 	bl	800eb5a <USBD_LL_GetRxDataSize>
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	33b0      	adds	r3, #176	@ 0xb0
 800b104:	009b      	lsls	r3, r3, #2
 800b106:	4413      	add	r3, r2
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	68db      	ldr	r3, [r3, #12]
 800b10c:	68fa      	ldr	r2, [r7, #12]
 800b10e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b112:	68fa      	ldr	r2, [r7, #12]
 800b114:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b118:	4611      	mov	r1, r2
 800b11a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b11c:	2300      	movs	r3, #0
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3710      	adds	r7, #16
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b126:	b580      	push	{r7, lr}
 800b128:	b084      	sub	sp, #16
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	32b0      	adds	r2, #176	@ 0xb0
 800b138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b13c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d101      	bne.n	800b148 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b144:	2303      	movs	r3, #3
 800b146:	e024      	b.n	800b192 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	33b0      	adds	r3, #176	@ 0xb0
 800b152:	009b      	lsls	r3, r3, #2
 800b154:	4413      	add	r3, r2
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d019      	beq.n	800b190 <USBD_CDC_EP0_RxReady+0x6a>
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b162:	2bff      	cmp	r3, #255	@ 0xff
 800b164:	d014      	beq.n	800b190 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b16c:	687a      	ldr	r2, [r7, #4]
 800b16e:	33b0      	adds	r3, #176	@ 0xb0
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	4413      	add	r3, r2
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	689b      	ldr	r3, [r3, #8]
 800b178:	68fa      	ldr	r2, [r7, #12]
 800b17a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b17e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b180:	68fa      	ldr	r2, [r7, #12]
 800b182:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b186:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	22ff      	movs	r2, #255	@ 0xff
 800b18c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b190:	2300      	movs	r3, #0
}
 800b192:	4618      	mov	r0, r3
 800b194:	3710      	adds	r7, #16
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
	...

0800b19c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b086      	sub	sp, #24
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b1a4:	2182      	movs	r1, #130	@ 0x82
 800b1a6:	4818      	ldr	r0, [pc, #96]	@ (800b208 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b1a8:	f000 fd62 	bl	800bc70 <USBD_GetEpDesc>
 800b1ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b1ae:	2101      	movs	r1, #1
 800b1b0:	4815      	ldr	r0, [pc, #84]	@ (800b208 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b1b2:	f000 fd5d 	bl	800bc70 <USBD_GetEpDesc>
 800b1b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b1b8:	2181      	movs	r1, #129	@ 0x81
 800b1ba:	4813      	ldr	r0, [pc, #76]	@ (800b208 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b1bc:	f000 fd58 	bl	800bc70 <USBD_GetEpDesc>
 800b1c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d002      	beq.n	800b1ce <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	2210      	movs	r2, #16
 800b1cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d006      	beq.n	800b1e2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b1dc:	711a      	strb	r2, [r3, #4]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d006      	beq.n	800b1f6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b1f0:	711a      	strb	r2, [r3, #4]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2243      	movs	r2, #67	@ 0x43
 800b1fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b1fc:	4b02      	ldr	r3, [pc, #8]	@ (800b208 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3718      	adds	r7, #24
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	200000f8 	.word	0x200000f8

0800b20c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b086      	sub	sp, #24
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b214:	2182      	movs	r1, #130	@ 0x82
 800b216:	4818      	ldr	r0, [pc, #96]	@ (800b278 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b218:	f000 fd2a 	bl	800bc70 <USBD_GetEpDesc>
 800b21c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b21e:	2101      	movs	r1, #1
 800b220:	4815      	ldr	r0, [pc, #84]	@ (800b278 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b222:	f000 fd25 	bl	800bc70 <USBD_GetEpDesc>
 800b226:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b228:	2181      	movs	r1, #129	@ 0x81
 800b22a:	4813      	ldr	r0, [pc, #76]	@ (800b278 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b22c:	f000 fd20 	bl	800bc70 <USBD_GetEpDesc>
 800b230:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d002      	beq.n	800b23e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	2210      	movs	r2, #16
 800b23c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d006      	beq.n	800b252 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	2200      	movs	r2, #0
 800b248:	711a      	strb	r2, [r3, #4]
 800b24a:	2200      	movs	r2, #0
 800b24c:	f042 0202 	orr.w	r2, r2, #2
 800b250:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d006      	beq.n	800b266 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2200      	movs	r2, #0
 800b25c:	711a      	strb	r2, [r3, #4]
 800b25e:	2200      	movs	r2, #0
 800b260:	f042 0202 	orr.w	r2, r2, #2
 800b264:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2243      	movs	r2, #67	@ 0x43
 800b26a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b26c:	4b02      	ldr	r3, [pc, #8]	@ (800b278 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3718      	adds	r7, #24
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop
 800b278:	200000f8 	.word	0x200000f8

0800b27c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b086      	sub	sp, #24
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b284:	2182      	movs	r1, #130	@ 0x82
 800b286:	4818      	ldr	r0, [pc, #96]	@ (800b2e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b288:	f000 fcf2 	bl	800bc70 <USBD_GetEpDesc>
 800b28c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b28e:	2101      	movs	r1, #1
 800b290:	4815      	ldr	r0, [pc, #84]	@ (800b2e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b292:	f000 fced 	bl	800bc70 <USBD_GetEpDesc>
 800b296:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b298:	2181      	movs	r1, #129	@ 0x81
 800b29a:	4813      	ldr	r0, [pc, #76]	@ (800b2e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b29c:	f000 fce8 	bl	800bc70 <USBD_GetEpDesc>
 800b2a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d002      	beq.n	800b2ae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	2210      	movs	r2, #16
 800b2ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d006      	beq.n	800b2c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b2bc:	711a      	strb	r2, [r3, #4]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d006      	beq.n	800b2d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b2d0:	711a      	strb	r2, [r3, #4]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2243      	movs	r2, #67	@ 0x43
 800b2da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b2dc:	4b02      	ldr	r3, [pc, #8]	@ (800b2e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3718      	adds	r7, #24
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	200000f8 	.word	0x200000f8

0800b2ec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b083      	sub	sp, #12
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	220a      	movs	r2, #10
 800b2f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b2fa:	4b03      	ldr	r3, [pc, #12]	@ (800b308 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	370c      	adds	r7, #12
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr
 800b308:	200000b4 	.word	0x200000b4

0800b30c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b083      	sub	sp, #12
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d101      	bne.n	800b320 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b31c:	2303      	movs	r3, #3
 800b31e:	e009      	b.n	800b334 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	33b0      	adds	r3, #176	@ 0xb0
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	4413      	add	r3, r2
 800b32e:	683a      	ldr	r2, [r7, #0]
 800b330:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b332:	2300      	movs	r3, #0
}
 800b334:	4618      	mov	r0, r3
 800b336:	370c      	adds	r7, #12
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b340:	b480      	push	{r7}
 800b342:	b087      	sub	sp, #28
 800b344:	af00      	add	r7, sp, #0
 800b346:	60f8      	str	r0, [r7, #12]
 800b348:	60b9      	str	r1, [r7, #8]
 800b34a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	32b0      	adds	r2, #176	@ 0xb0
 800b356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b35a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d101      	bne.n	800b366 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b362:	2303      	movs	r3, #3
 800b364:	e008      	b.n	800b378 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	68ba      	ldr	r2, [r7, #8]
 800b36a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	687a      	ldr	r2, [r7, #4]
 800b372:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b376:	2300      	movs	r3, #0
}
 800b378:	4618      	mov	r0, r3
 800b37a:	371c      	adds	r7, #28
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr

0800b384 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b384:	b480      	push	{r7}
 800b386:	b085      	sub	sp, #20
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	32b0      	adds	r2, #176	@ 0xb0
 800b398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b39c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d101      	bne.n	800b3a8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b3a4:	2303      	movs	r3, #3
 800b3a6:	e004      	b.n	800b3b2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	683a      	ldr	r2, [r7, #0]
 800b3ac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b3b0:	2300      	movs	r3, #0
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3714      	adds	r7, #20
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr
	...

0800b3c0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b084      	sub	sp, #16
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	32b0      	adds	r2, #176	@ 0xb0
 800b3d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3d6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b3d8:	2301      	movs	r3, #1
 800b3da:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d101      	bne.n	800b3e6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b3e2:	2303      	movs	r3, #3
 800b3e4:	e025      	b.n	800b432 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d11f      	bne.n	800b430 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b3f8:	4b10      	ldr	r3, [pc, #64]	@ (800b43c <USBD_CDC_TransmitPacket+0x7c>)
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	f003 020f 	and.w	r2, r3, #15
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	4613      	mov	r3, r2
 800b40a:	009b      	lsls	r3, r3, #2
 800b40c:	4413      	add	r3, r2
 800b40e:	009b      	lsls	r3, r3, #2
 800b410:	4403      	add	r3, r0
 800b412:	3314      	adds	r3, #20
 800b414:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b416:	4b09      	ldr	r3, [pc, #36]	@ (800b43c <USBD_CDC_TransmitPacket+0x7c>)
 800b418:	7819      	ldrb	r1, [r3, #0]
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f003 fb55 	bl	800ead6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b42c:	2300      	movs	r3, #0
 800b42e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b430:	7bfb      	ldrb	r3, [r7, #15]
}
 800b432:	4618      	mov	r0, r3
 800b434:	3710      	adds	r7, #16
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	2000013b 	.word	0x2000013b

0800b440 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	32b0      	adds	r2, #176	@ 0xb0
 800b452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b456:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	32b0      	adds	r2, #176	@ 0xb0
 800b462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d101      	bne.n	800b46e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b46a:	2303      	movs	r3, #3
 800b46c:	e018      	b.n	800b4a0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	7c1b      	ldrb	r3, [r3, #16]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d10a      	bne.n	800b48c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b476:	4b0c      	ldr	r3, [pc, #48]	@ (800b4a8 <USBD_CDC_ReceivePacket+0x68>)
 800b478:	7819      	ldrb	r1, [r3, #0]
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b480:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f003 fb47 	bl	800eb18 <USBD_LL_PrepareReceive>
 800b48a:	e008      	b.n	800b49e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b48c:	4b06      	ldr	r3, [pc, #24]	@ (800b4a8 <USBD_CDC_ReceivePacket+0x68>)
 800b48e:	7819      	ldrb	r1, [r3, #0]
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b496:	2340      	movs	r3, #64	@ 0x40
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f003 fb3d 	bl	800eb18 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b49e:	2300      	movs	r3, #0
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3710      	adds	r7, #16
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}
 800b4a8:	2000013c 	.word	0x2000013c

0800b4ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b086      	sub	sp, #24
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	60f8      	str	r0, [r7, #12]
 800b4b4:	60b9      	str	r1, [r7, #8]
 800b4b6:	4613      	mov	r3, r2
 800b4b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d101      	bne.n	800b4c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b4c0:	2303      	movs	r3, #3
 800b4c2:	e01f      	b.n	800b504 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d003      	beq.n	800b4ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	68ba      	ldr	r2, [r7, #8]
 800b4e6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	79fa      	ldrb	r2, [r7, #7]
 800b4f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	f003 f9b7 	bl	800e86c <USBD_LL_Init>
 800b4fe:	4603      	mov	r3, r0
 800b500:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b502:	7dfb      	ldrb	r3, [r7, #23]
}
 800b504:	4618      	mov	r0, r3
 800b506:	3718      	adds	r7, #24
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b516:	2300      	movs	r3, #0
 800b518:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d101      	bne.n	800b524 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b520:	2303      	movs	r3, #3
 800b522:	e025      	b.n	800b570 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	683a      	ldr	r2, [r7, #0]
 800b528:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	32ae      	adds	r2, #174	@ 0xae
 800b536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b53a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d00f      	beq.n	800b560 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	32ae      	adds	r2, #174	@ 0xae
 800b54a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b54e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b550:	f107 020e 	add.w	r2, r7, #14
 800b554:	4610      	mov	r0, r2
 800b556:	4798      	blx	r3
 800b558:	4602      	mov	r2, r0
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b566:	1c5a      	adds	r2, r3, #1
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b56e:	2300      	movs	r3, #0
}
 800b570:	4618      	mov	r0, r3
 800b572:	3710      	adds	r7, #16
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f003 f9bf 	bl	800e904 <USBD_LL_Start>
 800b586:	4603      	mov	r3, r0
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3708      	adds	r7, #8
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b590:	b480      	push	{r7}
 800b592:	b083      	sub	sp, #12
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b598:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	370c      	adds	r7, #12
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a4:	4770      	bx	lr

0800b5a6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b5a6:	b580      	push	{r7, lr}
 800b5a8:	b084      	sub	sp, #16
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	6078      	str	r0, [r7, #4]
 800b5ae:	460b      	mov	r3, r1
 800b5b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d009      	beq.n	800b5d4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	78fa      	ldrb	r2, [r7, #3]
 800b5ca:	4611      	mov	r1, r2
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	4798      	blx	r3
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b5d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3710      	adds	r7, #16
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}

0800b5de <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b5de:	b580      	push	{r7, lr}
 800b5e0:	b084      	sub	sp, #16
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	6078      	str	r0, [r7, #4]
 800b5e6:	460b      	mov	r3, r1
 800b5e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5f4:	685b      	ldr	r3, [r3, #4]
 800b5f6:	78fa      	ldrb	r2, [r7, #3]
 800b5f8:	4611      	mov	r1, r2
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	4798      	blx	r3
 800b5fe:	4603      	mov	r3, r0
 800b600:	2b00      	cmp	r3, #0
 800b602:	d001      	beq.n	800b608 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b604:	2303      	movs	r3, #3
 800b606:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b608:	7bfb      	ldrb	r3, [r7, #15]
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3710      	adds	r7, #16
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}

0800b612 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b612:	b580      	push	{r7, lr}
 800b614:	b084      	sub	sp, #16
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
 800b61a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b622:	6839      	ldr	r1, [r7, #0]
 800b624:	4618      	mov	r0, r3
 800b626:	f001 f922 	bl	800c86e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2201      	movs	r2, #1
 800b62e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b638:	461a      	mov	r2, r3
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b646:	f003 031f 	and.w	r3, r3, #31
 800b64a:	2b02      	cmp	r3, #2
 800b64c:	d01a      	beq.n	800b684 <USBD_LL_SetupStage+0x72>
 800b64e:	2b02      	cmp	r3, #2
 800b650:	d822      	bhi.n	800b698 <USBD_LL_SetupStage+0x86>
 800b652:	2b00      	cmp	r3, #0
 800b654:	d002      	beq.n	800b65c <USBD_LL_SetupStage+0x4a>
 800b656:	2b01      	cmp	r3, #1
 800b658:	d00a      	beq.n	800b670 <USBD_LL_SetupStage+0x5e>
 800b65a:	e01d      	b.n	800b698 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b662:	4619      	mov	r1, r3
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 fb77 	bl	800bd58 <USBD_StdDevReq>
 800b66a:	4603      	mov	r3, r0
 800b66c:	73fb      	strb	r3, [r7, #15]
      break;
 800b66e:	e020      	b.n	800b6b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b676:	4619      	mov	r1, r3
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f000 fbdf 	bl	800be3c <USBD_StdItfReq>
 800b67e:	4603      	mov	r3, r0
 800b680:	73fb      	strb	r3, [r7, #15]
      break;
 800b682:	e016      	b.n	800b6b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b68a:	4619      	mov	r1, r3
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 fc41 	bl	800bf14 <USBD_StdEPReq>
 800b692:	4603      	mov	r3, r0
 800b694:	73fb      	strb	r3, [r7, #15]
      break;
 800b696:	e00c      	b.n	800b6b2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b69e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b6a2:	b2db      	uxtb	r3, r3
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f003 f98c 	bl	800e9c4 <USBD_LL_StallEP>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	73fb      	strb	r3, [r7, #15]
      break;
 800b6b0:	bf00      	nop
  }

  return ret;
 800b6b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3710      	adds	r7, #16
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b086      	sub	sp, #24
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	607a      	str	r2, [r7, #4]
 800b6c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800b6ce:	7afb      	ldrb	r3, [r7, #11]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d177      	bne.n	800b7c4 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b6da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b6e2:	2b03      	cmp	r3, #3
 800b6e4:	f040 80a1 	bne.w	800b82a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	693a      	ldr	r2, [r7, #16]
 800b6ee:	8992      	ldrh	r2, [r2, #12]
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d91c      	bls.n	800b72e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	693a      	ldr	r2, [r7, #16]
 800b6fa:	8992      	ldrh	r2, [r2, #12]
 800b6fc:	1a9a      	subs	r2, r3, r2
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	691b      	ldr	r3, [r3, #16]
 800b706:	693a      	ldr	r2, [r7, #16]
 800b708:	8992      	ldrh	r2, [r2, #12]
 800b70a:	441a      	add	r2, r3
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	6919      	ldr	r1, [r3, #16]
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	899b      	ldrh	r3, [r3, #12]
 800b718:	461a      	mov	r2, r3
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	4293      	cmp	r3, r2
 800b720:	bf38      	it	cc
 800b722:	4613      	movcc	r3, r2
 800b724:	461a      	mov	r2, r3
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	f001 f9a8 	bl	800ca7c <USBD_CtlContinueRx>
 800b72c:	e07d      	b.n	800b82a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b734:	f003 031f 	and.w	r3, r3, #31
 800b738:	2b02      	cmp	r3, #2
 800b73a:	d014      	beq.n	800b766 <USBD_LL_DataOutStage+0xaa>
 800b73c:	2b02      	cmp	r3, #2
 800b73e:	d81d      	bhi.n	800b77c <USBD_LL_DataOutStage+0xc0>
 800b740:	2b00      	cmp	r3, #0
 800b742:	d002      	beq.n	800b74a <USBD_LL_DataOutStage+0x8e>
 800b744:	2b01      	cmp	r3, #1
 800b746:	d003      	beq.n	800b750 <USBD_LL_DataOutStage+0x94>
 800b748:	e018      	b.n	800b77c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b74a:	2300      	movs	r3, #0
 800b74c:	75bb      	strb	r3, [r7, #22]
            break;
 800b74e:	e018      	b.n	800b782 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b756:	b2db      	uxtb	r3, r3
 800b758:	4619      	mov	r1, r3
 800b75a:	68f8      	ldr	r0, [r7, #12]
 800b75c:	f000 fa6e 	bl	800bc3c <USBD_CoreFindIF>
 800b760:	4603      	mov	r3, r0
 800b762:	75bb      	strb	r3, [r7, #22]
            break;
 800b764:	e00d      	b.n	800b782 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b76c:	b2db      	uxtb	r3, r3
 800b76e:	4619      	mov	r1, r3
 800b770:	68f8      	ldr	r0, [r7, #12]
 800b772:	f000 fa70 	bl	800bc56 <USBD_CoreFindEP>
 800b776:	4603      	mov	r3, r0
 800b778:	75bb      	strb	r3, [r7, #22]
            break;
 800b77a:	e002      	b.n	800b782 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b77c:	2300      	movs	r3, #0
 800b77e:	75bb      	strb	r3, [r7, #22]
            break;
 800b780:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b782:	7dbb      	ldrb	r3, [r7, #22]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d119      	bne.n	800b7bc <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	2b03      	cmp	r3, #3
 800b792:	d113      	bne.n	800b7bc <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b794:	7dba      	ldrb	r2, [r7, #22]
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	32ae      	adds	r2, #174	@ 0xae
 800b79a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b79e:	691b      	ldr	r3, [r3, #16]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d00b      	beq.n	800b7bc <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800b7a4:	7dba      	ldrb	r2, [r7, #22]
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b7ac:	7dba      	ldrb	r2, [r7, #22]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	32ae      	adds	r2, #174	@ 0xae
 800b7b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7b6:	691b      	ldr	r3, [r3, #16]
 800b7b8:	68f8      	ldr	r0, [r7, #12]
 800b7ba:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b7bc:	68f8      	ldr	r0, [r7, #12]
 800b7be:	f001 f96e 	bl	800ca9e <USBD_CtlSendStatus>
 800b7c2:	e032      	b.n	800b82a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b7c4:	7afb      	ldrb	r3, [r7, #11]
 800b7c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b7ca:	b2db      	uxtb	r3, r3
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	68f8      	ldr	r0, [r7, #12]
 800b7d0:	f000 fa41 	bl	800bc56 <USBD_CoreFindEP>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b7d8:	7dbb      	ldrb	r3, [r7, #22]
 800b7da:	2bff      	cmp	r3, #255	@ 0xff
 800b7dc:	d025      	beq.n	800b82a <USBD_LL_DataOutStage+0x16e>
 800b7de:	7dbb      	ldrb	r3, [r7, #22]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d122      	bne.n	800b82a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7ea:	b2db      	uxtb	r3, r3
 800b7ec:	2b03      	cmp	r3, #3
 800b7ee:	d117      	bne.n	800b820 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b7f0:	7dba      	ldrb	r2, [r7, #22]
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	32ae      	adds	r2, #174	@ 0xae
 800b7f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7fa:	699b      	ldr	r3, [r3, #24]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d00f      	beq.n	800b820 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800b800:	7dba      	ldrb	r2, [r7, #22]
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b808:	7dba      	ldrb	r2, [r7, #22]
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	32ae      	adds	r2, #174	@ 0xae
 800b80e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b812:	699b      	ldr	r3, [r3, #24]
 800b814:	7afa      	ldrb	r2, [r7, #11]
 800b816:	4611      	mov	r1, r2
 800b818:	68f8      	ldr	r0, [r7, #12]
 800b81a:	4798      	blx	r3
 800b81c:	4603      	mov	r3, r0
 800b81e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b820:	7dfb      	ldrb	r3, [r7, #23]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d001      	beq.n	800b82a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800b826:	7dfb      	ldrb	r3, [r7, #23]
 800b828:	e000      	b.n	800b82c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800b82a:	2300      	movs	r3, #0
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3718      	adds	r7, #24
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b086      	sub	sp, #24
 800b838:	af00      	add	r7, sp, #0
 800b83a:	60f8      	str	r0, [r7, #12]
 800b83c:	460b      	mov	r3, r1
 800b83e:	607a      	str	r2, [r7, #4]
 800b840:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800b842:	7afb      	ldrb	r3, [r7, #11]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d178      	bne.n	800b93a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	3314      	adds	r3, #20
 800b84c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b854:	2b02      	cmp	r3, #2
 800b856:	d163      	bne.n	800b920 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	693a      	ldr	r2, [r7, #16]
 800b85e:	8992      	ldrh	r2, [r2, #12]
 800b860:	4293      	cmp	r3, r2
 800b862:	d91c      	bls.n	800b89e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	693a      	ldr	r2, [r7, #16]
 800b86a:	8992      	ldrh	r2, [r2, #12]
 800b86c:	1a9a      	subs	r2, r3, r2
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	691b      	ldr	r3, [r3, #16]
 800b876:	693a      	ldr	r2, [r7, #16]
 800b878:	8992      	ldrh	r2, [r2, #12]
 800b87a:	441a      	add	r2, r3
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	6919      	ldr	r1, [r3, #16]
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	461a      	mov	r2, r3
 800b88a:	68f8      	ldr	r0, [r7, #12]
 800b88c:	f001 f8c4 	bl	800ca18 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b890:	2300      	movs	r3, #0
 800b892:	2200      	movs	r2, #0
 800b894:	2100      	movs	r1, #0
 800b896:	68f8      	ldr	r0, [r7, #12]
 800b898:	f003 f93e 	bl	800eb18 <USBD_LL_PrepareReceive>
 800b89c:	e040      	b.n	800b920 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	899b      	ldrh	r3, [r3, #12]
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	685b      	ldr	r3, [r3, #4]
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	d11c      	bne.n	800b8e6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	693a      	ldr	r2, [r7, #16]
 800b8b2:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d316      	bcc.n	800b8e6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d20f      	bcs.n	800b8e6 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	2100      	movs	r1, #0
 800b8ca:	68f8      	ldr	r0, [r7, #12]
 800b8cc:	f001 f8a4 	bl	800ca18 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b8d8:	2300      	movs	r3, #0
 800b8da:	2200      	movs	r2, #0
 800b8dc:	2100      	movs	r1, #0
 800b8de:	68f8      	ldr	r0, [r7, #12]
 800b8e0:	f003 f91a 	bl	800eb18 <USBD_LL_PrepareReceive>
 800b8e4:	e01c      	b.n	800b920 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8ec:	b2db      	uxtb	r3, r3
 800b8ee:	2b03      	cmp	r3, #3
 800b8f0:	d10f      	bne.n	800b912 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8f8:	68db      	ldr	r3, [r3, #12]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d009      	beq.n	800b912 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2200      	movs	r2, #0
 800b902:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b90c:	68db      	ldr	r3, [r3, #12]
 800b90e:	68f8      	ldr	r0, [r7, #12]
 800b910:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b912:	2180      	movs	r1, #128	@ 0x80
 800b914:	68f8      	ldr	r0, [r7, #12]
 800b916:	f003 f855 	bl	800e9c4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b91a:	68f8      	ldr	r0, [r7, #12]
 800b91c:	f001 f8d2 	bl	800cac4 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b926:	2b00      	cmp	r3, #0
 800b928:	d03a      	beq.n	800b9a0 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800b92a:	68f8      	ldr	r0, [r7, #12]
 800b92c:	f7ff fe30 	bl	800b590 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2200      	movs	r2, #0
 800b934:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b938:	e032      	b.n	800b9a0 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b93a:	7afb      	ldrb	r3, [r7, #11]
 800b93c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b940:	b2db      	uxtb	r3, r3
 800b942:	4619      	mov	r1, r3
 800b944:	68f8      	ldr	r0, [r7, #12]
 800b946:	f000 f986 	bl	800bc56 <USBD_CoreFindEP>
 800b94a:	4603      	mov	r3, r0
 800b94c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b94e:	7dfb      	ldrb	r3, [r7, #23]
 800b950:	2bff      	cmp	r3, #255	@ 0xff
 800b952:	d025      	beq.n	800b9a0 <USBD_LL_DataInStage+0x16c>
 800b954:	7dfb      	ldrb	r3, [r7, #23]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d122      	bne.n	800b9a0 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b960:	b2db      	uxtb	r3, r3
 800b962:	2b03      	cmp	r3, #3
 800b964:	d11c      	bne.n	800b9a0 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b966:	7dfa      	ldrb	r2, [r7, #23]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	32ae      	adds	r2, #174	@ 0xae
 800b96c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b970:	695b      	ldr	r3, [r3, #20]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d014      	beq.n	800b9a0 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800b976:	7dfa      	ldrb	r2, [r7, #23]
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b97e:	7dfa      	ldrb	r2, [r7, #23]
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	32ae      	adds	r2, #174	@ 0xae
 800b984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b988:	695b      	ldr	r3, [r3, #20]
 800b98a:	7afa      	ldrb	r2, [r7, #11]
 800b98c:	4611      	mov	r1, r2
 800b98e:	68f8      	ldr	r0, [r7, #12]
 800b990:	4798      	blx	r3
 800b992:	4603      	mov	r3, r0
 800b994:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b996:	7dbb      	ldrb	r3, [r7, #22]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d001      	beq.n	800b9a0 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800b99c:	7dbb      	ldrb	r3, [r7, #22]
 800b99e:	e000      	b.n	800b9a2 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800b9a0:	2300      	movs	r3, #0
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3718      	adds	r7, #24
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}

0800b9aa <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b9aa:	b580      	push	{r7, lr}
 800b9ac:	b084      	sub	sp, #16
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d014      	beq.n	800ba10 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9ec:	685b      	ldr	r3, [r3, #4]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d00e      	beq.n	800ba10 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	687a      	ldr	r2, [r7, #4]
 800b9fc:	6852      	ldr	r2, [r2, #4]
 800b9fe:	b2d2      	uxtb	r2, r2
 800ba00:	4611      	mov	r1, r2
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	4798      	blx	r3
 800ba06:	4603      	mov	r3, r0
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d001      	beq.n	800ba10 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ba0c:	2303      	movs	r3, #3
 800ba0e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba10:	2340      	movs	r3, #64	@ 0x40
 800ba12:	2200      	movs	r2, #0
 800ba14:	2100      	movs	r1, #0
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f002 ff8f 	bl	800e93a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2201      	movs	r2, #1
 800ba20:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2240      	movs	r2, #64	@ 0x40
 800ba28:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba2c:	2340      	movs	r3, #64	@ 0x40
 800ba2e:	2200      	movs	r2, #0
 800ba30:	2180      	movs	r1, #128	@ 0x80
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f002 ff81 	bl	800e93a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2240      	movs	r2, #64	@ 0x40
 800ba44:	841a      	strh	r2, [r3, #32]

  return ret;
 800ba46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3710      	adds	r7, #16
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}

0800ba50 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b083      	sub	sp, #12
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	460b      	mov	r3, r1
 800ba5a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	78fa      	ldrb	r2, [r7, #3]
 800ba60:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ba62:	2300      	movs	r3, #0
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	370c      	adds	r7, #12
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr

0800ba70 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ba70:	b480      	push	{r7}
 800ba72:	b083      	sub	sp, #12
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba7e:	b2db      	uxtb	r3, r3
 800ba80:	2b04      	cmp	r3, #4
 800ba82:	d006      	beq.n	800ba92 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba8a:	b2da      	uxtb	r2, r3
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2204      	movs	r2, #4
 800ba96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ba9a:	2300      	movs	r3, #0
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	370c      	adds	r7, #12
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b083      	sub	sp, #12
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bab6:	b2db      	uxtb	r3, r3
 800bab8:	2b04      	cmp	r3, #4
 800baba:	d106      	bne.n	800baca <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bac2:	b2da      	uxtb	r2, r3
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800baca:	2300      	movs	r3, #0
}
 800bacc:	4618      	mov	r0, r3
 800bace:	370c      	adds	r7, #12
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr

0800bad8 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b082      	sub	sp, #8
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	2b03      	cmp	r3, #3
 800baea:	d110      	bne.n	800bb0e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d00b      	beq.n	800bb0e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bafc:	69db      	ldr	r3, [r3, #28]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d005      	beq.n	800bb0e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb08:	69db      	ldr	r3, [r3, #28]
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bb0e:	2300      	movs	r3, #0
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3708      	adds	r7, #8
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	460b      	mov	r3, r1
 800bb22:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	32ae      	adds	r2, #174	@ 0xae
 800bb2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d101      	bne.n	800bb3a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bb36:	2303      	movs	r3, #3
 800bb38:	e01c      	b.n	800bb74 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	2b03      	cmp	r3, #3
 800bb44:	d115      	bne.n	800bb72 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	32ae      	adds	r2, #174	@ 0xae
 800bb50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb54:	6a1b      	ldr	r3, [r3, #32]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d00b      	beq.n	800bb72 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	32ae      	adds	r2, #174	@ 0xae
 800bb64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb68:	6a1b      	ldr	r3, [r3, #32]
 800bb6a:	78fa      	ldrb	r2, [r7, #3]
 800bb6c:	4611      	mov	r1, r2
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bb72:	2300      	movs	r3, #0
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3708      	adds	r7, #8
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	460b      	mov	r3, r1
 800bb86:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	32ae      	adds	r2, #174	@ 0xae
 800bb92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d101      	bne.n	800bb9e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bb9a:	2303      	movs	r3, #3
 800bb9c:	e01c      	b.n	800bbd8 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bba4:	b2db      	uxtb	r3, r3
 800bba6:	2b03      	cmp	r3, #3
 800bba8:	d115      	bne.n	800bbd6 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	32ae      	adds	r2, #174	@ 0xae
 800bbb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d00b      	beq.n	800bbd6 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	32ae      	adds	r2, #174	@ 0xae
 800bbc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbce:	78fa      	ldrb	r2, [r7, #3]
 800bbd0:	4611      	mov	r1, r2
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bbd6:	2300      	movs	r3, #0
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3708      	adds	r7, #8
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}

0800bbe0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b083      	sub	sp, #12
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bbe8:	2300      	movs	r3, #0
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	370c      	adds	r7, #12
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr

0800bbf6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bbf6:	b580      	push	{r7, lr}
 800bbf8:	b084      	sub	sp, #16
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2201      	movs	r2, #1
 800bc06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d00e      	beq.n	800bc32 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc1a:	685b      	ldr	r3, [r3, #4]
 800bc1c:	687a      	ldr	r2, [r7, #4]
 800bc1e:	6852      	ldr	r2, [r2, #4]
 800bc20:	b2d2      	uxtb	r2, r2
 800bc22:	4611      	mov	r1, r2
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	4798      	blx	r3
 800bc28:	4603      	mov	r3, r0
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d001      	beq.n	800bc32 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bc2e:	2303      	movs	r3, #3
 800bc30:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bc32:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3710      	adds	r7, #16
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b083      	sub	sp, #12
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	460b      	mov	r3, r1
 800bc46:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bc48:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	370c      	adds	r7, #12
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr

0800bc56 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bc56:	b480      	push	{r7}
 800bc58:	b083      	sub	sp, #12
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	6078      	str	r0, [r7, #4]
 800bc5e:	460b      	mov	r3, r1
 800bc60:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bc62:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	370c      	adds	r7, #12
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr

0800bc70 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b086      	sub	sp, #24
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	460b      	mov	r3, r1
 800bc7a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bc84:	2300      	movs	r3, #0
 800bc86:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	885b      	ldrh	r3, [r3, #2]
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	68fa      	ldr	r2, [r7, #12]
 800bc90:	7812      	ldrb	r2, [r2, #0]
 800bc92:	4293      	cmp	r3, r2
 800bc94:	d91f      	bls.n	800bcd6 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bc9c:	e013      	b.n	800bcc6 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bc9e:	f107 030a 	add.w	r3, r7, #10
 800bca2:	4619      	mov	r1, r3
 800bca4:	6978      	ldr	r0, [r7, #20]
 800bca6:	f000 f81b 	bl	800bce0 <USBD_GetNextDesc>
 800bcaa:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	785b      	ldrb	r3, [r3, #1]
 800bcb0:	2b05      	cmp	r3, #5
 800bcb2:	d108      	bne.n	800bcc6 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	789b      	ldrb	r3, [r3, #2]
 800bcbc:	78fa      	ldrb	r2, [r7, #3]
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d008      	beq.n	800bcd4 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	885b      	ldrh	r3, [r3, #2]
 800bcca:	b29a      	uxth	r2, r3
 800bccc:	897b      	ldrh	r3, [r7, #10]
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d8e5      	bhi.n	800bc9e <USBD_GetEpDesc+0x2e>
 800bcd2:	e000      	b.n	800bcd6 <USBD_GetEpDesc+0x66>
          break;
 800bcd4:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bcd6:	693b      	ldr	r3, [r7, #16]
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3718      	adds	r7, #24
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}

0800bce0 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b085      	sub	sp, #20
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	881b      	ldrh	r3, [r3, #0]
 800bcf2:	68fa      	ldr	r2, [r7, #12]
 800bcf4:	7812      	ldrb	r2, [r2, #0]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	b29a      	uxth	r2, r3
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	781b      	ldrb	r3, [r3, #0]
 800bd02:	461a      	mov	r2, r3
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	4413      	add	r3, r2
 800bd08:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bd0a:	68fb      	ldr	r3, [r7, #12]
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3714      	adds	r7, #20
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b087      	sub	sp, #28
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bd24:	697b      	ldr	r3, [r7, #20]
 800bd26:	781b      	ldrb	r3, [r3, #0]
 800bd28:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	781b      	ldrb	r3, [r3, #0]
 800bd34:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bd36:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800bd3a:	021b      	lsls	r3, r3, #8
 800bd3c:	b21a      	sxth	r2, r3
 800bd3e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bd42:	4313      	orrs	r3, r2
 800bd44:	b21b      	sxth	r3, r3
 800bd46:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bd48:	89fb      	ldrh	r3, [r7, #14]
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	371c      	adds	r7, #28
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr
	...

0800bd58 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b084      	sub	sp, #16
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd62:	2300      	movs	r3, #0
 800bd64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	781b      	ldrb	r3, [r3, #0]
 800bd6a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bd6e:	2b40      	cmp	r3, #64	@ 0x40
 800bd70:	d005      	beq.n	800bd7e <USBD_StdDevReq+0x26>
 800bd72:	2b40      	cmp	r3, #64	@ 0x40
 800bd74:	d857      	bhi.n	800be26 <USBD_StdDevReq+0xce>
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d00f      	beq.n	800bd9a <USBD_StdDevReq+0x42>
 800bd7a:	2b20      	cmp	r3, #32
 800bd7c:	d153      	bne.n	800be26 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	32ae      	adds	r2, #174	@ 0xae
 800bd88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd8c:	689b      	ldr	r3, [r3, #8]
 800bd8e:	6839      	ldr	r1, [r7, #0]
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	4798      	blx	r3
 800bd94:	4603      	mov	r3, r0
 800bd96:	73fb      	strb	r3, [r7, #15]
      break;
 800bd98:	e04a      	b.n	800be30 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	785b      	ldrb	r3, [r3, #1]
 800bd9e:	2b09      	cmp	r3, #9
 800bda0:	d83b      	bhi.n	800be1a <USBD_StdDevReq+0xc2>
 800bda2:	a201      	add	r2, pc, #4	@ (adr r2, 800bda8 <USBD_StdDevReq+0x50>)
 800bda4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bda8:	0800bdfd 	.word	0x0800bdfd
 800bdac:	0800be11 	.word	0x0800be11
 800bdb0:	0800be1b 	.word	0x0800be1b
 800bdb4:	0800be07 	.word	0x0800be07
 800bdb8:	0800be1b 	.word	0x0800be1b
 800bdbc:	0800bddb 	.word	0x0800bddb
 800bdc0:	0800bdd1 	.word	0x0800bdd1
 800bdc4:	0800be1b 	.word	0x0800be1b
 800bdc8:	0800bdf3 	.word	0x0800bdf3
 800bdcc:	0800bde5 	.word	0x0800bde5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bdd0:	6839      	ldr	r1, [r7, #0]
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f000 fa3e 	bl	800c254 <USBD_GetDescriptor>
          break;
 800bdd8:	e024      	b.n	800be24 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bdda:	6839      	ldr	r1, [r7, #0]
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f000 fba3 	bl	800c528 <USBD_SetAddress>
          break;
 800bde2:	e01f      	b.n	800be24 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bde4:	6839      	ldr	r1, [r7, #0]
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f000 fbe2 	bl	800c5b0 <USBD_SetConfig>
 800bdec:	4603      	mov	r3, r0
 800bdee:	73fb      	strb	r3, [r7, #15]
          break;
 800bdf0:	e018      	b.n	800be24 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bdf2:	6839      	ldr	r1, [r7, #0]
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f000 fc85 	bl	800c704 <USBD_GetConfig>
          break;
 800bdfa:	e013      	b.n	800be24 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bdfc:	6839      	ldr	r1, [r7, #0]
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f000 fcb6 	bl	800c770 <USBD_GetStatus>
          break;
 800be04:	e00e      	b.n	800be24 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be06:	6839      	ldr	r1, [r7, #0]
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f000 fce5 	bl	800c7d8 <USBD_SetFeature>
          break;
 800be0e:	e009      	b.n	800be24 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800be10:	6839      	ldr	r1, [r7, #0]
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 fd09 	bl	800c82a <USBD_ClrFeature>
          break;
 800be18:	e004      	b.n	800be24 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800be1a:	6839      	ldr	r1, [r7, #0]
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f000 fd60 	bl	800c8e2 <USBD_CtlError>
          break;
 800be22:	bf00      	nop
      }
      break;
 800be24:	e004      	b.n	800be30 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800be26:	6839      	ldr	r1, [r7, #0]
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f000 fd5a 	bl	800c8e2 <USBD_CtlError>
      break;
 800be2e:	bf00      	nop
  }

  return ret;
 800be30:	7bfb      	ldrb	r3, [r7, #15]
}
 800be32:	4618      	mov	r0, r3
 800be34:	3710      	adds	r7, #16
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}
 800be3a:	bf00      	nop

0800be3c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b084      	sub	sp, #16
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be46:	2300      	movs	r3, #0
 800be48:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	781b      	ldrb	r3, [r3, #0]
 800be4e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800be52:	2b40      	cmp	r3, #64	@ 0x40
 800be54:	d005      	beq.n	800be62 <USBD_StdItfReq+0x26>
 800be56:	2b40      	cmp	r3, #64	@ 0x40
 800be58:	d852      	bhi.n	800bf00 <USBD_StdItfReq+0xc4>
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d001      	beq.n	800be62 <USBD_StdItfReq+0x26>
 800be5e:	2b20      	cmp	r3, #32
 800be60:	d14e      	bne.n	800bf00 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	3b01      	subs	r3, #1
 800be6c:	2b02      	cmp	r3, #2
 800be6e:	d840      	bhi.n	800bef2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	889b      	ldrh	r3, [r3, #4]
 800be74:	b2db      	uxtb	r3, r3
 800be76:	2b01      	cmp	r3, #1
 800be78:	d836      	bhi.n	800bee8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	889b      	ldrh	r3, [r3, #4]
 800be7e:	b2db      	uxtb	r3, r3
 800be80:	4619      	mov	r1, r3
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f7ff feda 	bl	800bc3c <USBD_CoreFindIF>
 800be88:	4603      	mov	r3, r0
 800be8a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be8c:	7bbb      	ldrb	r3, [r7, #14]
 800be8e:	2bff      	cmp	r3, #255	@ 0xff
 800be90:	d01d      	beq.n	800bece <USBD_StdItfReq+0x92>
 800be92:	7bbb      	ldrb	r3, [r7, #14]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d11a      	bne.n	800bece <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800be98:	7bba      	ldrb	r2, [r7, #14]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	32ae      	adds	r2, #174	@ 0xae
 800be9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bea2:	689b      	ldr	r3, [r3, #8]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d00f      	beq.n	800bec8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bea8:	7bba      	ldrb	r2, [r7, #14]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800beb0:	7bba      	ldrb	r2, [r7, #14]
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	32ae      	adds	r2, #174	@ 0xae
 800beb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beba:	689b      	ldr	r3, [r3, #8]
 800bebc:	6839      	ldr	r1, [r7, #0]
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	4798      	blx	r3
 800bec2:	4603      	mov	r3, r0
 800bec4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bec6:	e004      	b.n	800bed2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bec8:	2303      	movs	r3, #3
 800beca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800becc:	e001      	b.n	800bed2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bece:	2303      	movs	r3, #3
 800bed0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	88db      	ldrh	r3, [r3, #6]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d110      	bne.n	800befc <USBD_StdItfReq+0xc0>
 800beda:	7bfb      	ldrb	r3, [r7, #15]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d10d      	bne.n	800befc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f000 fddc 	bl	800ca9e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bee6:	e009      	b.n	800befc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bee8:	6839      	ldr	r1, [r7, #0]
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 fcf9 	bl	800c8e2 <USBD_CtlError>
          break;
 800bef0:	e004      	b.n	800befc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bef2:	6839      	ldr	r1, [r7, #0]
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f000 fcf4 	bl	800c8e2 <USBD_CtlError>
          break;
 800befa:	e000      	b.n	800befe <USBD_StdItfReq+0xc2>
          break;
 800befc:	bf00      	nop
      }
      break;
 800befe:	e004      	b.n	800bf0a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bf00:	6839      	ldr	r1, [r7, #0]
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f000 fced 	bl	800c8e2 <USBD_CtlError>
      break;
 800bf08:	bf00      	nop
  }

  return ret;
 800bf0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3710      	adds	r7, #16
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b084      	sub	sp, #16
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	889b      	ldrh	r3, [r3, #4]
 800bf26:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	781b      	ldrb	r3, [r3, #0]
 800bf2c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bf30:	2b40      	cmp	r3, #64	@ 0x40
 800bf32:	d007      	beq.n	800bf44 <USBD_StdEPReq+0x30>
 800bf34:	2b40      	cmp	r3, #64	@ 0x40
 800bf36:	f200 8181 	bhi.w	800c23c <USBD_StdEPReq+0x328>
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d02a      	beq.n	800bf94 <USBD_StdEPReq+0x80>
 800bf3e:	2b20      	cmp	r3, #32
 800bf40:	f040 817c 	bne.w	800c23c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bf44:	7bbb      	ldrb	r3, [r7, #14]
 800bf46:	4619      	mov	r1, r3
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f7ff fe84 	bl	800bc56 <USBD_CoreFindEP>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf52:	7b7b      	ldrb	r3, [r7, #13]
 800bf54:	2bff      	cmp	r3, #255	@ 0xff
 800bf56:	f000 8176 	beq.w	800c246 <USBD_StdEPReq+0x332>
 800bf5a:	7b7b      	ldrb	r3, [r7, #13]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	f040 8172 	bne.w	800c246 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800bf62:	7b7a      	ldrb	r2, [r7, #13]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bf6a:	7b7a      	ldrb	r2, [r7, #13]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	32ae      	adds	r2, #174	@ 0xae
 800bf70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf74:	689b      	ldr	r3, [r3, #8]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	f000 8165 	beq.w	800c246 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bf7c:	7b7a      	ldrb	r2, [r7, #13]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	32ae      	adds	r2, #174	@ 0xae
 800bf82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf86:	689b      	ldr	r3, [r3, #8]
 800bf88:	6839      	ldr	r1, [r7, #0]
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	4798      	blx	r3
 800bf8e:	4603      	mov	r3, r0
 800bf90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bf92:	e158      	b.n	800c246 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	785b      	ldrb	r3, [r3, #1]
 800bf98:	2b03      	cmp	r3, #3
 800bf9a:	d008      	beq.n	800bfae <USBD_StdEPReq+0x9a>
 800bf9c:	2b03      	cmp	r3, #3
 800bf9e:	f300 8147 	bgt.w	800c230 <USBD_StdEPReq+0x31c>
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	f000 809b 	beq.w	800c0de <USBD_StdEPReq+0x1ca>
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d03c      	beq.n	800c026 <USBD_StdEPReq+0x112>
 800bfac:	e140      	b.n	800c230 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	2b02      	cmp	r3, #2
 800bfb8:	d002      	beq.n	800bfc0 <USBD_StdEPReq+0xac>
 800bfba:	2b03      	cmp	r3, #3
 800bfbc:	d016      	beq.n	800bfec <USBD_StdEPReq+0xd8>
 800bfbe:	e02c      	b.n	800c01a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bfc0:	7bbb      	ldrb	r3, [r7, #14]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d00d      	beq.n	800bfe2 <USBD_StdEPReq+0xce>
 800bfc6:	7bbb      	ldrb	r3, [r7, #14]
 800bfc8:	2b80      	cmp	r3, #128	@ 0x80
 800bfca:	d00a      	beq.n	800bfe2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bfcc:	7bbb      	ldrb	r3, [r7, #14]
 800bfce:	4619      	mov	r1, r3
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f002 fcf7 	bl	800e9c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bfd6:	2180      	movs	r1, #128	@ 0x80
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f002 fcf3 	bl	800e9c4 <USBD_LL_StallEP>
 800bfde:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bfe0:	e020      	b.n	800c024 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bfe2:	6839      	ldr	r1, [r7, #0]
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f000 fc7c 	bl	800c8e2 <USBD_CtlError>
              break;
 800bfea:	e01b      	b.n	800c024 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	885b      	ldrh	r3, [r3, #2]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d10e      	bne.n	800c012 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bff4:	7bbb      	ldrb	r3, [r7, #14]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d00b      	beq.n	800c012 <USBD_StdEPReq+0xfe>
 800bffa:	7bbb      	ldrb	r3, [r7, #14]
 800bffc:	2b80      	cmp	r3, #128	@ 0x80
 800bffe:	d008      	beq.n	800c012 <USBD_StdEPReq+0xfe>
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	88db      	ldrh	r3, [r3, #6]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d104      	bne.n	800c012 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c008:	7bbb      	ldrb	r3, [r7, #14]
 800c00a:	4619      	mov	r1, r3
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f002 fcd9 	bl	800e9c4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f000 fd43 	bl	800ca9e <USBD_CtlSendStatus>

              break;
 800c018:	e004      	b.n	800c024 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c01a:	6839      	ldr	r1, [r7, #0]
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f000 fc60 	bl	800c8e2 <USBD_CtlError>
              break;
 800c022:	bf00      	nop
          }
          break;
 800c024:	e109      	b.n	800c23a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	2b02      	cmp	r3, #2
 800c030:	d002      	beq.n	800c038 <USBD_StdEPReq+0x124>
 800c032:	2b03      	cmp	r3, #3
 800c034:	d016      	beq.n	800c064 <USBD_StdEPReq+0x150>
 800c036:	e04b      	b.n	800c0d0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c038:	7bbb      	ldrb	r3, [r7, #14]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d00d      	beq.n	800c05a <USBD_StdEPReq+0x146>
 800c03e:	7bbb      	ldrb	r3, [r7, #14]
 800c040:	2b80      	cmp	r3, #128	@ 0x80
 800c042:	d00a      	beq.n	800c05a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c044:	7bbb      	ldrb	r3, [r7, #14]
 800c046:	4619      	mov	r1, r3
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f002 fcbb 	bl	800e9c4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c04e:	2180      	movs	r1, #128	@ 0x80
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f002 fcb7 	bl	800e9c4 <USBD_LL_StallEP>
 800c056:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c058:	e040      	b.n	800c0dc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c05a:	6839      	ldr	r1, [r7, #0]
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f000 fc40 	bl	800c8e2 <USBD_CtlError>
              break;
 800c062:	e03b      	b.n	800c0dc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	885b      	ldrh	r3, [r3, #2]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d136      	bne.n	800c0da <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c06c:	7bbb      	ldrb	r3, [r7, #14]
 800c06e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c072:	2b00      	cmp	r3, #0
 800c074:	d004      	beq.n	800c080 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c076:	7bbb      	ldrb	r3, [r7, #14]
 800c078:	4619      	mov	r1, r3
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f002 fcc1 	bl	800ea02 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f000 fd0c 	bl	800ca9e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c086:	7bbb      	ldrb	r3, [r7, #14]
 800c088:	4619      	mov	r1, r3
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f7ff fde3 	bl	800bc56 <USBD_CoreFindEP>
 800c090:	4603      	mov	r3, r0
 800c092:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c094:	7b7b      	ldrb	r3, [r7, #13]
 800c096:	2bff      	cmp	r3, #255	@ 0xff
 800c098:	d01f      	beq.n	800c0da <USBD_StdEPReq+0x1c6>
 800c09a:	7b7b      	ldrb	r3, [r7, #13]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d11c      	bne.n	800c0da <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c0a0:	7b7a      	ldrb	r2, [r7, #13]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c0a8:	7b7a      	ldrb	r2, [r7, #13]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	32ae      	adds	r2, #174	@ 0xae
 800c0ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0b2:	689b      	ldr	r3, [r3, #8]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d010      	beq.n	800c0da <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c0b8:	7b7a      	ldrb	r2, [r7, #13]
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	32ae      	adds	r2, #174	@ 0xae
 800c0be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0c2:	689b      	ldr	r3, [r3, #8]
 800c0c4:	6839      	ldr	r1, [r7, #0]
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	4798      	blx	r3
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c0ce:	e004      	b.n	800c0da <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c0d0:	6839      	ldr	r1, [r7, #0]
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 fc05 	bl	800c8e2 <USBD_CtlError>
              break;
 800c0d8:	e000      	b.n	800c0dc <USBD_StdEPReq+0x1c8>
              break;
 800c0da:	bf00      	nop
          }
          break;
 800c0dc:	e0ad      	b.n	800c23a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0e4:	b2db      	uxtb	r3, r3
 800c0e6:	2b02      	cmp	r3, #2
 800c0e8:	d002      	beq.n	800c0f0 <USBD_StdEPReq+0x1dc>
 800c0ea:	2b03      	cmp	r3, #3
 800c0ec:	d033      	beq.n	800c156 <USBD_StdEPReq+0x242>
 800c0ee:	e099      	b.n	800c224 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0f0:	7bbb      	ldrb	r3, [r7, #14]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d007      	beq.n	800c106 <USBD_StdEPReq+0x1f2>
 800c0f6:	7bbb      	ldrb	r3, [r7, #14]
 800c0f8:	2b80      	cmp	r3, #128	@ 0x80
 800c0fa:	d004      	beq.n	800c106 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c0fc:	6839      	ldr	r1, [r7, #0]
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f000 fbef 	bl	800c8e2 <USBD_CtlError>
                break;
 800c104:	e093      	b.n	800c22e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c106:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	da0b      	bge.n	800c126 <USBD_StdEPReq+0x212>
 800c10e:	7bbb      	ldrb	r3, [r7, #14]
 800c110:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c114:	4613      	mov	r3, r2
 800c116:	009b      	lsls	r3, r3, #2
 800c118:	4413      	add	r3, r2
 800c11a:	009b      	lsls	r3, r3, #2
 800c11c:	3310      	adds	r3, #16
 800c11e:	687a      	ldr	r2, [r7, #4]
 800c120:	4413      	add	r3, r2
 800c122:	3304      	adds	r3, #4
 800c124:	e00b      	b.n	800c13e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c126:	7bbb      	ldrb	r3, [r7, #14]
 800c128:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c12c:	4613      	mov	r3, r2
 800c12e:	009b      	lsls	r3, r3, #2
 800c130:	4413      	add	r3, r2
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c138:	687a      	ldr	r2, [r7, #4]
 800c13a:	4413      	add	r3, r2
 800c13c:	3304      	adds	r3, #4
 800c13e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	2200      	movs	r2, #0
 800c144:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	330e      	adds	r3, #14
 800c14a:	2202      	movs	r2, #2
 800c14c:	4619      	mov	r1, r3
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 fc44 	bl	800c9dc <USBD_CtlSendData>
              break;
 800c154:	e06b      	b.n	800c22e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c156:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	da11      	bge.n	800c182 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c15e:	7bbb      	ldrb	r3, [r7, #14]
 800c160:	f003 020f 	and.w	r2, r3, #15
 800c164:	6879      	ldr	r1, [r7, #4]
 800c166:	4613      	mov	r3, r2
 800c168:	009b      	lsls	r3, r3, #2
 800c16a:	4413      	add	r3, r2
 800c16c:	009b      	lsls	r3, r3, #2
 800c16e:	440b      	add	r3, r1
 800c170:	3323      	adds	r3, #35	@ 0x23
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d117      	bne.n	800c1a8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c178:	6839      	ldr	r1, [r7, #0]
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 fbb1 	bl	800c8e2 <USBD_CtlError>
                  break;
 800c180:	e055      	b.n	800c22e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c182:	7bbb      	ldrb	r3, [r7, #14]
 800c184:	f003 020f 	and.w	r2, r3, #15
 800c188:	6879      	ldr	r1, [r7, #4]
 800c18a:	4613      	mov	r3, r2
 800c18c:	009b      	lsls	r3, r3, #2
 800c18e:	4413      	add	r3, r2
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	440b      	add	r3, r1
 800c194:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800c198:	781b      	ldrb	r3, [r3, #0]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d104      	bne.n	800c1a8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c19e:	6839      	ldr	r1, [r7, #0]
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f000 fb9e 	bl	800c8e2 <USBD_CtlError>
                  break;
 800c1a6:	e042      	b.n	800c22e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	da0b      	bge.n	800c1c8 <USBD_StdEPReq+0x2b4>
 800c1b0:	7bbb      	ldrb	r3, [r7, #14]
 800c1b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c1b6:	4613      	mov	r3, r2
 800c1b8:	009b      	lsls	r3, r3, #2
 800c1ba:	4413      	add	r3, r2
 800c1bc:	009b      	lsls	r3, r3, #2
 800c1be:	3310      	adds	r3, #16
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	4413      	add	r3, r2
 800c1c4:	3304      	adds	r3, #4
 800c1c6:	e00b      	b.n	800c1e0 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c1c8:	7bbb      	ldrb	r3, [r7, #14]
 800c1ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1ce:	4613      	mov	r3, r2
 800c1d0:	009b      	lsls	r3, r3, #2
 800c1d2:	4413      	add	r3, r2
 800c1d4:	009b      	lsls	r3, r3, #2
 800c1d6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	4413      	add	r3, r2
 800c1de:	3304      	adds	r3, #4
 800c1e0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c1e2:	7bbb      	ldrb	r3, [r7, #14]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d002      	beq.n	800c1ee <USBD_StdEPReq+0x2da>
 800c1e8:	7bbb      	ldrb	r3, [r7, #14]
 800c1ea:	2b80      	cmp	r3, #128	@ 0x80
 800c1ec:	d103      	bne.n	800c1f6 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	739a      	strb	r2, [r3, #14]
 800c1f4:	e00e      	b.n	800c214 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c1f6:	7bbb      	ldrb	r3, [r7, #14]
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f002 fc20 	bl	800ea40 <USBD_LL_IsStallEP>
 800c200:	4603      	mov	r3, r0
 800c202:	2b00      	cmp	r3, #0
 800c204:	d003      	beq.n	800c20e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	2201      	movs	r2, #1
 800c20a:	739a      	strb	r2, [r3, #14]
 800c20c:	e002      	b.n	800c214 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	2200      	movs	r2, #0
 800c212:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	330e      	adds	r3, #14
 800c218:	2202      	movs	r2, #2
 800c21a:	4619      	mov	r1, r3
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 fbdd 	bl	800c9dc <USBD_CtlSendData>
              break;
 800c222:	e004      	b.n	800c22e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800c224:	6839      	ldr	r1, [r7, #0]
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f000 fb5b 	bl	800c8e2 <USBD_CtlError>
              break;
 800c22c:	bf00      	nop
          }
          break;
 800c22e:	e004      	b.n	800c23a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800c230:	6839      	ldr	r1, [r7, #0]
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 fb55 	bl	800c8e2 <USBD_CtlError>
          break;
 800c238:	bf00      	nop
      }
      break;
 800c23a:	e005      	b.n	800c248 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800c23c:	6839      	ldr	r1, [r7, #0]
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f000 fb4f 	bl	800c8e2 <USBD_CtlError>
      break;
 800c244:	e000      	b.n	800c248 <USBD_StdEPReq+0x334>
      break;
 800c246:	bf00      	nop
  }

  return ret;
 800c248:	7bfb      	ldrb	r3, [r7, #15]
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3710      	adds	r7, #16
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}
	...

0800c254 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c25e:	2300      	movs	r3, #0
 800c260:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c262:	2300      	movs	r3, #0
 800c264:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c266:	2300      	movs	r3, #0
 800c268:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	885b      	ldrh	r3, [r3, #2]
 800c26e:	0a1b      	lsrs	r3, r3, #8
 800c270:	b29b      	uxth	r3, r3
 800c272:	3b01      	subs	r3, #1
 800c274:	2b06      	cmp	r3, #6
 800c276:	f200 8128 	bhi.w	800c4ca <USBD_GetDescriptor+0x276>
 800c27a:	a201      	add	r2, pc, #4	@ (adr r2, 800c280 <USBD_GetDescriptor+0x2c>)
 800c27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c280:	0800c29d 	.word	0x0800c29d
 800c284:	0800c2b5 	.word	0x0800c2b5
 800c288:	0800c2f5 	.word	0x0800c2f5
 800c28c:	0800c4cb 	.word	0x0800c4cb
 800c290:	0800c4cb 	.word	0x0800c4cb
 800c294:	0800c46b 	.word	0x0800c46b
 800c298:	0800c497 	.word	0x0800c497
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	687a      	ldr	r2, [r7, #4]
 800c2a6:	7c12      	ldrb	r2, [r2, #16]
 800c2a8:	f107 0108 	add.w	r1, r7, #8
 800c2ac:	4610      	mov	r0, r2
 800c2ae:	4798      	blx	r3
 800c2b0:	60f8      	str	r0, [r7, #12]
      break;
 800c2b2:	e112      	b.n	800c4da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	7c1b      	ldrb	r3, [r3, #16]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d10d      	bne.n	800c2d8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2c4:	f107 0208 	add.w	r2, r7, #8
 800c2c8:	4610      	mov	r0, r2
 800c2ca:	4798      	blx	r3
 800c2cc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	3301      	adds	r3, #1
 800c2d2:	2202      	movs	r2, #2
 800c2d4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c2d6:	e100      	b.n	800c4da <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2e0:	f107 0208 	add.w	r2, r7, #8
 800c2e4:	4610      	mov	r0, r2
 800c2e6:	4798      	blx	r3
 800c2e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	2202      	movs	r2, #2
 800c2f0:	701a      	strb	r2, [r3, #0]
      break;
 800c2f2:	e0f2      	b.n	800c4da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	885b      	ldrh	r3, [r3, #2]
 800c2f8:	b2db      	uxtb	r3, r3
 800c2fa:	2b05      	cmp	r3, #5
 800c2fc:	f200 80ac 	bhi.w	800c458 <USBD_GetDescriptor+0x204>
 800c300:	a201      	add	r2, pc, #4	@ (adr r2, 800c308 <USBD_GetDescriptor+0xb4>)
 800c302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c306:	bf00      	nop
 800c308:	0800c321 	.word	0x0800c321
 800c30c:	0800c355 	.word	0x0800c355
 800c310:	0800c389 	.word	0x0800c389
 800c314:	0800c3bd 	.word	0x0800c3bd
 800c318:	0800c3f1 	.word	0x0800c3f1
 800c31c:	0800c425 	.word	0x0800c425
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c326:	685b      	ldr	r3, [r3, #4]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d00b      	beq.n	800c344 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c332:	685b      	ldr	r3, [r3, #4]
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	7c12      	ldrb	r2, [r2, #16]
 800c338:	f107 0108 	add.w	r1, r7, #8
 800c33c:	4610      	mov	r0, r2
 800c33e:	4798      	blx	r3
 800c340:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c342:	e091      	b.n	800c468 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c344:	6839      	ldr	r1, [r7, #0]
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 facb 	bl	800c8e2 <USBD_CtlError>
            err++;
 800c34c:	7afb      	ldrb	r3, [r7, #11]
 800c34e:	3301      	adds	r3, #1
 800c350:	72fb      	strb	r3, [r7, #11]
          break;
 800c352:	e089      	b.n	800c468 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c35a:	689b      	ldr	r3, [r3, #8]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d00b      	beq.n	800c378 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c366:	689b      	ldr	r3, [r3, #8]
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	7c12      	ldrb	r2, [r2, #16]
 800c36c:	f107 0108 	add.w	r1, r7, #8
 800c370:	4610      	mov	r0, r2
 800c372:	4798      	blx	r3
 800c374:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c376:	e077      	b.n	800c468 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c378:	6839      	ldr	r1, [r7, #0]
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f000 fab1 	bl	800c8e2 <USBD_CtlError>
            err++;
 800c380:	7afb      	ldrb	r3, [r7, #11]
 800c382:	3301      	adds	r3, #1
 800c384:	72fb      	strb	r3, [r7, #11]
          break;
 800c386:	e06f      	b.n	800c468 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c38e:	68db      	ldr	r3, [r3, #12]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d00b      	beq.n	800c3ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c39a:	68db      	ldr	r3, [r3, #12]
 800c39c:	687a      	ldr	r2, [r7, #4]
 800c39e:	7c12      	ldrb	r2, [r2, #16]
 800c3a0:	f107 0108 	add.w	r1, r7, #8
 800c3a4:	4610      	mov	r0, r2
 800c3a6:	4798      	blx	r3
 800c3a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3aa:	e05d      	b.n	800c468 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3ac:	6839      	ldr	r1, [r7, #0]
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f000 fa97 	bl	800c8e2 <USBD_CtlError>
            err++;
 800c3b4:	7afb      	ldrb	r3, [r7, #11]
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	72fb      	strb	r3, [r7, #11]
          break;
 800c3ba:	e055      	b.n	800c468 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3c2:	691b      	ldr	r3, [r3, #16]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d00b      	beq.n	800c3e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3ce:	691b      	ldr	r3, [r3, #16]
 800c3d0:	687a      	ldr	r2, [r7, #4]
 800c3d2:	7c12      	ldrb	r2, [r2, #16]
 800c3d4:	f107 0108 	add.w	r1, r7, #8
 800c3d8:	4610      	mov	r0, r2
 800c3da:	4798      	blx	r3
 800c3dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3de:	e043      	b.n	800c468 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3e0:	6839      	ldr	r1, [r7, #0]
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f000 fa7d 	bl	800c8e2 <USBD_CtlError>
            err++;
 800c3e8:	7afb      	ldrb	r3, [r7, #11]
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	72fb      	strb	r3, [r7, #11]
          break;
 800c3ee:	e03b      	b.n	800c468 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3f6:	695b      	ldr	r3, [r3, #20]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d00b      	beq.n	800c414 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c402:	695b      	ldr	r3, [r3, #20]
 800c404:	687a      	ldr	r2, [r7, #4]
 800c406:	7c12      	ldrb	r2, [r2, #16]
 800c408:	f107 0108 	add.w	r1, r7, #8
 800c40c:	4610      	mov	r0, r2
 800c40e:	4798      	blx	r3
 800c410:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c412:	e029      	b.n	800c468 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c414:	6839      	ldr	r1, [r7, #0]
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f000 fa63 	bl	800c8e2 <USBD_CtlError>
            err++;
 800c41c:	7afb      	ldrb	r3, [r7, #11]
 800c41e:	3301      	adds	r3, #1
 800c420:	72fb      	strb	r3, [r7, #11]
          break;
 800c422:	e021      	b.n	800c468 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c42a:	699b      	ldr	r3, [r3, #24]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d00b      	beq.n	800c448 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c436:	699b      	ldr	r3, [r3, #24]
 800c438:	687a      	ldr	r2, [r7, #4]
 800c43a:	7c12      	ldrb	r2, [r2, #16]
 800c43c:	f107 0108 	add.w	r1, r7, #8
 800c440:	4610      	mov	r0, r2
 800c442:	4798      	blx	r3
 800c444:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c446:	e00f      	b.n	800c468 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c448:	6839      	ldr	r1, [r7, #0]
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f000 fa49 	bl	800c8e2 <USBD_CtlError>
            err++;
 800c450:	7afb      	ldrb	r3, [r7, #11]
 800c452:	3301      	adds	r3, #1
 800c454:	72fb      	strb	r3, [r7, #11]
          break;
 800c456:	e007      	b.n	800c468 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c458:	6839      	ldr	r1, [r7, #0]
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f000 fa41 	bl	800c8e2 <USBD_CtlError>
          err++;
 800c460:	7afb      	ldrb	r3, [r7, #11]
 800c462:	3301      	adds	r3, #1
 800c464:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c466:	bf00      	nop
      }
      break;
 800c468:	e037      	b.n	800c4da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	7c1b      	ldrb	r3, [r3, #16]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d109      	bne.n	800c486 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c47a:	f107 0208 	add.w	r2, r7, #8
 800c47e:	4610      	mov	r0, r2
 800c480:	4798      	blx	r3
 800c482:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c484:	e029      	b.n	800c4da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c486:	6839      	ldr	r1, [r7, #0]
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f000 fa2a 	bl	800c8e2 <USBD_CtlError>
        err++;
 800c48e:	7afb      	ldrb	r3, [r7, #11]
 800c490:	3301      	adds	r3, #1
 800c492:	72fb      	strb	r3, [r7, #11]
      break;
 800c494:	e021      	b.n	800c4da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	7c1b      	ldrb	r3, [r3, #16]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d10d      	bne.n	800c4ba <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4a6:	f107 0208 	add.w	r2, r7, #8
 800c4aa:	4610      	mov	r0, r2
 800c4ac:	4798      	blx	r3
 800c4ae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	3301      	adds	r3, #1
 800c4b4:	2207      	movs	r2, #7
 800c4b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c4b8:	e00f      	b.n	800c4da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c4ba:	6839      	ldr	r1, [r7, #0]
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f000 fa10 	bl	800c8e2 <USBD_CtlError>
        err++;
 800c4c2:	7afb      	ldrb	r3, [r7, #11]
 800c4c4:	3301      	adds	r3, #1
 800c4c6:	72fb      	strb	r3, [r7, #11]
      break;
 800c4c8:	e007      	b.n	800c4da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c4ca:	6839      	ldr	r1, [r7, #0]
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f000 fa08 	bl	800c8e2 <USBD_CtlError>
      err++;
 800c4d2:	7afb      	ldrb	r3, [r7, #11]
 800c4d4:	3301      	adds	r3, #1
 800c4d6:	72fb      	strb	r3, [r7, #11]
      break;
 800c4d8:	bf00      	nop
  }

  if (err != 0U)
 800c4da:	7afb      	ldrb	r3, [r7, #11]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d11e      	bne.n	800c51e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	88db      	ldrh	r3, [r3, #6]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d016      	beq.n	800c516 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c4e8:	893b      	ldrh	r3, [r7, #8]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d00e      	beq.n	800c50c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	88da      	ldrh	r2, [r3, #6]
 800c4f2:	893b      	ldrh	r3, [r7, #8]
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	bf28      	it	cs
 800c4f8:	4613      	movcs	r3, r2
 800c4fa:	b29b      	uxth	r3, r3
 800c4fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c4fe:	893b      	ldrh	r3, [r7, #8]
 800c500:	461a      	mov	r2, r3
 800c502:	68f9      	ldr	r1, [r7, #12]
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f000 fa69 	bl	800c9dc <USBD_CtlSendData>
 800c50a:	e009      	b.n	800c520 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c50c:	6839      	ldr	r1, [r7, #0]
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 f9e7 	bl	800c8e2 <USBD_CtlError>
 800c514:	e004      	b.n	800c520 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f000 fac1 	bl	800ca9e <USBD_CtlSendStatus>
 800c51c:	e000      	b.n	800c520 <USBD_GetDescriptor+0x2cc>
    return;
 800c51e:	bf00      	nop
  }
}
 800c520:	3710      	adds	r7, #16
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop

0800c528 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b084      	sub	sp, #16
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	889b      	ldrh	r3, [r3, #4]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d131      	bne.n	800c59e <USBD_SetAddress+0x76>
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	88db      	ldrh	r3, [r3, #6]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d12d      	bne.n	800c59e <USBD_SetAddress+0x76>
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	885b      	ldrh	r3, [r3, #2]
 800c546:	2b7f      	cmp	r3, #127	@ 0x7f
 800c548:	d829      	bhi.n	800c59e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	885b      	ldrh	r3, [r3, #2]
 800c54e:	b2db      	uxtb	r3, r3
 800c550:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c554:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c55c:	b2db      	uxtb	r3, r3
 800c55e:	2b03      	cmp	r3, #3
 800c560:	d104      	bne.n	800c56c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c562:	6839      	ldr	r1, [r7, #0]
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f000 f9bc 	bl	800c8e2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c56a:	e01d      	b.n	800c5a8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	7bfa      	ldrb	r2, [r7, #15]
 800c570:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c574:	7bfb      	ldrb	r3, [r7, #15]
 800c576:	4619      	mov	r1, r3
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f002 fa8d 	bl	800ea98 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f000 fa8d 	bl	800ca9e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c584:	7bfb      	ldrb	r3, [r7, #15]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d004      	beq.n	800c594 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2202      	movs	r2, #2
 800c58e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c592:	e009      	b.n	800c5a8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2201      	movs	r2, #1
 800c598:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c59c:	e004      	b.n	800c5a8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c59e:	6839      	ldr	r1, [r7, #0]
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 f99e 	bl	800c8e2 <USBD_CtlError>
  }
}
 800c5a6:	bf00      	nop
 800c5a8:	bf00      	nop
 800c5aa:	3710      	adds	r7, #16
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b084      	sub	sp, #16
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	885b      	ldrh	r3, [r3, #2]
 800c5c2:	b2da      	uxtb	r2, r3
 800c5c4:	4b4e      	ldr	r3, [pc, #312]	@ (800c700 <USBD_SetConfig+0x150>)
 800c5c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c5c8:	4b4d      	ldr	r3, [pc, #308]	@ (800c700 <USBD_SetConfig+0x150>)
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d905      	bls.n	800c5dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c5d0:	6839      	ldr	r1, [r7, #0]
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f000 f985 	bl	800c8e2 <USBD_CtlError>
    return USBD_FAIL;
 800c5d8:	2303      	movs	r3, #3
 800c5da:	e08c      	b.n	800c6f6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5e2:	b2db      	uxtb	r3, r3
 800c5e4:	2b02      	cmp	r3, #2
 800c5e6:	d002      	beq.n	800c5ee <USBD_SetConfig+0x3e>
 800c5e8:	2b03      	cmp	r3, #3
 800c5ea:	d029      	beq.n	800c640 <USBD_SetConfig+0x90>
 800c5ec:	e075      	b.n	800c6da <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c5ee:	4b44      	ldr	r3, [pc, #272]	@ (800c700 <USBD_SetConfig+0x150>)
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d020      	beq.n	800c638 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c5f6:	4b42      	ldr	r3, [pc, #264]	@ (800c700 <USBD_SetConfig+0x150>)
 800c5f8:	781b      	ldrb	r3, [r3, #0]
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c600:	4b3f      	ldr	r3, [pc, #252]	@ (800c700 <USBD_SetConfig+0x150>)
 800c602:	781b      	ldrb	r3, [r3, #0]
 800c604:	4619      	mov	r1, r3
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f7fe ffcd 	bl	800b5a6 <USBD_SetClassConfig>
 800c60c:	4603      	mov	r3, r0
 800c60e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c610:	7bfb      	ldrb	r3, [r7, #15]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d008      	beq.n	800c628 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c616:	6839      	ldr	r1, [r7, #0]
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f000 f962 	bl	800c8e2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2202      	movs	r2, #2
 800c622:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c626:	e065      	b.n	800c6f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f000 fa38 	bl	800ca9e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2203      	movs	r2, #3
 800c632:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c636:	e05d      	b.n	800c6f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f000 fa30 	bl	800ca9e <USBD_CtlSendStatus>
      break;
 800c63e:	e059      	b.n	800c6f4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c640:	4b2f      	ldr	r3, [pc, #188]	@ (800c700 <USBD_SetConfig+0x150>)
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d112      	bne.n	800c66e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2202      	movs	r2, #2
 800c64c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c650:	4b2b      	ldr	r3, [pc, #172]	@ (800c700 <USBD_SetConfig+0x150>)
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	461a      	mov	r2, r3
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c65a:	4b29      	ldr	r3, [pc, #164]	@ (800c700 <USBD_SetConfig+0x150>)
 800c65c:	781b      	ldrb	r3, [r3, #0]
 800c65e:	4619      	mov	r1, r3
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f7fe ffbc 	bl	800b5de <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f000 fa19 	bl	800ca9e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c66c:	e042      	b.n	800c6f4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c66e:	4b24      	ldr	r3, [pc, #144]	@ (800c700 <USBD_SetConfig+0x150>)
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	461a      	mov	r2, r3
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	429a      	cmp	r2, r3
 800c67a:	d02a      	beq.n	800c6d2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	685b      	ldr	r3, [r3, #4]
 800c680:	b2db      	uxtb	r3, r3
 800c682:	4619      	mov	r1, r3
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f7fe ffaa 	bl	800b5de <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c68a:	4b1d      	ldr	r3, [pc, #116]	@ (800c700 <USBD_SetConfig+0x150>)
 800c68c:	781b      	ldrb	r3, [r3, #0]
 800c68e:	461a      	mov	r2, r3
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c694:	4b1a      	ldr	r3, [pc, #104]	@ (800c700 <USBD_SetConfig+0x150>)
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	4619      	mov	r1, r3
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f7fe ff83 	bl	800b5a6 <USBD_SetClassConfig>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c6a4:	7bfb      	ldrb	r3, [r7, #15]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d00f      	beq.n	800c6ca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c6aa:	6839      	ldr	r1, [r7, #0]
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f000 f918 	bl	800c8e2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	685b      	ldr	r3, [r3, #4]
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	4619      	mov	r1, r3
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f7fe ff8f 	bl	800b5de <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2202      	movs	r2, #2
 800c6c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c6c8:	e014      	b.n	800c6f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f000 f9e7 	bl	800ca9e <USBD_CtlSendStatus>
      break;
 800c6d0:	e010      	b.n	800c6f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f000 f9e3 	bl	800ca9e <USBD_CtlSendStatus>
      break;
 800c6d8:	e00c      	b.n	800c6f4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c6da:	6839      	ldr	r1, [r7, #0]
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f000 f900 	bl	800c8e2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c6e2:	4b07      	ldr	r3, [pc, #28]	@ (800c700 <USBD_SetConfig+0x150>)
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	4619      	mov	r1, r3
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f7fe ff78 	bl	800b5de <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c6ee:	2303      	movs	r3, #3
 800c6f0:	73fb      	strb	r3, [r7, #15]
      break;
 800c6f2:	bf00      	nop
  }

  return ret;
 800c6f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3710      	adds	r7, #16
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	20000af8 	.word	0x20000af8

0800c704 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b082      	sub	sp, #8
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	88db      	ldrh	r3, [r3, #6]
 800c712:	2b01      	cmp	r3, #1
 800c714:	d004      	beq.n	800c720 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c716:	6839      	ldr	r1, [r7, #0]
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f000 f8e2 	bl	800c8e2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c71e:	e023      	b.n	800c768 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c726:	b2db      	uxtb	r3, r3
 800c728:	2b02      	cmp	r3, #2
 800c72a:	dc02      	bgt.n	800c732 <USBD_GetConfig+0x2e>
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	dc03      	bgt.n	800c738 <USBD_GetConfig+0x34>
 800c730:	e015      	b.n	800c75e <USBD_GetConfig+0x5a>
 800c732:	2b03      	cmp	r3, #3
 800c734:	d00b      	beq.n	800c74e <USBD_GetConfig+0x4a>
 800c736:	e012      	b.n	800c75e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2200      	movs	r2, #0
 800c73c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	3308      	adds	r3, #8
 800c742:	2201      	movs	r2, #1
 800c744:	4619      	mov	r1, r3
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 f948 	bl	800c9dc <USBD_CtlSendData>
        break;
 800c74c:	e00c      	b.n	800c768 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	3304      	adds	r3, #4
 800c752:	2201      	movs	r2, #1
 800c754:	4619      	mov	r1, r3
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 f940 	bl	800c9dc <USBD_CtlSendData>
        break;
 800c75c:	e004      	b.n	800c768 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c75e:	6839      	ldr	r1, [r7, #0]
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f000 f8be 	bl	800c8e2 <USBD_CtlError>
        break;
 800c766:	bf00      	nop
}
 800c768:	bf00      	nop
 800c76a:	3708      	adds	r7, #8
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}

0800c770 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b082      	sub	sp, #8
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c780:	b2db      	uxtb	r3, r3
 800c782:	3b01      	subs	r3, #1
 800c784:	2b02      	cmp	r3, #2
 800c786:	d81e      	bhi.n	800c7c6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	88db      	ldrh	r3, [r3, #6]
 800c78c:	2b02      	cmp	r3, #2
 800c78e:	d004      	beq.n	800c79a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c790:	6839      	ldr	r1, [r7, #0]
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f000 f8a5 	bl	800c8e2 <USBD_CtlError>
        break;
 800c798:	e01a      	b.n	800c7d0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2201      	movs	r2, #1
 800c79e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d005      	beq.n	800c7b6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	68db      	ldr	r3, [r3, #12]
 800c7ae:	f043 0202 	orr.w	r2, r3, #2
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	330c      	adds	r3, #12
 800c7ba:	2202      	movs	r2, #2
 800c7bc:	4619      	mov	r1, r3
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f000 f90c 	bl	800c9dc <USBD_CtlSendData>
      break;
 800c7c4:	e004      	b.n	800c7d0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c7c6:	6839      	ldr	r1, [r7, #0]
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f000 f88a 	bl	800c8e2 <USBD_CtlError>
      break;
 800c7ce:	bf00      	nop
  }
}
 800c7d0:	bf00      	nop
 800c7d2:	3708      	adds	r7, #8
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}

0800c7d8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b082      	sub	sp, #8
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	885b      	ldrh	r3, [r3, #2]
 800c7e6:	2b01      	cmp	r3, #1
 800c7e8:	d107      	bne.n	800c7fa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2201      	movs	r2, #1
 800c7ee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f000 f953 	bl	800ca9e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c7f8:	e013      	b.n	800c822 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	885b      	ldrh	r3, [r3, #2]
 800c7fe:	2b02      	cmp	r3, #2
 800c800:	d10b      	bne.n	800c81a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	889b      	ldrh	r3, [r3, #4]
 800c806:	0a1b      	lsrs	r3, r3, #8
 800c808:	b29b      	uxth	r3, r3
 800c80a:	b2da      	uxtb	r2, r3
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 f943 	bl	800ca9e <USBD_CtlSendStatus>
}
 800c818:	e003      	b.n	800c822 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c81a:	6839      	ldr	r1, [r7, #0]
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f000 f860 	bl	800c8e2 <USBD_CtlError>
}
 800c822:	bf00      	nop
 800c824:	3708      	adds	r7, #8
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}

0800c82a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c82a:	b580      	push	{r7, lr}
 800c82c:	b082      	sub	sp, #8
 800c82e:	af00      	add	r7, sp, #0
 800c830:	6078      	str	r0, [r7, #4]
 800c832:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c83a:	b2db      	uxtb	r3, r3
 800c83c:	3b01      	subs	r3, #1
 800c83e:	2b02      	cmp	r3, #2
 800c840:	d80b      	bhi.n	800c85a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	885b      	ldrh	r3, [r3, #2]
 800c846:	2b01      	cmp	r3, #1
 800c848:	d10c      	bne.n	800c864 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2200      	movs	r2, #0
 800c84e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 f923 	bl	800ca9e <USBD_CtlSendStatus>
      }
      break;
 800c858:	e004      	b.n	800c864 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c85a:	6839      	ldr	r1, [r7, #0]
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f000 f840 	bl	800c8e2 <USBD_CtlError>
      break;
 800c862:	e000      	b.n	800c866 <USBD_ClrFeature+0x3c>
      break;
 800c864:	bf00      	nop
  }
}
 800c866:	bf00      	nop
 800c868:	3708      	adds	r7, #8
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}

0800c86e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c86e:	b580      	push	{r7, lr}
 800c870:	b084      	sub	sp, #16
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
 800c876:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	781a      	ldrb	r2, [r3, #0]
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	3301      	adds	r3, #1
 800c888:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	781a      	ldrb	r2, [r3, #0]
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	3301      	adds	r3, #1
 800c896:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c898:	68f8      	ldr	r0, [r7, #12]
 800c89a:	f7ff fa3d 	bl	800bd18 <SWAPBYTE>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	461a      	mov	r2, r3
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	3301      	adds	r3, #1
 800c8aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c8b2:	68f8      	ldr	r0, [r7, #12]
 800c8b4:	f7ff fa30 	bl	800bd18 <SWAPBYTE>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c8cc:	68f8      	ldr	r0, [r7, #12]
 800c8ce:	f7ff fa23 	bl	800bd18 <SWAPBYTE>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	461a      	mov	r2, r3
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	80da      	strh	r2, [r3, #6]
}
 800c8da:	bf00      	nop
 800c8dc:	3710      	adds	r7, #16
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}

0800c8e2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8e2:	b580      	push	{r7, lr}
 800c8e4:	b082      	sub	sp, #8
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6078      	str	r0, [r7, #4]
 800c8ea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c8ec:	2180      	movs	r1, #128	@ 0x80
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f002 f868 	bl	800e9c4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c8f4:	2100      	movs	r1, #0
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f002 f864 	bl	800e9c4 <USBD_LL_StallEP>
}
 800c8fc:	bf00      	nop
 800c8fe:	3708      	adds	r7, #8
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}

0800c904 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b086      	sub	sp, #24
 800c908:	af00      	add	r7, sp, #0
 800c90a:	60f8      	str	r0, [r7, #12]
 800c90c:	60b9      	str	r1, [r7, #8]
 800c90e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c910:	2300      	movs	r3, #0
 800c912:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d042      	beq.n	800c9a0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c91e:	6938      	ldr	r0, [r7, #16]
 800c920:	f000 f842 	bl	800c9a8 <USBD_GetLen>
 800c924:	4603      	mov	r3, r0
 800c926:	3301      	adds	r3, #1
 800c928:	005b      	lsls	r3, r3, #1
 800c92a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c92e:	d808      	bhi.n	800c942 <USBD_GetString+0x3e>
 800c930:	6938      	ldr	r0, [r7, #16]
 800c932:	f000 f839 	bl	800c9a8 <USBD_GetLen>
 800c936:	4603      	mov	r3, r0
 800c938:	3301      	adds	r3, #1
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	005b      	lsls	r3, r3, #1
 800c93e:	b29a      	uxth	r2, r3
 800c940:	e001      	b.n	800c946 <USBD_GetString+0x42>
 800c942:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c94a:	7dfb      	ldrb	r3, [r7, #23]
 800c94c:	68ba      	ldr	r2, [r7, #8]
 800c94e:	4413      	add	r3, r2
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	7812      	ldrb	r2, [r2, #0]
 800c954:	701a      	strb	r2, [r3, #0]
  idx++;
 800c956:	7dfb      	ldrb	r3, [r7, #23]
 800c958:	3301      	adds	r3, #1
 800c95a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c95c:	7dfb      	ldrb	r3, [r7, #23]
 800c95e:	68ba      	ldr	r2, [r7, #8]
 800c960:	4413      	add	r3, r2
 800c962:	2203      	movs	r2, #3
 800c964:	701a      	strb	r2, [r3, #0]
  idx++;
 800c966:	7dfb      	ldrb	r3, [r7, #23]
 800c968:	3301      	adds	r3, #1
 800c96a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c96c:	e013      	b.n	800c996 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c96e:	7dfb      	ldrb	r3, [r7, #23]
 800c970:	68ba      	ldr	r2, [r7, #8]
 800c972:	4413      	add	r3, r2
 800c974:	693a      	ldr	r2, [r7, #16]
 800c976:	7812      	ldrb	r2, [r2, #0]
 800c978:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	3301      	adds	r3, #1
 800c97e:	613b      	str	r3, [r7, #16]
    idx++;
 800c980:	7dfb      	ldrb	r3, [r7, #23]
 800c982:	3301      	adds	r3, #1
 800c984:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c986:	7dfb      	ldrb	r3, [r7, #23]
 800c988:	68ba      	ldr	r2, [r7, #8]
 800c98a:	4413      	add	r3, r2
 800c98c:	2200      	movs	r2, #0
 800c98e:	701a      	strb	r2, [r3, #0]
    idx++;
 800c990:	7dfb      	ldrb	r3, [r7, #23]
 800c992:	3301      	adds	r3, #1
 800c994:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	781b      	ldrb	r3, [r3, #0]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d1e7      	bne.n	800c96e <USBD_GetString+0x6a>
 800c99e:	e000      	b.n	800c9a2 <USBD_GetString+0x9e>
    return;
 800c9a0:	bf00      	nop
  }
}
 800c9a2:	3718      	adds	r7, #24
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}

0800c9a8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b085      	sub	sp, #20
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c9b8:	e005      	b.n	800c9c6 <USBD_GetLen+0x1e>
  {
    len++;
 800c9ba:	7bfb      	ldrb	r3, [r7, #15]
 800c9bc:	3301      	adds	r3, #1
 800c9be:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	3301      	adds	r3, #1
 800c9c4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d1f5      	bne.n	800c9ba <USBD_GetLen+0x12>
  }

  return len;
 800c9ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3714      	adds	r7, #20
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr

0800c9dc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b084      	sub	sp, #16
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	60f8      	str	r0, [r7, #12]
 800c9e4:	60b9      	str	r1, [r7, #8]
 800c9e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	2202      	movs	r2, #2
 800c9ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	687a      	ldr	r2, [r7, #4]
 800c9f4:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	68ba      	ldr	r2, [r7, #8]
 800c9fa:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	687a      	ldr	r2, [r7, #4]
 800ca00:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	68ba      	ldr	r2, [r7, #8]
 800ca06:	2100      	movs	r1, #0
 800ca08:	68f8      	ldr	r0, [r7, #12]
 800ca0a:	f002 f864 	bl	800ead6 <USBD_LL_Transmit>

  return USBD_OK;
 800ca0e:	2300      	movs	r3, #0
}
 800ca10:	4618      	mov	r0, r3
 800ca12:	3710      	adds	r7, #16
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}

0800ca18 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b084      	sub	sp, #16
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	60f8      	str	r0, [r7, #12]
 800ca20:	60b9      	str	r1, [r7, #8]
 800ca22:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	68ba      	ldr	r2, [r7, #8]
 800ca28:	2100      	movs	r1, #0
 800ca2a:	68f8      	ldr	r0, [r7, #12]
 800ca2c:	f002 f853 	bl	800ead6 <USBD_LL_Transmit>

  return USBD_OK;
 800ca30:	2300      	movs	r3, #0
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3710      	adds	r7, #16
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}

0800ca3a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ca3a:	b580      	push	{r7, lr}
 800ca3c:	b084      	sub	sp, #16
 800ca3e:	af00      	add	r7, sp, #0
 800ca40:	60f8      	str	r0, [r7, #12]
 800ca42:	60b9      	str	r1, [r7, #8]
 800ca44:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	2203      	movs	r2, #3
 800ca4a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	687a      	ldr	r2, [r7, #4]
 800ca52:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	68ba      	ldr	r2, [r7, #8]
 800ca5a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	687a      	ldr	r2, [r7, #4]
 800ca62:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	68ba      	ldr	r2, [r7, #8]
 800ca6a:	2100      	movs	r1, #0
 800ca6c:	68f8      	ldr	r0, [r7, #12]
 800ca6e:	f002 f853 	bl	800eb18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca72:	2300      	movs	r3, #0
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3710      	adds	r7, #16
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b084      	sub	sp, #16
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	60f8      	str	r0, [r7, #12]
 800ca84:	60b9      	str	r1, [r7, #8]
 800ca86:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	68ba      	ldr	r2, [r7, #8]
 800ca8c:	2100      	movs	r1, #0
 800ca8e:	68f8      	ldr	r0, [r7, #12]
 800ca90:	f002 f842 	bl	800eb18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca94:	2300      	movs	r3, #0
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3710      	adds	r7, #16
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}

0800ca9e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ca9e:	b580      	push	{r7, lr}
 800caa0:	b082      	sub	sp, #8
 800caa2:	af00      	add	r7, sp, #0
 800caa4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2204      	movs	r2, #4
 800caaa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800caae:	2300      	movs	r3, #0
 800cab0:	2200      	movs	r2, #0
 800cab2:	2100      	movs	r1, #0
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f002 f80e 	bl	800ead6 <USBD_LL_Transmit>

  return USBD_OK;
 800caba:	2300      	movs	r3, #0
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3708      	adds	r7, #8
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}

0800cac4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b082      	sub	sp, #8
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2205      	movs	r2, #5
 800cad0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cad4:	2300      	movs	r3, #0
 800cad6:	2200      	movs	r2, #0
 800cad8:	2100      	movs	r1, #0
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f002 f81c 	bl	800eb18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cae0:	2300      	movs	r3, #0
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3708      	adds	r7, #8
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}

0800caea <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800caea:	b480      	push	{r7}
 800caec:	b085      	sub	sp, #20
 800caee:	af00      	add	r7, sp, #0
 800caf0:	4603      	mov	r3, r0
 800caf2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800caf4:	2300      	movs	r3, #0
 800caf6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800caf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cafc:	2b84      	cmp	r3, #132	@ 0x84
 800cafe:	d005      	beq.n	800cb0c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800cb00:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	4413      	add	r3, r2
 800cb08:	3303      	adds	r3, #3
 800cb0a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3714      	adds	r7, #20
 800cb12:	46bd      	mov	sp, r7
 800cb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb18:	4770      	bx	lr

0800cb1a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800cb1a:	b580      	push	{r7, lr}
 800cb1c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800cb1e:	f000 fae5 	bl	800d0ec <vTaskStartScheduler>
  
  return osOK;
 800cb22:	2300      	movs	r3, #0
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	bd80      	pop	{r7, pc}

0800cb28 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800cb28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb2a:	b089      	sub	sp, #36	@ 0x24
 800cb2c:	af04      	add	r7, sp, #16
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	695b      	ldr	r3, [r3, #20]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d020      	beq.n	800cb7c <osThreadCreate+0x54>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	699b      	ldr	r3, [r3, #24]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d01c      	beq.n	800cb7c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	685c      	ldr	r4, [r3, #4]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	691e      	ldr	r6, [r3, #16]
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cb54:	4618      	mov	r0, r3
 800cb56:	f7ff ffc8 	bl	800caea <makeFreeRtosPriority>
 800cb5a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	695b      	ldr	r3, [r3, #20]
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cb64:	9202      	str	r2, [sp, #8]
 800cb66:	9301      	str	r3, [sp, #4]
 800cb68:	9100      	str	r1, [sp, #0]
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	4632      	mov	r2, r6
 800cb6e:	4629      	mov	r1, r5
 800cb70:	4620      	mov	r0, r4
 800cb72:	f000 f8ed 	bl	800cd50 <xTaskCreateStatic>
 800cb76:	4603      	mov	r3, r0
 800cb78:	60fb      	str	r3, [r7, #12]
 800cb7a:	e01c      	b.n	800cbb6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	685c      	ldr	r4, [r3, #4]
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cb88:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cb90:	4618      	mov	r0, r3
 800cb92:	f7ff ffaa 	bl	800caea <makeFreeRtosPriority>
 800cb96:	4602      	mov	r2, r0
 800cb98:	f107 030c 	add.w	r3, r7, #12
 800cb9c:	9301      	str	r3, [sp, #4]
 800cb9e:	9200      	str	r2, [sp, #0]
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	4632      	mov	r2, r6
 800cba4:	4629      	mov	r1, r5
 800cba6:	4620      	mov	r0, r4
 800cba8:	f000 f932 	bl	800ce10 <xTaskCreate>
 800cbac:	4603      	mov	r3, r0
 800cbae:	2b01      	cmp	r3, #1
 800cbb0:	d001      	beq.n	800cbb6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	e000      	b.n	800cbb8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3714      	adds	r7, #20
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cbc0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b084      	sub	sp, #16
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d001      	beq.n	800cbd6 <osDelay+0x16>
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	e000      	b.n	800cbd8 <osDelay+0x18>
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f000 fa51 	bl	800d080 <vTaskDelay>
  
  return osOK;
 800cbde:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3710      	adds	r7, #16
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}

0800cbe8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cbe8:	b480      	push	{r7}
 800cbea:	b083      	sub	sp, #12
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f103 0208 	add.w	r2, r3, #8
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f04f 32ff 	mov.w	r2, #4294967295
 800cc00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f103 0208 	add.w	r2, r3, #8
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f103 0208 	add.w	r2, r3, #8
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cc1c:	bf00      	nop
 800cc1e:	370c      	adds	r7, #12
 800cc20:	46bd      	mov	sp, r7
 800cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc26:	4770      	bx	lr

0800cc28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cc28:	b480      	push	{r7}
 800cc2a:	b083      	sub	sp, #12
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2200      	movs	r2, #0
 800cc34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cc36:	bf00      	nop
 800cc38:	370c      	adds	r7, #12
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc40:	4770      	bx	lr

0800cc42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cc42:	b480      	push	{r7}
 800cc44:	b085      	sub	sp, #20
 800cc46:	af00      	add	r7, sp, #0
 800cc48:	6078      	str	r0, [r7, #4]
 800cc4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	68fa      	ldr	r2, [r7, #12]
 800cc56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	689a      	ldr	r2, [r3, #8]
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	689b      	ldr	r3, [r3, #8]
 800cc64:	683a      	ldr	r2, [r7, #0]
 800cc66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	683a      	ldr	r2, [r7, #0]
 800cc6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	1c5a      	adds	r2, r3, #1
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	601a      	str	r2, [r3, #0]
}
 800cc7e:	bf00      	nop
 800cc80:	3714      	adds	r7, #20
 800cc82:	46bd      	mov	sp, r7
 800cc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc88:	4770      	bx	lr

0800cc8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cc8a:	b480      	push	{r7}
 800cc8c:	b085      	sub	sp, #20
 800cc8e:	af00      	add	r7, sp, #0
 800cc90:	6078      	str	r0, [r7, #4]
 800cc92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cca0:	d103      	bne.n	800ccaa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	691b      	ldr	r3, [r3, #16]
 800cca6:	60fb      	str	r3, [r7, #12]
 800cca8:	e00c      	b.n	800ccc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	3308      	adds	r3, #8
 800ccae:	60fb      	str	r3, [r7, #12]
 800ccb0:	e002      	b.n	800ccb8 <vListInsert+0x2e>
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	685b      	ldr	r3, [r3, #4]
 800ccb6:	60fb      	str	r3, [r7, #12]
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	685b      	ldr	r3, [r3, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	68ba      	ldr	r2, [r7, #8]
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d2f6      	bcs.n	800ccb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	685a      	ldr	r2, [r3, #4]
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	685b      	ldr	r3, [r3, #4]
 800ccd0:	683a      	ldr	r2, [r7, #0]
 800ccd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	68fa      	ldr	r2, [r7, #12]
 800ccd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	683a      	ldr	r2, [r7, #0]
 800ccde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	687a      	ldr	r2, [r7, #4]
 800cce4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	1c5a      	adds	r2, r3, #1
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	601a      	str	r2, [r3, #0]
}
 800ccf0:	bf00      	nop
 800ccf2:	3714      	adds	r7, #20
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr

0800ccfc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b085      	sub	sp, #20
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	691b      	ldr	r3, [r3, #16]
 800cd08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	685b      	ldr	r3, [r3, #4]
 800cd0e:	687a      	ldr	r2, [r7, #4]
 800cd10:	6892      	ldr	r2, [r2, #8]
 800cd12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	689b      	ldr	r3, [r3, #8]
 800cd18:	687a      	ldr	r2, [r7, #4]
 800cd1a:	6852      	ldr	r2, [r2, #4]
 800cd1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	685b      	ldr	r3, [r3, #4]
 800cd22:	687a      	ldr	r2, [r7, #4]
 800cd24:	429a      	cmp	r2, r3
 800cd26:	d103      	bne.n	800cd30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	689a      	ldr	r2, [r3, #8]
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2200      	movs	r2, #0
 800cd34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	1e5a      	subs	r2, r3, #1
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	681b      	ldr	r3, [r3, #0]
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3714      	adds	r7, #20
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4e:	4770      	bx	lr

0800cd50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b08e      	sub	sp, #56	@ 0x38
 800cd54:	af04      	add	r7, sp, #16
 800cd56:	60f8      	str	r0, [r7, #12]
 800cd58:	60b9      	str	r1, [r7, #8]
 800cd5a:	607a      	str	r2, [r7, #4]
 800cd5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cd5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d10b      	bne.n	800cd7c <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cd64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd68:	f383 8811 	msr	BASEPRI, r3
 800cd6c:	f3bf 8f6f 	isb	sy
 800cd70:	f3bf 8f4f 	dsb	sy
 800cd74:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cd76:	bf00      	nop
 800cd78:	bf00      	nop
 800cd7a:	e7fd      	b.n	800cd78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cd7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d10b      	bne.n	800cd9a <xTaskCreateStatic+0x4a>
	__asm volatile
 800cd82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd86:	f383 8811 	msr	BASEPRI, r3
 800cd8a:	f3bf 8f6f 	isb	sy
 800cd8e:	f3bf 8f4f 	dsb	sy
 800cd92:	61fb      	str	r3, [r7, #28]
}
 800cd94:	bf00      	nop
 800cd96:	bf00      	nop
 800cd98:	e7fd      	b.n	800cd96 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cd9a:	2354      	movs	r3, #84	@ 0x54
 800cd9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cd9e:	693b      	ldr	r3, [r7, #16]
 800cda0:	2b54      	cmp	r3, #84	@ 0x54
 800cda2:	d00b      	beq.n	800cdbc <xTaskCreateStatic+0x6c>
	__asm volatile
 800cda4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cda8:	f383 8811 	msr	BASEPRI, r3
 800cdac:	f3bf 8f6f 	isb	sy
 800cdb0:	f3bf 8f4f 	dsb	sy
 800cdb4:	61bb      	str	r3, [r7, #24]
}
 800cdb6:	bf00      	nop
 800cdb8:	bf00      	nop
 800cdba:	e7fd      	b.n	800cdb8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cdbc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cdbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d01e      	beq.n	800ce02 <xTaskCreateStatic+0xb2>
 800cdc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d01b      	beq.n	800ce02 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cdca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdcc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cdce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cdd2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cdd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdd6:	2202      	movs	r2, #2
 800cdd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cddc:	2300      	movs	r3, #0
 800cdde:	9303      	str	r3, [sp, #12]
 800cde0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cde2:	9302      	str	r3, [sp, #8]
 800cde4:	f107 0314 	add.w	r3, r7, #20
 800cde8:	9301      	str	r3, [sp, #4]
 800cdea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdec:	9300      	str	r3, [sp, #0]
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	687a      	ldr	r2, [r7, #4]
 800cdf2:	68b9      	ldr	r1, [r7, #8]
 800cdf4:	68f8      	ldr	r0, [r7, #12]
 800cdf6:	f000 f850 	bl	800ce9a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cdfa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cdfc:	f000 f8d6 	bl	800cfac <prvAddNewTaskToReadyList>
 800ce00:	e001      	b.n	800ce06 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ce02:	2300      	movs	r3, #0
 800ce04:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ce06:	697b      	ldr	r3, [r7, #20]
	}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3728      	adds	r7, #40	@ 0x28
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}

0800ce10 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b08c      	sub	sp, #48	@ 0x30
 800ce14:	af04      	add	r7, sp, #16
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	60b9      	str	r1, [r7, #8]
 800ce1a:	603b      	str	r3, [r7, #0]
 800ce1c:	4613      	mov	r3, r2
 800ce1e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ce20:	88fb      	ldrh	r3, [r7, #6]
 800ce22:	009b      	lsls	r3, r3, #2
 800ce24:	4618      	mov	r0, r3
 800ce26:	f000 fff1 	bl	800de0c <pvPortMalloc>
 800ce2a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d00e      	beq.n	800ce50 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ce32:	2054      	movs	r0, #84	@ 0x54
 800ce34:	f000 ffea 	bl	800de0c <pvPortMalloc>
 800ce38:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ce3a:	69fb      	ldr	r3, [r7, #28]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d003      	beq.n	800ce48 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ce40:	69fb      	ldr	r3, [r7, #28]
 800ce42:	697a      	ldr	r2, [r7, #20]
 800ce44:	631a      	str	r2, [r3, #48]	@ 0x30
 800ce46:	e005      	b.n	800ce54 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ce48:	6978      	ldr	r0, [r7, #20]
 800ce4a:	f001 f8ad 	bl	800dfa8 <vPortFree>
 800ce4e:	e001      	b.n	800ce54 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ce50:	2300      	movs	r3, #0
 800ce52:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ce54:	69fb      	ldr	r3, [r7, #28]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d017      	beq.n	800ce8a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ce5a:	69fb      	ldr	r3, [r7, #28]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ce62:	88fa      	ldrh	r2, [r7, #6]
 800ce64:	2300      	movs	r3, #0
 800ce66:	9303      	str	r3, [sp, #12]
 800ce68:	69fb      	ldr	r3, [r7, #28]
 800ce6a:	9302      	str	r3, [sp, #8]
 800ce6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce6e:	9301      	str	r3, [sp, #4]
 800ce70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce72:	9300      	str	r3, [sp, #0]
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	68b9      	ldr	r1, [r7, #8]
 800ce78:	68f8      	ldr	r0, [r7, #12]
 800ce7a:	f000 f80e 	bl	800ce9a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ce7e:	69f8      	ldr	r0, [r7, #28]
 800ce80:	f000 f894 	bl	800cfac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ce84:	2301      	movs	r3, #1
 800ce86:	61bb      	str	r3, [r7, #24]
 800ce88:	e002      	b.n	800ce90 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ce8a:	f04f 33ff 	mov.w	r3, #4294967295
 800ce8e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ce90:	69bb      	ldr	r3, [r7, #24]
	}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3720      	adds	r7, #32
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}

0800ce9a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ce9a:	b580      	push	{r7, lr}
 800ce9c:	b088      	sub	sp, #32
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	60f8      	str	r0, [r7, #12]
 800cea2:	60b9      	str	r1, [r7, #8]
 800cea4:	607a      	str	r2, [r7, #4]
 800cea6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ceb2:	3b01      	subs	r3, #1
 800ceb4:	009b      	lsls	r3, r3, #2
 800ceb6:	4413      	add	r3, r2
 800ceb8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ceba:	69bb      	ldr	r3, [r7, #24]
 800cebc:	f023 0307 	bic.w	r3, r3, #7
 800cec0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cec2:	69bb      	ldr	r3, [r7, #24]
 800cec4:	f003 0307 	and.w	r3, r3, #7
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d00b      	beq.n	800cee4 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800cecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ced0:	f383 8811 	msr	BASEPRI, r3
 800ced4:	f3bf 8f6f 	isb	sy
 800ced8:	f3bf 8f4f 	dsb	sy
 800cedc:	617b      	str	r3, [r7, #20]
}
 800cede:	bf00      	nop
 800cee0:	bf00      	nop
 800cee2:	e7fd      	b.n	800cee0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d01f      	beq.n	800cf2a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ceea:	2300      	movs	r3, #0
 800ceec:	61fb      	str	r3, [r7, #28]
 800ceee:	e012      	b.n	800cf16 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cef0:	68ba      	ldr	r2, [r7, #8]
 800cef2:	69fb      	ldr	r3, [r7, #28]
 800cef4:	4413      	add	r3, r2
 800cef6:	7819      	ldrb	r1, [r3, #0]
 800cef8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cefa:	69fb      	ldr	r3, [r7, #28]
 800cefc:	4413      	add	r3, r2
 800cefe:	3334      	adds	r3, #52	@ 0x34
 800cf00:	460a      	mov	r2, r1
 800cf02:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cf04:	68ba      	ldr	r2, [r7, #8]
 800cf06:	69fb      	ldr	r3, [r7, #28]
 800cf08:	4413      	add	r3, r2
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d006      	beq.n	800cf1e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cf10:	69fb      	ldr	r3, [r7, #28]
 800cf12:	3301      	adds	r3, #1
 800cf14:	61fb      	str	r3, [r7, #28]
 800cf16:	69fb      	ldr	r3, [r7, #28]
 800cf18:	2b0f      	cmp	r3, #15
 800cf1a:	d9e9      	bls.n	800cef0 <prvInitialiseNewTask+0x56>
 800cf1c:	e000      	b.n	800cf20 <prvInitialiseNewTask+0x86>
			{
				break;
 800cf1e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cf20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf22:	2200      	movs	r2, #0
 800cf24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cf28:	e003      	b.n	800cf32 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cf2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cf32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf34:	2b06      	cmp	r3, #6
 800cf36:	d901      	bls.n	800cf3c <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cf38:	2306      	movs	r3, #6
 800cf3a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cf3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cf40:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cf42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cf46:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800cf48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cf4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf50:	3304      	adds	r3, #4
 800cf52:	4618      	mov	r0, r3
 800cf54:	f7ff fe68 	bl	800cc28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cf58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf5a:	3318      	adds	r3, #24
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f7ff fe63 	bl	800cc28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cf62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf6a:	f1c3 0207 	rsb	r2, r3, #7
 800cf6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cf72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf76:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cf78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cf7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf80:	2200      	movs	r2, #0
 800cf82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cf86:	683a      	ldr	r2, [r7, #0]
 800cf88:	68f9      	ldr	r1, [r7, #12]
 800cf8a:	69b8      	ldr	r0, [r7, #24]
 800cf8c:	f000 fcea 	bl	800d964 <pxPortInitialiseStack>
 800cf90:	4602      	mov	r2, r0
 800cf92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf94:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cf96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d002      	beq.n	800cfa2 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cf9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cfa0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cfa2:	bf00      	nop
 800cfa4:	3720      	adds	r7, #32
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
	...

0800cfac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b082      	sub	sp, #8
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cfb4:	f000 fe08 	bl	800dbc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cfb8:	4b2a      	ldr	r3, [pc, #168]	@ (800d064 <prvAddNewTaskToReadyList+0xb8>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	3301      	adds	r3, #1
 800cfbe:	4a29      	ldr	r2, [pc, #164]	@ (800d064 <prvAddNewTaskToReadyList+0xb8>)
 800cfc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cfc2:	4b29      	ldr	r3, [pc, #164]	@ (800d068 <prvAddNewTaskToReadyList+0xbc>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d109      	bne.n	800cfde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cfca:	4a27      	ldr	r2, [pc, #156]	@ (800d068 <prvAddNewTaskToReadyList+0xbc>)
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cfd0:	4b24      	ldr	r3, [pc, #144]	@ (800d064 <prvAddNewTaskToReadyList+0xb8>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	2b01      	cmp	r3, #1
 800cfd6:	d110      	bne.n	800cffa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cfd8:	f000 fac4 	bl	800d564 <prvInitialiseTaskLists>
 800cfdc:	e00d      	b.n	800cffa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cfde:	4b23      	ldr	r3, [pc, #140]	@ (800d06c <prvAddNewTaskToReadyList+0xc0>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d109      	bne.n	800cffa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cfe6:	4b20      	ldr	r3, [pc, #128]	@ (800d068 <prvAddNewTaskToReadyList+0xbc>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cff0:	429a      	cmp	r2, r3
 800cff2:	d802      	bhi.n	800cffa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cff4:	4a1c      	ldr	r2, [pc, #112]	@ (800d068 <prvAddNewTaskToReadyList+0xbc>)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cffa:	4b1d      	ldr	r3, [pc, #116]	@ (800d070 <prvAddNewTaskToReadyList+0xc4>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	3301      	adds	r3, #1
 800d000:	4a1b      	ldr	r2, [pc, #108]	@ (800d070 <prvAddNewTaskToReadyList+0xc4>)
 800d002:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d008:	2201      	movs	r2, #1
 800d00a:	409a      	lsls	r2, r3
 800d00c:	4b19      	ldr	r3, [pc, #100]	@ (800d074 <prvAddNewTaskToReadyList+0xc8>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	4313      	orrs	r3, r2
 800d012:	4a18      	ldr	r2, [pc, #96]	@ (800d074 <prvAddNewTaskToReadyList+0xc8>)
 800d014:	6013      	str	r3, [r2, #0]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d01a:	4613      	mov	r3, r2
 800d01c:	009b      	lsls	r3, r3, #2
 800d01e:	4413      	add	r3, r2
 800d020:	009b      	lsls	r3, r3, #2
 800d022:	4a15      	ldr	r2, [pc, #84]	@ (800d078 <prvAddNewTaskToReadyList+0xcc>)
 800d024:	441a      	add	r2, r3
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	3304      	adds	r3, #4
 800d02a:	4619      	mov	r1, r3
 800d02c:	4610      	mov	r0, r2
 800d02e:	f7ff fe08 	bl	800cc42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d032:	f000 fdfb 	bl	800dc2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d036:	4b0d      	ldr	r3, [pc, #52]	@ (800d06c <prvAddNewTaskToReadyList+0xc0>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d00e      	beq.n	800d05c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d03e:	4b0a      	ldr	r3, [pc, #40]	@ (800d068 <prvAddNewTaskToReadyList+0xbc>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d048:	429a      	cmp	r2, r3
 800d04a:	d207      	bcs.n	800d05c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d04c:	4b0b      	ldr	r3, [pc, #44]	@ (800d07c <prvAddNewTaskToReadyList+0xd0>)
 800d04e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d052:	601a      	str	r2, [r3, #0]
 800d054:	f3bf 8f4f 	dsb	sy
 800d058:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d05c:	bf00      	nop
 800d05e:	3708      	adds	r7, #8
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}
 800d064:	20000bfc 	.word	0x20000bfc
 800d068:	20000afc 	.word	0x20000afc
 800d06c:	20000c08 	.word	0x20000c08
 800d070:	20000c18 	.word	0x20000c18
 800d074:	20000c04 	.word	0x20000c04
 800d078:	20000b00 	.word	0x20000b00
 800d07c:	e000ed04 	.word	0xe000ed04

0800d080 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d080:	b580      	push	{r7, lr}
 800d082:	b084      	sub	sp, #16
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d088:	2300      	movs	r3, #0
 800d08a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d018      	beq.n	800d0c4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d092:	4b14      	ldr	r3, [pc, #80]	@ (800d0e4 <vTaskDelay+0x64>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d00b      	beq.n	800d0b2 <vTaskDelay+0x32>
	__asm volatile
 800d09a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d09e:	f383 8811 	msr	BASEPRI, r3
 800d0a2:	f3bf 8f6f 	isb	sy
 800d0a6:	f3bf 8f4f 	dsb	sy
 800d0aa:	60bb      	str	r3, [r7, #8]
}
 800d0ac:	bf00      	nop
 800d0ae:	bf00      	nop
 800d0b0:	e7fd      	b.n	800d0ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d0b2:	f000 f87d 	bl	800d1b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d0b6:	2100      	movs	r1, #0
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f000 fbed 	bl	800d898 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d0be:	f000 f885 	bl	800d1cc <xTaskResumeAll>
 800d0c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d107      	bne.n	800d0da <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d0ca:	4b07      	ldr	r3, [pc, #28]	@ (800d0e8 <vTaskDelay+0x68>)
 800d0cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0d0:	601a      	str	r2, [r3, #0]
 800d0d2:	f3bf 8f4f 	dsb	sy
 800d0d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d0da:	bf00      	nop
 800d0dc:	3710      	adds	r7, #16
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}
 800d0e2:	bf00      	nop
 800d0e4:	20000c24 	.word	0x20000c24
 800d0e8:	e000ed04 	.word	0xe000ed04

0800d0ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b08a      	sub	sp, #40	@ 0x28
 800d0f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d0fa:	463a      	mov	r2, r7
 800d0fc:	1d39      	adds	r1, r7, #4
 800d0fe:	f107 0308 	add.w	r3, r7, #8
 800d102:	4618      	mov	r0, r3
 800d104:	f7f5 fbce 	bl	80028a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d108:	6839      	ldr	r1, [r7, #0]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	68ba      	ldr	r2, [r7, #8]
 800d10e:	9202      	str	r2, [sp, #8]
 800d110:	9301      	str	r3, [sp, #4]
 800d112:	2300      	movs	r3, #0
 800d114:	9300      	str	r3, [sp, #0]
 800d116:	2300      	movs	r3, #0
 800d118:	460a      	mov	r2, r1
 800d11a:	491f      	ldr	r1, [pc, #124]	@ (800d198 <vTaskStartScheduler+0xac>)
 800d11c:	481f      	ldr	r0, [pc, #124]	@ (800d19c <vTaskStartScheduler+0xb0>)
 800d11e:	f7ff fe17 	bl	800cd50 <xTaskCreateStatic>
 800d122:	4603      	mov	r3, r0
 800d124:	4a1e      	ldr	r2, [pc, #120]	@ (800d1a0 <vTaskStartScheduler+0xb4>)
 800d126:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d128:	4b1d      	ldr	r3, [pc, #116]	@ (800d1a0 <vTaskStartScheduler+0xb4>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d002      	beq.n	800d136 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d130:	2301      	movs	r3, #1
 800d132:	617b      	str	r3, [r7, #20]
 800d134:	e001      	b.n	800d13a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d136:	2300      	movs	r3, #0
 800d138:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	2b01      	cmp	r3, #1
 800d13e:	d116      	bne.n	800d16e <vTaskStartScheduler+0x82>
	__asm volatile
 800d140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d144:	f383 8811 	msr	BASEPRI, r3
 800d148:	f3bf 8f6f 	isb	sy
 800d14c:	f3bf 8f4f 	dsb	sy
 800d150:	613b      	str	r3, [r7, #16]
}
 800d152:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d154:	4b13      	ldr	r3, [pc, #76]	@ (800d1a4 <vTaskStartScheduler+0xb8>)
 800d156:	f04f 32ff 	mov.w	r2, #4294967295
 800d15a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d15c:	4b12      	ldr	r3, [pc, #72]	@ (800d1a8 <vTaskStartScheduler+0xbc>)
 800d15e:	2201      	movs	r2, #1
 800d160:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d162:	4b12      	ldr	r3, [pc, #72]	@ (800d1ac <vTaskStartScheduler+0xc0>)
 800d164:	2200      	movs	r2, #0
 800d166:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d168:	f000 fc8a 	bl	800da80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d16c:	e00f      	b.n	800d18e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d174:	d10b      	bne.n	800d18e <vTaskStartScheduler+0xa2>
	__asm volatile
 800d176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d17a:	f383 8811 	msr	BASEPRI, r3
 800d17e:	f3bf 8f6f 	isb	sy
 800d182:	f3bf 8f4f 	dsb	sy
 800d186:	60fb      	str	r3, [r7, #12]
}
 800d188:	bf00      	nop
 800d18a:	bf00      	nop
 800d18c:	e7fd      	b.n	800d18a <vTaskStartScheduler+0x9e>
}
 800d18e:	bf00      	nop
 800d190:	3718      	adds	r7, #24
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}
 800d196:	bf00      	nop
 800d198:	0801414c 	.word	0x0801414c
 800d19c:	0800d535 	.word	0x0800d535
 800d1a0:	20000c20 	.word	0x20000c20
 800d1a4:	20000c1c 	.word	0x20000c1c
 800d1a8:	20000c08 	.word	0x20000c08
 800d1ac:	20000c00 	.word	0x20000c00

0800d1b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d1b4:	4b04      	ldr	r3, [pc, #16]	@ (800d1c8 <vTaskSuspendAll+0x18>)
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	3301      	adds	r3, #1
 800d1ba:	4a03      	ldr	r2, [pc, #12]	@ (800d1c8 <vTaskSuspendAll+0x18>)
 800d1bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d1be:	bf00      	nop
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr
 800d1c8:	20000c24 	.word	0x20000c24

0800d1cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b084      	sub	sp, #16
 800d1d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d1da:	4b42      	ldr	r3, [pc, #264]	@ (800d2e4 <xTaskResumeAll+0x118>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d10b      	bne.n	800d1fa <xTaskResumeAll+0x2e>
	__asm volatile
 800d1e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1e6:	f383 8811 	msr	BASEPRI, r3
 800d1ea:	f3bf 8f6f 	isb	sy
 800d1ee:	f3bf 8f4f 	dsb	sy
 800d1f2:	603b      	str	r3, [r7, #0]
}
 800d1f4:	bf00      	nop
 800d1f6:	bf00      	nop
 800d1f8:	e7fd      	b.n	800d1f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d1fa:	f000 fce5 	bl	800dbc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d1fe:	4b39      	ldr	r3, [pc, #228]	@ (800d2e4 <xTaskResumeAll+0x118>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	3b01      	subs	r3, #1
 800d204:	4a37      	ldr	r2, [pc, #220]	@ (800d2e4 <xTaskResumeAll+0x118>)
 800d206:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d208:	4b36      	ldr	r3, [pc, #216]	@ (800d2e4 <xTaskResumeAll+0x118>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d161      	bne.n	800d2d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d210:	4b35      	ldr	r3, [pc, #212]	@ (800d2e8 <xTaskResumeAll+0x11c>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d05d      	beq.n	800d2d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d218:	e02e      	b.n	800d278 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d21a:	4b34      	ldr	r3, [pc, #208]	@ (800d2ec <xTaskResumeAll+0x120>)
 800d21c:	68db      	ldr	r3, [r3, #12]
 800d21e:	68db      	ldr	r3, [r3, #12]
 800d220:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	3318      	adds	r3, #24
 800d226:	4618      	mov	r0, r3
 800d228:	f7ff fd68 	bl	800ccfc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	3304      	adds	r3, #4
 800d230:	4618      	mov	r0, r3
 800d232:	f7ff fd63 	bl	800ccfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d23a:	2201      	movs	r2, #1
 800d23c:	409a      	lsls	r2, r3
 800d23e:	4b2c      	ldr	r3, [pc, #176]	@ (800d2f0 <xTaskResumeAll+0x124>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	4313      	orrs	r3, r2
 800d244:	4a2a      	ldr	r2, [pc, #168]	@ (800d2f0 <xTaskResumeAll+0x124>)
 800d246:	6013      	str	r3, [r2, #0]
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d24c:	4613      	mov	r3, r2
 800d24e:	009b      	lsls	r3, r3, #2
 800d250:	4413      	add	r3, r2
 800d252:	009b      	lsls	r3, r3, #2
 800d254:	4a27      	ldr	r2, [pc, #156]	@ (800d2f4 <xTaskResumeAll+0x128>)
 800d256:	441a      	add	r2, r3
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	3304      	adds	r3, #4
 800d25c:	4619      	mov	r1, r3
 800d25e:	4610      	mov	r0, r2
 800d260:	f7ff fcef 	bl	800cc42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d268:	4b23      	ldr	r3, [pc, #140]	@ (800d2f8 <xTaskResumeAll+0x12c>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d26e:	429a      	cmp	r2, r3
 800d270:	d302      	bcc.n	800d278 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d272:	4b22      	ldr	r3, [pc, #136]	@ (800d2fc <xTaskResumeAll+0x130>)
 800d274:	2201      	movs	r2, #1
 800d276:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d278:	4b1c      	ldr	r3, [pc, #112]	@ (800d2ec <xTaskResumeAll+0x120>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d1cc      	bne.n	800d21a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d001      	beq.n	800d28a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d286:	f000 fa0b 	bl	800d6a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d28a:	4b1d      	ldr	r3, [pc, #116]	@ (800d300 <xTaskResumeAll+0x134>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d010      	beq.n	800d2b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d296:	f000 f837 	bl	800d308 <xTaskIncrementTick>
 800d29a:	4603      	mov	r3, r0
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d002      	beq.n	800d2a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d2a0:	4b16      	ldr	r3, [pc, #88]	@ (800d2fc <xTaskResumeAll+0x130>)
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	3b01      	subs	r3, #1
 800d2aa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d1f1      	bne.n	800d296 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d2b2:	4b13      	ldr	r3, [pc, #76]	@ (800d300 <xTaskResumeAll+0x134>)
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d2b8:	4b10      	ldr	r3, [pc, #64]	@ (800d2fc <xTaskResumeAll+0x130>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d009      	beq.n	800d2d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d2c4:	4b0f      	ldr	r3, [pc, #60]	@ (800d304 <xTaskResumeAll+0x138>)
 800d2c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2ca:	601a      	str	r2, [r3, #0]
 800d2cc:	f3bf 8f4f 	dsb	sy
 800d2d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d2d4:	f000 fcaa 	bl	800dc2c <vPortExitCritical>

	return xAlreadyYielded;
 800d2d8:	68bb      	ldr	r3, [r7, #8]
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3710      	adds	r7, #16
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}
 800d2e2:	bf00      	nop
 800d2e4:	20000c24 	.word	0x20000c24
 800d2e8:	20000bfc 	.word	0x20000bfc
 800d2ec:	20000bbc 	.word	0x20000bbc
 800d2f0:	20000c04 	.word	0x20000c04
 800d2f4:	20000b00 	.word	0x20000b00
 800d2f8:	20000afc 	.word	0x20000afc
 800d2fc:	20000c10 	.word	0x20000c10
 800d300:	20000c0c 	.word	0x20000c0c
 800d304:	e000ed04 	.word	0xe000ed04

0800d308 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b086      	sub	sp, #24
 800d30c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d30e:	2300      	movs	r3, #0
 800d310:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d312:	4b4f      	ldr	r3, [pc, #316]	@ (800d450 <xTaskIncrementTick+0x148>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	2b00      	cmp	r3, #0
 800d318:	f040 808f 	bne.w	800d43a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d31c:	4b4d      	ldr	r3, [pc, #308]	@ (800d454 <xTaskIncrementTick+0x14c>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	3301      	adds	r3, #1
 800d322:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d324:	4a4b      	ldr	r2, [pc, #300]	@ (800d454 <xTaskIncrementTick+0x14c>)
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d121      	bne.n	800d374 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d330:	4b49      	ldr	r3, [pc, #292]	@ (800d458 <xTaskIncrementTick+0x150>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d00b      	beq.n	800d352 <xTaskIncrementTick+0x4a>
	__asm volatile
 800d33a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d33e:	f383 8811 	msr	BASEPRI, r3
 800d342:	f3bf 8f6f 	isb	sy
 800d346:	f3bf 8f4f 	dsb	sy
 800d34a:	603b      	str	r3, [r7, #0]
}
 800d34c:	bf00      	nop
 800d34e:	bf00      	nop
 800d350:	e7fd      	b.n	800d34e <xTaskIncrementTick+0x46>
 800d352:	4b41      	ldr	r3, [pc, #260]	@ (800d458 <xTaskIncrementTick+0x150>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	60fb      	str	r3, [r7, #12]
 800d358:	4b40      	ldr	r3, [pc, #256]	@ (800d45c <xTaskIncrementTick+0x154>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	4a3e      	ldr	r2, [pc, #248]	@ (800d458 <xTaskIncrementTick+0x150>)
 800d35e:	6013      	str	r3, [r2, #0]
 800d360:	4a3e      	ldr	r2, [pc, #248]	@ (800d45c <xTaskIncrementTick+0x154>)
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	6013      	str	r3, [r2, #0]
 800d366:	4b3e      	ldr	r3, [pc, #248]	@ (800d460 <xTaskIncrementTick+0x158>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	3301      	adds	r3, #1
 800d36c:	4a3c      	ldr	r2, [pc, #240]	@ (800d460 <xTaskIncrementTick+0x158>)
 800d36e:	6013      	str	r3, [r2, #0]
 800d370:	f000 f996 	bl	800d6a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d374:	4b3b      	ldr	r3, [pc, #236]	@ (800d464 <xTaskIncrementTick+0x15c>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	693a      	ldr	r2, [r7, #16]
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d348      	bcc.n	800d410 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d37e:	4b36      	ldr	r3, [pc, #216]	@ (800d458 <xTaskIncrementTick+0x150>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d104      	bne.n	800d392 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d388:	4b36      	ldr	r3, [pc, #216]	@ (800d464 <xTaskIncrementTick+0x15c>)
 800d38a:	f04f 32ff 	mov.w	r2, #4294967295
 800d38e:	601a      	str	r2, [r3, #0]
					break;
 800d390:	e03e      	b.n	800d410 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d392:	4b31      	ldr	r3, [pc, #196]	@ (800d458 <xTaskIncrementTick+0x150>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	68db      	ldr	r3, [r3, #12]
 800d398:	68db      	ldr	r3, [r3, #12]
 800d39a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	685b      	ldr	r3, [r3, #4]
 800d3a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d3a2:	693a      	ldr	r2, [r7, #16]
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d203      	bcs.n	800d3b2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d3aa:	4a2e      	ldr	r2, [pc, #184]	@ (800d464 <xTaskIncrementTick+0x15c>)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d3b0:	e02e      	b.n	800d410 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	3304      	adds	r3, #4
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f7ff fca0 	bl	800ccfc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d004      	beq.n	800d3ce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	3318      	adds	r3, #24
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7ff fc97 	bl	800ccfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3d2:	2201      	movs	r2, #1
 800d3d4:	409a      	lsls	r2, r3
 800d3d6:	4b24      	ldr	r3, [pc, #144]	@ (800d468 <xTaskIncrementTick+0x160>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	4313      	orrs	r3, r2
 800d3dc:	4a22      	ldr	r2, [pc, #136]	@ (800d468 <xTaskIncrementTick+0x160>)
 800d3de:	6013      	str	r3, [r2, #0]
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3e4:	4613      	mov	r3, r2
 800d3e6:	009b      	lsls	r3, r3, #2
 800d3e8:	4413      	add	r3, r2
 800d3ea:	009b      	lsls	r3, r3, #2
 800d3ec:	4a1f      	ldr	r2, [pc, #124]	@ (800d46c <xTaskIncrementTick+0x164>)
 800d3ee:	441a      	add	r2, r3
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	3304      	adds	r3, #4
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	4610      	mov	r0, r2
 800d3f8:	f7ff fc23 	bl	800cc42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d3fc:	68bb      	ldr	r3, [r7, #8]
 800d3fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d400:	4b1b      	ldr	r3, [pc, #108]	@ (800d470 <xTaskIncrementTick+0x168>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d406:	429a      	cmp	r2, r3
 800d408:	d3b9      	bcc.n	800d37e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d40a:	2301      	movs	r3, #1
 800d40c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d40e:	e7b6      	b.n	800d37e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d410:	4b17      	ldr	r3, [pc, #92]	@ (800d470 <xTaskIncrementTick+0x168>)
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d416:	4915      	ldr	r1, [pc, #84]	@ (800d46c <xTaskIncrementTick+0x164>)
 800d418:	4613      	mov	r3, r2
 800d41a:	009b      	lsls	r3, r3, #2
 800d41c:	4413      	add	r3, r2
 800d41e:	009b      	lsls	r3, r3, #2
 800d420:	440b      	add	r3, r1
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	2b01      	cmp	r3, #1
 800d426:	d901      	bls.n	800d42c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d428:	2301      	movs	r3, #1
 800d42a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d42c:	4b11      	ldr	r3, [pc, #68]	@ (800d474 <xTaskIncrementTick+0x16c>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d007      	beq.n	800d444 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d434:	2301      	movs	r3, #1
 800d436:	617b      	str	r3, [r7, #20]
 800d438:	e004      	b.n	800d444 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d43a:	4b0f      	ldr	r3, [pc, #60]	@ (800d478 <xTaskIncrementTick+0x170>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	3301      	adds	r3, #1
 800d440:	4a0d      	ldr	r2, [pc, #52]	@ (800d478 <xTaskIncrementTick+0x170>)
 800d442:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d444:	697b      	ldr	r3, [r7, #20]
}
 800d446:	4618      	mov	r0, r3
 800d448:	3718      	adds	r7, #24
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}
 800d44e:	bf00      	nop
 800d450:	20000c24 	.word	0x20000c24
 800d454:	20000c00 	.word	0x20000c00
 800d458:	20000bb4 	.word	0x20000bb4
 800d45c:	20000bb8 	.word	0x20000bb8
 800d460:	20000c14 	.word	0x20000c14
 800d464:	20000c1c 	.word	0x20000c1c
 800d468:	20000c04 	.word	0x20000c04
 800d46c:	20000b00 	.word	0x20000b00
 800d470:	20000afc 	.word	0x20000afc
 800d474:	20000c10 	.word	0x20000c10
 800d478:	20000c0c 	.word	0x20000c0c

0800d47c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d47c:	b480      	push	{r7}
 800d47e:	b087      	sub	sp, #28
 800d480:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d482:	4b27      	ldr	r3, [pc, #156]	@ (800d520 <vTaskSwitchContext+0xa4>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d003      	beq.n	800d492 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d48a:	4b26      	ldr	r3, [pc, #152]	@ (800d524 <vTaskSwitchContext+0xa8>)
 800d48c:	2201      	movs	r2, #1
 800d48e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d490:	e040      	b.n	800d514 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800d492:	4b24      	ldr	r3, [pc, #144]	@ (800d524 <vTaskSwitchContext+0xa8>)
 800d494:	2200      	movs	r2, #0
 800d496:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d498:	4b23      	ldr	r3, [pc, #140]	@ (800d528 <vTaskSwitchContext+0xac>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	fab3 f383 	clz	r3, r3
 800d4a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d4a6:	7afb      	ldrb	r3, [r7, #11]
 800d4a8:	f1c3 031f 	rsb	r3, r3, #31
 800d4ac:	617b      	str	r3, [r7, #20]
 800d4ae:	491f      	ldr	r1, [pc, #124]	@ (800d52c <vTaskSwitchContext+0xb0>)
 800d4b0:	697a      	ldr	r2, [r7, #20]
 800d4b2:	4613      	mov	r3, r2
 800d4b4:	009b      	lsls	r3, r3, #2
 800d4b6:	4413      	add	r3, r2
 800d4b8:	009b      	lsls	r3, r3, #2
 800d4ba:	440b      	add	r3, r1
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d10b      	bne.n	800d4da <vTaskSwitchContext+0x5e>
	__asm volatile
 800d4c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4c6:	f383 8811 	msr	BASEPRI, r3
 800d4ca:	f3bf 8f6f 	isb	sy
 800d4ce:	f3bf 8f4f 	dsb	sy
 800d4d2:	607b      	str	r3, [r7, #4]
}
 800d4d4:	bf00      	nop
 800d4d6:	bf00      	nop
 800d4d8:	e7fd      	b.n	800d4d6 <vTaskSwitchContext+0x5a>
 800d4da:	697a      	ldr	r2, [r7, #20]
 800d4dc:	4613      	mov	r3, r2
 800d4de:	009b      	lsls	r3, r3, #2
 800d4e0:	4413      	add	r3, r2
 800d4e2:	009b      	lsls	r3, r3, #2
 800d4e4:	4a11      	ldr	r2, [pc, #68]	@ (800d52c <vTaskSwitchContext+0xb0>)
 800d4e6:	4413      	add	r3, r2
 800d4e8:	613b      	str	r3, [r7, #16]
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	685b      	ldr	r3, [r3, #4]
 800d4ee:	685a      	ldr	r2, [r3, #4]
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	605a      	str	r2, [r3, #4]
 800d4f4:	693b      	ldr	r3, [r7, #16]
 800d4f6:	685a      	ldr	r2, [r3, #4]
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	3308      	adds	r3, #8
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d104      	bne.n	800d50a <vTaskSwitchContext+0x8e>
 800d500:	693b      	ldr	r3, [r7, #16]
 800d502:	685b      	ldr	r3, [r3, #4]
 800d504:	685a      	ldr	r2, [r3, #4]
 800d506:	693b      	ldr	r3, [r7, #16]
 800d508:	605a      	str	r2, [r3, #4]
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	685b      	ldr	r3, [r3, #4]
 800d50e:	68db      	ldr	r3, [r3, #12]
 800d510:	4a07      	ldr	r2, [pc, #28]	@ (800d530 <vTaskSwitchContext+0xb4>)
 800d512:	6013      	str	r3, [r2, #0]
}
 800d514:	bf00      	nop
 800d516:	371c      	adds	r7, #28
 800d518:	46bd      	mov	sp, r7
 800d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51e:	4770      	bx	lr
 800d520:	20000c24 	.word	0x20000c24
 800d524:	20000c10 	.word	0x20000c10
 800d528:	20000c04 	.word	0x20000c04
 800d52c:	20000b00 	.word	0x20000b00
 800d530:	20000afc 	.word	0x20000afc

0800d534 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b082      	sub	sp, #8
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d53c:	f000 f852 	bl	800d5e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d540:	4b06      	ldr	r3, [pc, #24]	@ (800d55c <prvIdleTask+0x28>)
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	2b01      	cmp	r3, #1
 800d546:	d9f9      	bls.n	800d53c <prvIdleTask+0x8>
			{
				taskYIELD();
 800d548:	4b05      	ldr	r3, [pc, #20]	@ (800d560 <prvIdleTask+0x2c>)
 800d54a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d54e:	601a      	str	r2, [r3, #0]
 800d550:	f3bf 8f4f 	dsb	sy
 800d554:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d558:	e7f0      	b.n	800d53c <prvIdleTask+0x8>
 800d55a:	bf00      	nop
 800d55c:	20000b00 	.word	0x20000b00
 800d560:	e000ed04 	.word	0xe000ed04

0800d564 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b082      	sub	sp, #8
 800d568:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d56a:	2300      	movs	r3, #0
 800d56c:	607b      	str	r3, [r7, #4]
 800d56e:	e00c      	b.n	800d58a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d570:	687a      	ldr	r2, [r7, #4]
 800d572:	4613      	mov	r3, r2
 800d574:	009b      	lsls	r3, r3, #2
 800d576:	4413      	add	r3, r2
 800d578:	009b      	lsls	r3, r3, #2
 800d57a:	4a12      	ldr	r2, [pc, #72]	@ (800d5c4 <prvInitialiseTaskLists+0x60>)
 800d57c:	4413      	add	r3, r2
 800d57e:	4618      	mov	r0, r3
 800d580:	f7ff fb32 	bl	800cbe8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	3301      	adds	r3, #1
 800d588:	607b      	str	r3, [r7, #4]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2b06      	cmp	r3, #6
 800d58e:	d9ef      	bls.n	800d570 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d590:	480d      	ldr	r0, [pc, #52]	@ (800d5c8 <prvInitialiseTaskLists+0x64>)
 800d592:	f7ff fb29 	bl	800cbe8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d596:	480d      	ldr	r0, [pc, #52]	@ (800d5cc <prvInitialiseTaskLists+0x68>)
 800d598:	f7ff fb26 	bl	800cbe8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d59c:	480c      	ldr	r0, [pc, #48]	@ (800d5d0 <prvInitialiseTaskLists+0x6c>)
 800d59e:	f7ff fb23 	bl	800cbe8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d5a2:	480c      	ldr	r0, [pc, #48]	@ (800d5d4 <prvInitialiseTaskLists+0x70>)
 800d5a4:	f7ff fb20 	bl	800cbe8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d5a8:	480b      	ldr	r0, [pc, #44]	@ (800d5d8 <prvInitialiseTaskLists+0x74>)
 800d5aa:	f7ff fb1d 	bl	800cbe8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d5ae:	4b0b      	ldr	r3, [pc, #44]	@ (800d5dc <prvInitialiseTaskLists+0x78>)
 800d5b0:	4a05      	ldr	r2, [pc, #20]	@ (800d5c8 <prvInitialiseTaskLists+0x64>)
 800d5b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d5b4:	4b0a      	ldr	r3, [pc, #40]	@ (800d5e0 <prvInitialiseTaskLists+0x7c>)
 800d5b6:	4a05      	ldr	r2, [pc, #20]	@ (800d5cc <prvInitialiseTaskLists+0x68>)
 800d5b8:	601a      	str	r2, [r3, #0]
}
 800d5ba:	bf00      	nop
 800d5bc:	3708      	adds	r7, #8
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}
 800d5c2:	bf00      	nop
 800d5c4:	20000b00 	.word	0x20000b00
 800d5c8:	20000b8c 	.word	0x20000b8c
 800d5cc:	20000ba0 	.word	0x20000ba0
 800d5d0:	20000bbc 	.word	0x20000bbc
 800d5d4:	20000bd0 	.word	0x20000bd0
 800d5d8:	20000be8 	.word	0x20000be8
 800d5dc:	20000bb4 	.word	0x20000bb4
 800d5e0:	20000bb8 	.word	0x20000bb8

0800d5e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b082      	sub	sp, #8
 800d5e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d5ea:	e019      	b.n	800d620 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d5ec:	f000 faec 	bl	800dbc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5f0:	4b10      	ldr	r3, [pc, #64]	@ (800d634 <prvCheckTasksWaitingTermination+0x50>)
 800d5f2:	68db      	ldr	r3, [r3, #12]
 800d5f4:	68db      	ldr	r3, [r3, #12]
 800d5f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	3304      	adds	r3, #4
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f7ff fb7d 	bl	800ccfc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d602:	4b0d      	ldr	r3, [pc, #52]	@ (800d638 <prvCheckTasksWaitingTermination+0x54>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	3b01      	subs	r3, #1
 800d608:	4a0b      	ldr	r2, [pc, #44]	@ (800d638 <prvCheckTasksWaitingTermination+0x54>)
 800d60a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d60c:	4b0b      	ldr	r3, [pc, #44]	@ (800d63c <prvCheckTasksWaitingTermination+0x58>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	3b01      	subs	r3, #1
 800d612:	4a0a      	ldr	r2, [pc, #40]	@ (800d63c <prvCheckTasksWaitingTermination+0x58>)
 800d614:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d616:	f000 fb09 	bl	800dc2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f000 f810 	bl	800d640 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d620:	4b06      	ldr	r3, [pc, #24]	@ (800d63c <prvCheckTasksWaitingTermination+0x58>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d1e1      	bne.n	800d5ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d628:	bf00      	nop
 800d62a:	bf00      	nop
 800d62c:	3708      	adds	r7, #8
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}
 800d632:	bf00      	nop
 800d634:	20000bd0 	.word	0x20000bd0
 800d638:	20000bfc 	.word	0x20000bfc
 800d63c:	20000be4 	.word	0x20000be4

0800d640 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d640:	b580      	push	{r7, lr}
 800d642:	b084      	sub	sp, #16
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d108      	bne.n	800d664 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d656:	4618      	mov	r0, r3
 800d658:	f000 fca6 	bl	800dfa8 <vPortFree>
				vPortFree( pxTCB );
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f000 fca3 	bl	800dfa8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d662:	e019      	b.n	800d698 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d66a:	2b01      	cmp	r3, #1
 800d66c:	d103      	bne.n	800d676 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f000 fc9a 	bl	800dfa8 <vPortFree>
	}
 800d674:	e010      	b.n	800d698 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d67c:	2b02      	cmp	r3, #2
 800d67e:	d00b      	beq.n	800d698 <prvDeleteTCB+0x58>
	__asm volatile
 800d680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d684:	f383 8811 	msr	BASEPRI, r3
 800d688:	f3bf 8f6f 	isb	sy
 800d68c:	f3bf 8f4f 	dsb	sy
 800d690:	60fb      	str	r3, [r7, #12]
}
 800d692:	bf00      	nop
 800d694:	bf00      	nop
 800d696:	e7fd      	b.n	800d694 <prvDeleteTCB+0x54>
	}
 800d698:	bf00      	nop
 800d69a:	3710      	adds	r7, #16
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}

0800d6a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b083      	sub	sp, #12
 800d6a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d6a6:	4b0c      	ldr	r3, [pc, #48]	@ (800d6d8 <prvResetNextTaskUnblockTime+0x38>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d104      	bne.n	800d6ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d6b0:	4b0a      	ldr	r3, [pc, #40]	@ (800d6dc <prvResetNextTaskUnblockTime+0x3c>)
 800d6b2:	f04f 32ff 	mov.w	r2, #4294967295
 800d6b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d6b8:	e008      	b.n	800d6cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6ba:	4b07      	ldr	r3, [pc, #28]	@ (800d6d8 <prvResetNextTaskUnblockTime+0x38>)
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	68db      	ldr	r3, [r3, #12]
 800d6c0:	68db      	ldr	r3, [r3, #12]
 800d6c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	685b      	ldr	r3, [r3, #4]
 800d6c8:	4a04      	ldr	r2, [pc, #16]	@ (800d6dc <prvResetNextTaskUnblockTime+0x3c>)
 800d6ca:	6013      	str	r3, [r2, #0]
}
 800d6cc:	bf00      	nop
 800d6ce:	370c      	adds	r7, #12
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d6:	4770      	bx	lr
 800d6d8:	20000bb4 	.word	0x20000bb4
 800d6dc:	20000c1c 	.word	0x20000c1c

0800d6e0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b084      	sub	sp, #16
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800d6ea:	f000 fa6d 	bl	800dbc8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800d6ee:	4b1e      	ldr	r3, [pc, #120]	@ (800d768 <ulTaskNotifyTake+0x88>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d113      	bne.n	800d720 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d6f8:	4b1b      	ldr	r3, [pc, #108]	@ (800d768 <ulTaskNotifyTake+0x88>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	2201      	movs	r2, #1
 800d6fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d00b      	beq.n	800d720 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d708:	2101      	movs	r1, #1
 800d70a:	6838      	ldr	r0, [r7, #0]
 800d70c:	f000 f8c4 	bl	800d898 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d710:	4b16      	ldr	r3, [pc, #88]	@ (800d76c <ulTaskNotifyTake+0x8c>)
 800d712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d716:	601a      	str	r2, [r3, #0]
 800d718:	f3bf 8f4f 	dsb	sy
 800d71c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d720:	f000 fa84 	bl	800dc2c <vPortExitCritical>

		taskENTER_CRITICAL();
 800d724:	f000 fa50 	bl	800dbc8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800d728:	4b0f      	ldr	r3, [pc, #60]	@ (800d768 <ulTaskNotifyTake+0x88>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d72e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d00c      	beq.n	800d750 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d004      	beq.n	800d746 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800d73c:	4b0a      	ldr	r3, [pc, #40]	@ (800d768 <ulTaskNotifyTake+0x88>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	2200      	movs	r2, #0
 800d742:	64da      	str	r2, [r3, #76]	@ 0x4c
 800d744:	e004      	b.n	800d750 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800d746:	4b08      	ldr	r3, [pc, #32]	@ (800d768 <ulTaskNotifyTake+0x88>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	68fa      	ldr	r2, [r7, #12]
 800d74c:	3a01      	subs	r2, #1
 800d74e:	64da      	str	r2, [r3, #76]	@ 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d750:	4b05      	ldr	r3, [pc, #20]	@ (800d768 <ulTaskNotifyTake+0x88>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	2200      	movs	r2, #0
 800d756:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 800d75a:	f000 fa67 	bl	800dc2c <vPortExitCritical>

		return ulReturn;
 800d75e:	68fb      	ldr	r3, [r7, #12]
	}
 800d760:	4618      	mov	r0, r3
 800d762:	3710      	adds	r7, #16
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}
 800d768:	20000afc 	.word	0x20000afc
 800d76c:	e000ed04 	.word	0xe000ed04

0800d770 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d770:	b580      	push	{r7, lr}
 800d772:	b08a      	sub	sp, #40	@ 0x28
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
 800d778:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d10b      	bne.n	800d798 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800d780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d784:	f383 8811 	msr	BASEPRI, r3
 800d788:	f3bf 8f6f 	isb	sy
 800d78c:	f3bf 8f4f 	dsb	sy
 800d790:	61bb      	str	r3, [r7, #24]
}
 800d792:	bf00      	nop
 800d794:	bf00      	nop
 800d796:	e7fd      	b.n	800d794 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d798:	f000 faf6 	bl	800dd88 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	627b      	str	r3, [r7, #36]	@ 0x24

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d7a0:	f3ef 8211 	mrs	r2, BASEPRI
 800d7a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7a8:	f383 8811 	msr	BASEPRI, r3
 800d7ac:	f3bf 8f6f 	isb	sy
 800d7b0:	f3bf 8f4f 	dsb	sy
 800d7b4:	617a      	str	r2, [r7, #20]
 800d7b6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d7b8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d7ba:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d7bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d7c2:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7c6:	2202      	movs	r2, #2
 800d7c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800d7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d7d0:	1c5a      	adds	r2, r3, #1
 800d7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7d4:	64da      	str	r2, [r3, #76]	@ 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d7d6:	7ffb      	ldrb	r3, [r7, #31]
 800d7d8:	2b01      	cmp	r3, #1
 800d7da:	d146      	bne.n	800d86a <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d00b      	beq.n	800d7fc <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 800d7e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7e8:	f383 8811 	msr	BASEPRI, r3
 800d7ec:	f3bf 8f6f 	isb	sy
 800d7f0:	f3bf 8f4f 	dsb	sy
 800d7f4:	60fb      	str	r3, [r7, #12]
}
 800d7f6:	bf00      	nop
 800d7f8:	bf00      	nop
 800d7fa:	e7fd      	b.n	800d7f8 <vTaskNotifyGiveFromISR+0x88>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7fc:	4b20      	ldr	r3, [pc, #128]	@ (800d880 <vTaskNotifyGiveFromISR+0x110>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d11c      	bne.n	800d83e <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d806:	3304      	adds	r3, #4
 800d808:	4618      	mov	r0, r3
 800d80a:	f7ff fa77 	bl	800ccfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d80e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d812:	2201      	movs	r2, #1
 800d814:	409a      	lsls	r2, r3
 800d816:	4b1b      	ldr	r3, [pc, #108]	@ (800d884 <vTaskNotifyGiveFromISR+0x114>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	4313      	orrs	r3, r2
 800d81c:	4a19      	ldr	r2, [pc, #100]	@ (800d884 <vTaskNotifyGiveFromISR+0x114>)
 800d81e:	6013      	str	r3, [r2, #0]
 800d820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d824:	4613      	mov	r3, r2
 800d826:	009b      	lsls	r3, r3, #2
 800d828:	4413      	add	r3, r2
 800d82a:	009b      	lsls	r3, r3, #2
 800d82c:	4a16      	ldr	r2, [pc, #88]	@ (800d888 <vTaskNotifyGiveFromISR+0x118>)
 800d82e:	441a      	add	r2, r3
 800d830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d832:	3304      	adds	r3, #4
 800d834:	4619      	mov	r1, r3
 800d836:	4610      	mov	r0, r2
 800d838:	f7ff fa03 	bl	800cc42 <vListInsertEnd>
 800d83c:	e005      	b.n	800d84a <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800d83e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d840:	3318      	adds	r3, #24
 800d842:	4619      	mov	r1, r3
 800d844:	4811      	ldr	r0, [pc, #68]	@ (800d88c <vTaskNotifyGiveFromISR+0x11c>)
 800d846:	f7ff f9fc 	bl	800cc42 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d84c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d84e:	4b10      	ldr	r3, [pc, #64]	@ (800d890 <vTaskNotifyGiveFromISR+0x120>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d854:	429a      	cmp	r2, r3
 800d856:	d908      	bls.n	800d86a <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d002      	beq.n	800d864 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	2201      	movs	r2, #1
 800d862:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800d864:	4b0b      	ldr	r3, [pc, #44]	@ (800d894 <vTaskNotifyGiveFromISR+0x124>)
 800d866:	2201      	movs	r2, #1
 800d868:	601a      	str	r2, [r3, #0]
 800d86a:	6a3b      	ldr	r3, [r7, #32]
 800d86c:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d874:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800d876:	bf00      	nop
 800d878:	3728      	adds	r7, #40	@ 0x28
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	bf00      	nop
 800d880:	20000c24 	.word	0x20000c24
 800d884:	20000c04 	.word	0x20000c04
 800d888:	20000b00 	.word	0x20000b00
 800d88c:	20000bbc 	.word	0x20000bbc
 800d890:	20000afc 	.word	0x20000afc
 800d894:	20000c10 	.word	0x20000c10

0800d898 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b084      	sub	sp, #16
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
 800d8a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d8a2:	4b29      	ldr	r3, [pc, #164]	@ (800d948 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8a8:	4b28      	ldr	r3, [pc, #160]	@ (800d94c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	3304      	adds	r3, #4
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f7ff fa24 	bl	800ccfc <uxListRemove>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d10b      	bne.n	800d8d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d8ba:	4b24      	ldr	r3, [pc, #144]	@ (800d94c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8c0:	2201      	movs	r2, #1
 800d8c2:	fa02 f303 	lsl.w	r3, r2, r3
 800d8c6:	43da      	mvns	r2, r3
 800d8c8:	4b21      	ldr	r3, [pc, #132]	@ (800d950 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	4013      	ands	r3, r2
 800d8ce:	4a20      	ldr	r2, [pc, #128]	@ (800d950 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d8d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8d8:	d10a      	bne.n	800d8f0 <prvAddCurrentTaskToDelayedList+0x58>
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d007      	beq.n	800d8f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d8e0:	4b1a      	ldr	r3, [pc, #104]	@ (800d94c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	3304      	adds	r3, #4
 800d8e6:	4619      	mov	r1, r3
 800d8e8:	481a      	ldr	r0, [pc, #104]	@ (800d954 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d8ea:	f7ff f9aa 	bl	800cc42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d8ee:	e026      	b.n	800d93e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d8f0:	68fa      	ldr	r2, [r7, #12]
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	4413      	add	r3, r2
 800d8f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d8f8:	4b14      	ldr	r3, [pc, #80]	@ (800d94c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	68ba      	ldr	r2, [r7, #8]
 800d8fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d900:	68ba      	ldr	r2, [r7, #8]
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	429a      	cmp	r2, r3
 800d906:	d209      	bcs.n	800d91c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d908:	4b13      	ldr	r3, [pc, #76]	@ (800d958 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d90a:	681a      	ldr	r2, [r3, #0]
 800d90c:	4b0f      	ldr	r3, [pc, #60]	@ (800d94c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	3304      	adds	r3, #4
 800d912:	4619      	mov	r1, r3
 800d914:	4610      	mov	r0, r2
 800d916:	f7ff f9b8 	bl	800cc8a <vListInsert>
}
 800d91a:	e010      	b.n	800d93e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d91c:	4b0f      	ldr	r3, [pc, #60]	@ (800d95c <prvAddCurrentTaskToDelayedList+0xc4>)
 800d91e:	681a      	ldr	r2, [r3, #0]
 800d920:	4b0a      	ldr	r3, [pc, #40]	@ (800d94c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	3304      	adds	r3, #4
 800d926:	4619      	mov	r1, r3
 800d928:	4610      	mov	r0, r2
 800d92a:	f7ff f9ae 	bl	800cc8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d92e:	4b0c      	ldr	r3, [pc, #48]	@ (800d960 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	68ba      	ldr	r2, [r7, #8]
 800d934:	429a      	cmp	r2, r3
 800d936:	d202      	bcs.n	800d93e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d938:	4a09      	ldr	r2, [pc, #36]	@ (800d960 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	6013      	str	r3, [r2, #0]
}
 800d93e:	bf00      	nop
 800d940:	3710      	adds	r7, #16
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}
 800d946:	bf00      	nop
 800d948:	20000c00 	.word	0x20000c00
 800d94c:	20000afc 	.word	0x20000afc
 800d950:	20000c04 	.word	0x20000c04
 800d954:	20000be8 	.word	0x20000be8
 800d958:	20000bb8 	.word	0x20000bb8
 800d95c:	20000bb4 	.word	0x20000bb4
 800d960:	20000c1c 	.word	0x20000c1c

0800d964 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d964:	b480      	push	{r7}
 800d966:	b085      	sub	sp, #20
 800d968:	af00      	add	r7, sp, #0
 800d96a:	60f8      	str	r0, [r7, #12]
 800d96c:	60b9      	str	r1, [r7, #8]
 800d96e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	3b04      	subs	r3, #4
 800d974:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d97c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	3b04      	subs	r3, #4
 800d982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	f023 0201 	bic.w	r2, r3, #1
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	3b04      	subs	r3, #4
 800d992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d994:	4a0c      	ldr	r2, [pc, #48]	@ (800d9c8 <pxPortInitialiseStack+0x64>)
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	3b14      	subs	r3, #20
 800d99e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d9a0:	687a      	ldr	r2, [r7, #4]
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	3b04      	subs	r3, #4
 800d9aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	f06f 0202 	mvn.w	r2, #2
 800d9b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	3b20      	subs	r3, #32
 800d9b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3714      	adds	r7, #20
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c6:	4770      	bx	lr
 800d9c8:	0800d9cd 	.word	0x0800d9cd

0800d9cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d9cc:	b480      	push	{r7}
 800d9ce:	b085      	sub	sp, #20
 800d9d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d9d6:	4b13      	ldr	r3, [pc, #76]	@ (800da24 <prvTaskExitError+0x58>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9de:	d00b      	beq.n	800d9f8 <prvTaskExitError+0x2c>
	__asm volatile
 800d9e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9e4:	f383 8811 	msr	BASEPRI, r3
 800d9e8:	f3bf 8f6f 	isb	sy
 800d9ec:	f3bf 8f4f 	dsb	sy
 800d9f0:	60fb      	str	r3, [r7, #12]
}
 800d9f2:	bf00      	nop
 800d9f4:	bf00      	nop
 800d9f6:	e7fd      	b.n	800d9f4 <prvTaskExitError+0x28>
	__asm volatile
 800d9f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9fc:	f383 8811 	msr	BASEPRI, r3
 800da00:	f3bf 8f6f 	isb	sy
 800da04:	f3bf 8f4f 	dsb	sy
 800da08:	60bb      	str	r3, [r7, #8]
}
 800da0a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800da0c:	bf00      	nop
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d0fc      	beq.n	800da0e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800da14:	bf00      	nop
 800da16:	bf00      	nop
 800da18:	3714      	adds	r7, #20
 800da1a:	46bd      	mov	sp, r7
 800da1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da20:	4770      	bx	lr
 800da22:	bf00      	nop
 800da24:	20000140 	.word	0x20000140
	...

0800da30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800da30:	4b07      	ldr	r3, [pc, #28]	@ (800da50 <pxCurrentTCBConst2>)
 800da32:	6819      	ldr	r1, [r3, #0]
 800da34:	6808      	ldr	r0, [r1, #0]
 800da36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da3a:	f380 8809 	msr	PSP, r0
 800da3e:	f3bf 8f6f 	isb	sy
 800da42:	f04f 0000 	mov.w	r0, #0
 800da46:	f380 8811 	msr	BASEPRI, r0
 800da4a:	4770      	bx	lr
 800da4c:	f3af 8000 	nop.w

0800da50 <pxCurrentTCBConst2>:
 800da50:	20000afc 	.word	0x20000afc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800da54:	bf00      	nop
 800da56:	bf00      	nop

0800da58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800da58:	4808      	ldr	r0, [pc, #32]	@ (800da7c <prvPortStartFirstTask+0x24>)
 800da5a:	6800      	ldr	r0, [r0, #0]
 800da5c:	6800      	ldr	r0, [r0, #0]
 800da5e:	f380 8808 	msr	MSP, r0
 800da62:	f04f 0000 	mov.w	r0, #0
 800da66:	f380 8814 	msr	CONTROL, r0
 800da6a:	b662      	cpsie	i
 800da6c:	b661      	cpsie	f
 800da6e:	f3bf 8f4f 	dsb	sy
 800da72:	f3bf 8f6f 	isb	sy
 800da76:	df00      	svc	0
 800da78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800da7a:	bf00      	nop
 800da7c:	e000ed08 	.word	0xe000ed08

0800da80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b086      	sub	sp, #24
 800da84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800da86:	4b47      	ldr	r3, [pc, #284]	@ (800dba4 <xPortStartScheduler+0x124>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	4a47      	ldr	r2, [pc, #284]	@ (800dba8 <xPortStartScheduler+0x128>)
 800da8c:	4293      	cmp	r3, r2
 800da8e:	d10b      	bne.n	800daa8 <xPortStartScheduler+0x28>
	__asm volatile
 800da90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da94:	f383 8811 	msr	BASEPRI, r3
 800da98:	f3bf 8f6f 	isb	sy
 800da9c:	f3bf 8f4f 	dsb	sy
 800daa0:	60fb      	str	r3, [r7, #12]
}
 800daa2:	bf00      	nop
 800daa4:	bf00      	nop
 800daa6:	e7fd      	b.n	800daa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800daa8:	4b3e      	ldr	r3, [pc, #248]	@ (800dba4 <xPortStartScheduler+0x124>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	4a3f      	ldr	r2, [pc, #252]	@ (800dbac <xPortStartScheduler+0x12c>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	d10b      	bne.n	800daca <xPortStartScheduler+0x4a>
	__asm volatile
 800dab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dab6:	f383 8811 	msr	BASEPRI, r3
 800daba:	f3bf 8f6f 	isb	sy
 800dabe:	f3bf 8f4f 	dsb	sy
 800dac2:	613b      	str	r3, [r7, #16]
}
 800dac4:	bf00      	nop
 800dac6:	bf00      	nop
 800dac8:	e7fd      	b.n	800dac6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800daca:	4b39      	ldr	r3, [pc, #228]	@ (800dbb0 <xPortStartScheduler+0x130>)
 800dacc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	781b      	ldrb	r3, [r3, #0]
 800dad2:	b2db      	uxtb	r3, r3
 800dad4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dad6:	697b      	ldr	r3, [r7, #20]
 800dad8:	22ff      	movs	r2, #255	@ 0xff
 800dada:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	781b      	ldrb	r3, [r3, #0]
 800dae0:	b2db      	uxtb	r3, r3
 800dae2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dae4:	78fb      	ldrb	r3, [r7, #3]
 800dae6:	b2db      	uxtb	r3, r3
 800dae8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800daec:	b2da      	uxtb	r2, r3
 800daee:	4b31      	ldr	r3, [pc, #196]	@ (800dbb4 <xPortStartScheduler+0x134>)
 800daf0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800daf2:	4b31      	ldr	r3, [pc, #196]	@ (800dbb8 <xPortStartScheduler+0x138>)
 800daf4:	2207      	movs	r2, #7
 800daf6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800daf8:	e009      	b.n	800db0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800dafa:	4b2f      	ldr	r3, [pc, #188]	@ (800dbb8 <xPortStartScheduler+0x138>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	3b01      	subs	r3, #1
 800db00:	4a2d      	ldr	r2, [pc, #180]	@ (800dbb8 <xPortStartScheduler+0x138>)
 800db02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800db04:	78fb      	ldrb	r3, [r7, #3]
 800db06:	b2db      	uxtb	r3, r3
 800db08:	005b      	lsls	r3, r3, #1
 800db0a:	b2db      	uxtb	r3, r3
 800db0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800db0e:	78fb      	ldrb	r3, [r7, #3]
 800db10:	b2db      	uxtb	r3, r3
 800db12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db16:	2b80      	cmp	r3, #128	@ 0x80
 800db18:	d0ef      	beq.n	800dafa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800db1a:	4b27      	ldr	r3, [pc, #156]	@ (800dbb8 <xPortStartScheduler+0x138>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	f1c3 0307 	rsb	r3, r3, #7
 800db22:	2b04      	cmp	r3, #4
 800db24:	d00b      	beq.n	800db3e <xPortStartScheduler+0xbe>
	__asm volatile
 800db26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db2a:	f383 8811 	msr	BASEPRI, r3
 800db2e:	f3bf 8f6f 	isb	sy
 800db32:	f3bf 8f4f 	dsb	sy
 800db36:	60bb      	str	r3, [r7, #8]
}
 800db38:	bf00      	nop
 800db3a:	bf00      	nop
 800db3c:	e7fd      	b.n	800db3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800db3e:	4b1e      	ldr	r3, [pc, #120]	@ (800dbb8 <xPortStartScheduler+0x138>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	021b      	lsls	r3, r3, #8
 800db44:	4a1c      	ldr	r2, [pc, #112]	@ (800dbb8 <xPortStartScheduler+0x138>)
 800db46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800db48:	4b1b      	ldr	r3, [pc, #108]	@ (800dbb8 <xPortStartScheduler+0x138>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800db50:	4a19      	ldr	r2, [pc, #100]	@ (800dbb8 <xPortStartScheduler+0x138>)
 800db52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	b2da      	uxtb	r2, r3
 800db58:	697b      	ldr	r3, [r7, #20]
 800db5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800db5c:	4b17      	ldr	r3, [pc, #92]	@ (800dbbc <xPortStartScheduler+0x13c>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	4a16      	ldr	r2, [pc, #88]	@ (800dbbc <xPortStartScheduler+0x13c>)
 800db62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800db66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800db68:	4b14      	ldr	r3, [pc, #80]	@ (800dbbc <xPortStartScheduler+0x13c>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	4a13      	ldr	r2, [pc, #76]	@ (800dbbc <xPortStartScheduler+0x13c>)
 800db6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800db72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800db74:	f000 f8da 	bl	800dd2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800db78:	4b11      	ldr	r3, [pc, #68]	@ (800dbc0 <xPortStartScheduler+0x140>)
 800db7a:	2200      	movs	r2, #0
 800db7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800db7e:	f000 f8f9 	bl	800dd74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800db82:	4b10      	ldr	r3, [pc, #64]	@ (800dbc4 <xPortStartScheduler+0x144>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	4a0f      	ldr	r2, [pc, #60]	@ (800dbc4 <xPortStartScheduler+0x144>)
 800db88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800db8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800db8e:	f7ff ff63 	bl	800da58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800db92:	f7ff fc73 	bl	800d47c <vTaskSwitchContext>
	prvTaskExitError();
 800db96:	f7ff ff19 	bl	800d9cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800db9a:	2300      	movs	r3, #0
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3718      	adds	r7, #24
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}
 800dba4:	e000ed00 	.word	0xe000ed00
 800dba8:	410fc271 	.word	0x410fc271
 800dbac:	410fc270 	.word	0x410fc270
 800dbb0:	e000e400 	.word	0xe000e400
 800dbb4:	20000c28 	.word	0x20000c28
 800dbb8:	20000c2c 	.word	0x20000c2c
 800dbbc:	e000ed20 	.word	0xe000ed20
 800dbc0:	20000140 	.word	0x20000140
 800dbc4:	e000ef34 	.word	0xe000ef34

0800dbc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dbc8:	b480      	push	{r7}
 800dbca:	b083      	sub	sp, #12
 800dbcc:	af00      	add	r7, sp, #0
	__asm volatile
 800dbce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbd2:	f383 8811 	msr	BASEPRI, r3
 800dbd6:	f3bf 8f6f 	isb	sy
 800dbda:	f3bf 8f4f 	dsb	sy
 800dbde:	607b      	str	r3, [r7, #4]
}
 800dbe0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dbe2:	4b10      	ldr	r3, [pc, #64]	@ (800dc24 <vPortEnterCritical+0x5c>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	3301      	adds	r3, #1
 800dbe8:	4a0e      	ldr	r2, [pc, #56]	@ (800dc24 <vPortEnterCritical+0x5c>)
 800dbea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dbec:	4b0d      	ldr	r3, [pc, #52]	@ (800dc24 <vPortEnterCritical+0x5c>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	2b01      	cmp	r3, #1
 800dbf2:	d110      	bne.n	800dc16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dbf4:	4b0c      	ldr	r3, [pc, #48]	@ (800dc28 <vPortEnterCritical+0x60>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	b2db      	uxtb	r3, r3
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d00b      	beq.n	800dc16 <vPortEnterCritical+0x4e>
	__asm volatile
 800dbfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc02:	f383 8811 	msr	BASEPRI, r3
 800dc06:	f3bf 8f6f 	isb	sy
 800dc0a:	f3bf 8f4f 	dsb	sy
 800dc0e:	603b      	str	r3, [r7, #0]
}
 800dc10:	bf00      	nop
 800dc12:	bf00      	nop
 800dc14:	e7fd      	b.n	800dc12 <vPortEnterCritical+0x4a>
	}
}
 800dc16:	bf00      	nop
 800dc18:	370c      	adds	r7, #12
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc20:	4770      	bx	lr
 800dc22:	bf00      	nop
 800dc24:	20000140 	.word	0x20000140
 800dc28:	e000ed04 	.word	0xe000ed04

0800dc2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b083      	sub	sp, #12
 800dc30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dc32:	4b12      	ldr	r3, [pc, #72]	@ (800dc7c <vPortExitCritical+0x50>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d10b      	bne.n	800dc52 <vPortExitCritical+0x26>
	__asm volatile
 800dc3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc3e:	f383 8811 	msr	BASEPRI, r3
 800dc42:	f3bf 8f6f 	isb	sy
 800dc46:	f3bf 8f4f 	dsb	sy
 800dc4a:	607b      	str	r3, [r7, #4]
}
 800dc4c:	bf00      	nop
 800dc4e:	bf00      	nop
 800dc50:	e7fd      	b.n	800dc4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dc52:	4b0a      	ldr	r3, [pc, #40]	@ (800dc7c <vPortExitCritical+0x50>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	3b01      	subs	r3, #1
 800dc58:	4a08      	ldr	r2, [pc, #32]	@ (800dc7c <vPortExitCritical+0x50>)
 800dc5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dc5c:	4b07      	ldr	r3, [pc, #28]	@ (800dc7c <vPortExitCritical+0x50>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d105      	bne.n	800dc70 <vPortExitCritical+0x44>
 800dc64:	2300      	movs	r3, #0
 800dc66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	f383 8811 	msr	BASEPRI, r3
}
 800dc6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dc70:	bf00      	nop
 800dc72:	370c      	adds	r7, #12
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr
 800dc7c:	20000140 	.word	0x20000140

0800dc80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dc80:	f3ef 8009 	mrs	r0, PSP
 800dc84:	f3bf 8f6f 	isb	sy
 800dc88:	4b15      	ldr	r3, [pc, #84]	@ (800dce0 <pxCurrentTCBConst>)
 800dc8a:	681a      	ldr	r2, [r3, #0]
 800dc8c:	f01e 0f10 	tst.w	lr, #16
 800dc90:	bf08      	it	eq
 800dc92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dc96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc9a:	6010      	str	r0, [r2, #0]
 800dc9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dca0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800dca4:	f380 8811 	msr	BASEPRI, r0
 800dca8:	f3bf 8f4f 	dsb	sy
 800dcac:	f3bf 8f6f 	isb	sy
 800dcb0:	f7ff fbe4 	bl	800d47c <vTaskSwitchContext>
 800dcb4:	f04f 0000 	mov.w	r0, #0
 800dcb8:	f380 8811 	msr	BASEPRI, r0
 800dcbc:	bc09      	pop	{r0, r3}
 800dcbe:	6819      	ldr	r1, [r3, #0]
 800dcc0:	6808      	ldr	r0, [r1, #0]
 800dcc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcc6:	f01e 0f10 	tst.w	lr, #16
 800dcca:	bf08      	it	eq
 800dccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dcd0:	f380 8809 	msr	PSP, r0
 800dcd4:	f3bf 8f6f 	isb	sy
 800dcd8:	4770      	bx	lr
 800dcda:	bf00      	nop
 800dcdc:	f3af 8000 	nop.w

0800dce0 <pxCurrentTCBConst>:
 800dce0:	20000afc 	.word	0x20000afc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dce4:	bf00      	nop
 800dce6:	bf00      	nop

0800dce8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b082      	sub	sp, #8
 800dcec:	af00      	add	r7, sp, #0
	__asm volatile
 800dcee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcf2:	f383 8811 	msr	BASEPRI, r3
 800dcf6:	f3bf 8f6f 	isb	sy
 800dcfa:	f3bf 8f4f 	dsb	sy
 800dcfe:	607b      	str	r3, [r7, #4]
}
 800dd00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dd02:	f7ff fb01 	bl	800d308 <xTaskIncrementTick>
 800dd06:	4603      	mov	r3, r0
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d003      	beq.n	800dd14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dd0c:	4b06      	ldr	r3, [pc, #24]	@ (800dd28 <SysTick_Handler+0x40>)
 800dd0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd12:	601a      	str	r2, [r3, #0]
 800dd14:	2300      	movs	r3, #0
 800dd16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	f383 8811 	msr	BASEPRI, r3
}
 800dd1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dd20:	bf00      	nop
 800dd22:	3708      	adds	r7, #8
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}
 800dd28:	e000ed04 	.word	0xe000ed04

0800dd2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dd2c:	b480      	push	{r7}
 800dd2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dd30:	4b0b      	ldr	r3, [pc, #44]	@ (800dd60 <vPortSetupTimerInterrupt+0x34>)
 800dd32:	2200      	movs	r2, #0
 800dd34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dd36:	4b0b      	ldr	r3, [pc, #44]	@ (800dd64 <vPortSetupTimerInterrupt+0x38>)
 800dd38:	2200      	movs	r2, #0
 800dd3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dd3c:	4b0a      	ldr	r3, [pc, #40]	@ (800dd68 <vPortSetupTimerInterrupt+0x3c>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	4a0a      	ldr	r2, [pc, #40]	@ (800dd6c <vPortSetupTimerInterrupt+0x40>)
 800dd42:	fba2 2303 	umull	r2, r3, r2, r3
 800dd46:	099b      	lsrs	r3, r3, #6
 800dd48:	4a09      	ldr	r2, [pc, #36]	@ (800dd70 <vPortSetupTimerInterrupt+0x44>)
 800dd4a:	3b01      	subs	r3, #1
 800dd4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dd4e:	4b04      	ldr	r3, [pc, #16]	@ (800dd60 <vPortSetupTimerInterrupt+0x34>)
 800dd50:	2207      	movs	r2, #7
 800dd52:	601a      	str	r2, [r3, #0]
}
 800dd54:	bf00      	nop
 800dd56:	46bd      	mov	sp, r7
 800dd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5c:	4770      	bx	lr
 800dd5e:	bf00      	nop
 800dd60:	e000e010 	.word	0xe000e010
 800dd64:	e000e018 	.word	0xe000e018
 800dd68:	200000a8 	.word	0x200000a8
 800dd6c:	10624dd3 	.word	0x10624dd3
 800dd70:	e000e014 	.word	0xe000e014

0800dd74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dd74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800dd84 <vPortEnableVFP+0x10>
 800dd78:	6801      	ldr	r1, [r0, #0]
 800dd7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800dd7e:	6001      	str	r1, [r0, #0]
 800dd80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dd82:	bf00      	nop
 800dd84:	e000ed88 	.word	0xe000ed88

0800dd88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dd88:	b480      	push	{r7}
 800dd8a:	b085      	sub	sp, #20
 800dd8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dd8e:	f3ef 8305 	mrs	r3, IPSR
 800dd92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	2b0f      	cmp	r3, #15
 800dd98:	d915      	bls.n	800ddc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dd9a:	4a18      	ldr	r2, [pc, #96]	@ (800ddfc <vPortValidateInterruptPriority+0x74>)
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	4413      	add	r3, r2
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dda4:	4b16      	ldr	r3, [pc, #88]	@ (800de00 <vPortValidateInterruptPriority+0x78>)
 800dda6:	781b      	ldrb	r3, [r3, #0]
 800dda8:	7afa      	ldrb	r2, [r7, #11]
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	d20b      	bcs.n	800ddc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ddae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddb2:	f383 8811 	msr	BASEPRI, r3
 800ddb6:	f3bf 8f6f 	isb	sy
 800ddba:	f3bf 8f4f 	dsb	sy
 800ddbe:	607b      	str	r3, [r7, #4]
}
 800ddc0:	bf00      	nop
 800ddc2:	bf00      	nop
 800ddc4:	e7fd      	b.n	800ddc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ddc6:	4b0f      	ldr	r3, [pc, #60]	@ (800de04 <vPortValidateInterruptPriority+0x7c>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ddce:	4b0e      	ldr	r3, [pc, #56]	@ (800de08 <vPortValidateInterruptPriority+0x80>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	429a      	cmp	r2, r3
 800ddd4:	d90b      	bls.n	800ddee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ddd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddda:	f383 8811 	msr	BASEPRI, r3
 800ddde:	f3bf 8f6f 	isb	sy
 800dde2:	f3bf 8f4f 	dsb	sy
 800dde6:	603b      	str	r3, [r7, #0]
}
 800dde8:	bf00      	nop
 800ddea:	bf00      	nop
 800ddec:	e7fd      	b.n	800ddea <vPortValidateInterruptPriority+0x62>
	}
 800ddee:	bf00      	nop
 800ddf0:	3714      	adds	r7, #20
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf8:	4770      	bx	lr
 800ddfa:	bf00      	nop
 800ddfc:	e000e3f0 	.word	0xe000e3f0
 800de00:	20000c28 	.word	0x20000c28
 800de04:	e000ed0c 	.word	0xe000ed0c
 800de08:	20000c2c 	.word	0x20000c2c

0800de0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b08a      	sub	sp, #40	@ 0x28
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800de14:	2300      	movs	r3, #0
 800de16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800de18:	f7ff f9ca 	bl	800d1b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800de1c:	4b5c      	ldr	r3, [pc, #368]	@ (800df90 <pvPortMalloc+0x184>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d101      	bne.n	800de28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800de24:	f000 f924 	bl	800e070 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800de28:	4b5a      	ldr	r3, [pc, #360]	@ (800df94 <pvPortMalloc+0x188>)
 800de2a:	681a      	ldr	r2, [r3, #0]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	4013      	ands	r3, r2
 800de30:	2b00      	cmp	r3, #0
 800de32:	f040 8095 	bne.w	800df60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d01e      	beq.n	800de7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800de3c:	2208      	movs	r2, #8
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	4413      	add	r3, r2
 800de42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	f003 0307 	and.w	r3, r3, #7
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d015      	beq.n	800de7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f023 0307 	bic.w	r3, r3, #7
 800de54:	3308      	adds	r3, #8
 800de56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f003 0307 	and.w	r3, r3, #7
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d00b      	beq.n	800de7a <pvPortMalloc+0x6e>
	__asm volatile
 800de62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de66:	f383 8811 	msr	BASEPRI, r3
 800de6a:	f3bf 8f6f 	isb	sy
 800de6e:	f3bf 8f4f 	dsb	sy
 800de72:	617b      	str	r3, [r7, #20]
}
 800de74:	bf00      	nop
 800de76:	bf00      	nop
 800de78:	e7fd      	b.n	800de76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d06f      	beq.n	800df60 <pvPortMalloc+0x154>
 800de80:	4b45      	ldr	r3, [pc, #276]	@ (800df98 <pvPortMalloc+0x18c>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	687a      	ldr	r2, [r7, #4]
 800de86:	429a      	cmp	r2, r3
 800de88:	d86a      	bhi.n	800df60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800de8a:	4b44      	ldr	r3, [pc, #272]	@ (800df9c <pvPortMalloc+0x190>)
 800de8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800de8e:	4b43      	ldr	r3, [pc, #268]	@ (800df9c <pvPortMalloc+0x190>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800de94:	e004      	b.n	800dea0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800de96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800de9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dea2:	685b      	ldr	r3, [r3, #4]
 800dea4:	687a      	ldr	r2, [r7, #4]
 800dea6:	429a      	cmp	r2, r3
 800dea8:	d903      	bls.n	800deb2 <pvPortMalloc+0xa6>
 800deaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d1f1      	bne.n	800de96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800deb2:	4b37      	ldr	r3, [pc, #220]	@ (800df90 <pvPortMalloc+0x184>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800deb8:	429a      	cmp	r2, r3
 800deba:	d051      	beq.n	800df60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800debc:	6a3b      	ldr	r3, [r7, #32]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	2208      	movs	r2, #8
 800dec2:	4413      	add	r3, r2
 800dec4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dec8:	681a      	ldr	r2, [r3, #0]
 800deca:	6a3b      	ldr	r3, [r7, #32]
 800decc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ded0:	685a      	ldr	r2, [r3, #4]
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	1ad2      	subs	r2, r2, r3
 800ded6:	2308      	movs	r3, #8
 800ded8:	005b      	lsls	r3, r3, #1
 800deda:	429a      	cmp	r2, r3
 800dedc:	d920      	bls.n	800df20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	4413      	add	r3, r2
 800dee4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dee6:	69bb      	ldr	r3, [r7, #24]
 800dee8:	f003 0307 	and.w	r3, r3, #7
 800deec:	2b00      	cmp	r3, #0
 800deee:	d00b      	beq.n	800df08 <pvPortMalloc+0xfc>
	__asm volatile
 800def0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800def4:	f383 8811 	msr	BASEPRI, r3
 800def8:	f3bf 8f6f 	isb	sy
 800defc:	f3bf 8f4f 	dsb	sy
 800df00:	613b      	str	r3, [r7, #16]
}
 800df02:	bf00      	nop
 800df04:	bf00      	nop
 800df06:	e7fd      	b.n	800df04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800df08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df0a:	685a      	ldr	r2, [r3, #4]
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	1ad2      	subs	r2, r2, r3
 800df10:	69bb      	ldr	r3, [r7, #24]
 800df12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800df14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df16:	687a      	ldr	r2, [r7, #4]
 800df18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800df1a:	69b8      	ldr	r0, [r7, #24]
 800df1c:	f000 f90a 	bl	800e134 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800df20:	4b1d      	ldr	r3, [pc, #116]	@ (800df98 <pvPortMalloc+0x18c>)
 800df22:	681a      	ldr	r2, [r3, #0]
 800df24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df26:	685b      	ldr	r3, [r3, #4]
 800df28:	1ad3      	subs	r3, r2, r3
 800df2a:	4a1b      	ldr	r2, [pc, #108]	@ (800df98 <pvPortMalloc+0x18c>)
 800df2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800df2e:	4b1a      	ldr	r3, [pc, #104]	@ (800df98 <pvPortMalloc+0x18c>)
 800df30:	681a      	ldr	r2, [r3, #0]
 800df32:	4b1b      	ldr	r3, [pc, #108]	@ (800dfa0 <pvPortMalloc+0x194>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	429a      	cmp	r2, r3
 800df38:	d203      	bcs.n	800df42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800df3a:	4b17      	ldr	r3, [pc, #92]	@ (800df98 <pvPortMalloc+0x18c>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	4a18      	ldr	r2, [pc, #96]	@ (800dfa0 <pvPortMalloc+0x194>)
 800df40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800df42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df44:	685a      	ldr	r2, [r3, #4]
 800df46:	4b13      	ldr	r3, [pc, #76]	@ (800df94 <pvPortMalloc+0x188>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	431a      	orrs	r2, r3
 800df4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800df50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df52:	2200      	movs	r2, #0
 800df54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800df56:	4b13      	ldr	r3, [pc, #76]	@ (800dfa4 <pvPortMalloc+0x198>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	3301      	adds	r3, #1
 800df5c:	4a11      	ldr	r2, [pc, #68]	@ (800dfa4 <pvPortMalloc+0x198>)
 800df5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800df60:	f7ff f934 	bl	800d1cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800df64:	69fb      	ldr	r3, [r7, #28]
 800df66:	f003 0307 	and.w	r3, r3, #7
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d00b      	beq.n	800df86 <pvPortMalloc+0x17a>
	__asm volatile
 800df6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df72:	f383 8811 	msr	BASEPRI, r3
 800df76:	f3bf 8f6f 	isb	sy
 800df7a:	f3bf 8f4f 	dsb	sy
 800df7e:	60fb      	str	r3, [r7, #12]
}
 800df80:	bf00      	nop
 800df82:	bf00      	nop
 800df84:	e7fd      	b.n	800df82 <pvPortMalloc+0x176>
	return pvReturn;
 800df86:	69fb      	ldr	r3, [r7, #28]
}
 800df88:	4618      	mov	r0, r3
 800df8a:	3728      	adds	r7, #40	@ 0x28
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}
 800df90:	20004838 	.word	0x20004838
 800df94:	2000484c 	.word	0x2000484c
 800df98:	2000483c 	.word	0x2000483c
 800df9c:	20004830 	.word	0x20004830
 800dfa0:	20004840 	.word	0x20004840
 800dfa4:	20004844 	.word	0x20004844

0800dfa8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b086      	sub	sp, #24
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d04f      	beq.n	800e05a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dfba:	2308      	movs	r3, #8
 800dfbc:	425b      	negs	r3, r3
 800dfbe:	697a      	ldr	r2, [r7, #20]
 800dfc0:	4413      	add	r3, r2
 800dfc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dfc4:	697b      	ldr	r3, [r7, #20]
 800dfc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	685a      	ldr	r2, [r3, #4]
 800dfcc:	4b25      	ldr	r3, [pc, #148]	@ (800e064 <vPortFree+0xbc>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	4013      	ands	r3, r2
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d10b      	bne.n	800dfee <vPortFree+0x46>
	__asm volatile
 800dfd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfda:	f383 8811 	msr	BASEPRI, r3
 800dfde:	f3bf 8f6f 	isb	sy
 800dfe2:	f3bf 8f4f 	dsb	sy
 800dfe6:	60fb      	str	r3, [r7, #12]
}
 800dfe8:	bf00      	nop
 800dfea:	bf00      	nop
 800dfec:	e7fd      	b.n	800dfea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d00b      	beq.n	800e00e <vPortFree+0x66>
	__asm volatile
 800dff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dffa:	f383 8811 	msr	BASEPRI, r3
 800dffe:	f3bf 8f6f 	isb	sy
 800e002:	f3bf 8f4f 	dsb	sy
 800e006:	60bb      	str	r3, [r7, #8]
}
 800e008:	bf00      	nop
 800e00a:	bf00      	nop
 800e00c:	e7fd      	b.n	800e00a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e00e:	693b      	ldr	r3, [r7, #16]
 800e010:	685a      	ldr	r2, [r3, #4]
 800e012:	4b14      	ldr	r3, [pc, #80]	@ (800e064 <vPortFree+0xbc>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	4013      	ands	r3, r2
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d01e      	beq.n	800e05a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d11a      	bne.n	800e05a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	685a      	ldr	r2, [r3, #4]
 800e028:	4b0e      	ldr	r3, [pc, #56]	@ (800e064 <vPortFree+0xbc>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	43db      	mvns	r3, r3
 800e02e:	401a      	ands	r2, r3
 800e030:	693b      	ldr	r3, [r7, #16]
 800e032:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e034:	f7ff f8bc 	bl	800d1b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	685a      	ldr	r2, [r3, #4]
 800e03c:	4b0a      	ldr	r3, [pc, #40]	@ (800e068 <vPortFree+0xc0>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	4413      	add	r3, r2
 800e042:	4a09      	ldr	r2, [pc, #36]	@ (800e068 <vPortFree+0xc0>)
 800e044:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e046:	6938      	ldr	r0, [r7, #16]
 800e048:	f000 f874 	bl	800e134 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e04c:	4b07      	ldr	r3, [pc, #28]	@ (800e06c <vPortFree+0xc4>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	3301      	adds	r3, #1
 800e052:	4a06      	ldr	r2, [pc, #24]	@ (800e06c <vPortFree+0xc4>)
 800e054:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e056:	f7ff f8b9 	bl	800d1cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e05a:	bf00      	nop
 800e05c:	3718      	adds	r7, #24
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}
 800e062:	bf00      	nop
 800e064:	2000484c 	.word	0x2000484c
 800e068:	2000483c 	.word	0x2000483c
 800e06c:	20004848 	.word	0x20004848

0800e070 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e070:	b480      	push	{r7}
 800e072:	b085      	sub	sp, #20
 800e074:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e076:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800e07a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e07c:	4b27      	ldr	r3, [pc, #156]	@ (800e11c <prvHeapInit+0xac>)
 800e07e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	f003 0307 	and.w	r3, r3, #7
 800e086:	2b00      	cmp	r3, #0
 800e088:	d00c      	beq.n	800e0a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	3307      	adds	r3, #7
 800e08e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	f023 0307 	bic.w	r3, r3, #7
 800e096:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e098:	68ba      	ldr	r2, [r7, #8]
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	1ad3      	subs	r3, r2, r3
 800e09e:	4a1f      	ldr	r2, [pc, #124]	@ (800e11c <prvHeapInit+0xac>)
 800e0a0:	4413      	add	r3, r2
 800e0a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e0a8:	4a1d      	ldr	r2, [pc, #116]	@ (800e120 <prvHeapInit+0xb0>)
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e0ae:	4b1c      	ldr	r3, [pc, #112]	@ (800e120 <prvHeapInit+0xb0>)
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	68ba      	ldr	r2, [r7, #8]
 800e0b8:	4413      	add	r3, r2
 800e0ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e0bc:	2208      	movs	r2, #8
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	1a9b      	subs	r3, r3, r2
 800e0c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	f023 0307 	bic.w	r3, r3, #7
 800e0ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	4a15      	ldr	r2, [pc, #84]	@ (800e124 <prvHeapInit+0xb4>)
 800e0d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e0d2:	4b14      	ldr	r3, [pc, #80]	@ (800e124 <prvHeapInit+0xb4>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e0da:	4b12      	ldr	r3, [pc, #72]	@ (800e124 <prvHeapInit+0xb4>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	2200      	movs	r2, #0
 800e0e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	68fa      	ldr	r2, [r7, #12]
 800e0ea:	1ad2      	subs	r2, r2, r3
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e0f0:	4b0c      	ldr	r3, [pc, #48]	@ (800e124 <prvHeapInit+0xb4>)
 800e0f2:	681a      	ldr	r2, [r3, #0]
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	685b      	ldr	r3, [r3, #4]
 800e0fc:	4a0a      	ldr	r2, [pc, #40]	@ (800e128 <prvHeapInit+0xb8>)
 800e0fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	685b      	ldr	r3, [r3, #4]
 800e104:	4a09      	ldr	r2, [pc, #36]	@ (800e12c <prvHeapInit+0xbc>)
 800e106:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e108:	4b09      	ldr	r3, [pc, #36]	@ (800e130 <prvHeapInit+0xc0>)
 800e10a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e10e:	601a      	str	r2, [r3, #0]
}
 800e110:	bf00      	nop
 800e112:	3714      	adds	r7, #20
 800e114:	46bd      	mov	sp, r7
 800e116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11a:	4770      	bx	lr
 800e11c:	20000c30 	.word	0x20000c30
 800e120:	20004830 	.word	0x20004830
 800e124:	20004838 	.word	0x20004838
 800e128:	20004840 	.word	0x20004840
 800e12c:	2000483c 	.word	0x2000483c
 800e130:	2000484c 	.word	0x2000484c

0800e134 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e134:	b480      	push	{r7}
 800e136:	b085      	sub	sp, #20
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e13c:	4b28      	ldr	r3, [pc, #160]	@ (800e1e0 <prvInsertBlockIntoFreeList+0xac>)
 800e13e:	60fb      	str	r3, [r7, #12]
 800e140:	e002      	b.n	800e148 <prvInsertBlockIntoFreeList+0x14>
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	60fb      	str	r3, [r7, #12]
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	687a      	ldr	r2, [r7, #4]
 800e14e:	429a      	cmp	r2, r3
 800e150:	d8f7      	bhi.n	800e142 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	685b      	ldr	r3, [r3, #4]
 800e15a:	68ba      	ldr	r2, [r7, #8]
 800e15c:	4413      	add	r3, r2
 800e15e:	687a      	ldr	r2, [r7, #4]
 800e160:	429a      	cmp	r2, r3
 800e162:	d108      	bne.n	800e176 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	685a      	ldr	r2, [r3, #4]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	685b      	ldr	r3, [r3, #4]
 800e16c:	441a      	add	r2, r3
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	685b      	ldr	r3, [r3, #4]
 800e17e:	68ba      	ldr	r2, [r7, #8]
 800e180:	441a      	add	r2, r3
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	429a      	cmp	r2, r3
 800e188:	d118      	bne.n	800e1bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	681a      	ldr	r2, [r3, #0]
 800e18e:	4b15      	ldr	r3, [pc, #84]	@ (800e1e4 <prvInsertBlockIntoFreeList+0xb0>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	429a      	cmp	r2, r3
 800e194:	d00d      	beq.n	800e1b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	685a      	ldr	r2, [r3, #4]
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	685b      	ldr	r3, [r3, #4]
 800e1a0:	441a      	add	r2, r3
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	681a      	ldr	r2, [r3, #0]
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	601a      	str	r2, [r3, #0]
 800e1b0:	e008      	b.n	800e1c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e1b2:	4b0c      	ldr	r3, [pc, #48]	@ (800e1e4 <prvInsertBlockIntoFreeList+0xb0>)
 800e1b4:	681a      	ldr	r2, [r3, #0]
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	601a      	str	r2, [r3, #0]
 800e1ba:	e003      	b.n	800e1c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	681a      	ldr	r2, [r3, #0]
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e1c4:	68fa      	ldr	r2, [r7, #12]
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	429a      	cmp	r2, r3
 800e1ca:	d002      	beq.n	800e1d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	687a      	ldr	r2, [r7, #4]
 800e1d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e1d2:	bf00      	nop
 800e1d4:	3714      	adds	r7, #20
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1dc:	4770      	bx	lr
 800e1de:	bf00      	nop
 800e1e0:	20004830 	.word	0x20004830
 800e1e4:	20004838 	.word	0x20004838

0800e1e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	4912      	ldr	r1, [pc, #72]	@ (800e238 <MX_USB_DEVICE_Init+0x50>)
 800e1f0:	4812      	ldr	r0, [pc, #72]	@ (800e23c <MX_USB_DEVICE_Init+0x54>)
 800e1f2:	f7fd f95b 	bl	800b4ac <USBD_Init>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d001      	beq.n	800e200 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e1fc:	f7f4 ff9c 	bl	8003138 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e200:	490f      	ldr	r1, [pc, #60]	@ (800e240 <MX_USB_DEVICE_Init+0x58>)
 800e202:	480e      	ldr	r0, [pc, #56]	@ (800e23c <MX_USB_DEVICE_Init+0x54>)
 800e204:	f7fd f982 	bl	800b50c <USBD_RegisterClass>
 800e208:	4603      	mov	r3, r0
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d001      	beq.n	800e212 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e20e:	f7f4 ff93 	bl	8003138 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e212:	490c      	ldr	r1, [pc, #48]	@ (800e244 <MX_USB_DEVICE_Init+0x5c>)
 800e214:	4809      	ldr	r0, [pc, #36]	@ (800e23c <MX_USB_DEVICE_Init+0x54>)
 800e216:	f7fd f879 	bl	800b30c <USBD_CDC_RegisterInterface>
 800e21a:	4603      	mov	r3, r0
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d001      	beq.n	800e224 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e220:	f7f4 ff8a 	bl	8003138 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e224:	4805      	ldr	r0, [pc, #20]	@ (800e23c <MX_USB_DEVICE_Init+0x54>)
 800e226:	f7fd f9a7 	bl	800b578 <USBD_Start>
 800e22a:	4603      	mov	r3, r0
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d001      	beq.n	800e234 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e230:	f7f4 ff82 	bl	8003138 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e234:	bf00      	nop
 800e236:	bd80      	pop	{r7, pc}
 800e238:	20000158 	.word	0x20000158
 800e23c:	20004850 	.word	0x20004850
 800e240:	200000c0 	.word	0x200000c0
 800e244:	20000144 	.word	0x20000144

0800e248 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e24c:	2200      	movs	r2, #0
 800e24e:	4905      	ldr	r1, [pc, #20]	@ (800e264 <CDC_Init_FS+0x1c>)
 800e250:	4805      	ldr	r0, [pc, #20]	@ (800e268 <CDC_Init_FS+0x20>)
 800e252:	f7fd f875 	bl	800b340 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e256:	4905      	ldr	r1, [pc, #20]	@ (800e26c <CDC_Init_FS+0x24>)
 800e258:	4803      	ldr	r0, [pc, #12]	@ (800e268 <CDC_Init_FS+0x20>)
 800e25a:	f7fd f893 	bl	800b384 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e25e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e260:	4618      	mov	r0, r3
 800e262:	bd80      	pop	{r7, pc}
 800e264:	20004f2c 	.word	0x20004f2c
 800e268:	20004850 	.word	0x20004850
 800e26c:	20004b2c 	.word	0x20004b2c

0800e270 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e270:	b480      	push	{r7}
 800e272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e274:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e276:	4618      	mov	r0, r3
 800e278:	46bd      	mov	sp, r7
 800e27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27e:	4770      	bx	lr

0800e280 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e280:	b480      	push	{r7}
 800e282:	b083      	sub	sp, #12
 800e284:	af00      	add	r7, sp, #0
 800e286:	4603      	mov	r3, r0
 800e288:	6039      	str	r1, [r7, #0]
 800e28a:	71fb      	strb	r3, [r7, #7]
 800e28c:	4613      	mov	r3, r2
 800e28e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e290:	79fb      	ldrb	r3, [r7, #7]
 800e292:	2b23      	cmp	r3, #35	@ 0x23
 800e294:	d84a      	bhi.n	800e32c <CDC_Control_FS+0xac>
 800e296:	a201      	add	r2, pc, #4	@ (adr r2, 800e29c <CDC_Control_FS+0x1c>)
 800e298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e29c:	0800e32d 	.word	0x0800e32d
 800e2a0:	0800e32d 	.word	0x0800e32d
 800e2a4:	0800e32d 	.word	0x0800e32d
 800e2a8:	0800e32d 	.word	0x0800e32d
 800e2ac:	0800e32d 	.word	0x0800e32d
 800e2b0:	0800e32d 	.word	0x0800e32d
 800e2b4:	0800e32d 	.word	0x0800e32d
 800e2b8:	0800e32d 	.word	0x0800e32d
 800e2bc:	0800e32d 	.word	0x0800e32d
 800e2c0:	0800e32d 	.word	0x0800e32d
 800e2c4:	0800e32d 	.word	0x0800e32d
 800e2c8:	0800e32d 	.word	0x0800e32d
 800e2cc:	0800e32d 	.word	0x0800e32d
 800e2d0:	0800e32d 	.word	0x0800e32d
 800e2d4:	0800e32d 	.word	0x0800e32d
 800e2d8:	0800e32d 	.word	0x0800e32d
 800e2dc:	0800e32d 	.word	0x0800e32d
 800e2e0:	0800e32d 	.word	0x0800e32d
 800e2e4:	0800e32d 	.word	0x0800e32d
 800e2e8:	0800e32d 	.word	0x0800e32d
 800e2ec:	0800e32d 	.word	0x0800e32d
 800e2f0:	0800e32d 	.word	0x0800e32d
 800e2f4:	0800e32d 	.word	0x0800e32d
 800e2f8:	0800e32d 	.word	0x0800e32d
 800e2fc:	0800e32d 	.word	0x0800e32d
 800e300:	0800e32d 	.word	0x0800e32d
 800e304:	0800e32d 	.word	0x0800e32d
 800e308:	0800e32d 	.word	0x0800e32d
 800e30c:	0800e32d 	.word	0x0800e32d
 800e310:	0800e32d 	.word	0x0800e32d
 800e314:	0800e32d 	.word	0x0800e32d
 800e318:	0800e32d 	.word	0x0800e32d
 800e31c:	0800e32d 	.word	0x0800e32d
 800e320:	0800e32d 	.word	0x0800e32d
 800e324:	0800e32d 	.word	0x0800e32d
 800e328:	0800e32d 	.word	0x0800e32d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e32c:	bf00      	nop
  }

  return (USBD_OK);
 800e32e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e330:	4618      	mov	r0, r3
 800e332:	370c      	adds	r7, #12
 800e334:	46bd      	mov	sp, r7
 800e336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33a:	4770      	bx	lr

0800e33c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b082      	sub	sp, #8
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
 800e344:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e346:	6879      	ldr	r1, [r7, #4]
 800e348:	4805      	ldr	r0, [pc, #20]	@ (800e360 <CDC_Receive_FS+0x24>)
 800e34a:	f7fd f81b 	bl	800b384 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e34e:	4804      	ldr	r0, [pc, #16]	@ (800e360 <CDC_Receive_FS+0x24>)
 800e350:	f7fd f876 	bl	800b440 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e354:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e356:	4618      	mov	r0, r3
 800e358:	3708      	adds	r7, #8
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}
 800e35e:	bf00      	nop
 800e360:	20004850 	.word	0x20004850

0800e364 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b084      	sub	sp, #16
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	460b      	mov	r3, r1
 800e36e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e370:	2300      	movs	r3, #0
 800e372:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e374:	4b0d      	ldr	r3, [pc, #52]	@ (800e3ac <CDC_Transmit_FS+0x48>)
 800e376:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e37a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e382:	2b00      	cmp	r3, #0
 800e384:	d001      	beq.n	800e38a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e386:	2301      	movs	r3, #1
 800e388:	e00b      	b.n	800e3a2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e38a:	887b      	ldrh	r3, [r7, #2]
 800e38c:	461a      	mov	r2, r3
 800e38e:	6879      	ldr	r1, [r7, #4]
 800e390:	4806      	ldr	r0, [pc, #24]	@ (800e3ac <CDC_Transmit_FS+0x48>)
 800e392:	f7fc ffd5 	bl	800b340 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e396:	4805      	ldr	r0, [pc, #20]	@ (800e3ac <CDC_Transmit_FS+0x48>)
 800e398:	f7fd f812 	bl	800b3c0 <USBD_CDC_TransmitPacket>
 800e39c:	4603      	mov	r3, r0
 800e39e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e3a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3710      	adds	r7, #16
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}
 800e3aa:	bf00      	nop
 800e3ac:	20004850 	.word	0x20004850

0800e3b0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e3b0:	b480      	push	{r7}
 800e3b2:	b087      	sub	sp, #28
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	60f8      	str	r0, [r7, #12]
 800e3b8:	60b9      	str	r1, [r7, #8]
 800e3ba:	4613      	mov	r3, r2
 800e3bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e3c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	371c      	adds	r7, #28
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d0:	4770      	bx	lr
	...

0800e3d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e3d4:	b480      	push	{r7}
 800e3d6:	b083      	sub	sp, #12
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	4603      	mov	r3, r0
 800e3dc:	6039      	str	r1, [r7, #0]
 800e3de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	2212      	movs	r2, #18
 800e3e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e3e6:	4b03      	ldr	r3, [pc, #12]	@ (800e3f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	370c      	adds	r7, #12
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f2:	4770      	bx	lr
 800e3f4:	20000174 	.word	0x20000174

0800e3f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e3f8:	b480      	push	{r7}
 800e3fa:	b083      	sub	sp, #12
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	4603      	mov	r3, r0
 800e400:	6039      	str	r1, [r7, #0]
 800e402:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	2204      	movs	r2, #4
 800e408:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e40a:	4b03      	ldr	r3, [pc, #12]	@ (800e418 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e40c:	4618      	mov	r0, r3
 800e40e:	370c      	adds	r7, #12
 800e410:	46bd      	mov	sp, r7
 800e412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e416:	4770      	bx	lr
 800e418:	20000188 	.word	0x20000188

0800e41c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b082      	sub	sp, #8
 800e420:	af00      	add	r7, sp, #0
 800e422:	4603      	mov	r3, r0
 800e424:	6039      	str	r1, [r7, #0]
 800e426:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e428:	79fb      	ldrb	r3, [r7, #7]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d105      	bne.n	800e43a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e42e:	683a      	ldr	r2, [r7, #0]
 800e430:	4907      	ldr	r1, [pc, #28]	@ (800e450 <USBD_FS_ProductStrDescriptor+0x34>)
 800e432:	4808      	ldr	r0, [pc, #32]	@ (800e454 <USBD_FS_ProductStrDescriptor+0x38>)
 800e434:	f7fe fa66 	bl	800c904 <USBD_GetString>
 800e438:	e004      	b.n	800e444 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e43a:	683a      	ldr	r2, [r7, #0]
 800e43c:	4904      	ldr	r1, [pc, #16]	@ (800e450 <USBD_FS_ProductStrDescriptor+0x34>)
 800e43e:	4805      	ldr	r0, [pc, #20]	@ (800e454 <USBD_FS_ProductStrDescriptor+0x38>)
 800e440:	f7fe fa60 	bl	800c904 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e444:	4b02      	ldr	r3, [pc, #8]	@ (800e450 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e446:	4618      	mov	r0, r3
 800e448:	3708      	adds	r7, #8
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}
 800e44e:	bf00      	nop
 800e450:	2000532c 	.word	0x2000532c
 800e454:	08014154 	.word	0x08014154

0800e458 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b082      	sub	sp, #8
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	4603      	mov	r3, r0
 800e460:	6039      	str	r1, [r7, #0]
 800e462:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e464:	683a      	ldr	r2, [r7, #0]
 800e466:	4904      	ldr	r1, [pc, #16]	@ (800e478 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e468:	4804      	ldr	r0, [pc, #16]	@ (800e47c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e46a:	f7fe fa4b 	bl	800c904 <USBD_GetString>
  return USBD_StrDesc;
 800e46e:	4b02      	ldr	r3, [pc, #8]	@ (800e478 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e470:	4618      	mov	r0, r3
 800e472:	3708      	adds	r7, #8
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}
 800e478:	2000532c 	.word	0x2000532c
 800e47c:	0801416c 	.word	0x0801416c

0800e480 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b082      	sub	sp, #8
 800e484:	af00      	add	r7, sp, #0
 800e486:	4603      	mov	r3, r0
 800e488:	6039      	str	r1, [r7, #0]
 800e48a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	221a      	movs	r2, #26
 800e490:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e492:	f000 f843 	bl	800e51c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e496:	4b02      	ldr	r3, [pc, #8]	@ (800e4a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e498:	4618      	mov	r0, r3
 800e49a:	3708      	adds	r7, #8
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}
 800e4a0:	2000018c 	.word	0x2000018c

0800e4a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b082      	sub	sp, #8
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	6039      	str	r1, [r7, #0]
 800e4ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e4b0:	79fb      	ldrb	r3, [r7, #7]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d105      	bne.n	800e4c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e4b6:	683a      	ldr	r2, [r7, #0]
 800e4b8:	4907      	ldr	r1, [pc, #28]	@ (800e4d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e4ba:	4808      	ldr	r0, [pc, #32]	@ (800e4dc <USBD_FS_ConfigStrDescriptor+0x38>)
 800e4bc:	f7fe fa22 	bl	800c904 <USBD_GetString>
 800e4c0:	e004      	b.n	800e4cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e4c2:	683a      	ldr	r2, [r7, #0]
 800e4c4:	4904      	ldr	r1, [pc, #16]	@ (800e4d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e4c6:	4805      	ldr	r0, [pc, #20]	@ (800e4dc <USBD_FS_ConfigStrDescriptor+0x38>)
 800e4c8:	f7fe fa1c 	bl	800c904 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e4cc:	4b02      	ldr	r3, [pc, #8]	@ (800e4d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	3708      	adds	r7, #8
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bd80      	pop	{r7, pc}
 800e4d6:	bf00      	nop
 800e4d8:	2000532c 	.word	0x2000532c
 800e4dc:	08014180 	.word	0x08014180

0800e4e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b082      	sub	sp, #8
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	6039      	str	r1, [r7, #0]
 800e4ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e4ec:	79fb      	ldrb	r3, [r7, #7]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d105      	bne.n	800e4fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e4f2:	683a      	ldr	r2, [r7, #0]
 800e4f4:	4907      	ldr	r1, [pc, #28]	@ (800e514 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e4f6:	4808      	ldr	r0, [pc, #32]	@ (800e518 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e4f8:	f7fe fa04 	bl	800c904 <USBD_GetString>
 800e4fc:	e004      	b.n	800e508 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e4fe:	683a      	ldr	r2, [r7, #0]
 800e500:	4904      	ldr	r1, [pc, #16]	@ (800e514 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e502:	4805      	ldr	r0, [pc, #20]	@ (800e518 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e504:	f7fe f9fe 	bl	800c904 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e508:	4b02      	ldr	r3, [pc, #8]	@ (800e514 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	3708      	adds	r7, #8
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}
 800e512:	bf00      	nop
 800e514:	2000532c 	.word	0x2000532c
 800e518:	0801418c 	.word	0x0801418c

0800e51c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b084      	sub	sp, #16
 800e520:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e522:	4b0f      	ldr	r3, [pc, #60]	@ (800e560 <Get_SerialNum+0x44>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e528:	4b0e      	ldr	r3, [pc, #56]	@ (800e564 <Get_SerialNum+0x48>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e52e:	4b0e      	ldr	r3, [pc, #56]	@ (800e568 <Get_SerialNum+0x4c>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e534:	68fa      	ldr	r2, [r7, #12]
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	4413      	add	r3, r2
 800e53a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d009      	beq.n	800e556 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e542:	2208      	movs	r2, #8
 800e544:	4909      	ldr	r1, [pc, #36]	@ (800e56c <Get_SerialNum+0x50>)
 800e546:	68f8      	ldr	r0, [r7, #12]
 800e548:	f000 f814 	bl	800e574 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e54c:	2204      	movs	r2, #4
 800e54e:	4908      	ldr	r1, [pc, #32]	@ (800e570 <Get_SerialNum+0x54>)
 800e550:	68b8      	ldr	r0, [r7, #8]
 800e552:	f000 f80f 	bl	800e574 <IntToUnicode>
  }
}
 800e556:	bf00      	nop
 800e558:	3710      	adds	r7, #16
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}
 800e55e:	bf00      	nop
 800e560:	1fff7a10 	.word	0x1fff7a10
 800e564:	1fff7a14 	.word	0x1fff7a14
 800e568:	1fff7a18 	.word	0x1fff7a18
 800e56c:	2000018e 	.word	0x2000018e
 800e570:	2000019e 	.word	0x2000019e

0800e574 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e574:	b480      	push	{r7}
 800e576:	b087      	sub	sp, #28
 800e578:	af00      	add	r7, sp, #0
 800e57a:	60f8      	str	r0, [r7, #12]
 800e57c:	60b9      	str	r1, [r7, #8]
 800e57e:	4613      	mov	r3, r2
 800e580:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e582:	2300      	movs	r3, #0
 800e584:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e586:	2300      	movs	r3, #0
 800e588:	75fb      	strb	r3, [r7, #23]
 800e58a:	e027      	b.n	800e5dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	0f1b      	lsrs	r3, r3, #28
 800e590:	2b09      	cmp	r3, #9
 800e592:	d80b      	bhi.n	800e5ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	0f1b      	lsrs	r3, r3, #28
 800e598:	b2da      	uxtb	r2, r3
 800e59a:	7dfb      	ldrb	r3, [r7, #23]
 800e59c:	005b      	lsls	r3, r3, #1
 800e59e:	4619      	mov	r1, r3
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	440b      	add	r3, r1
 800e5a4:	3230      	adds	r2, #48	@ 0x30
 800e5a6:	b2d2      	uxtb	r2, r2
 800e5a8:	701a      	strb	r2, [r3, #0]
 800e5aa:	e00a      	b.n	800e5c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	0f1b      	lsrs	r3, r3, #28
 800e5b0:	b2da      	uxtb	r2, r3
 800e5b2:	7dfb      	ldrb	r3, [r7, #23]
 800e5b4:	005b      	lsls	r3, r3, #1
 800e5b6:	4619      	mov	r1, r3
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	440b      	add	r3, r1
 800e5bc:	3237      	adds	r2, #55	@ 0x37
 800e5be:	b2d2      	uxtb	r2, r2
 800e5c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	011b      	lsls	r3, r3, #4
 800e5c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e5c8:	7dfb      	ldrb	r3, [r7, #23]
 800e5ca:	005b      	lsls	r3, r3, #1
 800e5cc:	3301      	adds	r3, #1
 800e5ce:	68ba      	ldr	r2, [r7, #8]
 800e5d0:	4413      	add	r3, r2
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e5d6:	7dfb      	ldrb	r3, [r7, #23]
 800e5d8:	3301      	adds	r3, #1
 800e5da:	75fb      	strb	r3, [r7, #23]
 800e5dc:	7dfa      	ldrb	r2, [r7, #23]
 800e5de:	79fb      	ldrb	r3, [r7, #7]
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	d3d3      	bcc.n	800e58c <IntToUnicode+0x18>
  }
}
 800e5e4:	bf00      	nop
 800e5e6:	bf00      	nop
 800e5e8:	371c      	adds	r7, #28
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f0:	4770      	bx	lr
	...

0800e5f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b08a      	sub	sp, #40	@ 0x28
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e5fc:	f107 0314 	add.w	r3, r7, #20
 800e600:	2200      	movs	r2, #0
 800e602:	601a      	str	r2, [r3, #0]
 800e604:	605a      	str	r2, [r3, #4]
 800e606:	609a      	str	r2, [r3, #8]
 800e608:	60da      	str	r2, [r3, #12]
 800e60a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e614:	d13a      	bne.n	800e68c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e616:	2300      	movs	r3, #0
 800e618:	613b      	str	r3, [r7, #16]
 800e61a:	4b1e      	ldr	r3, [pc, #120]	@ (800e694 <HAL_PCD_MspInit+0xa0>)
 800e61c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e61e:	4a1d      	ldr	r2, [pc, #116]	@ (800e694 <HAL_PCD_MspInit+0xa0>)
 800e620:	f043 0301 	orr.w	r3, r3, #1
 800e624:	6313      	str	r3, [r2, #48]	@ 0x30
 800e626:	4b1b      	ldr	r3, [pc, #108]	@ (800e694 <HAL_PCD_MspInit+0xa0>)
 800e628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e62a:	f003 0301 	and.w	r3, r3, #1
 800e62e:	613b      	str	r3, [r7, #16]
 800e630:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e632:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e638:	2302      	movs	r3, #2
 800e63a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e63c:	2300      	movs	r3, #0
 800e63e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e640:	2303      	movs	r3, #3
 800e642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e644:	230a      	movs	r3, #10
 800e646:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e648:	f107 0314 	add.w	r3, r7, #20
 800e64c:	4619      	mov	r1, r3
 800e64e:	4812      	ldr	r0, [pc, #72]	@ (800e698 <HAL_PCD_MspInit+0xa4>)
 800e650:	f7f5 fe8e 	bl	8004370 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e654:	4b0f      	ldr	r3, [pc, #60]	@ (800e694 <HAL_PCD_MspInit+0xa0>)
 800e656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e658:	4a0e      	ldr	r2, [pc, #56]	@ (800e694 <HAL_PCD_MspInit+0xa0>)
 800e65a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e65e:	6353      	str	r3, [r2, #52]	@ 0x34
 800e660:	2300      	movs	r3, #0
 800e662:	60fb      	str	r3, [r7, #12]
 800e664:	4b0b      	ldr	r3, [pc, #44]	@ (800e694 <HAL_PCD_MspInit+0xa0>)
 800e666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e668:	4a0a      	ldr	r2, [pc, #40]	@ (800e694 <HAL_PCD_MspInit+0xa0>)
 800e66a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e66e:	6453      	str	r3, [r2, #68]	@ 0x44
 800e670:	4b08      	ldr	r3, [pc, #32]	@ (800e694 <HAL_PCD_MspInit+0xa0>)
 800e672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e674:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e678:	60fb      	str	r3, [r7, #12]
 800e67a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e67c:	2200      	movs	r2, #0
 800e67e:	2105      	movs	r1, #5
 800e680:	2043      	movs	r0, #67	@ 0x43
 800e682:	f7f5 fdfb 	bl	800427c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e686:	2043      	movs	r0, #67	@ 0x43
 800e688:	f7f5 fe14 	bl	80042b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e68c:	bf00      	nop
 800e68e:	3728      	adds	r7, #40	@ 0x28
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}
 800e694:	40023800 	.word	0x40023800
 800e698:	40020000 	.word	0x40020000

0800e69c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b082      	sub	sp, #8
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e6b0:	4619      	mov	r1, r3
 800e6b2:	4610      	mov	r0, r2
 800e6b4:	f7fc ffad 	bl	800b612 <USBD_LL_SetupStage>
}
 800e6b8:	bf00      	nop
 800e6ba:	3708      	adds	r7, #8
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}

0800e6c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b082      	sub	sp, #8
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
 800e6c8:	460b      	mov	r3, r1
 800e6ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e6d2:	78fa      	ldrb	r2, [r7, #3]
 800e6d4:	6879      	ldr	r1, [r7, #4]
 800e6d6:	4613      	mov	r3, r2
 800e6d8:	00db      	lsls	r3, r3, #3
 800e6da:	4413      	add	r3, r2
 800e6dc:	009b      	lsls	r3, r3, #2
 800e6de:	440b      	add	r3, r1
 800e6e0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e6e4:	681a      	ldr	r2, [r3, #0]
 800e6e6:	78fb      	ldrb	r3, [r7, #3]
 800e6e8:	4619      	mov	r1, r3
 800e6ea:	f7fc ffe7 	bl	800b6bc <USBD_LL_DataOutStage>
}
 800e6ee:	bf00      	nop
 800e6f0:	3708      	adds	r7, #8
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}

0800e6f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6f6:	b580      	push	{r7, lr}
 800e6f8:	b082      	sub	sp, #8
 800e6fa:	af00      	add	r7, sp, #0
 800e6fc:	6078      	str	r0, [r7, #4]
 800e6fe:	460b      	mov	r3, r1
 800e700:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e708:	78fa      	ldrb	r2, [r7, #3]
 800e70a:	6879      	ldr	r1, [r7, #4]
 800e70c:	4613      	mov	r3, r2
 800e70e:	00db      	lsls	r3, r3, #3
 800e710:	4413      	add	r3, r2
 800e712:	009b      	lsls	r3, r3, #2
 800e714:	440b      	add	r3, r1
 800e716:	3320      	adds	r3, #32
 800e718:	681a      	ldr	r2, [r3, #0]
 800e71a:	78fb      	ldrb	r3, [r7, #3]
 800e71c:	4619      	mov	r1, r3
 800e71e:	f7fd f889 	bl	800b834 <USBD_LL_DataInStage>
}
 800e722:	bf00      	nop
 800e724:	3708      	adds	r7, #8
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}

0800e72a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e72a:	b580      	push	{r7, lr}
 800e72c:	b082      	sub	sp, #8
 800e72e:	af00      	add	r7, sp, #0
 800e730:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e738:	4618      	mov	r0, r3
 800e73a:	f7fd f9cd 	bl	800bad8 <USBD_LL_SOF>
}
 800e73e:	bf00      	nop
 800e740:	3708      	adds	r7, #8
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}

0800e746 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e746:	b580      	push	{r7, lr}
 800e748:	b084      	sub	sp, #16
 800e74a:	af00      	add	r7, sp, #0
 800e74c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e74e:	2301      	movs	r3, #1
 800e750:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	79db      	ldrb	r3, [r3, #7]
 800e756:	2b02      	cmp	r3, #2
 800e758:	d001      	beq.n	800e75e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e75a:	f7f4 fced 	bl	8003138 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e764:	7bfa      	ldrb	r2, [r7, #15]
 800e766:	4611      	mov	r1, r2
 800e768:	4618      	mov	r0, r3
 800e76a:	f7fd f971 	bl	800ba50 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e774:	4618      	mov	r0, r3
 800e776:	f7fd f918 	bl	800b9aa <USBD_LL_Reset>
}
 800e77a:	bf00      	nop
 800e77c:	3710      	adds	r7, #16
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd80      	pop	{r7, pc}
	...

0800e784 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b082      	sub	sp, #8
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e792:	4618      	mov	r0, r3
 800e794:	f7fd f96c 	bl	800ba70 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	687a      	ldr	r2, [r7, #4]
 800e7a4:	6812      	ldr	r2, [r2, #0]
 800e7a6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e7aa:	f043 0301 	orr.w	r3, r3, #1
 800e7ae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	7adb      	ldrb	r3, [r3, #11]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d005      	beq.n	800e7c4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e7b8:	4b04      	ldr	r3, [pc, #16]	@ (800e7cc <HAL_PCD_SuspendCallback+0x48>)
 800e7ba:	691b      	ldr	r3, [r3, #16]
 800e7bc:	4a03      	ldr	r2, [pc, #12]	@ (800e7cc <HAL_PCD_SuspendCallback+0x48>)
 800e7be:	f043 0306 	orr.w	r3, r3, #6
 800e7c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e7c4:	bf00      	nop
 800e7c6:	3708      	adds	r7, #8
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}
 800e7cc:	e000ed00 	.word	0xe000ed00

0800e7d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b082      	sub	sp, #8
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f7fd f962 	bl	800baa8 <USBD_LL_Resume>
}
 800e7e4:	bf00      	nop
 800e7e6:	3708      	adds	r7, #8
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}

0800e7ec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b082      	sub	sp, #8
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
 800e7f4:	460b      	mov	r3, r1
 800e7f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e7fe:	78fa      	ldrb	r2, [r7, #3]
 800e800:	4611      	mov	r1, r2
 800e802:	4618      	mov	r0, r3
 800e804:	f7fd f9ba 	bl	800bb7c <USBD_LL_IsoOUTIncomplete>
}
 800e808:	bf00      	nop
 800e80a:	3708      	adds	r7, #8
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}

0800e810 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b082      	sub	sp, #8
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
 800e818:	460b      	mov	r3, r1
 800e81a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e822:	78fa      	ldrb	r2, [r7, #3]
 800e824:	4611      	mov	r1, r2
 800e826:	4618      	mov	r0, r3
 800e828:	f7fd f976 	bl	800bb18 <USBD_LL_IsoINIncomplete>
}
 800e82c:	bf00      	nop
 800e82e:	3708      	adds	r7, #8
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}

0800e834 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b082      	sub	sp, #8
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e842:	4618      	mov	r0, r3
 800e844:	f7fd f9cc 	bl	800bbe0 <USBD_LL_DevConnected>
}
 800e848:	bf00      	nop
 800e84a:	3708      	adds	r7, #8
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}

0800e850 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b082      	sub	sp, #8
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e85e:	4618      	mov	r0, r3
 800e860:	f7fd f9c9 	bl	800bbf6 <USBD_LL_DevDisconnected>
}
 800e864:	bf00      	nop
 800e866:	3708      	adds	r7, #8
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}

0800e86c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b082      	sub	sp, #8
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d13c      	bne.n	800e8f6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e87c:	4a20      	ldr	r2, [pc, #128]	@ (800e900 <USBD_LL_Init+0x94>)
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	4a1e      	ldr	r2, [pc, #120]	@ (800e900 <USBD_LL_Init+0x94>)
 800e888:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e88c:	4b1c      	ldr	r3, [pc, #112]	@ (800e900 <USBD_LL_Init+0x94>)
 800e88e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800e892:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e894:	4b1a      	ldr	r3, [pc, #104]	@ (800e900 <USBD_LL_Init+0x94>)
 800e896:	2204      	movs	r2, #4
 800e898:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e89a:	4b19      	ldr	r3, [pc, #100]	@ (800e900 <USBD_LL_Init+0x94>)
 800e89c:	2202      	movs	r2, #2
 800e89e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e8a0:	4b17      	ldr	r3, [pc, #92]	@ (800e900 <USBD_LL_Init+0x94>)
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e8a6:	4b16      	ldr	r3, [pc, #88]	@ (800e900 <USBD_LL_Init+0x94>)
 800e8a8:	2202      	movs	r2, #2
 800e8aa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e8ac:	4b14      	ldr	r3, [pc, #80]	@ (800e900 <USBD_LL_Init+0x94>)
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e8b2:	4b13      	ldr	r3, [pc, #76]	@ (800e900 <USBD_LL_Init+0x94>)
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e8b8:	4b11      	ldr	r3, [pc, #68]	@ (800e900 <USBD_LL_Init+0x94>)
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e8be:	4b10      	ldr	r3, [pc, #64]	@ (800e900 <USBD_LL_Init+0x94>)
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e8c4:	4b0e      	ldr	r3, [pc, #56]	@ (800e900 <USBD_LL_Init+0x94>)
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e8ca:	480d      	ldr	r0, [pc, #52]	@ (800e900 <USBD_LL_Init+0x94>)
 800e8cc:	f7f6 ff2a 	bl	8005724 <HAL_PCD_Init>
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d001      	beq.n	800e8da <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e8d6:	f7f4 fc2f 	bl	8003138 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e8da:	2180      	movs	r1, #128	@ 0x80
 800e8dc:	4808      	ldr	r0, [pc, #32]	@ (800e900 <USBD_LL_Init+0x94>)
 800e8de:	f7f8 f956 	bl	8006b8e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e8e2:	2240      	movs	r2, #64	@ 0x40
 800e8e4:	2100      	movs	r1, #0
 800e8e6:	4806      	ldr	r0, [pc, #24]	@ (800e900 <USBD_LL_Init+0x94>)
 800e8e8:	f7f8 f90a 	bl	8006b00 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e8ec:	2280      	movs	r2, #128	@ 0x80
 800e8ee:	2101      	movs	r1, #1
 800e8f0:	4803      	ldr	r0, [pc, #12]	@ (800e900 <USBD_LL_Init+0x94>)
 800e8f2:	f7f8 f905 	bl	8006b00 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e8f6:	2300      	movs	r3, #0
}
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	3708      	adds	r7, #8
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd80      	pop	{r7, pc}
 800e900:	2000552c 	.word	0x2000552c

0800e904 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b084      	sub	sp, #16
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e90c:	2300      	movs	r3, #0
 800e90e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e910:	2300      	movs	r3, #0
 800e912:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e91a:	4618      	mov	r0, r3
 800e91c:	f7f7 f811 	bl	8005942 <HAL_PCD_Start>
 800e920:	4603      	mov	r3, r0
 800e922:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e924:	7bfb      	ldrb	r3, [r7, #15]
 800e926:	4618      	mov	r0, r3
 800e928:	f000 f942 	bl	800ebb0 <USBD_Get_USB_Status>
 800e92c:	4603      	mov	r3, r0
 800e92e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e930:	7bbb      	ldrb	r3, [r7, #14]
}
 800e932:	4618      	mov	r0, r3
 800e934:	3710      	adds	r7, #16
 800e936:	46bd      	mov	sp, r7
 800e938:	bd80      	pop	{r7, pc}

0800e93a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e93a:	b580      	push	{r7, lr}
 800e93c:	b084      	sub	sp, #16
 800e93e:	af00      	add	r7, sp, #0
 800e940:	6078      	str	r0, [r7, #4]
 800e942:	4608      	mov	r0, r1
 800e944:	4611      	mov	r1, r2
 800e946:	461a      	mov	r2, r3
 800e948:	4603      	mov	r3, r0
 800e94a:	70fb      	strb	r3, [r7, #3]
 800e94c:	460b      	mov	r3, r1
 800e94e:	70bb      	strb	r3, [r7, #2]
 800e950:	4613      	mov	r3, r2
 800e952:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e954:	2300      	movs	r3, #0
 800e956:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e958:	2300      	movs	r3, #0
 800e95a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e962:	78bb      	ldrb	r3, [r7, #2]
 800e964:	883a      	ldrh	r2, [r7, #0]
 800e966:	78f9      	ldrb	r1, [r7, #3]
 800e968:	f7f7 fce5 	bl	8006336 <HAL_PCD_EP_Open>
 800e96c:	4603      	mov	r3, r0
 800e96e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e970:	7bfb      	ldrb	r3, [r7, #15]
 800e972:	4618      	mov	r0, r3
 800e974:	f000 f91c 	bl	800ebb0 <USBD_Get_USB_Status>
 800e978:	4603      	mov	r3, r0
 800e97a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e97c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e97e:	4618      	mov	r0, r3
 800e980:	3710      	adds	r7, #16
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}

0800e986 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e986:	b580      	push	{r7, lr}
 800e988:	b084      	sub	sp, #16
 800e98a:	af00      	add	r7, sp, #0
 800e98c:	6078      	str	r0, [r7, #4]
 800e98e:	460b      	mov	r3, r1
 800e990:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e992:	2300      	movs	r3, #0
 800e994:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e996:	2300      	movs	r3, #0
 800e998:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e9a0:	78fa      	ldrb	r2, [r7, #3]
 800e9a2:	4611      	mov	r1, r2
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	f7f7 fd30 	bl	800640a <HAL_PCD_EP_Close>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e9ae:	7bfb      	ldrb	r3, [r7, #15]
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f000 f8fd 	bl	800ebb0 <USBD_Get_USB_Status>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e9ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	3710      	adds	r7, #16
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}

0800e9c4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b084      	sub	sp, #16
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
 800e9cc:	460b      	mov	r3, r1
 800e9ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e9de:	78fa      	ldrb	r2, [r7, #3]
 800e9e0:	4611      	mov	r1, r2
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	f7f7 fde8 	bl	80065b8 <HAL_PCD_EP_SetStall>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e9ec:	7bfb      	ldrb	r3, [r7, #15]
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f000 f8de 	bl	800ebb0 <USBD_Get_USB_Status>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e9f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	3710      	adds	r7, #16
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}

0800ea02 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea02:	b580      	push	{r7, lr}
 800ea04:	b084      	sub	sp, #16
 800ea06:	af00      	add	r7, sp, #0
 800ea08:	6078      	str	r0, [r7, #4]
 800ea0a:	460b      	mov	r3, r1
 800ea0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea0e:	2300      	movs	r3, #0
 800ea10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea12:	2300      	movs	r3, #0
 800ea14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ea1c:	78fa      	ldrb	r2, [r7, #3]
 800ea1e:	4611      	mov	r1, r2
 800ea20:	4618      	mov	r0, r3
 800ea22:	f7f7 fe2c 	bl	800667e <HAL_PCD_EP_ClrStall>
 800ea26:	4603      	mov	r3, r0
 800ea28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea2a:	7bfb      	ldrb	r3, [r7, #15]
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	f000 f8bf 	bl	800ebb0 <USBD_Get_USB_Status>
 800ea32:	4603      	mov	r3, r0
 800ea34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea36:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea38:	4618      	mov	r0, r3
 800ea3a:	3710      	adds	r7, #16
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}

0800ea40 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea40:	b480      	push	{r7}
 800ea42:	b085      	sub	sp, #20
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
 800ea48:	460b      	mov	r3, r1
 800ea4a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ea52:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ea54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	da0b      	bge.n	800ea74 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ea5c:	78fb      	ldrb	r3, [r7, #3]
 800ea5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ea62:	68f9      	ldr	r1, [r7, #12]
 800ea64:	4613      	mov	r3, r2
 800ea66:	00db      	lsls	r3, r3, #3
 800ea68:	4413      	add	r3, r2
 800ea6a:	009b      	lsls	r3, r3, #2
 800ea6c:	440b      	add	r3, r1
 800ea6e:	3316      	adds	r3, #22
 800ea70:	781b      	ldrb	r3, [r3, #0]
 800ea72:	e00b      	b.n	800ea8c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ea74:	78fb      	ldrb	r3, [r7, #3]
 800ea76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ea7a:	68f9      	ldr	r1, [r7, #12]
 800ea7c:	4613      	mov	r3, r2
 800ea7e:	00db      	lsls	r3, r3, #3
 800ea80:	4413      	add	r3, r2
 800ea82:	009b      	lsls	r3, r3, #2
 800ea84:	440b      	add	r3, r1
 800ea86:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ea8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	3714      	adds	r7, #20
 800ea90:	46bd      	mov	sp, r7
 800ea92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea96:	4770      	bx	lr

0800ea98 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b084      	sub	sp, #16
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	460b      	mov	r3, r1
 800eaa2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800eab2:	78fa      	ldrb	r2, [r7, #3]
 800eab4:	4611      	mov	r1, r2
 800eab6:	4618      	mov	r0, r3
 800eab8:	f7f7 fc19 	bl	80062ee <HAL_PCD_SetAddress>
 800eabc:	4603      	mov	r3, r0
 800eabe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eac0:	7bfb      	ldrb	r3, [r7, #15]
 800eac2:	4618      	mov	r0, r3
 800eac4:	f000 f874 	bl	800ebb0 <USBD_Get_USB_Status>
 800eac8:	4603      	mov	r3, r0
 800eaca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eacc:	7bbb      	ldrb	r3, [r7, #14]
}
 800eace:	4618      	mov	r0, r3
 800ead0:	3710      	adds	r7, #16
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd80      	pop	{r7, pc}

0800ead6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ead6:	b580      	push	{r7, lr}
 800ead8:	b086      	sub	sp, #24
 800eada:	af00      	add	r7, sp, #0
 800eadc:	60f8      	str	r0, [r7, #12]
 800eade:	607a      	str	r2, [r7, #4]
 800eae0:	603b      	str	r3, [r7, #0]
 800eae2:	460b      	mov	r3, r1
 800eae4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eae6:	2300      	movs	r3, #0
 800eae8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eaea:	2300      	movs	r3, #0
 800eaec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800eaf4:	7af9      	ldrb	r1, [r7, #11]
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	687a      	ldr	r2, [r7, #4]
 800eafa:	f7f7 fd23 	bl	8006544 <HAL_PCD_EP_Transmit>
 800eafe:	4603      	mov	r3, r0
 800eb00:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb02:	7dfb      	ldrb	r3, [r7, #23]
 800eb04:	4618      	mov	r0, r3
 800eb06:	f000 f853 	bl	800ebb0 <USBD_Get_USB_Status>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800eb0e:	7dbb      	ldrb	r3, [r7, #22]
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	3718      	adds	r7, #24
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}

0800eb18 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b086      	sub	sp, #24
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	60f8      	str	r0, [r7, #12]
 800eb20:	607a      	str	r2, [r7, #4]
 800eb22:	603b      	str	r3, [r7, #0]
 800eb24:	460b      	mov	r3, r1
 800eb26:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb28:	2300      	movs	r3, #0
 800eb2a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800eb36:	7af9      	ldrb	r1, [r7, #11]
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	687a      	ldr	r2, [r7, #4]
 800eb3c:	f7f7 fcaf 	bl	800649e <HAL_PCD_EP_Receive>
 800eb40:	4603      	mov	r3, r0
 800eb42:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb44:	7dfb      	ldrb	r3, [r7, #23]
 800eb46:	4618      	mov	r0, r3
 800eb48:	f000 f832 	bl	800ebb0 <USBD_Get_USB_Status>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800eb50:	7dbb      	ldrb	r3, [r7, #22]
}
 800eb52:	4618      	mov	r0, r3
 800eb54:	3718      	adds	r7, #24
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd80      	pop	{r7, pc}

0800eb5a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb5a:	b580      	push	{r7, lr}
 800eb5c:	b082      	sub	sp, #8
 800eb5e:	af00      	add	r7, sp, #0
 800eb60:	6078      	str	r0, [r7, #4]
 800eb62:	460b      	mov	r3, r1
 800eb64:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800eb6c:	78fa      	ldrb	r2, [r7, #3]
 800eb6e:	4611      	mov	r1, r2
 800eb70:	4618      	mov	r0, r3
 800eb72:	f7f7 fccf 	bl	8006514 <HAL_PCD_EP_GetRxCount>
 800eb76:	4603      	mov	r3, r0
}
 800eb78:	4618      	mov	r0, r3
 800eb7a:	3708      	adds	r7, #8
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd80      	pop	{r7, pc}

0800eb80 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800eb80:	b480      	push	{r7}
 800eb82:	b083      	sub	sp, #12
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800eb88:	4b03      	ldr	r3, [pc, #12]	@ (800eb98 <USBD_static_malloc+0x18>)
}
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	370c      	adds	r7, #12
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb94:	4770      	bx	lr
 800eb96:	bf00      	nop
 800eb98:	20005a10 	.word	0x20005a10

0800eb9c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	b083      	sub	sp, #12
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]

}
 800eba4:	bf00      	nop
 800eba6:	370c      	adds	r7, #12
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebae:	4770      	bx	lr

0800ebb0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b085      	sub	sp, #20
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ebbe:	79fb      	ldrb	r3, [r7, #7]
 800ebc0:	2b03      	cmp	r3, #3
 800ebc2:	d817      	bhi.n	800ebf4 <USBD_Get_USB_Status+0x44>
 800ebc4:	a201      	add	r2, pc, #4	@ (adr r2, 800ebcc <USBD_Get_USB_Status+0x1c>)
 800ebc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebca:	bf00      	nop
 800ebcc:	0800ebdd 	.word	0x0800ebdd
 800ebd0:	0800ebe3 	.word	0x0800ebe3
 800ebd4:	0800ebe9 	.word	0x0800ebe9
 800ebd8:	0800ebef 	.word	0x0800ebef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	73fb      	strb	r3, [r7, #15]
    break;
 800ebe0:	e00b      	b.n	800ebfa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ebe2:	2303      	movs	r3, #3
 800ebe4:	73fb      	strb	r3, [r7, #15]
    break;
 800ebe6:	e008      	b.n	800ebfa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ebe8:	2301      	movs	r3, #1
 800ebea:	73fb      	strb	r3, [r7, #15]
    break;
 800ebec:	e005      	b.n	800ebfa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ebee:	2303      	movs	r3, #3
 800ebf0:	73fb      	strb	r3, [r7, #15]
    break;
 800ebf2:	e002      	b.n	800ebfa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ebf4:	2303      	movs	r3, #3
 800ebf6:	73fb      	strb	r3, [r7, #15]
    break;
 800ebf8:	bf00      	nop
  }
  return usb_status;
 800ebfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	3714      	adds	r7, #20
 800ec00:	46bd      	mov	sp, r7
 800ec02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec06:	4770      	bx	lr

0800ec08 <atof>:
 800ec08:	2100      	movs	r1, #0
 800ec0a:	f000 be09 	b.w	800f820 <strtod>

0800ec0e <atoi>:
 800ec0e:	220a      	movs	r2, #10
 800ec10:	2100      	movs	r1, #0
 800ec12:	f000 be8b 	b.w	800f92c <strtol>

0800ec16 <sulp>:
 800ec16:	b570      	push	{r4, r5, r6, lr}
 800ec18:	4604      	mov	r4, r0
 800ec1a:	460d      	mov	r5, r1
 800ec1c:	ec45 4b10 	vmov	d0, r4, r5
 800ec20:	4616      	mov	r6, r2
 800ec22:	f003 fc19 	bl	8012458 <__ulp>
 800ec26:	ec51 0b10 	vmov	r0, r1, d0
 800ec2a:	b17e      	cbz	r6, 800ec4c <sulp+0x36>
 800ec2c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ec30:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	dd09      	ble.n	800ec4c <sulp+0x36>
 800ec38:	051b      	lsls	r3, r3, #20
 800ec3a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ec3e:	2400      	movs	r4, #0
 800ec40:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ec44:	4622      	mov	r2, r4
 800ec46:	462b      	mov	r3, r5
 800ec48:	f7f1 fcde 	bl	8000608 <__aeabi_dmul>
 800ec4c:	ec41 0b10 	vmov	d0, r0, r1
 800ec50:	bd70      	pop	{r4, r5, r6, pc}
 800ec52:	0000      	movs	r0, r0
 800ec54:	0000      	movs	r0, r0
	...

0800ec58 <_strtod_l>:
 800ec58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec5c:	b09f      	sub	sp, #124	@ 0x7c
 800ec5e:	460c      	mov	r4, r1
 800ec60:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ec62:	2200      	movs	r2, #0
 800ec64:	921a      	str	r2, [sp, #104]	@ 0x68
 800ec66:	9005      	str	r0, [sp, #20]
 800ec68:	f04f 0a00 	mov.w	sl, #0
 800ec6c:	f04f 0b00 	mov.w	fp, #0
 800ec70:	460a      	mov	r2, r1
 800ec72:	9219      	str	r2, [sp, #100]	@ 0x64
 800ec74:	7811      	ldrb	r1, [r2, #0]
 800ec76:	292b      	cmp	r1, #43	@ 0x2b
 800ec78:	d04a      	beq.n	800ed10 <_strtod_l+0xb8>
 800ec7a:	d838      	bhi.n	800ecee <_strtod_l+0x96>
 800ec7c:	290d      	cmp	r1, #13
 800ec7e:	d832      	bhi.n	800ece6 <_strtod_l+0x8e>
 800ec80:	2908      	cmp	r1, #8
 800ec82:	d832      	bhi.n	800ecea <_strtod_l+0x92>
 800ec84:	2900      	cmp	r1, #0
 800ec86:	d03b      	beq.n	800ed00 <_strtod_l+0xa8>
 800ec88:	2200      	movs	r2, #0
 800ec8a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ec8c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ec8e:	782a      	ldrb	r2, [r5, #0]
 800ec90:	2a30      	cmp	r2, #48	@ 0x30
 800ec92:	f040 80b2 	bne.w	800edfa <_strtod_l+0x1a2>
 800ec96:	786a      	ldrb	r2, [r5, #1]
 800ec98:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ec9c:	2a58      	cmp	r2, #88	@ 0x58
 800ec9e:	d16e      	bne.n	800ed7e <_strtod_l+0x126>
 800eca0:	9302      	str	r3, [sp, #8]
 800eca2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eca4:	9301      	str	r3, [sp, #4]
 800eca6:	ab1a      	add	r3, sp, #104	@ 0x68
 800eca8:	9300      	str	r3, [sp, #0]
 800ecaa:	4a8f      	ldr	r2, [pc, #572]	@ (800eee8 <_strtod_l+0x290>)
 800ecac:	9805      	ldr	r0, [sp, #20]
 800ecae:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ecb0:	a919      	add	r1, sp, #100	@ 0x64
 800ecb2:	f002 fccb 	bl	801164c <__gethex>
 800ecb6:	f010 060f 	ands.w	r6, r0, #15
 800ecba:	4604      	mov	r4, r0
 800ecbc:	d005      	beq.n	800ecca <_strtod_l+0x72>
 800ecbe:	2e06      	cmp	r6, #6
 800ecc0:	d128      	bne.n	800ed14 <_strtod_l+0xbc>
 800ecc2:	3501      	adds	r5, #1
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	9519      	str	r5, [sp, #100]	@ 0x64
 800ecc8:	930e      	str	r3, [sp, #56]	@ 0x38
 800ecca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	f040 858e 	bne.w	800f7ee <_strtod_l+0xb96>
 800ecd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ecd4:	b1cb      	cbz	r3, 800ed0a <_strtod_l+0xb2>
 800ecd6:	4652      	mov	r2, sl
 800ecd8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ecdc:	ec43 2b10 	vmov	d0, r2, r3
 800ece0:	b01f      	add	sp, #124	@ 0x7c
 800ece2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ece6:	2920      	cmp	r1, #32
 800ece8:	d1ce      	bne.n	800ec88 <_strtod_l+0x30>
 800ecea:	3201      	adds	r2, #1
 800ecec:	e7c1      	b.n	800ec72 <_strtod_l+0x1a>
 800ecee:	292d      	cmp	r1, #45	@ 0x2d
 800ecf0:	d1ca      	bne.n	800ec88 <_strtod_l+0x30>
 800ecf2:	2101      	movs	r1, #1
 800ecf4:	910e      	str	r1, [sp, #56]	@ 0x38
 800ecf6:	1c51      	adds	r1, r2, #1
 800ecf8:	9119      	str	r1, [sp, #100]	@ 0x64
 800ecfa:	7852      	ldrb	r2, [r2, #1]
 800ecfc:	2a00      	cmp	r2, #0
 800ecfe:	d1c5      	bne.n	800ec8c <_strtod_l+0x34>
 800ed00:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ed02:	9419      	str	r4, [sp, #100]	@ 0x64
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	f040 8570 	bne.w	800f7ea <_strtod_l+0xb92>
 800ed0a:	4652      	mov	r2, sl
 800ed0c:	465b      	mov	r3, fp
 800ed0e:	e7e5      	b.n	800ecdc <_strtod_l+0x84>
 800ed10:	2100      	movs	r1, #0
 800ed12:	e7ef      	b.n	800ecf4 <_strtod_l+0x9c>
 800ed14:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ed16:	b13a      	cbz	r2, 800ed28 <_strtod_l+0xd0>
 800ed18:	2135      	movs	r1, #53	@ 0x35
 800ed1a:	a81c      	add	r0, sp, #112	@ 0x70
 800ed1c:	f003 fc96 	bl	801264c <__copybits>
 800ed20:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ed22:	9805      	ldr	r0, [sp, #20]
 800ed24:	f003 f86c 	bl	8011e00 <_Bfree>
 800ed28:	3e01      	subs	r6, #1
 800ed2a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ed2c:	2e04      	cmp	r6, #4
 800ed2e:	d806      	bhi.n	800ed3e <_strtod_l+0xe6>
 800ed30:	e8df f006 	tbb	[pc, r6]
 800ed34:	201d0314 	.word	0x201d0314
 800ed38:	14          	.byte	0x14
 800ed39:	00          	.byte	0x00
 800ed3a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ed3e:	05e1      	lsls	r1, r4, #23
 800ed40:	bf48      	it	mi
 800ed42:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ed46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ed4a:	0d1b      	lsrs	r3, r3, #20
 800ed4c:	051b      	lsls	r3, r3, #20
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d1bb      	bne.n	800ecca <_strtod_l+0x72>
 800ed52:	f001 fd0d 	bl	8010770 <__errno>
 800ed56:	2322      	movs	r3, #34	@ 0x22
 800ed58:	6003      	str	r3, [r0, #0]
 800ed5a:	e7b6      	b.n	800ecca <_strtod_l+0x72>
 800ed5c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ed60:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ed64:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ed68:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ed6c:	e7e7      	b.n	800ed3e <_strtod_l+0xe6>
 800ed6e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800eef0 <_strtod_l+0x298>
 800ed72:	e7e4      	b.n	800ed3e <_strtod_l+0xe6>
 800ed74:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ed78:	f04f 3aff 	mov.w	sl, #4294967295
 800ed7c:	e7df      	b.n	800ed3e <_strtod_l+0xe6>
 800ed7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ed80:	1c5a      	adds	r2, r3, #1
 800ed82:	9219      	str	r2, [sp, #100]	@ 0x64
 800ed84:	785b      	ldrb	r3, [r3, #1]
 800ed86:	2b30      	cmp	r3, #48	@ 0x30
 800ed88:	d0f9      	beq.n	800ed7e <_strtod_l+0x126>
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d09d      	beq.n	800ecca <_strtod_l+0x72>
 800ed8e:	2301      	movs	r3, #1
 800ed90:	2700      	movs	r7, #0
 800ed92:	9308      	str	r3, [sp, #32]
 800ed94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ed96:	930c      	str	r3, [sp, #48]	@ 0x30
 800ed98:	970b      	str	r7, [sp, #44]	@ 0x2c
 800ed9a:	46b9      	mov	r9, r7
 800ed9c:	220a      	movs	r2, #10
 800ed9e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800eda0:	7805      	ldrb	r5, [r0, #0]
 800eda2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800eda6:	b2d9      	uxtb	r1, r3
 800eda8:	2909      	cmp	r1, #9
 800edaa:	d928      	bls.n	800edfe <_strtod_l+0x1a6>
 800edac:	494f      	ldr	r1, [pc, #316]	@ (800eeec <_strtod_l+0x294>)
 800edae:	2201      	movs	r2, #1
 800edb0:	f001 fbf9 	bl	80105a6 <strncmp>
 800edb4:	2800      	cmp	r0, #0
 800edb6:	d032      	beq.n	800ee1e <_strtod_l+0x1c6>
 800edb8:	2000      	movs	r0, #0
 800edba:	462a      	mov	r2, r5
 800edbc:	900a      	str	r0, [sp, #40]	@ 0x28
 800edbe:	464d      	mov	r5, r9
 800edc0:	4603      	mov	r3, r0
 800edc2:	2a65      	cmp	r2, #101	@ 0x65
 800edc4:	d001      	beq.n	800edca <_strtod_l+0x172>
 800edc6:	2a45      	cmp	r2, #69	@ 0x45
 800edc8:	d114      	bne.n	800edf4 <_strtod_l+0x19c>
 800edca:	b91d      	cbnz	r5, 800edd4 <_strtod_l+0x17c>
 800edcc:	9a08      	ldr	r2, [sp, #32]
 800edce:	4302      	orrs	r2, r0
 800edd0:	d096      	beq.n	800ed00 <_strtod_l+0xa8>
 800edd2:	2500      	movs	r5, #0
 800edd4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800edd6:	1c62      	adds	r2, r4, #1
 800edd8:	9219      	str	r2, [sp, #100]	@ 0x64
 800edda:	7862      	ldrb	r2, [r4, #1]
 800eddc:	2a2b      	cmp	r2, #43	@ 0x2b
 800edde:	d07a      	beq.n	800eed6 <_strtod_l+0x27e>
 800ede0:	2a2d      	cmp	r2, #45	@ 0x2d
 800ede2:	d07e      	beq.n	800eee2 <_strtod_l+0x28a>
 800ede4:	f04f 0c00 	mov.w	ip, #0
 800ede8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800edec:	2909      	cmp	r1, #9
 800edee:	f240 8085 	bls.w	800eefc <_strtod_l+0x2a4>
 800edf2:	9419      	str	r4, [sp, #100]	@ 0x64
 800edf4:	f04f 0800 	mov.w	r8, #0
 800edf8:	e0a5      	b.n	800ef46 <_strtod_l+0x2ee>
 800edfa:	2300      	movs	r3, #0
 800edfc:	e7c8      	b.n	800ed90 <_strtod_l+0x138>
 800edfe:	f1b9 0f08 	cmp.w	r9, #8
 800ee02:	bfd8      	it	le
 800ee04:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800ee06:	f100 0001 	add.w	r0, r0, #1
 800ee0a:	bfda      	itte	le
 800ee0c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ee10:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800ee12:	fb02 3707 	mlagt	r7, r2, r7, r3
 800ee16:	f109 0901 	add.w	r9, r9, #1
 800ee1a:	9019      	str	r0, [sp, #100]	@ 0x64
 800ee1c:	e7bf      	b.n	800ed9e <_strtod_l+0x146>
 800ee1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ee20:	1c5a      	adds	r2, r3, #1
 800ee22:	9219      	str	r2, [sp, #100]	@ 0x64
 800ee24:	785a      	ldrb	r2, [r3, #1]
 800ee26:	f1b9 0f00 	cmp.w	r9, #0
 800ee2a:	d03b      	beq.n	800eea4 <_strtod_l+0x24c>
 800ee2c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ee2e:	464d      	mov	r5, r9
 800ee30:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ee34:	2b09      	cmp	r3, #9
 800ee36:	d912      	bls.n	800ee5e <_strtod_l+0x206>
 800ee38:	2301      	movs	r3, #1
 800ee3a:	e7c2      	b.n	800edc2 <_strtod_l+0x16a>
 800ee3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ee3e:	1c5a      	adds	r2, r3, #1
 800ee40:	9219      	str	r2, [sp, #100]	@ 0x64
 800ee42:	785a      	ldrb	r2, [r3, #1]
 800ee44:	3001      	adds	r0, #1
 800ee46:	2a30      	cmp	r2, #48	@ 0x30
 800ee48:	d0f8      	beq.n	800ee3c <_strtod_l+0x1e4>
 800ee4a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ee4e:	2b08      	cmp	r3, #8
 800ee50:	f200 84d2 	bhi.w	800f7f8 <_strtod_l+0xba0>
 800ee54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ee56:	900a      	str	r0, [sp, #40]	@ 0x28
 800ee58:	2000      	movs	r0, #0
 800ee5a:	930c      	str	r3, [sp, #48]	@ 0x30
 800ee5c:	4605      	mov	r5, r0
 800ee5e:	3a30      	subs	r2, #48	@ 0x30
 800ee60:	f100 0301 	add.w	r3, r0, #1
 800ee64:	d018      	beq.n	800ee98 <_strtod_l+0x240>
 800ee66:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ee68:	4419      	add	r1, r3
 800ee6a:	910a      	str	r1, [sp, #40]	@ 0x28
 800ee6c:	462e      	mov	r6, r5
 800ee6e:	f04f 0e0a 	mov.w	lr, #10
 800ee72:	1c71      	adds	r1, r6, #1
 800ee74:	eba1 0c05 	sub.w	ip, r1, r5
 800ee78:	4563      	cmp	r3, ip
 800ee7a:	dc15      	bgt.n	800eea8 <_strtod_l+0x250>
 800ee7c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800ee80:	182b      	adds	r3, r5, r0
 800ee82:	2b08      	cmp	r3, #8
 800ee84:	f105 0501 	add.w	r5, r5, #1
 800ee88:	4405      	add	r5, r0
 800ee8a:	dc1a      	bgt.n	800eec2 <_strtod_l+0x26a>
 800ee8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ee8e:	230a      	movs	r3, #10
 800ee90:	fb03 2301 	mla	r3, r3, r1, r2
 800ee94:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ee96:	2300      	movs	r3, #0
 800ee98:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ee9a:	1c51      	adds	r1, r2, #1
 800ee9c:	9119      	str	r1, [sp, #100]	@ 0x64
 800ee9e:	7852      	ldrb	r2, [r2, #1]
 800eea0:	4618      	mov	r0, r3
 800eea2:	e7c5      	b.n	800ee30 <_strtod_l+0x1d8>
 800eea4:	4648      	mov	r0, r9
 800eea6:	e7ce      	b.n	800ee46 <_strtod_l+0x1ee>
 800eea8:	2e08      	cmp	r6, #8
 800eeaa:	dc05      	bgt.n	800eeb8 <_strtod_l+0x260>
 800eeac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800eeae:	fb0e f606 	mul.w	r6, lr, r6
 800eeb2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800eeb4:	460e      	mov	r6, r1
 800eeb6:	e7dc      	b.n	800ee72 <_strtod_l+0x21a>
 800eeb8:	2910      	cmp	r1, #16
 800eeba:	bfd8      	it	le
 800eebc:	fb0e f707 	mulle.w	r7, lr, r7
 800eec0:	e7f8      	b.n	800eeb4 <_strtod_l+0x25c>
 800eec2:	2b0f      	cmp	r3, #15
 800eec4:	bfdc      	itt	le
 800eec6:	230a      	movle	r3, #10
 800eec8:	fb03 2707 	mlale	r7, r3, r7, r2
 800eecc:	e7e3      	b.n	800ee96 <_strtod_l+0x23e>
 800eece:	2300      	movs	r3, #0
 800eed0:	930a      	str	r3, [sp, #40]	@ 0x28
 800eed2:	2301      	movs	r3, #1
 800eed4:	e77a      	b.n	800edcc <_strtod_l+0x174>
 800eed6:	f04f 0c00 	mov.w	ip, #0
 800eeda:	1ca2      	adds	r2, r4, #2
 800eedc:	9219      	str	r2, [sp, #100]	@ 0x64
 800eede:	78a2      	ldrb	r2, [r4, #2]
 800eee0:	e782      	b.n	800ede8 <_strtod_l+0x190>
 800eee2:	f04f 0c01 	mov.w	ip, #1
 800eee6:	e7f8      	b.n	800eeda <_strtod_l+0x282>
 800eee8:	080143f4 	.word	0x080143f4
 800eeec:	080141b4 	.word	0x080141b4
 800eef0:	7ff00000 	.word	0x7ff00000
 800eef4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eef6:	1c51      	adds	r1, r2, #1
 800eef8:	9119      	str	r1, [sp, #100]	@ 0x64
 800eefa:	7852      	ldrb	r2, [r2, #1]
 800eefc:	2a30      	cmp	r2, #48	@ 0x30
 800eefe:	d0f9      	beq.n	800eef4 <_strtod_l+0x29c>
 800ef00:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ef04:	2908      	cmp	r1, #8
 800ef06:	f63f af75 	bhi.w	800edf4 <_strtod_l+0x19c>
 800ef0a:	3a30      	subs	r2, #48	@ 0x30
 800ef0c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ef0e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ef10:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ef12:	f04f 080a 	mov.w	r8, #10
 800ef16:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ef18:	1c56      	adds	r6, r2, #1
 800ef1a:	9619      	str	r6, [sp, #100]	@ 0x64
 800ef1c:	7852      	ldrb	r2, [r2, #1]
 800ef1e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ef22:	f1be 0f09 	cmp.w	lr, #9
 800ef26:	d939      	bls.n	800ef9c <_strtod_l+0x344>
 800ef28:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ef2a:	1a76      	subs	r6, r6, r1
 800ef2c:	2e08      	cmp	r6, #8
 800ef2e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ef32:	dc03      	bgt.n	800ef3c <_strtod_l+0x2e4>
 800ef34:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ef36:	4588      	cmp	r8, r1
 800ef38:	bfa8      	it	ge
 800ef3a:	4688      	movge	r8, r1
 800ef3c:	f1bc 0f00 	cmp.w	ip, #0
 800ef40:	d001      	beq.n	800ef46 <_strtod_l+0x2ee>
 800ef42:	f1c8 0800 	rsb	r8, r8, #0
 800ef46:	2d00      	cmp	r5, #0
 800ef48:	d14e      	bne.n	800efe8 <_strtod_l+0x390>
 800ef4a:	9908      	ldr	r1, [sp, #32]
 800ef4c:	4308      	orrs	r0, r1
 800ef4e:	f47f aebc 	bne.w	800ecca <_strtod_l+0x72>
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	f47f aed4 	bne.w	800ed00 <_strtod_l+0xa8>
 800ef58:	2a69      	cmp	r2, #105	@ 0x69
 800ef5a:	d028      	beq.n	800efae <_strtod_l+0x356>
 800ef5c:	dc25      	bgt.n	800efaa <_strtod_l+0x352>
 800ef5e:	2a49      	cmp	r2, #73	@ 0x49
 800ef60:	d025      	beq.n	800efae <_strtod_l+0x356>
 800ef62:	2a4e      	cmp	r2, #78	@ 0x4e
 800ef64:	f47f aecc 	bne.w	800ed00 <_strtod_l+0xa8>
 800ef68:	499a      	ldr	r1, [pc, #616]	@ (800f1d4 <_strtod_l+0x57c>)
 800ef6a:	a819      	add	r0, sp, #100	@ 0x64
 800ef6c:	f002 fd90 	bl	8011a90 <__match>
 800ef70:	2800      	cmp	r0, #0
 800ef72:	f43f aec5 	beq.w	800ed00 <_strtod_l+0xa8>
 800ef76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ef78:	781b      	ldrb	r3, [r3, #0]
 800ef7a:	2b28      	cmp	r3, #40	@ 0x28
 800ef7c:	d12e      	bne.n	800efdc <_strtod_l+0x384>
 800ef7e:	4996      	ldr	r1, [pc, #600]	@ (800f1d8 <_strtod_l+0x580>)
 800ef80:	aa1c      	add	r2, sp, #112	@ 0x70
 800ef82:	a819      	add	r0, sp, #100	@ 0x64
 800ef84:	f002 fd98 	bl	8011ab8 <__hexnan>
 800ef88:	2805      	cmp	r0, #5
 800ef8a:	d127      	bne.n	800efdc <_strtod_l+0x384>
 800ef8c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ef8e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ef92:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ef96:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ef9a:	e696      	b.n	800ecca <_strtod_l+0x72>
 800ef9c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ef9e:	fb08 2101 	mla	r1, r8, r1, r2
 800efa2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800efa6:	9209      	str	r2, [sp, #36]	@ 0x24
 800efa8:	e7b5      	b.n	800ef16 <_strtod_l+0x2be>
 800efaa:	2a6e      	cmp	r2, #110	@ 0x6e
 800efac:	e7da      	b.n	800ef64 <_strtod_l+0x30c>
 800efae:	498b      	ldr	r1, [pc, #556]	@ (800f1dc <_strtod_l+0x584>)
 800efb0:	a819      	add	r0, sp, #100	@ 0x64
 800efb2:	f002 fd6d 	bl	8011a90 <__match>
 800efb6:	2800      	cmp	r0, #0
 800efb8:	f43f aea2 	beq.w	800ed00 <_strtod_l+0xa8>
 800efbc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800efbe:	4988      	ldr	r1, [pc, #544]	@ (800f1e0 <_strtod_l+0x588>)
 800efc0:	3b01      	subs	r3, #1
 800efc2:	a819      	add	r0, sp, #100	@ 0x64
 800efc4:	9319      	str	r3, [sp, #100]	@ 0x64
 800efc6:	f002 fd63 	bl	8011a90 <__match>
 800efca:	b910      	cbnz	r0, 800efd2 <_strtod_l+0x37a>
 800efcc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800efce:	3301      	adds	r3, #1
 800efd0:	9319      	str	r3, [sp, #100]	@ 0x64
 800efd2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800f1f0 <_strtod_l+0x598>
 800efd6:	f04f 0a00 	mov.w	sl, #0
 800efda:	e676      	b.n	800ecca <_strtod_l+0x72>
 800efdc:	4881      	ldr	r0, [pc, #516]	@ (800f1e4 <_strtod_l+0x58c>)
 800efde:	f001 fc03 	bl	80107e8 <nan>
 800efe2:	ec5b ab10 	vmov	sl, fp, d0
 800efe6:	e670      	b.n	800ecca <_strtod_l+0x72>
 800efe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800efea:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800efec:	eba8 0303 	sub.w	r3, r8, r3
 800eff0:	f1b9 0f00 	cmp.w	r9, #0
 800eff4:	bf08      	it	eq
 800eff6:	46a9      	moveq	r9, r5
 800eff8:	2d10      	cmp	r5, #16
 800effa:	9309      	str	r3, [sp, #36]	@ 0x24
 800effc:	462c      	mov	r4, r5
 800effe:	bfa8      	it	ge
 800f000:	2410      	movge	r4, #16
 800f002:	f7f1 fa87 	bl	8000514 <__aeabi_ui2d>
 800f006:	2d09      	cmp	r5, #9
 800f008:	4682      	mov	sl, r0
 800f00a:	468b      	mov	fp, r1
 800f00c:	dc13      	bgt.n	800f036 <_strtod_l+0x3de>
 800f00e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f010:	2b00      	cmp	r3, #0
 800f012:	f43f ae5a 	beq.w	800ecca <_strtod_l+0x72>
 800f016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f018:	dd78      	ble.n	800f10c <_strtod_l+0x4b4>
 800f01a:	2b16      	cmp	r3, #22
 800f01c:	dc5f      	bgt.n	800f0de <_strtod_l+0x486>
 800f01e:	4972      	ldr	r1, [pc, #456]	@ (800f1e8 <_strtod_l+0x590>)
 800f020:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f024:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f028:	4652      	mov	r2, sl
 800f02a:	465b      	mov	r3, fp
 800f02c:	f7f1 faec 	bl	8000608 <__aeabi_dmul>
 800f030:	4682      	mov	sl, r0
 800f032:	468b      	mov	fp, r1
 800f034:	e649      	b.n	800ecca <_strtod_l+0x72>
 800f036:	4b6c      	ldr	r3, [pc, #432]	@ (800f1e8 <_strtod_l+0x590>)
 800f038:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f03c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f040:	f7f1 fae2 	bl	8000608 <__aeabi_dmul>
 800f044:	4682      	mov	sl, r0
 800f046:	4638      	mov	r0, r7
 800f048:	468b      	mov	fp, r1
 800f04a:	f7f1 fa63 	bl	8000514 <__aeabi_ui2d>
 800f04e:	4602      	mov	r2, r0
 800f050:	460b      	mov	r3, r1
 800f052:	4650      	mov	r0, sl
 800f054:	4659      	mov	r1, fp
 800f056:	f7f1 f921 	bl	800029c <__adddf3>
 800f05a:	2d0f      	cmp	r5, #15
 800f05c:	4682      	mov	sl, r0
 800f05e:	468b      	mov	fp, r1
 800f060:	ddd5      	ble.n	800f00e <_strtod_l+0x3b6>
 800f062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f064:	1b2c      	subs	r4, r5, r4
 800f066:	441c      	add	r4, r3
 800f068:	2c00      	cmp	r4, #0
 800f06a:	f340 8093 	ble.w	800f194 <_strtod_l+0x53c>
 800f06e:	f014 030f 	ands.w	r3, r4, #15
 800f072:	d00a      	beq.n	800f08a <_strtod_l+0x432>
 800f074:	495c      	ldr	r1, [pc, #368]	@ (800f1e8 <_strtod_l+0x590>)
 800f076:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f07a:	4652      	mov	r2, sl
 800f07c:	465b      	mov	r3, fp
 800f07e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f082:	f7f1 fac1 	bl	8000608 <__aeabi_dmul>
 800f086:	4682      	mov	sl, r0
 800f088:	468b      	mov	fp, r1
 800f08a:	f034 040f 	bics.w	r4, r4, #15
 800f08e:	d073      	beq.n	800f178 <_strtod_l+0x520>
 800f090:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f094:	dd49      	ble.n	800f12a <_strtod_l+0x4d2>
 800f096:	2400      	movs	r4, #0
 800f098:	46a0      	mov	r8, r4
 800f09a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f09c:	46a1      	mov	r9, r4
 800f09e:	9a05      	ldr	r2, [sp, #20]
 800f0a0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800f1f0 <_strtod_l+0x598>
 800f0a4:	2322      	movs	r3, #34	@ 0x22
 800f0a6:	6013      	str	r3, [r2, #0]
 800f0a8:	f04f 0a00 	mov.w	sl, #0
 800f0ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	f43f ae0b 	beq.w	800ecca <_strtod_l+0x72>
 800f0b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f0b6:	9805      	ldr	r0, [sp, #20]
 800f0b8:	f002 fea2 	bl	8011e00 <_Bfree>
 800f0bc:	9805      	ldr	r0, [sp, #20]
 800f0be:	4649      	mov	r1, r9
 800f0c0:	f002 fe9e 	bl	8011e00 <_Bfree>
 800f0c4:	9805      	ldr	r0, [sp, #20]
 800f0c6:	4641      	mov	r1, r8
 800f0c8:	f002 fe9a 	bl	8011e00 <_Bfree>
 800f0cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f0ce:	9805      	ldr	r0, [sp, #20]
 800f0d0:	f002 fe96 	bl	8011e00 <_Bfree>
 800f0d4:	9805      	ldr	r0, [sp, #20]
 800f0d6:	4621      	mov	r1, r4
 800f0d8:	f002 fe92 	bl	8011e00 <_Bfree>
 800f0dc:	e5f5      	b.n	800ecca <_strtod_l+0x72>
 800f0de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f0e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f0e4:	4293      	cmp	r3, r2
 800f0e6:	dbbc      	blt.n	800f062 <_strtod_l+0x40a>
 800f0e8:	4c3f      	ldr	r4, [pc, #252]	@ (800f1e8 <_strtod_l+0x590>)
 800f0ea:	f1c5 050f 	rsb	r5, r5, #15
 800f0ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f0f2:	4652      	mov	r2, sl
 800f0f4:	465b      	mov	r3, fp
 800f0f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0fa:	f7f1 fa85 	bl	8000608 <__aeabi_dmul>
 800f0fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f100:	1b5d      	subs	r5, r3, r5
 800f102:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f106:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f10a:	e78f      	b.n	800f02c <_strtod_l+0x3d4>
 800f10c:	3316      	adds	r3, #22
 800f10e:	dba8      	blt.n	800f062 <_strtod_l+0x40a>
 800f110:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f112:	eba3 0808 	sub.w	r8, r3, r8
 800f116:	4b34      	ldr	r3, [pc, #208]	@ (800f1e8 <_strtod_l+0x590>)
 800f118:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f11c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f120:	4650      	mov	r0, sl
 800f122:	4659      	mov	r1, fp
 800f124:	f7f1 fb9a 	bl	800085c <__aeabi_ddiv>
 800f128:	e782      	b.n	800f030 <_strtod_l+0x3d8>
 800f12a:	2300      	movs	r3, #0
 800f12c:	4f2f      	ldr	r7, [pc, #188]	@ (800f1ec <_strtod_l+0x594>)
 800f12e:	1124      	asrs	r4, r4, #4
 800f130:	4650      	mov	r0, sl
 800f132:	4659      	mov	r1, fp
 800f134:	461e      	mov	r6, r3
 800f136:	2c01      	cmp	r4, #1
 800f138:	dc21      	bgt.n	800f17e <_strtod_l+0x526>
 800f13a:	b10b      	cbz	r3, 800f140 <_strtod_l+0x4e8>
 800f13c:	4682      	mov	sl, r0
 800f13e:	468b      	mov	fp, r1
 800f140:	492a      	ldr	r1, [pc, #168]	@ (800f1ec <_strtod_l+0x594>)
 800f142:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f146:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f14a:	4652      	mov	r2, sl
 800f14c:	465b      	mov	r3, fp
 800f14e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f152:	f7f1 fa59 	bl	8000608 <__aeabi_dmul>
 800f156:	4b26      	ldr	r3, [pc, #152]	@ (800f1f0 <_strtod_l+0x598>)
 800f158:	460a      	mov	r2, r1
 800f15a:	400b      	ands	r3, r1
 800f15c:	4925      	ldr	r1, [pc, #148]	@ (800f1f4 <_strtod_l+0x59c>)
 800f15e:	428b      	cmp	r3, r1
 800f160:	4682      	mov	sl, r0
 800f162:	d898      	bhi.n	800f096 <_strtod_l+0x43e>
 800f164:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f168:	428b      	cmp	r3, r1
 800f16a:	bf86      	itte	hi
 800f16c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800f1f8 <_strtod_l+0x5a0>
 800f170:	f04f 3aff 	movhi.w	sl, #4294967295
 800f174:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f178:	2300      	movs	r3, #0
 800f17a:	9308      	str	r3, [sp, #32]
 800f17c:	e076      	b.n	800f26c <_strtod_l+0x614>
 800f17e:	07e2      	lsls	r2, r4, #31
 800f180:	d504      	bpl.n	800f18c <_strtod_l+0x534>
 800f182:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f186:	f7f1 fa3f 	bl	8000608 <__aeabi_dmul>
 800f18a:	2301      	movs	r3, #1
 800f18c:	3601      	adds	r6, #1
 800f18e:	1064      	asrs	r4, r4, #1
 800f190:	3708      	adds	r7, #8
 800f192:	e7d0      	b.n	800f136 <_strtod_l+0x4de>
 800f194:	d0f0      	beq.n	800f178 <_strtod_l+0x520>
 800f196:	4264      	negs	r4, r4
 800f198:	f014 020f 	ands.w	r2, r4, #15
 800f19c:	d00a      	beq.n	800f1b4 <_strtod_l+0x55c>
 800f19e:	4b12      	ldr	r3, [pc, #72]	@ (800f1e8 <_strtod_l+0x590>)
 800f1a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f1a4:	4650      	mov	r0, sl
 800f1a6:	4659      	mov	r1, fp
 800f1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ac:	f7f1 fb56 	bl	800085c <__aeabi_ddiv>
 800f1b0:	4682      	mov	sl, r0
 800f1b2:	468b      	mov	fp, r1
 800f1b4:	1124      	asrs	r4, r4, #4
 800f1b6:	d0df      	beq.n	800f178 <_strtod_l+0x520>
 800f1b8:	2c1f      	cmp	r4, #31
 800f1ba:	dd1f      	ble.n	800f1fc <_strtod_l+0x5a4>
 800f1bc:	2400      	movs	r4, #0
 800f1be:	46a0      	mov	r8, r4
 800f1c0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f1c2:	46a1      	mov	r9, r4
 800f1c4:	9a05      	ldr	r2, [sp, #20]
 800f1c6:	2322      	movs	r3, #34	@ 0x22
 800f1c8:	f04f 0a00 	mov.w	sl, #0
 800f1cc:	f04f 0b00 	mov.w	fp, #0
 800f1d0:	6013      	str	r3, [r2, #0]
 800f1d2:	e76b      	b.n	800f0ac <_strtod_l+0x454>
 800f1d4:	080141c3 	.word	0x080141c3
 800f1d8:	080143e0 	.word	0x080143e0
 800f1dc:	080141bb 	.word	0x080141bb
 800f1e0:	080142a2 	.word	0x080142a2
 800f1e4:	0801429e 	.word	0x0801429e
 800f1e8:	08014568 	.word	0x08014568
 800f1ec:	08014540 	.word	0x08014540
 800f1f0:	7ff00000 	.word	0x7ff00000
 800f1f4:	7ca00000 	.word	0x7ca00000
 800f1f8:	7fefffff 	.word	0x7fefffff
 800f1fc:	f014 0310 	ands.w	r3, r4, #16
 800f200:	bf18      	it	ne
 800f202:	236a      	movne	r3, #106	@ 0x6a
 800f204:	4ea9      	ldr	r6, [pc, #676]	@ (800f4ac <_strtod_l+0x854>)
 800f206:	9308      	str	r3, [sp, #32]
 800f208:	4650      	mov	r0, sl
 800f20a:	4659      	mov	r1, fp
 800f20c:	2300      	movs	r3, #0
 800f20e:	07e7      	lsls	r7, r4, #31
 800f210:	d504      	bpl.n	800f21c <_strtod_l+0x5c4>
 800f212:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f216:	f7f1 f9f7 	bl	8000608 <__aeabi_dmul>
 800f21a:	2301      	movs	r3, #1
 800f21c:	1064      	asrs	r4, r4, #1
 800f21e:	f106 0608 	add.w	r6, r6, #8
 800f222:	d1f4      	bne.n	800f20e <_strtod_l+0x5b6>
 800f224:	b10b      	cbz	r3, 800f22a <_strtod_l+0x5d2>
 800f226:	4682      	mov	sl, r0
 800f228:	468b      	mov	fp, r1
 800f22a:	9b08      	ldr	r3, [sp, #32]
 800f22c:	b1b3      	cbz	r3, 800f25c <_strtod_l+0x604>
 800f22e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f232:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f236:	2b00      	cmp	r3, #0
 800f238:	4659      	mov	r1, fp
 800f23a:	dd0f      	ble.n	800f25c <_strtod_l+0x604>
 800f23c:	2b1f      	cmp	r3, #31
 800f23e:	dd56      	ble.n	800f2ee <_strtod_l+0x696>
 800f240:	2b34      	cmp	r3, #52	@ 0x34
 800f242:	bfde      	ittt	le
 800f244:	f04f 33ff 	movle.w	r3, #4294967295
 800f248:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f24c:	4093      	lslle	r3, r2
 800f24e:	f04f 0a00 	mov.w	sl, #0
 800f252:	bfcc      	ite	gt
 800f254:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f258:	ea03 0b01 	andle.w	fp, r3, r1
 800f25c:	2200      	movs	r2, #0
 800f25e:	2300      	movs	r3, #0
 800f260:	4650      	mov	r0, sl
 800f262:	4659      	mov	r1, fp
 800f264:	f7f1 fc38 	bl	8000ad8 <__aeabi_dcmpeq>
 800f268:	2800      	cmp	r0, #0
 800f26a:	d1a7      	bne.n	800f1bc <_strtod_l+0x564>
 800f26c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f26e:	9300      	str	r3, [sp, #0]
 800f270:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f272:	9805      	ldr	r0, [sp, #20]
 800f274:	462b      	mov	r3, r5
 800f276:	464a      	mov	r2, r9
 800f278:	f002 fe2a 	bl	8011ed0 <__s2b>
 800f27c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f27e:	2800      	cmp	r0, #0
 800f280:	f43f af09 	beq.w	800f096 <_strtod_l+0x43e>
 800f284:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f286:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f288:	2a00      	cmp	r2, #0
 800f28a:	eba3 0308 	sub.w	r3, r3, r8
 800f28e:	bfa8      	it	ge
 800f290:	2300      	movge	r3, #0
 800f292:	9312      	str	r3, [sp, #72]	@ 0x48
 800f294:	2400      	movs	r4, #0
 800f296:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f29a:	9316      	str	r3, [sp, #88]	@ 0x58
 800f29c:	46a0      	mov	r8, r4
 800f29e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f2a0:	9805      	ldr	r0, [sp, #20]
 800f2a2:	6859      	ldr	r1, [r3, #4]
 800f2a4:	f002 fd6c 	bl	8011d80 <_Balloc>
 800f2a8:	4681      	mov	r9, r0
 800f2aa:	2800      	cmp	r0, #0
 800f2ac:	f43f aef7 	beq.w	800f09e <_strtod_l+0x446>
 800f2b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f2b2:	691a      	ldr	r2, [r3, #16]
 800f2b4:	3202      	adds	r2, #2
 800f2b6:	f103 010c 	add.w	r1, r3, #12
 800f2ba:	0092      	lsls	r2, r2, #2
 800f2bc:	300c      	adds	r0, #12
 800f2be:	f001 fa84 	bl	80107ca <memcpy>
 800f2c2:	ec4b ab10 	vmov	d0, sl, fp
 800f2c6:	9805      	ldr	r0, [sp, #20]
 800f2c8:	aa1c      	add	r2, sp, #112	@ 0x70
 800f2ca:	a91b      	add	r1, sp, #108	@ 0x6c
 800f2cc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f2d0:	f003 f932 	bl	8012538 <__d2b>
 800f2d4:	901a      	str	r0, [sp, #104]	@ 0x68
 800f2d6:	2800      	cmp	r0, #0
 800f2d8:	f43f aee1 	beq.w	800f09e <_strtod_l+0x446>
 800f2dc:	9805      	ldr	r0, [sp, #20]
 800f2de:	2101      	movs	r1, #1
 800f2e0:	f002 fe8c 	bl	8011ffc <__i2b>
 800f2e4:	4680      	mov	r8, r0
 800f2e6:	b948      	cbnz	r0, 800f2fc <_strtod_l+0x6a4>
 800f2e8:	f04f 0800 	mov.w	r8, #0
 800f2ec:	e6d7      	b.n	800f09e <_strtod_l+0x446>
 800f2ee:	f04f 32ff 	mov.w	r2, #4294967295
 800f2f2:	fa02 f303 	lsl.w	r3, r2, r3
 800f2f6:	ea03 0a0a 	and.w	sl, r3, sl
 800f2fa:	e7af      	b.n	800f25c <_strtod_l+0x604>
 800f2fc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f2fe:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f300:	2d00      	cmp	r5, #0
 800f302:	bfab      	itete	ge
 800f304:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f306:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f308:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f30a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f30c:	bfac      	ite	ge
 800f30e:	18ef      	addge	r7, r5, r3
 800f310:	1b5e      	sublt	r6, r3, r5
 800f312:	9b08      	ldr	r3, [sp, #32]
 800f314:	1aed      	subs	r5, r5, r3
 800f316:	4415      	add	r5, r2
 800f318:	4b65      	ldr	r3, [pc, #404]	@ (800f4b0 <_strtod_l+0x858>)
 800f31a:	3d01      	subs	r5, #1
 800f31c:	429d      	cmp	r5, r3
 800f31e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f322:	da50      	bge.n	800f3c6 <_strtod_l+0x76e>
 800f324:	1b5b      	subs	r3, r3, r5
 800f326:	2b1f      	cmp	r3, #31
 800f328:	eba2 0203 	sub.w	r2, r2, r3
 800f32c:	f04f 0101 	mov.w	r1, #1
 800f330:	dc3d      	bgt.n	800f3ae <_strtod_l+0x756>
 800f332:	fa01 f303 	lsl.w	r3, r1, r3
 800f336:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f338:	2300      	movs	r3, #0
 800f33a:	9310      	str	r3, [sp, #64]	@ 0x40
 800f33c:	18bd      	adds	r5, r7, r2
 800f33e:	9b08      	ldr	r3, [sp, #32]
 800f340:	42af      	cmp	r7, r5
 800f342:	4416      	add	r6, r2
 800f344:	441e      	add	r6, r3
 800f346:	463b      	mov	r3, r7
 800f348:	bfa8      	it	ge
 800f34a:	462b      	movge	r3, r5
 800f34c:	42b3      	cmp	r3, r6
 800f34e:	bfa8      	it	ge
 800f350:	4633      	movge	r3, r6
 800f352:	2b00      	cmp	r3, #0
 800f354:	bfc2      	ittt	gt
 800f356:	1aed      	subgt	r5, r5, r3
 800f358:	1af6      	subgt	r6, r6, r3
 800f35a:	1aff      	subgt	r7, r7, r3
 800f35c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f35e:	2b00      	cmp	r3, #0
 800f360:	dd16      	ble.n	800f390 <_strtod_l+0x738>
 800f362:	4641      	mov	r1, r8
 800f364:	9805      	ldr	r0, [sp, #20]
 800f366:	461a      	mov	r2, r3
 800f368:	f002 ff00 	bl	801216c <__pow5mult>
 800f36c:	4680      	mov	r8, r0
 800f36e:	2800      	cmp	r0, #0
 800f370:	d0ba      	beq.n	800f2e8 <_strtod_l+0x690>
 800f372:	4601      	mov	r1, r0
 800f374:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f376:	9805      	ldr	r0, [sp, #20]
 800f378:	f002 fe56 	bl	8012028 <__multiply>
 800f37c:	900a      	str	r0, [sp, #40]	@ 0x28
 800f37e:	2800      	cmp	r0, #0
 800f380:	f43f ae8d 	beq.w	800f09e <_strtod_l+0x446>
 800f384:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f386:	9805      	ldr	r0, [sp, #20]
 800f388:	f002 fd3a 	bl	8011e00 <_Bfree>
 800f38c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f38e:	931a      	str	r3, [sp, #104]	@ 0x68
 800f390:	2d00      	cmp	r5, #0
 800f392:	dc1d      	bgt.n	800f3d0 <_strtod_l+0x778>
 800f394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f396:	2b00      	cmp	r3, #0
 800f398:	dd23      	ble.n	800f3e2 <_strtod_l+0x78a>
 800f39a:	4649      	mov	r1, r9
 800f39c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f39e:	9805      	ldr	r0, [sp, #20]
 800f3a0:	f002 fee4 	bl	801216c <__pow5mult>
 800f3a4:	4681      	mov	r9, r0
 800f3a6:	b9e0      	cbnz	r0, 800f3e2 <_strtod_l+0x78a>
 800f3a8:	f04f 0900 	mov.w	r9, #0
 800f3ac:	e677      	b.n	800f09e <_strtod_l+0x446>
 800f3ae:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f3b2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f3b6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f3ba:	35e2      	adds	r5, #226	@ 0xe2
 800f3bc:	fa01 f305 	lsl.w	r3, r1, r5
 800f3c0:	9310      	str	r3, [sp, #64]	@ 0x40
 800f3c2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f3c4:	e7ba      	b.n	800f33c <_strtod_l+0x6e4>
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	9310      	str	r3, [sp, #64]	@ 0x40
 800f3ca:	2301      	movs	r3, #1
 800f3cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f3ce:	e7b5      	b.n	800f33c <_strtod_l+0x6e4>
 800f3d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f3d2:	9805      	ldr	r0, [sp, #20]
 800f3d4:	462a      	mov	r2, r5
 800f3d6:	f002 ff23 	bl	8012220 <__lshift>
 800f3da:	901a      	str	r0, [sp, #104]	@ 0x68
 800f3dc:	2800      	cmp	r0, #0
 800f3de:	d1d9      	bne.n	800f394 <_strtod_l+0x73c>
 800f3e0:	e65d      	b.n	800f09e <_strtod_l+0x446>
 800f3e2:	2e00      	cmp	r6, #0
 800f3e4:	dd07      	ble.n	800f3f6 <_strtod_l+0x79e>
 800f3e6:	4649      	mov	r1, r9
 800f3e8:	9805      	ldr	r0, [sp, #20]
 800f3ea:	4632      	mov	r2, r6
 800f3ec:	f002 ff18 	bl	8012220 <__lshift>
 800f3f0:	4681      	mov	r9, r0
 800f3f2:	2800      	cmp	r0, #0
 800f3f4:	d0d8      	beq.n	800f3a8 <_strtod_l+0x750>
 800f3f6:	2f00      	cmp	r7, #0
 800f3f8:	dd08      	ble.n	800f40c <_strtod_l+0x7b4>
 800f3fa:	4641      	mov	r1, r8
 800f3fc:	9805      	ldr	r0, [sp, #20]
 800f3fe:	463a      	mov	r2, r7
 800f400:	f002 ff0e 	bl	8012220 <__lshift>
 800f404:	4680      	mov	r8, r0
 800f406:	2800      	cmp	r0, #0
 800f408:	f43f ae49 	beq.w	800f09e <_strtod_l+0x446>
 800f40c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f40e:	9805      	ldr	r0, [sp, #20]
 800f410:	464a      	mov	r2, r9
 800f412:	f002 ff8d 	bl	8012330 <__mdiff>
 800f416:	4604      	mov	r4, r0
 800f418:	2800      	cmp	r0, #0
 800f41a:	f43f ae40 	beq.w	800f09e <_strtod_l+0x446>
 800f41e:	68c3      	ldr	r3, [r0, #12]
 800f420:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f422:	2300      	movs	r3, #0
 800f424:	60c3      	str	r3, [r0, #12]
 800f426:	4641      	mov	r1, r8
 800f428:	f002 ff66 	bl	80122f8 <__mcmp>
 800f42c:	2800      	cmp	r0, #0
 800f42e:	da45      	bge.n	800f4bc <_strtod_l+0x864>
 800f430:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f432:	ea53 030a 	orrs.w	r3, r3, sl
 800f436:	d16b      	bne.n	800f510 <_strtod_l+0x8b8>
 800f438:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d167      	bne.n	800f510 <_strtod_l+0x8b8>
 800f440:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f444:	0d1b      	lsrs	r3, r3, #20
 800f446:	051b      	lsls	r3, r3, #20
 800f448:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f44c:	d960      	bls.n	800f510 <_strtod_l+0x8b8>
 800f44e:	6963      	ldr	r3, [r4, #20]
 800f450:	b913      	cbnz	r3, 800f458 <_strtod_l+0x800>
 800f452:	6923      	ldr	r3, [r4, #16]
 800f454:	2b01      	cmp	r3, #1
 800f456:	dd5b      	ble.n	800f510 <_strtod_l+0x8b8>
 800f458:	4621      	mov	r1, r4
 800f45a:	2201      	movs	r2, #1
 800f45c:	9805      	ldr	r0, [sp, #20]
 800f45e:	f002 fedf 	bl	8012220 <__lshift>
 800f462:	4641      	mov	r1, r8
 800f464:	4604      	mov	r4, r0
 800f466:	f002 ff47 	bl	80122f8 <__mcmp>
 800f46a:	2800      	cmp	r0, #0
 800f46c:	dd50      	ble.n	800f510 <_strtod_l+0x8b8>
 800f46e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f472:	9a08      	ldr	r2, [sp, #32]
 800f474:	0d1b      	lsrs	r3, r3, #20
 800f476:	051b      	lsls	r3, r3, #20
 800f478:	2a00      	cmp	r2, #0
 800f47a:	d06a      	beq.n	800f552 <_strtod_l+0x8fa>
 800f47c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f480:	d867      	bhi.n	800f552 <_strtod_l+0x8fa>
 800f482:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f486:	f67f ae9d 	bls.w	800f1c4 <_strtod_l+0x56c>
 800f48a:	4b0a      	ldr	r3, [pc, #40]	@ (800f4b4 <_strtod_l+0x85c>)
 800f48c:	4650      	mov	r0, sl
 800f48e:	4659      	mov	r1, fp
 800f490:	2200      	movs	r2, #0
 800f492:	f7f1 f8b9 	bl	8000608 <__aeabi_dmul>
 800f496:	4b08      	ldr	r3, [pc, #32]	@ (800f4b8 <_strtod_l+0x860>)
 800f498:	400b      	ands	r3, r1
 800f49a:	4682      	mov	sl, r0
 800f49c:	468b      	mov	fp, r1
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	f47f ae08 	bne.w	800f0b4 <_strtod_l+0x45c>
 800f4a4:	9a05      	ldr	r2, [sp, #20]
 800f4a6:	2322      	movs	r3, #34	@ 0x22
 800f4a8:	6013      	str	r3, [r2, #0]
 800f4aa:	e603      	b.n	800f0b4 <_strtod_l+0x45c>
 800f4ac:	08014408 	.word	0x08014408
 800f4b0:	fffffc02 	.word	0xfffffc02
 800f4b4:	39500000 	.word	0x39500000
 800f4b8:	7ff00000 	.word	0x7ff00000
 800f4bc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f4c0:	d165      	bne.n	800f58e <_strtod_l+0x936>
 800f4c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f4c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f4c8:	b35a      	cbz	r2, 800f522 <_strtod_l+0x8ca>
 800f4ca:	4a9f      	ldr	r2, [pc, #636]	@ (800f748 <_strtod_l+0xaf0>)
 800f4cc:	4293      	cmp	r3, r2
 800f4ce:	d12b      	bne.n	800f528 <_strtod_l+0x8d0>
 800f4d0:	9b08      	ldr	r3, [sp, #32]
 800f4d2:	4651      	mov	r1, sl
 800f4d4:	b303      	cbz	r3, 800f518 <_strtod_l+0x8c0>
 800f4d6:	4b9d      	ldr	r3, [pc, #628]	@ (800f74c <_strtod_l+0xaf4>)
 800f4d8:	465a      	mov	r2, fp
 800f4da:	4013      	ands	r3, r2
 800f4dc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f4e0:	f04f 32ff 	mov.w	r2, #4294967295
 800f4e4:	d81b      	bhi.n	800f51e <_strtod_l+0x8c6>
 800f4e6:	0d1b      	lsrs	r3, r3, #20
 800f4e8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f4ec:	fa02 f303 	lsl.w	r3, r2, r3
 800f4f0:	4299      	cmp	r1, r3
 800f4f2:	d119      	bne.n	800f528 <_strtod_l+0x8d0>
 800f4f4:	4b96      	ldr	r3, [pc, #600]	@ (800f750 <_strtod_l+0xaf8>)
 800f4f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f4f8:	429a      	cmp	r2, r3
 800f4fa:	d102      	bne.n	800f502 <_strtod_l+0x8aa>
 800f4fc:	3101      	adds	r1, #1
 800f4fe:	f43f adce 	beq.w	800f09e <_strtod_l+0x446>
 800f502:	4b92      	ldr	r3, [pc, #584]	@ (800f74c <_strtod_l+0xaf4>)
 800f504:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f506:	401a      	ands	r2, r3
 800f508:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f50c:	f04f 0a00 	mov.w	sl, #0
 800f510:	9b08      	ldr	r3, [sp, #32]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d1b9      	bne.n	800f48a <_strtod_l+0x832>
 800f516:	e5cd      	b.n	800f0b4 <_strtod_l+0x45c>
 800f518:	f04f 33ff 	mov.w	r3, #4294967295
 800f51c:	e7e8      	b.n	800f4f0 <_strtod_l+0x898>
 800f51e:	4613      	mov	r3, r2
 800f520:	e7e6      	b.n	800f4f0 <_strtod_l+0x898>
 800f522:	ea53 030a 	orrs.w	r3, r3, sl
 800f526:	d0a2      	beq.n	800f46e <_strtod_l+0x816>
 800f528:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f52a:	b1db      	cbz	r3, 800f564 <_strtod_l+0x90c>
 800f52c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f52e:	4213      	tst	r3, r2
 800f530:	d0ee      	beq.n	800f510 <_strtod_l+0x8b8>
 800f532:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f534:	9a08      	ldr	r2, [sp, #32]
 800f536:	4650      	mov	r0, sl
 800f538:	4659      	mov	r1, fp
 800f53a:	b1bb      	cbz	r3, 800f56c <_strtod_l+0x914>
 800f53c:	f7ff fb6b 	bl	800ec16 <sulp>
 800f540:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f544:	ec53 2b10 	vmov	r2, r3, d0
 800f548:	f7f0 fea8 	bl	800029c <__adddf3>
 800f54c:	4682      	mov	sl, r0
 800f54e:	468b      	mov	fp, r1
 800f550:	e7de      	b.n	800f510 <_strtod_l+0x8b8>
 800f552:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f556:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f55a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f55e:	f04f 3aff 	mov.w	sl, #4294967295
 800f562:	e7d5      	b.n	800f510 <_strtod_l+0x8b8>
 800f564:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f566:	ea13 0f0a 	tst.w	r3, sl
 800f56a:	e7e1      	b.n	800f530 <_strtod_l+0x8d8>
 800f56c:	f7ff fb53 	bl	800ec16 <sulp>
 800f570:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f574:	ec53 2b10 	vmov	r2, r3, d0
 800f578:	f7f0 fe8e 	bl	8000298 <__aeabi_dsub>
 800f57c:	2200      	movs	r2, #0
 800f57e:	2300      	movs	r3, #0
 800f580:	4682      	mov	sl, r0
 800f582:	468b      	mov	fp, r1
 800f584:	f7f1 faa8 	bl	8000ad8 <__aeabi_dcmpeq>
 800f588:	2800      	cmp	r0, #0
 800f58a:	d0c1      	beq.n	800f510 <_strtod_l+0x8b8>
 800f58c:	e61a      	b.n	800f1c4 <_strtod_l+0x56c>
 800f58e:	4641      	mov	r1, r8
 800f590:	4620      	mov	r0, r4
 800f592:	f003 f829 	bl	80125e8 <__ratio>
 800f596:	ec57 6b10 	vmov	r6, r7, d0
 800f59a:	2200      	movs	r2, #0
 800f59c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f5a0:	4630      	mov	r0, r6
 800f5a2:	4639      	mov	r1, r7
 800f5a4:	f7f1 faac 	bl	8000b00 <__aeabi_dcmple>
 800f5a8:	2800      	cmp	r0, #0
 800f5aa:	d06f      	beq.n	800f68c <_strtod_l+0xa34>
 800f5ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d17a      	bne.n	800f6a8 <_strtod_l+0xa50>
 800f5b2:	f1ba 0f00 	cmp.w	sl, #0
 800f5b6:	d158      	bne.n	800f66a <_strtod_l+0xa12>
 800f5b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d15a      	bne.n	800f678 <_strtod_l+0xa20>
 800f5c2:	4b64      	ldr	r3, [pc, #400]	@ (800f754 <_strtod_l+0xafc>)
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	4630      	mov	r0, r6
 800f5c8:	4639      	mov	r1, r7
 800f5ca:	f7f1 fa8f 	bl	8000aec <__aeabi_dcmplt>
 800f5ce:	2800      	cmp	r0, #0
 800f5d0:	d159      	bne.n	800f686 <_strtod_l+0xa2e>
 800f5d2:	4630      	mov	r0, r6
 800f5d4:	4639      	mov	r1, r7
 800f5d6:	4b60      	ldr	r3, [pc, #384]	@ (800f758 <_strtod_l+0xb00>)
 800f5d8:	2200      	movs	r2, #0
 800f5da:	f7f1 f815 	bl	8000608 <__aeabi_dmul>
 800f5de:	4606      	mov	r6, r0
 800f5e0:	460f      	mov	r7, r1
 800f5e2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f5e6:	9606      	str	r6, [sp, #24]
 800f5e8:	9307      	str	r3, [sp, #28]
 800f5ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f5ee:	4d57      	ldr	r5, [pc, #348]	@ (800f74c <_strtod_l+0xaf4>)
 800f5f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f5f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5f6:	401d      	ands	r5, r3
 800f5f8:	4b58      	ldr	r3, [pc, #352]	@ (800f75c <_strtod_l+0xb04>)
 800f5fa:	429d      	cmp	r5, r3
 800f5fc:	f040 80b2 	bne.w	800f764 <_strtod_l+0xb0c>
 800f600:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f602:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f606:	ec4b ab10 	vmov	d0, sl, fp
 800f60a:	f002 ff25 	bl	8012458 <__ulp>
 800f60e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f612:	ec51 0b10 	vmov	r0, r1, d0
 800f616:	f7f0 fff7 	bl	8000608 <__aeabi_dmul>
 800f61a:	4652      	mov	r2, sl
 800f61c:	465b      	mov	r3, fp
 800f61e:	f7f0 fe3d 	bl	800029c <__adddf3>
 800f622:	460b      	mov	r3, r1
 800f624:	4949      	ldr	r1, [pc, #292]	@ (800f74c <_strtod_l+0xaf4>)
 800f626:	4a4e      	ldr	r2, [pc, #312]	@ (800f760 <_strtod_l+0xb08>)
 800f628:	4019      	ands	r1, r3
 800f62a:	4291      	cmp	r1, r2
 800f62c:	4682      	mov	sl, r0
 800f62e:	d942      	bls.n	800f6b6 <_strtod_l+0xa5e>
 800f630:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f632:	4b47      	ldr	r3, [pc, #284]	@ (800f750 <_strtod_l+0xaf8>)
 800f634:	429a      	cmp	r2, r3
 800f636:	d103      	bne.n	800f640 <_strtod_l+0x9e8>
 800f638:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f63a:	3301      	adds	r3, #1
 800f63c:	f43f ad2f 	beq.w	800f09e <_strtod_l+0x446>
 800f640:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f750 <_strtod_l+0xaf8>
 800f644:	f04f 3aff 	mov.w	sl, #4294967295
 800f648:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f64a:	9805      	ldr	r0, [sp, #20]
 800f64c:	f002 fbd8 	bl	8011e00 <_Bfree>
 800f650:	9805      	ldr	r0, [sp, #20]
 800f652:	4649      	mov	r1, r9
 800f654:	f002 fbd4 	bl	8011e00 <_Bfree>
 800f658:	9805      	ldr	r0, [sp, #20]
 800f65a:	4641      	mov	r1, r8
 800f65c:	f002 fbd0 	bl	8011e00 <_Bfree>
 800f660:	9805      	ldr	r0, [sp, #20]
 800f662:	4621      	mov	r1, r4
 800f664:	f002 fbcc 	bl	8011e00 <_Bfree>
 800f668:	e619      	b.n	800f29e <_strtod_l+0x646>
 800f66a:	f1ba 0f01 	cmp.w	sl, #1
 800f66e:	d103      	bne.n	800f678 <_strtod_l+0xa20>
 800f670:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f672:	2b00      	cmp	r3, #0
 800f674:	f43f ada6 	beq.w	800f1c4 <_strtod_l+0x56c>
 800f678:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f728 <_strtod_l+0xad0>
 800f67c:	4f35      	ldr	r7, [pc, #212]	@ (800f754 <_strtod_l+0xafc>)
 800f67e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f682:	2600      	movs	r6, #0
 800f684:	e7b1      	b.n	800f5ea <_strtod_l+0x992>
 800f686:	4f34      	ldr	r7, [pc, #208]	@ (800f758 <_strtod_l+0xb00>)
 800f688:	2600      	movs	r6, #0
 800f68a:	e7aa      	b.n	800f5e2 <_strtod_l+0x98a>
 800f68c:	4b32      	ldr	r3, [pc, #200]	@ (800f758 <_strtod_l+0xb00>)
 800f68e:	4630      	mov	r0, r6
 800f690:	4639      	mov	r1, r7
 800f692:	2200      	movs	r2, #0
 800f694:	f7f0 ffb8 	bl	8000608 <__aeabi_dmul>
 800f698:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f69a:	4606      	mov	r6, r0
 800f69c:	460f      	mov	r7, r1
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d09f      	beq.n	800f5e2 <_strtod_l+0x98a>
 800f6a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f6a6:	e7a0      	b.n	800f5ea <_strtod_l+0x992>
 800f6a8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f730 <_strtod_l+0xad8>
 800f6ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f6b0:	ec57 6b17 	vmov	r6, r7, d7
 800f6b4:	e799      	b.n	800f5ea <_strtod_l+0x992>
 800f6b6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f6ba:	9b08      	ldr	r3, [sp, #32]
 800f6bc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d1c1      	bne.n	800f648 <_strtod_l+0x9f0>
 800f6c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f6c8:	0d1b      	lsrs	r3, r3, #20
 800f6ca:	051b      	lsls	r3, r3, #20
 800f6cc:	429d      	cmp	r5, r3
 800f6ce:	d1bb      	bne.n	800f648 <_strtod_l+0x9f0>
 800f6d0:	4630      	mov	r0, r6
 800f6d2:	4639      	mov	r1, r7
 800f6d4:	f7f1 faa8 	bl	8000c28 <__aeabi_d2lz>
 800f6d8:	f7f0 ff68 	bl	80005ac <__aeabi_l2d>
 800f6dc:	4602      	mov	r2, r0
 800f6de:	460b      	mov	r3, r1
 800f6e0:	4630      	mov	r0, r6
 800f6e2:	4639      	mov	r1, r7
 800f6e4:	f7f0 fdd8 	bl	8000298 <__aeabi_dsub>
 800f6e8:	460b      	mov	r3, r1
 800f6ea:	4602      	mov	r2, r0
 800f6ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f6f0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f6f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f6f6:	ea46 060a 	orr.w	r6, r6, sl
 800f6fa:	431e      	orrs	r6, r3
 800f6fc:	d06f      	beq.n	800f7de <_strtod_l+0xb86>
 800f6fe:	a30e      	add	r3, pc, #56	@ (adr r3, 800f738 <_strtod_l+0xae0>)
 800f700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f704:	f7f1 f9f2 	bl	8000aec <__aeabi_dcmplt>
 800f708:	2800      	cmp	r0, #0
 800f70a:	f47f acd3 	bne.w	800f0b4 <_strtod_l+0x45c>
 800f70e:	a30c      	add	r3, pc, #48	@ (adr r3, 800f740 <_strtod_l+0xae8>)
 800f710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f714:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f718:	f7f1 fa06 	bl	8000b28 <__aeabi_dcmpgt>
 800f71c:	2800      	cmp	r0, #0
 800f71e:	d093      	beq.n	800f648 <_strtod_l+0x9f0>
 800f720:	e4c8      	b.n	800f0b4 <_strtod_l+0x45c>
 800f722:	bf00      	nop
 800f724:	f3af 8000 	nop.w
 800f728:	00000000 	.word	0x00000000
 800f72c:	bff00000 	.word	0xbff00000
 800f730:	00000000 	.word	0x00000000
 800f734:	3ff00000 	.word	0x3ff00000
 800f738:	94a03595 	.word	0x94a03595
 800f73c:	3fdfffff 	.word	0x3fdfffff
 800f740:	35afe535 	.word	0x35afe535
 800f744:	3fe00000 	.word	0x3fe00000
 800f748:	000fffff 	.word	0x000fffff
 800f74c:	7ff00000 	.word	0x7ff00000
 800f750:	7fefffff 	.word	0x7fefffff
 800f754:	3ff00000 	.word	0x3ff00000
 800f758:	3fe00000 	.word	0x3fe00000
 800f75c:	7fe00000 	.word	0x7fe00000
 800f760:	7c9fffff 	.word	0x7c9fffff
 800f764:	9b08      	ldr	r3, [sp, #32]
 800f766:	b323      	cbz	r3, 800f7b2 <_strtod_l+0xb5a>
 800f768:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f76c:	d821      	bhi.n	800f7b2 <_strtod_l+0xb5a>
 800f76e:	a328      	add	r3, pc, #160	@ (adr r3, 800f810 <_strtod_l+0xbb8>)
 800f770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f774:	4630      	mov	r0, r6
 800f776:	4639      	mov	r1, r7
 800f778:	f7f1 f9c2 	bl	8000b00 <__aeabi_dcmple>
 800f77c:	b1a0      	cbz	r0, 800f7a8 <_strtod_l+0xb50>
 800f77e:	4639      	mov	r1, r7
 800f780:	4630      	mov	r0, r6
 800f782:	f7f1 fa19 	bl	8000bb8 <__aeabi_d2uiz>
 800f786:	2801      	cmp	r0, #1
 800f788:	bf38      	it	cc
 800f78a:	2001      	movcc	r0, #1
 800f78c:	f7f0 fec2 	bl	8000514 <__aeabi_ui2d>
 800f790:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f792:	4606      	mov	r6, r0
 800f794:	460f      	mov	r7, r1
 800f796:	b9fb      	cbnz	r3, 800f7d8 <_strtod_l+0xb80>
 800f798:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f79c:	9014      	str	r0, [sp, #80]	@ 0x50
 800f79e:	9315      	str	r3, [sp, #84]	@ 0x54
 800f7a0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f7a4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f7a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f7aa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f7ae:	1b5b      	subs	r3, r3, r5
 800f7b0:	9311      	str	r3, [sp, #68]	@ 0x44
 800f7b2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f7b6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f7ba:	f002 fe4d 	bl	8012458 <__ulp>
 800f7be:	4650      	mov	r0, sl
 800f7c0:	ec53 2b10 	vmov	r2, r3, d0
 800f7c4:	4659      	mov	r1, fp
 800f7c6:	f7f0 ff1f 	bl	8000608 <__aeabi_dmul>
 800f7ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f7ce:	f7f0 fd65 	bl	800029c <__adddf3>
 800f7d2:	4682      	mov	sl, r0
 800f7d4:	468b      	mov	fp, r1
 800f7d6:	e770      	b.n	800f6ba <_strtod_l+0xa62>
 800f7d8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f7dc:	e7e0      	b.n	800f7a0 <_strtod_l+0xb48>
 800f7de:	a30e      	add	r3, pc, #56	@ (adr r3, 800f818 <_strtod_l+0xbc0>)
 800f7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7e4:	f7f1 f982 	bl	8000aec <__aeabi_dcmplt>
 800f7e8:	e798      	b.n	800f71c <_strtod_l+0xac4>
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	930e      	str	r3, [sp, #56]	@ 0x38
 800f7ee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f7f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f7f2:	6013      	str	r3, [r2, #0]
 800f7f4:	f7ff ba6d 	b.w	800ecd2 <_strtod_l+0x7a>
 800f7f8:	2a65      	cmp	r2, #101	@ 0x65
 800f7fa:	f43f ab68 	beq.w	800eece <_strtod_l+0x276>
 800f7fe:	2a45      	cmp	r2, #69	@ 0x45
 800f800:	f43f ab65 	beq.w	800eece <_strtod_l+0x276>
 800f804:	2301      	movs	r3, #1
 800f806:	f7ff bba0 	b.w	800ef4a <_strtod_l+0x2f2>
 800f80a:	bf00      	nop
 800f80c:	f3af 8000 	nop.w
 800f810:	ffc00000 	.word	0xffc00000
 800f814:	41dfffff 	.word	0x41dfffff
 800f818:	94a03595 	.word	0x94a03595
 800f81c:	3fcfffff 	.word	0x3fcfffff

0800f820 <strtod>:
 800f820:	460a      	mov	r2, r1
 800f822:	4601      	mov	r1, r0
 800f824:	4802      	ldr	r0, [pc, #8]	@ (800f830 <strtod+0x10>)
 800f826:	4b03      	ldr	r3, [pc, #12]	@ (800f834 <strtod+0x14>)
 800f828:	6800      	ldr	r0, [r0, #0]
 800f82a:	f7ff ba15 	b.w	800ec58 <_strtod_l>
 800f82e:	bf00      	nop
 800f830:	20000320 	.word	0x20000320
 800f834:	200001b4 	.word	0x200001b4

0800f838 <_strtol_l.isra.0>:
 800f838:	2b24      	cmp	r3, #36	@ 0x24
 800f83a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f83e:	4686      	mov	lr, r0
 800f840:	4690      	mov	r8, r2
 800f842:	d801      	bhi.n	800f848 <_strtol_l.isra.0+0x10>
 800f844:	2b01      	cmp	r3, #1
 800f846:	d106      	bne.n	800f856 <_strtol_l.isra.0+0x1e>
 800f848:	f000 ff92 	bl	8010770 <__errno>
 800f84c:	2316      	movs	r3, #22
 800f84e:	6003      	str	r3, [r0, #0]
 800f850:	2000      	movs	r0, #0
 800f852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f856:	4834      	ldr	r0, [pc, #208]	@ (800f928 <_strtol_l.isra.0+0xf0>)
 800f858:	460d      	mov	r5, r1
 800f85a:	462a      	mov	r2, r5
 800f85c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f860:	5d06      	ldrb	r6, [r0, r4]
 800f862:	f016 0608 	ands.w	r6, r6, #8
 800f866:	d1f8      	bne.n	800f85a <_strtol_l.isra.0+0x22>
 800f868:	2c2d      	cmp	r4, #45	@ 0x2d
 800f86a:	d110      	bne.n	800f88e <_strtol_l.isra.0+0x56>
 800f86c:	782c      	ldrb	r4, [r5, #0]
 800f86e:	2601      	movs	r6, #1
 800f870:	1c95      	adds	r5, r2, #2
 800f872:	f033 0210 	bics.w	r2, r3, #16
 800f876:	d115      	bne.n	800f8a4 <_strtol_l.isra.0+0x6c>
 800f878:	2c30      	cmp	r4, #48	@ 0x30
 800f87a:	d10d      	bne.n	800f898 <_strtol_l.isra.0+0x60>
 800f87c:	782a      	ldrb	r2, [r5, #0]
 800f87e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f882:	2a58      	cmp	r2, #88	@ 0x58
 800f884:	d108      	bne.n	800f898 <_strtol_l.isra.0+0x60>
 800f886:	786c      	ldrb	r4, [r5, #1]
 800f888:	3502      	adds	r5, #2
 800f88a:	2310      	movs	r3, #16
 800f88c:	e00a      	b.n	800f8a4 <_strtol_l.isra.0+0x6c>
 800f88e:	2c2b      	cmp	r4, #43	@ 0x2b
 800f890:	bf04      	itt	eq
 800f892:	782c      	ldrbeq	r4, [r5, #0]
 800f894:	1c95      	addeq	r5, r2, #2
 800f896:	e7ec      	b.n	800f872 <_strtol_l.isra.0+0x3a>
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d1f6      	bne.n	800f88a <_strtol_l.isra.0+0x52>
 800f89c:	2c30      	cmp	r4, #48	@ 0x30
 800f89e:	bf14      	ite	ne
 800f8a0:	230a      	movne	r3, #10
 800f8a2:	2308      	moveq	r3, #8
 800f8a4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f8a8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	fbbc f9f3 	udiv	r9, ip, r3
 800f8b2:	4610      	mov	r0, r2
 800f8b4:	fb03 ca19 	mls	sl, r3, r9, ip
 800f8b8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f8bc:	2f09      	cmp	r7, #9
 800f8be:	d80f      	bhi.n	800f8e0 <_strtol_l.isra.0+0xa8>
 800f8c0:	463c      	mov	r4, r7
 800f8c2:	42a3      	cmp	r3, r4
 800f8c4:	dd1b      	ble.n	800f8fe <_strtol_l.isra.0+0xc6>
 800f8c6:	1c57      	adds	r7, r2, #1
 800f8c8:	d007      	beq.n	800f8da <_strtol_l.isra.0+0xa2>
 800f8ca:	4581      	cmp	r9, r0
 800f8cc:	d314      	bcc.n	800f8f8 <_strtol_l.isra.0+0xc0>
 800f8ce:	d101      	bne.n	800f8d4 <_strtol_l.isra.0+0x9c>
 800f8d0:	45a2      	cmp	sl, r4
 800f8d2:	db11      	blt.n	800f8f8 <_strtol_l.isra.0+0xc0>
 800f8d4:	fb00 4003 	mla	r0, r0, r3, r4
 800f8d8:	2201      	movs	r2, #1
 800f8da:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f8de:	e7eb      	b.n	800f8b8 <_strtol_l.isra.0+0x80>
 800f8e0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f8e4:	2f19      	cmp	r7, #25
 800f8e6:	d801      	bhi.n	800f8ec <_strtol_l.isra.0+0xb4>
 800f8e8:	3c37      	subs	r4, #55	@ 0x37
 800f8ea:	e7ea      	b.n	800f8c2 <_strtol_l.isra.0+0x8a>
 800f8ec:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f8f0:	2f19      	cmp	r7, #25
 800f8f2:	d804      	bhi.n	800f8fe <_strtol_l.isra.0+0xc6>
 800f8f4:	3c57      	subs	r4, #87	@ 0x57
 800f8f6:	e7e4      	b.n	800f8c2 <_strtol_l.isra.0+0x8a>
 800f8f8:	f04f 32ff 	mov.w	r2, #4294967295
 800f8fc:	e7ed      	b.n	800f8da <_strtol_l.isra.0+0xa2>
 800f8fe:	1c53      	adds	r3, r2, #1
 800f900:	d108      	bne.n	800f914 <_strtol_l.isra.0+0xdc>
 800f902:	2322      	movs	r3, #34	@ 0x22
 800f904:	f8ce 3000 	str.w	r3, [lr]
 800f908:	4660      	mov	r0, ip
 800f90a:	f1b8 0f00 	cmp.w	r8, #0
 800f90e:	d0a0      	beq.n	800f852 <_strtol_l.isra.0+0x1a>
 800f910:	1e69      	subs	r1, r5, #1
 800f912:	e006      	b.n	800f922 <_strtol_l.isra.0+0xea>
 800f914:	b106      	cbz	r6, 800f918 <_strtol_l.isra.0+0xe0>
 800f916:	4240      	negs	r0, r0
 800f918:	f1b8 0f00 	cmp.w	r8, #0
 800f91c:	d099      	beq.n	800f852 <_strtol_l.isra.0+0x1a>
 800f91e:	2a00      	cmp	r2, #0
 800f920:	d1f6      	bne.n	800f910 <_strtol_l.isra.0+0xd8>
 800f922:	f8c8 1000 	str.w	r1, [r8]
 800f926:	e794      	b.n	800f852 <_strtol_l.isra.0+0x1a>
 800f928:	08014431 	.word	0x08014431

0800f92c <strtol>:
 800f92c:	4613      	mov	r3, r2
 800f92e:	460a      	mov	r2, r1
 800f930:	4601      	mov	r1, r0
 800f932:	4802      	ldr	r0, [pc, #8]	@ (800f93c <strtol+0x10>)
 800f934:	6800      	ldr	r0, [r0, #0]
 800f936:	f7ff bf7f 	b.w	800f838 <_strtol_l.isra.0>
 800f93a:	bf00      	nop
 800f93c:	20000320 	.word	0x20000320

0800f940 <_strtoul_l.isra.0>:
 800f940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f944:	4e34      	ldr	r6, [pc, #208]	@ (800fa18 <_strtoul_l.isra.0+0xd8>)
 800f946:	4686      	mov	lr, r0
 800f948:	460d      	mov	r5, r1
 800f94a:	4628      	mov	r0, r5
 800f94c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f950:	5d37      	ldrb	r7, [r6, r4]
 800f952:	f017 0708 	ands.w	r7, r7, #8
 800f956:	d1f8      	bne.n	800f94a <_strtoul_l.isra.0+0xa>
 800f958:	2c2d      	cmp	r4, #45	@ 0x2d
 800f95a:	d110      	bne.n	800f97e <_strtoul_l.isra.0+0x3e>
 800f95c:	782c      	ldrb	r4, [r5, #0]
 800f95e:	2701      	movs	r7, #1
 800f960:	1c85      	adds	r5, r0, #2
 800f962:	f033 0010 	bics.w	r0, r3, #16
 800f966:	d115      	bne.n	800f994 <_strtoul_l.isra.0+0x54>
 800f968:	2c30      	cmp	r4, #48	@ 0x30
 800f96a:	d10d      	bne.n	800f988 <_strtoul_l.isra.0+0x48>
 800f96c:	7828      	ldrb	r0, [r5, #0]
 800f96e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800f972:	2858      	cmp	r0, #88	@ 0x58
 800f974:	d108      	bne.n	800f988 <_strtoul_l.isra.0+0x48>
 800f976:	786c      	ldrb	r4, [r5, #1]
 800f978:	3502      	adds	r5, #2
 800f97a:	2310      	movs	r3, #16
 800f97c:	e00a      	b.n	800f994 <_strtoul_l.isra.0+0x54>
 800f97e:	2c2b      	cmp	r4, #43	@ 0x2b
 800f980:	bf04      	itt	eq
 800f982:	782c      	ldrbeq	r4, [r5, #0]
 800f984:	1c85      	addeq	r5, r0, #2
 800f986:	e7ec      	b.n	800f962 <_strtoul_l.isra.0+0x22>
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d1f6      	bne.n	800f97a <_strtoul_l.isra.0+0x3a>
 800f98c:	2c30      	cmp	r4, #48	@ 0x30
 800f98e:	bf14      	ite	ne
 800f990:	230a      	movne	r3, #10
 800f992:	2308      	moveq	r3, #8
 800f994:	f04f 38ff 	mov.w	r8, #4294967295
 800f998:	2600      	movs	r6, #0
 800f99a:	fbb8 f8f3 	udiv	r8, r8, r3
 800f99e:	fb03 f908 	mul.w	r9, r3, r8
 800f9a2:	ea6f 0909 	mvn.w	r9, r9
 800f9a6:	4630      	mov	r0, r6
 800f9a8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800f9ac:	f1bc 0f09 	cmp.w	ip, #9
 800f9b0:	d810      	bhi.n	800f9d4 <_strtoul_l.isra.0+0x94>
 800f9b2:	4664      	mov	r4, ip
 800f9b4:	42a3      	cmp	r3, r4
 800f9b6:	dd1e      	ble.n	800f9f6 <_strtoul_l.isra.0+0xb6>
 800f9b8:	f1b6 3fff 	cmp.w	r6, #4294967295
 800f9bc:	d007      	beq.n	800f9ce <_strtoul_l.isra.0+0x8e>
 800f9be:	4580      	cmp	r8, r0
 800f9c0:	d316      	bcc.n	800f9f0 <_strtoul_l.isra.0+0xb0>
 800f9c2:	d101      	bne.n	800f9c8 <_strtoul_l.isra.0+0x88>
 800f9c4:	45a1      	cmp	r9, r4
 800f9c6:	db13      	blt.n	800f9f0 <_strtoul_l.isra.0+0xb0>
 800f9c8:	fb00 4003 	mla	r0, r0, r3, r4
 800f9cc:	2601      	movs	r6, #1
 800f9ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f9d2:	e7e9      	b.n	800f9a8 <_strtoul_l.isra.0+0x68>
 800f9d4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800f9d8:	f1bc 0f19 	cmp.w	ip, #25
 800f9dc:	d801      	bhi.n	800f9e2 <_strtoul_l.isra.0+0xa2>
 800f9de:	3c37      	subs	r4, #55	@ 0x37
 800f9e0:	e7e8      	b.n	800f9b4 <_strtoul_l.isra.0+0x74>
 800f9e2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800f9e6:	f1bc 0f19 	cmp.w	ip, #25
 800f9ea:	d804      	bhi.n	800f9f6 <_strtoul_l.isra.0+0xb6>
 800f9ec:	3c57      	subs	r4, #87	@ 0x57
 800f9ee:	e7e1      	b.n	800f9b4 <_strtoul_l.isra.0+0x74>
 800f9f0:	f04f 36ff 	mov.w	r6, #4294967295
 800f9f4:	e7eb      	b.n	800f9ce <_strtoul_l.isra.0+0x8e>
 800f9f6:	1c73      	adds	r3, r6, #1
 800f9f8:	d106      	bne.n	800fa08 <_strtoul_l.isra.0+0xc8>
 800f9fa:	2322      	movs	r3, #34	@ 0x22
 800f9fc:	f8ce 3000 	str.w	r3, [lr]
 800fa00:	4630      	mov	r0, r6
 800fa02:	b932      	cbnz	r2, 800fa12 <_strtoul_l.isra.0+0xd2>
 800fa04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa08:	b107      	cbz	r7, 800fa0c <_strtoul_l.isra.0+0xcc>
 800fa0a:	4240      	negs	r0, r0
 800fa0c:	2a00      	cmp	r2, #0
 800fa0e:	d0f9      	beq.n	800fa04 <_strtoul_l.isra.0+0xc4>
 800fa10:	b106      	cbz	r6, 800fa14 <_strtoul_l.isra.0+0xd4>
 800fa12:	1e69      	subs	r1, r5, #1
 800fa14:	6011      	str	r1, [r2, #0]
 800fa16:	e7f5      	b.n	800fa04 <_strtoul_l.isra.0+0xc4>
 800fa18:	08014431 	.word	0x08014431

0800fa1c <strtoul>:
 800fa1c:	4613      	mov	r3, r2
 800fa1e:	460a      	mov	r2, r1
 800fa20:	4601      	mov	r1, r0
 800fa22:	4802      	ldr	r0, [pc, #8]	@ (800fa2c <strtoul+0x10>)
 800fa24:	6800      	ldr	r0, [r0, #0]
 800fa26:	f7ff bf8b 	b.w	800f940 <_strtoul_l.isra.0>
 800fa2a:	bf00      	nop
 800fa2c:	20000320 	.word	0x20000320

0800fa30 <__cvt>:
 800fa30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa34:	ec57 6b10 	vmov	r6, r7, d0
 800fa38:	2f00      	cmp	r7, #0
 800fa3a:	460c      	mov	r4, r1
 800fa3c:	4619      	mov	r1, r3
 800fa3e:	463b      	mov	r3, r7
 800fa40:	bfbb      	ittet	lt
 800fa42:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800fa46:	461f      	movlt	r7, r3
 800fa48:	2300      	movge	r3, #0
 800fa4a:	232d      	movlt	r3, #45	@ 0x2d
 800fa4c:	700b      	strb	r3, [r1, #0]
 800fa4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fa50:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800fa54:	4691      	mov	r9, r2
 800fa56:	f023 0820 	bic.w	r8, r3, #32
 800fa5a:	bfbc      	itt	lt
 800fa5c:	4632      	movlt	r2, r6
 800fa5e:	4616      	movlt	r6, r2
 800fa60:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fa64:	d005      	beq.n	800fa72 <__cvt+0x42>
 800fa66:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800fa6a:	d100      	bne.n	800fa6e <__cvt+0x3e>
 800fa6c:	3401      	adds	r4, #1
 800fa6e:	2102      	movs	r1, #2
 800fa70:	e000      	b.n	800fa74 <__cvt+0x44>
 800fa72:	2103      	movs	r1, #3
 800fa74:	ab03      	add	r3, sp, #12
 800fa76:	9301      	str	r3, [sp, #4]
 800fa78:	ab02      	add	r3, sp, #8
 800fa7a:	9300      	str	r3, [sp, #0]
 800fa7c:	ec47 6b10 	vmov	d0, r6, r7
 800fa80:	4653      	mov	r3, sl
 800fa82:	4622      	mov	r2, r4
 800fa84:	f000 ff60 	bl	8010948 <_dtoa_r>
 800fa88:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800fa8c:	4605      	mov	r5, r0
 800fa8e:	d119      	bne.n	800fac4 <__cvt+0x94>
 800fa90:	f019 0f01 	tst.w	r9, #1
 800fa94:	d00e      	beq.n	800fab4 <__cvt+0x84>
 800fa96:	eb00 0904 	add.w	r9, r0, r4
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	4630      	mov	r0, r6
 800faa0:	4639      	mov	r1, r7
 800faa2:	f7f1 f819 	bl	8000ad8 <__aeabi_dcmpeq>
 800faa6:	b108      	cbz	r0, 800faac <__cvt+0x7c>
 800faa8:	f8cd 900c 	str.w	r9, [sp, #12]
 800faac:	2230      	movs	r2, #48	@ 0x30
 800faae:	9b03      	ldr	r3, [sp, #12]
 800fab0:	454b      	cmp	r3, r9
 800fab2:	d31e      	bcc.n	800faf2 <__cvt+0xc2>
 800fab4:	9b03      	ldr	r3, [sp, #12]
 800fab6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fab8:	1b5b      	subs	r3, r3, r5
 800faba:	4628      	mov	r0, r5
 800fabc:	6013      	str	r3, [r2, #0]
 800fabe:	b004      	add	sp, #16
 800fac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fac4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fac8:	eb00 0904 	add.w	r9, r0, r4
 800facc:	d1e5      	bne.n	800fa9a <__cvt+0x6a>
 800face:	7803      	ldrb	r3, [r0, #0]
 800fad0:	2b30      	cmp	r3, #48	@ 0x30
 800fad2:	d10a      	bne.n	800faea <__cvt+0xba>
 800fad4:	2200      	movs	r2, #0
 800fad6:	2300      	movs	r3, #0
 800fad8:	4630      	mov	r0, r6
 800fada:	4639      	mov	r1, r7
 800fadc:	f7f0 fffc 	bl	8000ad8 <__aeabi_dcmpeq>
 800fae0:	b918      	cbnz	r0, 800faea <__cvt+0xba>
 800fae2:	f1c4 0401 	rsb	r4, r4, #1
 800fae6:	f8ca 4000 	str.w	r4, [sl]
 800faea:	f8da 3000 	ldr.w	r3, [sl]
 800faee:	4499      	add	r9, r3
 800faf0:	e7d3      	b.n	800fa9a <__cvt+0x6a>
 800faf2:	1c59      	adds	r1, r3, #1
 800faf4:	9103      	str	r1, [sp, #12]
 800faf6:	701a      	strb	r2, [r3, #0]
 800faf8:	e7d9      	b.n	800faae <__cvt+0x7e>

0800fafa <__exponent>:
 800fafa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fafc:	2900      	cmp	r1, #0
 800fafe:	bfba      	itte	lt
 800fb00:	4249      	neglt	r1, r1
 800fb02:	232d      	movlt	r3, #45	@ 0x2d
 800fb04:	232b      	movge	r3, #43	@ 0x2b
 800fb06:	2909      	cmp	r1, #9
 800fb08:	7002      	strb	r2, [r0, #0]
 800fb0a:	7043      	strb	r3, [r0, #1]
 800fb0c:	dd29      	ble.n	800fb62 <__exponent+0x68>
 800fb0e:	f10d 0307 	add.w	r3, sp, #7
 800fb12:	461d      	mov	r5, r3
 800fb14:	270a      	movs	r7, #10
 800fb16:	461a      	mov	r2, r3
 800fb18:	fbb1 f6f7 	udiv	r6, r1, r7
 800fb1c:	fb07 1416 	mls	r4, r7, r6, r1
 800fb20:	3430      	adds	r4, #48	@ 0x30
 800fb22:	f802 4c01 	strb.w	r4, [r2, #-1]
 800fb26:	460c      	mov	r4, r1
 800fb28:	2c63      	cmp	r4, #99	@ 0x63
 800fb2a:	f103 33ff 	add.w	r3, r3, #4294967295
 800fb2e:	4631      	mov	r1, r6
 800fb30:	dcf1      	bgt.n	800fb16 <__exponent+0x1c>
 800fb32:	3130      	adds	r1, #48	@ 0x30
 800fb34:	1e94      	subs	r4, r2, #2
 800fb36:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fb3a:	1c41      	adds	r1, r0, #1
 800fb3c:	4623      	mov	r3, r4
 800fb3e:	42ab      	cmp	r3, r5
 800fb40:	d30a      	bcc.n	800fb58 <__exponent+0x5e>
 800fb42:	f10d 0309 	add.w	r3, sp, #9
 800fb46:	1a9b      	subs	r3, r3, r2
 800fb48:	42ac      	cmp	r4, r5
 800fb4a:	bf88      	it	hi
 800fb4c:	2300      	movhi	r3, #0
 800fb4e:	3302      	adds	r3, #2
 800fb50:	4403      	add	r3, r0
 800fb52:	1a18      	subs	r0, r3, r0
 800fb54:	b003      	add	sp, #12
 800fb56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb58:	f813 6b01 	ldrb.w	r6, [r3], #1
 800fb5c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800fb60:	e7ed      	b.n	800fb3e <__exponent+0x44>
 800fb62:	2330      	movs	r3, #48	@ 0x30
 800fb64:	3130      	adds	r1, #48	@ 0x30
 800fb66:	7083      	strb	r3, [r0, #2]
 800fb68:	70c1      	strb	r1, [r0, #3]
 800fb6a:	1d03      	adds	r3, r0, #4
 800fb6c:	e7f1      	b.n	800fb52 <__exponent+0x58>
	...

0800fb70 <_printf_float>:
 800fb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb74:	b08d      	sub	sp, #52	@ 0x34
 800fb76:	460c      	mov	r4, r1
 800fb78:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800fb7c:	4616      	mov	r6, r2
 800fb7e:	461f      	mov	r7, r3
 800fb80:	4605      	mov	r5, r0
 800fb82:	f000 fdab 	bl	80106dc <_localeconv_r>
 800fb86:	6803      	ldr	r3, [r0, #0]
 800fb88:	9304      	str	r3, [sp, #16]
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f7f0 fb78 	bl	8000280 <strlen>
 800fb90:	2300      	movs	r3, #0
 800fb92:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb94:	f8d8 3000 	ldr.w	r3, [r8]
 800fb98:	9005      	str	r0, [sp, #20]
 800fb9a:	3307      	adds	r3, #7
 800fb9c:	f023 0307 	bic.w	r3, r3, #7
 800fba0:	f103 0208 	add.w	r2, r3, #8
 800fba4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800fba8:	f8d4 b000 	ldr.w	fp, [r4]
 800fbac:	f8c8 2000 	str.w	r2, [r8]
 800fbb0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fbb4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800fbb8:	9307      	str	r3, [sp, #28]
 800fbba:	f8cd 8018 	str.w	r8, [sp, #24]
 800fbbe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800fbc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fbc6:	4b9c      	ldr	r3, [pc, #624]	@ (800fe38 <_printf_float+0x2c8>)
 800fbc8:	f04f 32ff 	mov.w	r2, #4294967295
 800fbcc:	f7f0 ffb6 	bl	8000b3c <__aeabi_dcmpun>
 800fbd0:	bb70      	cbnz	r0, 800fc30 <_printf_float+0xc0>
 800fbd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fbd6:	4b98      	ldr	r3, [pc, #608]	@ (800fe38 <_printf_float+0x2c8>)
 800fbd8:	f04f 32ff 	mov.w	r2, #4294967295
 800fbdc:	f7f0 ff90 	bl	8000b00 <__aeabi_dcmple>
 800fbe0:	bb30      	cbnz	r0, 800fc30 <_printf_float+0xc0>
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	4640      	mov	r0, r8
 800fbe8:	4649      	mov	r1, r9
 800fbea:	f7f0 ff7f 	bl	8000aec <__aeabi_dcmplt>
 800fbee:	b110      	cbz	r0, 800fbf6 <_printf_float+0x86>
 800fbf0:	232d      	movs	r3, #45	@ 0x2d
 800fbf2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fbf6:	4a91      	ldr	r2, [pc, #580]	@ (800fe3c <_printf_float+0x2cc>)
 800fbf8:	4b91      	ldr	r3, [pc, #580]	@ (800fe40 <_printf_float+0x2d0>)
 800fbfa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fbfe:	bf8c      	ite	hi
 800fc00:	4690      	movhi	r8, r2
 800fc02:	4698      	movls	r8, r3
 800fc04:	2303      	movs	r3, #3
 800fc06:	6123      	str	r3, [r4, #16]
 800fc08:	f02b 0304 	bic.w	r3, fp, #4
 800fc0c:	6023      	str	r3, [r4, #0]
 800fc0e:	f04f 0900 	mov.w	r9, #0
 800fc12:	9700      	str	r7, [sp, #0]
 800fc14:	4633      	mov	r3, r6
 800fc16:	aa0b      	add	r2, sp, #44	@ 0x2c
 800fc18:	4621      	mov	r1, r4
 800fc1a:	4628      	mov	r0, r5
 800fc1c:	f000 f9d2 	bl	800ffc4 <_printf_common>
 800fc20:	3001      	adds	r0, #1
 800fc22:	f040 808d 	bne.w	800fd40 <_printf_float+0x1d0>
 800fc26:	f04f 30ff 	mov.w	r0, #4294967295
 800fc2a:	b00d      	add	sp, #52	@ 0x34
 800fc2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc30:	4642      	mov	r2, r8
 800fc32:	464b      	mov	r3, r9
 800fc34:	4640      	mov	r0, r8
 800fc36:	4649      	mov	r1, r9
 800fc38:	f7f0 ff80 	bl	8000b3c <__aeabi_dcmpun>
 800fc3c:	b140      	cbz	r0, 800fc50 <_printf_float+0xe0>
 800fc3e:	464b      	mov	r3, r9
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	bfbc      	itt	lt
 800fc44:	232d      	movlt	r3, #45	@ 0x2d
 800fc46:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fc4a:	4a7e      	ldr	r2, [pc, #504]	@ (800fe44 <_printf_float+0x2d4>)
 800fc4c:	4b7e      	ldr	r3, [pc, #504]	@ (800fe48 <_printf_float+0x2d8>)
 800fc4e:	e7d4      	b.n	800fbfa <_printf_float+0x8a>
 800fc50:	6863      	ldr	r3, [r4, #4]
 800fc52:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800fc56:	9206      	str	r2, [sp, #24]
 800fc58:	1c5a      	adds	r2, r3, #1
 800fc5a:	d13b      	bne.n	800fcd4 <_printf_float+0x164>
 800fc5c:	2306      	movs	r3, #6
 800fc5e:	6063      	str	r3, [r4, #4]
 800fc60:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800fc64:	2300      	movs	r3, #0
 800fc66:	6022      	str	r2, [r4, #0]
 800fc68:	9303      	str	r3, [sp, #12]
 800fc6a:	ab0a      	add	r3, sp, #40	@ 0x28
 800fc6c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800fc70:	ab09      	add	r3, sp, #36	@ 0x24
 800fc72:	9300      	str	r3, [sp, #0]
 800fc74:	6861      	ldr	r1, [r4, #4]
 800fc76:	ec49 8b10 	vmov	d0, r8, r9
 800fc7a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800fc7e:	4628      	mov	r0, r5
 800fc80:	f7ff fed6 	bl	800fa30 <__cvt>
 800fc84:	9b06      	ldr	r3, [sp, #24]
 800fc86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fc88:	2b47      	cmp	r3, #71	@ 0x47
 800fc8a:	4680      	mov	r8, r0
 800fc8c:	d129      	bne.n	800fce2 <_printf_float+0x172>
 800fc8e:	1cc8      	adds	r0, r1, #3
 800fc90:	db02      	blt.n	800fc98 <_printf_float+0x128>
 800fc92:	6863      	ldr	r3, [r4, #4]
 800fc94:	4299      	cmp	r1, r3
 800fc96:	dd41      	ble.n	800fd1c <_printf_float+0x1ac>
 800fc98:	f1aa 0a02 	sub.w	sl, sl, #2
 800fc9c:	fa5f fa8a 	uxtb.w	sl, sl
 800fca0:	3901      	subs	r1, #1
 800fca2:	4652      	mov	r2, sl
 800fca4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fca8:	9109      	str	r1, [sp, #36]	@ 0x24
 800fcaa:	f7ff ff26 	bl	800fafa <__exponent>
 800fcae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fcb0:	1813      	adds	r3, r2, r0
 800fcb2:	2a01      	cmp	r2, #1
 800fcb4:	4681      	mov	r9, r0
 800fcb6:	6123      	str	r3, [r4, #16]
 800fcb8:	dc02      	bgt.n	800fcc0 <_printf_float+0x150>
 800fcba:	6822      	ldr	r2, [r4, #0]
 800fcbc:	07d2      	lsls	r2, r2, #31
 800fcbe:	d501      	bpl.n	800fcc4 <_printf_float+0x154>
 800fcc0:	3301      	adds	r3, #1
 800fcc2:	6123      	str	r3, [r4, #16]
 800fcc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d0a2      	beq.n	800fc12 <_printf_float+0xa2>
 800fccc:	232d      	movs	r3, #45	@ 0x2d
 800fcce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fcd2:	e79e      	b.n	800fc12 <_printf_float+0xa2>
 800fcd4:	9a06      	ldr	r2, [sp, #24]
 800fcd6:	2a47      	cmp	r2, #71	@ 0x47
 800fcd8:	d1c2      	bne.n	800fc60 <_printf_float+0xf0>
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d1c0      	bne.n	800fc60 <_printf_float+0xf0>
 800fcde:	2301      	movs	r3, #1
 800fce0:	e7bd      	b.n	800fc5e <_printf_float+0xee>
 800fce2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fce6:	d9db      	bls.n	800fca0 <_printf_float+0x130>
 800fce8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800fcec:	d118      	bne.n	800fd20 <_printf_float+0x1b0>
 800fcee:	2900      	cmp	r1, #0
 800fcf0:	6863      	ldr	r3, [r4, #4]
 800fcf2:	dd0b      	ble.n	800fd0c <_printf_float+0x19c>
 800fcf4:	6121      	str	r1, [r4, #16]
 800fcf6:	b913      	cbnz	r3, 800fcfe <_printf_float+0x18e>
 800fcf8:	6822      	ldr	r2, [r4, #0]
 800fcfa:	07d0      	lsls	r0, r2, #31
 800fcfc:	d502      	bpl.n	800fd04 <_printf_float+0x194>
 800fcfe:	3301      	adds	r3, #1
 800fd00:	440b      	add	r3, r1
 800fd02:	6123      	str	r3, [r4, #16]
 800fd04:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fd06:	f04f 0900 	mov.w	r9, #0
 800fd0a:	e7db      	b.n	800fcc4 <_printf_float+0x154>
 800fd0c:	b913      	cbnz	r3, 800fd14 <_printf_float+0x1a4>
 800fd0e:	6822      	ldr	r2, [r4, #0]
 800fd10:	07d2      	lsls	r2, r2, #31
 800fd12:	d501      	bpl.n	800fd18 <_printf_float+0x1a8>
 800fd14:	3302      	adds	r3, #2
 800fd16:	e7f4      	b.n	800fd02 <_printf_float+0x192>
 800fd18:	2301      	movs	r3, #1
 800fd1a:	e7f2      	b.n	800fd02 <_printf_float+0x192>
 800fd1c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800fd20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd22:	4299      	cmp	r1, r3
 800fd24:	db05      	blt.n	800fd32 <_printf_float+0x1c2>
 800fd26:	6823      	ldr	r3, [r4, #0]
 800fd28:	6121      	str	r1, [r4, #16]
 800fd2a:	07d8      	lsls	r0, r3, #31
 800fd2c:	d5ea      	bpl.n	800fd04 <_printf_float+0x194>
 800fd2e:	1c4b      	adds	r3, r1, #1
 800fd30:	e7e7      	b.n	800fd02 <_printf_float+0x192>
 800fd32:	2900      	cmp	r1, #0
 800fd34:	bfd4      	ite	le
 800fd36:	f1c1 0202 	rsble	r2, r1, #2
 800fd3a:	2201      	movgt	r2, #1
 800fd3c:	4413      	add	r3, r2
 800fd3e:	e7e0      	b.n	800fd02 <_printf_float+0x192>
 800fd40:	6823      	ldr	r3, [r4, #0]
 800fd42:	055a      	lsls	r2, r3, #21
 800fd44:	d407      	bmi.n	800fd56 <_printf_float+0x1e6>
 800fd46:	6923      	ldr	r3, [r4, #16]
 800fd48:	4642      	mov	r2, r8
 800fd4a:	4631      	mov	r1, r6
 800fd4c:	4628      	mov	r0, r5
 800fd4e:	47b8      	blx	r7
 800fd50:	3001      	adds	r0, #1
 800fd52:	d12b      	bne.n	800fdac <_printf_float+0x23c>
 800fd54:	e767      	b.n	800fc26 <_printf_float+0xb6>
 800fd56:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800fd5a:	f240 80dd 	bls.w	800ff18 <_printf_float+0x3a8>
 800fd5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800fd62:	2200      	movs	r2, #0
 800fd64:	2300      	movs	r3, #0
 800fd66:	f7f0 feb7 	bl	8000ad8 <__aeabi_dcmpeq>
 800fd6a:	2800      	cmp	r0, #0
 800fd6c:	d033      	beq.n	800fdd6 <_printf_float+0x266>
 800fd6e:	4a37      	ldr	r2, [pc, #220]	@ (800fe4c <_printf_float+0x2dc>)
 800fd70:	2301      	movs	r3, #1
 800fd72:	4631      	mov	r1, r6
 800fd74:	4628      	mov	r0, r5
 800fd76:	47b8      	blx	r7
 800fd78:	3001      	adds	r0, #1
 800fd7a:	f43f af54 	beq.w	800fc26 <_printf_float+0xb6>
 800fd7e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fd82:	4543      	cmp	r3, r8
 800fd84:	db02      	blt.n	800fd8c <_printf_float+0x21c>
 800fd86:	6823      	ldr	r3, [r4, #0]
 800fd88:	07d8      	lsls	r0, r3, #31
 800fd8a:	d50f      	bpl.n	800fdac <_printf_float+0x23c>
 800fd8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fd90:	4631      	mov	r1, r6
 800fd92:	4628      	mov	r0, r5
 800fd94:	47b8      	blx	r7
 800fd96:	3001      	adds	r0, #1
 800fd98:	f43f af45 	beq.w	800fc26 <_printf_float+0xb6>
 800fd9c:	f04f 0900 	mov.w	r9, #0
 800fda0:	f108 38ff 	add.w	r8, r8, #4294967295
 800fda4:	f104 0a1a 	add.w	sl, r4, #26
 800fda8:	45c8      	cmp	r8, r9
 800fdaa:	dc09      	bgt.n	800fdc0 <_printf_float+0x250>
 800fdac:	6823      	ldr	r3, [r4, #0]
 800fdae:	079b      	lsls	r3, r3, #30
 800fdb0:	f100 8103 	bmi.w	800ffba <_printf_float+0x44a>
 800fdb4:	68e0      	ldr	r0, [r4, #12]
 800fdb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fdb8:	4298      	cmp	r0, r3
 800fdba:	bfb8      	it	lt
 800fdbc:	4618      	movlt	r0, r3
 800fdbe:	e734      	b.n	800fc2a <_printf_float+0xba>
 800fdc0:	2301      	movs	r3, #1
 800fdc2:	4652      	mov	r2, sl
 800fdc4:	4631      	mov	r1, r6
 800fdc6:	4628      	mov	r0, r5
 800fdc8:	47b8      	blx	r7
 800fdca:	3001      	adds	r0, #1
 800fdcc:	f43f af2b 	beq.w	800fc26 <_printf_float+0xb6>
 800fdd0:	f109 0901 	add.w	r9, r9, #1
 800fdd4:	e7e8      	b.n	800fda8 <_printf_float+0x238>
 800fdd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	dc39      	bgt.n	800fe50 <_printf_float+0x2e0>
 800fddc:	4a1b      	ldr	r2, [pc, #108]	@ (800fe4c <_printf_float+0x2dc>)
 800fdde:	2301      	movs	r3, #1
 800fde0:	4631      	mov	r1, r6
 800fde2:	4628      	mov	r0, r5
 800fde4:	47b8      	blx	r7
 800fde6:	3001      	adds	r0, #1
 800fde8:	f43f af1d 	beq.w	800fc26 <_printf_float+0xb6>
 800fdec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fdf0:	ea59 0303 	orrs.w	r3, r9, r3
 800fdf4:	d102      	bne.n	800fdfc <_printf_float+0x28c>
 800fdf6:	6823      	ldr	r3, [r4, #0]
 800fdf8:	07d9      	lsls	r1, r3, #31
 800fdfa:	d5d7      	bpl.n	800fdac <_printf_float+0x23c>
 800fdfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fe00:	4631      	mov	r1, r6
 800fe02:	4628      	mov	r0, r5
 800fe04:	47b8      	blx	r7
 800fe06:	3001      	adds	r0, #1
 800fe08:	f43f af0d 	beq.w	800fc26 <_printf_float+0xb6>
 800fe0c:	f04f 0a00 	mov.w	sl, #0
 800fe10:	f104 0b1a 	add.w	fp, r4, #26
 800fe14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe16:	425b      	negs	r3, r3
 800fe18:	4553      	cmp	r3, sl
 800fe1a:	dc01      	bgt.n	800fe20 <_printf_float+0x2b0>
 800fe1c:	464b      	mov	r3, r9
 800fe1e:	e793      	b.n	800fd48 <_printf_float+0x1d8>
 800fe20:	2301      	movs	r3, #1
 800fe22:	465a      	mov	r2, fp
 800fe24:	4631      	mov	r1, r6
 800fe26:	4628      	mov	r0, r5
 800fe28:	47b8      	blx	r7
 800fe2a:	3001      	adds	r0, #1
 800fe2c:	f43f aefb 	beq.w	800fc26 <_printf_float+0xb6>
 800fe30:	f10a 0a01 	add.w	sl, sl, #1
 800fe34:	e7ee      	b.n	800fe14 <_printf_float+0x2a4>
 800fe36:	bf00      	nop
 800fe38:	7fefffff 	.word	0x7fefffff
 800fe3c:	080141ba 	.word	0x080141ba
 800fe40:	080141b6 	.word	0x080141b6
 800fe44:	080141c2 	.word	0x080141c2
 800fe48:	080141be 	.word	0x080141be
 800fe4c:	080141c6 	.word	0x080141c6
 800fe50:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fe52:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fe56:	4553      	cmp	r3, sl
 800fe58:	bfa8      	it	ge
 800fe5a:	4653      	movge	r3, sl
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	4699      	mov	r9, r3
 800fe60:	dc36      	bgt.n	800fed0 <_printf_float+0x360>
 800fe62:	f04f 0b00 	mov.w	fp, #0
 800fe66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fe6a:	f104 021a 	add.w	r2, r4, #26
 800fe6e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fe70:	9306      	str	r3, [sp, #24]
 800fe72:	eba3 0309 	sub.w	r3, r3, r9
 800fe76:	455b      	cmp	r3, fp
 800fe78:	dc31      	bgt.n	800fede <_printf_float+0x36e>
 800fe7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe7c:	459a      	cmp	sl, r3
 800fe7e:	dc3a      	bgt.n	800fef6 <_printf_float+0x386>
 800fe80:	6823      	ldr	r3, [r4, #0]
 800fe82:	07da      	lsls	r2, r3, #31
 800fe84:	d437      	bmi.n	800fef6 <_printf_float+0x386>
 800fe86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe88:	ebaa 0903 	sub.w	r9, sl, r3
 800fe8c:	9b06      	ldr	r3, [sp, #24]
 800fe8e:	ebaa 0303 	sub.w	r3, sl, r3
 800fe92:	4599      	cmp	r9, r3
 800fe94:	bfa8      	it	ge
 800fe96:	4699      	movge	r9, r3
 800fe98:	f1b9 0f00 	cmp.w	r9, #0
 800fe9c:	dc33      	bgt.n	800ff06 <_printf_float+0x396>
 800fe9e:	f04f 0800 	mov.w	r8, #0
 800fea2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fea6:	f104 0b1a 	add.w	fp, r4, #26
 800feaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800feac:	ebaa 0303 	sub.w	r3, sl, r3
 800feb0:	eba3 0309 	sub.w	r3, r3, r9
 800feb4:	4543      	cmp	r3, r8
 800feb6:	f77f af79 	ble.w	800fdac <_printf_float+0x23c>
 800feba:	2301      	movs	r3, #1
 800febc:	465a      	mov	r2, fp
 800febe:	4631      	mov	r1, r6
 800fec0:	4628      	mov	r0, r5
 800fec2:	47b8      	blx	r7
 800fec4:	3001      	adds	r0, #1
 800fec6:	f43f aeae 	beq.w	800fc26 <_printf_float+0xb6>
 800feca:	f108 0801 	add.w	r8, r8, #1
 800fece:	e7ec      	b.n	800feaa <_printf_float+0x33a>
 800fed0:	4642      	mov	r2, r8
 800fed2:	4631      	mov	r1, r6
 800fed4:	4628      	mov	r0, r5
 800fed6:	47b8      	blx	r7
 800fed8:	3001      	adds	r0, #1
 800feda:	d1c2      	bne.n	800fe62 <_printf_float+0x2f2>
 800fedc:	e6a3      	b.n	800fc26 <_printf_float+0xb6>
 800fede:	2301      	movs	r3, #1
 800fee0:	4631      	mov	r1, r6
 800fee2:	4628      	mov	r0, r5
 800fee4:	9206      	str	r2, [sp, #24]
 800fee6:	47b8      	blx	r7
 800fee8:	3001      	adds	r0, #1
 800feea:	f43f ae9c 	beq.w	800fc26 <_printf_float+0xb6>
 800feee:	9a06      	ldr	r2, [sp, #24]
 800fef0:	f10b 0b01 	add.w	fp, fp, #1
 800fef4:	e7bb      	b.n	800fe6e <_printf_float+0x2fe>
 800fef6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fefa:	4631      	mov	r1, r6
 800fefc:	4628      	mov	r0, r5
 800fefe:	47b8      	blx	r7
 800ff00:	3001      	adds	r0, #1
 800ff02:	d1c0      	bne.n	800fe86 <_printf_float+0x316>
 800ff04:	e68f      	b.n	800fc26 <_printf_float+0xb6>
 800ff06:	9a06      	ldr	r2, [sp, #24]
 800ff08:	464b      	mov	r3, r9
 800ff0a:	4442      	add	r2, r8
 800ff0c:	4631      	mov	r1, r6
 800ff0e:	4628      	mov	r0, r5
 800ff10:	47b8      	blx	r7
 800ff12:	3001      	adds	r0, #1
 800ff14:	d1c3      	bne.n	800fe9e <_printf_float+0x32e>
 800ff16:	e686      	b.n	800fc26 <_printf_float+0xb6>
 800ff18:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ff1c:	f1ba 0f01 	cmp.w	sl, #1
 800ff20:	dc01      	bgt.n	800ff26 <_printf_float+0x3b6>
 800ff22:	07db      	lsls	r3, r3, #31
 800ff24:	d536      	bpl.n	800ff94 <_printf_float+0x424>
 800ff26:	2301      	movs	r3, #1
 800ff28:	4642      	mov	r2, r8
 800ff2a:	4631      	mov	r1, r6
 800ff2c:	4628      	mov	r0, r5
 800ff2e:	47b8      	blx	r7
 800ff30:	3001      	adds	r0, #1
 800ff32:	f43f ae78 	beq.w	800fc26 <_printf_float+0xb6>
 800ff36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ff3a:	4631      	mov	r1, r6
 800ff3c:	4628      	mov	r0, r5
 800ff3e:	47b8      	blx	r7
 800ff40:	3001      	adds	r0, #1
 800ff42:	f43f ae70 	beq.w	800fc26 <_printf_float+0xb6>
 800ff46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ff52:	f7f0 fdc1 	bl	8000ad8 <__aeabi_dcmpeq>
 800ff56:	b9c0      	cbnz	r0, 800ff8a <_printf_float+0x41a>
 800ff58:	4653      	mov	r3, sl
 800ff5a:	f108 0201 	add.w	r2, r8, #1
 800ff5e:	4631      	mov	r1, r6
 800ff60:	4628      	mov	r0, r5
 800ff62:	47b8      	blx	r7
 800ff64:	3001      	adds	r0, #1
 800ff66:	d10c      	bne.n	800ff82 <_printf_float+0x412>
 800ff68:	e65d      	b.n	800fc26 <_printf_float+0xb6>
 800ff6a:	2301      	movs	r3, #1
 800ff6c:	465a      	mov	r2, fp
 800ff6e:	4631      	mov	r1, r6
 800ff70:	4628      	mov	r0, r5
 800ff72:	47b8      	blx	r7
 800ff74:	3001      	adds	r0, #1
 800ff76:	f43f ae56 	beq.w	800fc26 <_printf_float+0xb6>
 800ff7a:	f108 0801 	add.w	r8, r8, #1
 800ff7e:	45d0      	cmp	r8, sl
 800ff80:	dbf3      	blt.n	800ff6a <_printf_float+0x3fa>
 800ff82:	464b      	mov	r3, r9
 800ff84:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ff88:	e6df      	b.n	800fd4a <_printf_float+0x1da>
 800ff8a:	f04f 0800 	mov.w	r8, #0
 800ff8e:	f104 0b1a 	add.w	fp, r4, #26
 800ff92:	e7f4      	b.n	800ff7e <_printf_float+0x40e>
 800ff94:	2301      	movs	r3, #1
 800ff96:	4642      	mov	r2, r8
 800ff98:	e7e1      	b.n	800ff5e <_printf_float+0x3ee>
 800ff9a:	2301      	movs	r3, #1
 800ff9c:	464a      	mov	r2, r9
 800ff9e:	4631      	mov	r1, r6
 800ffa0:	4628      	mov	r0, r5
 800ffa2:	47b8      	blx	r7
 800ffa4:	3001      	adds	r0, #1
 800ffa6:	f43f ae3e 	beq.w	800fc26 <_printf_float+0xb6>
 800ffaa:	f108 0801 	add.w	r8, r8, #1
 800ffae:	68e3      	ldr	r3, [r4, #12]
 800ffb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ffb2:	1a5b      	subs	r3, r3, r1
 800ffb4:	4543      	cmp	r3, r8
 800ffb6:	dcf0      	bgt.n	800ff9a <_printf_float+0x42a>
 800ffb8:	e6fc      	b.n	800fdb4 <_printf_float+0x244>
 800ffba:	f04f 0800 	mov.w	r8, #0
 800ffbe:	f104 0919 	add.w	r9, r4, #25
 800ffc2:	e7f4      	b.n	800ffae <_printf_float+0x43e>

0800ffc4 <_printf_common>:
 800ffc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffc8:	4616      	mov	r6, r2
 800ffca:	4698      	mov	r8, r3
 800ffcc:	688a      	ldr	r2, [r1, #8]
 800ffce:	690b      	ldr	r3, [r1, #16]
 800ffd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ffd4:	4293      	cmp	r3, r2
 800ffd6:	bfb8      	it	lt
 800ffd8:	4613      	movlt	r3, r2
 800ffda:	6033      	str	r3, [r6, #0]
 800ffdc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ffe0:	4607      	mov	r7, r0
 800ffe2:	460c      	mov	r4, r1
 800ffe4:	b10a      	cbz	r2, 800ffea <_printf_common+0x26>
 800ffe6:	3301      	adds	r3, #1
 800ffe8:	6033      	str	r3, [r6, #0]
 800ffea:	6823      	ldr	r3, [r4, #0]
 800ffec:	0699      	lsls	r1, r3, #26
 800ffee:	bf42      	ittt	mi
 800fff0:	6833      	ldrmi	r3, [r6, #0]
 800fff2:	3302      	addmi	r3, #2
 800fff4:	6033      	strmi	r3, [r6, #0]
 800fff6:	6825      	ldr	r5, [r4, #0]
 800fff8:	f015 0506 	ands.w	r5, r5, #6
 800fffc:	d106      	bne.n	801000c <_printf_common+0x48>
 800fffe:	f104 0a19 	add.w	sl, r4, #25
 8010002:	68e3      	ldr	r3, [r4, #12]
 8010004:	6832      	ldr	r2, [r6, #0]
 8010006:	1a9b      	subs	r3, r3, r2
 8010008:	42ab      	cmp	r3, r5
 801000a:	dc26      	bgt.n	801005a <_printf_common+0x96>
 801000c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010010:	6822      	ldr	r2, [r4, #0]
 8010012:	3b00      	subs	r3, #0
 8010014:	bf18      	it	ne
 8010016:	2301      	movne	r3, #1
 8010018:	0692      	lsls	r2, r2, #26
 801001a:	d42b      	bmi.n	8010074 <_printf_common+0xb0>
 801001c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010020:	4641      	mov	r1, r8
 8010022:	4638      	mov	r0, r7
 8010024:	47c8      	blx	r9
 8010026:	3001      	adds	r0, #1
 8010028:	d01e      	beq.n	8010068 <_printf_common+0xa4>
 801002a:	6823      	ldr	r3, [r4, #0]
 801002c:	6922      	ldr	r2, [r4, #16]
 801002e:	f003 0306 	and.w	r3, r3, #6
 8010032:	2b04      	cmp	r3, #4
 8010034:	bf02      	ittt	eq
 8010036:	68e5      	ldreq	r5, [r4, #12]
 8010038:	6833      	ldreq	r3, [r6, #0]
 801003a:	1aed      	subeq	r5, r5, r3
 801003c:	68a3      	ldr	r3, [r4, #8]
 801003e:	bf0c      	ite	eq
 8010040:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010044:	2500      	movne	r5, #0
 8010046:	4293      	cmp	r3, r2
 8010048:	bfc4      	itt	gt
 801004a:	1a9b      	subgt	r3, r3, r2
 801004c:	18ed      	addgt	r5, r5, r3
 801004e:	2600      	movs	r6, #0
 8010050:	341a      	adds	r4, #26
 8010052:	42b5      	cmp	r5, r6
 8010054:	d11a      	bne.n	801008c <_printf_common+0xc8>
 8010056:	2000      	movs	r0, #0
 8010058:	e008      	b.n	801006c <_printf_common+0xa8>
 801005a:	2301      	movs	r3, #1
 801005c:	4652      	mov	r2, sl
 801005e:	4641      	mov	r1, r8
 8010060:	4638      	mov	r0, r7
 8010062:	47c8      	blx	r9
 8010064:	3001      	adds	r0, #1
 8010066:	d103      	bne.n	8010070 <_printf_common+0xac>
 8010068:	f04f 30ff 	mov.w	r0, #4294967295
 801006c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010070:	3501      	adds	r5, #1
 8010072:	e7c6      	b.n	8010002 <_printf_common+0x3e>
 8010074:	18e1      	adds	r1, r4, r3
 8010076:	1c5a      	adds	r2, r3, #1
 8010078:	2030      	movs	r0, #48	@ 0x30
 801007a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801007e:	4422      	add	r2, r4
 8010080:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010084:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010088:	3302      	adds	r3, #2
 801008a:	e7c7      	b.n	801001c <_printf_common+0x58>
 801008c:	2301      	movs	r3, #1
 801008e:	4622      	mov	r2, r4
 8010090:	4641      	mov	r1, r8
 8010092:	4638      	mov	r0, r7
 8010094:	47c8      	blx	r9
 8010096:	3001      	adds	r0, #1
 8010098:	d0e6      	beq.n	8010068 <_printf_common+0xa4>
 801009a:	3601      	adds	r6, #1
 801009c:	e7d9      	b.n	8010052 <_printf_common+0x8e>
	...

080100a0 <_printf_i>:
 80100a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80100a4:	7e0f      	ldrb	r7, [r1, #24]
 80100a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80100a8:	2f78      	cmp	r7, #120	@ 0x78
 80100aa:	4691      	mov	r9, r2
 80100ac:	4680      	mov	r8, r0
 80100ae:	460c      	mov	r4, r1
 80100b0:	469a      	mov	sl, r3
 80100b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80100b6:	d807      	bhi.n	80100c8 <_printf_i+0x28>
 80100b8:	2f62      	cmp	r7, #98	@ 0x62
 80100ba:	d80a      	bhi.n	80100d2 <_printf_i+0x32>
 80100bc:	2f00      	cmp	r7, #0
 80100be:	f000 80d1 	beq.w	8010264 <_printf_i+0x1c4>
 80100c2:	2f58      	cmp	r7, #88	@ 0x58
 80100c4:	f000 80b8 	beq.w	8010238 <_printf_i+0x198>
 80100c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80100cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80100d0:	e03a      	b.n	8010148 <_printf_i+0xa8>
 80100d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80100d6:	2b15      	cmp	r3, #21
 80100d8:	d8f6      	bhi.n	80100c8 <_printf_i+0x28>
 80100da:	a101      	add	r1, pc, #4	@ (adr r1, 80100e0 <_printf_i+0x40>)
 80100dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80100e0:	08010139 	.word	0x08010139
 80100e4:	0801014d 	.word	0x0801014d
 80100e8:	080100c9 	.word	0x080100c9
 80100ec:	080100c9 	.word	0x080100c9
 80100f0:	080100c9 	.word	0x080100c9
 80100f4:	080100c9 	.word	0x080100c9
 80100f8:	0801014d 	.word	0x0801014d
 80100fc:	080100c9 	.word	0x080100c9
 8010100:	080100c9 	.word	0x080100c9
 8010104:	080100c9 	.word	0x080100c9
 8010108:	080100c9 	.word	0x080100c9
 801010c:	0801024b 	.word	0x0801024b
 8010110:	08010177 	.word	0x08010177
 8010114:	08010205 	.word	0x08010205
 8010118:	080100c9 	.word	0x080100c9
 801011c:	080100c9 	.word	0x080100c9
 8010120:	0801026d 	.word	0x0801026d
 8010124:	080100c9 	.word	0x080100c9
 8010128:	08010177 	.word	0x08010177
 801012c:	080100c9 	.word	0x080100c9
 8010130:	080100c9 	.word	0x080100c9
 8010134:	0801020d 	.word	0x0801020d
 8010138:	6833      	ldr	r3, [r6, #0]
 801013a:	1d1a      	adds	r2, r3, #4
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	6032      	str	r2, [r6, #0]
 8010140:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010144:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010148:	2301      	movs	r3, #1
 801014a:	e09c      	b.n	8010286 <_printf_i+0x1e6>
 801014c:	6833      	ldr	r3, [r6, #0]
 801014e:	6820      	ldr	r0, [r4, #0]
 8010150:	1d19      	adds	r1, r3, #4
 8010152:	6031      	str	r1, [r6, #0]
 8010154:	0606      	lsls	r6, r0, #24
 8010156:	d501      	bpl.n	801015c <_printf_i+0xbc>
 8010158:	681d      	ldr	r5, [r3, #0]
 801015a:	e003      	b.n	8010164 <_printf_i+0xc4>
 801015c:	0645      	lsls	r5, r0, #25
 801015e:	d5fb      	bpl.n	8010158 <_printf_i+0xb8>
 8010160:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010164:	2d00      	cmp	r5, #0
 8010166:	da03      	bge.n	8010170 <_printf_i+0xd0>
 8010168:	232d      	movs	r3, #45	@ 0x2d
 801016a:	426d      	negs	r5, r5
 801016c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010170:	4858      	ldr	r0, [pc, #352]	@ (80102d4 <_printf_i+0x234>)
 8010172:	230a      	movs	r3, #10
 8010174:	e011      	b.n	801019a <_printf_i+0xfa>
 8010176:	6821      	ldr	r1, [r4, #0]
 8010178:	6833      	ldr	r3, [r6, #0]
 801017a:	0608      	lsls	r0, r1, #24
 801017c:	f853 5b04 	ldr.w	r5, [r3], #4
 8010180:	d402      	bmi.n	8010188 <_printf_i+0xe8>
 8010182:	0649      	lsls	r1, r1, #25
 8010184:	bf48      	it	mi
 8010186:	b2ad      	uxthmi	r5, r5
 8010188:	2f6f      	cmp	r7, #111	@ 0x6f
 801018a:	4852      	ldr	r0, [pc, #328]	@ (80102d4 <_printf_i+0x234>)
 801018c:	6033      	str	r3, [r6, #0]
 801018e:	bf14      	ite	ne
 8010190:	230a      	movne	r3, #10
 8010192:	2308      	moveq	r3, #8
 8010194:	2100      	movs	r1, #0
 8010196:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801019a:	6866      	ldr	r6, [r4, #4]
 801019c:	60a6      	str	r6, [r4, #8]
 801019e:	2e00      	cmp	r6, #0
 80101a0:	db05      	blt.n	80101ae <_printf_i+0x10e>
 80101a2:	6821      	ldr	r1, [r4, #0]
 80101a4:	432e      	orrs	r6, r5
 80101a6:	f021 0104 	bic.w	r1, r1, #4
 80101aa:	6021      	str	r1, [r4, #0]
 80101ac:	d04b      	beq.n	8010246 <_printf_i+0x1a6>
 80101ae:	4616      	mov	r6, r2
 80101b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80101b4:	fb03 5711 	mls	r7, r3, r1, r5
 80101b8:	5dc7      	ldrb	r7, [r0, r7]
 80101ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80101be:	462f      	mov	r7, r5
 80101c0:	42bb      	cmp	r3, r7
 80101c2:	460d      	mov	r5, r1
 80101c4:	d9f4      	bls.n	80101b0 <_printf_i+0x110>
 80101c6:	2b08      	cmp	r3, #8
 80101c8:	d10b      	bne.n	80101e2 <_printf_i+0x142>
 80101ca:	6823      	ldr	r3, [r4, #0]
 80101cc:	07df      	lsls	r7, r3, #31
 80101ce:	d508      	bpl.n	80101e2 <_printf_i+0x142>
 80101d0:	6923      	ldr	r3, [r4, #16]
 80101d2:	6861      	ldr	r1, [r4, #4]
 80101d4:	4299      	cmp	r1, r3
 80101d6:	bfde      	ittt	le
 80101d8:	2330      	movle	r3, #48	@ 0x30
 80101da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80101de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80101e2:	1b92      	subs	r2, r2, r6
 80101e4:	6122      	str	r2, [r4, #16]
 80101e6:	f8cd a000 	str.w	sl, [sp]
 80101ea:	464b      	mov	r3, r9
 80101ec:	aa03      	add	r2, sp, #12
 80101ee:	4621      	mov	r1, r4
 80101f0:	4640      	mov	r0, r8
 80101f2:	f7ff fee7 	bl	800ffc4 <_printf_common>
 80101f6:	3001      	adds	r0, #1
 80101f8:	d14a      	bne.n	8010290 <_printf_i+0x1f0>
 80101fa:	f04f 30ff 	mov.w	r0, #4294967295
 80101fe:	b004      	add	sp, #16
 8010200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010204:	6823      	ldr	r3, [r4, #0]
 8010206:	f043 0320 	orr.w	r3, r3, #32
 801020a:	6023      	str	r3, [r4, #0]
 801020c:	4832      	ldr	r0, [pc, #200]	@ (80102d8 <_printf_i+0x238>)
 801020e:	2778      	movs	r7, #120	@ 0x78
 8010210:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010214:	6823      	ldr	r3, [r4, #0]
 8010216:	6831      	ldr	r1, [r6, #0]
 8010218:	061f      	lsls	r7, r3, #24
 801021a:	f851 5b04 	ldr.w	r5, [r1], #4
 801021e:	d402      	bmi.n	8010226 <_printf_i+0x186>
 8010220:	065f      	lsls	r7, r3, #25
 8010222:	bf48      	it	mi
 8010224:	b2ad      	uxthmi	r5, r5
 8010226:	6031      	str	r1, [r6, #0]
 8010228:	07d9      	lsls	r1, r3, #31
 801022a:	bf44      	itt	mi
 801022c:	f043 0320 	orrmi.w	r3, r3, #32
 8010230:	6023      	strmi	r3, [r4, #0]
 8010232:	b11d      	cbz	r5, 801023c <_printf_i+0x19c>
 8010234:	2310      	movs	r3, #16
 8010236:	e7ad      	b.n	8010194 <_printf_i+0xf4>
 8010238:	4826      	ldr	r0, [pc, #152]	@ (80102d4 <_printf_i+0x234>)
 801023a:	e7e9      	b.n	8010210 <_printf_i+0x170>
 801023c:	6823      	ldr	r3, [r4, #0]
 801023e:	f023 0320 	bic.w	r3, r3, #32
 8010242:	6023      	str	r3, [r4, #0]
 8010244:	e7f6      	b.n	8010234 <_printf_i+0x194>
 8010246:	4616      	mov	r6, r2
 8010248:	e7bd      	b.n	80101c6 <_printf_i+0x126>
 801024a:	6833      	ldr	r3, [r6, #0]
 801024c:	6825      	ldr	r5, [r4, #0]
 801024e:	6961      	ldr	r1, [r4, #20]
 8010250:	1d18      	adds	r0, r3, #4
 8010252:	6030      	str	r0, [r6, #0]
 8010254:	062e      	lsls	r6, r5, #24
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	d501      	bpl.n	801025e <_printf_i+0x1be>
 801025a:	6019      	str	r1, [r3, #0]
 801025c:	e002      	b.n	8010264 <_printf_i+0x1c4>
 801025e:	0668      	lsls	r0, r5, #25
 8010260:	d5fb      	bpl.n	801025a <_printf_i+0x1ba>
 8010262:	8019      	strh	r1, [r3, #0]
 8010264:	2300      	movs	r3, #0
 8010266:	6123      	str	r3, [r4, #16]
 8010268:	4616      	mov	r6, r2
 801026a:	e7bc      	b.n	80101e6 <_printf_i+0x146>
 801026c:	6833      	ldr	r3, [r6, #0]
 801026e:	1d1a      	adds	r2, r3, #4
 8010270:	6032      	str	r2, [r6, #0]
 8010272:	681e      	ldr	r6, [r3, #0]
 8010274:	6862      	ldr	r2, [r4, #4]
 8010276:	2100      	movs	r1, #0
 8010278:	4630      	mov	r0, r6
 801027a:	f7ef ffb1 	bl	80001e0 <memchr>
 801027e:	b108      	cbz	r0, 8010284 <_printf_i+0x1e4>
 8010280:	1b80      	subs	r0, r0, r6
 8010282:	6060      	str	r0, [r4, #4]
 8010284:	6863      	ldr	r3, [r4, #4]
 8010286:	6123      	str	r3, [r4, #16]
 8010288:	2300      	movs	r3, #0
 801028a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801028e:	e7aa      	b.n	80101e6 <_printf_i+0x146>
 8010290:	6923      	ldr	r3, [r4, #16]
 8010292:	4632      	mov	r2, r6
 8010294:	4649      	mov	r1, r9
 8010296:	4640      	mov	r0, r8
 8010298:	47d0      	blx	sl
 801029a:	3001      	adds	r0, #1
 801029c:	d0ad      	beq.n	80101fa <_printf_i+0x15a>
 801029e:	6823      	ldr	r3, [r4, #0]
 80102a0:	079b      	lsls	r3, r3, #30
 80102a2:	d413      	bmi.n	80102cc <_printf_i+0x22c>
 80102a4:	68e0      	ldr	r0, [r4, #12]
 80102a6:	9b03      	ldr	r3, [sp, #12]
 80102a8:	4298      	cmp	r0, r3
 80102aa:	bfb8      	it	lt
 80102ac:	4618      	movlt	r0, r3
 80102ae:	e7a6      	b.n	80101fe <_printf_i+0x15e>
 80102b0:	2301      	movs	r3, #1
 80102b2:	4632      	mov	r2, r6
 80102b4:	4649      	mov	r1, r9
 80102b6:	4640      	mov	r0, r8
 80102b8:	47d0      	blx	sl
 80102ba:	3001      	adds	r0, #1
 80102bc:	d09d      	beq.n	80101fa <_printf_i+0x15a>
 80102be:	3501      	adds	r5, #1
 80102c0:	68e3      	ldr	r3, [r4, #12]
 80102c2:	9903      	ldr	r1, [sp, #12]
 80102c4:	1a5b      	subs	r3, r3, r1
 80102c6:	42ab      	cmp	r3, r5
 80102c8:	dcf2      	bgt.n	80102b0 <_printf_i+0x210>
 80102ca:	e7eb      	b.n	80102a4 <_printf_i+0x204>
 80102cc:	2500      	movs	r5, #0
 80102ce:	f104 0619 	add.w	r6, r4, #25
 80102d2:	e7f5      	b.n	80102c0 <_printf_i+0x220>
 80102d4:	080141c8 	.word	0x080141c8
 80102d8:	080141d9 	.word	0x080141d9

080102dc <std>:
 80102dc:	2300      	movs	r3, #0
 80102de:	b510      	push	{r4, lr}
 80102e0:	4604      	mov	r4, r0
 80102e2:	e9c0 3300 	strd	r3, r3, [r0]
 80102e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80102ea:	6083      	str	r3, [r0, #8]
 80102ec:	8181      	strh	r1, [r0, #12]
 80102ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80102f0:	81c2      	strh	r2, [r0, #14]
 80102f2:	6183      	str	r3, [r0, #24]
 80102f4:	4619      	mov	r1, r3
 80102f6:	2208      	movs	r2, #8
 80102f8:	305c      	adds	r0, #92	@ 0x5c
 80102fa:	f000 f94c 	bl	8010596 <memset>
 80102fe:	4b0d      	ldr	r3, [pc, #52]	@ (8010334 <std+0x58>)
 8010300:	6263      	str	r3, [r4, #36]	@ 0x24
 8010302:	4b0d      	ldr	r3, [pc, #52]	@ (8010338 <std+0x5c>)
 8010304:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010306:	4b0d      	ldr	r3, [pc, #52]	@ (801033c <std+0x60>)
 8010308:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801030a:	4b0d      	ldr	r3, [pc, #52]	@ (8010340 <std+0x64>)
 801030c:	6323      	str	r3, [r4, #48]	@ 0x30
 801030e:	4b0d      	ldr	r3, [pc, #52]	@ (8010344 <std+0x68>)
 8010310:	6224      	str	r4, [r4, #32]
 8010312:	429c      	cmp	r4, r3
 8010314:	d006      	beq.n	8010324 <std+0x48>
 8010316:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801031a:	4294      	cmp	r4, r2
 801031c:	d002      	beq.n	8010324 <std+0x48>
 801031e:	33d0      	adds	r3, #208	@ 0xd0
 8010320:	429c      	cmp	r4, r3
 8010322:	d105      	bne.n	8010330 <std+0x54>
 8010324:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801032c:	f000 ba4a 	b.w	80107c4 <__retarget_lock_init_recursive>
 8010330:	bd10      	pop	{r4, pc}
 8010332:	bf00      	nop
 8010334:	08010511 	.word	0x08010511
 8010338:	08010533 	.word	0x08010533
 801033c:	0801056b 	.word	0x0801056b
 8010340:	0801058f 	.word	0x0801058f
 8010344:	20005c30 	.word	0x20005c30

08010348 <stdio_exit_handler>:
 8010348:	4a02      	ldr	r2, [pc, #8]	@ (8010354 <stdio_exit_handler+0xc>)
 801034a:	4903      	ldr	r1, [pc, #12]	@ (8010358 <stdio_exit_handler+0x10>)
 801034c:	4803      	ldr	r0, [pc, #12]	@ (801035c <stdio_exit_handler+0x14>)
 801034e:	f000 b869 	b.w	8010424 <_fwalk_sglue>
 8010352:	bf00      	nop
 8010354:	200001a8 	.word	0x200001a8
 8010358:	08012aa5 	.word	0x08012aa5
 801035c:	20000324 	.word	0x20000324

08010360 <cleanup_stdio>:
 8010360:	6841      	ldr	r1, [r0, #4]
 8010362:	4b0c      	ldr	r3, [pc, #48]	@ (8010394 <cleanup_stdio+0x34>)
 8010364:	4299      	cmp	r1, r3
 8010366:	b510      	push	{r4, lr}
 8010368:	4604      	mov	r4, r0
 801036a:	d001      	beq.n	8010370 <cleanup_stdio+0x10>
 801036c:	f002 fb9a 	bl	8012aa4 <_fflush_r>
 8010370:	68a1      	ldr	r1, [r4, #8]
 8010372:	4b09      	ldr	r3, [pc, #36]	@ (8010398 <cleanup_stdio+0x38>)
 8010374:	4299      	cmp	r1, r3
 8010376:	d002      	beq.n	801037e <cleanup_stdio+0x1e>
 8010378:	4620      	mov	r0, r4
 801037a:	f002 fb93 	bl	8012aa4 <_fflush_r>
 801037e:	68e1      	ldr	r1, [r4, #12]
 8010380:	4b06      	ldr	r3, [pc, #24]	@ (801039c <cleanup_stdio+0x3c>)
 8010382:	4299      	cmp	r1, r3
 8010384:	d004      	beq.n	8010390 <cleanup_stdio+0x30>
 8010386:	4620      	mov	r0, r4
 8010388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801038c:	f002 bb8a 	b.w	8012aa4 <_fflush_r>
 8010390:	bd10      	pop	{r4, pc}
 8010392:	bf00      	nop
 8010394:	20005c30 	.word	0x20005c30
 8010398:	20005c98 	.word	0x20005c98
 801039c:	20005d00 	.word	0x20005d00

080103a0 <global_stdio_init.part.0>:
 80103a0:	b510      	push	{r4, lr}
 80103a2:	4b0b      	ldr	r3, [pc, #44]	@ (80103d0 <global_stdio_init.part.0+0x30>)
 80103a4:	4c0b      	ldr	r4, [pc, #44]	@ (80103d4 <global_stdio_init.part.0+0x34>)
 80103a6:	4a0c      	ldr	r2, [pc, #48]	@ (80103d8 <global_stdio_init.part.0+0x38>)
 80103a8:	601a      	str	r2, [r3, #0]
 80103aa:	4620      	mov	r0, r4
 80103ac:	2200      	movs	r2, #0
 80103ae:	2104      	movs	r1, #4
 80103b0:	f7ff ff94 	bl	80102dc <std>
 80103b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80103b8:	2201      	movs	r2, #1
 80103ba:	2109      	movs	r1, #9
 80103bc:	f7ff ff8e 	bl	80102dc <std>
 80103c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80103c4:	2202      	movs	r2, #2
 80103c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103ca:	2112      	movs	r1, #18
 80103cc:	f7ff bf86 	b.w	80102dc <std>
 80103d0:	20005d68 	.word	0x20005d68
 80103d4:	20005c30 	.word	0x20005c30
 80103d8:	08010349 	.word	0x08010349

080103dc <__sfp_lock_acquire>:
 80103dc:	4801      	ldr	r0, [pc, #4]	@ (80103e4 <__sfp_lock_acquire+0x8>)
 80103de:	f000 b9f2 	b.w	80107c6 <__retarget_lock_acquire_recursive>
 80103e2:	bf00      	nop
 80103e4:	20005d71 	.word	0x20005d71

080103e8 <__sfp_lock_release>:
 80103e8:	4801      	ldr	r0, [pc, #4]	@ (80103f0 <__sfp_lock_release+0x8>)
 80103ea:	f000 b9ed 	b.w	80107c8 <__retarget_lock_release_recursive>
 80103ee:	bf00      	nop
 80103f0:	20005d71 	.word	0x20005d71

080103f4 <__sinit>:
 80103f4:	b510      	push	{r4, lr}
 80103f6:	4604      	mov	r4, r0
 80103f8:	f7ff fff0 	bl	80103dc <__sfp_lock_acquire>
 80103fc:	6a23      	ldr	r3, [r4, #32]
 80103fe:	b11b      	cbz	r3, 8010408 <__sinit+0x14>
 8010400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010404:	f7ff bff0 	b.w	80103e8 <__sfp_lock_release>
 8010408:	4b04      	ldr	r3, [pc, #16]	@ (801041c <__sinit+0x28>)
 801040a:	6223      	str	r3, [r4, #32]
 801040c:	4b04      	ldr	r3, [pc, #16]	@ (8010420 <__sinit+0x2c>)
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d1f5      	bne.n	8010400 <__sinit+0xc>
 8010414:	f7ff ffc4 	bl	80103a0 <global_stdio_init.part.0>
 8010418:	e7f2      	b.n	8010400 <__sinit+0xc>
 801041a:	bf00      	nop
 801041c:	08010361 	.word	0x08010361
 8010420:	20005d68 	.word	0x20005d68

08010424 <_fwalk_sglue>:
 8010424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010428:	4607      	mov	r7, r0
 801042a:	4688      	mov	r8, r1
 801042c:	4614      	mov	r4, r2
 801042e:	2600      	movs	r6, #0
 8010430:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010434:	f1b9 0901 	subs.w	r9, r9, #1
 8010438:	d505      	bpl.n	8010446 <_fwalk_sglue+0x22>
 801043a:	6824      	ldr	r4, [r4, #0]
 801043c:	2c00      	cmp	r4, #0
 801043e:	d1f7      	bne.n	8010430 <_fwalk_sglue+0xc>
 8010440:	4630      	mov	r0, r6
 8010442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010446:	89ab      	ldrh	r3, [r5, #12]
 8010448:	2b01      	cmp	r3, #1
 801044a:	d907      	bls.n	801045c <_fwalk_sglue+0x38>
 801044c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010450:	3301      	adds	r3, #1
 8010452:	d003      	beq.n	801045c <_fwalk_sglue+0x38>
 8010454:	4629      	mov	r1, r5
 8010456:	4638      	mov	r0, r7
 8010458:	47c0      	blx	r8
 801045a:	4306      	orrs	r6, r0
 801045c:	3568      	adds	r5, #104	@ 0x68
 801045e:	e7e9      	b.n	8010434 <_fwalk_sglue+0x10>

08010460 <sniprintf>:
 8010460:	b40c      	push	{r2, r3}
 8010462:	b530      	push	{r4, r5, lr}
 8010464:	4b18      	ldr	r3, [pc, #96]	@ (80104c8 <sniprintf+0x68>)
 8010466:	1e0c      	subs	r4, r1, #0
 8010468:	681d      	ldr	r5, [r3, #0]
 801046a:	b09d      	sub	sp, #116	@ 0x74
 801046c:	da08      	bge.n	8010480 <sniprintf+0x20>
 801046e:	238b      	movs	r3, #139	@ 0x8b
 8010470:	602b      	str	r3, [r5, #0]
 8010472:	f04f 30ff 	mov.w	r0, #4294967295
 8010476:	b01d      	add	sp, #116	@ 0x74
 8010478:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801047c:	b002      	add	sp, #8
 801047e:	4770      	bx	lr
 8010480:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010484:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010488:	f04f 0300 	mov.w	r3, #0
 801048c:	931b      	str	r3, [sp, #108]	@ 0x6c
 801048e:	bf14      	ite	ne
 8010490:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010494:	4623      	moveq	r3, r4
 8010496:	9304      	str	r3, [sp, #16]
 8010498:	9307      	str	r3, [sp, #28]
 801049a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801049e:	9002      	str	r0, [sp, #8]
 80104a0:	9006      	str	r0, [sp, #24]
 80104a2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80104a6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80104a8:	ab21      	add	r3, sp, #132	@ 0x84
 80104aa:	a902      	add	r1, sp, #8
 80104ac:	4628      	mov	r0, r5
 80104ae:	9301      	str	r3, [sp, #4]
 80104b0:	f002 f978 	bl	80127a4 <_svfiprintf_r>
 80104b4:	1c43      	adds	r3, r0, #1
 80104b6:	bfbc      	itt	lt
 80104b8:	238b      	movlt	r3, #139	@ 0x8b
 80104ba:	602b      	strlt	r3, [r5, #0]
 80104bc:	2c00      	cmp	r4, #0
 80104be:	d0da      	beq.n	8010476 <sniprintf+0x16>
 80104c0:	9b02      	ldr	r3, [sp, #8]
 80104c2:	2200      	movs	r2, #0
 80104c4:	701a      	strb	r2, [r3, #0]
 80104c6:	e7d6      	b.n	8010476 <sniprintf+0x16>
 80104c8:	20000320 	.word	0x20000320

080104cc <siprintf>:
 80104cc:	b40e      	push	{r1, r2, r3}
 80104ce:	b510      	push	{r4, lr}
 80104d0:	b09d      	sub	sp, #116	@ 0x74
 80104d2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80104d4:	9002      	str	r0, [sp, #8]
 80104d6:	9006      	str	r0, [sp, #24]
 80104d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80104dc:	480a      	ldr	r0, [pc, #40]	@ (8010508 <siprintf+0x3c>)
 80104de:	9107      	str	r1, [sp, #28]
 80104e0:	9104      	str	r1, [sp, #16]
 80104e2:	490a      	ldr	r1, [pc, #40]	@ (801050c <siprintf+0x40>)
 80104e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80104e8:	9105      	str	r1, [sp, #20]
 80104ea:	2400      	movs	r4, #0
 80104ec:	a902      	add	r1, sp, #8
 80104ee:	6800      	ldr	r0, [r0, #0]
 80104f0:	9301      	str	r3, [sp, #4]
 80104f2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80104f4:	f002 f956 	bl	80127a4 <_svfiprintf_r>
 80104f8:	9b02      	ldr	r3, [sp, #8]
 80104fa:	701c      	strb	r4, [r3, #0]
 80104fc:	b01d      	add	sp, #116	@ 0x74
 80104fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010502:	b003      	add	sp, #12
 8010504:	4770      	bx	lr
 8010506:	bf00      	nop
 8010508:	20000320 	.word	0x20000320
 801050c:	ffff0208 	.word	0xffff0208

08010510 <__sread>:
 8010510:	b510      	push	{r4, lr}
 8010512:	460c      	mov	r4, r1
 8010514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010518:	f000 f906 	bl	8010728 <_read_r>
 801051c:	2800      	cmp	r0, #0
 801051e:	bfab      	itete	ge
 8010520:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010522:	89a3      	ldrhlt	r3, [r4, #12]
 8010524:	181b      	addge	r3, r3, r0
 8010526:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801052a:	bfac      	ite	ge
 801052c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801052e:	81a3      	strhlt	r3, [r4, #12]
 8010530:	bd10      	pop	{r4, pc}

08010532 <__swrite>:
 8010532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010536:	461f      	mov	r7, r3
 8010538:	898b      	ldrh	r3, [r1, #12]
 801053a:	05db      	lsls	r3, r3, #23
 801053c:	4605      	mov	r5, r0
 801053e:	460c      	mov	r4, r1
 8010540:	4616      	mov	r6, r2
 8010542:	d505      	bpl.n	8010550 <__swrite+0x1e>
 8010544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010548:	2302      	movs	r3, #2
 801054a:	2200      	movs	r2, #0
 801054c:	f000 f8da 	bl	8010704 <_lseek_r>
 8010550:	89a3      	ldrh	r3, [r4, #12]
 8010552:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010556:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801055a:	81a3      	strh	r3, [r4, #12]
 801055c:	4632      	mov	r2, r6
 801055e:	463b      	mov	r3, r7
 8010560:	4628      	mov	r0, r5
 8010562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010566:	f000 b8f1 	b.w	801074c <_write_r>

0801056a <__sseek>:
 801056a:	b510      	push	{r4, lr}
 801056c:	460c      	mov	r4, r1
 801056e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010572:	f000 f8c7 	bl	8010704 <_lseek_r>
 8010576:	1c43      	adds	r3, r0, #1
 8010578:	89a3      	ldrh	r3, [r4, #12]
 801057a:	bf15      	itete	ne
 801057c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801057e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010582:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010586:	81a3      	strheq	r3, [r4, #12]
 8010588:	bf18      	it	ne
 801058a:	81a3      	strhne	r3, [r4, #12]
 801058c:	bd10      	pop	{r4, pc}

0801058e <__sclose>:
 801058e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010592:	f000 b8a7 	b.w	80106e4 <_close_r>

08010596 <memset>:
 8010596:	4402      	add	r2, r0
 8010598:	4603      	mov	r3, r0
 801059a:	4293      	cmp	r3, r2
 801059c:	d100      	bne.n	80105a0 <memset+0xa>
 801059e:	4770      	bx	lr
 80105a0:	f803 1b01 	strb.w	r1, [r3], #1
 80105a4:	e7f9      	b.n	801059a <memset+0x4>

080105a6 <strncmp>:
 80105a6:	b510      	push	{r4, lr}
 80105a8:	b16a      	cbz	r2, 80105c6 <strncmp+0x20>
 80105aa:	3901      	subs	r1, #1
 80105ac:	1884      	adds	r4, r0, r2
 80105ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80105b2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80105b6:	429a      	cmp	r2, r3
 80105b8:	d103      	bne.n	80105c2 <strncmp+0x1c>
 80105ba:	42a0      	cmp	r0, r4
 80105bc:	d001      	beq.n	80105c2 <strncmp+0x1c>
 80105be:	2a00      	cmp	r2, #0
 80105c0:	d1f5      	bne.n	80105ae <strncmp+0x8>
 80105c2:	1ad0      	subs	r0, r2, r3
 80105c4:	bd10      	pop	{r4, pc}
 80105c6:	4610      	mov	r0, r2
 80105c8:	e7fc      	b.n	80105c4 <strncmp+0x1e>

080105ca <strncpy>:
 80105ca:	b510      	push	{r4, lr}
 80105cc:	3901      	subs	r1, #1
 80105ce:	4603      	mov	r3, r0
 80105d0:	b132      	cbz	r2, 80105e0 <strncpy+0x16>
 80105d2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80105d6:	f803 4b01 	strb.w	r4, [r3], #1
 80105da:	3a01      	subs	r2, #1
 80105dc:	2c00      	cmp	r4, #0
 80105de:	d1f7      	bne.n	80105d0 <strncpy+0x6>
 80105e0:	441a      	add	r2, r3
 80105e2:	2100      	movs	r1, #0
 80105e4:	4293      	cmp	r3, r2
 80105e6:	d100      	bne.n	80105ea <strncpy+0x20>
 80105e8:	bd10      	pop	{r4, pc}
 80105ea:	f803 1b01 	strb.w	r1, [r3], #1
 80105ee:	e7f9      	b.n	80105e4 <strncpy+0x1a>

080105f0 <strtok>:
 80105f0:	4b16      	ldr	r3, [pc, #88]	@ (801064c <strtok+0x5c>)
 80105f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105f6:	681f      	ldr	r7, [r3, #0]
 80105f8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80105fa:	4605      	mov	r5, r0
 80105fc:	460e      	mov	r6, r1
 80105fe:	b9ec      	cbnz	r4, 801063c <strtok+0x4c>
 8010600:	2050      	movs	r0, #80	@ 0x50
 8010602:	f001 faf5 	bl	8011bf0 <malloc>
 8010606:	4602      	mov	r2, r0
 8010608:	6478      	str	r0, [r7, #68]	@ 0x44
 801060a:	b920      	cbnz	r0, 8010616 <strtok+0x26>
 801060c:	4b10      	ldr	r3, [pc, #64]	@ (8010650 <strtok+0x60>)
 801060e:	4811      	ldr	r0, [pc, #68]	@ (8010654 <strtok+0x64>)
 8010610:	215b      	movs	r1, #91	@ 0x5b
 8010612:	f000 f8f1 	bl	80107f8 <__assert_func>
 8010616:	e9c0 4400 	strd	r4, r4, [r0]
 801061a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801061e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8010622:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8010626:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801062a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801062e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8010632:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8010636:	6184      	str	r4, [r0, #24]
 8010638:	7704      	strb	r4, [r0, #28]
 801063a:	6244      	str	r4, [r0, #36]	@ 0x24
 801063c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801063e:	4631      	mov	r1, r6
 8010640:	4628      	mov	r0, r5
 8010642:	2301      	movs	r3, #1
 8010644:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010648:	f000 b806 	b.w	8010658 <__strtok_r>
 801064c:	20000320 	.word	0x20000320
 8010650:	080141ea 	.word	0x080141ea
 8010654:	08014201 	.word	0x08014201

08010658 <__strtok_r>:
 8010658:	b5f0      	push	{r4, r5, r6, r7, lr}
 801065a:	4604      	mov	r4, r0
 801065c:	b908      	cbnz	r0, 8010662 <__strtok_r+0xa>
 801065e:	6814      	ldr	r4, [r2, #0]
 8010660:	b144      	cbz	r4, 8010674 <__strtok_r+0x1c>
 8010662:	4620      	mov	r0, r4
 8010664:	f814 5b01 	ldrb.w	r5, [r4], #1
 8010668:	460f      	mov	r7, r1
 801066a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801066e:	b91e      	cbnz	r6, 8010678 <__strtok_r+0x20>
 8010670:	b965      	cbnz	r5, 801068c <__strtok_r+0x34>
 8010672:	6015      	str	r5, [r2, #0]
 8010674:	2000      	movs	r0, #0
 8010676:	e005      	b.n	8010684 <__strtok_r+0x2c>
 8010678:	42b5      	cmp	r5, r6
 801067a:	d1f6      	bne.n	801066a <__strtok_r+0x12>
 801067c:	2b00      	cmp	r3, #0
 801067e:	d1f0      	bne.n	8010662 <__strtok_r+0xa>
 8010680:	6014      	str	r4, [r2, #0]
 8010682:	7003      	strb	r3, [r0, #0]
 8010684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010686:	461c      	mov	r4, r3
 8010688:	e00c      	b.n	80106a4 <__strtok_r+0x4c>
 801068a:	b91d      	cbnz	r5, 8010694 <__strtok_r+0x3c>
 801068c:	4627      	mov	r7, r4
 801068e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010692:	460e      	mov	r6, r1
 8010694:	f816 5b01 	ldrb.w	r5, [r6], #1
 8010698:	42ab      	cmp	r3, r5
 801069a:	d1f6      	bne.n	801068a <__strtok_r+0x32>
 801069c:	2b00      	cmp	r3, #0
 801069e:	d0f2      	beq.n	8010686 <__strtok_r+0x2e>
 80106a0:	2300      	movs	r3, #0
 80106a2:	703b      	strb	r3, [r7, #0]
 80106a4:	6014      	str	r4, [r2, #0]
 80106a6:	e7ed      	b.n	8010684 <__strtok_r+0x2c>

080106a8 <strtok_r>:
 80106a8:	2301      	movs	r3, #1
 80106aa:	f7ff bfd5 	b.w	8010658 <__strtok_r>

080106ae <strstr>:
 80106ae:	780a      	ldrb	r2, [r1, #0]
 80106b0:	b570      	push	{r4, r5, r6, lr}
 80106b2:	b96a      	cbnz	r2, 80106d0 <strstr+0x22>
 80106b4:	bd70      	pop	{r4, r5, r6, pc}
 80106b6:	429a      	cmp	r2, r3
 80106b8:	d109      	bne.n	80106ce <strstr+0x20>
 80106ba:	460c      	mov	r4, r1
 80106bc:	4605      	mov	r5, r0
 80106be:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d0f6      	beq.n	80106b4 <strstr+0x6>
 80106c6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80106ca:	429e      	cmp	r6, r3
 80106cc:	d0f7      	beq.n	80106be <strstr+0x10>
 80106ce:	3001      	adds	r0, #1
 80106d0:	7803      	ldrb	r3, [r0, #0]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d1ef      	bne.n	80106b6 <strstr+0x8>
 80106d6:	4618      	mov	r0, r3
 80106d8:	e7ec      	b.n	80106b4 <strstr+0x6>
	...

080106dc <_localeconv_r>:
 80106dc:	4800      	ldr	r0, [pc, #0]	@ (80106e0 <_localeconv_r+0x4>)
 80106de:	4770      	bx	lr
 80106e0:	200002a4 	.word	0x200002a4

080106e4 <_close_r>:
 80106e4:	b538      	push	{r3, r4, r5, lr}
 80106e6:	4d06      	ldr	r5, [pc, #24]	@ (8010700 <_close_r+0x1c>)
 80106e8:	2300      	movs	r3, #0
 80106ea:	4604      	mov	r4, r0
 80106ec:	4608      	mov	r0, r1
 80106ee:	602b      	str	r3, [r5, #0]
 80106f0:	f7f3 fc00 	bl	8003ef4 <_close>
 80106f4:	1c43      	adds	r3, r0, #1
 80106f6:	d102      	bne.n	80106fe <_close_r+0x1a>
 80106f8:	682b      	ldr	r3, [r5, #0]
 80106fa:	b103      	cbz	r3, 80106fe <_close_r+0x1a>
 80106fc:	6023      	str	r3, [r4, #0]
 80106fe:	bd38      	pop	{r3, r4, r5, pc}
 8010700:	20005d6c 	.word	0x20005d6c

08010704 <_lseek_r>:
 8010704:	b538      	push	{r3, r4, r5, lr}
 8010706:	4d07      	ldr	r5, [pc, #28]	@ (8010724 <_lseek_r+0x20>)
 8010708:	4604      	mov	r4, r0
 801070a:	4608      	mov	r0, r1
 801070c:	4611      	mov	r1, r2
 801070e:	2200      	movs	r2, #0
 8010710:	602a      	str	r2, [r5, #0]
 8010712:	461a      	mov	r2, r3
 8010714:	f7f3 fc15 	bl	8003f42 <_lseek>
 8010718:	1c43      	adds	r3, r0, #1
 801071a:	d102      	bne.n	8010722 <_lseek_r+0x1e>
 801071c:	682b      	ldr	r3, [r5, #0]
 801071e:	b103      	cbz	r3, 8010722 <_lseek_r+0x1e>
 8010720:	6023      	str	r3, [r4, #0]
 8010722:	bd38      	pop	{r3, r4, r5, pc}
 8010724:	20005d6c 	.word	0x20005d6c

08010728 <_read_r>:
 8010728:	b538      	push	{r3, r4, r5, lr}
 801072a:	4d07      	ldr	r5, [pc, #28]	@ (8010748 <_read_r+0x20>)
 801072c:	4604      	mov	r4, r0
 801072e:	4608      	mov	r0, r1
 8010730:	4611      	mov	r1, r2
 8010732:	2200      	movs	r2, #0
 8010734:	602a      	str	r2, [r5, #0]
 8010736:	461a      	mov	r2, r3
 8010738:	f7f3 fba3 	bl	8003e82 <_read>
 801073c:	1c43      	adds	r3, r0, #1
 801073e:	d102      	bne.n	8010746 <_read_r+0x1e>
 8010740:	682b      	ldr	r3, [r5, #0]
 8010742:	b103      	cbz	r3, 8010746 <_read_r+0x1e>
 8010744:	6023      	str	r3, [r4, #0]
 8010746:	bd38      	pop	{r3, r4, r5, pc}
 8010748:	20005d6c 	.word	0x20005d6c

0801074c <_write_r>:
 801074c:	b538      	push	{r3, r4, r5, lr}
 801074e:	4d07      	ldr	r5, [pc, #28]	@ (801076c <_write_r+0x20>)
 8010750:	4604      	mov	r4, r0
 8010752:	4608      	mov	r0, r1
 8010754:	4611      	mov	r1, r2
 8010756:	2200      	movs	r2, #0
 8010758:	602a      	str	r2, [r5, #0]
 801075a:	461a      	mov	r2, r3
 801075c:	f7f3 fbae 	bl	8003ebc <_write>
 8010760:	1c43      	adds	r3, r0, #1
 8010762:	d102      	bne.n	801076a <_write_r+0x1e>
 8010764:	682b      	ldr	r3, [r5, #0]
 8010766:	b103      	cbz	r3, 801076a <_write_r+0x1e>
 8010768:	6023      	str	r3, [r4, #0]
 801076a:	bd38      	pop	{r3, r4, r5, pc}
 801076c:	20005d6c 	.word	0x20005d6c

08010770 <__errno>:
 8010770:	4b01      	ldr	r3, [pc, #4]	@ (8010778 <__errno+0x8>)
 8010772:	6818      	ldr	r0, [r3, #0]
 8010774:	4770      	bx	lr
 8010776:	bf00      	nop
 8010778:	20000320 	.word	0x20000320

0801077c <__libc_init_array>:
 801077c:	b570      	push	{r4, r5, r6, lr}
 801077e:	4d0d      	ldr	r5, [pc, #52]	@ (80107b4 <__libc_init_array+0x38>)
 8010780:	4c0d      	ldr	r4, [pc, #52]	@ (80107b8 <__libc_init_array+0x3c>)
 8010782:	1b64      	subs	r4, r4, r5
 8010784:	10a4      	asrs	r4, r4, #2
 8010786:	2600      	movs	r6, #0
 8010788:	42a6      	cmp	r6, r4
 801078a:	d109      	bne.n	80107a0 <__libc_init_array+0x24>
 801078c:	4d0b      	ldr	r5, [pc, #44]	@ (80107bc <__libc_init_array+0x40>)
 801078e:	4c0c      	ldr	r4, [pc, #48]	@ (80107c0 <__libc_init_array+0x44>)
 8010790:	f003 f848 	bl	8013824 <_init>
 8010794:	1b64      	subs	r4, r4, r5
 8010796:	10a4      	asrs	r4, r4, #2
 8010798:	2600      	movs	r6, #0
 801079a:	42a6      	cmp	r6, r4
 801079c:	d105      	bne.n	80107aa <__libc_init_array+0x2e>
 801079e:	bd70      	pop	{r4, r5, r6, pc}
 80107a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80107a4:	4798      	blx	r3
 80107a6:	3601      	adds	r6, #1
 80107a8:	e7ee      	b.n	8010788 <__libc_init_array+0xc>
 80107aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80107ae:	4798      	blx	r3
 80107b0:	3601      	adds	r6, #1
 80107b2:	e7f2      	b.n	801079a <__libc_init_array+0x1e>
 80107b4:	080146b8 	.word	0x080146b8
 80107b8:	080146b8 	.word	0x080146b8
 80107bc:	080146b8 	.word	0x080146b8
 80107c0:	080146bc 	.word	0x080146bc

080107c4 <__retarget_lock_init_recursive>:
 80107c4:	4770      	bx	lr

080107c6 <__retarget_lock_acquire_recursive>:
 80107c6:	4770      	bx	lr

080107c8 <__retarget_lock_release_recursive>:
 80107c8:	4770      	bx	lr

080107ca <memcpy>:
 80107ca:	440a      	add	r2, r1
 80107cc:	4291      	cmp	r1, r2
 80107ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80107d2:	d100      	bne.n	80107d6 <memcpy+0xc>
 80107d4:	4770      	bx	lr
 80107d6:	b510      	push	{r4, lr}
 80107d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80107dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80107e0:	4291      	cmp	r1, r2
 80107e2:	d1f9      	bne.n	80107d8 <memcpy+0xe>
 80107e4:	bd10      	pop	{r4, pc}
	...

080107e8 <nan>:
 80107e8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80107f0 <nan+0x8>
 80107ec:	4770      	bx	lr
 80107ee:	bf00      	nop
 80107f0:	00000000 	.word	0x00000000
 80107f4:	7ff80000 	.word	0x7ff80000

080107f8 <__assert_func>:
 80107f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80107fa:	4614      	mov	r4, r2
 80107fc:	461a      	mov	r2, r3
 80107fe:	4b09      	ldr	r3, [pc, #36]	@ (8010824 <__assert_func+0x2c>)
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	4605      	mov	r5, r0
 8010804:	68d8      	ldr	r0, [r3, #12]
 8010806:	b14c      	cbz	r4, 801081c <__assert_func+0x24>
 8010808:	4b07      	ldr	r3, [pc, #28]	@ (8010828 <__assert_func+0x30>)
 801080a:	9100      	str	r1, [sp, #0]
 801080c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010810:	4906      	ldr	r1, [pc, #24]	@ (801082c <__assert_func+0x34>)
 8010812:	462b      	mov	r3, r5
 8010814:	f002 f96e 	bl	8012af4 <fiprintf>
 8010818:	f002 f9a8 	bl	8012b6c <abort>
 801081c:	4b04      	ldr	r3, [pc, #16]	@ (8010830 <__assert_func+0x38>)
 801081e:	461c      	mov	r4, r3
 8010820:	e7f3      	b.n	801080a <__assert_func+0x12>
 8010822:	bf00      	nop
 8010824:	20000320 	.word	0x20000320
 8010828:	08014263 	.word	0x08014263
 801082c:	08014270 	.word	0x08014270
 8010830:	0801429e 	.word	0x0801429e

08010834 <quorem>:
 8010834:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010838:	6903      	ldr	r3, [r0, #16]
 801083a:	690c      	ldr	r4, [r1, #16]
 801083c:	42a3      	cmp	r3, r4
 801083e:	4607      	mov	r7, r0
 8010840:	db7e      	blt.n	8010940 <quorem+0x10c>
 8010842:	3c01      	subs	r4, #1
 8010844:	f101 0814 	add.w	r8, r1, #20
 8010848:	00a3      	lsls	r3, r4, #2
 801084a:	f100 0514 	add.w	r5, r0, #20
 801084e:	9300      	str	r3, [sp, #0]
 8010850:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010854:	9301      	str	r3, [sp, #4]
 8010856:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801085a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801085e:	3301      	adds	r3, #1
 8010860:	429a      	cmp	r2, r3
 8010862:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010866:	fbb2 f6f3 	udiv	r6, r2, r3
 801086a:	d32e      	bcc.n	80108ca <quorem+0x96>
 801086c:	f04f 0a00 	mov.w	sl, #0
 8010870:	46c4      	mov	ip, r8
 8010872:	46ae      	mov	lr, r5
 8010874:	46d3      	mov	fp, sl
 8010876:	f85c 3b04 	ldr.w	r3, [ip], #4
 801087a:	b298      	uxth	r0, r3
 801087c:	fb06 a000 	mla	r0, r6, r0, sl
 8010880:	0c02      	lsrs	r2, r0, #16
 8010882:	0c1b      	lsrs	r3, r3, #16
 8010884:	fb06 2303 	mla	r3, r6, r3, r2
 8010888:	f8de 2000 	ldr.w	r2, [lr]
 801088c:	b280      	uxth	r0, r0
 801088e:	b292      	uxth	r2, r2
 8010890:	1a12      	subs	r2, r2, r0
 8010892:	445a      	add	r2, fp
 8010894:	f8de 0000 	ldr.w	r0, [lr]
 8010898:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801089c:	b29b      	uxth	r3, r3
 801089e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80108a2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80108a6:	b292      	uxth	r2, r2
 80108a8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80108ac:	45e1      	cmp	r9, ip
 80108ae:	f84e 2b04 	str.w	r2, [lr], #4
 80108b2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80108b6:	d2de      	bcs.n	8010876 <quorem+0x42>
 80108b8:	9b00      	ldr	r3, [sp, #0]
 80108ba:	58eb      	ldr	r3, [r5, r3]
 80108bc:	b92b      	cbnz	r3, 80108ca <quorem+0x96>
 80108be:	9b01      	ldr	r3, [sp, #4]
 80108c0:	3b04      	subs	r3, #4
 80108c2:	429d      	cmp	r5, r3
 80108c4:	461a      	mov	r2, r3
 80108c6:	d32f      	bcc.n	8010928 <quorem+0xf4>
 80108c8:	613c      	str	r4, [r7, #16]
 80108ca:	4638      	mov	r0, r7
 80108cc:	f001 fd14 	bl	80122f8 <__mcmp>
 80108d0:	2800      	cmp	r0, #0
 80108d2:	db25      	blt.n	8010920 <quorem+0xec>
 80108d4:	4629      	mov	r1, r5
 80108d6:	2000      	movs	r0, #0
 80108d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80108dc:	f8d1 c000 	ldr.w	ip, [r1]
 80108e0:	fa1f fe82 	uxth.w	lr, r2
 80108e4:	fa1f f38c 	uxth.w	r3, ip
 80108e8:	eba3 030e 	sub.w	r3, r3, lr
 80108ec:	4403      	add	r3, r0
 80108ee:	0c12      	lsrs	r2, r2, #16
 80108f0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80108f4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80108f8:	b29b      	uxth	r3, r3
 80108fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80108fe:	45c1      	cmp	r9, r8
 8010900:	f841 3b04 	str.w	r3, [r1], #4
 8010904:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010908:	d2e6      	bcs.n	80108d8 <quorem+0xa4>
 801090a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801090e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010912:	b922      	cbnz	r2, 801091e <quorem+0xea>
 8010914:	3b04      	subs	r3, #4
 8010916:	429d      	cmp	r5, r3
 8010918:	461a      	mov	r2, r3
 801091a:	d30b      	bcc.n	8010934 <quorem+0x100>
 801091c:	613c      	str	r4, [r7, #16]
 801091e:	3601      	adds	r6, #1
 8010920:	4630      	mov	r0, r6
 8010922:	b003      	add	sp, #12
 8010924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010928:	6812      	ldr	r2, [r2, #0]
 801092a:	3b04      	subs	r3, #4
 801092c:	2a00      	cmp	r2, #0
 801092e:	d1cb      	bne.n	80108c8 <quorem+0x94>
 8010930:	3c01      	subs	r4, #1
 8010932:	e7c6      	b.n	80108c2 <quorem+0x8e>
 8010934:	6812      	ldr	r2, [r2, #0]
 8010936:	3b04      	subs	r3, #4
 8010938:	2a00      	cmp	r2, #0
 801093a:	d1ef      	bne.n	801091c <quorem+0xe8>
 801093c:	3c01      	subs	r4, #1
 801093e:	e7ea      	b.n	8010916 <quorem+0xe2>
 8010940:	2000      	movs	r0, #0
 8010942:	e7ee      	b.n	8010922 <quorem+0xee>
 8010944:	0000      	movs	r0, r0
	...

08010948 <_dtoa_r>:
 8010948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801094c:	69c7      	ldr	r7, [r0, #28]
 801094e:	b097      	sub	sp, #92	@ 0x5c
 8010950:	ed8d 0b04 	vstr	d0, [sp, #16]
 8010954:	ec55 4b10 	vmov	r4, r5, d0
 8010958:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801095a:	9107      	str	r1, [sp, #28]
 801095c:	4681      	mov	r9, r0
 801095e:	920c      	str	r2, [sp, #48]	@ 0x30
 8010960:	9311      	str	r3, [sp, #68]	@ 0x44
 8010962:	b97f      	cbnz	r7, 8010984 <_dtoa_r+0x3c>
 8010964:	2010      	movs	r0, #16
 8010966:	f001 f943 	bl	8011bf0 <malloc>
 801096a:	4602      	mov	r2, r0
 801096c:	f8c9 001c 	str.w	r0, [r9, #28]
 8010970:	b920      	cbnz	r0, 801097c <_dtoa_r+0x34>
 8010972:	4ba9      	ldr	r3, [pc, #676]	@ (8010c18 <_dtoa_r+0x2d0>)
 8010974:	21ef      	movs	r1, #239	@ 0xef
 8010976:	48a9      	ldr	r0, [pc, #676]	@ (8010c1c <_dtoa_r+0x2d4>)
 8010978:	f7ff ff3e 	bl	80107f8 <__assert_func>
 801097c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010980:	6007      	str	r7, [r0, #0]
 8010982:	60c7      	str	r7, [r0, #12]
 8010984:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010988:	6819      	ldr	r1, [r3, #0]
 801098a:	b159      	cbz	r1, 80109a4 <_dtoa_r+0x5c>
 801098c:	685a      	ldr	r2, [r3, #4]
 801098e:	604a      	str	r2, [r1, #4]
 8010990:	2301      	movs	r3, #1
 8010992:	4093      	lsls	r3, r2
 8010994:	608b      	str	r3, [r1, #8]
 8010996:	4648      	mov	r0, r9
 8010998:	f001 fa32 	bl	8011e00 <_Bfree>
 801099c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80109a0:	2200      	movs	r2, #0
 80109a2:	601a      	str	r2, [r3, #0]
 80109a4:	1e2b      	subs	r3, r5, #0
 80109a6:	bfb9      	ittee	lt
 80109a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80109ac:	9305      	strlt	r3, [sp, #20]
 80109ae:	2300      	movge	r3, #0
 80109b0:	6033      	strge	r3, [r6, #0]
 80109b2:	9f05      	ldr	r7, [sp, #20]
 80109b4:	4b9a      	ldr	r3, [pc, #616]	@ (8010c20 <_dtoa_r+0x2d8>)
 80109b6:	bfbc      	itt	lt
 80109b8:	2201      	movlt	r2, #1
 80109ba:	6032      	strlt	r2, [r6, #0]
 80109bc:	43bb      	bics	r3, r7
 80109be:	d112      	bne.n	80109e6 <_dtoa_r+0x9e>
 80109c0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80109c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80109c6:	6013      	str	r3, [r2, #0]
 80109c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80109cc:	4323      	orrs	r3, r4
 80109ce:	f000 855a 	beq.w	8011486 <_dtoa_r+0xb3e>
 80109d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80109d4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8010c34 <_dtoa_r+0x2ec>
 80109d8:	2b00      	cmp	r3, #0
 80109da:	f000 855c 	beq.w	8011496 <_dtoa_r+0xb4e>
 80109de:	f10a 0303 	add.w	r3, sl, #3
 80109e2:	f000 bd56 	b.w	8011492 <_dtoa_r+0xb4a>
 80109e6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80109ea:	2200      	movs	r2, #0
 80109ec:	ec51 0b17 	vmov	r0, r1, d7
 80109f0:	2300      	movs	r3, #0
 80109f2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80109f6:	f7f0 f86f 	bl	8000ad8 <__aeabi_dcmpeq>
 80109fa:	4680      	mov	r8, r0
 80109fc:	b158      	cbz	r0, 8010a16 <_dtoa_r+0xce>
 80109fe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010a00:	2301      	movs	r3, #1
 8010a02:	6013      	str	r3, [r2, #0]
 8010a04:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010a06:	b113      	cbz	r3, 8010a0e <_dtoa_r+0xc6>
 8010a08:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010a0a:	4b86      	ldr	r3, [pc, #536]	@ (8010c24 <_dtoa_r+0x2dc>)
 8010a0c:	6013      	str	r3, [r2, #0]
 8010a0e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8010c38 <_dtoa_r+0x2f0>
 8010a12:	f000 bd40 	b.w	8011496 <_dtoa_r+0xb4e>
 8010a16:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8010a1a:	aa14      	add	r2, sp, #80	@ 0x50
 8010a1c:	a915      	add	r1, sp, #84	@ 0x54
 8010a1e:	4648      	mov	r0, r9
 8010a20:	f001 fd8a 	bl	8012538 <__d2b>
 8010a24:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010a28:	9002      	str	r0, [sp, #8]
 8010a2a:	2e00      	cmp	r6, #0
 8010a2c:	d078      	beq.n	8010b20 <_dtoa_r+0x1d8>
 8010a2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010a30:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8010a34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010a38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010a3c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010a40:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010a44:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010a48:	4619      	mov	r1, r3
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	4b76      	ldr	r3, [pc, #472]	@ (8010c28 <_dtoa_r+0x2e0>)
 8010a4e:	f7ef fc23 	bl	8000298 <__aeabi_dsub>
 8010a52:	a36b      	add	r3, pc, #428	@ (adr r3, 8010c00 <_dtoa_r+0x2b8>)
 8010a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a58:	f7ef fdd6 	bl	8000608 <__aeabi_dmul>
 8010a5c:	a36a      	add	r3, pc, #424	@ (adr r3, 8010c08 <_dtoa_r+0x2c0>)
 8010a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a62:	f7ef fc1b 	bl	800029c <__adddf3>
 8010a66:	4604      	mov	r4, r0
 8010a68:	4630      	mov	r0, r6
 8010a6a:	460d      	mov	r5, r1
 8010a6c:	f7ef fd62 	bl	8000534 <__aeabi_i2d>
 8010a70:	a367      	add	r3, pc, #412	@ (adr r3, 8010c10 <_dtoa_r+0x2c8>)
 8010a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a76:	f7ef fdc7 	bl	8000608 <__aeabi_dmul>
 8010a7a:	4602      	mov	r2, r0
 8010a7c:	460b      	mov	r3, r1
 8010a7e:	4620      	mov	r0, r4
 8010a80:	4629      	mov	r1, r5
 8010a82:	f7ef fc0b 	bl	800029c <__adddf3>
 8010a86:	4604      	mov	r4, r0
 8010a88:	460d      	mov	r5, r1
 8010a8a:	f7f0 f86d 	bl	8000b68 <__aeabi_d2iz>
 8010a8e:	2200      	movs	r2, #0
 8010a90:	4607      	mov	r7, r0
 8010a92:	2300      	movs	r3, #0
 8010a94:	4620      	mov	r0, r4
 8010a96:	4629      	mov	r1, r5
 8010a98:	f7f0 f828 	bl	8000aec <__aeabi_dcmplt>
 8010a9c:	b140      	cbz	r0, 8010ab0 <_dtoa_r+0x168>
 8010a9e:	4638      	mov	r0, r7
 8010aa0:	f7ef fd48 	bl	8000534 <__aeabi_i2d>
 8010aa4:	4622      	mov	r2, r4
 8010aa6:	462b      	mov	r3, r5
 8010aa8:	f7f0 f816 	bl	8000ad8 <__aeabi_dcmpeq>
 8010aac:	b900      	cbnz	r0, 8010ab0 <_dtoa_r+0x168>
 8010aae:	3f01      	subs	r7, #1
 8010ab0:	2f16      	cmp	r7, #22
 8010ab2:	d852      	bhi.n	8010b5a <_dtoa_r+0x212>
 8010ab4:	4b5d      	ldr	r3, [pc, #372]	@ (8010c2c <_dtoa_r+0x2e4>)
 8010ab6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010abe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010ac2:	f7f0 f813 	bl	8000aec <__aeabi_dcmplt>
 8010ac6:	2800      	cmp	r0, #0
 8010ac8:	d049      	beq.n	8010b5e <_dtoa_r+0x216>
 8010aca:	3f01      	subs	r7, #1
 8010acc:	2300      	movs	r3, #0
 8010ace:	9310      	str	r3, [sp, #64]	@ 0x40
 8010ad0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010ad2:	1b9b      	subs	r3, r3, r6
 8010ad4:	1e5a      	subs	r2, r3, #1
 8010ad6:	bf45      	ittet	mi
 8010ad8:	f1c3 0301 	rsbmi	r3, r3, #1
 8010adc:	9300      	strmi	r3, [sp, #0]
 8010ade:	2300      	movpl	r3, #0
 8010ae0:	2300      	movmi	r3, #0
 8010ae2:	9206      	str	r2, [sp, #24]
 8010ae4:	bf54      	ite	pl
 8010ae6:	9300      	strpl	r3, [sp, #0]
 8010ae8:	9306      	strmi	r3, [sp, #24]
 8010aea:	2f00      	cmp	r7, #0
 8010aec:	db39      	blt.n	8010b62 <_dtoa_r+0x21a>
 8010aee:	9b06      	ldr	r3, [sp, #24]
 8010af0:	970d      	str	r7, [sp, #52]	@ 0x34
 8010af2:	443b      	add	r3, r7
 8010af4:	9306      	str	r3, [sp, #24]
 8010af6:	2300      	movs	r3, #0
 8010af8:	9308      	str	r3, [sp, #32]
 8010afa:	9b07      	ldr	r3, [sp, #28]
 8010afc:	2b09      	cmp	r3, #9
 8010afe:	d863      	bhi.n	8010bc8 <_dtoa_r+0x280>
 8010b00:	2b05      	cmp	r3, #5
 8010b02:	bfc4      	itt	gt
 8010b04:	3b04      	subgt	r3, #4
 8010b06:	9307      	strgt	r3, [sp, #28]
 8010b08:	9b07      	ldr	r3, [sp, #28]
 8010b0a:	f1a3 0302 	sub.w	r3, r3, #2
 8010b0e:	bfcc      	ite	gt
 8010b10:	2400      	movgt	r4, #0
 8010b12:	2401      	movle	r4, #1
 8010b14:	2b03      	cmp	r3, #3
 8010b16:	d863      	bhi.n	8010be0 <_dtoa_r+0x298>
 8010b18:	e8df f003 	tbb	[pc, r3]
 8010b1c:	2b375452 	.word	0x2b375452
 8010b20:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8010b24:	441e      	add	r6, r3
 8010b26:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010b2a:	2b20      	cmp	r3, #32
 8010b2c:	bfc1      	itttt	gt
 8010b2e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010b32:	409f      	lslgt	r7, r3
 8010b34:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010b38:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010b3c:	bfd6      	itet	le
 8010b3e:	f1c3 0320 	rsble	r3, r3, #32
 8010b42:	ea47 0003 	orrgt.w	r0, r7, r3
 8010b46:	fa04 f003 	lslle.w	r0, r4, r3
 8010b4a:	f7ef fce3 	bl	8000514 <__aeabi_ui2d>
 8010b4e:	2201      	movs	r2, #1
 8010b50:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010b54:	3e01      	subs	r6, #1
 8010b56:	9212      	str	r2, [sp, #72]	@ 0x48
 8010b58:	e776      	b.n	8010a48 <_dtoa_r+0x100>
 8010b5a:	2301      	movs	r3, #1
 8010b5c:	e7b7      	b.n	8010ace <_dtoa_r+0x186>
 8010b5e:	9010      	str	r0, [sp, #64]	@ 0x40
 8010b60:	e7b6      	b.n	8010ad0 <_dtoa_r+0x188>
 8010b62:	9b00      	ldr	r3, [sp, #0]
 8010b64:	1bdb      	subs	r3, r3, r7
 8010b66:	9300      	str	r3, [sp, #0]
 8010b68:	427b      	negs	r3, r7
 8010b6a:	9308      	str	r3, [sp, #32]
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	930d      	str	r3, [sp, #52]	@ 0x34
 8010b70:	e7c3      	b.n	8010afa <_dtoa_r+0x1b2>
 8010b72:	2301      	movs	r3, #1
 8010b74:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010b78:	eb07 0b03 	add.w	fp, r7, r3
 8010b7c:	f10b 0301 	add.w	r3, fp, #1
 8010b80:	2b01      	cmp	r3, #1
 8010b82:	9303      	str	r3, [sp, #12]
 8010b84:	bfb8      	it	lt
 8010b86:	2301      	movlt	r3, #1
 8010b88:	e006      	b.n	8010b98 <_dtoa_r+0x250>
 8010b8a:	2301      	movs	r3, #1
 8010b8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	dd28      	ble.n	8010be6 <_dtoa_r+0x29e>
 8010b94:	469b      	mov	fp, r3
 8010b96:	9303      	str	r3, [sp, #12]
 8010b98:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8010b9c:	2100      	movs	r1, #0
 8010b9e:	2204      	movs	r2, #4
 8010ba0:	f102 0514 	add.w	r5, r2, #20
 8010ba4:	429d      	cmp	r5, r3
 8010ba6:	d926      	bls.n	8010bf6 <_dtoa_r+0x2ae>
 8010ba8:	6041      	str	r1, [r0, #4]
 8010baa:	4648      	mov	r0, r9
 8010bac:	f001 f8e8 	bl	8011d80 <_Balloc>
 8010bb0:	4682      	mov	sl, r0
 8010bb2:	2800      	cmp	r0, #0
 8010bb4:	d142      	bne.n	8010c3c <_dtoa_r+0x2f4>
 8010bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8010c30 <_dtoa_r+0x2e8>)
 8010bb8:	4602      	mov	r2, r0
 8010bba:	f240 11af 	movw	r1, #431	@ 0x1af
 8010bbe:	e6da      	b.n	8010976 <_dtoa_r+0x2e>
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	e7e3      	b.n	8010b8c <_dtoa_r+0x244>
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	e7d5      	b.n	8010b74 <_dtoa_r+0x22c>
 8010bc8:	2401      	movs	r4, #1
 8010bca:	2300      	movs	r3, #0
 8010bcc:	9307      	str	r3, [sp, #28]
 8010bce:	9409      	str	r4, [sp, #36]	@ 0x24
 8010bd0:	f04f 3bff 	mov.w	fp, #4294967295
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	f8cd b00c 	str.w	fp, [sp, #12]
 8010bda:	2312      	movs	r3, #18
 8010bdc:	920c      	str	r2, [sp, #48]	@ 0x30
 8010bde:	e7db      	b.n	8010b98 <_dtoa_r+0x250>
 8010be0:	2301      	movs	r3, #1
 8010be2:	9309      	str	r3, [sp, #36]	@ 0x24
 8010be4:	e7f4      	b.n	8010bd0 <_dtoa_r+0x288>
 8010be6:	f04f 0b01 	mov.w	fp, #1
 8010bea:	f8cd b00c 	str.w	fp, [sp, #12]
 8010bee:	465b      	mov	r3, fp
 8010bf0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8010bf4:	e7d0      	b.n	8010b98 <_dtoa_r+0x250>
 8010bf6:	3101      	adds	r1, #1
 8010bf8:	0052      	lsls	r2, r2, #1
 8010bfa:	e7d1      	b.n	8010ba0 <_dtoa_r+0x258>
 8010bfc:	f3af 8000 	nop.w
 8010c00:	636f4361 	.word	0x636f4361
 8010c04:	3fd287a7 	.word	0x3fd287a7
 8010c08:	8b60c8b3 	.word	0x8b60c8b3
 8010c0c:	3fc68a28 	.word	0x3fc68a28
 8010c10:	509f79fb 	.word	0x509f79fb
 8010c14:	3fd34413 	.word	0x3fd34413
 8010c18:	080141ea 	.word	0x080141ea
 8010c1c:	080142ac 	.word	0x080142ac
 8010c20:	7ff00000 	.word	0x7ff00000
 8010c24:	080141c7 	.word	0x080141c7
 8010c28:	3ff80000 	.word	0x3ff80000
 8010c2c:	08014568 	.word	0x08014568
 8010c30:	08014304 	.word	0x08014304
 8010c34:	080142a8 	.word	0x080142a8
 8010c38:	080141c6 	.word	0x080141c6
 8010c3c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010c40:	6018      	str	r0, [r3, #0]
 8010c42:	9b03      	ldr	r3, [sp, #12]
 8010c44:	2b0e      	cmp	r3, #14
 8010c46:	f200 80a1 	bhi.w	8010d8c <_dtoa_r+0x444>
 8010c4a:	2c00      	cmp	r4, #0
 8010c4c:	f000 809e 	beq.w	8010d8c <_dtoa_r+0x444>
 8010c50:	2f00      	cmp	r7, #0
 8010c52:	dd33      	ble.n	8010cbc <_dtoa_r+0x374>
 8010c54:	4b9c      	ldr	r3, [pc, #624]	@ (8010ec8 <_dtoa_r+0x580>)
 8010c56:	f007 020f 	and.w	r2, r7, #15
 8010c5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c5e:	ed93 7b00 	vldr	d7, [r3]
 8010c62:	05f8      	lsls	r0, r7, #23
 8010c64:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8010c68:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010c6c:	d516      	bpl.n	8010c9c <_dtoa_r+0x354>
 8010c6e:	4b97      	ldr	r3, [pc, #604]	@ (8010ecc <_dtoa_r+0x584>)
 8010c70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010c74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010c78:	f7ef fdf0 	bl	800085c <__aeabi_ddiv>
 8010c7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010c80:	f004 040f 	and.w	r4, r4, #15
 8010c84:	2603      	movs	r6, #3
 8010c86:	4d91      	ldr	r5, [pc, #580]	@ (8010ecc <_dtoa_r+0x584>)
 8010c88:	b954      	cbnz	r4, 8010ca0 <_dtoa_r+0x358>
 8010c8a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010c8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010c92:	f7ef fde3 	bl	800085c <__aeabi_ddiv>
 8010c96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010c9a:	e028      	b.n	8010cee <_dtoa_r+0x3a6>
 8010c9c:	2602      	movs	r6, #2
 8010c9e:	e7f2      	b.n	8010c86 <_dtoa_r+0x33e>
 8010ca0:	07e1      	lsls	r1, r4, #31
 8010ca2:	d508      	bpl.n	8010cb6 <_dtoa_r+0x36e>
 8010ca4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010ca8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010cac:	f7ef fcac 	bl	8000608 <__aeabi_dmul>
 8010cb0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010cb4:	3601      	adds	r6, #1
 8010cb6:	1064      	asrs	r4, r4, #1
 8010cb8:	3508      	adds	r5, #8
 8010cba:	e7e5      	b.n	8010c88 <_dtoa_r+0x340>
 8010cbc:	f000 80af 	beq.w	8010e1e <_dtoa_r+0x4d6>
 8010cc0:	427c      	negs	r4, r7
 8010cc2:	4b81      	ldr	r3, [pc, #516]	@ (8010ec8 <_dtoa_r+0x580>)
 8010cc4:	4d81      	ldr	r5, [pc, #516]	@ (8010ecc <_dtoa_r+0x584>)
 8010cc6:	f004 020f 	and.w	r2, r4, #15
 8010cca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cd2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010cd6:	f7ef fc97 	bl	8000608 <__aeabi_dmul>
 8010cda:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010cde:	1124      	asrs	r4, r4, #4
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	2602      	movs	r6, #2
 8010ce4:	2c00      	cmp	r4, #0
 8010ce6:	f040 808f 	bne.w	8010e08 <_dtoa_r+0x4c0>
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d1d3      	bne.n	8010c96 <_dtoa_r+0x34e>
 8010cee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010cf0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	f000 8094 	beq.w	8010e22 <_dtoa_r+0x4da>
 8010cfa:	4b75      	ldr	r3, [pc, #468]	@ (8010ed0 <_dtoa_r+0x588>)
 8010cfc:	2200      	movs	r2, #0
 8010cfe:	4620      	mov	r0, r4
 8010d00:	4629      	mov	r1, r5
 8010d02:	f7ef fef3 	bl	8000aec <__aeabi_dcmplt>
 8010d06:	2800      	cmp	r0, #0
 8010d08:	f000 808b 	beq.w	8010e22 <_dtoa_r+0x4da>
 8010d0c:	9b03      	ldr	r3, [sp, #12]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	f000 8087 	beq.w	8010e22 <_dtoa_r+0x4da>
 8010d14:	f1bb 0f00 	cmp.w	fp, #0
 8010d18:	dd34      	ble.n	8010d84 <_dtoa_r+0x43c>
 8010d1a:	4620      	mov	r0, r4
 8010d1c:	4b6d      	ldr	r3, [pc, #436]	@ (8010ed4 <_dtoa_r+0x58c>)
 8010d1e:	2200      	movs	r2, #0
 8010d20:	4629      	mov	r1, r5
 8010d22:	f7ef fc71 	bl	8000608 <__aeabi_dmul>
 8010d26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010d2a:	f107 38ff 	add.w	r8, r7, #4294967295
 8010d2e:	3601      	adds	r6, #1
 8010d30:	465c      	mov	r4, fp
 8010d32:	4630      	mov	r0, r6
 8010d34:	f7ef fbfe 	bl	8000534 <__aeabi_i2d>
 8010d38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010d3c:	f7ef fc64 	bl	8000608 <__aeabi_dmul>
 8010d40:	4b65      	ldr	r3, [pc, #404]	@ (8010ed8 <_dtoa_r+0x590>)
 8010d42:	2200      	movs	r2, #0
 8010d44:	f7ef faaa 	bl	800029c <__adddf3>
 8010d48:	4605      	mov	r5, r0
 8010d4a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010d4e:	2c00      	cmp	r4, #0
 8010d50:	d16a      	bne.n	8010e28 <_dtoa_r+0x4e0>
 8010d52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010d56:	4b61      	ldr	r3, [pc, #388]	@ (8010edc <_dtoa_r+0x594>)
 8010d58:	2200      	movs	r2, #0
 8010d5a:	f7ef fa9d 	bl	8000298 <__aeabi_dsub>
 8010d5e:	4602      	mov	r2, r0
 8010d60:	460b      	mov	r3, r1
 8010d62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010d66:	462a      	mov	r2, r5
 8010d68:	4633      	mov	r3, r6
 8010d6a:	f7ef fedd 	bl	8000b28 <__aeabi_dcmpgt>
 8010d6e:	2800      	cmp	r0, #0
 8010d70:	f040 8298 	bne.w	80112a4 <_dtoa_r+0x95c>
 8010d74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010d78:	462a      	mov	r2, r5
 8010d7a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010d7e:	f7ef feb5 	bl	8000aec <__aeabi_dcmplt>
 8010d82:	bb38      	cbnz	r0, 8010dd4 <_dtoa_r+0x48c>
 8010d84:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8010d88:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8010d8c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	f2c0 8157 	blt.w	8011042 <_dtoa_r+0x6fa>
 8010d94:	2f0e      	cmp	r7, #14
 8010d96:	f300 8154 	bgt.w	8011042 <_dtoa_r+0x6fa>
 8010d9a:	4b4b      	ldr	r3, [pc, #300]	@ (8010ec8 <_dtoa_r+0x580>)
 8010d9c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010da0:	ed93 7b00 	vldr	d7, [r3]
 8010da4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	ed8d 7b00 	vstr	d7, [sp]
 8010dac:	f280 80e5 	bge.w	8010f7a <_dtoa_r+0x632>
 8010db0:	9b03      	ldr	r3, [sp, #12]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	f300 80e1 	bgt.w	8010f7a <_dtoa_r+0x632>
 8010db8:	d10c      	bne.n	8010dd4 <_dtoa_r+0x48c>
 8010dba:	4b48      	ldr	r3, [pc, #288]	@ (8010edc <_dtoa_r+0x594>)
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	ec51 0b17 	vmov	r0, r1, d7
 8010dc2:	f7ef fc21 	bl	8000608 <__aeabi_dmul>
 8010dc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010dca:	f7ef fea3 	bl	8000b14 <__aeabi_dcmpge>
 8010dce:	2800      	cmp	r0, #0
 8010dd0:	f000 8266 	beq.w	80112a0 <_dtoa_r+0x958>
 8010dd4:	2400      	movs	r4, #0
 8010dd6:	4625      	mov	r5, r4
 8010dd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010dda:	4656      	mov	r6, sl
 8010ddc:	ea6f 0803 	mvn.w	r8, r3
 8010de0:	2700      	movs	r7, #0
 8010de2:	4621      	mov	r1, r4
 8010de4:	4648      	mov	r0, r9
 8010de6:	f001 f80b 	bl	8011e00 <_Bfree>
 8010dea:	2d00      	cmp	r5, #0
 8010dec:	f000 80bd 	beq.w	8010f6a <_dtoa_r+0x622>
 8010df0:	b12f      	cbz	r7, 8010dfe <_dtoa_r+0x4b6>
 8010df2:	42af      	cmp	r7, r5
 8010df4:	d003      	beq.n	8010dfe <_dtoa_r+0x4b6>
 8010df6:	4639      	mov	r1, r7
 8010df8:	4648      	mov	r0, r9
 8010dfa:	f001 f801 	bl	8011e00 <_Bfree>
 8010dfe:	4629      	mov	r1, r5
 8010e00:	4648      	mov	r0, r9
 8010e02:	f000 fffd 	bl	8011e00 <_Bfree>
 8010e06:	e0b0      	b.n	8010f6a <_dtoa_r+0x622>
 8010e08:	07e2      	lsls	r2, r4, #31
 8010e0a:	d505      	bpl.n	8010e18 <_dtoa_r+0x4d0>
 8010e0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010e10:	f7ef fbfa 	bl	8000608 <__aeabi_dmul>
 8010e14:	3601      	adds	r6, #1
 8010e16:	2301      	movs	r3, #1
 8010e18:	1064      	asrs	r4, r4, #1
 8010e1a:	3508      	adds	r5, #8
 8010e1c:	e762      	b.n	8010ce4 <_dtoa_r+0x39c>
 8010e1e:	2602      	movs	r6, #2
 8010e20:	e765      	b.n	8010cee <_dtoa_r+0x3a6>
 8010e22:	9c03      	ldr	r4, [sp, #12]
 8010e24:	46b8      	mov	r8, r7
 8010e26:	e784      	b.n	8010d32 <_dtoa_r+0x3ea>
 8010e28:	4b27      	ldr	r3, [pc, #156]	@ (8010ec8 <_dtoa_r+0x580>)
 8010e2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010e2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010e30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010e34:	4454      	add	r4, sl
 8010e36:	2900      	cmp	r1, #0
 8010e38:	d054      	beq.n	8010ee4 <_dtoa_r+0x59c>
 8010e3a:	4929      	ldr	r1, [pc, #164]	@ (8010ee0 <_dtoa_r+0x598>)
 8010e3c:	2000      	movs	r0, #0
 8010e3e:	f7ef fd0d 	bl	800085c <__aeabi_ddiv>
 8010e42:	4633      	mov	r3, r6
 8010e44:	462a      	mov	r2, r5
 8010e46:	f7ef fa27 	bl	8000298 <__aeabi_dsub>
 8010e4a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010e4e:	4656      	mov	r6, sl
 8010e50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010e54:	f7ef fe88 	bl	8000b68 <__aeabi_d2iz>
 8010e58:	4605      	mov	r5, r0
 8010e5a:	f7ef fb6b 	bl	8000534 <__aeabi_i2d>
 8010e5e:	4602      	mov	r2, r0
 8010e60:	460b      	mov	r3, r1
 8010e62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010e66:	f7ef fa17 	bl	8000298 <__aeabi_dsub>
 8010e6a:	3530      	adds	r5, #48	@ 0x30
 8010e6c:	4602      	mov	r2, r0
 8010e6e:	460b      	mov	r3, r1
 8010e70:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010e74:	f806 5b01 	strb.w	r5, [r6], #1
 8010e78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010e7c:	f7ef fe36 	bl	8000aec <__aeabi_dcmplt>
 8010e80:	2800      	cmp	r0, #0
 8010e82:	d172      	bne.n	8010f6a <_dtoa_r+0x622>
 8010e84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010e88:	4911      	ldr	r1, [pc, #68]	@ (8010ed0 <_dtoa_r+0x588>)
 8010e8a:	2000      	movs	r0, #0
 8010e8c:	f7ef fa04 	bl	8000298 <__aeabi_dsub>
 8010e90:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010e94:	f7ef fe2a 	bl	8000aec <__aeabi_dcmplt>
 8010e98:	2800      	cmp	r0, #0
 8010e9a:	f040 80b4 	bne.w	8011006 <_dtoa_r+0x6be>
 8010e9e:	42a6      	cmp	r6, r4
 8010ea0:	f43f af70 	beq.w	8010d84 <_dtoa_r+0x43c>
 8010ea4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8010ed4 <_dtoa_r+0x58c>)
 8010eaa:	2200      	movs	r2, #0
 8010eac:	f7ef fbac 	bl	8000608 <__aeabi_dmul>
 8010eb0:	4b08      	ldr	r3, [pc, #32]	@ (8010ed4 <_dtoa_r+0x58c>)
 8010eb2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010ebc:	f7ef fba4 	bl	8000608 <__aeabi_dmul>
 8010ec0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010ec4:	e7c4      	b.n	8010e50 <_dtoa_r+0x508>
 8010ec6:	bf00      	nop
 8010ec8:	08014568 	.word	0x08014568
 8010ecc:	08014540 	.word	0x08014540
 8010ed0:	3ff00000 	.word	0x3ff00000
 8010ed4:	40240000 	.word	0x40240000
 8010ed8:	401c0000 	.word	0x401c0000
 8010edc:	40140000 	.word	0x40140000
 8010ee0:	3fe00000 	.word	0x3fe00000
 8010ee4:	4631      	mov	r1, r6
 8010ee6:	4628      	mov	r0, r5
 8010ee8:	f7ef fb8e 	bl	8000608 <__aeabi_dmul>
 8010eec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010ef0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8010ef2:	4656      	mov	r6, sl
 8010ef4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010ef8:	f7ef fe36 	bl	8000b68 <__aeabi_d2iz>
 8010efc:	4605      	mov	r5, r0
 8010efe:	f7ef fb19 	bl	8000534 <__aeabi_i2d>
 8010f02:	4602      	mov	r2, r0
 8010f04:	460b      	mov	r3, r1
 8010f06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010f0a:	f7ef f9c5 	bl	8000298 <__aeabi_dsub>
 8010f0e:	3530      	adds	r5, #48	@ 0x30
 8010f10:	f806 5b01 	strb.w	r5, [r6], #1
 8010f14:	4602      	mov	r2, r0
 8010f16:	460b      	mov	r3, r1
 8010f18:	42a6      	cmp	r6, r4
 8010f1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010f1e:	f04f 0200 	mov.w	r2, #0
 8010f22:	d124      	bne.n	8010f6e <_dtoa_r+0x626>
 8010f24:	4baf      	ldr	r3, [pc, #700]	@ (80111e4 <_dtoa_r+0x89c>)
 8010f26:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010f2a:	f7ef f9b7 	bl	800029c <__adddf3>
 8010f2e:	4602      	mov	r2, r0
 8010f30:	460b      	mov	r3, r1
 8010f32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010f36:	f7ef fdf7 	bl	8000b28 <__aeabi_dcmpgt>
 8010f3a:	2800      	cmp	r0, #0
 8010f3c:	d163      	bne.n	8011006 <_dtoa_r+0x6be>
 8010f3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010f42:	49a8      	ldr	r1, [pc, #672]	@ (80111e4 <_dtoa_r+0x89c>)
 8010f44:	2000      	movs	r0, #0
 8010f46:	f7ef f9a7 	bl	8000298 <__aeabi_dsub>
 8010f4a:	4602      	mov	r2, r0
 8010f4c:	460b      	mov	r3, r1
 8010f4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010f52:	f7ef fdcb 	bl	8000aec <__aeabi_dcmplt>
 8010f56:	2800      	cmp	r0, #0
 8010f58:	f43f af14 	beq.w	8010d84 <_dtoa_r+0x43c>
 8010f5c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8010f5e:	1e73      	subs	r3, r6, #1
 8010f60:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010f62:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010f66:	2b30      	cmp	r3, #48	@ 0x30
 8010f68:	d0f8      	beq.n	8010f5c <_dtoa_r+0x614>
 8010f6a:	4647      	mov	r7, r8
 8010f6c:	e03b      	b.n	8010fe6 <_dtoa_r+0x69e>
 8010f6e:	4b9e      	ldr	r3, [pc, #632]	@ (80111e8 <_dtoa_r+0x8a0>)
 8010f70:	f7ef fb4a 	bl	8000608 <__aeabi_dmul>
 8010f74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010f78:	e7bc      	b.n	8010ef4 <_dtoa_r+0x5ac>
 8010f7a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010f7e:	4656      	mov	r6, sl
 8010f80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f84:	4620      	mov	r0, r4
 8010f86:	4629      	mov	r1, r5
 8010f88:	f7ef fc68 	bl	800085c <__aeabi_ddiv>
 8010f8c:	f7ef fdec 	bl	8000b68 <__aeabi_d2iz>
 8010f90:	4680      	mov	r8, r0
 8010f92:	f7ef facf 	bl	8000534 <__aeabi_i2d>
 8010f96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f9a:	f7ef fb35 	bl	8000608 <__aeabi_dmul>
 8010f9e:	4602      	mov	r2, r0
 8010fa0:	460b      	mov	r3, r1
 8010fa2:	4620      	mov	r0, r4
 8010fa4:	4629      	mov	r1, r5
 8010fa6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010faa:	f7ef f975 	bl	8000298 <__aeabi_dsub>
 8010fae:	f806 4b01 	strb.w	r4, [r6], #1
 8010fb2:	9d03      	ldr	r5, [sp, #12]
 8010fb4:	eba6 040a 	sub.w	r4, r6, sl
 8010fb8:	42a5      	cmp	r5, r4
 8010fba:	4602      	mov	r2, r0
 8010fbc:	460b      	mov	r3, r1
 8010fbe:	d133      	bne.n	8011028 <_dtoa_r+0x6e0>
 8010fc0:	f7ef f96c 	bl	800029c <__adddf3>
 8010fc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010fc8:	4604      	mov	r4, r0
 8010fca:	460d      	mov	r5, r1
 8010fcc:	f7ef fdac 	bl	8000b28 <__aeabi_dcmpgt>
 8010fd0:	b9c0      	cbnz	r0, 8011004 <_dtoa_r+0x6bc>
 8010fd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010fd6:	4620      	mov	r0, r4
 8010fd8:	4629      	mov	r1, r5
 8010fda:	f7ef fd7d 	bl	8000ad8 <__aeabi_dcmpeq>
 8010fde:	b110      	cbz	r0, 8010fe6 <_dtoa_r+0x69e>
 8010fe0:	f018 0f01 	tst.w	r8, #1
 8010fe4:	d10e      	bne.n	8011004 <_dtoa_r+0x6bc>
 8010fe6:	9902      	ldr	r1, [sp, #8]
 8010fe8:	4648      	mov	r0, r9
 8010fea:	f000 ff09 	bl	8011e00 <_Bfree>
 8010fee:	2300      	movs	r3, #0
 8010ff0:	7033      	strb	r3, [r6, #0]
 8010ff2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010ff4:	3701      	adds	r7, #1
 8010ff6:	601f      	str	r7, [r3, #0]
 8010ff8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	f000 824b 	beq.w	8011496 <_dtoa_r+0xb4e>
 8011000:	601e      	str	r6, [r3, #0]
 8011002:	e248      	b.n	8011496 <_dtoa_r+0xb4e>
 8011004:	46b8      	mov	r8, r7
 8011006:	4633      	mov	r3, r6
 8011008:	461e      	mov	r6, r3
 801100a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801100e:	2a39      	cmp	r2, #57	@ 0x39
 8011010:	d106      	bne.n	8011020 <_dtoa_r+0x6d8>
 8011012:	459a      	cmp	sl, r3
 8011014:	d1f8      	bne.n	8011008 <_dtoa_r+0x6c0>
 8011016:	2230      	movs	r2, #48	@ 0x30
 8011018:	f108 0801 	add.w	r8, r8, #1
 801101c:	f88a 2000 	strb.w	r2, [sl]
 8011020:	781a      	ldrb	r2, [r3, #0]
 8011022:	3201      	adds	r2, #1
 8011024:	701a      	strb	r2, [r3, #0]
 8011026:	e7a0      	b.n	8010f6a <_dtoa_r+0x622>
 8011028:	4b6f      	ldr	r3, [pc, #444]	@ (80111e8 <_dtoa_r+0x8a0>)
 801102a:	2200      	movs	r2, #0
 801102c:	f7ef faec 	bl	8000608 <__aeabi_dmul>
 8011030:	2200      	movs	r2, #0
 8011032:	2300      	movs	r3, #0
 8011034:	4604      	mov	r4, r0
 8011036:	460d      	mov	r5, r1
 8011038:	f7ef fd4e 	bl	8000ad8 <__aeabi_dcmpeq>
 801103c:	2800      	cmp	r0, #0
 801103e:	d09f      	beq.n	8010f80 <_dtoa_r+0x638>
 8011040:	e7d1      	b.n	8010fe6 <_dtoa_r+0x69e>
 8011042:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011044:	2a00      	cmp	r2, #0
 8011046:	f000 80ea 	beq.w	801121e <_dtoa_r+0x8d6>
 801104a:	9a07      	ldr	r2, [sp, #28]
 801104c:	2a01      	cmp	r2, #1
 801104e:	f300 80cd 	bgt.w	80111ec <_dtoa_r+0x8a4>
 8011052:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8011054:	2a00      	cmp	r2, #0
 8011056:	f000 80c1 	beq.w	80111dc <_dtoa_r+0x894>
 801105a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801105e:	9c08      	ldr	r4, [sp, #32]
 8011060:	9e00      	ldr	r6, [sp, #0]
 8011062:	9a00      	ldr	r2, [sp, #0]
 8011064:	441a      	add	r2, r3
 8011066:	9200      	str	r2, [sp, #0]
 8011068:	9a06      	ldr	r2, [sp, #24]
 801106a:	2101      	movs	r1, #1
 801106c:	441a      	add	r2, r3
 801106e:	4648      	mov	r0, r9
 8011070:	9206      	str	r2, [sp, #24]
 8011072:	f000 ffc3 	bl	8011ffc <__i2b>
 8011076:	4605      	mov	r5, r0
 8011078:	b166      	cbz	r6, 8011094 <_dtoa_r+0x74c>
 801107a:	9b06      	ldr	r3, [sp, #24]
 801107c:	2b00      	cmp	r3, #0
 801107e:	dd09      	ble.n	8011094 <_dtoa_r+0x74c>
 8011080:	42b3      	cmp	r3, r6
 8011082:	9a00      	ldr	r2, [sp, #0]
 8011084:	bfa8      	it	ge
 8011086:	4633      	movge	r3, r6
 8011088:	1ad2      	subs	r2, r2, r3
 801108a:	9200      	str	r2, [sp, #0]
 801108c:	9a06      	ldr	r2, [sp, #24]
 801108e:	1af6      	subs	r6, r6, r3
 8011090:	1ad3      	subs	r3, r2, r3
 8011092:	9306      	str	r3, [sp, #24]
 8011094:	9b08      	ldr	r3, [sp, #32]
 8011096:	b30b      	cbz	r3, 80110dc <_dtoa_r+0x794>
 8011098:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801109a:	2b00      	cmp	r3, #0
 801109c:	f000 80c6 	beq.w	801122c <_dtoa_r+0x8e4>
 80110a0:	2c00      	cmp	r4, #0
 80110a2:	f000 80c0 	beq.w	8011226 <_dtoa_r+0x8de>
 80110a6:	4629      	mov	r1, r5
 80110a8:	4622      	mov	r2, r4
 80110aa:	4648      	mov	r0, r9
 80110ac:	f001 f85e 	bl	801216c <__pow5mult>
 80110b0:	9a02      	ldr	r2, [sp, #8]
 80110b2:	4601      	mov	r1, r0
 80110b4:	4605      	mov	r5, r0
 80110b6:	4648      	mov	r0, r9
 80110b8:	f000 ffb6 	bl	8012028 <__multiply>
 80110bc:	9902      	ldr	r1, [sp, #8]
 80110be:	4680      	mov	r8, r0
 80110c0:	4648      	mov	r0, r9
 80110c2:	f000 fe9d 	bl	8011e00 <_Bfree>
 80110c6:	9b08      	ldr	r3, [sp, #32]
 80110c8:	1b1b      	subs	r3, r3, r4
 80110ca:	9308      	str	r3, [sp, #32]
 80110cc:	f000 80b1 	beq.w	8011232 <_dtoa_r+0x8ea>
 80110d0:	9a08      	ldr	r2, [sp, #32]
 80110d2:	4641      	mov	r1, r8
 80110d4:	4648      	mov	r0, r9
 80110d6:	f001 f849 	bl	801216c <__pow5mult>
 80110da:	9002      	str	r0, [sp, #8]
 80110dc:	2101      	movs	r1, #1
 80110de:	4648      	mov	r0, r9
 80110e0:	f000 ff8c 	bl	8011ffc <__i2b>
 80110e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80110e6:	4604      	mov	r4, r0
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	f000 81d8 	beq.w	801149e <_dtoa_r+0xb56>
 80110ee:	461a      	mov	r2, r3
 80110f0:	4601      	mov	r1, r0
 80110f2:	4648      	mov	r0, r9
 80110f4:	f001 f83a 	bl	801216c <__pow5mult>
 80110f8:	9b07      	ldr	r3, [sp, #28]
 80110fa:	2b01      	cmp	r3, #1
 80110fc:	4604      	mov	r4, r0
 80110fe:	f300 809f 	bgt.w	8011240 <_dtoa_r+0x8f8>
 8011102:	9b04      	ldr	r3, [sp, #16]
 8011104:	2b00      	cmp	r3, #0
 8011106:	f040 8097 	bne.w	8011238 <_dtoa_r+0x8f0>
 801110a:	9b05      	ldr	r3, [sp, #20]
 801110c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011110:	2b00      	cmp	r3, #0
 8011112:	f040 8093 	bne.w	801123c <_dtoa_r+0x8f4>
 8011116:	9b05      	ldr	r3, [sp, #20]
 8011118:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801111c:	0d1b      	lsrs	r3, r3, #20
 801111e:	051b      	lsls	r3, r3, #20
 8011120:	b133      	cbz	r3, 8011130 <_dtoa_r+0x7e8>
 8011122:	9b00      	ldr	r3, [sp, #0]
 8011124:	3301      	adds	r3, #1
 8011126:	9300      	str	r3, [sp, #0]
 8011128:	9b06      	ldr	r3, [sp, #24]
 801112a:	3301      	adds	r3, #1
 801112c:	9306      	str	r3, [sp, #24]
 801112e:	2301      	movs	r3, #1
 8011130:	9308      	str	r3, [sp, #32]
 8011132:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011134:	2b00      	cmp	r3, #0
 8011136:	f000 81b8 	beq.w	80114aa <_dtoa_r+0xb62>
 801113a:	6923      	ldr	r3, [r4, #16]
 801113c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011140:	6918      	ldr	r0, [r3, #16]
 8011142:	f000 ff0f 	bl	8011f64 <__hi0bits>
 8011146:	f1c0 0020 	rsb	r0, r0, #32
 801114a:	9b06      	ldr	r3, [sp, #24]
 801114c:	4418      	add	r0, r3
 801114e:	f010 001f 	ands.w	r0, r0, #31
 8011152:	f000 8082 	beq.w	801125a <_dtoa_r+0x912>
 8011156:	f1c0 0320 	rsb	r3, r0, #32
 801115a:	2b04      	cmp	r3, #4
 801115c:	dd73      	ble.n	8011246 <_dtoa_r+0x8fe>
 801115e:	9b00      	ldr	r3, [sp, #0]
 8011160:	f1c0 001c 	rsb	r0, r0, #28
 8011164:	4403      	add	r3, r0
 8011166:	9300      	str	r3, [sp, #0]
 8011168:	9b06      	ldr	r3, [sp, #24]
 801116a:	4403      	add	r3, r0
 801116c:	4406      	add	r6, r0
 801116e:	9306      	str	r3, [sp, #24]
 8011170:	9b00      	ldr	r3, [sp, #0]
 8011172:	2b00      	cmp	r3, #0
 8011174:	dd05      	ble.n	8011182 <_dtoa_r+0x83a>
 8011176:	9902      	ldr	r1, [sp, #8]
 8011178:	461a      	mov	r2, r3
 801117a:	4648      	mov	r0, r9
 801117c:	f001 f850 	bl	8012220 <__lshift>
 8011180:	9002      	str	r0, [sp, #8]
 8011182:	9b06      	ldr	r3, [sp, #24]
 8011184:	2b00      	cmp	r3, #0
 8011186:	dd05      	ble.n	8011194 <_dtoa_r+0x84c>
 8011188:	4621      	mov	r1, r4
 801118a:	461a      	mov	r2, r3
 801118c:	4648      	mov	r0, r9
 801118e:	f001 f847 	bl	8012220 <__lshift>
 8011192:	4604      	mov	r4, r0
 8011194:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011196:	2b00      	cmp	r3, #0
 8011198:	d061      	beq.n	801125e <_dtoa_r+0x916>
 801119a:	9802      	ldr	r0, [sp, #8]
 801119c:	4621      	mov	r1, r4
 801119e:	f001 f8ab 	bl	80122f8 <__mcmp>
 80111a2:	2800      	cmp	r0, #0
 80111a4:	da5b      	bge.n	801125e <_dtoa_r+0x916>
 80111a6:	2300      	movs	r3, #0
 80111a8:	9902      	ldr	r1, [sp, #8]
 80111aa:	220a      	movs	r2, #10
 80111ac:	4648      	mov	r0, r9
 80111ae:	f000 fe49 	bl	8011e44 <__multadd>
 80111b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111b4:	9002      	str	r0, [sp, #8]
 80111b6:	f107 38ff 	add.w	r8, r7, #4294967295
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	f000 8177 	beq.w	80114ae <_dtoa_r+0xb66>
 80111c0:	4629      	mov	r1, r5
 80111c2:	2300      	movs	r3, #0
 80111c4:	220a      	movs	r2, #10
 80111c6:	4648      	mov	r0, r9
 80111c8:	f000 fe3c 	bl	8011e44 <__multadd>
 80111cc:	f1bb 0f00 	cmp.w	fp, #0
 80111d0:	4605      	mov	r5, r0
 80111d2:	dc6f      	bgt.n	80112b4 <_dtoa_r+0x96c>
 80111d4:	9b07      	ldr	r3, [sp, #28]
 80111d6:	2b02      	cmp	r3, #2
 80111d8:	dc49      	bgt.n	801126e <_dtoa_r+0x926>
 80111da:	e06b      	b.n	80112b4 <_dtoa_r+0x96c>
 80111dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80111de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80111e2:	e73c      	b.n	801105e <_dtoa_r+0x716>
 80111e4:	3fe00000 	.word	0x3fe00000
 80111e8:	40240000 	.word	0x40240000
 80111ec:	9b03      	ldr	r3, [sp, #12]
 80111ee:	1e5c      	subs	r4, r3, #1
 80111f0:	9b08      	ldr	r3, [sp, #32]
 80111f2:	42a3      	cmp	r3, r4
 80111f4:	db09      	blt.n	801120a <_dtoa_r+0x8c2>
 80111f6:	1b1c      	subs	r4, r3, r4
 80111f8:	9b03      	ldr	r3, [sp, #12]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	f6bf af30 	bge.w	8011060 <_dtoa_r+0x718>
 8011200:	9b00      	ldr	r3, [sp, #0]
 8011202:	9a03      	ldr	r2, [sp, #12]
 8011204:	1a9e      	subs	r6, r3, r2
 8011206:	2300      	movs	r3, #0
 8011208:	e72b      	b.n	8011062 <_dtoa_r+0x71a>
 801120a:	9b08      	ldr	r3, [sp, #32]
 801120c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801120e:	9408      	str	r4, [sp, #32]
 8011210:	1ae3      	subs	r3, r4, r3
 8011212:	441a      	add	r2, r3
 8011214:	9e00      	ldr	r6, [sp, #0]
 8011216:	9b03      	ldr	r3, [sp, #12]
 8011218:	920d      	str	r2, [sp, #52]	@ 0x34
 801121a:	2400      	movs	r4, #0
 801121c:	e721      	b.n	8011062 <_dtoa_r+0x71a>
 801121e:	9c08      	ldr	r4, [sp, #32]
 8011220:	9e00      	ldr	r6, [sp, #0]
 8011222:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8011224:	e728      	b.n	8011078 <_dtoa_r+0x730>
 8011226:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801122a:	e751      	b.n	80110d0 <_dtoa_r+0x788>
 801122c:	9a08      	ldr	r2, [sp, #32]
 801122e:	9902      	ldr	r1, [sp, #8]
 8011230:	e750      	b.n	80110d4 <_dtoa_r+0x78c>
 8011232:	f8cd 8008 	str.w	r8, [sp, #8]
 8011236:	e751      	b.n	80110dc <_dtoa_r+0x794>
 8011238:	2300      	movs	r3, #0
 801123a:	e779      	b.n	8011130 <_dtoa_r+0x7e8>
 801123c:	9b04      	ldr	r3, [sp, #16]
 801123e:	e777      	b.n	8011130 <_dtoa_r+0x7e8>
 8011240:	2300      	movs	r3, #0
 8011242:	9308      	str	r3, [sp, #32]
 8011244:	e779      	b.n	801113a <_dtoa_r+0x7f2>
 8011246:	d093      	beq.n	8011170 <_dtoa_r+0x828>
 8011248:	9a00      	ldr	r2, [sp, #0]
 801124a:	331c      	adds	r3, #28
 801124c:	441a      	add	r2, r3
 801124e:	9200      	str	r2, [sp, #0]
 8011250:	9a06      	ldr	r2, [sp, #24]
 8011252:	441a      	add	r2, r3
 8011254:	441e      	add	r6, r3
 8011256:	9206      	str	r2, [sp, #24]
 8011258:	e78a      	b.n	8011170 <_dtoa_r+0x828>
 801125a:	4603      	mov	r3, r0
 801125c:	e7f4      	b.n	8011248 <_dtoa_r+0x900>
 801125e:	9b03      	ldr	r3, [sp, #12]
 8011260:	2b00      	cmp	r3, #0
 8011262:	46b8      	mov	r8, r7
 8011264:	dc20      	bgt.n	80112a8 <_dtoa_r+0x960>
 8011266:	469b      	mov	fp, r3
 8011268:	9b07      	ldr	r3, [sp, #28]
 801126a:	2b02      	cmp	r3, #2
 801126c:	dd1e      	ble.n	80112ac <_dtoa_r+0x964>
 801126e:	f1bb 0f00 	cmp.w	fp, #0
 8011272:	f47f adb1 	bne.w	8010dd8 <_dtoa_r+0x490>
 8011276:	4621      	mov	r1, r4
 8011278:	465b      	mov	r3, fp
 801127a:	2205      	movs	r2, #5
 801127c:	4648      	mov	r0, r9
 801127e:	f000 fde1 	bl	8011e44 <__multadd>
 8011282:	4601      	mov	r1, r0
 8011284:	4604      	mov	r4, r0
 8011286:	9802      	ldr	r0, [sp, #8]
 8011288:	f001 f836 	bl	80122f8 <__mcmp>
 801128c:	2800      	cmp	r0, #0
 801128e:	f77f ada3 	ble.w	8010dd8 <_dtoa_r+0x490>
 8011292:	4656      	mov	r6, sl
 8011294:	2331      	movs	r3, #49	@ 0x31
 8011296:	f806 3b01 	strb.w	r3, [r6], #1
 801129a:	f108 0801 	add.w	r8, r8, #1
 801129e:	e59f      	b.n	8010de0 <_dtoa_r+0x498>
 80112a0:	9c03      	ldr	r4, [sp, #12]
 80112a2:	46b8      	mov	r8, r7
 80112a4:	4625      	mov	r5, r4
 80112a6:	e7f4      	b.n	8011292 <_dtoa_r+0x94a>
 80112a8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80112ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	f000 8101 	beq.w	80114b6 <_dtoa_r+0xb6e>
 80112b4:	2e00      	cmp	r6, #0
 80112b6:	dd05      	ble.n	80112c4 <_dtoa_r+0x97c>
 80112b8:	4629      	mov	r1, r5
 80112ba:	4632      	mov	r2, r6
 80112bc:	4648      	mov	r0, r9
 80112be:	f000 ffaf 	bl	8012220 <__lshift>
 80112c2:	4605      	mov	r5, r0
 80112c4:	9b08      	ldr	r3, [sp, #32]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d05c      	beq.n	8011384 <_dtoa_r+0xa3c>
 80112ca:	6869      	ldr	r1, [r5, #4]
 80112cc:	4648      	mov	r0, r9
 80112ce:	f000 fd57 	bl	8011d80 <_Balloc>
 80112d2:	4606      	mov	r6, r0
 80112d4:	b928      	cbnz	r0, 80112e2 <_dtoa_r+0x99a>
 80112d6:	4b82      	ldr	r3, [pc, #520]	@ (80114e0 <_dtoa_r+0xb98>)
 80112d8:	4602      	mov	r2, r0
 80112da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80112de:	f7ff bb4a 	b.w	8010976 <_dtoa_r+0x2e>
 80112e2:	692a      	ldr	r2, [r5, #16]
 80112e4:	3202      	adds	r2, #2
 80112e6:	0092      	lsls	r2, r2, #2
 80112e8:	f105 010c 	add.w	r1, r5, #12
 80112ec:	300c      	adds	r0, #12
 80112ee:	f7ff fa6c 	bl	80107ca <memcpy>
 80112f2:	2201      	movs	r2, #1
 80112f4:	4631      	mov	r1, r6
 80112f6:	4648      	mov	r0, r9
 80112f8:	f000 ff92 	bl	8012220 <__lshift>
 80112fc:	f10a 0301 	add.w	r3, sl, #1
 8011300:	9300      	str	r3, [sp, #0]
 8011302:	eb0a 030b 	add.w	r3, sl, fp
 8011306:	9308      	str	r3, [sp, #32]
 8011308:	9b04      	ldr	r3, [sp, #16]
 801130a:	f003 0301 	and.w	r3, r3, #1
 801130e:	462f      	mov	r7, r5
 8011310:	9306      	str	r3, [sp, #24]
 8011312:	4605      	mov	r5, r0
 8011314:	9b00      	ldr	r3, [sp, #0]
 8011316:	9802      	ldr	r0, [sp, #8]
 8011318:	4621      	mov	r1, r4
 801131a:	f103 3bff 	add.w	fp, r3, #4294967295
 801131e:	f7ff fa89 	bl	8010834 <quorem>
 8011322:	4603      	mov	r3, r0
 8011324:	3330      	adds	r3, #48	@ 0x30
 8011326:	9003      	str	r0, [sp, #12]
 8011328:	4639      	mov	r1, r7
 801132a:	9802      	ldr	r0, [sp, #8]
 801132c:	9309      	str	r3, [sp, #36]	@ 0x24
 801132e:	f000 ffe3 	bl	80122f8 <__mcmp>
 8011332:	462a      	mov	r2, r5
 8011334:	9004      	str	r0, [sp, #16]
 8011336:	4621      	mov	r1, r4
 8011338:	4648      	mov	r0, r9
 801133a:	f000 fff9 	bl	8012330 <__mdiff>
 801133e:	68c2      	ldr	r2, [r0, #12]
 8011340:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011342:	4606      	mov	r6, r0
 8011344:	bb02      	cbnz	r2, 8011388 <_dtoa_r+0xa40>
 8011346:	4601      	mov	r1, r0
 8011348:	9802      	ldr	r0, [sp, #8]
 801134a:	f000 ffd5 	bl	80122f8 <__mcmp>
 801134e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011350:	4602      	mov	r2, r0
 8011352:	4631      	mov	r1, r6
 8011354:	4648      	mov	r0, r9
 8011356:	920c      	str	r2, [sp, #48]	@ 0x30
 8011358:	9309      	str	r3, [sp, #36]	@ 0x24
 801135a:	f000 fd51 	bl	8011e00 <_Bfree>
 801135e:	9b07      	ldr	r3, [sp, #28]
 8011360:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011362:	9e00      	ldr	r6, [sp, #0]
 8011364:	ea42 0103 	orr.w	r1, r2, r3
 8011368:	9b06      	ldr	r3, [sp, #24]
 801136a:	4319      	orrs	r1, r3
 801136c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801136e:	d10d      	bne.n	801138c <_dtoa_r+0xa44>
 8011370:	2b39      	cmp	r3, #57	@ 0x39
 8011372:	d027      	beq.n	80113c4 <_dtoa_r+0xa7c>
 8011374:	9a04      	ldr	r2, [sp, #16]
 8011376:	2a00      	cmp	r2, #0
 8011378:	dd01      	ble.n	801137e <_dtoa_r+0xa36>
 801137a:	9b03      	ldr	r3, [sp, #12]
 801137c:	3331      	adds	r3, #49	@ 0x31
 801137e:	f88b 3000 	strb.w	r3, [fp]
 8011382:	e52e      	b.n	8010de2 <_dtoa_r+0x49a>
 8011384:	4628      	mov	r0, r5
 8011386:	e7b9      	b.n	80112fc <_dtoa_r+0x9b4>
 8011388:	2201      	movs	r2, #1
 801138a:	e7e2      	b.n	8011352 <_dtoa_r+0xa0a>
 801138c:	9904      	ldr	r1, [sp, #16]
 801138e:	2900      	cmp	r1, #0
 8011390:	db04      	blt.n	801139c <_dtoa_r+0xa54>
 8011392:	9807      	ldr	r0, [sp, #28]
 8011394:	4301      	orrs	r1, r0
 8011396:	9806      	ldr	r0, [sp, #24]
 8011398:	4301      	orrs	r1, r0
 801139a:	d120      	bne.n	80113de <_dtoa_r+0xa96>
 801139c:	2a00      	cmp	r2, #0
 801139e:	ddee      	ble.n	801137e <_dtoa_r+0xa36>
 80113a0:	9902      	ldr	r1, [sp, #8]
 80113a2:	9300      	str	r3, [sp, #0]
 80113a4:	2201      	movs	r2, #1
 80113a6:	4648      	mov	r0, r9
 80113a8:	f000 ff3a 	bl	8012220 <__lshift>
 80113ac:	4621      	mov	r1, r4
 80113ae:	9002      	str	r0, [sp, #8]
 80113b0:	f000 ffa2 	bl	80122f8 <__mcmp>
 80113b4:	2800      	cmp	r0, #0
 80113b6:	9b00      	ldr	r3, [sp, #0]
 80113b8:	dc02      	bgt.n	80113c0 <_dtoa_r+0xa78>
 80113ba:	d1e0      	bne.n	801137e <_dtoa_r+0xa36>
 80113bc:	07da      	lsls	r2, r3, #31
 80113be:	d5de      	bpl.n	801137e <_dtoa_r+0xa36>
 80113c0:	2b39      	cmp	r3, #57	@ 0x39
 80113c2:	d1da      	bne.n	801137a <_dtoa_r+0xa32>
 80113c4:	2339      	movs	r3, #57	@ 0x39
 80113c6:	f88b 3000 	strb.w	r3, [fp]
 80113ca:	4633      	mov	r3, r6
 80113cc:	461e      	mov	r6, r3
 80113ce:	3b01      	subs	r3, #1
 80113d0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80113d4:	2a39      	cmp	r2, #57	@ 0x39
 80113d6:	d04e      	beq.n	8011476 <_dtoa_r+0xb2e>
 80113d8:	3201      	adds	r2, #1
 80113da:	701a      	strb	r2, [r3, #0]
 80113dc:	e501      	b.n	8010de2 <_dtoa_r+0x49a>
 80113de:	2a00      	cmp	r2, #0
 80113e0:	dd03      	ble.n	80113ea <_dtoa_r+0xaa2>
 80113e2:	2b39      	cmp	r3, #57	@ 0x39
 80113e4:	d0ee      	beq.n	80113c4 <_dtoa_r+0xa7c>
 80113e6:	3301      	adds	r3, #1
 80113e8:	e7c9      	b.n	801137e <_dtoa_r+0xa36>
 80113ea:	9a00      	ldr	r2, [sp, #0]
 80113ec:	9908      	ldr	r1, [sp, #32]
 80113ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 80113f2:	428a      	cmp	r2, r1
 80113f4:	d028      	beq.n	8011448 <_dtoa_r+0xb00>
 80113f6:	9902      	ldr	r1, [sp, #8]
 80113f8:	2300      	movs	r3, #0
 80113fa:	220a      	movs	r2, #10
 80113fc:	4648      	mov	r0, r9
 80113fe:	f000 fd21 	bl	8011e44 <__multadd>
 8011402:	42af      	cmp	r7, r5
 8011404:	9002      	str	r0, [sp, #8]
 8011406:	f04f 0300 	mov.w	r3, #0
 801140a:	f04f 020a 	mov.w	r2, #10
 801140e:	4639      	mov	r1, r7
 8011410:	4648      	mov	r0, r9
 8011412:	d107      	bne.n	8011424 <_dtoa_r+0xadc>
 8011414:	f000 fd16 	bl	8011e44 <__multadd>
 8011418:	4607      	mov	r7, r0
 801141a:	4605      	mov	r5, r0
 801141c:	9b00      	ldr	r3, [sp, #0]
 801141e:	3301      	adds	r3, #1
 8011420:	9300      	str	r3, [sp, #0]
 8011422:	e777      	b.n	8011314 <_dtoa_r+0x9cc>
 8011424:	f000 fd0e 	bl	8011e44 <__multadd>
 8011428:	4629      	mov	r1, r5
 801142a:	4607      	mov	r7, r0
 801142c:	2300      	movs	r3, #0
 801142e:	220a      	movs	r2, #10
 8011430:	4648      	mov	r0, r9
 8011432:	f000 fd07 	bl	8011e44 <__multadd>
 8011436:	4605      	mov	r5, r0
 8011438:	e7f0      	b.n	801141c <_dtoa_r+0xad4>
 801143a:	f1bb 0f00 	cmp.w	fp, #0
 801143e:	bfcc      	ite	gt
 8011440:	465e      	movgt	r6, fp
 8011442:	2601      	movle	r6, #1
 8011444:	4456      	add	r6, sl
 8011446:	2700      	movs	r7, #0
 8011448:	9902      	ldr	r1, [sp, #8]
 801144a:	9300      	str	r3, [sp, #0]
 801144c:	2201      	movs	r2, #1
 801144e:	4648      	mov	r0, r9
 8011450:	f000 fee6 	bl	8012220 <__lshift>
 8011454:	4621      	mov	r1, r4
 8011456:	9002      	str	r0, [sp, #8]
 8011458:	f000 ff4e 	bl	80122f8 <__mcmp>
 801145c:	2800      	cmp	r0, #0
 801145e:	dcb4      	bgt.n	80113ca <_dtoa_r+0xa82>
 8011460:	d102      	bne.n	8011468 <_dtoa_r+0xb20>
 8011462:	9b00      	ldr	r3, [sp, #0]
 8011464:	07db      	lsls	r3, r3, #31
 8011466:	d4b0      	bmi.n	80113ca <_dtoa_r+0xa82>
 8011468:	4633      	mov	r3, r6
 801146a:	461e      	mov	r6, r3
 801146c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011470:	2a30      	cmp	r2, #48	@ 0x30
 8011472:	d0fa      	beq.n	801146a <_dtoa_r+0xb22>
 8011474:	e4b5      	b.n	8010de2 <_dtoa_r+0x49a>
 8011476:	459a      	cmp	sl, r3
 8011478:	d1a8      	bne.n	80113cc <_dtoa_r+0xa84>
 801147a:	2331      	movs	r3, #49	@ 0x31
 801147c:	f108 0801 	add.w	r8, r8, #1
 8011480:	f88a 3000 	strb.w	r3, [sl]
 8011484:	e4ad      	b.n	8010de2 <_dtoa_r+0x49a>
 8011486:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011488:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80114e4 <_dtoa_r+0xb9c>
 801148c:	b11b      	cbz	r3, 8011496 <_dtoa_r+0xb4e>
 801148e:	f10a 0308 	add.w	r3, sl, #8
 8011492:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011494:	6013      	str	r3, [r2, #0]
 8011496:	4650      	mov	r0, sl
 8011498:	b017      	add	sp, #92	@ 0x5c
 801149a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801149e:	9b07      	ldr	r3, [sp, #28]
 80114a0:	2b01      	cmp	r3, #1
 80114a2:	f77f ae2e 	ble.w	8011102 <_dtoa_r+0x7ba>
 80114a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80114a8:	9308      	str	r3, [sp, #32]
 80114aa:	2001      	movs	r0, #1
 80114ac:	e64d      	b.n	801114a <_dtoa_r+0x802>
 80114ae:	f1bb 0f00 	cmp.w	fp, #0
 80114b2:	f77f aed9 	ble.w	8011268 <_dtoa_r+0x920>
 80114b6:	4656      	mov	r6, sl
 80114b8:	9802      	ldr	r0, [sp, #8]
 80114ba:	4621      	mov	r1, r4
 80114bc:	f7ff f9ba 	bl	8010834 <quorem>
 80114c0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80114c4:	f806 3b01 	strb.w	r3, [r6], #1
 80114c8:	eba6 020a 	sub.w	r2, r6, sl
 80114cc:	4593      	cmp	fp, r2
 80114ce:	ddb4      	ble.n	801143a <_dtoa_r+0xaf2>
 80114d0:	9902      	ldr	r1, [sp, #8]
 80114d2:	2300      	movs	r3, #0
 80114d4:	220a      	movs	r2, #10
 80114d6:	4648      	mov	r0, r9
 80114d8:	f000 fcb4 	bl	8011e44 <__multadd>
 80114dc:	9002      	str	r0, [sp, #8]
 80114de:	e7eb      	b.n	80114b8 <_dtoa_r+0xb70>
 80114e0:	08014304 	.word	0x08014304
 80114e4:	0801429f 	.word	0x0801429f

080114e8 <_free_r>:
 80114e8:	b538      	push	{r3, r4, r5, lr}
 80114ea:	4605      	mov	r5, r0
 80114ec:	2900      	cmp	r1, #0
 80114ee:	d041      	beq.n	8011574 <_free_r+0x8c>
 80114f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80114f4:	1f0c      	subs	r4, r1, #4
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	bfb8      	it	lt
 80114fa:	18e4      	addlt	r4, r4, r3
 80114fc:	f000 fc34 	bl	8011d68 <__malloc_lock>
 8011500:	4a1d      	ldr	r2, [pc, #116]	@ (8011578 <_free_r+0x90>)
 8011502:	6813      	ldr	r3, [r2, #0]
 8011504:	b933      	cbnz	r3, 8011514 <_free_r+0x2c>
 8011506:	6063      	str	r3, [r4, #4]
 8011508:	6014      	str	r4, [r2, #0]
 801150a:	4628      	mov	r0, r5
 801150c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011510:	f000 bc30 	b.w	8011d74 <__malloc_unlock>
 8011514:	42a3      	cmp	r3, r4
 8011516:	d908      	bls.n	801152a <_free_r+0x42>
 8011518:	6820      	ldr	r0, [r4, #0]
 801151a:	1821      	adds	r1, r4, r0
 801151c:	428b      	cmp	r3, r1
 801151e:	bf01      	itttt	eq
 8011520:	6819      	ldreq	r1, [r3, #0]
 8011522:	685b      	ldreq	r3, [r3, #4]
 8011524:	1809      	addeq	r1, r1, r0
 8011526:	6021      	streq	r1, [r4, #0]
 8011528:	e7ed      	b.n	8011506 <_free_r+0x1e>
 801152a:	461a      	mov	r2, r3
 801152c:	685b      	ldr	r3, [r3, #4]
 801152e:	b10b      	cbz	r3, 8011534 <_free_r+0x4c>
 8011530:	42a3      	cmp	r3, r4
 8011532:	d9fa      	bls.n	801152a <_free_r+0x42>
 8011534:	6811      	ldr	r1, [r2, #0]
 8011536:	1850      	adds	r0, r2, r1
 8011538:	42a0      	cmp	r0, r4
 801153a:	d10b      	bne.n	8011554 <_free_r+0x6c>
 801153c:	6820      	ldr	r0, [r4, #0]
 801153e:	4401      	add	r1, r0
 8011540:	1850      	adds	r0, r2, r1
 8011542:	4283      	cmp	r3, r0
 8011544:	6011      	str	r1, [r2, #0]
 8011546:	d1e0      	bne.n	801150a <_free_r+0x22>
 8011548:	6818      	ldr	r0, [r3, #0]
 801154a:	685b      	ldr	r3, [r3, #4]
 801154c:	6053      	str	r3, [r2, #4]
 801154e:	4408      	add	r0, r1
 8011550:	6010      	str	r0, [r2, #0]
 8011552:	e7da      	b.n	801150a <_free_r+0x22>
 8011554:	d902      	bls.n	801155c <_free_r+0x74>
 8011556:	230c      	movs	r3, #12
 8011558:	602b      	str	r3, [r5, #0]
 801155a:	e7d6      	b.n	801150a <_free_r+0x22>
 801155c:	6820      	ldr	r0, [r4, #0]
 801155e:	1821      	adds	r1, r4, r0
 8011560:	428b      	cmp	r3, r1
 8011562:	bf04      	itt	eq
 8011564:	6819      	ldreq	r1, [r3, #0]
 8011566:	685b      	ldreq	r3, [r3, #4]
 8011568:	6063      	str	r3, [r4, #4]
 801156a:	bf04      	itt	eq
 801156c:	1809      	addeq	r1, r1, r0
 801156e:	6021      	streq	r1, [r4, #0]
 8011570:	6054      	str	r4, [r2, #4]
 8011572:	e7ca      	b.n	801150a <_free_r+0x22>
 8011574:	bd38      	pop	{r3, r4, r5, pc}
 8011576:	bf00      	nop
 8011578:	20005d78 	.word	0x20005d78

0801157c <rshift>:
 801157c:	6903      	ldr	r3, [r0, #16]
 801157e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011582:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011586:	ea4f 1261 	mov.w	r2, r1, asr #5
 801158a:	f100 0414 	add.w	r4, r0, #20
 801158e:	dd45      	ble.n	801161c <rshift+0xa0>
 8011590:	f011 011f 	ands.w	r1, r1, #31
 8011594:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011598:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801159c:	d10c      	bne.n	80115b8 <rshift+0x3c>
 801159e:	f100 0710 	add.w	r7, r0, #16
 80115a2:	4629      	mov	r1, r5
 80115a4:	42b1      	cmp	r1, r6
 80115a6:	d334      	bcc.n	8011612 <rshift+0x96>
 80115a8:	1a9b      	subs	r3, r3, r2
 80115aa:	009b      	lsls	r3, r3, #2
 80115ac:	1eea      	subs	r2, r5, #3
 80115ae:	4296      	cmp	r6, r2
 80115b0:	bf38      	it	cc
 80115b2:	2300      	movcc	r3, #0
 80115b4:	4423      	add	r3, r4
 80115b6:	e015      	b.n	80115e4 <rshift+0x68>
 80115b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80115bc:	f1c1 0820 	rsb	r8, r1, #32
 80115c0:	40cf      	lsrs	r7, r1
 80115c2:	f105 0e04 	add.w	lr, r5, #4
 80115c6:	46a1      	mov	r9, r4
 80115c8:	4576      	cmp	r6, lr
 80115ca:	46f4      	mov	ip, lr
 80115cc:	d815      	bhi.n	80115fa <rshift+0x7e>
 80115ce:	1a9a      	subs	r2, r3, r2
 80115d0:	0092      	lsls	r2, r2, #2
 80115d2:	3a04      	subs	r2, #4
 80115d4:	3501      	adds	r5, #1
 80115d6:	42ae      	cmp	r6, r5
 80115d8:	bf38      	it	cc
 80115da:	2200      	movcc	r2, #0
 80115dc:	18a3      	adds	r3, r4, r2
 80115de:	50a7      	str	r7, [r4, r2]
 80115e0:	b107      	cbz	r7, 80115e4 <rshift+0x68>
 80115e2:	3304      	adds	r3, #4
 80115e4:	1b1a      	subs	r2, r3, r4
 80115e6:	42a3      	cmp	r3, r4
 80115e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80115ec:	bf08      	it	eq
 80115ee:	2300      	moveq	r3, #0
 80115f0:	6102      	str	r2, [r0, #16]
 80115f2:	bf08      	it	eq
 80115f4:	6143      	streq	r3, [r0, #20]
 80115f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115fa:	f8dc c000 	ldr.w	ip, [ip]
 80115fe:	fa0c fc08 	lsl.w	ip, ip, r8
 8011602:	ea4c 0707 	orr.w	r7, ip, r7
 8011606:	f849 7b04 	str.w	r7, [r9], #4
 801160a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801160e:	40cf      	lsrs	r7, r1
 8011610:	e7da      	b.n	80115c8 <rshift+0x4c>
 8011612:	f851 cb04 	ldr.w	ip, [r1], #4
 8011616:	f847 cf04 	str.w	ip, [r7, #4]!
 801161a:	e7c3      	b.n	80115a4 <rshift+0x28>
 801161c:	4623      	mov	r3, r4
 801161e:	e7e1      	b.n	80115e4 <rshift+0x68>

08011620 <__hexdig_fun>:
 8011620:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011624:	2b09      	cmp	r3, #9
 8011626:	d802      	bhi.n	801162e <__hexdig_fun+0xe>
 8011628:	3820      	subs	r0, #32
 801162a:	b2c0      	uxtb	r0, r0
 801162c:	4770      	bx	lr
 801162e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011632:	2b05      	cmp	r3, #5
 8011634:	d801      	bhi.n	801163a <__hexdig_fun+0x1a>
 8011636:	3847      	subs	r0, #71	@ 0x47
 8011638:	e7f7      	b.n	801162a <__hexdig_fun+0xa>
 801163a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801163e:	2b05      	cmp	r3, #5
 8011640:	d801      	bhi.n	8011646 <__hexdig_fun+0x26>
 8011642:	3827      	subs	r0, #39	@ 0x27
 8011644:	e7f1      	b.n	801162a <__hexdig_fun+0xa>
 8011646:	2000      	movs	r0, #0
 8011648:	4770      	bx	lr
	...

0801164c <__gethex>:
 801164c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011650:	b085      	sub	sp, #20
 8011652:	468a      	mov	sl, r1
 8011654:	9302      	str	r3, [sp, #8]
 8011656:	680b      	ldr	r3, [r1, #0]
 8011658:	9001      	str	r0, [sp, #4]
 801165a:	4690      	mov	r8, r2
 801165c:	1c9c      	adds	r4, r3, #2
 801165e:	46a1      	mov	r9, r4
 8011660:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011664:	2830      	cmp	r0, #48	@ 0x30
 8011666:	d0fa      	beq.n	801165e <__gethex+0x12>
 8011668:	eba9 0303 	sub.w	r3, r9, r3
 801166c:	f1a3 0b02 	sub.w	fp, r3, #2
 8011670:	f7ff ffd6 	bl	8011620 <__hexdig_fun>
 8011674:	4605      	mov	r5, r0
 8011676:	2800      	cmp	r0, #0
 8011678:	d168      	bne.n	801174c <__gethex+0x100>
 801167a:	49a0      	ldr	r1, [pc, #640]	@ (80118fc <__gethex+0x2b0>)
 801167c:	2201      	movs	r2, #1
 801167e:	4648      	mov	r0, r9
 8011680:	f7fe ff91 	bl	80105a6 <strncmp>
 8011684:	4607      	mov	r7, r0
 8011686:	2800      	cmp	r0, #0
 8011688:	d167      	bne.n	801175a <__gethex+0x10e>
 801168a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801168e:	4626      	mov	r6, r4
 8011690:	f7ff ffc6 	bl	8011620 <__hexdig_fun>
 8011694:	2800      	cmp	r0, #0
 8011696:	d062      	beq.n	801175e <__gethex+0x112>
 8011698:	4623      	mov	r3, r4
 801169a:	7818      	ldrb	r0, [r3, #0]
 801169c:	2830      	cmp	r0, #48	@ 0x30
 801169e:	4699      	mov	r9, r3
 80116a0:	f103 0301 	add.w	r3, r3, #1
 80116a4:	d0f9      	beq.n	801169a <__gethex+0x4e>
 80116a6:	f7ff ffbb 	bl	8011620 <__hexdig_fun>
 80116aa:	fab0 f580 	clz	r5, r0
 80116ae:	096d      	lsrs	r5, r5, #5
 80116b0:	f04f 0b01 	mov.w	fp, #1
 80116b4:	464a      	mov	r2, r9
 80116b6:	4616      	mov	r6, r2
 80116b8:	3201      	adds	r2, #1
 80116ba:	7830      	ldrb	r0, [r6, #0]
 80116bc:	f7ff ffb0 	bl	8011620 <__hexdig_fun>
 80116c0:	2800      	cmp	r0, #0
 80116c2:	d1f8      	bne.n	80116b6 <__gethex+0x6a>
 80116c4:	498d      	ldr	r1, [pc, #564]	@ (80118fc <__gethex+0x2b0>)
 80116c6:	2201      	movs	r2, #1
 80116c8:	4630      	mov	r0, r6
 80116ca:	f7fe ff6c 	bl	80105a6 <strncmp>
 80116ce:	2800      	cmp	r0, #0
 80116d0:	d13f      	bne.n	8011752 <__gethex+0x106>
 80116d2:	b944      	cbnz	r4, 80116e6 <__gethex+0x9a>
 80116d4:	1c74      	adds	r4, r6, #1
 80116d6:	4622      	mov	r2, r4
 80116d8:	4616      	mov	r6, r2
 80116da:	3201      	adds	r2, #1
 80116dc:	7830      	ldrb	r0, [r6, #0]
 80116de:	f7ff ff9f 	bl	8011620 <__hexdig_fun>
 80116e2:	2800      	cmp	r0, #0
 80116e4:	d1f8      	bne.n	80116d8 <__gethex+0x8c>
 80116e6:	1ba4      	subs	r4, r4, r6
 80116e8:	00a7      	lsls	r7, r4, #2
 80116ea:	7833      	ldrb	r3, [r6, #0]
 80116ec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80116f0:	2b50      	cmp	r3, #80	@ 0x50
 80116f2:	d13e      	bne.n	8011772 <__gethex+0x126>
 80116f4:	7873      	ldrb	r3, [r6, #1]
 80116f6:	2b2b      	cmp	r3, #43	@ 0x2b
 80116f8:	d033      	beq.n	8011762 <__gethex+0x116>
 80116fa:	2b2d      	cmp	r3, #45	@ 0x2d
 80116fc:	d034      	beq.n	8011768 <__gethex+0x11c>
 80116fe:	1c71      	adds	r1, r6, #1
 8011700:	2400      	movs	r4, #0
 8011702:	7808      	ldrb	r0, [r1, #0]
 8011704:	f7ff ff8c 	bl	8011620 <__hexdig_fun>
 8011708:	1e43      	subs	r3, r0, #1
 801170a:	b2db      	uxtb	r3, r3
 801170c:	2b18      	cmp	r3, #24
 801170e:	d830      	bhi.n	8011772 <__gethex+0x126>
 8011710:	f1a0 0210 	sub.w	r2, r0, #16
 8011714:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011718:	f7ff ff82 	bl	8011620 <__hexdig_fun>
 801171c:	f100 3cff 	add.w	ip, r0, #4294967295
 8011720:	fa5f fc8c 	uxtb.w	ip, ip
 8011724:	f1bc 0f18 	cmp.w	ip, #24
 8011728:	f04f 030a 	mov.w	r3, #10
 801172c:	d91e      	bls.n	801176c <__gethex+0x120>
 801172e:	b104      	cbz	r4, 8011732 <__gethex+0xe6>
 8011730:	4252      	negs	r2, r2
 8011732:	4417      	add	r7, r2
 8011734:	f8ca 1000 	str.w	r1, [sl]
 8011738:	b1ed      	cbz	r5, 8011776 <__gethex+0x12a>
 801173a:	f1bb 0f00 	cmp.w	fp, #0
 801173e:	bf0c      	ite	eq
 8011740:	2506      	moveq	r5, #6
 8011742:	2500      	movne	r5, #0
 8011744:	4628      	mov	r0, r5
 8011746:	b005      	add	sp, #20
 8011748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801174c:	2500      	movs	r5, #0
 801174e:	462c      	mov	r4, r5
 8011750:	e7b0      	b.n	80116b4 <__gethex+0x68>
 8011752:	2c00      	cmp	r4, #0
 8011754:	d1c7      	bne.n	80116e6 <__gethex+0x9a>
 8011756:	4627      	mov	r7, r4
 8011758:	e7c7      	b.n	80116ea <__gethex+0x9e>
 801175a:	464e      	mov	r6, r9
 801175c:	462f      	mov	r7, r5
 801175e:	2501      	movs	r5, #1
 8011760:	e7c3      	b.n	80116ea <__gethex+0x9e>
 8011762:	2400      	movs	r4, #0
 8011764:	1cb1      	adds	r1, r6, #2
 8011766:	e7cc      	b.n	8011702 <__gethex+0xb6>
 8011768:	2401      	movs	r4, #1
 801176a:	e7fb      	b.n	8011764 <__gethex+0x118>
 801176c:	fb03 0002 	mla	r0, r3, r2, r0
 8011770:	e7ce      	b.n	8011710 <__gethex+0xc4>
 8011772:	4631      	mov	r1, r6
 8011774:	e7de      	b.n	8011734 <__gethex+0xe8>
 8011776:	eba6 0309 	sub.w	r3, r6, r9
 801177a:	3b01      	subs	r3, #1
 801177c:	4629      	mov	r1, r5
 801177e:	2b07      	cmp	r3, #7
 8011780:	dc0a      	bgt.n	8011798 <__gethex+0x14c>
 8011782:	9801      	ldr	r0, [sp, #4]
 8011784:	f000 fafc 	bl	8011d80 <_Balloc>
 8011788:	4604      	mov	r4, r0
 801178a:	b940      	cbnz	r0, 801179e <__gethex+0x152>
 801178c:	4b5c      	ldr	r3, [pc, #368]	@ (8011900 <__gethex+0x2b4>)
 801178e:	4602      	mov	r2, r0
 8011790:	21e4      	movs	r1, #228	@ 0xe4
 8011792:	485c      	ldr	r0, [pc, #368]	@ (8011904 <__gethex+0x2b8>)
 8011794:	f7ff f830 	bl	80107f8 <__assert_func>
 8011798:	3101      	adds	r1, #1
 801179a:	105b      	asrs	r3, r3, #1
 801179c:	e7ef      	b.n	801177e <__gethex+0x132>
 801179e:	f100 0a14 	add.w	sl, r0, #20
 80117a2:	2300      	movs	r3, #0
 80117a4:	4655      	mov	r5, sl
 80117a6:	469b      	mov	fp, r3
 80117a8:	45b1      	cmp	r9, r6
 80117aa:	d337      	bcc.n	801181c <__gethex+0x1d0>
 80117ac:	f845 bb04 	str.w	fp, [r5], #4
 80117b0:	eba5 050a 	sub.w	r5, r5, sl
 80117b4:	10ad      	asrs	r5, r5, #2
 80117b6:	6125      	str	r5, [r4, #16]
 80117b8:	4658      	mov	r0, fp
 80117ba:	f000 fbd3 	bl	8011f64 <__hi0bits>
 80117be:	016d      	lsls	r5, r5, #5
 80117c0:	f8d8 6000 	ldr.w	r6, [r8]
 80117c4:	1a2d      	subs	r5, r5, r0
 80117c6:	42b5      	cmp	r5, r6
 80117c8:	dd54      	ble.n	8011874 <__gethex+0x228>
 80117ca:	1bad      	subs	r5, r5, r6
 80117cc:	4629      	mov	r1, r5
 80117ce:	4620      	mov	r0, r4
 80117d0:	f000 ff5f 	bl	8012692 <__any_on>
 80117d4:	4681      	mov	r9, r0
 80117d6:	b178      	cbz	r0, 80117f8 <__gethex+0x1ac>
 80117d8:	1e6b      	subs	r3, r5, #1
 80117da:	1159      	asrs	r1, r3, #5
 80117dc:	f003 021f 	and.w	r2, r3, #31
 80117e0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80117e4:	f04f 0901 	mov.w	r9, #1
 80117e8:	fa09 f202 	lsl.w	r2, r9, r2
 80117ec:	420a      	tst	r2, r1
 80117ee:	d003      	beq.n	80117f8 <__gethex+0x1ac>
 80117f0:	454b      	cmp	r3, r9
 80117f2:	dc36      	bgt.n	8011862 <__gethex+0x216>
 80117f4:	f04f 0902 	mov.w	r9, #2
 80117f8:	4629      	mov	r1, r5
 80117fa:	4620      	mov	r0, r4
 80117fc:	f7ff febe 	bl	801157c <rshift>
 8011800:	442f      	add	r7, r5
 8011802:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011806:	42bb      	cmp	r3, r7
 8011808:	da42      	bge.n	8011890 <__gethex+0x244>
 801180a:	9801      	ldr	r0, [sp, #4]
 801180c:	4621      	mov	r1, r4
 801180e:	f000 faf7 	bl	8011e00 <_Bfree>
 8011812:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011814:	2300      	movs	r3, #0
 8011816:	6013      	str	r3, [r2, #0]
 8011818:	25a3      	movs	r5, #163	@ 0xa3
 801181a:	e793      	b.n	8011744 <__gethex+0xf8>
 801181c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011820:	2a2e      	cmp	r2, #46	@ 0x2e
 8011822:	d012      	beq.n	801184a <__gethex+0x1fe>
 8011824:	2b20      	cmp	r3, #32
 8011826:	d104      	bne.n	8011832 <__gethex+0x1e6>
 8011828:	f845 bb04 	str.w	fp, [r5], #4
 801182c:	f04f 0b00 	mov.w	fp, #0
 8011830:	465b      	mov	r3, fp
 8011832:	7830      	ldrb	r0, [r6, #0]
 8011834:	9303      	str	r3, [sp, #12]
 8011836:	f7ff fef3 	bl	8011620 <__hexdig_fun>
 801183a:	9b03      	ldr	r3, [sp, #12]
 801183c:	f000 000f 	and.w	r0, r0, #15
 8011840:	4098      	lsls	r0, r3
 8011842:	ea4b 0b00 	orr.w	fp, fp, r0
 8011846:	3304      	adds	r3, #4
 8011848:	e7ae      	b.n	80117a8 <__gethex+0x15c>
 801184a:	45b1      	cmp	r9, r6
 801184c:	d8ea      	bhi.n	8011824 <__gethex+0x1d8>
 801184e:	492b      	ldr	r1, [pc, #172]	@ (80118fc <__gethex+0x2b0>)
 8011850:	9303      	str	r3, [sp, #12]
 8011852:	2201      	movs	r2, #1
 8011854:	4630      	mov	r0, r6
 8011856:	f7fe fea6 	bl	80105a6 <strncmp>
 801185a:	9b03      	ldr	r3, [sp, #12]
 801185c:	2800      	cmp	r0, #0
 801185e:	d1e1      	bne.n	8011824 <__gethex+0x1d8>
 8011860:	e7a2      	b.n	80117a8 <__gethex+0x15c>
 8011862:	1ea9      	subs	r1, r5, #2
 8011864:	4620      	mov	r0, r4
 8011866:	f000 ff14 	bl	8012692 <__any_on>
 801186a:	2800      	cmp	r0, #0
 801186c:	d0c2      	beq.n	80117f4 <__gethex+0x1a8>
 801186e:	f04f 0903 	mov.w	r9, #3
 8011872:	e7c1      	b.n	80117f8 <__gethex+0x1ac>
 8011874:	da09      	bge.n	801188a <__gethex+0x23e>
 8011876:	1b75      	subs	r5, r6, r5
 8011878:	4621      	mov	r1, r4
 801187a:	9801      	ldr	r0, [sp, #4]
 801187c:	462a      	mov	r2, r5
 801187e:	f000 fccf 	bl	8012220 <__lshift>
 8011882:	1b7f      	subs	r7, r7, r5
 8011884:	4604      	mov	r4, r0
 8011886:	f100 0a14 	add.w	sl, r0, #20
 801188a:	f04f 0900 	mov.w	r9, #0
 801188e:	e7b8      	b.n	8011802 <__gethex+0x1b6>
 8011890:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011894:	42bd      	cmp	r5, r7
 8011896:	dd6f      	ble.n	8011978 <__gethex+0x32c>
 8011898:	1bed      	subs	r5, r5, r7
 801189a:	42ae      	cmp	r6, r5
 801189c:	dc34      	bgt.n	8011908 <__gethex+0x2bc>
 801189e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80118a2:	2b02      	cmp	r3, #2
 80118a4:	d022      	beq.n	80118ec <__gethex+0x2a0>
 80118a6:	2b03      	cmp	r3, #3
 80118a8:	d024      	beq.n	80118f4 <__gethex+0x2a8>
 80118aa:	2b01      	cmp	r3, #1
 80118ac:	d115      	bne.n	80118da <__gethex+0x28e>
 80118ae:	42ae      	cmp	r6, r5
 80118b0:	d113      	bne.n	80118da <__gethex+0x28e>
 80118b2:	2e01      	cmp	r6, #1
 80118b4:	d10b      	bne.n	80118ce <__gethex+0x282>
 80118b6:	9a02      	ldr	r2, [sp, #8]
 80118b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80118bc:	6013      	str	r3, [r2, #0]
 80118be:	2301      	movs	r3, #1
 80118c0:	6123      	str	r3, [r4, #16]
 80118c2:	f8ca 3000 	str.w	r3, [sl]
 80118c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80118c8:	2562      	movs	r5, #98	@ 0x62
 80118ca:	601c      	str	r4, [r3, #0]
 80118cc:	e73a      	b.n	8011744 <__gethex+0xf8>
 80118ce:	1e71      	subs	r1, r6, #1
 80118d0:	4620      	mov	r0, r4
 80118d2:	f000 fede 	bl	8012692 <__any_on>
 80118d6:	2800      	cmp	r0, #0
 80118d8:	d1ed      	bne.n	80118b6 <__gethex+0x26a>
 80118da:	9801      	ldr	r0, [sp, #4]
 80118dc:	4621      	mov	r1, r4
 80118de:	f000 fa8f 	bl	8011e00 <_Bfree>
 80118e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80118e4:	2300      	movs	r3, #0
 80118e6:	6013      	str	r3, [r2, #0]
 80118e8:	2550      	movs	r5, #80	@ 0x50
 80118ea:	e72b      	b.n	8011744 <__gethex+0xf8>
 80118ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d1f3      	bne.n	80118da <__gethex+0x28e>
 80118f2:	e7e0      	b.n	80118b6 <__gethex+0x26a>
 80118f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d1dd      	bne.n	80118b6 <__gethex+0x26a>
 80118fa:	e7ee      	b.n	80118da <__gethex+0x28e>
 80118fc:	080141b4 	.word	0x080141b4
 8011900:	08014304 	.word	0x08014304
 8011904:	08014315 	.word	0x08014315
 8011908:	1e6f      	subs	r7, r5, #1
 801190a:	f1b9 0f00 	cmp.w	r9, #0
 801190e:	d130      	bne.n	8011972 <__gethex+0x326>
 8011910:	b127      	cbz	r7, 801191c <__gethex+0x2d0>
 8011912:	4639      	mov	r1, r7
 8011914:	4620      	mov	r0, r4
 8011916:	f000 febc 	bl	8012692 <__any_on>
 801191a:	4681      	mov	r9, r0
 801191c:	117a      	asrs	r2, r7, #5
 801191e:	2301      	movs	r3, #1
 8011920:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011924:	f007 071f 	and.w	r7, r7, #31
 8011928:	40bb      	lsls	r3, r7
 801192a:	4213      	tst	r3, r2
 801192c:	4629      	mov	r1, r5
 801192e:	4620      	mov	r0, r4
 8011930:	bf18      	it	ne
 8011932:	f049 0902 	orrne.w	r9, r9, #2
 8011936:	f7ff fe21 	bl	801157c <rshift>
 801193a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801193e:	1b76      	subs	r6, r6, r5
 8011940:	2502      	movs	r5, #2
 8011942:	f1b9 0f00 	cmp.w	r9, #0
 8011946:	d047      	beq.n	80119d8 <__gethex+0x38c>
 8011948:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801194c:	2b02      	cmp	r3, #2
 801194e:	d015      	beq.n	801197c <__gethex+0x330>
 8011950:	2b03      	cmp	r3, #3
 8011952:	d017      	beq.n	8011984 <__gethex+0x338>
 8011954:	2b01      	cmp	r3, #1
 8011956:	d109      	bne.n	801196c <__gethex+0x320>
 8011958:	f019 0f02 	tst.w	r9, #2
 801195c:	d006      	beq.n	801196c <__gethex+0x320>
 801195e:	f8da 3000 	ldr.w	r3, [sl]
 8011962:	ea49 0903 	orr.w	r9, r9, r3
 8011966:	f019 0f01 	tst.w	r9, #1
 801196a:	d10e      	bne.n	801198a <__gethex+0x33e>
 801196c:	f045 0510 	orr.w	r5, r5, #16
 8011970:	e032      	b.n	80119d8 <__gethex+0x38c>
 8011972:	f04f 0901 	mov.w	r9, #1
 8011976:	e7d1      	b.n	801191c <__gethex+0x2d0>
 8011978:	2501      	movs	r5, #1
 801197a:	e7e2      	b.n	8011942 <__gethex+0x2f6>
 801197c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801197e:	f1c3 0301 	rsb	r3, r3, #1
 8011982:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011984:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011986:	2b00      	cmp	r3, #0
 8011988:	d0f0      	beq.n	801196c <__gethex+0x320>
 801198a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801198e:	f104 0314 	add.w	r3, r4, #20
 8011992:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011996:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801199a:	f04f 0c00 	mov.w	ip, #0
 801199e:	4618      	mov	r0, r3
 80119a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80119a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80119a8:	d01b      	beq.n	80119e2 <__gethex+0x396>
 80119aa:	3201      	adds	r2, #1
 80119ac:	6002      	str	r2, [r0, #0]
 80119ae:	2d02      	cmp	r5, #2
 80119b0:	f104 0314 	add.w	r3, r4, #20
 80119b4:	d13c      	bne.n	8011a30 <__gethex+0x3e4>
 80119b6:	f8d8 2000 	ldr.w	r2, [r8]
 80119ba:	3a01      	subs	r2, #1
 80119bc:	42b2      	cmp	r2, r6
 80119be:	d109      	bne.n	80119d4 <__gethex+0x388>
 80119c0:	1171      	asrs	r1, r6, #5
 80119c2:	2201      	movs	r2, #1
 80119c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80119c8:	f006 061f 	and.w	r6, r6, #31
 80119cc:	fa02 f606 	lsl.w	r6, r2, r6
 80119d0:	421e      	tst	r6, r3
 80119d2:	d13a      	bne.n	8011a4a <__gethex+0x3fe>
 80119d4:	f045 0520 	orr.w	r5, r5, #32
 80119d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80119da:	601c      	str	r4, [r3, #0]
 80119dc:	9b02      	ldr	r3, [sp, #8]
 80119de:	601f      	str	r7, [r3, #0]
 80119e0:	e6b0      	b.n	8011744 <__gethex+0xf8>
 80119e2:	4299      	cmp	r1, r3
 80119e4:	f843 cc04 	str.w	ip, [r3, #-4]
 80119e8:	d8d9      	bhi.n	801199e <__gethex+0x352>
 80119ea:	68a3      	ldr	r3, [r4, #8]
 80119ec:	459b      	cmp	fp, r3
 80119ee:	db17      	blt.n	8011a20 <__gethex+0x3d4>
 80119f0:	6861      	ldr	r1, [r4, #4]
 80119f2:	9801      	ldr	r0, [sp, #4]
 80119f4:	3101      	adds	r1, #1
 80119f6:	f000 f9c3 	bl	8011d80 <_Balloc>
 80119fa:	4681      	mov	r9, r0
 80119fc:	b918      	cbnz	r0, 8011a06 <__gethex+0x3ba>
 80119fe:	4b1a      	ldr	r3, [pc, #104]	@ (8011a68 <__gethex+0x41c>)
 8011a00:	4602      	mov	r2, r0
 8011a02:	2184      	movs	r1, #132	@ 0x84
 8011a04:	e6c5      	b.n	8011792 <__gethex+0x146>
 8011a06:	6922      	ldr	r2, [r4, #16]
 8011a08:	3202      	adds	r2, #2
 8011a0a:	f104 010c 	add.w	r1, r4, #12
 8011a0e:	0092      	lsls	r2, r2, #2
 8011a10:	300c      	adds	r0, #12
 8011a12:	f7fe feda 	bl	80107ca <memcpy>
 8011a16:	4621      	mov	r1, r4
 8011a18:	9801      	ldr	r0, [sp, #4]
 8011a1a:	f000 f9f1 	bl	8011e00 <_Bfree>
 8011a1e:	464c      	mov	r4, r9
 8011a20:	6923      	ldr	r3, [r4, #16]
 8011a22:	1c5a      	adds	r2, r3, #1
 8011a24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011a28:	6122      	str	r2, [r4, #16]
 8011a2a:	2201      	movs	r2, #1
 8011a2c:	615a      	str	r2, [r3, #20]
 8011a2e:	e7be      	b.n	80119ae <__gethex+0x362>
 8011a30:	6922      	ldr	r2, [r4, #16]
 8011a32:	455a      	cmp	r2, fp
 8011a34:	dd0b      	ble.n	8011a4e <__gethex+0x402>
 8011a36:	2101      	movs	r1, #1
 8011a38:	4620      	mov	r0, r4
 8011a3a:	f7ff fd9f 	bl	801157c <rshift>
 8011a3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011a42:	3701      	adds	r7, #1
 8011a44:	42bb      	cmp	r3, r7
 8011a46:	f6ff aee0 	blt.w	801180a <__gethex+0x1be>
 8011a4a:	2501      	movs	r5, #1
 8011a4c:	e7c2      	b.n	80119d4 <__gethex+0x388>
 8011a4e:	f016 061f 	ands.w	r6, r6, #31
 8011a52:	d0fa      	beq.n	8011a4a <__gethex+0x3fe>
 8011a54:	4453      	add	r3, sl
 8011a56:	f1c6 0620 	rsb	r6, r6, #32
 8011a5a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011a5e:	f000 fa81 	bl	8011f64 <__hi0bits>
 8011a62:	42b0      	cmp	r0, r6
 8011a64:	dbe7      	blt.n	8011a36 <__gethex+0x3ea>
 8011a66:	e7f0      	b.n	8011a4a <__gethex+0x3fe>
 8011a68:	08014304 	.word	0x08014304

08011a6c <L_shift>:
 8011a6c:	f1c2 0208 	rsb	r2, r2, #8
 8011a70:	0092      	lsls	r2, r2, #2
 8011a72:	b570      	push	{r4, r5, r6, lr}
 8011a74:	f1c2 0620 	rsb	r6, r2, #32
 8011a78:	6843      	ldr	r3, [r0, #4]
 8011a7a:	6804      	ldr	r4, [r0, #0]
 8011a7c:	fa03 f506 	lsl.w	r5, r3, r6
 8011a80:	432c      	orrs	r4, r5
 8011a82:	40d3      	lsrs	r3, r2
 8011a84:	6004      	str	r4, [r0, #0]
 8011a86:	f840 3f04 	str.w	r3, [r0, #4]!
 8011a8a:	4288      	cmp	r0, r1
 8011a8c:	d3f4      	bcc.n	8011a78 <L_shift+0xc>
 8011a8e:	bd70      	pop	{r4, r5, r6, pc}

08011a90 <__match>:
 8011a90:	b530      	push	{r4, r5, lr}
 8011a92:	6803      	ldr	r3, [r0, #0]
 8011a94:	3301      	adds	r3, #1
 8011a96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011a9a:	b914      	cbnz	r4, 8011aa2 <__match+0x12>
 8011a9c:	6003      	str	r3, [r0, #0]
 8011a9e:	2001      	movs	r0, #1
 8011aa0:	bd30      	pop	{r4, r5, pc}
 8011aa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011aa6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011aaa:	2d19      	cmp	r5, #25
 8011aac:	bf98      	it	ls
 8011aae:	3220      	addls	r2, #32
 8011ab0:	42a2      	cmp	r2, r4
 8011ab2:	d0f0      	beq.n	8011a96 <__match+0x6>
 8011ab4:	2000      	movs	r0, #0
 8011ab6:	e7f3      	b.n	8011aa0 <__match+0x10>

08011ab8 <__hexnan>:
 8011ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011abc:	680b      	ldr	r3, [r1, #0]
 8011abe:	6801      	ldr	r1, [r0, #0]
 8011ac0:	115e      	asrs	r6, r3, #5
 8011ac2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011ac6:	f013 031f 	ands.w	r3, r3, #31
 8011aca:	b087      	sub	sp, #28
 8011acc:	bf18      	it	ne
 8011ace:	3604      	addne	r6, #4
 8011ad0:	2500      	movs	r5, #0
 8011ad2:	1f37      	subs	r7, r6, #4
 8011ad4:	4682      	mov	sl, r0
 8011ad6:	4690      	mov	r8, r2
 8011ad8:	9301      	str	r3, [sp, #4]
 8011ada:	f846 5c04 	str.w	r5, [r6, #-4]
 8011ade:	46b9      	mov	r9, r7
 8011ae0:	463c      	mov	r4, r7
 8011ae2:	9502      	str	r5, [sp, #8]
 8011ae4:	46ab      	mov	fp, r5
 8011ae6:	784a      	ldrb	r2, [r1, #1]
 8011ae8:	1c4b      	adds	r3, r1, #1
 8011aea:	9303      	str	r3, [sp, #12]
 8011aec:	b342      	cbz	r2, 8011b40 <__hexnan+0x88>
 8011aee:	4610      	mov	r0, r2
 8011af0:	9105      	str	r1, [sp, #20]
 8011af2:	9204      	str	r2, [sp, #16]
 8011af4:	f7ff fd94 	bl	8011620 <__hexdig_fun>
 8011af8:	2800      	cmp	r0, #0
 8011afa:	d151      	bne.n	8011ba0 <__hexnan+0xe8>
 8011afc:	9a04      	ldr	r2, [sp, #16]
 8011afe:	9905      	ldr	r1, [sp, #20]
 8011b00:	2a20      	cmp	r2, #32
 8011b02:	d818      	bhi.n	8011b36 <__hexnan+0x7e>
 8011b04:	9b02      	ldr	r3, [sp, #8]
 8011b06:	459b      	cmp	fp, r3
 8011b08:	dd13      	ble.n	8011b32 <__hexnan+0x7a>
 8011b0a:	454c      	cmp	r4, r9
 8011b0c:	d206      	bcs.n	8011b1c <__hexnan+0x64>
 8011b0e:	2d07      	cmp	r5, #7
 8011b10:	dc04      	bgt.n	8011b1c <__hexnan+0x64>
 8011b12:	462a      	mov	r2, r5
 8011b14:	4649      	mov	r1, r9
 8011b16:	4620      	mov	r0, r4
 8011b18:	f7ff ffa8 	bl	8011a6c <L_shift>
 8011b1c:	4544      	cmp	r4, r8
 8011b1e:	d952      	bls.n	8011bc6 <__hexnan+0x10e>
 8011b20:	2300      	movs	r3, #0
 8011b22:	f1a4 0904 	sub.w	r9, r4, #4
 8011b26:	f844 3c04 	str.w	r3, [r4, #-4]
 8011b2a:	f8cd b008 	str.w	fp, [sp, #8]
 8011b2e:	464c      	mov	r4, r9
 8011b30:	461d      	mov	r5, r3
 8011b32:	9903      	ldr	r1, [sp, #12]
 8011b34:	e7d7      	b.n	8011ae6 <__hexnan+0x2e>
 8011b36:	2a29      	cmp	r2, #41	@ 0x29
 8011b38:	d157      	bne.n	8011bea <__hexnan+0x132>
 8011b3a:	3102      	adds	r1, #2
 8011b3c:	f8ca 1000 	str.w	r1, [sl]
 8011b40:	f1bb 0f00 	cmp.w	fp, #0
 8011b44:	d051      	beq.n	8011bea <__hexnan+0x132>
 8011b46:	454c      	cmp	r4, r9
 8011b48:	d206      	bcs.n	8011b58 <__hexnan+0xa0>
 8011b4a:	2d07      	cmp	r5, #7
 8011b4c:	dc04      	bgt.n	8011b58 <__hexnan+0xa0>
 8011b4e:	462a      	mov	r2, r5
 8011b50:	4649      	mov	r1, r9
 8011b52:	4620      	mov	r0, r4
 8011b54:	f7ff ff8a 	bl	8011a6c <L_shift>
 8011b58:	4544      	cmp	r4, r8
 8011b5a:	d936      	bls.n	8011bca <__hexnan+0x112>
 8011b5c:	f1a8 0204 	sub.w	r2, r8, #4
 8011b60:	4623      	mov	r3, r4
 8011b62:	f853 1b04 	ldr.w	r1, [r3], #4
 8011b66:	f842 1f04 	str.w	r1, [r2, #4]!
 8011b6a:	429f      	cmp	r7, r3
 8011b6c:	d2f9      	bcs.n	8011b62 <__hexnan+0xaa>
 8011b6e:	1b3b      	subs	r3, r7, r4
 8011b70:	f023 0303 	bic.w	r3, r3, #3
 8011b74:	3304      	adds	r3, #4
 8011b76:	3401      	adds	r4, #1
 8011b78:	3e03      	subs	r6, #3
 8011b7a:	42b4      	cmp	r4, r6
 8011b7c:	bf88      	it	hi
 8011b7e:	2304      	movhi	r3, #4
 8011b80:	4443      	add	r3, r8
 8011b82:	2200      	movs	r2, #0
 8011b84:	f843 2b04 	str.w	r2, [r3], #4
 8011b88:	429f      	cmp	r7, r3
 8011b8a:	d2fb      	bcs.n	8011b84 <__hexnan+0xcc>
 8011b8c:	683b      	ldr	r3, [r7, #0]
 8011b8e:	b91b      	cbnz	r3, 8011b98 <__hexnan+0xe0>
 8011b90:	4547      	cmp	r7, r8
 8011b92:	d128      	bne.n	8011be6 <__hexnan+0x12e>
 8011b94:	2301      	movs	r3, #1
 8011b96:	603b      	str	r3, [r7, #0]
 8011b98:	2005      	movs	r0, #5
 8011b9a:	b007      	add	sp, #28
 8011b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ba0:	3501      	adds	r5, #1
 8011ba2:	2d08      	cmp	r5, #8
 8011ba4:	f10b 0b01 	add.w	fp, fp, #1
 8011ba8:	dd06      	ble.n	8011bb8 <__hexnan+0x100>
 8011baa:	4544      	cmp	r4, r8
 8011bac:	d9c1      	bls.n	8011b32 <__hexnan+0x7a>
 8011bae:	2300      	movs	r3, #0
 8011bb0:	f844 3c04 	str.w	r3, [r4, #-4]
 8011bb4:	2501      	movs	r5, #1
 8011bb6:	3c04      	subs	r4, #4
 8011bb8:	6822      	ldr	r2, [r4, #0]
 8011bba:	f000 000f 	and.w	r0, r0, #15
 8011bbe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011bc2:	6020      	str	r0, [r4, #0]
 8011bc4:	e7b5      	b.n	8011b32 <__hexnan+0x7a>
 8011bc6:	2508      	movs	r5, #8
 8011bc8:	e7b3      	b.n	8011b32 <__hexnan+0x7a>
 8011bca:	9b01      	ldr	r3, [sp, #4]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d0dd      	beq.n	8011b8c <__hexnan+0xd4>
 8011bd0:	f1c3 0320 	rsb	r3, r3, #32
 8011bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8011bd8:	40da      	lsrs	r2, r3
 8011bda:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011bde:	4013      	ands	r3, r2
 8011be0:	f846 3c04 	str.w	r3, [r6, #-4]
 8011be4:	e7d2      	b.n	8011b8c <__hexnan+0xd4>
 8011be6:	3f04      	subs	r7, #4
 8011be8:	e7d0      	b.n	8011b8c <__hexnan+0xd4>
 8011bea:	2004      	movs	r0, #4
 8011bec:	e7d5      	b.n	8011b9a <__hexnan+0xe2>
	...

08011bf0 <malloc>:
 8011bf0:	4b02      	ldr	r3, [pc, #8]	@ (8011bfc <malloc+0xc>)
 8011bf2:	4601      	mov	r1, r0
 8011bf4:	6818      	ldr	r0, [r3, #0]
 8011bf6:	f000 b825 	b.w	8011c44 <_malloc_r>
 8011bfa:	bf00      	nop
 8011bfc:	20000320 	.word	0x20000320

08011c00 <sbrk_aligned>:
 8011c00:	b570      	push	{r4, r5, r6, lr}
 8011c02:	4e0f      	ldr	r6, [pc, #60]	@ (8011c40 <sbrk_aligned+0x40>)
 8011c04:	460c      	mov	r4, r1
 8011c06:	6831      	ldr	r1, [r6, #0]
 8011c08:	4605      	mov	r5, r0
 8011c0a:	b911      	cbnz	r1, 8011c12 <sbrk_aligned+0x12>
 8011c0c:	f000 ff9e 	bl	8012b4c <_sbrk_r>
 8011c10:	6030      	str	r0, [r6, #0]
 8011c12:	4621      	mov	r1, r4
 8011c14:	4628      	mov	r0, r5
 8011c16:	f000 ff99 	bl	8012b4c <_sbrk_r>
 8011c1a:	1c43      	adds	r3, r0, #1
 8011c1c:	d103      	bne.n	8011c26 <sbrk_aligned+0x26>
 8011c1e:	f04f 34ff 	mov.w	r4, #4294967295
 8011c22:	4620      	mov	r0, r4
 8011c24:	bd70      	pop	{r4, r5, r6, pc}
 8011c26:	1cc4      	adds	r4, r0, #3
 8011c28:	f024 0403 	bic.w	r4, r4, #3
 8011c2c:	42a0      	cmp	r0, r4
 8011c2e:	d0f8      	beq.n	8011c22 <sbrk_aligned+0x22>
 8011c30:	1a21      	subs	r1, r4, r0
 8011c32:	4628      	mov	r0, r5
 8011c34:	f000 ff8a 	bl	8012b4c <_sbrk_r>
 8011c38:	3001      	adds	r0, #1
 8011c3a:	d1f2      	bne.n	8011c22 <sbrk_aligned+0x22>
 8011c3c:	e7ef      	b.n	8011c1e <sbrk_aligned+0x1e>
 8011c3e:	bf00      	nop
 8011c40:	20005d74 	.word	0x20005d74

08011c44 <_malloc_r>:
 8011c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c48:	1ccd      	adds	r5, r1, #3
 8011c4a:	f025 0503 	bic.w	r5, r5, #3
 8011c4e:	3508      	adds	r5, #8
 8011c50:	2d0c      	cmp	r5, #12
 8011c52:	bf38      	it	cc
 8011c54:	250c      	movcc	r5, #12
 8011c56:	2d00      	cmp	r5, #0
 8011c58:	4606      	mov	r6, r0
 8011c5a:	db01      	blt.n	8011c60 <_malloc_r+0x1c>
 8011c5c:	42a9      	cmp	r1, r5
 8011c5e:	d904      	bls.n	8011c6a <_malloc_r+0x26>
 8011c60:	230c      	movs	r3, #12
 8011c62:	6033      	str	r3, [r6, #0]
 8011c64:	2000      	movs	r0, #0
 8011c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011d40 <_malloc_r+0xfc>
 8011c6e:	f000 f87b 	bl	8011d68 <__malloc_lock>
 8011c72:	f8d8 3000 	ldr.w	r3, [r8]
 8011c76:	461c      	mov	r4, r3
 8011c78:	bb44      	cbnz	r4, 8011ccc <_malloc_r+0x88>
 8011c7a:	4629      	mov	r1, r5
 8011c7c:	4630      	mov	r0, r6
 8011c7e:	f7ff ffbf 	bl	8011c00 <sbrk_aligned>
 8011c82:	1c43      	adds	r3, r0, #1
 8011c84:	4604      	mov	r4, r0
 8011c86:	d158      	bne.n	8011d3a <_malloc_r+0xf6>
 8011c88:	f8d8 4000 	ldr.w	r4, [r8]
 8011c8c:	4627      	mov	r7, r4
 8011c8e:	2f00      	cmp	r7, #0
 8011c90:	d143      	bne.n	8011d1a <_malloc_r+0xd6>
 8011c92:	2c00      	cmp	r4, #0
 8011c94:	d04b      	beq.n	8011d2e <_malloc_r+0xea>
 8011c96:	6823      	ldr	r3, [r4, #0]
 8011c98:	4639      	mov	r1, r7
 8011c9a:	4630      	mov	r0, r6
 8011c9c:	eb04 0903 	add.w	r9, r4, r3
 8011ca0:	f000 ff54 	bl	8012b4c <_sbrk_r>
 8011ca4:	4581      	cmp	r9, r0
 8011ca6:	d142      	bne.n	8011d2e <_malloc_r+0xea>
 8011ca8:	6821      	ldr	r1, [r4, #0]
 8011caa:	1a6d      	subs	r5, r5, r1
 8011cac:	4629      	mov	r1, r5
 8011cae:	4630      	mov	r0, r6
 8011cb0:	f7ff ffa6 	bl	8011c00 <sbrk_aligned>
 8011cb4:	3001      	adds	r0, #1
 8011cb6:	d03a      	beq.n	8011d2e <_malloc_r+0xea>
 8011cb8:	6823      	ldr	r3, [r4, #0]
 8011cba:	442b      	add	r3, r5
 8011cbc:	6023      	str	r3, [r4, #0]
 8011cbe:	f8d8 3000 	ldr.w	r3, [r8]
 8011cc2:	685a      	ldr	r2, [r3, #4]
 8011cc4:	bb62      	cbnz	r2, 8011d20 <_malloc_r+0xdc>
 8011cc6:	f8c8 7000 	str.w	r7, [r8]
 8011cca:	e00f      	b.n	8011cec <_malloc_r+0xa8>
 8011ccc:	6822      	ldr	r2, [r4, #0]
 8011cce:	1b52      	subs	r2, r2, r5
 8011cd0:	d420      	bmi.n	8011d14 <_malloc_r+0xd0>
 8011cd2:	2a0b      	cmp	r2, #11
 8011cd4:	d917      	bls.n	8011d06 <_malloc_r+0xc2>
 8011cd6:	1961      	adds	r1, r4, r5
 8011cd8:	42a3      	cmp	r3, r4
 8011cda:	6025      	str	r5, [r4, #0]
 8011cdc:	bf18      	it	ne
 8011cde:	6059      	strne	r1, [r3, #4]
 8011ce0:	6863      	ldr	r3, [r4, #4]
 8011ce2:	bf08      	it	eq
 8011ce4:	f8c8 1000 	streq.w	r1, [r8]
 8011ce8:	5162      	str	r2, [r4, r5]
 8011cea:	604b      	str	r3, [r1, #4]
 8011cec:	4630      	mov	r0, r6
 8011cee:	f000 f841 	bl	8011d74 <__malloc_unlock>
 8011cf2:	f104 000b 	add.w	r0, r4, #11
 8011cf6:	1d23      	adds	r3, r4, #4
 8011cf8:	f020 0007 	bic.w	r0, r0, #7
 8011cfc:	1ac2      	subs	r2, r0, r3
 8011cfe:	bf1c      	itt	ne
 8011d00:	1a1b      	subne	r3, r3, r0
 8011d02:	50a3      	strne	r3, [r4, r2]
 8011d04:	e7af      	b.n	8011c66 <_malloc_r+0x22>
 8011d06:	6862      	ldr	r2, [r4, #4]
 8011d08:	42a3      	cmp	r3, r4
 8011d0a:	bf0c      	ite	eq
 8011d0c:	f8c8 2000 	streq.w	r2, [r8]
 8011d10:	605a      	strne	r2, [r3, #4]
 8011d12:	e7eb      	b.n	8011cec <_malloc_r+0xa8>
 8011d14:	4623      	mov	r3, r4
 8011d16:	6864      	ldr	r4, [r4, #4]
 8011d18:	e7ae      	b.n	8011c78 <_malloc_r+0x34>
 8011d1a:	463c      	mov	r4, r7
 8011d1c:	687f      	ldr	r7, [r7, #4]
 8011d1e:	e7b6      	b.n	8011c8e <_malloc_r+0x4a>
 8011d20:	461a      	mov	r2, r3
 8011d22:	685b      	ldr	r3, [r3, #4]
 8011d24:	42a3      	cmp	r3, r4
 8011d26:	d1fb      	bne.n	8011d20 <_malloc_r+0xdc>
 8011d28:	2300      	movs	r3, #0
 8011d2a:	6053      	str	r3, [r2, #4]
 8011d2c:	e7de      	b.n	8011cec <_malloc_r+0xa8>
 8011d2e:	230c      	movs	r3, #12
 8011d30:	6033      	str	r3, [r6, #0]
 8011d32:	4630      	mov	r0, r6
 8011d34:	f000 f81e 	bl	8011d74 <__malloc_unlock>
 8011d38:	e794      	b.n	8011c64 <_malloc_r+0x20>
 8011d3a:	6005      	str	r5, [r0, #0]
 8011d3c:	e7d6      	b.n	8011cec <_malloc_r+0xa8>
 8011d3e:	bf00      	nop
 8011d40:	20005d78 	.word	0x20005d78

08011d44 <__ascii_mbtowc>:
 8011d44:	b082      	sub	sp, #8
 8011d46:	b901      	cbnz	r1, 8011d4a <__ascii_mbtowc+0x6>
 8011d48:	a901      	add	r1, sp, #4
 8011d4a:	b142      	cbz	r2, 8011d5e <__ascii_mbtowc+0x1a>
 8011d4c:	b14b      	cbz	r3, 8011d62 <__ascii_mbtowc+0x1e>
 8011d4e:	7813      	ldrb	r3, [r2, #0]
 8011d50:	600b      	str	r3, [r1, #0]
 8011d52:	7812      	ldrb	r2, [r2, #0]
 8011d54:	1e10      	subs	r0, r2, #0
 8011d56:	bf18      	it	ne
 8011d58:	2001      	movne	r0, #1
 8011d5a:	b002      	add	sp, #8
 8011d5c:	4770      	bx	lr
 8011d5e:	4610      	mov	r0, r2
 8011d60:	e7fb      	b.n	8011d5a <__ascii_mbtowc+0x16>
 8011d62:	f06f 0001 	mvn.w	r0, #1
 8011d66:	e7f8      	b.n	8011d5a <__ascii_mbtowc+0x16>

08011d68 <__malloc_lock>:
 8011d68:	4801      	ldr	r0, [pc, #4]	@ (8011d70 <__malloc_lock+0x8>)
 8011d6a:	f7fe bd2c 	b.w	80107c6 <__retarget_lock_acquire_recursive>
 8011d6e:	bf00      	nop
 8011d70:	20005d70 	.word	0x20005d70

08011d74 <__malloc_unlock>:
 8011d74:	4801      	ldr	r0, [pc, #4]	@ (8011d7c <__malloc_unlock+0x8>)
 8011d76:	f7fe bd27 	b.w	80107c8 <__retarget_lock_release_recursive>
 8011d7a:	bf00      	nop
 8011d7c:	20005d70 	.word	0x20005d70

08011d80 <_Balloc>:
 8011d80:	b570      	push	{r4, r5, r6, lr}
 8011d82:	69c6      	ldr	r6, [r0, #28]
 8011d84:	4604      	mov	r4, r0
 8011d86:	460d      	mov	r5, r1
 8011d88:	b976      	cbnz	r6, 8011da8 <_Balloc+0x28>
 8011d8a:	2010      	movs	r0, #16
 8011d8c:	f7ff ff30 	bl	8011bf0 <malloc>
 8011d90:	4602      	mov	r2, r0
 8011d92:	61e0      	str	r0, [r4, #28]
 8011d94:	b920      	cbnz	r0, 8011da0 <_Balloc+0x20>
 8011d96:	4b18      	ldr	r3, [pc, #96]	@ (8011df8 <_Balloc+0x78>)
 8011d98:	4818      	ldr	r0, [pc, #96]	@ (8011dfc <_Balloc+0x7c>)
 8011d9a:	216b      	movs	r1, #107	@ 0x6b
 8011d9c:	f7fe fd2c 	bl	80107f8 <__assert_func>
 8011da0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011da4:	6006      	str	r6, [r0, #0]
 8011da6:	60c6      	str	r6, [r0, #12]
 8011da8:	69e6      	ldr	r6, [r4, #28]
 8011daa:	68f3      	ldr	r3, [r6, #12]
 8011dac:	b183      	cbz	r3, 8011dd0 <_Balloc+0x50>
 8011dae:	69e3      	ldr	r3, [r4, #28]
 8011db0:	68db      	ldr	r3, [r3, #12]
 8011db2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011db6:	b9b8      	cbnz	r0, 8011de8 <_Balloc+0x68>
 8011db8:	2101      	movs	r1, #1
 8011dba:	fa01 f605 	lsl.w	r6, r1, r5
 8011dbe:	1d72      	adds	r2, r6, #5
 8011dc0:	0092      	lsls	r2, r2, #2
 8011dc2:	4620      	mov	r0, r4
 8011dc4:	f000 fed9 	bl	8012b7a <_calloc_r>
 8011dc8:	b160      	cbz	r0, 8011de4 <_Balloc+0x64>
 8011dca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011dce:	e00e      	b.n	8011dee <_Balloc+0x6e>
 8011dd0:	2221      	movs	r2, #33	@ 0x21
 8011dd2:	2104      	movs	r1, #4
 8011dd4:	4620      	mov	r0, r4
 8011dd6:	f000 fed0 	bl	8012b7a <_calloc_r>
 8011dda:	69e3      	ldr	r3, [r4, #28]
 8011ddc:	60f0      	str	r0, [r6, #12]
 8011dde:	68db      	ldr	r3, [r3, #12]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d1e4      	bne.n	8011dae <_Balloc+0x2e>
 8011de4:	2000      	movs	r0, #0
 8011de6:	bd70      	pop	{r4, r5, r6, pc}
 8011de8:	6802      	ldr	r2, [r0, #0]
 8011dea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011dee:	2300      	movs	r3, #0
 8011df0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011df4:	e7f7      	b.n	8011de6 <_Balloc+0x66>
 8011df6:	bf00      	nop
 8011df8:	080141ea 	.word	0x080141ea
 8011dfc:	08014375 	.word	0x08014375

08011e00 <_Bfree>:
 8011e00:	b570      	push	{r4, r5, r6, lr}
 8011e02:	69c6      	ldr	r6, [r0, #28]
 8011e04:	4605      	mov	r5, r0
 8011e06:	460c      	mov	r4, r1
 8011e08:	b976      	cbnz	r6, 8011e28 <_Bfree+0x28>
 8011e0a:	2010      	movs	r0, #16
 8011e0c:	f7ff fef0 	bl	8011bf0 <malloc>
 8011e10:	4602      	mov	r2, r0
 8011e12:	61e8      	str	r0, [r5, #28]
 8011e14:	b920      	cbnz	r0, 8011e20 <_Bfree+0x20>
 8011e16:	4b09      	ldr	r3, [pc, #36]	@ (8011e3c <_Bfree+0x3c>)
 8011e18:	4809      	ldr	r0, [pc, #36]	@ (8011e40 <_Bfree+0x40>)
 8011e1a:	218f      	movs	r1, #143	@ 0x8f
 8011e1c:	f7fe fcec 	bl	80107f8 <__assert_func>
 8011e20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011e24:	6006      	str	r6, [r0, #0]
 8011e26:	60c6      	str	r6, [r0, #12]
 8011e28:	b13c      	cbz	r4, 8011e3a <_Bfree+0x3a>
 8011e2a:	69eb      	ldr	r3, [r5, #28]
 8011e2c:	6862      	ldr	r2, [r4, #4]
 8011e2e:	68db      	ldr	r3, [r3, #12]
 8011e30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011e34:	6021      	str	r1, [r4, #0]
 8011e36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011e3a:	bd70      	pop	{r4, r5, r6, pc}
 8011e3c:	080141ea 	.word	0x080141ea
 8011e40:	08014375 	.word	0x08014375

08011e44 <__multadd>:
 8011e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e48:	690d      	ldr	r5, [r1, #16]
 8011e4a:	4607      	mov	r7, r0
 8011e4c:	460c      	mov	r4, r1
 8011e4e:	461e      	mov	r6, r3
 8011e50:	f101 0c14 	add.w	ip, r1, #20
 8011e54:	2000      	movs	r0, #0
 8011e56:	f8dc 3000 	ldr.w	r3, [ip]
 8011e5a:	b299      	uxth	r1, r3
 8011e5c:	fb02 6101 	mla	r1, r2, r1, r6
 8011e60:	0c1e      	lsrs	r6, r3, #16
 8011e62:	0c0b      	lsrs	r3, r1, #16
 8011e64:	fb02 3306 	mla	r3, r2, r6, r3
 8011e68:	b289      	uxth	r1, r1
 8011e6a:	3001      	adds	r0, #1
 8011e6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011e70:	4285      	cmp	r5, r0
 8011e72:	f84c 1b04 	str.w	r1, [ip], #4
 8011e76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011e7a:	dcec      	bgt.n	8011e56 <__multadd+0x12>
 8011e7c:	b30e      	cbz	r6, 8011ec2 <__multadd+0x7e>
 8011e7e:	68a3      	ldr	r3, [r4, #8]
 8011e80:	42ab      	cmp	r3, r5
 8011e82:	dc19      	bgt.n	8011eb8 <__multadd+0x74>
 8011e84:	6861      	ldr	r1, [r4, #4]
 8011e86:	4638      	mov	r0, r7
 8011e88:	3101      	adds	r1, #1
 8011e8a:	f7ff ff79 	bl	8011d80 <_Balloc>
 8011e8e:	4680      	mov	r8, r0
 8011e90:	b928      	cbnz	r0, 8011e9e <__multadd+0x5a>
 8011e92:	4602      	mov	r2, r0
 8011e94:	4b0c      	ldr	r3, [pc, #48]	@ (8011ec8 <__multadd+0x84>)
 8011e96:	480d      	ldr	r0, [pc, #52]	@ (8011ecc <__multadd+0x88>)
 8011e98:	21ba      	movs	r1, #186	@ 0xba
 8011e9a:	f7fe fcad 	bl	80107f8 <__assert_func>
 8011e9e:	6922      	ldr	r2, [r4, #16]
 8011ea0:	3202      	adds	r2, #2
 8011ea2:	f104 010c 	add.w	r1, r4, #12
 8011ea6:	0092      	lsls	r2, r2, #2
 8011ea8:	300c      	adds	r0, #12
 8011eaa:	f7fe fc8e 	bl	80107ca <memcpy>
 8011eae:	4621      	mov	r1, r4
 8011eb0:	4638      	mov	r0, r7
 8011eb2:	f7ff ffa5 	bl	8011e00 <_Bfree>
 8011eb6:	4644      	mov	r4, r8
 8011eb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011ebc:	3501      	adds	r5, #1
 8011ebe:	615e      	str	r6, [r3, #20]
 8011ec0:	6125      	str	r5, [r4, #16]
 8011ec2:	4620      	mov	r0, r4
 8011ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ec8:	08014304 	.word	0x08014304
 8011ecc:	08014375 	.word	0x08014375

08011ed0 <__s2b>:
 8011ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ed4:	460c      	mov	r4, r1
 8011ed6:	4615      	mov	r5, r2
 8011ed8:	461f      	mov	r7, r3
 8011eda:	2209      	movs	r2, #9
 8011edc:	3308      	adds	r3, #8
 8011ede:	4606      	mov	r6, r0
 8011ee0:	fb93 f3f2 	sdiv	r3, r3, r2
 8011ee4:	2100      	movs	r1, #0
 8011ee6:	2201      	movs	r2, #1
 8011ee8:	429a      	cmp	r2, r3
 8011eea:	db09      	blt.n	8011f00 <__s2b+0x30>
 8011eec:	4630      	mov	r0, r6
 8011eee:	f7ff ff47 	bl	8011d80 <_Balloc>
 8011ef2:	b940      	cbnz	r0, 8011f06 <__s2b+0x36>
 8011ef4:	4602      	mov	r2, r0
 8011ef6:	4b19      	ldr	r3, [pc, #100]	@ (8011f5c <__s2b+0x8c>)
 8011ef8:	4819      	ldr	r0, [pc, #100]	@ (8011f60 <__s2b+0x90>)
 8011efa:	21d3      	movs	r1, #211	@ 0xd3
 8011efc:	f7fe fc7c 	bl	80107f8 <__assert_func>
 8011f00:	0052      	lsls	r2, r2, #1
 8011f02:	3101      	adds	r1, #1
 8011f04:	e7f0      	b.n	8011ee8 <__s2b+0x18>
 8011f06:	9b08      	ldr	r3, [sp, #32]
 8011f08:	6143      	str	r3, [r0, #20]
 8011f0a:	2d09      	cmp	r5, #9
 8011f0c:	f04f 0301 	mov.w	r3, #1
 8011f10:	6103      	str	r3, [r0, #16]
 8011f12:	dd16      	ble.n	8011f42 <__s2b+0x72>
 8011f14:	f104 0909 	add.w	r9, r4, #9
 8011f18:	46c8      	mov	r8, r9
 8011f1a:	442c      	add	r4, r5
 8011f1c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011f20:	4601      	mov	r1, r0
 8011f22:	3b30      	subs	r3, #48	@ 0x30
 8011f24:	220a      	movs	r2, #10
 8011f26:	4630      	mov	r0, r6
 8011f28:	f7ff ff8c 	bl	8011e44 <__multadd>
 8011f2c:	45a0      	cmp	r8, r4
 8011f2e:	d1f5      	bne.n	8011f1c <__s2b+0x4c>
 8011f30:	f1a5 0408 	sub.w	r4, r5, #8
 8011f34:	444c      	add	r4, r9
 8011f36:	1b2d      	subs	r5, r5, r4
 8011f38:	1963      	adds	r3, r4, r5
 8011f3a:	42bb      	cmp	r3, r7
 8011f3c:	db04      	blt.n	8011f48 <__s2b+0x78>
 8011f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f42:	340a      	adds	r4, #10
 8011f44:	2509      	movs	r5, #9
 8011f46:	e7f6      	b.n	8011f36 <__s2b+0x66>
 8011f48:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011f4c:	4601      	mov	r1, r0
 8011f4e:	3b30      	subs	r3, #48	@ 0x30
 8011f50:	220a      	movs	r2, #10
 8011f52:	4630      	mov	r0, r6
 8011f54:	f7ff ff76 	bl	8011e44 <__multadd>
 8011f58:	e7ee      	b.n	8011f38 <__s2b+0x68>
 8011f5a:	bf00      	nop
 8011f5c:	08014304 	.word	0x08014304
 8011f60:	08014375 	.word	0x08014375

08011f64 <__hi0bits>:
 8011f64:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011f68:	4603      	mov	r3, r0
 8011f6a:	bf36      	itet	cc
 8011f6c:	0403      	lslcc	r3, r0, #16
 8011f6e:	2000      	movcs	r0, #0
 8011f70:	2010      	movcc	r0, #16
 8011f72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011f76:	bf3c      	itt	cc
 8011f78:	021b      	lslcc	r3, r3, #8
 8011f7a:	3008      	addcc	r0, #8
 8011f7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011f80:	bf3c      	itt	cc
 8011f82:	011b      	lslcc	r3, r3, #4
 8011f84:	3004      	addcc	r0, #4
 8011f86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011f8a:	bf3c      	itt	cc
 8011f8c:	009b      	lslcc	r3, r3, #2
 8011f8e:	3002      	addcc	r0, #2
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	db05      	blt.n	8011fa0 <__hi0bits+0x3c>
 8011f94:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011f98:	f100 0001 	add.w	r0, r0, #1
 8011f9c:	bf08      	it	eq
 8011f9e:	2020      	moveq	r0, #32
 8011fa0:	4770      	bx	lr

08011fa2 <__lo0bits>:
 8011fa2:	6803      	ldr	r3, [r0, #0]
 8011fa4:	4602      	mov	r2, r0
 8011fa6:	f013 0007 	ands.w	r0, r3, #7
 8011faa:	d00b      	beq.n	8011fc4 <__lo0bits+0x22>
 8011fac:	07d9      	lsls	r1, r3, #31
 8011fae:	d421      	bmi.n	8011ff4 <__lo0bits+0x52>
 8011fb0:	0798      	lsls	r0, r3, #30
 8011fb2:	bf49      	itett	mi
 8011fb4:	085b      	lsrmi	r3, r3, #1
 8011fb6:	089b      	lsrpl	r3, r3, #2
 8011fb8:	2001      	movmi	r0, #1
 8011fba:	6013      	strmi	r3, [r2, #0]
 8011fbc:	bf5c      	itt	pl
 8011fbe:	6013      	strpl	r3, [r2, #0]
 8011fc0:	2002      	movpl	r0, #2
 8011fc2:	4770      	bx	lr
 8011fc4:	b299      	uxth	r1, r3
 8011fc6:	b909      	cbnz	r1, 8011fcc <__lo0bits+0x2a>
 8011fc8:	0c1b      	lsrs	r3, r3, #16
 8011fca:	2010      	movs	r0, #16
 8011fcc:	b2d9      	uxtb	r1, r3
 8011fce:	b909      	cbnz	r1, 8011fd4 <__lo0bits+0x32>
 8011fd0:	3008      	adds	r0, #8
 8011fd2:	0a1b      	lsrs	r3, r3, #8
 8011fd4:	0719      	lsls	r1, r3, #28
 8011fd6:	bf04      	itt	eq
 8011fd8:	091b      	lsreq	r3, r3, #4
 8011fda:	3004      	addeq	r0, #4
 8011fdc:	0799      	lsls	r1, r3, #30
 8011fde:	bf04      	itt	eq
 8011fe0:	089b      	lsreq	r3, r3, #2
 8011fe2:	3002      	addeq	r0, #2
 8011fe4:	07d9      	lsls	r1, r3, #31
 8011fe6:	d403      	bmi.n	8011ff0 <__lo0bits+0x4e>
 8011fe8:	085b      	lsrs	r3, r3, #1
 8011fea:	f100 0001 	add.w	r0, r0, #1
 8011fee:	d003      	beq.n	8011ff8 <__lo0bits+0x56>
 8011ff0:	6013      	str	r3, [r2, #0]
 8011ff2:	4770      	bx	lr
 8011ff4:	2000      	movs	r0, #0
 8011ff6:	4770      	bx	lr
 8011ff8:	2020      	movs	r0, #32
 8011ffa:	4770      	bx	lr

08011ffc <__i2b>:
 8011ffc:	b510      	push	{r4, lr}
 8011ffe:	460c      	mov	r4, r1
 8012000:	2101      	movs	r1, #1
 8012002:	f7ff febd 	bl	8011d80 <_Balloc>
 8012006:	4602      	mov	r2, r0
 8012008:	b928      	cbnz	r0, 8012016 <__i2b+0x1a>
 801200a:	4b05      	ldr	r3, [pc, #20]	@ (8012020 <__i2b+0x24>)
 801200c:	4805      	ldr	r0, [pc, #20]	@ (8012024 <__i2b+0x28>)
 801200e:	f240 1145 	movw	r1, #325	@ 0x145
 8012012:	f7fe fbf1 	bl	80107f8 <__assert_func>
 8012016:	2301      	movs	r3, #1
 8012018:	6144      	str	r4, [r0, #20]
 801201a:	6103      	str	r3, [r0, #16]
 801201c:	bd10      	pop	{r4, pc}
 801201e:	bf00      	nop
 8012020:	08014304 	.word	0x08014304
 8012024:	08014375 	.word	0x08014375

08012028 <__multiply>:
 8012028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801202c:	4617      	mov	r7, r2
 801202e:	690a      	ldr	r2, [r1, #16]
 8012030:	693b      	ldr	r3, [r7, #16]
 8012032:	429a      	cmp	r2, r3
 8012034:	bfa8      	it	ge
 8012036:	463b      	movge	r3, r7
 8012038:	4689      	mov	r9, r1
 801203a:	bfa4      	itt	ge
 801203c:	460f      	movge	r7, r1
 801203e:	4699      	movge	r9, r3
 8012040:	693d      	ldr	r5, [r7, #16]
 8012042:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012046:	68bb      	ldr	r3, [r7, #8]
 8012048:	6879      	ldr	r1, [r7, #4]
 801204a:	eb05 060a 	add.w	r6, r5, sl
 801204e:	42b3      	cmp	r3, r6
 8012050:	b085      	sub	sp, #20
 8012052:	bfb8      	it	lt
 8012054:	3101      	addlt	r1, #1
 8012056:	f7ff fe93 	bl	8011d80 <_Balloc>
 801205a:	b930      	cbnz	r0, 801206a <__multiply+0x42>
 801205c:	4602      	mov	r2, r0
 801205e:	4b41      	ldr	r3, [pc, #260]	@ (8012164 <__multiply+0x13c>)
 8012060:	4841      	ldr	r0, [pc, #260]	@ (8012168 <__multiply+0x140>)
 8012062:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012066:	f7fe fbc7 	bl	80107f8 <__assert_func>
 801206a:	f100 0414 	add.w	r4, r0, #20
 801206e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8012072:	4623      	mov	r3, r4
 8012074:	2200      	movs	r2, #0
 8012076:	4573      	cmp	r3, lr
 8012078:	d320      	bcc.n	80120bc <__multiply+0x94>
 801207a:	f107 0814 	add.w	r8, r7, #20
 801207e:	f109 0114 	add.w	r1, r9, #20
 8012082:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8012086:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801208a:	9302      	str	r3, [sp, #8]
 801208c:	1beb      	subs	r3, r5, r7
 801208e:	3b15      	subs	r3, #21
 8012090:	f023 0303 	bic.w	r3, r3, #3
 8012094:	3304      	adds	r3, #4
 8012096:	3715      	adds	r7, #21
 8012098:	42bd      	cmp	r5, r7
 801209a:	bf38      	it	cc
 801209c:	2304      	movcc	r3, #4
 801209e:	9301      	str	r3, [sp, #4]
 80120a0:	9b02      	ldr	r3, [sp, #8]
 80120a2:	9103      	str	r1, [sp, #12]
 80120a4:	428b      	cmp	r3, r1
 80120a6:	d80c      	bhi.n	80120c2 <__multiply+0x9a>
 80120a8:	2e00      	cmp	r6, #0
 80120aa:	dd03      	ble.n	80120b4 <__multiply+0x8c>
 80120ac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d055      	beq.n	8012160 <__multiply+0x138>
 80120b4:	6106      	str	r6, [r0, #16]
 80120b6:	b005      	add	sp, #20
 80120b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120bc:	f843 2b04 	str.w	r2, [r3], #4
 80120c0:	e7d9      	b.n	8012076 <__multiply+0x4e>
 80120c2:	f8b1 a000 	ldrh.w	sl, [r1]
 80120c6:	f1ba 0f00 	cmp.w	sl, #0
 80120ca:	d01f      	beq.n	801210c <__multiply+0xe4>
 80120cc:	46c4      	mov	ip, r8
 80120ce:	46a1      	mov	r9, r4
 80120d0:	2700      	movs	r7, #0
 80120d2:	f85c 2b04 	ldr.w	r2, [ip], #4
 80120d6:	f8d9 3000 	ldr.w	r3, [r9]
 80120da:	fa1f fb82 	uxth.w	fp, r2
 80120de:	b29b      	uxth	r3, r3
 80120e0:	fb0a 330b 	mla	r3, sl, fp, r3
 80120e4:	443b      	add	r3, r7
 80120e6:	f8d9 7000 	ldr.w	r7, [r9]
 80120ea:	0c12      	lsrs	r2, r2, #16
 80120ec:	0c3f      	lsrs	r7, r7, #16
 80120ee:	fb0a 7202 	mla	r2, sl, r2, r7
 80120f2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80120f6:	b29b      	uxth	r3, r3
 80120f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80120fc:	4565      	cmp	r5, ip
 80120fe:	f849 3b04 	str.w	r3, [r9], #4
 8012102:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8012106:	d8e4      	bhi.n	80120d2 <__multiply+0xaa>
 8012108:	9b01      	ldr	r3, [sp, #4]
 801210a:	50e7      	str	r7, [r4, r3]
 801210c:	9b03      	ldr	r3, [sp, #12]
 801210e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012112:	3104      	adds	r1, #4
 8012114:	f1b9 0f00 	cmp.w	r9, #0
 8012118:	d020      	beq.n	801215c <__multiply+0x134>
 801211a:	6823      	ldr	r3, [r4, #0]
 801211c:	4647      	mov	r7, r8
 801211e:	46a4      	mov	ip, r4
 8012120:	f04f 0a00 	mov.w	sl, #0
 8012124:	f8b7 b000 	ldrh.w	fp, [r7]
 8012128:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801212c:	fb09 220b 	mla	r2, r9, fp, r2
 8012130:	4452      	add	r2, sl
 8012132:	b29b      	uxth	r3, r3
 8012134:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012138:	f84c 3b04 	str.w	r3, [ip], #4
 801213c:	f857 3b04 	ldr.w	r3, [r7], #4
 8012140:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012144:	f8bc 3000 	ldrh.w	r3, [ip]
 8012148:	fb09 330a 	mla	r3, r9, sl, r3
 801214c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8012150:	42bd      	cmp	r5, r7
 8012152:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012156:	d8e5      	bhi.n	8012124 <__multiply+0xfc>
 8012158:	9a01      	ldr	r2, [sp, #4]
 801215a:	50a3      	str	r3, [r4, r2]
 801215c:	3404      	adds	r4, #4
 801215e:	e79f      	b.n	80120a0 <__multiply+0x78>
 8012160:	3e01      	subs	r6, #1
 8012162:	e7a1      	b.n	80120a8 <__multiply+0x80>
 8012164:	08014304 	.word	0x08014304
 8012168:	08014375 	.word	0x08014375

0801216c <__pow5mult>:
 801216c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012170:	4615      	mov	r5, r2
 8012172:	f012 0203 	ands.w	r2, r2, #3
 8012176:	4607      	mov	r7, r0
 8012178:	460e      	mov	r6, r1
 801217a:	d007      	beq.n	801218c <__pow5mult+0x20>
 801217c:	4c25      	ldr	r4, [pc, #148]	@ (8012214 <__pow5mult+0xa8>)
 801217e:	3a01      	subs	r2, #1
 8012180:	2300      	movs	r3, #0
 8012182:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012186:	f7ff fe5d 	bl	8011e44 <__multadd>
 801218a:	4606      	mov	r6, r0
 801218c:	10ad      	asrs	r5, r5, #2
 801218e:	d03d      	beq.n	801220c <__pow5mult+0xa0>
 8012190:	69fc      	ldr	r4, [r7, #28]
 8012192:	b97c      	cbnz	r4, 80121b4 <__pow5mult+0x48>
 8012194:	2010      	movs	r0, #16
 8012196:	f7ff fd2b 	bl	8011bf0 <malloc>
 801219a:	4602      	mov	r2, r0
 801219c:	61f8      	str	r0, [r7, #28]
 801219e:	b928      	cbnz	r0, 80121ac <__pow5mult+0x40>
 80121a0:	4b1d      	ldr	r3, [pc, #116]	@ (8012218 <__pow5mult+0xac>)
 80121a2:	481e      	ldr	r0, [pc, #120]	@ (801221c <__pow5mult+0xb0>)
 80121a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80121a8:	f7fe fb26 	bl	80107f8 <__assert_func>
 80121ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80121b0:	6004      	str	r4, [r0, #0]
 80121b2:	60c4      	str	r4, [r0, #12]
 80121b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80121b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80121bc:	b94c      	cbnz	r4, 80121d2 <__pow5mult+0x66>
 80121be:	f240 2171 	movw	r1, #625	@ 0x271
 80121c2:	4638      	mov	r0, r7
 80121c4:	f7ff ff1a 	bl	8011ffc <__i2b>
 80121c8:	2300      	movs	r3, #0
 80121ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80121ce:	4604      	mov	r4, r0
 80121d0:	6003      	str	r3, [r0, #0]
 80121d2:	f04f 0900 	mov.w	r9, #0
 80121d6:	07eb      	lsls	r3, r5, #31
 80121d8:	d50a      	bpl.n	80121f0 <__pow5mult+0x84>
 80121da:	4631      	mov	r1, r6
 80121dc:	4622      	mov	r2, r4
 80121de:	4638      	mov	r0, r7
 80121e0:	f7ff ff22 	bl	8012028 <__multiply>
 80121e4:	4631      	mov	r1, r6
 80121e6:	4680      	mov	r8, r0
 80121e8:	4638      	mov	r0, r7
 80121ea:	f7ff fe09 	bl	8011e00 <_Bfree>
 80121ee:	4646      	mov	r6, r8
 80121f0:	106d      	asrs	r5, r5, #1
 80121f2:	d00b      	beq.n	801220c <__pow5mult+0xa0>
 80121f4:	6820      	ldr	r0, [r4, #0]
 80121f6:	b938      	cbnz	r0, 8012208 <__pow5mult+0x9c>
 80121f8:	4622      	mov	r2, r4
 80121fa:	4621      	mov	r1, r4
 80121fc:	4638      	mov	r0, r7
 80121fe:	f7ff ff13 	bl	8012028 <__multiply>
 8012202:	6020      	str	r0, [r4, #0]
 8012204:	f8c0 9000 	str.w	r9, [r0]
 8012208:	4604      	mov	r4, r0
 801220a:	e7e4      	b.n	80121d6 <__pow5mult+0x6a>
 801220c:	4630      	mov	r0, r6
 801220e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012212:	bf00      	nop
 8012214:	08014534 	.word	0x08014534
 8012218:	080141ea 	.word	0x080141ea
 801221c:	08014375 	.word	0x08014375

08012220 <__lshift>:
 8012220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012224:	460c      	mov	r4, r1
 8012226:	6849      	ldr	r1, [r1, #4]
 8012228:	6923      	ldr	r3, [r4, #16]
 801222a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801222e:	68a3      	ldr	r3, [r4, #8]
 8012230:	4607      	mov	r7, r0
 8012232:	4691      	mov	r9, r2
 8012234:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012238:	f108 0601 	add.w	r6, r8, #1
 801223c:	42b3      	cmp	r3, r6
 801223e:	db0b      	blt.n	8012258 <__lshift+0x38>
 8012240:	4638      	mov	r0, r7
 8012242:	f7ff fd9d 	bl	8011d80 <_Balloc>
 8012246:	4605      	mov	r5, r0
 8012248:	b948      	cbnz	r0, 801225e <__lshift+0x3e>
 801224a:	4602      	mov	r2, r0
 801224c:	4b28      	ldr	r3, [pc, #160]	@ (80122f0 <__lshift+0xd0>)
 801224e:	4829      	ldr	r0, [pc, #164]	@ (80122f4 <__lshift+0xd4>)
 8012250:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012254:	f7fe fad0 	bl	80107f8 <__assert_func>
 8012258:	3101      	adds	r1, #1
 801225a:	005b      	lsls	r3, r3, #1
 801225c:	e7ee      	b.n	801223c <__lshift+0x1c>
 801225e:	2300      	movs	r3, #0
 8012260:	f100 0114 	add.w	r1, r0, #20
 8012264:	f100 0210 	add.w	r2, r0, #16
 8012268:	4618      	mov	r0, r3
 801226a:	4553      	cmp	r3, sl
 801226c:	db33      	blt.n	80122d6 <__lshift+0xb6>
 801226e:	6920      	ldr	r0, [r4, #16]
 8012270:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012274:	f104 0314 	add.w	r3, r4, #20
 8012278:	f019 091f 	ands.w	r9, r9, #31
 801227c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012280:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012284:	d02b      	beq.n	80122de <__lshift+0xbe>
 8012286:	f1c9 0e20 	rsb	lr, r9, #32
 801228a:	468a      	mov	sl, r1
 801228c:	2200      	movs	r2, #0
 801228e:	6818      	ldr	r0, [r3, #0]
 8012290:	fa00 f009 	lsl.w	r0, r0, r9
 8012294:	4310      	orrs	r0, r2
 8012296:	f84a 0b04 	str.w	r0, [sl], #4
 801229a:	f853 2b04 	ldr.w	r2, [r3], #4
 801229e:	459c      	cmp	ip, r3
 80122a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80122a4:	d8f3      	bhi.n	801228e <__lshift+0x6e>
 80122a6:	ebac 0304 	sub.w	r3, ip, r4
 80122aa:	3b15      	subs	r3, #21
 80122ac:	f023 0303 	bic.w	r3, r3, #3
 80122b0:	3304      	adds	r3, #4
 80122b2:	f104 0015 	add.w	r0, r4, #21
 80122b6:	4560      	cmp	r0, ip
 80122b8:	bf88      	it	hi
 80122ba:	2304      	movhi	r3, #4
 80122bc:	50ca      	str	r2, [r1, r3]
 80122be:	b10a      	cbz	r2, 80122c4 <__lshift+0xa4>
 80122c0:	f108 0602 	add.w	r6, r8, #2
 80122c4:	3e01      	subs	r6, #1
 80122c6:	4638      	mov	r0, r7
 80122c8:	612e      	str	r6, [r5, #16]
 80122ca:	4621      	mov	r1, r4
 80122cc:	f7ff fd98 	bl	8011e00 <_Bfree>
 80122d0:	4628      	mov	r0, r5
 80122d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80122da:	3301      	adds	r3, #1
 80122dc:	e7c5      	b.n	801226a <__lshift+0x4a>
 80122de:	3904      	subs	r1, #4
 80122e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80122e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80122e8:	459c      	cmp	ip, r3
 80122ea:	d8f9      	bhi.n	80122e0 <__lshift+0xc0>
 80122ec:	e7ea      	b.n	80122c4 <__lshift+0xa4>
 80122ee:	bf00      	nop
 80122f0:	08014304 	.word	0x08014304
 80122f4:	08014375 	.word	0x08014375

080122f8 <__mcmp>:
 80122f8:	690a      	ldr	r2, [r1, #16]
 80122fa:	4603      	mov	r3, r0
 80122fc:	6900      	ldr	r0, [r0, #16]
 80122fe:	1a80      	subs	r0, r0, r2
 8012300:	b530      	push	{r4, r5, lr}
 8012302:	d10e      	bne.n	8012322 <__mcmp+0x2a>
 8012304:	3314      	adds	r3, #20
 8012306:	3114      	adds	r1, #20
 8012308:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801230c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012310:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012314:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012318:	4295      	cmp	r5, r2
 801231a:	d003      	beq.n	8012324 <__mcmp+0x2c>
 801231c:	d205      	bcs.n	801232a <__mcmp+0x32>
 801231e:	f04f 30ff 	mov.w	r0, #4294967295
 8012322:	bd30      	pop	{r4, r5, pc}
 8012324:	42a3      	cmp	r3, r4
 8012326:	d3f3      	bcc.n	8012310 <__mcmp+0x18>
 8012328:	e7fb      	b.n	8012322 <__mcmp+0x2a>
 801232a:	2001      	movs	r0, #1
 801232c:	e7f9      	b.n	8012322 <__mcmp+0x2a>
	...

08012330 <__mdiff>:
 8012330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012334:	4689      	mov	r9, r1
 8012336:	4606      	mov	r6, r0
 8012338:	4611      	mov	r1, r2
 801233a:	4648      	mov	r0, r9
 801233c:	4614      	mov	r4, r2
 801233e:	f7ff ffdb 	bl	80122f8 <__mcmp>
 8012342:	1e05      	subs	r5, r0, #0
 8012344:	d112      	bne.n	801236c <__mdiff+0x3c>
 8012346:	4629      	mov	r1, r5
 8012348:	4630      	mov	r0, r6
 801234a:	f7ff fd19 	bl	8011d80 <_Balloc>
 801234e:	4602      	mov	r2, r0
 8012350:	b928      	cbnz	r0, 801235e <__mdiff+0x2e>
 8012352:	4b3f      	ldr	r3, [pc, #252]	@ (8012450 <__mdiff+0x120>)
 8012354:	f240 2137 	movw	r1, #567	@ 0x237
 8012358:	483e      	ldr	r0, [pc, #248]	@ (8012454 <__mdiff+0x124>)
 801235a:	f7fe fa4d 	bl	80107f8 <__assert_func>
 801235e:	2301      	movs	r3, #1
 8012360:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012364:	4610      	mov	r0, r2
 8012366:	b003      	add	sp, #12
 8012368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801236c:	bfbc      	itt	lt
 801236e:	464b      	movlt	r3, r9
 8012370:	46a1      	movlt	r9, r4
 8012372:	4630      	mov	r0, r6
 8012374:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012378:	bfba      	itte	lt
 801237a:	461c      	movlt	r4, r3
 801237c:	2501      	movlt	r5, #1
 801237e:	2500      	movge	r5, #0
 8012380:	f7ff fcfe 	bl	8011d80 <_Balloc>
 8012384:	4602      	mov	r2, r0
 8012386:	b918      	cbnz	r0, 8012390 <__mdiff+0x60>
 8012388:	4b31      	ldr	r3, [pc, #196]	@ (8012450 <__mdiff+0x120>)
 801238a:	f240 2145 	movw	r1, #581	@ 0x245
 801238e:	e7e3      	b.n	8012358 <__mdiff+0x28>
 8012390:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012394:	6926      	ldr	r6, [r4, #16]
 8012396:	60c5      	str	r5, [r0, #12]
 8012398:	f109 0310 	add.w	r3, r9, #16
 801239c:	f109 0514 	add.w	r5, r9, #20
 80123a0:	f104 0e14 	add.w	lr, r4, #20
 80123a4:	f100 0b14 	add.w	fp, r0, #20
 80123a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80123ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80123b0:	9301      	str	r3, [sp, #4]
 80123b2:	46d9      	mov	r9, fp
 80123b4:	f04f 0c00 	mov.w	ip, #0
 80123b8:	9b01      	ldr	r3, [sp, #4]
 80123ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 80123be:	f853 af04 	ldr.w	sl, [r3, #4]!
 80123c2:	9301      	str	r3, [sp, #4]
 80123c4:	fa1f f38a 	uxth.w	r3, sl
 80123c8:	4619      	mov	r1, r3
 80123ca:	b283      	uxth	r3, r0
 80123cc:	1acb      	subs	r3, r1, r3
 80123ce:	0c00      	lsrs	r0, r0, #16
 80123d0:	4463      	add	r3, ip
 80123d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80123d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80123da:	b29b      	uxth	r3, r3
 80123dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80123e0:	4576      	cmp	r6, lr
 80123e2:	f849 3b04 	str.w	r3, [r9], #4
 80123e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80123ea:	d8e5      	bhi.n	80123b8 <__mdiff+0x88>
 80123ec:	1b33      	subs	r3, r6, r4
 80123ee:	3b15      	subs	r3, #21
 80123f0:	f023 0303 	bic.w	r3, r3, #3
 80123f4:	3415      	adds	r4, #21
 80123f6:	3304      	adds	r3, #4
 80123f8:	42a6      	cmp	r6, r4
 80123fa:	bf38      	it	cc
 80123fc:	2304      	movcc	r3, #4
 80123fe:	441d      	add	r5, r3
 8012400:	445b      	add	r3, fp
 8012402:	461e      	mov	r6, r3
 8012404:	462c      	mov	r4, r5
 8012406:	4544      	cmp	r4, r8
 8012408:	d30e      	bcc.n	8012428 <__mdiff+0xf8>
 801240a:	f108 0103 	add.w	r1, r8, #3
 801240e:	1b49      	subs	r1, r1, r5
 8012410:	f021 0103 	bic.w	r1, r1, #3
 8012414:	3d03      	subs	r5, #3
 8012416:	45a8      	cmp	r8, r5
 8012418:	bf38      	it	cc
 801241a:	2100      	movcc	r1, #0
 801241c:	440b      	add	r3, r1
 801241e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012422:	b191      	cbz	r1, 801244a <__mdiff+0x11a>
 8012424:	6117      	str	r7, [r2, #16]
 8012426:	e79d      	b.n	8012364 <__mdiff+0x34>
 8012428:	f854 1b04 	ldr.w	r1, [r4], #4
 801242c:	46e6      	mov	lr, ip
 801242e:	0c08      	lsrs	r0, r1, #16
 8012430:	fa1c fc81 	uxtah	ip, ip, r1
 8012434:	4471      	add	r1, lr
 8012436:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801243a:	b289      	uxth	r1, r1
 801243c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012440:	f846 1b04 	str.w	r1, [r6], #4
 8012444:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012448:	e7dd      	b.n	8012406 <__mdiff+0xd6>
 801244a:	3f01      	subs	r7, #1
 801244c:	e7e7      	b.n	801241e <__mdiff+0xee>
 801244e:	bf00      	nop
 8012450:	08014304 	.word	0x08014304
 8012454:	08014375 	.word	0x08014375

08012458 <__ulp>:
 8012458:	b082      	sub	sp, #8
 801245a:	ed8d 0b00 	vstr	d0, [sp]
 801245e:	9a01      	ldr	r2, [sp, #4]
 8012460:	4b0f      	ldr	r3, [pc, #60]	@ (80124a0 <__ulp+0x48>)
 8012462:	4013      	ands	r3, r2
 8012464:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8012468:	2b00      	cmp	r3, #0
 801246a:	dc08      	bgt.n	801247e <__ulp+0x26>
 801246c:	425b      	negs	r3, r3
 801246e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8012472:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012476:	da04      	bge.n	8012482 <__ulp+0x2a>
 8012478:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801247c:	4113      	asrs	r3, r2
 801247e:	2200      	movs	r2, #0
 8012480:	e008      	b.n	8012494 <__ulp+0x3c>
 8012482:	f1a2 0314 	sub.w	r3, r2, #20
 8012486:	2b1e      	cmp	r3, #30
 8012488:	bfda      	itte	le
 801248a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801248e:	40da      	lsrle	r2, r3
 8012490:	2201      	movgt	r2, #1
 8012492:	2300      	movs	r3, #0
 8012494:	4619      	mov	r1, r3
 8012496:	4610      	mov	r0, r2
 8012498:	ec41 0b10 	vmov	d0, r0, r1
 801249c:	b002      	add	sp, #8
 801249e:	4770      	bx	lr
 80124a0:	7ff00000 	.word	0x7ff00000

080124a4 <__b2d>:
 80124a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124a8:	6906      	ldr	r6, [r0, #16]
 80124aa:	f100 0814 	add.w	r8, r0, #20
 80124ae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80124b2:	1f37      	subs	r7, r6, #4
 80124b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80124b8:	4610      	mov	r0, r2
 80124ba:	f7ff fd53 	bl	8011f64 <__hi0bits>
 80124be:	f1c0 0320 	rsb	r3, r0, #32
 80124c2:	280a      	cmp	r0, #10
 80124c4:	600b      	str	r3, [r1, #0]
 80124c6:	491b      	ldr	r1, [pc, #108]	@ (8012534 <__b2d+0x90>)
 80124c8:	dc15      	bgt.n	80124f6 <__b2d+0x52>
 80124ca:	f1c0 0c0b 	rsb	ip, r0, #11
 80124ce:	fa22 f30c 	lsr.w	r3, r2, ip
 80124d2:	45b8      	cmp	r8, r7
 80124d4:	ea43 0501 	orr.w	r5, r3, r1
 80124d8:	bf34      	ite	cc
 80124da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80124de:	2300      	movcs	r3, #0
 80124e0:	3015      	adds	r0, #21
 80124e2:	fa02 f000 	lsl.w	r0, r2, r0
 80124e6:	fa23 f30c 	lsr.w	r3, r3, ip
 80124ea:	4303      	orrs	r3, r0
 80124ec:	461c      	mov	r4, r3
 80124ee:	ec45 4b10 	vmov	d0, r4, r5
 80124f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124f6:	45b8      	cmp	r8, r7
 80124f8:	bf3a      	itte	cc
 80124fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80124fe:	f1a6 0708 	subcc.w	r7, r6, #8
 8012502:	2300      	movcs	r3, #0
 8012504:	380b      	subs	r0, #11
 8012506:	d012      	beq.n	801252e <__b2d+0x8a>
 8012508:	f1c0 0120 	rsb	r1, r0, #32
 801250c:	fa23 f401 	lsr.w	r4, r3, r1
 8012510:	4082      	lsls	r2, r0
 8012512:	4322      	orrs	r2, r4
 8012514:	4547      	cmp	r7, r8
 8012516:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801251a:	bf8c      	ite	hi
 801251c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012520:	2200      	movls	r2, #0
 8012522:	4083      	lsls	r3, r0
 8012524:	40ca      	lsrs	r2, r1
 8012526:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801252a:	4313      	orrs	r3, r2
 801252c:	e7de      	b.n	80124ec <__b2d+0x48>
 801252e:	ea42 0501 	orr.w	r5, r2, r1
 8012532:	e7db      	b.n	80124ec <__b2d+0x48>
 8012534:	3ff00000 	.word	0x3ff00000

08012538 <__d2b>:
 8012538:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801253c:	460f      	mov	r7, r1
 801253e:	2101      	movs	r1, #1
 8012540:	ec59 8b10 	vmov	r8, r9, d0
 8012544:	4616      	mov	r6, r2
 8012546:	f7ff fc1b 	bl	8011d80 <_Balloc>
 801254a:	4604      	mov	r4, r0
 801254c:	b930      	cbnz	r0, 801255c <__d2b+0x24>
 801254e:	4602      	mov	r2, r0
 8012550:	4b23      	ldr	r3, [pc, #140]	@ (80125e0 <__d2b+0xa8>)
 8012552:	4824      	ldr	r0, [pc, #144]	@ (80125e4 <__d2b+0xac>)
 8012554:	f240 310f 	movw	r1, #783	@ 0x30f
 8012558:	f7fe f94e 	bl	80107f8 <__assert_func>
 801255c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012560:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012564:	b10d      	cbz	r5, 801256a <__d2b+0x32>
 8012566:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801256a:	9301      	str	r3, [sp, #4]
 801256c:	f1b8 0300 	subs.w	r3, r8, #0
 8012570:	d023      	beq.n	80125ba <__d2b+0x82>
 8012572:	4668      	mov	r0, sp
 8012574:	9300      	str	r3, [sp, #0]
 8012576:	f7ff fd14 	bl	8011fa2 <__lo0bits>
 801257a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801257e:	b1d0      	cbz	r0, 80125b6 <__d2b+0x7e>
 8012580:	f1c0 0320 	rsb	r3, r0, #32
 8012584:	fa02 f303 	lsl.w	r3, r2, r3
 8012588:	430b      	orrs	r3, r1
 801258a:	40c2      	lsrs	r2, r0
 801258c:	6163      	str	r3, [r4, #20]
 801258e:	9201      	str	r2, [sp, #4]
 8012590:	9b01      	ldr	r3, [sp, #4]
 8012592:	61a3      	str	r3, [r4, #24]
 8012594:	2b00      	cmp	r3, #0
 8012596:	bf0c      	ite	eq
 8012598:	2201      	moveq	r2, #1
 801259a:	2202      	movne	r2, #2
 801259c:	6122      	str	r2, [r4, #16]
 801259e:	b1a5      	cbz	r5, 80125ca <__d2b+0x92>
 80125a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80125a4:	4405      	add	r5, r0
 80125a6:	603d      	str	r5, [r7, #0]
 80125a8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80125ac:	6030      	str	r0, [r6, #0]
 80125ae:	4620      	mov	r0, r4
 80125b0:	b003      	add	sp, #12
 80125b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80125b6:	6161      	str	r1, [r4, #20]
 80125b8:	e7ea      	b.n	8012590 <__d2b+0x58>
 80125ba:	a801      	add	r0, sp, #4
 80125bc:	f7ff fcf1 	bl	8011fa2 <__lo0bits>
 80125c0:	9b01      	ldr	r3, [sp, #4]
 80125c2:	6163      	str	r3, [r4, #20]
 80125c4:	3020      	adds	r0, #32
 80125c6:	2201      	movs	r2, #1
 80125c8:	e7e8      	b.n	801259c <__d2b+0x64>
 80125ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80125ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80125d2:	6038      	str	r0, [r7, #0]
 80125d4:	6918      	ldr	r0, [r3, #16]
 80125d6:	f7ff fcc5 	bl	8011f64 <__hi0bits>
 80125da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80125de:	e7e5      	b.n	80125ac <__d2b+0x74>
 80125e0:	08014304 	.word	0x08014304
 80125e4:	08014375 	.word	0x08014375

080125e8 <__ratio>:
 80125e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125ec:	b085      	sub	sp, #20
 80125ee:	e9cd 1000 	strd	r1, r0, [sp]
 80125f2:	a902      	add	r1, sp, #8
 80125f4:	f7ff ff56 	bl	80124a4 <__b2d>
 80125f8:	9800      	ldr	r0, [sp, #0]
 80125fa:	a903      	add	r1, sp, #12
 80125fc:	ec55 4b10 	vmov	r4, r5, d0
 8012600:	f7ff ff50 	bl	80124a4 <__b2d>
 8012604:	9b01      	ldr	r3, [sp, #4]
 8012606:	6919      	ldr	r1, [r3, #16]
 8012608:	9b00      	ldr	r3, [sp, #0]
 801260a:	691b      	ldr	r3, [r3, #16]
 801260c:	1ac9      	subs	r1, r1, r3
 801260e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8012612:	1a9b      	subs	r3, r3, r2
 8012614:	ec5b ab10 	vmov	sl, fp, d0
 8012618:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801261c:	2b00      	cmp	r3, #0
 801261e:	bfce      	itee	gt
 8012620:	462a      	movgt	r2, r5
 8012622:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012626:	465a      	movle	r2, fp
 8012628:	462f      	mov	r7, r5
 801262a:	46d9      	mov	r9, fp
 801262c:	bfcc      	ite	gt
 801262e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012632:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8012636:	464b      	mov	r3, r9
 8012638:	4652      	mov	r2, sl
 801263a:	4620      	mov	r0, r4
 801263c:	4639      	mov	r1, r7
 801263e:	f7ee f90d 	bl	800085c <__aeabi_ddiv>
 8012642:	ec41 0b10 	vmov	d0, r0, r1
 8012646:	b005      	add	sp, #20
 8012648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801264c <__copybits>:
 801264c:	3901      	subs	r1, #1
 801264e:	b570      	push	{r4, r5, r6, lr}
 8012650:	1149      	asrs	r1, r1, #5
 8012652:	6914      	ldr	r4, [r2, #16]
 8012654:	3101      	adds	r1, #1
 8012656:	f102 0314 	add.w	r3, r2, #20
 801265a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801265e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012662:	1f05      	subs	r5, r0, #4
 8012664:	42a3      	cmp	r3, r4
 8012666:	d30c      	bcc.n	8012682 <__copybits+0x36>
 8012668:	1aa3      	subs	r3, r4, r2
 801266a:	3b11      	subs	r3, #17
 801266c:	f023 0303 	bic.w	r3, r3, #3
 8012670:	3211      	adds	r2, #17
 8012672:	42a2      	cmp	r2, r4
 8012674:	bf88      	it	hi
 8012676:	2300      	movhi	r3, #0
 8012678:	4418      	add	r0, r3
 801267a:	2300      	movs	r3, #0
 801267c:	4288      	cmp	r0, r1
 801267e:	d305      	bcc.n	801268c <__copybits+0x40>
 8012680:	bd70      	pop	{r4, r5, r6, pc}
 8012682:	f853 6b04 	ldr.w	r6, [r3], #4
 8012686:	f845 6f04 	str.w	r6, [r5, #4]!
 801268a:	e7eb      	b.n	8012664 <__copybits+0x18>
 801268c:	f840 3b04 	str.w	r3, [r0], #4
 8012690:	e7f4      	b.n	801267c <__copybits+0x30>

08012692 <__any_on>:
 8012692:	f100 0214 	add.w	r2, r0, #20
 8012696:	6900      	ldr	r0, [r0, #16]
 8012698:	114b      	asrs	r3, r1, #5
 801269a:	4298      	cmp	r0, r3
 801269c:	b510      	push	{r4, lr}
 801269e:	db11      	blt.n	80126c4 <__any_on+0x32>
 80126a0:	dd0a      	ble.n	80126b8 <__any_on+0x26>
 80126a2:	f011 011f 	ands.w	r1, r1, #31
 80126a6:	d007      	beq.n	80126b8 <__any_on+0x26>
 80126a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80126ac:	fa24 f001 	lsr.w	r0, r4, r1
 80126b0:	fa00 f101 	lsl.w	r1, r0, r1
 80126b4:	428c      	cmp	r4, r1
 80126b6:	d10b      	bne.n	80126d0 <__any_on+0x3e>
 80126b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80126bc:	4293      	cmp	r3, r2
 80126be:	d803      	bhi.n	80126c8 <__any_on+0x36>
 80126c0:	2000      	movs	r0, #0
 80126c2:	bd10      	pop	{r4, pc}
 80126c4:	4603      	mov	r3, r0
 80126c6:	e7f7      	b.n	80126b8 <__any_on+0x26>
 80126c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80126cc:	2900      	cmp	r1, #0
 80126ce:	d0f5      	beq.n	80126bc <__any_on+0x2a>
 80126d0:	2001      	movs	r0, #1
 80126d2:	e7f6      	b.n	80126c2 <__any_on+0x30>

080126d4 <__ascii_wctomb>:
 80126d4:	4603      	mov	r3, r0
 80126d6:	4608      	mov	r0, r1
 80126d8:	b141      	cbz	r1, 80126ec <__ascii_wctomb+0x18>
 80126da:	2aff      	cmp	r2, #255	@ 0xff
 80126dc:	d904      	bls.n	80126e8 <__ascii_wctomb+0x14>
 80126de:	228a      	movs	r2, #138	@ 0x8a
 80126e0:	601a      	str	r2, [r3, #0]
 80126e2:	f04f 30ff 	mov.w	r0, #4294967295
 80126e6:	4770      	bx	lr
 80126e8:	700a      	strb	r2, [r1, #0]
 80126ea:	2001      	movs	r0, #1
 80126ec:	4770      	bx	lr

080126ee <__ssputs_r>:
 80126ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126f2:	688e      	ldr	r6, [r1, #8]
 80126f4:	461f      	mov	r7, r3
 80126f6:	42be      	cmp	r6, r7
 80126f8:	680b      	ldr	r3, [r1, #0]
 80126fa:	4682      	mov	sl, r0
 80126fc:	460c      	mov	r4, r1
 80126fe:	4690      	mov	r8, r2
 8012700:	d82d      	bhi.n	801275e <__ssputs_r+0x70>
 8012702:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012706:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801270a:	d026      	beq.n	801275a <__ssputs_r+0x6c>
 801270c:	6965      	ldr	r5, [r4, #20]
 801270e:	6909      	ldr	r1, [r1, #16]
 8012710:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012714:	eba3 0901 	sub.w	r9, r3, r1
 8012718:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801271c:	1c7b      	adds	r3, r7, #1
 801271e:	444b      	add	r3, r9
 8012720:	106d      	asrs	r5, r5, #1
 8012722:	429d      	cmp	r5, r3
 8012724:	bf38      	it	cc
 8012726:	461d      	movcc	r5, r3
 8012728:	0553      	lsls	r3, r2, #21
 801272a:	d527      	bpl.n	801277c <__ssputs_r+0x8e>
 801272c:	4629      	mov	r1, r5
 801272e:	f7ff fa89 	bl	8011c44 <_malloc_r>
 8012732:	4606      	mov	r6, r0
 8012734:	b360      	cbz	r0, 8012790 <__ssputs_r+0xa2>
 8012736:	6921      	ldr	r1, [r4, #16]
 8012738:	464a      	mov	r2, r9
 801273a:	f7fe f846 	bl	80107ca <memcpy>
 801273e:	89a3      	ldrh	r3, [r4, #12]
 8012740:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012748:	81a3      	strh	r3, [r4, #12]
 801274a:	6126      	str	r6, [r4, #16]
 801274c:	6165      	str	r5, [r4, #20]
 801274e:	444e      	add	r6, r9
 8012750:	eba5 0509 	sub.w	r5, r5, r9
 8012754:	6026      	str	r6, [r4, #0]
 8012756:	60a5      	str	r5, [r4, #8]
 8012758:	463e      	mov	r6, r7
 801275a:	42be      	cmp	r6, r7
 801275c:	d900      	bls.n	8012760 <__ssputs_r+0x72>
 801275e:	463e      	mov	r6, r7
 8012760:	6820      	ldr	r0, [r4, #0]
 8012762:	4632      	mov	r2, r6
 8012764:	4641      	mov	r1, r8
 8012766:	f000 f9d7 	bl	8012b18 <memmove>
 801276a:	68a3      	ldr	r3, [r4, #8]
 801276c:	1b9b      	subs	r3, r3, r6
 801276e:	60a3      	str	r3, [r4, #8]
 8012770:	6823      	ldr	r3, [r4, #0]
 8012772:	4433      	add	r3, r6
 8012774:	6023      	str	r3, [r4, #0]
 8012776:	2000      	movs	r0, #0
 8012778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801277c:	462a      	mov	r2, r5
 801277e:	f000 fa10 	bl	8012ba2 <_realloc_r>
 8012782:	4606      	mov	r6, r0
 8012784:	2800      	cmp	r0, #0
 8012786:	d1e0      	bne.n	801274a <__ssputs_r+0x5c>
 8012788:	6921      	ldr	r1, [r4, #16]
 801278a:	4650      	mov	r0, sl
 801278c:	f7fe feac 	bl	80114e8 <_free_r>
 8012790:	230c      	movs	r3, #12
 8012792:	f8ca 3000 	str.w	r3, [sl]
 8012796:	89a3      	ldrh	r3, [r4, #12]
 8012798:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801279c:	81a3      	strh	r3, [r4, #12]
 801279e:	f04f 30ff 	mov.w	r0, #4294967295
 80127a2:	e7e9      	b.n	8012778 <__ssputs_r+0x8a>

080127a4 <_svfiprintf_r>:
 80127a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127a8:	4698      	mov	r8, r3
 80127aa:	898b      	ldrh	r3, [r1, #12]
 80127ac:	061b      	lsls	r3, r3, #24
 80127ae:	b09d      	sub	sp, #116	@ 0x74
 80127b0:	4607      	mov	r7, r0
 80127b2:	460d      	mov	r5, r1
 80127b4:	4614      	mov	r4, r2
 80127b6:	d510      	bpl.n	80127da <_svfiprintf_r+0x36>
 80127b8:	690b      	ldr	r3, [r1, #16]
 80127ba:	b973      	cbnz	r3, 80127da <_svfiprintf_r+0x36>
 80127bc:	2140      	movs	r1, #64	@ 0x40
 80127be:	f7ff fa41 	bl	8011c44 <_malloc_r>
 80127c2:	6028      	str	r0, [r5, #0]
 80127c4:	6128      	str	r0, [r5, #16]
 80127c6:	b930      	cbnz	r0, 80127d6 <_svfiprintf_r+0x32>
 80127c8:	230c      	movs	r3, #12
 80127ca:	603b      	str	r3, [r7, #0]
 80127cc:	f04f 30ff 	mov.w	r0, #4294967295
 80127d0:	b01d      	add	sp, #116	@ 0x74
 80127d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127d6:	2340      	movs	r3, #64	@ 0x40
 80127d8:	616b      	str	r3, [r5, #20]
 80127da:	2300      	movs	r3, #0
 80127dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80127de:	2320      	movs	r3, #32
 80127e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80127e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80127e8:	2330      	movs	r3, #48	@ 0x30
 80127ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012988 <_svfiprintf_r+0x1e4>
 80127ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80127f2:	f04f 0901 	mov.w	r9, #1
 80127f6:	4623      	mov	r3, r4
 80127f8:	469a      	mov	sl, r3
 80127fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80127fe:	b10a      	cbz	r2, 8012804 <_svfiprintf_r+0x60>
 8012800:	2a25      	cmp	r2, #37	@ 0x25
 8012802:	d1f9      	bne.n	80127f8 <_svfiprintf_r+0x54>
 8012804:	ebba 0b04 	subs.w	fp, sl, r4
 8012808:	d00b      	beq.n	8012822 <_svfiprintf_r+0x7e>
 801280a:	465b      	mov	r3, fp
 801280c:	4622      	mov	r2, r4
 801280e:	4629      	mov	r1, r5
 8012810:	4638      	mov	r0, r7
 8012812:	f7ff ff6c 	bl	80126ee <__ssputs_r>
 8012816:	3001      	adds	r0, #1
 8012818:	f000 80a7 	beq.w	801296a <_svfiprintf_r+0x1c6>
 801281c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801281e:	445a      	add	r2, fp
 8012820:	9209      	str	r2, [sp, #36]	@ 0x24
 8012822:	f89a 3000 	ldrb.w	r3, [sl]
 8012826:	2b00      	cmp	r3, #0
 8012828:	f000 809f 	beq.w	801296a <_svfiprintf_r+0x1c6>
 801282c:	2300      	movs	r3, #0
 801282e:	f04f 32ff 	mov.w	r2, #4294967295
 8012832:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012836:	f10a 0a01 	add.w	sl, sl, #1
 801283a:	9304      	str	r3, [sp, #16]
 801283c:	9307      	str	r3, [sp, #28]
 801283e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012842:	931a      	str	r3, [sp, #104]	@ 0x68
 8012844:	4654      	mov	r4, sl
 8012846:	2205      	movs	r2, #5
 8012848:	f814 1b01 	ldrb.w	r1, [r4], #1
 801284c:	484e      	ldr	r0, [pc, #312]	@ (8012988 <_svfiprintf_r+0x1e4>)
 801284e:	f7ed fcc7 	bl	80001e0 <memchr>
 8012852:	9a04      	ldr	r2, [sp, #16]
 8012854:	b9d8      	cbnz	r0, 801288e <_svfiprintf_r+0xea>
 8012856:	06d0      	lsls	r0, r2, #27
 8012858:	bf44      	itt	mi
 801285a:	2320      	movmi	r3, #32
 801285c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012860:	0711      	lsls	r1, r2, #28
 8012862:	bf44      	itt	mi
 8012864:	232b      	movmi	r3, #43	@ 0x2b
 8012866:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801286a:	f89a 3000 	ldrb.w	r3, [sl]
 801286e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012870:	d015      	beq.n	801289e <_svfiprintf_r+0xfa>
 8012872:	9a07      	ldr	r2, [sp, #28]
 8012874:	4654      	mov	r4, sl
 8012876:	2000      	movs	r0, #0
 8012878:	f04f 0c0a 	mov.w	ip, #10
 801287c:	4621      	mov	r1, r4
 801287e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012882:	3b30      	subs	r3, #48	@ 0x30
 8012884:	2b09      	cmp	r3, #9
 8012886:	d94b      	bls.n	8012920 <_svfiprintf_r+0x17c>
 8012888:	b1b0      	cbz	r0, 80128b8 <_svfiprintf_r+0x114>
 801288a:	9207      	str	r2, [sp, #28]
 801288c:	e014      	b.n	80128b8 <_svfiprintf_r+0x114>
 801288e:	eba0 0308 	sub.w	r3, r0, r8
 8012892:	fa09 f303 	lsl.w	r3, r9, r3
 8012896:	4313      	orrs	r3, r2
 8012898:	9304      	str	r3, [sp, #16]
 801289a:	46a2      	mov	sl, r4
 801289c:	e7d2      	b.n	8012844 <_svfiprintf_r+0xa0>
 801289e:	9b03      	ldr	r3, [sp, #12]
 80128a0:	1d19      	adds	r1, r3, #4
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	9103      	str	r1, [sp, #12]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	bfbb      	ittet	lt
 80128aa:	425b      	neglt	r3, r3
 80128ac:	f042 0202 	orrlt.w	r2, r2, #2
 80128b0:	9307      	strge	r3, [sp, #28]
 80128b2:	9307      	strlt	r3, [sp, #28]
 80128b4:	bfb8      	it	lt
 80128b6:	9204      	strlt	r2, [sp, #16]
 80128b8:	7823      	ldrb	r3, [r4, #0]
 80128ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80128bc:	d10a      	bne.n	80128d4 <_svfiprintf_r+0x130>
 80128be:	7863      	ldrb	r3, [r4, #1]
 80128c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80128c2:	d132      	bne.n	801292a <_svfiprintf_r+0x186>
 80128c4:	9b03      	ldr	r3, [sp, #12]
 80128c6:	1d1a      	adds	r2, r3, #4
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	9203      	str	r2, [sp, #12]
 80128cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80128d0:	3402      	adds	r4, #2
 80128d2:	9305      	str	r3, [sp, #20]
 80128d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012998 <_svfiprintf_r+0x1f4>
 80128d8:	7821      	ldrb	r1, [r4, #0]
 80128da:	2203      	movs	r2, #3
 80128dc:	4650      	mov	r0, sl
 80128de:	f7ed fc7f 	bl	80001e0 <memchr>
 80128e2:	b138      	cbz	r0, 80128f4 <_svfiprintf_r+0x150>
 80128e4:	9b04      	ldr	r3, [sp, #16]
 80128e6:	eba0 000a 	sub.w	r0, r0, sl
 80128ea:	2240      	movs	r2, #64	@ 0x40
 80128ec:	4082      	lsls	r2, r0
 80128ee:	4313      	orrs	r3, r2
 80128f0:	3401      	adds	r4, #1
 80128f2:	9304      	str	r3, [sp, #16]
 80128f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128f8:	4824      	ldr	r0, [pc, #144]	@ (801298c <_svfiprintf_r+0x1e8>)
 80128fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80128fe:	2206      	movs	r2, #6
 8012900:	f7ed fc6e 	bl	80001e0 <memchr>
 8012904:	2800      	cmp	r0, #0
 8012906:	d036      	beq.n	8012976 <_svfiprintf_r+0x1d2>
 8012908:	4b21      	ldr	r3, [pc, #132]	@ (8012990 <_svfiprintf_r+0x1ec>)
 801290a:	bb1b      	cbnz	r3, 8012954 <_svfiprintf_r+0x1b0>
 801290c:	9b03      	ldr	r3, [sp, #12]
 801290e:	3307      	adds	r3, #7
 8012910:	f023 0307 	bic.w	r3, r3, #7
 8012914:	3308      	adds	r3, #8
 8012916:	9303      	str	r3, [sp, #12]
 8012918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801291a:	4433      	add	r3, r6
 801291c:	9309      	str	r3, [sp, #36]	@ 0x24
 801291e:	e76a      	b.n	80127f6 <_svfiprintf_r+0x52>
 8012920:	fb0c 3202 	mla	r2, ip, r2, r3
 8012924:	460c      	mov	r4, r1
 8012926:	2001      	movs	r0, #1
 8012928:	e7a8      	b.n	801287c <_svfiprintf_r+0xd8>
 801292a:	2300      	movs	r3, #0
 801292c:	3401      	adds	r4, #1
 801292e:	9305      	str	r3, [sp, #20]
 8012930:	4619      	mov	r1, r3
 8012932:	f04f 0c0a 	mov.w	ip, #10
 8012936:	4620      	mov	r0, r4
 8012938:	f810 2b01 	ldrb.w	r2, [r0], #1
 801293c:	3a30      	subs	r2, #48	@ 0x30
 801293e:	2a09      	cmp	r2, #9
 8012940:	d903      	bls.n	801294a <_svfiprintf_r+0x1a6>
 8012942:	2b00      	cmp	r3, #0
 8012944:	d0c6      	beq.n	80128d4 <_svfiprintf_r+0x130>
 8012946:	9105      	str	r1, [sp, #20]
 8012948:	e7c4      	b.n	80128d4 <_svfiprintf_r+0x130>
 801294a:	fb0c 2101 	mla	r1, ip, r1, r2
 801294e:	4604      	mov	r4, r0
 8012950:	2301      	movs	r3, #1
 8012952:	e7f0      	b.n	8012936 <_svfiprintf_r+0x192>
 8012954:	ab03      	add	r3, sp, #12
 8012956:	9300      	str	r3, [sp, #0]
 8012958:	462a      	mov	r2, r5
 801295a:	4b0e      	ldr	r3, [pc, #56]	@ (8012994 <_svfiprintf_r+0x1f0>)
 801295c:	a904      	add	r1, sp, #16
 801295e:	4638      	mov	r0, r7
 8012960:	f7fd f906 	bl	800fb70 <_printf_float>
 8012964:	1c42      	adds	r2, r0, #1
 8012966:	4606      	mov	r6, r0
 8012968:	d1d6      	bne.n	8012918 <_svfiprintf_r+0x174>
 801296a:	89ab      	ldrh	r3, [r5, #12]
 801296c:	065b      	lsls	r3, r3, #25
 801296e:	f53f af2d 	bmi.w	80127cc <_svfiprintf_r+0x28>
 8012972:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012974:	e72c      	b.n	80127d0 <_svfiprintf_r+0x2c>
 8012976:	ab03      	add	r3, sp, #12
 8012978:	9300      	str	r3, [sp, #0]
 801297a:	462a      	mov	r2, r5
 801297c:	4b05      	ldr	r3, [pc, #20]	@ (8012994 <_svfiprintf_r+0x1f0>)
 801297e:	a904      	add	r1, sp, #16
 8012980:	4638      	mov	r0, r7
 8012982:	f7fd fb8d 	bl	80100a0 <_printf_i>
 8012986:	e7ed      	b.n	8012964 <_svfiprintf_r+0x1c0>
 8012988:	080143ce 	.word	0x080143ce
 801298c:	080143d8 	.word	0x080143d8
 8012990:	0800fb71 	.word	0x0800fb71
 8012994:	080126ef 	.word	0x080126ef
 8012998:	080143d4 	.word	0x080143d4

0801299c <__sflush_r>:
 801299c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80129a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129a4:	0716      	lsls	r6, r2, #28
 80129a6:	4605      	mov	r5, r0
 80129a8:	460c      	mov	r4, r1
 80129aa:	d454      	bmi.n	8012a56 <__sflush_r+0xba>
 80129ac:	684b      	ldr	r3, [r1, #4]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	dc02      	bgt.n	80129b8 <__sflush_r+0x1c>
 80129b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	dd48      	ble.n	8012a4a <__sflush_r+0xae>
 80129b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80129ba:	2e00      	cmp	r6, #0
 80129bc:	d045      	beq.n	8012a4a <__sflush_r+0xae>
 80129be:	2300      	movs	r3, #0
 80129c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80129c4:	682f      	ldr	r7, [r5, #0]
 80129c6:	6a21      	ldr	r1, [r4, #32]
 80129c8:	602b      	str	r3, [r5, #0]
 80129ca:	d030      	beq.n	8012a2e <__sflush_r+0x92>
 80129cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80129ce:	89a3      	ldrh	r3, [r4, #12]
 80129d0:	0759      	lsls	r1, r3, #29
 80129d2:	d505      	bpl.n	80129e0 <__sflush_r+0x44>
 80129d4:	6863      	ldr	r3, [r4, #4]
 80129d6:	1ad2      	subs	r2, r2, r3
 80129d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80129da:	b10b      	cbz	r3, 80129e0 <__sflush_r+0x44>
 80129dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80129de:	1ad2      	subs	r2, r2, r3
 80129e0:	2300      	movs	r3, #0
 80129e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80129e4:	6a21      	ldr	r1, [r4, #32]
 80129e6:	4628      	mov	r0, r5
 80129e8:	47b0      	blx	r6
 80129ea:	1c43      	adds	r3, r0, #1
 80129ec:	89a3      	ldrh	r3, [r4, #12]
 80129ee:	d106      	bne.n	80129fe <__sflush_r+0x62>
 80129f0:	6829      	ldr	r1, [r5, #0]
 80129f2:	291d      	cmp	r1, #29
 80129f4:	d82b      	bhi.n	8012a4e <__sflush_r+0xb2>
 80129f6:	4a2a      	ldr	r2, [pc, #168]	@ (8012aa0 <__sflush_r+0x104>)
 80129f8:	40ca      	lsrs	r2, r1
 80129fa:	07d6      	lsls	r6, r2, #31
 80129fc:	d527      	bpl.n	8012a4e <__sflush_r+0xb2>
 80129fe:	2200      	movs	r2, #0
 8012a00:	6062      	str	r2, [r4, #4]
 8012a02:	04d9      	lsls	r1, r3, #19
 8012a04:	6922      	ldr	r2, [r4, #16]
 8012a06:	6022      	str	r2, [r4, #0]
 8012a08:	d504      	bpl.n	8012a14 <__sflush_r+0x78>
 8012a0a:	1c42      	adds	r2, r0, #1
 8012a0c:	d101      	bne.n	8012a12 <__sflush_r+0x76>
 8012a0e:	682b      	ldr	r3, [r5, #0]
 8012a10:	b903      	cbnz	r3, 8012a14 <__sflush_r+0x78>
 8012a12:	6560      	str	r0, [r4, #84]	@ 0x54
 8012a14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012a16:	602f      	str	r7, [r5, #0]
 8012a18:	b1b9      	cbz	r1, 8012a4a <__sflush_r+0xae>
 8012a1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012a1e:	4299      	cmp	r1, r3
 8012a20:	d002      	beq.n	8012a28 <__sflush_r+0x8c>
 8012a22:	4628      	mov	r0, r5
 8012a24:	f7fe fd60 	bl	80114e8 <_free_r>
 8012a28:	2300      	movs	r3, #0
 8012a2a:	6363      	str	r3, [r4, #52]	@ 0x34
 8012a2c:	e00d      	b.n	8012a4a <__sflush_r+0xae>
 8012a2e:	2301      	movs	r3, #1
 8012a30:	4628      	mov	r0, r5
 8012a32:	47b0      	blx	r6
 8012a34:	4602      	mov	r2, r0
 8012a36:	1c50      	adds	r0, r2, #1
 8012a38:	d1c9      	bne.n	80129ce <__sflush_r+0x32>
 8012a3a:	682b      	ldr	r3, [r5, #0]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d0c6      	beq.n	80129ce <__sflush_r+0x32>
 8012a40:	2b1d      	cmp	r3, #29
 8012a42:	d001      	beq.n	8012a48 <__sflush_r+0xac>
 8012a44:	2b16      	cmp	r3, #22
 8012a46:	d11e      	bne.n	8012a86 <__sflush_r+0xea>
 8012a48:	602f      	str	r7, [r5, #0]
 8012a4a:	2000      	movs	r0, #0
 8012a4c:	e022      	b.n	8012a94 <__sflush_r+0xf8>
 8012a4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012a52:	b21b      	sxth	r3, r3
 8012a54:	e01b      	b.n	8012a8e <__sflush_r+0xf2>
 8012a56:	690f      	ldr	r7, [r1, #16]
 8012a58:	2f00      	cmp	r7, #0
 8012a5a:	d0f6      	beq.n	8012a4a <__sflush_r+0xae>
 8012a5c:	0793      	lsls	r3, r2, #30
 8012a5e:	680e      	ldr	r6, [r1, #0]
 8012a60:	bf08      	it	eq
 8012a62:	694b      	ldreq	r3, [r1, #20]
 8012a64:	600f      	str	r7, [r1, #0]
 8012a66:	bf18      	it	ne
 8012a68:	2300      	movne	r3, #0
 8012a6a:	eba6 0807 	sub.w	r8, r6, r7
 8012a6e:	608b      	str	r3, [r1, #8]
 8012a70:	f1b8 0f00 	cmp.w	r8, #0
 8012a74:	dde9      	ble.n	8012a4a <__sflush_r+0xae>
 8012a76:	6a21      	ldr	r1, [r4, #32]
 8012a78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012a7a:	4643      	mov	r3, r8
 8012a7c:	463a      	mov	r2, r7
 8012a7e:	4628      	mov	r0, r5
 8012a80:	47b0      	blx	r6
 8012a82:	2800      	cmp	r0, #0
 8012a84:	dc08      	bgt.n	8012a98 <__sflush_r+0xfc>
 8012a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012a8e:	81a3      	strh	r3, [r4, #12]
 8012a90:	f04f 30ff 	mov.w	r0, #4294967295
 8012a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a98:	4407      	add	r7, r0
 8012a9a:	eba8 0800 	sub.w	r8, r8, r0
 8012a9e:	e7e7      	b.n	8012a70 <__sflush_r+0xd4>
 8012aa0:	20400001 	.word	0x20400001

08012aa4 <_fflush_r>:
 8012aa4:	b538      	push	{r3, r4, r5, lr}
 8012aa6:	690b      	ldr	r3, [r1, #16]
 8012aa8:	4605      	mov	r5, r0
 8012aaa:	460c      	mov	r4, r1
 8012aac:	b913      	cbnz	r3, 8012ab4 <_fflush_r+0x10>
 8012aae:	2500      	movs	r5, #0
 8012ab0:	4628      	mov	r0, r5
 8012ab2:	bd38      	pop	{r3, r4, r5, pc}
 8012ab4:	b118      	cbz	r0, 8012abe <_fflush_r+0x1a>
 8012ab6:	6a03      	ldr	r3, [r0, #32]
 8012ab8:	b90b      	cbnz	r3, 8012abe <_fflush_r+0x1a>
 8012aba:	f7fd fc9b 	bl	80103f4 <__sinit>
 8012abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d0f3      	beq.n	8012aae <_fflush_r+0xa>
 8012ac6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012ac8:	07d0      	lsls	r0, r2, #31
 8012aca:	d404      	bmi.n	8012ad6 <_fflush_r+0x32>
 8012acc:	0599      	lsls	r1, r3, #22
 8012ace:	d402      	bmi.n	8012ad6 <_fflush_r+0x32>
 8012ad0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012ad2:	f7fd fe78 	bl	80107c6 <__retarget_lock_acquire_recursive>
 8012ad6:	4628      	mov	r0, r5
 8012ad8:	4621      	mov	r1, r4
 8012ada:	f7ff ff5f 	bl	801299c <__sflush_r>
 8012ade:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012ae0:	07da      	lsls	r2, r3, #31
 8012ae2:	4605      	mov	r5, r0
 8012ae4:	d4e4      	bmi.n	8012ab0 <_fflush_r+0xc>
 8012ae6:	89a3      	ldrh	r3, [r4, #12]
 8012ae8:	059b      	lsls	r3, r3, #22
 8012aea:	d4e1      	bmi.n	8012ab0 <_fflush_r+0xc>
 8012aec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012aee:	f7fd fe6b 	bl	80107c8 <__retarget_lock_release_recursive>
 8012af2:	e7dd      	b.n	8012ab0 <_fflush_r+0xc>

08012af4 <fiprintf>:
 8012af4:	b40e      	push	{r1, r2, r3}
 8012af6:	b503      	push	{r0, r1, lr}
 8012af8:	4601      	mov	r1, r0
 8012afa:	ab03      	add	r3, sp, #12
 8012afc:	4805      	ldr	r0, [pc, #20]	@ (8012b14 <fiprintf+0x20>)
 8012afe:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b02:	6800      	ldr	r0, [r0, #0]
 8012b04:	9301      	str	r3, [sp, #4]
 8012b06:	f000 f8a3 	bl	8012c50 <_vfiprintf_r>
 8012b0a:	b002      	add	sp, #8
 8012b0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012b10:	b003      	add	sp, #12
 8012b12:	4770      	bx	lr
 8012b14:	20000320 	.word	0x20000320

08012b18 <memmove>:
 8012b18:	4288      	cmp	r0, r1
 8012b1a:	b510      	push	{r4, lr}
 8012b1c:	eb01 0402 	add.w	r4, r1, r2
 8012b20:	d902      	bls.n	8012b28 <memmove+0x10>
 8012b22:	4284      	cmp	r4, r0
 8012b24:	4623      	mov	r3, r4
 8012b26:	d807      	bhi.n	8012b38 <memmove+0x20>
 8012b28:	1e43      	subs	r3, r0, #1
 8012b2a:	42a1      	cmp	r1, r4
 8012b2c:	d008      	beq.n	8012b40 <memmove+0x28>
 8012b2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012b32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012b36:	e7f8      	b.n	8012b2a <memmove+0x12>
 8012b38:	4402      	add	r2, r0
 8012b3a:	4601      	mov	r1, r0
 8012b3c:	428a      	cmp	r2, r1
 8012b3e:	d100      	bne.n	8012b42 <memmove+0x2a>
 8012b40:	bd10      	pop	{r4, pc}
 8012b42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012b46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012b4a:	e7f7      	b.n	8012b3c <memmove+0x24>

08012b4c <_sbrk_r>:
 8012b4c:	b538      	push	{r3, r4, r5, lr}
 8012b4e:	4d06      	ldr	r5, [pc, #24]	@ (8012b68 <_sbrk_r+0x1c>)
 8012b50:	2300      	movs	r3, #0
 8012b52:	4604      	mov	r4, r0
 8012b54:	4608      	mov	r0, r1
 8012b56:	602b      	str	r3, [r5, #0]
 8012b58:	f7f1 fa00 	bl	8003f5c <_sbrk>
 8012b5c:	1c43      	adds	r3, r0, #1
 8012b5e:	d102      	bne.n	8012b66 <_sbrk_r+0x1a>
 8012b60:	682b      	ldr	r3, [r5, #0]
 8012b62:	b103      	cbz	r3, 8012b66 <_sbrk_r+0x1a>
 8012b64:	6023      	str	r3, [r4, #0]
 8012b66:	bd38      	pop	{r3, r4, r5, pc}
 8012b68:	20005d6c 	.word	0x20005d6c

08012b6c <abort>:
 8012b6c:	b508      	push	{r3, lr}
 8012b6e:	2006      	movs	r0, #6
 8012b70:	f000 fa42 	bl	8012ff8 <raise>
 8012b74:	2001      	movs	r0, #1
 8012b76:	f7f1 f979 	bl	8003e6c <_exit>

08012b7a <_calloc_r>:
 8012b7a:	b570      	push	{r4, r5, r6, lr}
 8012b7c:	fba1 5402 	umull	r5, r4, r1, r2
 8012b80:	b934      	cbnz	r4, 8012b90 <_calloc_r+0x16>
 8012b82:	4629      	mov	r1, r5
 8012b84:	f7ff f85e 	bl	8011c44 <_malloc_r>
 8012b88:	4606      	mov	r6, r0
 8012b8a:	b928      	cbnz	r0, 8012b98 <_calloc_r+0x1e>
 8012b8c:	4630      	mov	r0, r6
 8012b8e:	bd70      	pop	{r4, r5, r6, pc}
 8012b90:	220c      	movs	r2, #12
 8012b92:	6002      	str	r2, [r0, #0]
 8012b94:	2600      	movs	r6, #0
 8012b96:	e7f9      	b.n	8012b8c <_calloc_r+0x12>
 8012b98:	462a      	mov	r2, r5
 8012b9a:	4621      	mov	r1, r4
 8012b9c:	f7fd fcfb 	bl	8010596 <memset>
 8012ba0:	e7f4      	b.n	8012b8c <_calloc_r+0x12>

08012ba2 <_realloc_r>:
 8012ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ba6:	4607      	mov	r7, r0
 8012ba8:	4614      	mov	r4, r2
 8012baa:	460d      	mov	r5, r1
 8012bac:	b921      	cbnz	r1, 8012bb8 <_realloc_r+0x16>
 8012bae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012bb2:	4611      	mov	r1, r2
 8012bb4:	f7ff b846 	b.w	8011c44 <_malloc_r>
 8012bb8:	b92a      	cbnz	r2, 8012bc6 <_realloc_r+0x24>
 8012bba:	f7fe fc95 	bl	80114e8 <_free_r>
 8012bbe:	4625      	mov	r5, r4
 8012bc0:	4628      	mov	r0, r5
 8012bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bc6:	f000 fa33 	bl	8013030 <_malloc_usable_size_r>
 8012bca:	4284      	cmp	r4, r0
 8012bcc:	4606      	mov	r6, r0
 8012bce:	d802      	bhi.n	8012bd6 <_realloc_r+0x34>
 8012bd0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012bd4:	d8f4      	bhi.n	8012bc0 <_realloc_r+0x1e>
 8012bd6:	4621      	mov	r1, r4
 8012bd8:	4638      	mov	r0, r7
 8012bda:	f7ff f833 	bl	8011c44 <_malloc_r>
 8012bde:	4680      	mov	r8, r0
 8012be0:	b908      	cbnz	r0, 8012be6 <_realloc_r+0x44>
 8012be2:	4645      	mov	r5, r8
 8012be4:	e7ec      	b.n	8012bc0 <_realloc_r+0x1e>
 8012be6:	42b4      	cmp	r4, r6
 8012be8:	4622      	mov	r2, r4
 8012bea:	4629      	mov	r1, r5
 8012bec:	bf28      	it	cs
 8012bee:	4632      	movcs	r2, r6
 8012bf0:	f7fd fdeb 	bl	80107ca <memcpy>
 8012bf4:	4629      	mov	r1, r5
 8012bf6:	4638      	mov	r0, r7
 8012bf8:	f7fe fc76 	bl	80114e8 <_free_r>
 8012bfc:	e7f1      	b.n	8012be2 <_realloc_r+0x40>

08012bfe <__sfputc_r>:
 8012bfe:	6893      	ldr	r3, [r2, #8]
 8012c00:	3b01      	subs	r3, #1
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	b410      	push	{r4}
 8012c06:	6093      	str	r3, [r2, #8]
 8012c08:	da08      	bge.n	8012c1c <__sfputc_r+0x1e>
 8012c0a:	6994      	ldr	r4, [r2, #24]
 8012c0c:	42a3      	cmp	r3, r4
 8012c0e:	db01      	blt.n	8012c14 <__sfputc_r+0x16>
 8012c10:	290a      	cmp	r1, #10
 8012c12:	d103      	bne.n	8012c1c <__sfputc_r+0x1e>
 8012c14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c18:	f000 b932 	b.w	8012e80 <__swbuf_r>
 8012c1c:	6813      	ldr	r3, [r2, #0]
 8012c1e:	1c58      	adds	r0, r3, #1
 8012c20:	6010      	str	r0, [r2, #0]
 8012c22:	7019      	strb	r1, [r3, #0]
 8012c24:	4608      	mov	r0, r1
 8012c26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c2a:	4770      	bx	lr

08012c2c <__sfputs_r>:
 8012c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c2e:	4606      	mov	r6, r0
 8012c30:	460f      	mov	r7, r1
 8012c32:	4614      	mov	r4, r2
 8012c34:	18d5      	adds	r5, r2, r3
 8012c36:	42ac      	cmp	r4, r5
 8012c38:	d101      	bne.n	8012c3e <__sfputs_r+0x12>
 8012c3a:	2000      	movs	r0, #0
 8012c3c:	e007      	b.n	8012c4e <__sfputs_r+0x22>
 8012c3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c42:	463a      	mov	r2, r7
 8012c44:	4630      	mov	r0, r6
 8012c46:	f7ff ffda 	bl	8012bfe <__sfputc_r>
 8012c4a:	1c43      	adds	r3, r0, #1
 8012c4c:	d1f3      	bne.n	8012c36 <__sfputs_r+0xa>
 8012c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012c50 <_vfiprintf_r>:
 8012c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c54:	460d      	mov	r5, r1
 8012c56:	b09d      	sub	sp, #116	@ 0x74
 8012c58:	4614      	mov	r4, r2
 8012c5a:	4698      	mov	r8, r3
 8012c5c:	4606      	mov	r6, r0
 8012c5e:	b118      	cbz	r0, 8012c68 <_vfiprintf_r+0x18>
 8012c60:	6a03      	ldr	r3, [r0, #32]
 8012c62:	b90b      	cbnz	r3, 8012c68 <_vfiprintf_r+0x18>
 8012c64:	f7fd fbc6 	bl	80103f4 <__sinit>
 8012c68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012c6a:	07d9      	lsls	r1, r3, #31
 8012c6c:	d405      	bmi.n	8012c7a <_vfiprintf_r+0x2a>
 8012c6e:	89ab      	ldrh	r3, [r5, #12]
 8012c70:	059a      	lsls	r2, r3, #22
 8012c72:	d402      	bmi.n	8012c7a <_vfiprintf_r+0x2a>
 8012c74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012c76:	f7fd fda6 	bl	80107c6 <__retarget_lock_acquire_recursive>
 8012c7a:	89ab      	ldrh	r3, [r5, #12]
 8012c7c:	071b      	lsls	r3, r3, #28
 8012c7e:	d501      	bpl.n	8012c84 <_vfiprintf_r+0x34>
 8012c80:	692b      	ldr	r3, [r5, #16]
 8012c82:	b99b      	cbnz	r3, 8012cac <_vfiprintf_r+0x5c>
 8012c84:	4629      	mov	r1, r5
 8012c86:	4630      	mov	r0, r6
 8012c88:	f000 f938 	bl	8012efc <__swsetup_r>
 8012c8c:	b170      	cbz	r0, 8012cac <_vfiprintf_r+0x5c>
 8012c8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012c90:	07dc      	lsls	r4, r3, #31
 8012c92:	d504      	bpl.n	8012c9e <_vfiprintf_r+0x4e>
 8012c94:	f04f 30ff 	mov.w	r0, #4294967295
 8012c98:	b01d      	add	sp, #116	@ 0x74
 8012c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c9e:	89ab      	ldrh	r3, [r5, #12]
 8012ca0:	0598      	lsls	r0, r3, #22
 8012ca2:	d4f7      	bmi.n	8012c94 <_vfiprintf_r+0x44>
 8012ca4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012ca6:	f7fd fd8f 	bl	80107c8 <__retarget_lock_release_recursive>
 8012caa:	e7f3      	b.n	8012c94 <_vfiprintf_r+0x44>
 8012cac:	2300      	movs	r3, #0
 8012cae:	9309      	str	r3, [sp, #36]	@ 0x24
 8012cb0:	2320      	movs	r3, #32
 8012cb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012cb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8012cba:	2330      	movs	r3, #48	@ 0x30
 8012cbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012e6c <_vfiprintf_r+0x21c>
 8012cc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012cc4:	f04f 0901 	mov.w	r9, #1
 8012cc8:	4623      	mov	r3, r4
 8012cca:	469a      	mov	sl, r3
 8012ccc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012cd0:	b10a      	cbz	r2, 8012cd6 <_vfiprintf_r+0x86>
 8012cd2:	2a25      	cmp	r2, #37	@ 0x25
 8012cd4:	d1f9      	bne.n	8012cca <_vfiprintf_r+0x7a>
 8012cd6:	ebba 0b04 	subs.w	fp, sl, r4
 8012cda:	d00b      	beq.n	8012cf4 <_vfiprintf_r+0xa4>
 8012cdc:	465b      	mov	r3, fp
 8012cde:	4622      	mov	r2, r4
 8012ce0:	4629      	mov	r1, r5
 8012ce2:	4630      	mov	r0, r6
 8012ce4:	f7ff ffa2 	bl	8012c2c <__sfputs_r>
 8012ce8:	3001      	adds	r0, #1
 8012cea:	f000 80a7 	beq.w	8012e3c <_vfiprintf_r+0x1ec>
 8012cee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012cf0:	445a      	add	r2, fp
 8012cf2:	9209      	str	r2, [sp, #36]	@ 0x24
 8012cf4:	f89a 3000 	ldrb.w	r3, [sl]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	f000 809f 	beq.w	8012e3c <_vfiprintf_r+0x1ec>
 8012cfe:	2300      	movs	r3, #0
 8012d00:	f04f 32ff 	mov.w	r2, #4294967295
 8012d04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012d08:	f10a 0a01 	add.w	sl, sl, #1
 8012d0c:	9304      	str	r3, [sp, #16]
 8012d0e:	9307      	str	r3, [sp, #28]
 8012d10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012d14:	931a      	str	r3, [sp, #104]	@ 0x68
 8012d16:	4654      	mov	r4, sl
 8012d18:	2205      	movs	r2, #5
 8012d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d1e:	4853      	ldr	r0, [pc, #332]	@ (8012e6c <_vfiprintf_r+0x21c>)
 8012d20:	f7ed fa5e 	bl	80001e0 <memchr>
 8012d24:	9a04      	ldr	r2, [sp, #16]
 8012d26:	b9d8      	cbnz	r0, 8012d60 <_vfiprintf_r+0x110>
 8012d28:	06d1      	lsls	r1, r2, #27
 8012d2a:	bf44      	itt	mi
 8012d2c:	2320      	movmi	r3, #32
 8012d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012d32:	0713      	lsls	r3, r2, #28
 8012d34:	bf44      	itt	mi
 8012d36:	232b      	movmi	r3, #43	@ 0x2b
 8012d38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8012d40:	2b2a      	cmp	r3, #42	@ 0x2a
 8012d42:	d015      	beq.n	8012d70 <_vfiprintf_r+0x120>
 8012d44:	9a07      	ldr	r2, [sp, #28]
 8012d46:	4654      	mov	r4, sl
 8012d48:	2000      	movs	r0, #0
 8012d4a:	f04f 0c0a 	mov.w	ip, #10
 8012d4e:	4621      	mov	r1, r4
 8012d50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012d54:	3b30      	subs	r3, #48	@ 0x30
 8012d56:	2b09      	cmp	r3, #9
 8012d58:	d94b      	bls.n	8012df2 <_vfiprintf_r+0x1a2>
 8012d5a:	b1b0      	cbz	r0, 8012d8a <_vfiprintf_r+0x13a>
 8012d5c:	9207      	str	r2, [sp, #28]
 8012d5e:	e014      	b.n	8012d8a <_vfiprintf_r+0x13a>
 8012d60:	eba0 0308 	sub.w	r3, r0, r8
 8012d64:	fa09 f303 	lsl.w	r3, r9, r3
 8012d68:	4313      	orrs	r3, r2
 8012d6a:	9304      	str	r3, [sp, #16]
 8012d6c:	46a2      	mov	sl, r4
 8012d6e:	e7d2      	b.n	8012d16 <_vfiprintf_r+0xc6>
 8012d70:	9b03      	ldr	r3, [sp, #12]
 8012d72:	1d19      	adds	r1, r3, #4
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	9103      	str	r1, [sp, #12]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	bfbb      	ittet	lt
 8012d7c:	425b      	neglt	r3, r3
 8012d7e:	f042 0202 	orrlt.w	r2, r2, #2
 8012d82:	9307      	strge	r3, [sp, #28]
 8012d84:	9307      	strlt	r3, [sp, #28]
 8012d86:	bfb8      	it	lt
 8012d88:	9204      	strlt	r2, [sp, #16]
 8012d8a:	7823      	ldrb	r3, [r4, #0]
 8012d8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8012d8e:	d10a      	bne.n	8012da6 <_vfiprintf_r+0x156>
 8012d90:	7863      	ldrb	r3, [r4, #1]
 8012d92:	2b2a      	cmp	r3, #42	@ 0x2a
 8012d94:	d132      	bne.n	8012dfc <_vfiprintf_r+0x1ac>
 8012d96:	9b03      	ldr	r3, [sp, #12]
 8012d98:	1d1a      	adds	r2, r3, #4
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	9203      	str	r2, [sp, #12]
 8012d9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012da2:	3402      	adds	r4, #2
 8012da4:	9305      	str	r3, [sp, #20]
 8012da6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012e7c <_vfiprintf_r+0x22c>
 8012daa:	7821      	ldrb	r1, [r4, #0]
 8012dac:	2203      	movs	r2, #3
 8012dae:	4650      	mov	r0, sl
 8012db0:	f7ed fa16 	bl	80001e0 <memchr>
 8012db4:	b138      	cbz	r0, 8012dc6 <_vfiprintf_r+0x176>
 8012db6:	9b04      	ldr	r3, [sp, #16]
 8012db8:	eba0 000a 	sub.w	r0, r0, sl
 8012dbc:	2240      	movs	r2, #64	@ 0x40
 8012dbe:	4082      	lsls	r2, r0
 8012dc0:	4313      	orrs	r3, r2
 8012dc2:	3401      	adds	r4, #1
 8012dc4:	9304      	str	r3, [sp, #16]
 8012dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012dca:	4829      	ldr	r0, [pc, #164]	@ (8012e70 <_vfiprintf_r+0x220>)
 8012dcc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012dd0:	2206      	movs	r2, #6
 8012dd2:	f7ed fa05 	bl	80001e0 <memchr>
 8012dd6:	2800      	cmp	r0, #0
 8012dd8:	d03f      	beq.n	8012e5a <_vfiprintf_r+0x20a>
 8012dda:	4b26      	ldr	r3, [pc, #152]	@ (8012e74 <_vfiprintf_r+0x224>)
 8012ddc:	bb1b      	cbnz	r3, 8012e26 <_vfiprintf_r+0x1d6>
 8012dde:	9b03      	ldr	r3, [sp, #12]
 8012de0:	3307      	adds	r3, #7
 8012de2:	f023 0307 	bic.w	r3, r3, #7
 8012de6:	3308      	adds	r3, #8
 8012de8:	9303      	str	r3, [sp, #12]
 8012dea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012dec:	443b      	add	r3, r7
 8012dee:	9309      	str	r3, [sp, #36]	@ 0x24
 8012df0:	e76a      	b.n	8012cc8 <_vfiprintf_r+0x78>
 8012df2:	fb0c 3202 	mla	r2, ip, r2, r3
 8012df6:	460c      	mov	r4, r1
 8012df8:	2001      	movs	r0, #1
 8012dfa:	e7a8      	b.n	8012d4e <_vfiprintf_r+0xfe>
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	3401      	adds	r4, #1
 8012e00:	9305      	str	r3, [sp, #20]
 8012e02:	4619      	mov	r1, r3
 8012e04:	f04f 0c0a 	mov.w	ip, #10
 8012e08:	4620      	mov	r0, r4
 8012e0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012e0e:	3a30      	subs	r2, #48	@ 0x30
 8012e10:	2a09      	cmp	r2, #9
 8012e12:	d903      	bls.n	8012e1c <_vfiprintf_r+0x1cc>
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d0c6      	beq.n	8012da6 <_vfiprintf_r+0x156>
 8012e18:	9105      	str	r1, [sp, #20]
 8012e1a:	e7c4      	b.n	8012da6 <_vfiprintf_r+0x156>
 8012e1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012e20:	4604      	mov	r4, r0
 8012e22:	2301      	movs	r3, #1
 8012e24:	e7f0      	b.n	8012e08 <_vfiprintf_r+0x1b8>
 8012e26:	ab03      	add	r3, sp, #12
 8012e28:	9300      	str	r3, [sp, #0]
 8012e2a:	462a      	mov	r2, r5
 8012e2c:	4b12      	ldr	r3, [pc, #72]	@ (8012e78 <_vfiprintf_r+0x228>)
 8012e2e:	a904      	add	r1, sp, #16
 8012e30:	4630      	mov	r0, r6
 8012e32:	f7fc fe9d 	bl	800fb70 <_printf_float>
 8012e36:	4607      	mov	r7, r0
 8012e38:	1c78      	adds	r0, r7, #1
 8012e3a:	d1d6      	bne.n	8012dea <_vfiprintf_r+0x19a>
 8012e3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012e3e:	07d9      	lsls	r1, r3, #31
 8012e40:	d405      	bmi.n	8012e4e <_vfiprintf_r+0x1fe>
 8012e42:	89ab      	ldrh	r3, [r5, #12]
 8012e44:	059a      	lsls	r2, r3, #22
 8012e46:	d402      	bmi.n	8012e4e <_vfiprintf_r+0x1fe>
 8012e48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012e4a:	f7fd fcbd 	bl	80107c8 <__retarget_lock_release_recursive>
 8012e4e:	89ab      	ldrh	r3, [r5, #12]
 8012e50:	065b      	lsls	r3, r3, #25
 8012e52:	f53f af1f 	bmi.w	8012c94 <_vfiprintf_r+0x44>
 8012e56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012e58:	e71e      	b.n	8012c98 <_vfiprintf_r+0x48>
 8012e5a:	ab03      	add	r3, sp, #12
 8012e5c:	9300      	str	r3, [sp, #0]
 8012e5e:	462a      	mov	r2, r5
 8012e60:	4b05      	ldr	r3, [pc, #20]	@ (8012e78 <_vfiprintf_r+0x228>)
 8012e62:	a904      	add	r1, sp, #16
 8012e64:	4630      	mov	r0, r6
 8012e66:	f7fd f91b 	bl	80100a0 <_printf_i>
 8012e6a:	e7e4      	b.n	8012e36 <_vfiprintf_r+0x1e6>
 8012e6c:	080143ce 	.word	0x080143ce
 8012e70:	080143d8 	.word	0x080143d8
 8012e74:	0800fb71 	.word	0x0800fb71
 8012e78:	08012c2d 	.word	0x08012c2d
 8012e7c:	080143d4 	.word	0x080143d4

08012e80 <__swbuf_r>:
 8012e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e82:	460e      	mov	r6, r1
 8012e84:	4614      	mov	r4, r2
 8012e86:	4605      	mov	r5, r0
 8012e88:	b118      	cbz	r0, 8012e92 <__swbuf_r+0x12>
 8012e8a:	6a03      	ldr	r3, [r0, #32]
 8012e8c:	b90b      	cbnz	r3, 8012e92 <__swbuf_r+0x12>
 8012e8e:	f7fd fab1 	bl	80103f4 <__sinit>
 8012e92:	69a3      	ldr	r3, [r4, #24]
 8012e94:	60a3      	str	r3, [r4, #8]
 8012e96:	89a3      	ldrh	r3, [r4, #12]
 8012e98:	071a      	lsls	r2, r3, #28
 8012e9a:	d501      	bpl.n	8012ea0 <__swbuf_r+0x20>
 8012e9c:	6923      	ldr	r3, [r4, #16]
 8012e9e:	b943      	cbnz	r3, 8012eb2 <__swbuf_r+0x32>
 8012ea0:	4621      	mov	r1, r4
 8012ea2:	4628      	mov	r0, r5
 8012ea4:	f000 f82a 	bl	8012efc <__swsetup_r>
 8012ea8:	b118      	cbz	r0, 8012eb2 <__swbuf_r+0x32>
 8012eaa:	f04f 37ff 	mov.w	r7, #4294967295
 8012eae:	4638      	mov	r0, r7
 8012eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012eb2:	6823      	ldr	r3, [r4, #0]
 8012eb4:	6922      	ldr	r2, [r4, #16]
 8012eb6:	1a98      	subs	r0, r3, r2
 8012eb8:	6963      	ldr	r3, [r4, #20]
 8012eba:	b2f6      	uxtb	r6, r6
 8012ebc:	4283      	cmp	r3, r0
 8012ebe:	4637      	mov	r7, r6
 8012ec0:	dc05      	bgt.n	8012ece <__swbuf_r+0x4e>
 8012ec2:	4621      	mov	r1, r4
 8012ec4:	4628      	mov	r0, r5
 8012ec6:	f7ff fded 	bl	8012aa4 <_fflush_r>
 8012eca:	2800      	cmp	r0, #0
 8012ecc:	d1ed      	bne.n	8012eaa <__swbuf_r+0x2a>
 8012ece:	68a3      	ldr	r3, [r4, #8]
 8012ed0:	3b01      	subs	r3, #1
 8012ed2:	60a3      	str	r3, [r4, #8]
 8012ed4:	6823      	ldr	r3, [r4, #0]
 8012ed6:	1c5a      	adds	r2, r3, #1
 8012ed8:	6022      	str	r2, [r4, #0]
 8012eda:	701e      	strb	r6, [r3, #0]
 8012edc:	6962      	ldr	r2, [r4, #20]
 8012ede:	1c43      	adds	r3, r0, #1
 8012ee0:	429a      	cmp	r2, r3
 8012ee2:	d004      	beq.n	8012eee <__swbuf_r+0x6e>
 8012ee4:	89a3      	ldrh	r3, [r4, #12]
 8012ee6:	07db      	lsls	r3, r3, #31
 8012ee8:	d5e1      	bpl.n	8012eae <__swbuf_r+0x2e>
 8012eea:	2e0a      	cmp	r6, #10
 8012eec:	d1df      	bne.n	8012eae <__swbuf_r+0x2e>
 8012eee:	4621      	mov	r1, r4
 8012ef0:	4628      	mov	r0, r5
 8012ef2:	f7ff fdd7 	bl	8012aa4 <_fflush_r>
 8012ef6:	2800      	cmp	r0, #0
 8012ef8:	d0d9      	beq.n	8012eae <__swbuf_r+0x2e>
 8012efa:	e7d6      	b.n	8012eaa <__swbuf_r+0x2a>

08012efc <__swsetup_r>:
 8012efc:	b538      	push	{r3, r4, r5, lr}
 8012efe:	4b29      	ldr	r3, [pc, #164]	@ (8012fa4 <__swsetup_r+0xa8>)
 8012f00:	4605      	mov	r5, r0
 8012f02:	6818      	ldr	r0, [r3, #0]
 8012f04:	460c      	mov	r4, r1
 8012f06:	b118      	cbz	r0, 8012f10 <__swsetup_r+0x14>
 8012f08:	6a03      	ldr	r3, [r0, #32]
 8012f0a:	b90b      	cbnz	r3, 8012f10 <__swsetup_r+0x14>
 8012f0c:	f7fd fa72 	bl	80103f4 <__sinit>
 8012f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f14:	0719      	lsls	r1, r3, #28
 8012f16:	d422      	bmi.n	8012f5e <__swsetup_r+0x62>
 8012f18:	06da      	lsls	r2, r3, #27
 8012f1a:	d407      	bmi.n	8012f2c <__swsetup_r+0x30>
 8012f1c:	2209      	movs	r2, #9
 8012f1e:	602a      	str	r2, [r5, #0]
 8012f20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012f24:	81a3      	strh	r3, [r4, #12]
 8012f26:	f04f 30ff 	mov.w	r0, #4294967295
 8012f2a:	e033      	b.n	8012f94 <__swsetup_r+0x98>
 8012f2c:	0758      	lsls	r0, r3, #29
 8012f2e:	d512      	bpl.n	8012f56 <__swsetup_r+0x5a>
 8012f30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012f32:	b141      	cbz	r1, 8012f46 <__swsetup_r+0x4a>
 8012f34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012f38:	4299      	cmp	r1, r3
 8012f3a:	d002      	beq.n	8012f42 <__swsetup_r+0x46>
 8012f3c:	4628      	mov	r0, r5
 8012f3e:	f7fe fad3 	bl	80114e8 <_free_r>
 8012f42:	2300      	movs	r3, #0
 8012f44:	6363      	str	r3, [r4, #52]	@ 0x34
 8012f46:	89a3      	ldrh	r3, [r4, #12]
 8012f48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012f4c:	81a3      	strh	r3, [r4, #12]
 8012f4e:	2300      	movs	r3, #0
 8012f50:	6063      	str	r3, [r4, #4]
 8012f52:	6923      	ldr	r3, [r4, #16]
 8012f54:	6023      	str	r3, [r4, #0]
 8012f56:	89a3      	ldrh	r3, [r4, #12]
 8012f58:	f043 0308 	orr.w	r3, r3, #8
 8012f5c:	81a3      	strh	r3, [r4, #12]
 8012f5e:	6923      	ldr	r3, [r4, #16]
 8012f60:	b94b      	cbnz	r3, 8012f76 <__swsetup_r+0x7a>
 8012f62:	89a3      	ldrh	r3, [r4, #12]
 8012f64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012f68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012f6c:	d003      	beq.n	8012f76 <__swsetup_r+0x7a>
 8012f6e:	4621      	mov	r1, r4
 8012f70:	4628      	mov	r0, r5
 8012f72:	f000 f88b 	bl	801308c <__smakebuf_r>
 8012f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f7a:	f013 0201 	ands.w	r2, r3, #1
 8012f7e:	d00a      	beq.n	8012f96 <__swsetup_r+0x9a>
 8012f80:	2200      	movs	r2, #0
 8012f82:	60a2      	str	r2, [r4, #8]
 8012f84:	6962      	ldr	r2, [r4, #20]
 8012f86:	4252      	negs	r2, r2
 8012f88:	61a2      	str	r2, [r4, #24]
 8012f8a:	6922      	ldr	r2, [r4, #16]
 8012f8c:	b942      	cbnz	r2, 8012fa0 <__swsetup_r+0xa4>
 8012f8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012f92:	d1c5      	bne.n	8012f20 <__swsetup_r+0x24>
 8012f94:	bd38      	pop	{r3, r4, r5, pc}
 8012f96:	0799      	lsls	r1, r3, #30
 8012f98:	bf58      	it	pl
 8012f9a:	6962      	ldrpl	r2, [r4, #20]
 8012f9c:	60a2      	str	r2, [r4, #8]
 8012f9e:	e7f4      	b.n	8012f8a <__swsetup_r+0x8e>
 8012fa0:	2000      	movs	r0, #0
 8012fa2:	e7f7      	b.n	8012f94 <__swsetup_r+0x98>
 8012fa4:	20000320 	.word	0x20000320

08012fa8 <_raise_r>:
 8012fa8:	291f      	cmp	r1, #31
 8012faa:	b538      	push	{r3, r4, r5, lr}
 8012fac:	4605      	mov	r5, r0
 8012fae:	460c      	mov	r4, r1
 8012fb0:	d904      	bls.n	8012fbc <_raise_r+0x14>
 8012fb2:	2316      	movs	r3, #22
 8012fb4:	6003      	str	r3, [r0, #0]
 8012fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8012fba:	bd38      	pop	{r3, r4, r5, pc}
 8012fbc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012fbe:	b112      	cbz	r2, 8012fc6 <_raise_r+0x1e>
 8012fc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012fc4:	b94b      	cbnz	r3, 8012fda <_raise_r+0x32>
 8012fc6:	4628      	mov	r0, r5
 8012fc8:	f000 f830 	bl	801302c <_getpid_r>
 8012fcc:	4622      	mov	r2, r4
 8012fce:	4601      	mov	r1, r0
 8012fd0:	4628      	mov	r0, r5
 8012fd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012fd6:	f000 b817 	b.w	8013008 <_kill_r>
 8012fda:	2b01      	cmp	r3, #1
 8012fdc:	d00a      	beq.n	8012ff4 <_raise_r+0x4c>
 8012fde:	1c59      	adds	r1, r3, #1
 8012fe0:	d103      	bne.n	8012fea <_raise_r+0x42>
 8012fe2:	2316      	movs	r3, #22
 8012fe4:	6003      	str	r3, [r0, #0]
 8012fe6:	2001      	movs	r0, #1
 8012fe8:	e7e7      	b.n	8012fba <_raise_r+0x12>
 8012fea:	2100      	movs	r1, #0
 8012fec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012ff0:	4620      	mov	r0, r4
 8012ff2:	4798      	blx	r3
 8012ff4:	2000      	movs	r0, #0
 8012ff6:	e7e0      	b.n	8012fba <_raise_r+0x12>

08012ff8 <raise>:
 8012ff8:	4b02      	ldr	r3, [pc, #8]	@ (8013004 <raise+0xc>)
 8012ffa:	4601      	mov	r1, r0
 8012ffc:	6818      	ldr	r0, [r3, #0]
 8012ffe:	f7ff bfd3 	b.w	8012fa8 <_raise_r>
 8013002:	bf00      	nop
 8013004:	20000320 	.word	0x20000320

08013008 <_kill_r>:
 8013008:	b538      	push	{r3, r4, r5, lr}
 801300a:	4d07      	ldr	r5, [pc, #28]	@ (8013028 <_kill_r+0x20>)
 801300c:	2300      	movs	r3, #0
 801300e:	4604      	mov	r4, r0
 8013010:	4608      	mov	r0, r1
 8013012:	4611      	mov	r1, r2
 8013014:	602b      	str	r3, [r5, #0]
 8013016:	f7f0 ff19 	bl	8003e4c <_kill>
 801301a:	1c43      	adds	r3, r0, #1
 801301c:	d102      	bne.n	8013024 <_kill_r+0x1c>
 801301e:	682b      	ldr	r3, [r5, #0]
 8013020:	b103      	cbz	r3, 8013024 <_kill_r+0x1c>
 8013022:	6023      	str	r3, [r4, #0]
 8013024:	bd38      	pop	{r3, r4, r5, pc}
 8013026:	bf00      	nop
 8013028:	20005d6c 	.word	0x20005d6c

0801302c <_getpid_r>:
 801302c:	f7f0 bf06 	b.w	8003e3c <_getpid>

08013030 <_malloc_usable_size_r>:
 8013030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013034:	1f18      	subs	r0, r3, #4
 8013036:	2b00      	cmp	r3, #0
 8013038:	bfbc      	itt	lt
 801303a:	580b      	ldrlt	r3, [r1, r0]
 801303c:	18c0      	addlt	r0, r0, r3
 801303e:	4770      	bx	lr

08013040 <__swhatbuf_r>:
 8013040:	b570      	push	{r4, r5, r6, lr}
 8013042:	460c      	mov	r4, r1
 8013044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013048:	2900      	cmp	r1, #0
 801304a:	b096      	sub	sp, #88	@ 0x58
 801304c:	4615      	mov	r5, r2
 801304e:	461e      	mov	r6, r3
 8013050:	da0d      	bge.n	801306e <__swhatbuf_r+0x2e>
 8013052:	89a3      	ldrh	r3, [r4, #12]
 8013054:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013058:	f04f 0100 	mov.w	r1, #0
 801305c:	bf14      	ite	ne
 801305e:	2340      	movne	r3, #64	@ 0x40
 8013060:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013064:	2000      	movs	r0, #0
 8013066:	6031      	str	r1, [r6, #0]
 8013068:	602b      	str	r3, [r5, #0]
 801306a:	b016      	add	sp, #88	@ 0x58
 801306c:	bd70      	pop	{r4, r5, r6, pc}
 801306e:	466a      	mov	r2, sp
 8013070:	f000 f848 	bl	8013104 <_fstat_r>
 8013074:	2800      	cmp	r0, #0
 8013076:	dbec      	blt.n	8013052 <__swhatbuf_r+0x12>
 8013078:	9901      	ldr	r1, [sp, #4]
 801307a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801307e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013082:	4259      	negs	r1, r3
 8013084:	4159      	adcs	r1, r3
 8013086:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801308a:	e7eb      	b.n	8013064 <__swhatbuf_r+0x24>

0801308c <__smakebuf_r>:
 801308c:	898b      	ldrh	r3, [r1, #12]
 801308e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013090:	079d      	lsls	r5, r3, #30
 8013092:	4606      	mov	r6, r0
 8013094:	460c      	mov	r4, r1
 8013096:	d507      	bpl.n	80130a8 <__smakebuf_r+0x1c>
 8013098:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801309c:	6023      	str	r3, [r4, #0]
 801309e:	6123      	str	r3, [r4, #16]
 80130a0:	2301      	movs	r3, #1
 80130a2:	6163      	str	r3, [r4, #20]
 80130a4:	b003      	add	sp, #12
 80130a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130a8:	ab01      	add	r3, sp, #4
 80130aa:	466a      	mov	r2, sp
 80130ac:	f7ff ffc8 	bl	8013040 <__swhatbuf_r>
 80130b0:	9f00      	ldr	r7, [sp, #0]
 80130b2:	4605      	mov	r5, r0
 80130b4:	4639      	mov	r1, r7
 80130b6:	4630      	mov	r0, r6
 80130b8:	f7fe fdc4 	bl	8011c44 <_malloc_r>
 80130bc:	b948      	cbnz	r0, 80130d2 <__smakebuf_r+0x46>
 80130be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80130c2:	059a      	lsls	r2, r3, #22
 80130c4:	d4ee      	bmi.n	80130a4 <__smakebuf_r+0x18>
 80130c6:	f023 0303 	bic.w	r3, r3, #3
 80130ca:	f043 0302 	orr.w	r3, r3, #2
 80130ce:	81a3      	strh	r3, [r4, #12]
 80130d0:	e7e2      	b.n	8013098 <__smakebuf_r+0xc>
 80130d2:	89a3      	ldrh	r3, [r4, #12]
 80130d4:	6020      	str	r0, [r4, #0]
 80130d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80130da:	81a3      	strh	r3, [r4, #12]
 80130dc:	9b01      	ldr	r3, [sp, #4]
 80130de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80130e2:	b15b      	cbz	r3, 80130fc <__smakebuf_r+0x70>
 80130e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80130e8:	4630      	mov	r0, r6
 80130ea:	f000 f81d 	bl	8013128 <_isatty_r>
 80130ee:	b128      	cbz	r0, 80130fc <__smakebuf_r+0x70>
 80130f0:	89a3      	ldrh	r3, [r4, #12]
 80130f2:	f023 0303 	bic.w	r3, r3, #3
 80130f6:	f043 0301 	orr.w	r3, r3, #1
 80130fa:	81a3      	strh	r3, [r4, #12]
 80130fc:	89a3      	ldrh	r3, [r4, #12]
 80130fe:	431d      	orrs	r5, r3
 8013100:	81a5      	strh	r5, [r4, #12]
 8013102:	e7cf      	b.n	80130a4 <__smakebuf_r+0x18>

08013104 <_fstat_r>:
 8013104:	b538      	push	{r3, r4, r5, lr}
 8013106:	4d07      	ldr	r5, [pc, #28]	@ (8013124 <_fstat_r+0x20>)
 8013108:	2300      	movs	r3, #0
 801310a:	4604      	mov	r4, r0
 801310c:	4608      	mov	r0, r1
 801310e:	4611      	mov	r1, r2
 8013110:	602b      	str	r3, [r5, #0]
 8013112:	f7f0 fefb 	bl	8003f0c <_fstat>
 8013116:	1c43      	adds	r3, r0, #1
 8013118:	d102      	bne.n	8013120 <_fstat_r+0x1c>
 801311a:	682b      	ldr	r3, [r5, #0]
 801311c:	b103      	cbz	r3, 8013120 <_fstat_r+0x1c>
 801311e:	6023      	str	r3, [r4, #0]
 8013120:	bd38      	pop	{r3, r4, r5, pc}
 8013122:	bf00      	nop
 8013124:	20005d6c 	.word	0x20005d6c

08013128 <_isatty_r>:
 8013128:	b538      	push	{r3, r4, r5, lr}
 801312a:	4d06      	ldr	r5, [pc, #24]	@ (8013144 <_isatty_r+0x1c>)
 801312c:	2300      	movs	r3, #0
 801312e:	4604      	mov	r4, r0
 8013130:	4608      	mov	r0, r1
 8013132:	602b      	str	r3, [r5, #0]
 8013134:	f7f0 fefa 	bl	8003f2c <_isatty>
 8013138:	1c43      	adds	r3, r0, #1
 801313a:	d102      	bne.n	8013142 <_isatty_r+0x1a>
 801313c:	682b      	ldr	r3, [r5, #0]
 801313e:	b103      	cbz	r3, 8013142 <_isatty_r+0x1a>
 8013140:	6023      	str	r3, [r4, #0]
 8013142:	bd38      	pop	{r3, r4, r5, pc}
 8013144:	20005d6c 	.word	0x20005d6c

08013148 <atan2>:
 8013148:	f000 baa6 	b.w	8013698 <__ieee754_atan2>

0801314c <sqrt>:
 801314c:	b538      	push	{r3, r4, r5, lr}
 801314e:	ed2d 8b02 	vpush	{d8}
 8013152:	ec55 4b10 	vmov	r4, r5, d0
 8013156:	f000 f9c7 	bl	80134e8 <__ieee754_sqrt>
 801315a:	4622      	mov	r2, r4
 801315c:	462b      	mov	r3, r5
 801315e:	4620      	mov	r0, r4
 8013160:	4629      	mov	r1, r5
 8013162:	eeb0 8a40 	vmov.f32	s16, s0
 8013166:	eef0 8a60 	vmov.f32	s17, s1
 801316a:	f7ed fce7 	bl	8000b3c <__aeabi_dcmpun>
 801316e:	b990      	cbnz	r0, 8013196 <sqrt+0x4a>
 8013170:	2200      	movs	r2, #0
 8013172:	2300      	movs	r3, #0
 8013174:	4620      	mov	r0, r4
 8013176:	4629      	mov	r1, r5
 8013178:	f7ed fcb8 	bl	8000aec <__aeabi_dcmplt>
 801317c:	b158      	cbz	r0, 8013196 <sqrt+0x4a>
 801317e:	f7fd faf7 	bl	8010770 <__errno>
 8013182:	2321      	movs	r3, #33	@ 0x21
 8013184:	6003      	str	r3, [r0, #0]
 8013186:	2200      	movs	r2, #0
 8013188:	2300      	movs	r3, #0
 801318a:	4610      	mov	r0, r2
 801318c:	4619      	mov	r1, r3
 801318e:	f7ed fb65 	bl	800085c <__aeabi_ddiv>
 8013192:	ec41 0b18 	vmov	d8, r0, r1
 8013196:	eeb0 0a48 	vmov.f32	s0, s16
 801319a:	eef0 0a68 	vmov.f32	s1, s17
 801319e:	ecbd 8b02 	vpop	{d8}
 80131a2:	bd38      	pop	{r3, r4, r5, pc}
 80131a4:	0000      	movs	r0, r0
	...

080131a8 <atan>:
 80131a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131ac:	ec55 4b10 	vmov	r4, r5, d0
 80131b0:	4bbf      	ldr	r3, [pc, #764]	@ (80134b0 <atan+0x308>)
 80131b2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80131b6:	429e      	cmp	r6, r3
 80131b8:	46ab      	mov	fp, r5
 80131ba:	d918      	bls.n	80131ee <atan+0x46>
 80131bc:	4bbd      	ldr	r3, [pc, #756]	@ (80134b4 <atan+0x30c>)
 80131be:	429e      	cmp	r6, r3
 80131c0:	d801      	bhi.n	80131c6 <atan+0x1e>
 80131c2:	d109      	bne.n	80131d8 <atan+0x30>
 80131c4:	b144      	cbz	r4, 80131d8 <atan+0x30>
 80131c6:	4622      	mov	r2, r4
 80131c8:	462b      	mov	r3, r5
 80131ca:	4620      	mov	r0, r4
 80131cc:	4629      	mov	r1, r5
 80131ce:	f7ed f865 	bl	800029c <__adddf3>
 80131d2:	4604      	mov	r4, r0
 80131d4:	460d      	mov	r5, r1
 80131d6:	e006      	b.n	80131e6 <atan+0x3e>
 80131d8:	f1bb 0f00 	cmp.w	fp, #0
 80131dc:	f340 812b 	ble.w	8013436 <atan+0x28e>
 80131e0:	a597      	add	r5, pc, #604	@ (adr r5, 8013440 <atan+0x298>)
 80131e2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80131e6:	ec45 4b10 	vmov	d0, r4, r5
 80131ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131ee:	4bb2      	ldr	r3, [pc, #712]	@ (80134b8 <atan+0x310>)
 80131f0:	429e      	cmp	r6, r3
 80131f2:	d813      	bhi.n	801321c <atan+0x74>
 80131f4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80131f8:	429e      	cmp	r6, r3
 80131fa:	d80c      	bhi.n	8013216 <atan+0x6e>
 80131fc:	a392      	add	r3, pc, #584	@ (adr r3, 8013448 <atan+0x2a0>)
 80131fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013202:	4620      	mov	r0, r4
 8013204:	4629      	mov	r1, r5
 8013206:	f7ed f849 	bl	800029c <__adddf3>
 801320a:	4bac      	ldr	r3, [pc, #688]	@ (80134bc <atan+0x314>)
 801320c:	2200      	movs	r2, #0
 801320e:	f7ed fc8b 	bl	8000b28 <__aeabi_dcmpgt>
 8013212:	2800      	cmp	r0, #0
 8013214:	d1e7      	bne.n	80131e6 <atan+0x3e>
 8013216:	f04f 3aff 	mov.w	sl, #4294967295
 801321a:	e029      	b.n	8013270 <atan+0xc8>
 801321c:	f000 f95c 	bl	80134d8 <fabs>
 8013220:	4ba7      	ldr	r3, [pc, #668]	@ (80134c0 <atan+0x318>)
 8013222:	429e      	cmp	r6, r3
 8013224:	ec55 4b10 	vmov	r4, r5, d0
 8013228:	f200 80bc 	bhi.w	80133a4 <atan+0x1fc>
 801322c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8013230:	429e      	cmp	r6, r3
 8013232:	f200 809e 	bhi.w	8013372 <atan+0x1ca>
 8013236:	4622      	mov	r2, r4
 8013238:	462b      	mov	r3, r5
 801323a:	4620      	mov	r0, r4
 801323c:	4629      	mov	r1, r5
 801323e:	f7ed f82d 	bl	800029c <__adddf3>
 8013242:	4b9e      	ldr	r3, [pc, #632]	@ (80134bc <atan+0x314>)
 8013244:	2200      	movs	r2, #0
 8013246:	f7ed f827 	bl	8000298 <__aeabi_dsub>
 801324a:	2200      	movs	r2, #0
 801324c:	4606      	mov	r6, r0
 801324e:	460f      	mov	r7, r1
 8013250:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013254:	4620      	mov	r0, r4
 8013256:	4629      	mov	r1, r5
 8013258:	f7ed f820 	bl	800029c <__adddf3>
 801325c:	4602      	mov	r2, r0
 801325e:	460b      	mov	r3, r1
 8013260:	4630      	mov	r0, r6
 8013262:	4639      	mov	r1, r7
 8013264:	f7ed fafa 	bl	800085c <__aeabi_ddiv>
 8013268:	f04f 0a00 	mov.w	sl, #0
 801326c:	4604      	mov	r4, r0
 801326e:	460d      	mov	r5, r1
 8013270:	4622      	mov	r2, r4
 8013272:	462b      	mov	r3, r5
 8013274:	4620      	mov	r0, r4
 8013276:	4629      	mov	r1, r5
 8013278:	f7ed f9c6 	bl	8000608 <__aeabi_dmul>
 801327c:	4602      	mov	r2, r0
 801327e:	460b      	mov	r3, r1
 8013280:	4680      	mov	r8, r0
 8013282:	4689      	mov	r9, r1
 8013284:	f7ed f9c0 	bl	8000608 <__aeabi_dmul>
 8013288:	a371      	add	r3, pc, #452	@ (adr r3, 8013450 <atan+0x2a8>)
 801328a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801328e:	4606      	mov	r6, r0
 8013290:	460f      	mov	r7, r1
 8013292:	f7ed f9b9 	bl	8000608 <__aeabi_dmul>
 8013296:	a370      	add	r3, pc, #448	@ (adr r3, 8013458 <atan+0x2b0>)
 8013298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801329c:	f7ec fffe 	bl	800029c <__adddf3>
 80132a0:	4632      	mov	r2, r6
 80132a2:	463b      	mov	r3, r7
 80132a4:	f7ed f9b0 	bl	8000608 <__aeabi_dmul>
 80132a8:	a36d      	add	r3, pc, #436	@ (adr r3, 8013460 <atan+0x2b8>)
 80132aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ae:	f7ec fff5 	bl	800029c <__adddf3>
 80132b2:	4632      	mov	r2, r6
 80132b4:	463b      	mov	r3, r7
 80132b6:	f7ed f9a7 	bl	8000608 <__aeabi_dmul>
 80132ba:	a36b      	add	r3, pc, #428	@ (adr r3, 8013468 <atan+0x2c0>)
 80132bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132c0:	f7ec ffec 	bl	800029c <__adddf3>
 80132c4:	4632      	mov	r2, r6
 80132c6:	463b      	mov	r3, r7
 80132c8:	f7ed f99e 	bl	8000608 <__aeabi_dmul>
 80132cc:	a368      	add	r3, pc, #416	@ (adr r3, 8013470 <atan+0x2c8>)
 80132ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132d2:	f7ec ffe3 	bl	800029c <__adddf3>
 80132d6:	4632      	mov	r2, r6
 80132d8:	463b      	mov	r3, r7
 80132da:	f7ed f995 	bl	8000608 <__aeabi_dmul>
 80132de:	a366      	add	r3, pc, #408	@ (adr r3, 8013478 <atan+0x2d0>)
 80132e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132e4:	f7ec ffda 	bl	800029c <__adddf3>
 80132e8:	4642      	mov	r2, r8
 80132ea:	464b      	mov	r3, r9
 80132ec:	f7ed f98c 	bl	8000608 <__aeabi_dmul>
 80132f0:	a363      	add	r3, pc, #396	@ (adr r3, 8013480 <atan+0x2d8>)
 80132f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132f6:	4680      	mov	r8, r0
 80132f8:	4689      	mov	r9, r1
 80132fa:	4630      	mov	r0, r6
 80132fc:	4639      	mov	r1, r7
 80132fe:	f7ed f983 	bl	8000608 <__aeabi_dmul>
 8013302:	a361      	add	r3, pc, #388	@ (adr r3, 8013488 <atan+0x2e0>)
 8013304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013308:	f7ec ffc6 	bl	8000298 <__aeabi_dsub>
 801330c:	4632      	mov	r2, r6
 801330e:	463b      	mov	r3, r7
 8013310:	f7ed f97a 	bl	8000608 <__aeabi_dmul>
 8013314:	a35e      	add	r3, pc, #376	@ (adr r3, 8013490 <atan+0x2e8>)
 8013316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801331a:	f7ec ffbd 	bl	8000298 <__aeabi_dsub>
 801331e:	4632      	mov	r2, r6
 8013320:	463b      	mov	r3, r7
 8013322:	f7ed f971 	bl	8000608 <__aeabi_dmul>
 8013326:	a35c      	add	r3, pc, #368	@ (adr r3, 8013498 <atan+0x2f0>)
 8013328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801332c:	f7ec ffb4 	bl	8000298 <__aeabi_dsub>
 8013330:	4632      	mov	r2, r6
 8013332:	463b      	mov	r3, r7
 8013334:	f7ed f968 	bl	8000608 <__aeabi_dmul>
 8013338:	a359      	add	r3, pc, #356	@ (adr r3, 80134a0 <atan+0x2f8>)
 801333a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801333e:	f7ec ffab 	bl	8000298 <__aeabi_dsub>
 8013342:	4632      	mov	r2, r6
 8013344:	463b      	mov	r3, r7
 8013346:	f7ed f95f 	bl	8000608 <__aeabi_dmul>
 801334a:	4602      	mov	r2, r0
 801334c:	460b      	mov	r3, r1
 801334e:	4640      	mov	r0, r8
 8013350:	4649      	mov	r1, r9
 8013352:	f7ec ffa3 	bl	800029c <__adddf3>
 8013356:	4622      	mov	r2, r4
 8013358:	462b      	mov	r3, r5
 801335a:	f7ed f955 	bl	8000608 <__aeabi_dmul>
 801335e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8013362:	4602      	mov	r2, r0
 8013364:	460b      	mov	r3, r1
 8013366:	d148      	bne.n	80133fa <atan+0x252>
 8013368:	4620      	mov	r0, r4
 801336a:	4629      	mov	r1, r5
 801336c:	f7ec ff94 	bl	8000298 <__aeabi_dsub>
 8013370:	e72f      	b.n	80131d2 <atan+0x2a>
 8013372:	4b52      	ldr	r3, [pc, #328]	@ (80134bc <atan+0x314>)
 8013374:	2200      	movs	r2, #0
 8013376:	4620      	mov	r0, r4
 8013378:	4629      	mov	r1, r5
 801337a:	f7ec ff8d 	bl	8000298 <__aeabi_dsub>
 801337e:	4b4f      	ldr	r3, [pc, #316]	@ (80134bc <atan+0x314>)
 8013380:	4606      	mov	r6, r0
 8013382:	460f      	mov	r7, r1
 8013384:	2200      	movs	r2, #0
 8013386:	4620      	mov	r0, r4
 8013388:	4629      	mov	r1, r5
 801338a:	f7ec ff87 	bl	800029c <__adddf3>
 801338e:	4602      	mov	r2, r0
 8013390:	460b      	mov	r3, r1
 8013392:	4630      	mov	r0, r6
 8013394:	4639      	mov	r1, r7
 8013396:	f7ed fa61 	bl	800085c <__aeabi_ddiv>
 801339a:	f04f 0a01 	mov.w	sl, #1
 801339e:	4604      	mov	r4, r0
 80133a0:	460d      	mov	r5, r1
 80133a2:	e765      	b.n	8013270 <atan+0xc8>
 80133a4:	4b47      	ldr	r3, [pc, #284]	@ (80134c4 <atan+0x31c>)
 80133a6:	429e      	cmp	r6, r3
 80133a8:	d21c      	bcs.n	80133e4 <atan+0x23c>
 80133aa:	4b47      	ldr	r3, [pc, #284]	@ (80134c8 <atan+0x320>)
 80133ac:	2200      	movs	r2, #0
 80133ae:	4620      	mov	r0, r4
 80133b0:	4629      	mov	r1, r5
 80133b2:	f7ec ff71 	bl	8000298 <__aeabi_dsub>
 80133b6:	4b44      	ldr	r3, [pc, #272]	@ (80134c8 <atan+0x320>)
 80133b8:	4606      	mov	r6, r0
 80133ba:	460f      	mov	r7, r1
 80133bc:	2200      	movs	r2, #0
 80133be:	4620      	mov	r0, r4
 80133c0:	4629      	mov	r1, r5
 80133c2:	f7ed f921 	bl	8000608 <__aeabi_dmul>
 80133c6:	4b3d      	ldr	r3, [pc, #244]	@ (80134bc <atan+0x314>)
 80133c8:	2200      	movs	r2, #0
 80133ca:	f7ec ff67 	bl	800029c <__adddf3>
 80133ce:	4602      	mov	r2, r0
 80133d0:	460b      	mov	r3, r1
 80133d2:	4630      	mov	r0, r6
 80133d4:	4639      	mov	r1, r7
 80133d6:	f7ed fa41 	bl	800085c <__aeabi_ddiv>
 80133da:	f04f 0a02 	mov.w	sl, #2
 80133de:	4604      	mov	r4, r0
 80133e0:	460d      	mov	r5, r1
 80133e2:	e745      	b.n	8013270 <atan+0xc8>
 80133e4:	4622      	mov	r2, r4
 80133e6:	462b      	mov	r3, r5
 80133e8:	4938      	ldr	r1, [pc, #224]	@ (80134cc <atan+0x324>)
 80133ea:	2000      	movs	r0, #0
 80133ec:	f7ed fa36 	bl	800085c <__aeabi_ddiv>
 80133f0:	f04f 0a03 	mov.w	sl, #3
 80133f4:	4604      	mov	r4, r0
 80133f6:	460d      	mov	r5, r1
 80133f8:	e73a      	b.n	8013270 <atan+0xc8>
 80133fa:	4b35      	ldr	r3, [pc, #212]	@ (80134d0 <atan+0x328>)
 80133fc:	4e35      	ldr	r6, [pc, #212]	@ (80134d4 <atan+0x32c>)
 80133fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013406:	f7ec ff47 	bl	8000298 <__aeabi_dsub>
 801340a:	4622      	mov	r2, r4
 801340c:	462b      	mov	r3, r5
 801340e:	f7ec ff43 	bl	8000298 <__aeabi_dsub>
 8013412:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8013416:	4602      	mov	r2, r0
 8013418:	460b      	mov	r3, r1
 801341a:	e9d6 0100 	ldrd	r0, r1, [r6]
 801341e:	f7ec ff3b 	bl	8000298 <__aeabi_dsub>
 8013422:	f1bb 0f00 	cmp.w	fp, #0
 8013426:	4604      	mov	r4, r0
 8013428:	460d      	mov	r5, r1
 801342a:	f6bf aedc 	bge.w	80131e6 <atan+0x3e>
 801342e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013432:	461d      	mov	r5, r3
 8013434:	e6d7      	b.n	80131e6 <atan+0x3e>
 8013436:	a51c      	add	r5, pc, #112	@ (adr r5, 80134a8 <atan+0x300>)
 8013438:	e9d5 4500 	ldrd	r4, r5, [r5]
 801343c:	e6d3      	b.n	80131e6 <atan+0x3e>
 801343e:	bf00      	nop
 8013440:	54442d18 	.word	0x54442d18
 8013444:	3ff921fb 	.word	0x3ff921fb
 8013448:	8800759c 	.word	0x8800759c
 801344c:	7e37e43c 	.word	0x7e37e43c
 8013450:	e322da11 	.word	0xe322da11
 8013454:	3f90ad3a 	.word	0x3f90ad3a
 8013458:	24760deb 	.word	0x24760deb
 801345c:	3fa97b4b 	.word	0x3fa97b4b
 8013460:	a0d03d51 	.word	0xa0d03d51
 8013464:	3fb10d66 	.word	0x3fb10d66
 8013468:	c54c206e 	.word	0xc54c206e
 801346c:	3fb745cd 	.word	0x3fb745cd
 8013470:	920083ff 	.word	0x920083ff
 8013474:	3fc24924 	.word	0x3fc24924
 8013478:	5555550d 	.word	0x5555550d
 801347c:	3fd55555 	.word	0x3fd55555
 8013480:	2c6a6c2f 	.word	0x2c6a6c2f
 8013484:	bfa2b444 	.word	0xbfa2b444
 8013488:	52defd9a 	.word	0x52defd9a
 801348c:	3fadde2d 	.word	0x3fadde2d
 8013490:	af749a6d 	.word	0xaf749a6d
 8013494:	3fb3b0f2 	.word	0x3fb3b0f2
 8013498:	fe231671 	.word	0xfe231671
 801349c:	3fbc71c6 	.word	0x3fbc71c6
 80134a0:	9998ebc4 	.word	0x9998ebc4
 80134a4:	3fc99999 	.word	0x3fc99999
 80134a8:	54442d18 	.word	0x54442d18
 80134ac:	bff921fb 	.word	0xbff921fb
 80134b0:	440fffff 	.word	0x440fffff
 80134b4:	7ff00000 	.word	0x7ff00000
 80134b8:	3fdbffff 	.word	0x3fdbffff
 80134bc:	3ff00000 	.word	0x3ff00000
 80134c0:	3ff2ffff 	.word	0x3ff2ffff
 80134c4:	40038000 	.word	0x40038000
 80134c8:	3ff80000 	.word	0x3ff80000
 80134cc:	bff00000 	.word	0xbff00000
 80134d0:	08014630 	.word	0x08014630
 80134d4:	08014650 	.word	0x08014650

080134d8 <fabs>:
 80134d8:	ec51 0b10 	vmov	r0, r1, d0
 80134dc:	4602      	mov	r2, r0
 80134de:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80134e2:	ec43 2b10 	vmov	d0, r2, r3
 80134e6:	4770      	bx	lr

080134e8 <__ieee754_sqrt>:
 80134e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134ec:	4a66      	ldr	r2, [pc, #408]	@ (8013688 <__ieee754_sqrt+0x1a0>)
 80134ee:	ec55 4b10 	vmov	r4, r5, d0
 80134f2:	43aa      	bics	r2, r5
 80134f4:	462b      	mov	r3, r5
 80134f6:	4621      	mov	r1, r4
 80134f8:	d110      	bne.n	801351c <__ieee754_sqrt+0x34>
 80134fa:	4622      	mov	r2, r4
 80134fc:	4620      	mov	r0, r4
 80134fe:	4629      	mov	r1, r5
 8013500:	f7ed f882 	bl	8000608 <__aeabi_dmul>
 8013504:	4602      	mov	r2, r0
 8013506:	460b      	mov	r3, r1
 8013508:	4620      	mov	r0, r4
 801350a:	4629      	mov	r1, r5
 801350c:	f7ec fec6 	bl	800029c <__adddf3>
 8013510:	4604      	mov	r4, r0
 8013512:	460d      	mov	r5, r1
 8013514:	ec45 4b10 	vmov	d0, r4, r5
 8013518:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801351c:	2d00      	cmp	r5, #0
 801351e:	dc0e      	bgt.n	801353e <__ieee754_sqrt+0x56>
 8013520:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8013524:	4322      	orrs	r2, r4
 8013526:	d0f5      	beq.n	8013514 <__ieee754_sqrt+0x2c>
 8013528:	b19d      	cbz	r5, 8013552 <__ieee754_sqrt+0x6a>
 801352a:	4622      	mov	r2, r4
 801352c:	4620      	mov	r0, r4
 801352e:	4629      	mov	r1, r5
 8013530:	f7ec feb2 	bl	8000298 <__aeabi_dsub>
 8013534:	4602      	mov	r2, r0
 8013536:	460b      	mov	r3, r1
 8013538:	f7ed f990 	bl	800085c <__aeabi_ddiv>
 801353c:	e7e8      	b.n	8013510 <__ieee754_sqrt+0x28>
 801353e:	152a      	asrs	r2, r5, #20
 8013540:	d115      	bne.n	801356e <__ieee754_sqrt+0x86>
 8013542:	2000      	movs	r0, #0
 8013544:	e009      	b.n	801355a <__ieee754_sqrt+0x72>
 8013546:	0acb      	lsrs	r3, r1, #11
 8013548:	3a15      	subs	r2, #21
 801354a:	0549      	lsls	r1, r1, #21
 801354c:	2b00      	cmp	r3, #0
 801354e:	d0fa      	beq.n	8013546 <__ieee754_sqrt+0x5e>
 8013550:	e7f7      	b.n	8013542 <__ieee754_sqrt+0x5a>
 8013552:	462a      	mov	r2, r5
 8013554:	e7fa      	b.n	801354c <__ieee754_sqrt+0x64>
 8013556:	005b      	lsls	r3, r3, #1
 8013558:	3001      	adds	r0, #1
 801355a:	02dc      	lsls	r4, r3, #11
 801355c:	d5fb      	bpl.n	8013556 <__ieee754_sqrt+0x6e>
 801355e:	1e44      	subs	r4, r0, #1
 8013560:	1b12      	subs	r2, r2, r4
 8013562:	f1c0 0420 	rsb	r4, r0, #32
 8013566:	fa21 f404 	lsr.w	r4, r1, r4
 801356a:	4323      	orrs	r3, r4
 801356c:	4081      	lsls	r1, r0
 801356e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013572:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8013576:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801357a:	07d2      	lsls	r2, r2, #31
 801357c:	bf5c      	itt	pl
 801357e:	005b      	lslpl	r3, r3, #1
 8013580:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8013584:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013588:	bf58      	it	pl
 801358a:	0049      	lslpl	r1, r1, #1
 801358c:	2600      	movs	r6, #0
 801358e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8013592:	107f      	asrs	r7, r7, #1
 8013594:	0049      	lsls	r1, r1, #1
 8013596:	2016      	movs	r0, #22
 8013598:	4632      	mov	r2, r6
 801359a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801359e:	1915      	adds	r5, r2, r4
 80135a0:	429d      	cmp	r5, r3
 80135a2:	bfde      	ittt	le
 80135a4:	192a      	addle	r2, r5, r4
 80135a6:	1b5b      	suble	r3, r3, r5
 80135a8:	1936      	addle	r6, r6, r4
 80135aa:	0fcd      	lsrs	r5, r1, #31
 80135ac:	3801      	subs	r0, #1
 80135ae:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80135b2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80135b6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80135ba:	d1f0      	bne.n	801359e <__ieee754_sqrt+0xb6>
 80135bc:	4605      	mov	r5, r0
 80135be:	2420      	movs	r4, #32
 80135c0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80135c4:	4293      	cmp	r3, r2
 80135c6:	eb0c 0e00 	add.w	lr, ip, r0
 80135ca:	dc02      	bgt.n	80135d2 <__ieee754_sqrt+0xea>
 80135cc:	d113      	bne.n	80135f6 <__ieee754_sqrt+0x10e>
 80135ce:	458e      	cmp	lr, r1
 80135d0:	d811      	bhi.n	80135f6 <__ieee754_sqrt+0x10e>
 80135d2:	f1be 0f00 	cmp.w	lr, #0
 80135d6:	eb0e 000c 	add.w	r0, lr, ip
 80135da:	da3f      	bge.n	801365c <__ieee754_sqrt+0x174>
 80135dc:	2800      	cmp	r0, #0
 80135de:	db3d      	blt.n	801365c <__ieee754_sqrt+0x174>
 80135e0:	f102 0801 	add.w	r8, r2, #1
 80135e4:	1a9b      	subs	r3, r3, r2
 80135e6:	458e      	cmp	lr, r1
 80135e8:	bf88      	it	hi
 80135ea:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80135ee:	eba1 010e 	sub.w	r1, r1, lr
 80135f2:	4465      	add	r5, ip
 80135f4:	4642      	mov	r2, r8
 80135f6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80135fa:	3c01      	subs	r4, #1
 80135fc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8013600:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013604:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8013608:	d1dc      	bne.n	80135c4 <__ieee754_sqrt+0xdc>
 801360a:	4319      	orrs	r1, r3
 801360c:	d01b      	beq.n	8013646 <__ieee754_sqrt+0x15e>
 801360e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 801368c <__ieee754_sqrt+0x1a4>
 8013612:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8013690 <__ieee754_sqrt+0x1a8>
 8013616:	e9da 0100 	ldrd	r0, r1, [sl]
 801361a:	e9db 2300 	ldrd	r2, r3, [fp]
 801361e:	f7ec fe3b 	bl	8000298 <__aeabi_dsub>
 8013622:	e9da 8900 	ldrd	r8, r9, [sl]
 8013626:	4602      	mov	r2, r0
 8013628:	460b      	mov	r3, r1
 801362a:	4640      	mov	r0, r8
 801362c:	4649      	mov	r1, r9
 801362e:	f7ed fa67 	bl	8000b00 <__aeabi_dcmple>
 8013632:	b140      	cbz	r0, 8013646 <__ieee754_sqrt+0x15e>
 8013634:	f1b5 3fff 	cmp.w	r5, #4294967295
 8013638:	e9da 0100 	ldrd	r0, r1, [sl]
 801363c:	e9db 2300 	ldrd	r2, r3, [fp]
 8013640:	d10e      	bne.n	8013660 <__ieee754_sqrt+0x178>
 8013642:	3601      	adds	r6, #1
 8013644:	4625      	mov	r5, r4
 8013646:	1073      	asrs	r3, r6, #1
 8013648:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 801364c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8013650:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8013654:	086b      	lsrs	r3, r5, #1
 8013656:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 801365a:	e759      	b.n	8013510 <__ieee754_sqrt+0x28>
 801365c:	4690      	mov	r8, r2
 801365e:	e7c1      	b.n	80135e4 <__ieee754_sqrt+0xfc>
 8013660:	f7ec fe1c 	bl	800029c <__adddf3>
 8013664:	e9da 8900 	ldrd	r8, r9, [sl]
 8013668:	4602      	mov	r2, r0
 801366a:	460b      	mov	r3, r1
 801366c:	4640      	mov	r0, r8
 801366e:	4649      	mov	r1, r9
 8013670:	f7ed fa3c 	bl	8000aec <__aeabi_dcmplt>
 8013674:	b120      	cbz	r0, 8013680 <__ieee754_sqrt+0x198>
 8013676:	1cab      	adds	r3, r5, #2
 8013678:	bf08      	it	eq
 801367a:	3601      	addeq	r6, #1
 801367c:	3502      	adds	r5, #2
 801367e:	e7e2      	b.n	8013646 <__ieee754_sqrt+0x15e>
 8013680:	1c6b      	adds	r3, r5, #1
 8013682:	f023 0501 	bic.w	r5, r3, #1
 8013686:	e7de      	b.n	8013646 <__ieee754_sqrt+0x15e>
 8013688:	7ff00000 	.word	0x7ff00000
 801368c:	08014678 	.word	0x08014678
 8013690:	08014670 	.word	0x08014670
 8013694:	00000000 	.word	0x00000000

08013698 <__ieee754_atan2>:
 8013698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801369c:	ec57 6b11 	vmov	r6, r7, d1
 80136a0:	4273      	negs	r3, r6
 80136a2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8013820 <__ieee754_atan2+0x188>
 80136a6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80136aa:	4333      	orrs	r3, r6
 80136ac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80136b0:	4543      	cmp	r3, r8
 80136b2:	ec51 0b10 	vmov	r0, r1, d0
 80136b6:	4635      	mov	r5, r6
 80136b8:	d809      	bhi.n	80136ce <__ieee754_atan2+0x36>
 80136ba:	4244      	negs	r4, r0
 80136bc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80136c0:	4304      	orrs	r4, r0
 80136c2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80136c6:	4544      	cmp	r4, r8
 80136c8:	468e      	mov	lr, r1
 80136ca:	4681      	mov	r9, r0
 80136cc:	d907      	bls.n	80136de <__ieee754_atan2+0x46>
 80136ce:	4632      	mov	r2, r6
 80136d0:	463b      	mov	r3, r7
 80136d2:	f7ec fde3 	bl	800029c <__adddf3>
 80136d6:	ec41 0b10 	vmov	d0, r0, r1
 80136da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136de:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80136e2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80136e6:	4334      	orrs	r4, r6
 80136e8:	d103      	bne.n	80136f2 <__ieee754_atan2+0x5a>
 80136ea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80136ee:	f7ff bd5b 	b.w	80131a8 <atan>
 80136f2:	17bc      	asrs	r4, r7, #30
 80136f4:	f004 0402 	and.w	r4, r4, #2
 80136f8:	ea53 0909 	orrs.w	r9, r3, r9
 80136fc:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8013700:	d107      	bne.n	8013712 <__ieee754_atan2+0x7a>
 8013702:	2c02      	cmp	r4, #2
 8013704:	d05f      	beq.n	80137c6 <__ieee754_atan2+0x12e>
 8013706:	2c03      	cmp	r4, #3
 8013708:	d1e5      	bne.n	80136d6 <__ieee754_atan2+0x3e>
 801370a:	a143      	add	r1, pc, #268	@ (adr r1, 8013818 <__ieee754_atan2+0x180>)
 801370c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013710:	e7e1      	b.n	80136d6 <__ieee754_atan2+0x3e>
 8013712:	4315      	orrs	r5, r2
 8013714:	d106      	bne.n	8013724 <__ieee754_atan2+0x8c>
 8013716:	f1be 0f00 	cmp.w	lr, #0
 801371a:	db5f      	blt.n	80137dc <__ieee754_atan2+0x144>
 801371c:	a136      	add	r1, pc, #216	@ (adr r1, 80137f8 <__ieee754_atan2+0x160>)
 801371e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013722:	e7d8      	b.n	80136d6 <__ieee754_atan2+0x3e>
 8013724:	4542      	cmp	r2, r8
 8013726:	d10f      	bne.n	8013748 <__ieee754_atan2+0xb0>
 8013728:	4293      	cmp	r3, r2
 801372a:	f104 34ff 	add.w	r4, r4, #4294967295
 801372e:	d107      	bne.n	8013740 <__ieee754_atan2+0xa8>
 8013730:	2c02      	cmp	r4, #2
 8013732:	d84c      	bhi.n	80137ce <__ieee754_atan2+0x136>
 8013734:	4b36      	ldr	r3, [pc, #216]	@ (8013810 <__ieee754_atan2+0x178>)
 8013736:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801373a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801373e:	e7ca      	b.n	80136d6 <__ieee754_atan2+0x3e>
 8013740:	2c02      	cmp	r4, #2
 8013742:	d848      	bhi.n	80137d6 <__ieee754_atan2+0x13e>
 8013744:	4b33      	ldr	r3, [pc, #204]	@ (8013814 <__ieee754_atan2+0x17c>)
 8013746:	e7f6      	b.n	8013736 <__ieee754_atan2+0x9e>
 8013748:	4543      	cmp	r3, r8
 801374a:	d0e4      	beq.n	8013716 <__ieee754_atan2+0x7e>
 801374c:	1a9b      	subs	r3, r3, r2
 801374e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8013752:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013756:	da1e      	bge.n	8013796 <__ieee754_atan2+0xfe>
 8013758:	2f00      	cmp	r7, #0
 801375a:	da01      	bge.n	8013760 <__ieee754_atan2+0xc8>
 801375c:	323c      	adds	r2, #60	@ 0x3c
 801375e:	db1e      	blt.n	801379e <__ieee754_atan2+0x106>
 8013760:	4632      	mov	r2, r6
 8013762:	463b      	mov	r3, r7
 8013764:	f7ed f87a 	bl	800085c <__aeabi_ddiv>
 8013768:	ec41 0b10 	vmov	d0, r0, r1
 801376c:	f7ff feb4 	bl	80134d8 <fabs>
 8013770:	f7ff fd1a 	bl	80131a8 <atan>
 8013774:	ec51 0b10 	vmov	r0, r1, d0
 8013778:	2c01      	cmp	r4, #1
 801377a:	d013      	beq.n	80137a4 <__ieee754_atan2+0x10c>
 801377c:	2c02      	cmp	r4, #2
 801377e:	d015      	beq.n	80137ac <__ieee754_atan2+0x114>
 8013780:	2c00      	cmp	r4, #0
 8013782:	d0a8      	beq.n	80136d6 <__ieee754_atan2+0x3e>
 8013784:	a318      	add	r3, pc, #96	@ (adr r3, 80137e8 <__ieee754_atan2+0x150>)
 8013786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801378a:	f7ec fd85 	bl	8000298 <__aeabi_dsub>
 801378e:	a318      	add	r3, pc, #96	@ (adr r3, 80137f0 <__ieee754_atan2+0x158>)
 8013790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013794:	e014      	b.n	80137c0 <__ieee754_atan2+0x128>
 8013796:	a118      	add	r1, pc, #96	@ (adr r1, 80137f8 <__ieee754_atan2+0x160>)
 8013798:	e9d1 0100 	ldrd	r0, r1, [r1]
 801379c:	e7ec      	b.n	8013778 <__ieee754_atan2+0xe0>
 801379e:	2000      	movs	r0, #0
 80137a0:	2100      	movs	r1, #0
 80137a2:	e7e9      	b.n	8013778 <__ieee754_atan2+0xe0>
 80137a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80137a8:	4619      	mov	r1, r3
 80137aa:	e794      	b.n	80136d6 <__ieee754_atan2+0x3e>
 80137ac:	a30e      	add	r3, pc, #56	@ (adr r3, 80137e8 <__ieee754_atan2+0x150>)
 80137ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137b2:	f7ec fd71 	bl	8000298 <__aeabi_dsub>
 80137b6:	4602      	mov	r2, r0
 80137b8:	460b      	mov	r3, r1
 80137ba:	a10d      	add	r1, pc, #52	@ (adr r1, 80137f0 <__ieee754_atan2+0x158>)
 80137bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80137c0:	f7ec fd6a 	bl	8000298 <__aeabi_dsub>
 80137c4:	e787      	b.n	80136d6 <__ieee754_atan2+0x3e>
 80137c6:	a10a      	add	r1, pc, #40	@ (adr r1, 80137f0 <__ieee754_atan2+0x158>)
 80137c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80137cc:	e783      	b.n	80136d6 <__ieee754_atan2+0x3e>
 80137ce:	a10c      	add	r1, pc, #48	@ (adr r1, 8013800 <__ieee754_atan2+0x168>)
 80137d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80137d4:	e77f      	b.n	80136d6 <__ieee754_atan2+0x3e>
 80137d6:	2000      	movs	r0, #0
 80137d8:	2100      	movs	r1, #0
 80137da:	e77c      	b.n	80136d6 <__ieee754_atan2+0x3e>
 80137dc:	a10a      	add	r1, pc, #40	@ (adr r1, 8013808 <__ieee754_atan2+0x170>)
 80137de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80137e2:	e778      	b.n	80136d6 <__ieee754_atan2+0x3e>
 80137e4:	f3af 8000 	nop.w
 80137e8:	33145c07 	.word	0x33145c07
 80137ec:	3ca1a626 	.word	0x3ca1a626
 80137f0:	54442d18 	.word	0x54442d18
 80137f4:	400921fb 	.word	0x400921fb
 80137f8:	54442d18 	.word	0x54442d18
 80137fc:	3ff921fb 	.word	0x3ff921fb
 8013800:	54442d18 	.word	0x54442d18
 8013804:	3fe921fb 	.word	0x3fe921fb
 8013808:	54442d18 	.word	0x54442d18
 801380c:	bff921fb 	.word	0xbff921fb
 8013810:	08014698 	.word	0x08014698
 8013814:	08014680 	.word	0x08014680
 8013818:	54442d18 	.word	0x54442d18
 801381c:	c00921fb 	.word	0xc00921fb
 8013820:	7ff00000 	.word	0x7ff00000

08013824 <_init>:
 8013824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013826:	bf00      	nop
 8013828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801382a:	bc08      	pop	{r3}
 801382c:	469e      	mov	lr, r3
 801382e:	4770      	bx	lr

08013830 <_fini>:
 8013830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013832:	bf00      	nop
 8013834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013836:	bc08      	pop	{r3}
 8013838:	469e      	mov	lr, r3
 801383a:	4770      	bx	lr
