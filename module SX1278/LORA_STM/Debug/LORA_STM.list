
LORA_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f68  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  0800a108  0800a108  0000b108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a27c  0800a27c  0000c14c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a27c  0800a27c  0000b27c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a284  0800a284  0000c14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a284  0800a284  0000b284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a288  0800a288  0000b288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  0800a28c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017a4  2000014c  0800a3d8  0000c14c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200018f0  0800a3d8  0000c8f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c14c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001388c  00000000  00000000  0000c17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039f1  00000000  00000000  0001fa08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  00023400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c53  00000000  00000000  00024490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198f7  00000000  00000000  000250e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c91  00000000  00000000  0003e9da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ae85  00000000  00000000  0005566b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e04f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000494c  00000000  00000000  000e0534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000e4e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000014c 	.word	0x2000014c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a0f0 	.word	0x0800a0f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000150 	.word	0x20000150
 80001dc:	0800a0f0 	.word	0x0800a0f0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b96a 	b.w	8000d68 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	460c      	mov	r4, r1
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d14e      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000ab8:	4694      	mov	ip, r2
 8000aba:	458c      	cmp	ip, r1
 8000abc:	4686      	mov	lr, r0
 8000abe:	fab2 f282 	clz	r2, r2
 8000ac2:	d962      	bls.n	8000b8a <__udivmoddi4+0xde>
 8000ac4:	b14a      	cbz	r2, 8000ada <__udivmoddi4+0x2e>
 8000ac6:	f1c2 0320 	rsb	r3, r2, #32
 8000aca:	4091      	lsls	r1, r2
 8000acc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad4:	4319      	orrs	r1, r3
 8000ad6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ada:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ade:	fa1f f68c 	uxth.w	r6, ip
 8000ae2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ae6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aea:	fb07 1114 	mls	r1, r7, r4, r1
 8000aee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af2:	fb04 f106 	mul.w	r1, r4, r6
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b02:	f080 8112 	bcs.w	8000d2a <__udivmoddi4+0x27e>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 810f 	bls.w	8000d2a <__udivmoddi4+0x27e>
 8000b0c:	3c02      	subs	r4, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a59      	subs	r1, r3, r1
 8000b12:	fa1f f38e 	uxth.w	r3, lr
 8000b16:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b1a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb00 f606 	mul.w	r6, r0, r6
 8000b26:	429e      	cmp	r6, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x94>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b32:	f080 80fc 	bcs.w	8000d2e <__udivmoddi4+0x282>
 8000b36:	429e      	cmp	r6, r3
 8000b38:	f240 80f9 	bls.w	8000d2e <__udivmoddi4+0x282>
 8000b3c:	4463      	add	r3, ip
 8000b3e:	3802      	subs	r0, #2
 8000b40:	1b9b      	subs	r3, r3, r6
 8000b42:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b46:	2100      	movs	r1, #0
 8000b48:	b11d      	cbz	r5, 8000b52 <__udivmoddi4+0xa6>
 8000b4a:	40d3      	lsrs	r3, r2
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d905      	bls.n	8000b66 <__udivmoddi4+0xba>
 8000b5a:	b10d      	cbz	r5, 8000b60 <__udivmoddi4+0xb4>
 8000b5c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b60:	2100      	movs	r1, #0
 8000b62:	4608      	mov	r0, r1
 8000b64:	e7f5      	b.n	8000b52 <__udivmoddi4+0xa6>
 8000b66:	fab3 f183 	clz	r1, r3
 8000b6a:	2900      	cmp	r1, #0
 8000b6c:	d146      	bne.n	8000bfc <__udivmoddi4+0x150>
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	d302      	bcc.n	8000b78 <__udivmoddi4+0xcc>
 8000b72:	4290      	cmp	r0, r2
 8000b74:	f0c0 80f0 	bcc.w	8000d58 <__udivmoddi4+0x2ac>
 8000b78:	1a86      	subs	r6, r0, r2
 8000b7a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b7e:	2001      	movs	r0, #1
 8000b80:	2d00      	cmp	r5, #0
 8000b82:	d0e6      	beq.n	8000b52 <__udivmoddi4+0xa6>
 8000b84:	e9c5 6300 	strd	r6, r3, [r5]
 8000b88:	e7e3      	b.n	8000b52 <__udivmoddi4+0xa6>
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	f040 8090 	bne.w	8000cb0 <__udivmoddi4+0x204>
 8000b90:	eba1 040c 	sub.w	r4, r1, ip
 8000b94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b98:	fa1f f78c 	uxth.w	r7, ip
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ba2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ba6:	fb08 4416 	mls	r4, r8, r6, r4
 8000baa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bae:	fb07 f006 	mul.w	r0, r7, r6
 8000bb2:	4298      	cmp	r0, r3
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x11c>
 8000bb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bba:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x11a>
 8000bc0:	4298      	cmp	r0, r3
 8000bc2:	f200 80cd 	bhi.w	8000d60 <__udivmoddi4+0x2b4>
 8000bc6:	4626      	mov	r6, r4
 8000bc8:	1a1c      	subs	r4, r3, r0
 8000bca:	fa1f f38e 	uxth.w	r3, lr
 8000bce:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bd2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bda:	fb00 f707 	mul.w	r7, r0, r7
 8000bde:	429f      	cmp	r7, r3
 8000be0:	d908      	bls.n	8000bf4 <__udivmoddi4+0x148>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bea:	d202      	bcs.n	8000bf2 <__udivmoddi4+0x146>
 8000bec:	429f      	cmp	r7, r3
 8000bee:	f200 80b0 	bhi.w	8000d52 <__udivmoddi4+0x2a6>
 8000bf2:	4620      	mov	r0, r4
 8000bf4:	1bdb      	subs	r3, r3, r7
 8000bf6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bfa:	e7a5      	b.n	8000b48 <__udivmoddi4+0x9c>
 8000bfc:	f1c1 0620 	rsb	r6, r1, #32
 8000c00:	408b      	lsls	r3, r1
 8000c02:	fa22 f706 	lsr.w	r7, r2, r6
 8000c06:	431f      	orrs	r7, r3
 8000c08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c10:	ea43 030c 	orr.w	r3, r3, ip
 8000c14:	40f4      	lsrs	r4, r6
 8000c16:	fa00 f801 	lsl.w	r8, r0, r1
 8000c1a:	0c38      	lsrs	r0, r7, #16
 8000c1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c20:	fbb4 fef0 	udiv	lr, r4, r0
 8000c24:	fa1f fc87 	uxth.w	ip, r7
 8000c28:	fb00 441e 	mls	r4, r0, lr, r4
 8000c2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c30:	fb0e f90c 	mul.w	r9, lr, ip
 8000c34:	45a1      	cmp	r9, r4
 8000c36:	fa02 f201 	lsl.w	r2, r2, r1
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x1a6>
 8000c3c:	193c      	adds	r4, r7, r4
 8000c3e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c42:	f080 8084 	bcs.w	8000d4e <__udivmoddi4+0x2a2>
 8000c46:	45a1      	cmp	r9, r4
 8000c48:	f240 8081 	bls.w	8000d4e <__udivmoddi4+0x2a2>
 8000c4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c50:	443c      	add	r4, r7
 8000c52:	eba4 0409 	sub.w	r4, r4, r9
 8000c56:	fa1f f983 	uxth.w	r9, r3
 8000c5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	d907      	bls.n	8000c7e <__udivmoddi4+0x1d2>
 8000c6e:	193c      	adds	r4, r7, r4
 8000c70:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c74:	d267      	bcs.n	8000d46 <__udivmoddi4+0x29a>
 8000c76:	45a4      	cmp	ip, r4
 8000c78:	d965      	bls.n	8000d46 <__udivmoddi4+0x29a>
 8000c7a:	3b02      	subs	r3, #2
 8000c7c:	443c      	add	r4, r7
 8000c7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c82:	fba0 9302 	umull	r9, r3, r0, r2
 8000c86:	eba4 040c 	sub.w	r4, r4, ip
 8000c8a:	429c      	cmp	r4, r3
 8000c8c:	46ce      	mov	lr, r9
 8000c8e:	469c      	mov	ip, r3
 8000c90:	d351      	bcc.n	8000d36 <__udivmoddi4+0x28a>
 8000c92:	d04e      	beq.n	8000d32 <__udivmoddi4+0x286>
 8000c94:	b155      	cbz	r5, 8000cac <__udivmoddi4+0x200>
 8000c96:	ebb8 030e 	subs.w	r3, r8, lr
 8000c9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000ca2:	40cb      	lsrs	r3, r1
 8000ca4:	431e      	orrs	r6, r3
 8000ca6:	40cc      	lsrs	r4, r1
 8000ca8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	e750      	b.n	8000b52 <__udivmoddi4+0xa6>
 8000cb0:	f1c2 0320 	rsb	r3, r2, #32
 8000cb4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cbc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cc0:	4094      	lsls	r4, r2
 8000cc2:	430c      	orrs	r4, r1
 8000cc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ccc:	fa1f f78c 	uxth.w	r7, ip
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cd8:	0c23      	lsrs	r3, r4, #16
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb00 f107 	mul.w	r1, r0, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x24c>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cee:	d22c      	bcs.n	8000d4a <__udivmoddi4+0x29e>
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d92a      	bls.n	8000d4a <__udivmoddi4+0x29e>
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d00:	fb08 3311 	mls	r3, r8, r1, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb01 f307 	mul.w	r3, r1, r7
 8000d0c:	42a3      	cmp	r3, r4
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x276>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d18:	d213      	bcs.n	8000d42 <__udivmoddi4+0x296>
 8000d1a:	42a3      	cmp	r3, r4
 8000d1c:	d911      	bls.n	8000d42 <__udivmoddi4+0x296>
 8000d1e:	3902      	subs	r1, #2
 8000d20:	4464      	add	r4, ip
 8000d22:	1ae4      	subs	r4, r4, r3
 8000d24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d28:	e739      	b.n	8000b9e <__udivmoddi4+0xf2>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	e6f0      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e706      	b.n	8000b40 <__udivmoddi4+0x94>
 8000d32:	45c8      	cmp	r8, r9
 8000d34:	d2ae      	bcs.n	8000c94 <__udivmoddi4+0x1e8>
 8000d36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d3e:	3801      	subs	r0, #1
 8000d40:	e7a8      	b.n	8000c94 <__udivmoddi4+0x1e8>
 8000d42:	4631      	mov	r1, r6
 8000d44:	e7ed      	b.n	8000d22 <__udivmoddi4+0x276>
 8000d46:	4603      	mov	r3, r0
 8000d48:	e799      	b.n	8000c7e <__udivmoddi4+0x1d2>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e7d4      	b.n	8000cf8 <__udivmoddi4+0x24c>
 8000d4e:	46d6      	mov	lr, sl
 8000d50:	e77f      	b.n	8000c52 <__udivmoddi4+0x1a6>
 8000d52:	4463      	add	r3, ip
 8000d54:	3802      	subs	r0, #2
 8000d56:	e74d      	b.n	8000bf4 <__udivmoddi4+0x148>
 8000d58:	4606      	mov	r6, r0
 8000d5a:	4623      	mov	r3, r4
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	e70f      	b.n	8000b80 <__udivmoddi4+0xd4>
 8000d60:	3e02      	subs	r6, #2
 8000d62:	4463      	add	r3, ip
 8000d64:	e730      	b.n	8000bc8 <__udivmoddi4+0x11c>
 8000d66:	bf00      	nop

08000d68 <__aeabi_idiv0>:
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000d76:	2101      	movs	r1, #1
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f000 f9fe 	bl	800117a <LoRa_read>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000d82:	7bbb      	ldrb	r3, [r7, #14]
 8000d84:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d107      	bne.n	8000d9c <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000d8c:	7bbb      	ldrb	r3, [r7, #14]
 8000d8e:	f023 0307 	bic.w	r3, r3, #7
 8000d92:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2200      	movs	r2, #0
 8000d98:	61da      	str	r2, [r3, #28]
 8000d9a:	e03e      	b.n	8000e1a <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d10c      	bne.n	8000dbc <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000da2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000da6:	f023 0307 	bic.w	r3, r3, #7
 8000daa:	b25b      	sxtb	r3, r3
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	b25b      	sxtb	r3, r3
 8000db2:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2201      	movs	r2, #1
 8000db8:	61da      	str	r2, [r3, #28]
 8000dba:	e02e      	b.n	8000e1a <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	2b03      	cmp	r3, #3
 8000dc0:	d10c      	bne.n	8000ddc <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000dc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000dc6:	f023 0307 	bic.w	r3, r3, #7
 8000dca:	b25b      	sxtb	r3, r3
 8000dcc:	f043 0303 	orr.w	r3, r3, #3
 8000dd0:	b25b      	sxtb	r3, r3
 8000dd2:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	61da      	str	r2, [r3, #28]
 8000dda:	e01e      	b.n	8000e1a <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	2b05      	cmp	r3, #5
 8000de0:	d10c      	bne.n	8000dfc <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000de2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000de6:	f023 0307 	bic.w	r3, r3, #7
 8000dea:	b25b      	sxtb	r3, r3
 8000dec:	f043 0305 	orr.w	r3, r3, #5
 8000df0:	b25b      	sxtb	r3, r3
 8000df2:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2205      	movs	r2, #5
 8000df8:	61da      	str	r2, [r3, #28]
 8000dfa:	e00e      	b.n	8000e1a <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	2b06      	cmp	r3, #6
 8000e00:	d10b      	bne.n	8000e1a <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000e02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e06:	f023 0307 	bic.w	r3, r3, #7
 8000e0a:	b25b      	sxtb	r3, r3
 8000e0c:	f043 0306 	orr.w	r3, r3, #6
 8000e10:	b25b      	sxtb	r3, r3
 8000e12:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2206      	movs	r2, #6
 8000e18:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	2101      	movs	r1, #1
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f000 f9c4 	bl	80011ae <LoRa_write>
	//HAL_Delay(10);
}
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b084      	sub	sp, #16
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	60f8      	str	r0, [r7, #12]
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	603b      	str	r3, [r7, #0]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	6818      	ldr	r0, [r3, #0]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	889b      	ldrh	r3, [r3, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f001 fca3 	bl	8002794 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	6998      	ldr	r0, [r3, #24]
 8000e52:	88fa      	ldrh	r2, [r7, #6]
 8000e54:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000e58:	68b9      	ldr	r1, [r7, #8]
 8000e5a:	f003 fc1a 	bl	8004692 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000e5e:	bf00      	nop
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f004 f81a 	bl	8004e9e <HAL_SPI_GetState>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d1f7      	bne.n	8000e60 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	6998      	ldr	r0, [r3, #24]
 8000e74:	8b3a      	ldrh	r2, [r7, #24]
 8000e76:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000e7a:	6839      	ldr	r1, [r7, #0]
 8000e7c:	f003 fd4d 	bl	800491a <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000e80:	bf00      	nop
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f004 f809 	bl	8004e9e <HAL_SPI_GetState>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d1f7      	bne.n	8000e82 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	6818      	ldr	r0, [r3, #0]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	889b      	ldrh	r3, [r3, #4]
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f001 fc79 	bl	8002794 <HAL_GPIO_WritePin>
}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b084      	sub	sp, #16
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	60f8      	str	r0, [r7, #12]
 8000eb2:	60b9      	str	r1, [r7, #8]
 8000eb4:	603b      	str	r3, [r7, #0]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	6818      	ldr	r0, [r3, #0]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	889b      	ldrh	r3, [r3, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f001 fc65 	bl	8002794 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	6998      	ldr	r0, [r3, #24]
 8000ece:	88fa      	ldrh	r2, [r7, #6]
 8000ed0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ed4:	68b9      	ldr	r1, [r7, #8]
 8000ed6:	f003 fbdc 	bl	8004692 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000eda:	bf00      	nop
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f003 ffdc 	bl	8004e9e <HAL_SPI_GetState>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d1f7      	bne.n	8000edc <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	6998      	ldr	r0, [r3, #24]
 8000ef0:	8b3a      	ldrh	r2, [r7, #24]
 8000ef2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ef6:	6839      	ldr	r1, [r7, #0]
 8000ef8:	f003 fbcb 	bl	8004692 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000efc:	bf00      	nop
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f003 ffcb 	bl	8004e9e <HAL_SPI_GetState>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d1f7      	bne.n	8000efe <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	6818      	ldr	r0, [r3, #0]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	889b      	ldrh	r3, [r3, #4]
 8000f16:	2201      	movs	r2, #1
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f001 fc3b 	bl	8002794 <HAL_GPIO_WritePin>
}
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b084      	sub	sp, #16
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	460b      	mov	r3, r1
 8000f30:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000f32:	2126      	movs	r1, #38	@ 0x26
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f000 f920 	bl	800117a <LoRa_read>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	73bb      	strb	r3, [r7, #14]

	if(value)
 8000f3e:	78fb      	ldrb	r3, [r7, #3]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d004      	beq.n	8000f4e <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000f44:	7bbb      	ldrb	r3, [r7, #14]
 8000f46:	f043 0308 	orr.w	r3, r3, #8
 8000f4a:	73fb      	strb	r3, [r7, #15]
 8000f4c:	e003      	b.n	8000f56 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000f4e:	7bbb      	ldrb	r3, [r7, #14]
 8000f50:	f023 0308 	bic.w	r3, r3, #8
 8000f54:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	2126      	movs	r1, #38	@ 0x26
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f000 f926 	bl	80011ae <LoRa_write>
	HAL_Delay(10);
 8000f62:	200a      	movs	r0, #10
 8000f64:	f001 f90e 	bl	8002184 <HAL_Delay>
}
 8000f68:	bf00      	nop
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b096      	sub	sp, #88	@ 0x58
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8000f78:	4a17      	ldr	r2, [pc, #92]	@ (8000fd8 <LoRa_setAutoLDO+0x68>)
 8000f7a:	f107 0308 	add.w	r3, r7, #8
 8000f7e:	4611      	mov	r1, r2
 8000f80:	2250      	movs	r2, #80	@ 0x50
 8000f82:	4618      	mov	r0, r3
 8000f84:	f008 fc68 	bl	8009858 <memcpy>

	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f8e:	461a      	mov	r2, r3
 8000f90:	2301      	movs	r3, #1
 8000f92:	4093      	lsls	r3, r2
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff facd 	bl	8000534 <__aeabi_i2d>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	3358      	adds	r3, #88	@ 0x58
 8000fa4:	443b      	add	r3, r7
 8000fa6:	3b50      	subs	r3, #80	@ 0x50
 8000fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fac:	f7ff fc56 	bl	800085c <__aeabi_ddiv>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f7ff fd38 	bl	8000a2c <__aeabi_d2iz>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b10      	cmp	r3, #16
 8000fc0:	bfcc      	ite	gt
 8000fc2:	2301      	movgt	r3, #1
 8000fc4:	2300      	movle	r3, #0
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	4619      	mov	r1, r3
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffab 	bl	8000f26 <LoRa_setLowDaraRateOptimization>
}
 8000fd0:	bf00      	nop
 8000fd2:	3758      	adds	r7, #88	@ 0x58
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	0800a108 	.word	0x0800a108

08000fdc <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	04db      	lsls	r3, r3, #19
 8000fea:	115b      	asrs	r3, r3, #5
 8000fec:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	0c1b      	lsrs	r3, r3, #16
 8000ff2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8000ff4:	7afb      	ldrb	r3, [r7, #11]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	2106      	movs	r1, #6
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 f8d7 	bl	80011ae <LoRa_write>
	HAL_Delay(5);
 8001000:	2005      	movs	r0, #5
 8001002:	f001 f8bf 	bl	8002184 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	0a1b      	lsrs	r3, r3, #8
 800100a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 800100c:	7afb      	ldrb	r3, [r7, #11]
 800100e:	461a      	mov	r2, r3
 8001010:	2107      	movs	r1, #7
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f000 f8cb 	bl	80011ae <LoRa_write>
	HAL_Delay(5);
 8001018:	2005      	movs	r0, #5
 800101a:	f001 f8b3 	bl	8002184 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8001022:	7afb      	ldrb	r3, [r7, #11]
 8001024:	461a      	mov	r2, r3
 8001026:	2108      	movs	r1, #8
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f000 f8c0 	bl	80011ae <LoRa_write>
	HAL_Delay(5);
 800102e:	2005      	movs	r0, #5
 8001030:	f001 f8a8 	bl	8002184 <HAL_Delay>
}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	2b0c      	cmp	r3, #12
 800104a:	dd01      	ble.n	8001050 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 800104c:	230c      	movs	r3, #12
 800104e:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	2b06      	cmp	r3, #6
 8001054:	dc01      	bgt.n	800105a <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8001056:	2307      	movs	r3, #7
 8001058:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 800105a:	211e      	movs	r1, #30
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f000 f88c 	bl	800117a <LoRa_read>
 8001062:	4603      	mov	r3, r0
 8001064:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8001066:	200a      	movs	r0, #10
 8001068:	f001 f88c 	bl	8002184 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	b2db      	uxtb	r3, r3
 8001070:	011b      	lsls	r3, r3, #4
 8001072:	b2da      	uxtb	r2, r3
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	b2db      	uxtb	r3, r3
 800107c:	4413      	add	r3, r2
 800107e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8001080:	7bbb      	ldrb	r3, [r7, #14]
 8001082:	461a      	mov	r2, r3
 8001084:	211e      	movs	r1, #30
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f000 f891 	bl	80011ae <LoRa_write>
	HAL_Delay(10);
 800108c:	200a      	movs	r0, #10
 800108e:	f001 f879 	bl	8002184 <HAL_Delay>

	LoRa_setAutoLDO(_LoRa);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ff6c 	bl	8000f70 <LoRa_setAutoLDO>
}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80010ac:	78fb      	ldrb	r3, [r7, #3]
 80010ae:	461a      	mov	r2, r3
 80010b0:	2109      	movs	r1, #9
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 f87b 	bl	80011ae <LoRa_write>
	HAL_Delay(10);
 80010b8:	200a      	movs	r0, #10
 80010ba:	f001 f863 	bl	8002184 <HAL_Delay>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80010d8:	78fb      	ldrb	r3, [r7, #3]
 80010da:	2b2c      	cmp	r3, #44	@ 0x2c
 80010dc:	d801      	bhi.n	80010e2 <LoRa_setOCP+0x1a>
		current = 45;
 80010de:	232d      	movs	r3, #45	@ 0x2d
 80010e0:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80010e2:	78fb      	ldrb	r3, [r7, #3]
 80010e4:	2bf0      	cmp	r3, #240	@ 0xf0
 80010e6:	d901      	bls.n	80010ec <LoRa_setOCP+0x24>
		current = 240;
 80010e8:	23f0      	movs	r3, #240	@ 0xf0
 80010ea:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80010ec:	78fb      	ldrb	r3, [r7, #3]
 80010ee:	2b78      	cmp	r3, #120	@ 0x78
 80010f0:	d809      	bhi.n	8001106 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80010f2:	78fb      	ldrb	r3, [r7, #3]
 80010f4:	3b2d      	subs	r3, #45	@ 0x2d
 80010f6:	4a12      	ldr	r2, [pc, #72]	@ (8001140 <LoRa_setOCP+0x78>)
 80010f8:	fb82 1203 	smull	r1, r2, r2, r3
 80010fc:	1052      	asrs	r2, r2, #1
 80010fe:	17db      	asrs	r3, r3, #31
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	73fb      	strb	r3, [r7, #15]
 8001104:	e00b      	b.n	800111e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8001106:	78fb      	ldrb	r3, [r7, #3]
 8001108:	2bf0      	cmp	r3, #240	@ 0xf0
 800110a:	d808      	bhi.n	800111e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 800110c:	78fb      	ldrb	r3, [r7, #3]
 800110e:	331e      	adds	r3, #30
 8001110:	4a0b      	ldr	r2, [pc, #44]	@ (8001140 <LoRa_setOCP+0x78>)
 8001112:	fb82 1203 	smull	r1, r2, r2, r3
 8001116:	1092      	asrs	r2, r2, #2
 8001118:	17db      	asrs	r3, r3, #31
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	3320      	adds	r3, #32
 8001122:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	461a      	mov	r2, r3
 8001128:	210b      	movs	r1, #11
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 f83f 	bl	80011ae <LoRa_write>
	HAL_Delay(10);
 8001130:	200a      	movs	r0, #10
 8001132:	f001 f827 	bl	8002184 <HAL_Delay>
}
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	66666667 	.word	0x66666667

08001144 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 800114c:	211e      	movs	r1, #30
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f000 f813 	bl	800117a <LoRa_read>
 8001154:	4603      	mov	r3, r0
 8001156:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	f043 0307 	orr.w	r3, r3, #7
 800115e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001160:	7bbb      	ldrb	r3, [r7, #14]
 8001162:	461a      	mov	r2, r3
 8001164:	211e      	movs	r1, #30
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 f821 	bl	80011ae <LoRa_write>
	HAL_Delay(10);
 800116c:	200a      	movs	r0, #10
 800116e:	f001 f809 	bl	8002184 <HAL_Delay>
}
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 800117a:	b580      	push	{r7, lr}
 800117c:	b086      	sub	sp, #24
 800117e:	af02      	add	r7, sp, #8
 8001180:	6078      	str	r0, [r7, #4]
 8001182:	460b      	mov	r3, r1
 8001184:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8001186:	78fb      	ldrb	r3, [r7, #3]
 8001188:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800118c:	b2db      	uxtb	r3, r3
 800118e:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8001190:	f107 030f 	add.w	r3, r7, #15
 8001194:	f107 010e 	add.w	r1, r7, #14
 8001198:	2201      	movs	r2, #1
 800119a:	9200      	str	r2, [sp, #0]
 800119c:	2201      	movs	r2, #1
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff fe45 	bl	8000e2e <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b086      	sub	sp, #24
 80011b2:	af02      	add	r7, sp, #8
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	460b      	mov	r3, r1
 80011b8:	70fb      	strb	r3, [r7, #3]
 80011ba:	4613      	mov	r3, r2
 80011bc:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80011be:	78fb      	ldrb	r3, [r7, #3]
 80011c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	73bb      	strb	r3, [r7, #14]
	data = value;
 80011c8:	78bb      	ldrb	r3, [r7, #2]
 80011ca:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80011cc:	f107 030f 	add.w	r3, r7, #15
 80011d0:	f107 010e 	add.w	r1, r7, #14
 80011d4:	2201      	movs	r2, #1
 80011d6:	9200      	str	r2, [sp, #0]
 80011d8:	2201      	movs	r2, #1
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff fe65 	bl	8000eaa <LoRa_writeReg>
	//HAL_Delay(5);
}
 80011e0:	bf00      	nop
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	461a      	mov	r2, r3
 80011f4:	460b      	mov	r3, r1
 80011f6:	72fb      	strb	r3, [r7, #11]
 80011f8:	4613      	mov	r3, r2
 80011fa:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 80011fc:	7afb      	ldrb	r3, [r7, #11]
 80011fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001202:	b2db      	uxtb	r3, r3
 8001204:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6818      	ldr	r0, [r3, #0]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	889b      	ldrh	r3, [r3, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	4619      	mov	r1, r3
 8001212:	f001 fabf 	bl	8002794 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6998      	ldr	r0, [r3, #24]
 800121a:	f107 0117 	add.w	r1, r7, #23
 800121e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001222:	2201      	movs	r2, #1
 8001224:	f003 fa35 	bl	8004692 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001228:	bf00      	nop
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	4618      	mov	r0, r3
 8001230:	f003 fe35 	bl	8004e9e <HAL_SPI_GetState>
 8001234:	4603      	mov	r3, r0
 8001236:	2b01      	cmp	r3, #1
 8001238:	d1f7      	bne.n	800122a <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6998      	ldr	r0, [r3, #24]
 800123e:	7abb      	ldrb	r3, [r7, #10]
 8001240:	b29a      	uxth	r2, r3
 8001242:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	f003 fa23 	bl	8004692 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800124c:	bf00      	nop
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	4618      	mov	r0, r3
 8001254:	f003 fe23 	bl	8004e9e <HAL_SPI_GetState>
 8001258:	4603      	mov	r3, r0
 800125a:	2b01      	cmp	r3, #1
 800125c:	d1f7      	bne.n	800124e <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6818      	ldr	r0, [r3, #0]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	889b      	ldrh	r3, [r3, #4]
 8001266:	2201      	movs	r2, #1
 8001268:	4619      	mov	r1, r3
 800126a:	f001 fa93 	bl	8002794 <HAL_GPIO_WritePin>
}
 800126e:	bf00      	nop
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]

	return 1;
 800127e:	2301      	movs	r3, #1
}
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	4611      	mov	r1, r2
 8001298:	461a      	mov	r2, r3
 800129a:	460b      	mov	r3, r1
 800129c:	71fb      	strb	r3, [r7, #7]
 800129e:	4613      	mov	r3, r2
 80012a0:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80012a8:	2101      	movs	r1, #1
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f7ff fd5e 	bl	8000d6c <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 80012b0:	210e      	movs	r1, #14
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f7ff ff61 	bl	800117a <LoRa_read>
 80012b8:	4603      	mov	r3, r0
 80012ba:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80012bc:	7cfb      	ldrb	r3, [r7, #19]
 80012be:	461a      	mov	r2, r3
 80012c0:	210d      	movs	r1, #13
 80012c2:	68f8      	ldr	r0, [r7, #12]
 80012c4:	f7ff ff73 	bl	80011ae <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	461a      	mov	r2, r3
 80012cc:	2122      	movs	r1, #34	@ 0x22
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f7ff ff6d 	bl	80011ae <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	2100      	movs	r1, #0
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f7ff ff84 	bl	80011e8 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 80012e0:	2103      	movs	r1, #3
 80012e2:	68f8      	ldr	r0, [r7, #12]
 80012e4:	f7ff fd42 	bl	8000d6c <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 80012e8:	2112      	movs	r1, #18
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f7ff ff45 	bl	800117a <LoRa_read>
 80012f0:	4603      	mov	r3, r0
 80012f2:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 80012f4:	7cfb      	ldrb	r3, [r7, #19]
 80012f6:	f003 0308 	and.w	r3, r3, #8
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00a      	beq.n	8001314 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80012fe:	22ff      	movs	r2, #255	@ 0xff
 8001300:	2112      	movs	r1, #18
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f7ff ff53 	bl	80011ae <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001308:	6979      	ldr	r1, [r7, #20]
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	f7ff fd2e 	bl	8000d6c <LoRa_gotoMode>
			return 1;
 8001310:	2301      	movs	r3, #1
 8001312:	e00f      	b.n	8001334 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8001314:	88bb      	ldrh	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	80bb      	strh	r3, [r7, #4]
 800131a:	88bb      	ldrh	r3, [r7, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d105      	bne.n	800132c <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8001320:	6979      	ldr	r1, [r7, #20]
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f7ff fd22 	bl	8000d6c <LoRa_gotoMode>
				return 0;
 8001328:	2300      	movs	r3, #0
 800132a:	e003      	b.n	8001334 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 800132c:	2001      	movs	r0, #1
 800132e:	f000 ff29 	bl	8002184 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001332:	e7d9      	b.n	80012e8 <LoRa_transmit+0x5c>
	}
}
 8001334:	4618      	mov	r0, r3
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001344:	2105      	movs	r1, #5
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff fd10 	bl	8000d6c <LoRa_gotoMode>
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8001354:	b590      	push	{r4, r7, lr}
 8001356:	b089      	sub	sp, #36	@ 0x24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	4613      	mov	r3, r2
 8001360:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]
 800136a:	e007      	b.n	800137c <LoRa_receive+0x28>
		data[i]=0;
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	4413      	add	r3, r2
 8001372:	2200      	movs	r2, #0
 8001374:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	3301      	adds	r3, #1
 800137a:	61bb      	str	r3, [r7, #24]
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	429a      	cmp	r2, r3
 8001382:	dbf3      	blt.n	800136c <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001384:	2101      	movs	r1, #1
 8001386:	68f8      	ldr	r0, [r7, #12]
 8001388:	f7ff fcf0 	bl	8000d6c <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 800138c:	2112      	movs	r1, #18
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f7ff fef3 	bl	800117a <LoRa_read>
 8001394:	4603      	mov	r3, r0
 8001396:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8001398:	7cfb      	ldrb	r3, [r7, #19]
 800139a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d02f      	beq.n	8001402 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80013a2:	22ff      	movs	r2, #255	@ 0xff
 80013a4:	2112      	movs	r1, #18
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	f7ff ff01 	bl	80011ae <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 80013ac:	2113      	movs	r1, #19
 80013ae:	68f8      	ldr	r0, [r7, #12]
 80013b0:	f7ff fee3 	bl	800117a <LoRa_read>
 80013b4:	4603      	mov	r3, r0
 80013b6:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 80013b8:	2110      	movs	r1, #16
 80013ba:	68f8      	ldr	r0, [r7, #12]
 80013bc:	f7ff fedd 	bl	800117a <LoRa_read>
 80013c0:	4603      	mov	r3, r0
 80013c2:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80013c4:	7cfb      	ldrb	r3, [r7, #19]
 80013c6:	461a      	mov	r2, r3
 80013c8:	210d      	movs	r1, #13
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f7ff feef 	bl	80011ae <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 80013d0:	7cba      	ldrb	r2, [r7, #18]
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	4293      	cmp	r3, r2
 80013d6:	bf28      	it	cs
 80013d8:	4613      	movcs	r3, r2
 80013da:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	e00b      	b.n	80013fa <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	68ba      	ldr	r2, [r7, #8]
 80013e6:	18d4      	adds	r4, r2, r3
 80013e8:	2100      	movs	r1, #0
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f7ff fec5 	bl	800117a <LoRa_read>
 80013f0:	4603      	mov	r3, r0
 80013f2:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	3301      	adds	r3, #1
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	7ffb      	ldrb	r3, [r7, #31]
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	429a      	cmp	r2, r3
 8001400:	dbef      	blt.n	80013e2 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001402:	2105      	movs	r1, #5
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f7ff fcb1 	bl	8000d6c <LoRa_gotoMode>
    return min;
 800140a:	7ffb      	ldrb	r3, [r7, #31]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3724      	adds	r7, #36	@ 0x24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd90      	pop	{r4, r7, pc}

08001414 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff ff2a 	bl	8001276 <LoRa_isvalid>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	f000 8096 	beq.w	8001556 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 800142a:	2100      	movs	r1, #0
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff fc9d 	bl	8000d6c <LoRa_gotoMode>
			HAL_Delay(10);
 8001432:	200a      	movs	r0, #10
 8001434:	f000 fea6 	bl	8002184 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8001438:	2101      	movs	r1, #1
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff fe9d 	bl	800117a <LoRa_read>
 8001440:	4603      	mov	r3, r0
 8001442:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8001444:	200a      	movs	r0, #10
 8001446:	f000 fe9d 	bl	8002184 <HAL_Delay>
			data = read | 0x80;
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001450:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8001452:	7bbb      	ldrb	r3, [r7, #14]
 8001454:	461a      	mov	r2, r3
 8001456:	2101      	movs	r1, #1
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff fea8 	bl	80011ae <LoRa_write>
			HAL_Delay(100);
 800145e:	2064      	movs	r0, #100	@ 0x64
 8001460:	f000 fe90 	bl	8002184 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	4619      	mov	r1, r3
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff fdb6 	bl	8000fdc <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001476:	4619      	mov	r1, r3
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff fe11 	bl	80010a0 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001484:	4619      	mov	r1, r3
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff fe1e 	bl	80010c8 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 800148c:	2223      	movs	r2, #35	@ 0x23
 800148e:	210c      	movs	r1, #12
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff fe8c 	bl	80011ae <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff fe54 	bl	8001144 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80014a2:	4619      	mov	r1, r3
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff fdc9 	bl	800103c <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 80014aa:	22ff      	movs	r2, #255	@ 0xff
 80014ac:	211f      	movs	r1, #31
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff fe7d 	bl	80011ae <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014be:	011b      	lsls	r3, r3, #4
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	4413      	add	r3, r2
 80014ce:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 80014d0:	7bbb      	ldrb	r3, [r7, #14]
 80014d2:	461a      	mov	r2, r3
 80014d4:	211d      	movs	r1, #29
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff fe69 	bl	80011ae <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff fd47 	bl	8000f70 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014e6:	0a1b      	lsrs	r3, r3, #8
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	461a      	mov	r2, r3
 80014ee:	2120      	movs	r1, #32
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff fe5c 	bl	80011ae <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	461a      	mov	r2, r3
 80014fe:	2121      	movs	r1, #33	@ 0x21
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff fe54 	bl	80011ae <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8001506:	2140      	movs	r1, #64	@ 0x40
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff fe36 	bl	800117a <LoRa_read>
 800150e:	4603      	mov	r3, r0
 8001510:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8001518:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 800151a:	7bbb      	ldrb	r3, [r7, #14]
 800151c:	461a      	mov	r2, r3
 800151e:	2140      	movs	r1, #64	@ 0x40
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff fe44 	bl	80011ae <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001526:	2101      	movs	r1, #1
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff fc1f 	bl	8000d6c <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8001534:	200a      	movs	r0, #10
 8001536:	f000 fe25 	bl	8002184 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 800153a:	2142      	movs	r1, #66	@ 0x42
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff fe1c 	bl	800117a <LoRa_read>
 8001542:	4603      	mov	r3, r0
 8001544:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	2b12      	cmp	r3, #18
 800154a:	d101      	bne.n	8001550 <LoRa_init+0x13c>
				return LORA_OK;
 800154c:	23c8      	movs	r3, #200	@ 0xc8
 800154e:	e004      	b.n	800155a <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8001550:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8001554:	e001      	b.n	800155a <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8001556:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <send_ack>:

#include "ack_handler.h"
#include "lora_config.h"
#include "main.h"

void send_ack(bool isAck) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
    char response[5];
    if (isAck) {
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d004      	beq.n	800157e <send_ack+0x1a>
        strcpy(response, "ACK");
 8001574:	f107 0308 	add.w	r3, r7, #8
 8001578:	4a0e      	ldr	r2, [pc, #56]	@ (80015b4 <send_ack+0x50>)
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	e007      	b.n	800158e <send_ack+0x2a>
    } else {
        strcpy(response, "NACK");
 800157e:	4a0e      	ldr	r2, [pc, #56]	@ (80015b8 <send_ack+0x54>)
 8001580:	f107 0308 	add.w	r3, r7, #8
 8001584:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001588:	6018      	str	r0, [r3, #0]
 800158a:	3304      	adds	r3, #4
 800158c:	7019      	strb	r1, [r3, #0]
    }
    LoRa_transmit(&myLoRa, (uint8_t*)response, strlen(response), 1000);
 800158e:	f107 0308 	add.w	r3, r7, #8
 8001592:	4618      	mov	r0, r3
 8001594:	f7fe fe24 	bl	80001e0 <strlen>
 8001598:	4603      	mov	r3, r0
 800159a:	b2da      	uxtb	r2, r3
 800159c:	f107 0108 	add.w	r1, r7, #8
 80015a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015a4:	4805      	ldr	r0, [pc, #20]	@ (80015bc <send_ack+0x58>)
 80015a6:	f7ff fe71 	bl	800128c <LoRa_transmit>
}
 80015aa:	bf00      	nop
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	004b4341 	.word	0x004b4341
 80015b8:	0800a158 	.word	0x0800a158
 80015bc:	2000020c 	.word	0x2000020c

080015c0 <Calculate_CRC>:
*/




uint32_t Calculate_CRC(const uint8_t *data, uint8_t length) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b0c6      	sub	sp, #280	@ 0x118
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80015ca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80015ce:	6018      	str	r0, [r3, #0]
 80015d0:	460a      	mov	r2, r1
 80015d2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80015d6:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 80015da:	701a      	strb	r2, [r3, #0]
    uint32_t crc = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    uint32_t buffer32[(256 + 3) / 4]; // Pre-allocate buffer for max data size
    uint32_t wordCount = (length + 3) / 4;
 80015e2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80015e6:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	3303      	adds	r3, #3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	da00      	bge.n	80015f4 <Calculate_CRC+0x34>
 80015f2:	3303      	adds	r3, #3
 80015f4:	109b      	asrs	r3, r3, #2
 80015f6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    uint8_t i, j;

    // Pack bytes into 32-bit words (little-endian)
    for (i = 0; i < wordCount; i++) {
 80015fa:	2300      	movs	r3, #0
 80015fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8001600:	e044      	b.n	800168c <Calculate_CRC+0xcc>
        uint32_t word = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
        for (j = 0; j < 4 && (i * 4 + j) < length; j++) {
 8001608:	2300      	movs	r3, #0
 800160a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800160e:	e01d      	b.n	800164c <Calculate_CRC+0x8c>
            word |= (uint32_t)data[i * 4 + j] << (j * 8);
 8001610:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001614:	009a      	lsls	r2, r3, #2
 8001616:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800161a:	4413      	add	r3, r2
 800161c:	461a      	mov	r2, r3
 800161e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001622:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4413      	add	r3, r2
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800163c:	4313      	orrs	r3, r2
 800163e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
        for (j = 0; j < 4 && (i * 4 + j) < length; j++) {
 8001642:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8001646:	3301      	adds	r3, #1
 8001648:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800164c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8001650:	2b03      	cmp	r3, #3
 8001652:	d80c      	bhi.n	800166e <Calculate_CRC+0xae>
 8001654:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001658:	009a      	lsls	r2, r3, #2
 800165a:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800165e:	441a      	add	r2, r3
 8001660:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001664:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	429a      	cmp	r2, r3
 800166c:	dbd0      	blt.n	8001610 <Calculate_CRC+0x50>
        }
        buffer32[i] = word;
 800166e:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 8001672:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001676:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800167a:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 800167e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < wordCount; i++) {
 8001682:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001686:	3301      	adds	r3, #1
 8001688:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 800168c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001690:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001694:	429a      	cmp	r2, r3
 8001696:	d8b4      	bhi.n	8001602 <Calculate_CRC+0x42>
    }

    // Compute CRC using HAL function
    crc = HAL_CRC_Calculate(&hcrc, buffer32, wordCount);
 8001698:	f107 0308 	add.w	r3, r7, #8
 800169c:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 80016a0:	4619      	mov	r1, r3
 80016a2:	4806      	ldr	r0, [pc, #24]	@ (80016bc <Calculate_CRC+0xfc>)
 80016a4:	f000 febf 	bl	8002426 <HAL_CRC_Calculate>
 80016a8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c

    // Apply final XOR
    return crc ^ 0xFFFFFFFF;
 80016ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80016b0:	43db      	mvns	r3, r3
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000168 	.word	0x20000168

080016c0 <LoRa_Init>:
#include "usbd_cdc_if.h"

extern SPI_HandleTypeDef hspi1; // Declare as extern


void LoRa_Init(void) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
    myLoRa.CS_port = GPIOB;
 80016c4:	4b29      	ldr	r3, [pc, #164]	@ (800176c <LoRa_Init+0xac>)
 80016c6:	4a2a      	ldr	r2, [pc, #168]	@ (8001770 <LoRa_Init+0xb0>)
 80016c8:	601a      	str	r2, [r3, #0]
    myLoRa.CS_pin = GPIO_PIN_0;
 80016ca:	4b28      	ldr	r3, [pc, #160]	@ (800176c <LoRa_Init+0xac>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	809a      	strh	r2, [r3, #4]
    myLoRa.reset_port = GPIOB;
 80016d0:	4b26      	ldr	r3, [pc, #152]	@ (800176c <LoRa_Init+0xac>)
 80016d2:	4a27      	ldr	r2, [pc, #156]	@ (8001770 <LoRa_Init+0xb0>)
 80016d4:	609a      	str	r2, [r3, #8]
    myLoRa.reset_pin = GPIO_PIN_1;
 80016d6:	4b25      	ldr	r3, [pc, #148]	@ (800176c <LoRa_Init+0xac>)
 80016d8:	2202      	movs	r2, #2
 80016da:	819a      	strh	r2, [r3, #12]
    myLoRa.DIO0_port = GPIOB;
 80016dc:	4b23      	ldr	r3, [pc, #140]	@ (800176c <LoRa_Init+0xac>)
 80016de:	4a24      	ldr	r2, [pc, #144]	@ (8001770 <LoRa_Init+0xb0>)
 80016e0:	611a      	str	r2, [r3, #16]
    myLoRa.DIO0_pin = GPIO_PIN_2;
 80016e2:	4b22      	ldr	r3, [pc, #136]	@ (800176c <LoRa_Init+0xac>)
 80016e4:	2204      	movs	r2, #4
 80016e6:	829a      	strh	r2, [r3, #20]
    myLoRa.hSPIx = &hspi1; // Use the external hspi1
 80016e8:	4b20      	ldr	r3, [pc, #128]	@ (800176c <LoRa_Init+0xac>)
 80016ea:	4a22      	ldr	r2, [pc, #136]	@ (8001774 <LoRa_Init+0xb4>)
 80016ec:	619a      	str	r2, [r3, #24]

    myLoRa.frequency = 433;
 80016ee:	4b1f      	ldr	r3, [pc, #124]	@ (800176c <LoRa_Init+0xac>)
 80016f0:	f240 12b1 	movw	r2, #433	@ 0x1b1
 80016f4:	621a      	str	r2, [r3, #32]
    myLoRa.spredingFactor = SF_7;
 80016f6:	4b1d      	ldr	r3, [pc, #116]	@ (800176c <LoRa_Init+0xac>)
 80016f8:	2207      	movs	r2, #7
 80016fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    myLoRa.bandWidth = BW_125KHz;
 80016fe:	4b1b      	ldr	r3, [pc, #108]	@ (800176c <LoRa_Init+0xac>)
 8001700:	2207      	movs	r2, #7
 8001702:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    myLoRa.crcRate = CR_4_5;
 8001706:	4b19      	ldr	r3, [pc, #100]	@ (800176c <LoRa_Init+0xac>)
 8001708:	2201      	movs	r2, #1
 800170a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    myLoRa.power = POWER_20db;
 800170e:	4b17      	ldr	r3, [pc, #92]	@ (800176c <LoRa_Init+0xac>)
 8001710:	22ff      	movs	r2, #255	@ 0xff
 8001712:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    myLoRa.overCurrentProtection = 130;
 8001716:	4b15      	ldr	r3, [pc, #84]	@ (800176c <LoRa_Init+0xac>)
 8001718:	2282      	movs	r2, #130	@ 0x82
 800171a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    myLoRa.preamble = 8;
 800171e:	4b13      	ldr	r3, [pc, #76]	@ (800176c <LoRa_Init+0xac>)
 8001720:	2208      	movs	r2, #8
 8001722:	851a      	strh	r2, [r3, #40]	@ 0x28

    // Initialize LoRa
     if (LoRa_init(&myLoRa) != LORA_OK) {
 8001724:	4811      	ldr	r0, [pc, #68]	@ (800176c <LoRa_Init+0xac>)
 8001726:	f7ff fe75 	bl	8001414 <LoRa_init>
 800172a:	4603      	mov	r3, r0
 800172c:	2bc8      	cmp	r3, #200	@ 0xc8
 800172e:	d00e      	beq.n	800174e <LoRa_Init+0x8e>
       sprintf(buffer, "LoRa Init Failed\r\n");
 8001730:	4911      	ldr	r1, [pc, #68]	@ (8001778 <LoRa_Init+0xb8>)
 8001732:	4812      	ldr	r0, [pc, #72]	@ (800177c <LoRa_Init+0xbc>)
 8001734:	f008 f83c 	bl	80097b0 <siprintf>
       CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 8001738:	4810      	ldr	r0, [pc, #64]	@ (800177c <LoRa_Init+0xbc>)
 800173a:	f7fe fd51 	bl	80001e0 <strlen>
 800173e:	4603      	mov	r3, r0
 8001740:	b29b      	uxth	r3, r3
 8001742:	4619      	mov	r1, r3
 8001744:	480d      	ldr	r0, [pc, #52]	@ (800177c <LoRa_Init+0xbc>)
 8001746:	f007 fbad 	bl	8008ea4 <CDC_Transmit_FS>
       while (1);
 800174a:	bf00      	nop
 800174c:	e7fd      	b.n	800174a <LoRa_Init+0x8a>
     }
     // Send initialization message
     sprintf(buffer, "LoRa Receiver Initialized\r\n");
 800174e:	490c      	ldr	r1, [pc, #48]	@ (8001780 <LoRa_Init+0xc0>)
 8001750:	480a      	ldr	r0, [pc, #40]	@ (800177c <LoRa_Init+0xbc>)
 8001752:	f008 f82d 	bl	80097b0 <siprintf>
     CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 8001756:	4809      	ldr	r0, [pc, #36]	@ (800177c <LoRa_Init+0xbc>)
 8001758:	f7fe fd42 	bl	80001e0 <strlen>
 800175c:	4603      	mov	r3, r0
 800175e:	b29b      	uxth	r3, r3
 8001760:	4619      	mov	r1, r3
 8001762:	4806      	ldr	r0, [pc, #24]	@ (800177c <LoRa_Init+0xbc>)
 8001764:	f007 fb9e 	bl	8008ea4 <CDC_Transmit_FS>

}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	2000020c 	.word	0x2000020c
 8001770:	40020400 	.word	0x40020400
 8001774:	20000170 	.word	0x20000170
 8001778:	0800a160 	.word	0x0800a160
 800177c:	200002bc 	.word	0x200002bc
 8001780:	0800a174 	.word	0x0800a174

08001784 <extract_crc_from_buffer>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t extract_crc_from_buffer(uint8_t *loraRxBuffer, uint8_t rxSize) {
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	460b      	mov	r3, r1
 800178e:	70fb      	strb	r3, [r7, #3]
    uint32_t crcValue = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]

    // If there are enough bytes in the buffer to extract the CRC (4 bytes for 32-bit CRC)
    if (rxSize >= 4) {
 8001794:	78fb      	ldrb	r3, [r7, #3]
 8001796:	2b03      	cmp	r3, #3
 8001798:	d920      	bls.n	80017dc <extract_crc_from_buffer+0x58>
        // Extract the last 4 bytes and form a 32-bit CRC value (big-endian)
    	uint32_t temp = loraRxBuffer[rxSize - 4];
 800179a:	78fb      	ldrb	r3, [r7, #3]
 800179c:	3b04      	subs	r3, #4
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	60bb      	str	r3, [r7, #8]
        crcValue = ((uint32_t) loraRxBuffer[rxSize - 4] << 24) |
 80017a6:	78fb      	ldrb	r3, [r7, #3]
 80017a8:	3b04      	subs	r3, #4
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	061a      	lsls	r2, r3, #24
                   ((uint32_t) loraRxBuffer[rxSize - 3] << 16) |
 80017b2:	78fb      	ldrb	r3, [r7, #3]
 80017b4:	3b03      	subs	r3, #3
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	440b      	add	r3, r1
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	041b      	lsls	r3, r3, #16
        crcValue = ((uint32_t) loraRxBuffer[rxSize - 4] << 24) |
 80017be:	431a      	orrs	r2, r3
                   ((uint32_t) loraRxBuffer[rxSize - 2] << 8) |
 80017c0:	78fb      	ldrb	r3, [r7, #3]
 80017c2:	3b02      	subs	r3, #2
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	440b      	add	r3, r1
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	021b      	lsls	r3, r3, #8
                   ((uint32_t) loraRxBuffer[rxSize - 3] << 16) |
 80017cc:	4313      	orrs	r3, r2
                   loraRxBuffer[rxSize - 1];
 80017ce:	78fa      	ldrb	r2, [r7, #3]
 80017d0:	3a01      	subs	r2, #1
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	440a      	add	r2, r1
 80017d6:	7812      	ldrb	r2, [r2, #0]
        crcValue = ((uint32_t) loraRxBuffer[rxSize - 4] << 24) |
 80017d8:	4313      	orrs	r3, r2
 80017da:	60fb      	str	r3, [r7, #12]
    }
    return crcValue;
 80017dc:	68fb      	ldr	r3, [r7, #12]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80017ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017f0:	f2ad 4d2c 	subw	sp, sp, #1068	@ 0x42c
 80017f4:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80017f6:	f000 fc53 	bl	80020a0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80017fa:	f000 f931 	bl	8001a60 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80017fe:	f000 fa11 	bl	8001c24 <MX_GPIO_Init>
	MX_CRC_Init();
 8001802:	f000 f999 	bl	8001b38 <MX_CRC_Init>
	MX_SPI1_Init();
 8001806:	f000 f9ab 	bl	8001b60 <MX_SPI1_Init>
	MX_USART2_Init();
 800180a:	f000 f9df 	bl	8001bcc <MX_USART2_Init>
	MX_USB_DEVICE_Init();
 800180e:	f007 fa8b 	bl	8008d28 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */

	// Initialize LoRa using the function from lora_config.c
	LoRa_Init();
 8001812:	f7ff ff55 	bl	80016c0 <LoRa_Init>

	// Start LoRa receiving
	LoRa_startReceiving(&myLoRa);
 8001816:	488b      	ldr	r0, [pc, #556]	@ (8001a44 <main+0x258>)
 8001818:	f7ff fd90 	bl	800133c <LoRa_startReceiving>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (receivedFlag) {
 800181c:	4b8a      	ldr	r3, [pc, #552]	@ (8001a48 <main+0x25c>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 810a 	beq.w	8001a3a <main+0x24e>
			receivedFlag = 0;
 8001826:	4b88      	ldr	r3, [pc, #544]	@ (8001a48 <main+0x25c>)
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
			uint8_t rxSize = LoRa_receive(&myLoRa, loraRxBuffer,
 800182c:	2280      	movs	r2, #128	@ 0x80
 800182e:	4987      	ldr	r1, [pc, #540]	@ (8001a4c <main+0x260>)
 8001830:	4884      	ldr	r0, [pc, #528]	@ (8001a44 <main+0x258>)
 8001832:	f7ff fd8f 	bl	8001354 <LoRa_receive>
 8001836:	4603      	mov	r3, r0
 8001838:	f887 341b 	strb.w	r3, [r7, #1051]	@ 0x41b
					sizeof(loraRxBuffer));

			if (rxSize > 0) {
 800183c:	f897 341b 	ldrb.w	r3, [r7, #1051]	@ 0x41b
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 80f1 	beq.w	8001a28 <main+0x23c>
				uint8_t dataLength = rxSize - 10;
 8001846:	f897 341b 	ldrb.w	r3, [r7, #1051]	@ 0x41b
 800184a:	3b0a      	subs	r3, #10
 800184c:	f887 341a 	strb.w	r3, [r7, #1050]	@ 0x41a
				if (dataLength <= 0) {
 8001850:	f897 341a 	ldrb.w	r3, [r7, #1050]	@ 0x41a
 8001854:	2b00      	cmp	r3, #0
 8001856:	d103      	bne.n	8001860 <main+0x74>
					send_ack(false);
 8001858:	2000      	movs	r0, #0
 800185a:	f7ff fe83 	bl	8001564 <send_ack>
 800185e:	e0e6      	b.n	8001a2e <main+0x242>
				} else {
 8001860:	466b      	mov	r3, sp
 8001862:	461e      	mov	r6, r3
					// Extract the main message
					uint8_t mainMessage[dataLength];
 8001864:	f897 141a 	ldrb.w	r1, [r7, #1050]	@ 0x41a
 8001868:	460b      	mov	r3, r1
 800186a:	3b01      	subs	r3, #1
 800186c:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
 8001870:	b2cb      	uxtb	r3, r1
 8001872:	2200      	movs	r2, #0
 8001874:	461c      	mov	r4, r3
 8001876:	4615      	mov	r5, r2
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	f04f 0300 	mov.w	r3, #0
 8001880:	00eb      	lsls	r3, r5, #3
 8001882:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001886:	00e2      	lsls	r2, r4, #3
 8001888:	b2cb      	uxtb	r3, r1
 800188a:	2200      	movs	r2, #0
 800188c:	4698      	mov	r8, r3
 800188e:	4691      	mov	r9, r2
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	f04f 0300 	mov.w	r3, #0
 8001898:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800189c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018a4:	460b      	mov	r3, r1
 80018a6:	3307      	adds	r3, #7
 80018a8:	08db      	lsrs	r3, r3, #3
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	ebad 0d03 	sub.w	sp, sp, r3
 80018b0:	ab02      	add	r3, sp, #8
 80018b2:	3300      	adds	r3, #0
 80018b4:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
					memcpy(mainMessage, loraRxBuffer, dataLength);
 80018b8:	f897 341a 	ldrb.w	r3, [r7, #1050]	@ 0x41a
 80018bc:	461a      	mov	r2, r3
 80018be:	4963      	ldr	r1, [pc, #396]	@ (8001a4c <main+0x260>)
 80018c0:	f8d7 0410 	ldr.w	r0, [r7, #1040]	@ 0x410
 80018c4:	f007 ffc8 	bl	8009858 <memcpy>

					// Extract CRC (32-bit value from buffer)
					uint32_t receivedCrc = extract_crc_from_buffer(loraRxBuffer, dataLength);
 80018c8:	f897 341a 	ldrb.w	r3, [r7, #1050]	@ 0x41a
 80018cc:	4619      	mov	r1, r3
 80018ce:	485f      	ldr	r0, [pc, #380]	@ (8001a4c <main+0x260>)
 80018d0:	f7ff ff58 	bl	8001784 <extract_crc_from_buffer>
 80018d4:	f8c7 040c 	str.w	r0, [r7, #1036]	@ 0x40c
					// Calculate expected CRC using only the main message
					uint32_t expectedCrc = Calculate_CRC(mainMessage,
 80018d8:	f897 341a 	ldrb.w	r3, [r7, #1050]	@ 0x41a
 80018dc:	4619      	mov	r1, r3
 80018de:	f8d7 0410 	ldr.w	r0, [r7, #1040]	@ 0x410
 80018e2:	f7ff fe6d 	bl	80015c0 <Calculate_CRC>
 80018e6:	f8c7 0408 	str.w	r0, [r7, #1032]	@ 0x408
							dataLength);

					// Format and transmit received CRC
					char formattedMessage_rx_crc[256];
					snprintf(formattedMessage_rx_crc,
 80018ea:	1d38      	adds	r0, r7, #4
 80018ec:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 80018f0:	4a57      	ldr	r2, [pc, #348]	@ (8001a50 <main+0x264>)
 80018f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018f6:	f007 ff27 	bl	8009748 <sniprintf>
							sizeof(formattedMessage_rx_crc),
							"Received CRC: 0x%08X\r\n",
							(unsigned int) receivedCrc);
					CDC_Transmit_FS((uint8_t*) formattedMessage_rx_crc,
							strlen(formattedMessage_rx_crc));
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fc6f 	bl	80001e0 <strlen>
 8001902:	4603      	mov	r3, r0
					CDC_Transmit_FS((uint8_t*) formattedMessage_rx_crc,
 8001904:	b29a      	uxth	r2, r3
 8001906:	1d3b      	adds	r3, r7, #4
 8001908:	4611      	mov	r1, r2
 800190a:	4618      	mov	r0, r3
 800190c:	f007 faca 	bl	8008ea4 <CDC_Transmit_FS>
					HAL_Delay(200);
 8001910:	20c8      	movs	r0, #200	@ 0xc8
 8001912:	f000 fc37 	bl	8002184 <HAL_Delay>

					// Format and transmit expected CRC
					char formattedMessage_tx_crc[256];
					snprintf(formattedMessage_tx_crc,
 8001916:	f507 7082 	add.w	r0, r7, #260	@ 0x104
 800191a:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 800191e:	4a4d      	ldr	r2, [pc, #308]	@ (8001a54 <main+0x268>)
 8001920:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001924:	f007 ff10 	bl	8009748 <sniprintf>
							sizeof(formattedMessage_tx_crc),
							"Expected CRC: 0x%08X\r\n",
							(unsigned int) expectedCrc);
					CDC_Transmit_FS((uint8_t*) formattedMessage_tx_crc,
							strlen(formattedMessage_tx_crc));
 8001928:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fc57 	bl	80001e0 <strlen>
 8001932:	4603      	mov	r3, r0
					CDC_Transmit_FS((uint8_t*) formattedMessage_tx_crc,
 8001934:	b29a      	uxth	r2, r3
 8001936:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800193a:	4611      	mov	r1, r2
 800193c:	4618      	mov	r0, r3
 800193e:	f007 fab1 	bl	8008ea4 <CDC_Transmit_FS>

					// Compare CRCs
					if (receivedCrc == expectedCrc) {
 8001942:	f8d7 240c 	ldr.w	r2, [r7, #1036]	@ 0x40c
 8001946:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 800194a:	429a      	cmp	r2, r3
 800194c:	d10a      	bne.n	8001964 <main+0x178>
						HAL_Delay(200);
 800194e:	20c8      	movs	r0, #200	@ 0xc8
 8001950:	f000 fc18 	bl	8002184 <HAL_Delay>
						CDC_Transmit_FS((uint8_t*) "Test Point",
 8001954:	210a      	movs	r1, #10
 8001956:	4840      	ldr	r0, [pc, #256]	@ (8001a58 <main+0x26c>)
 8001958:	f007 faa4 	bl	8008ea4 <CDC_Transmit_FS>
								strlen("Test Point"));
						send_ack(true);
 800195c:	2001      	movs	r0, #1
 800195e:	f7ff fe01 	bl	8001564 <send_ack>
 8001962:	e002      	b.n	800196a <main+0x17e>
					} else {
						send_ack(false);
 8001964:	2000      	movs	r0, #0
 8001966:	f7ff fdfd 	bl	8001564 <send_ack>
					}

					// Print the main message
					char tempBuffer[256];
					for (int i = 0; i < dataLength; i++) {
 800196a:	2300      	movs	r3, #0
 800196c:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 8001970:	e02d      	b.n	80019ce <main+0x1e2>
						if (mainMessage[i] >= 32 && mainMessage[i] <= 126) {
 8001972:	f8d7 2410 	ldr.w	r2, [r7, #1040]	@ 0x410
 8001976:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 800197a:	4413      	add	r3, r2
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b1f      	cmp	r3, #31
 8001980:	d917      	bls.n	80019b2 <main+0x1c6>
 8001982:	f8d7 2410 	ldr.w	r2, [r7, #1040]	@ 0x410
 8001986:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 800198a:	4413      	add	r3, r2
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b7e      	cmp	r3, #126	@ 0x7e
 8001990:	d80f      	bhi.n	80019b2 <main+0x1c6>
							tempBuffer[i] = mainMessage[i];
 8001992:	f8d7 2410 	ldr.w	r2, [r7, #1040]	@ 0x410
 8001996:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 800199a:	4413      	add	r3, r2
 800199c:	7819      	ldrb	r1, [r3, #0]
 800199e:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80019a2:	f5a3 7207 	sub.w	r2, r3, #540	@ 0x21c
 80019a6:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 80019aa:	4413      	add	r3, r2
 80019ac:	460a      	mov	r2, r1
 80019ae:	701a      	strb	r2, [r3, #0]
 80019b0:	e008      	b.n	80019c4 <main+0x1d8>
						} else {
							tempBuffer[i] = '.';
 80019b2:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80019b6:	f5a3 7207 	sub.w	r2, r3, #540	@ 0x21c
 80019ba:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 80019be:	4413      	add	r3, r2
 80019c0:	222e      	movs	r2, #46	@ 0x2e
 80019c2:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < dataLength; i++) {
 80019c4:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 80019c8:	3301      	adds	r3, #1
 80019ca:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 80019ce:	f897 341a 	ldrb.w	r3, [r7, #1050]	@ 0x41a
 80019d2:	f8d7 241c 	ldr.w	r2, [r7, #1052]	@ 0x41c
 80019d6:	429a      	cmp	r2, r3
 80019d8:	dbcb      	blt.n	8001972 <main+0x186>
						}
					}
					tempBuffer[dataLength] = '\0';
 80019da:	f897 341a 	ldrb.w	r3, [r7, #1050]	@ 0x41a
 80019de:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 80019e2:	f5a2 7207 	sub.w	r2, r2, #540	@ 0x21c
 80019e6:	2100      	movs	r1, #0
 80019e8:	54d1      	strb	r1, [r2, r3]

					char formattedMessage[256];
					size_t maxLen = sizeof(formattedMessage) - 21; // 256 - 21 = 235
 80019ea:	23eb      	movs	r3, #235	@ 0xeb
 80019ec:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
					snprintf(formattedMessage, sizeof(formattedMessage),
 80019f0:	f8d7 2404 	ldr.w	r2, [r7, #1028]	@ 0x404
 80019f4:	f507 7041 	add.w	r0, r7, #772	@ 0x304
 80019f8:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	4613      	mov	r3, r2
 8001a00:	4a16      	ldr	r2, [pc, #88]	@ (8001a5c <main+0x270>)
 8001a02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a06:	f007 fe9f 	bl	8009748 <sniprintf>
							"Received message: %.*s\r\n", (int) maxLen,
							tempBuffer);
					CDC_Transmit_FS((uint8_t*) formattedMessage,
							strlen(formattedMessage));
 8001a0a:	f507 7341 	add.w	r3, r7, #772	@ 0x304
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fbe6 	bl	80001e0 <strlen>
 8001a14:	4603      	mov	r3, r0
					CDC_Transmit_FS((uint8_t*) formattedMessage,
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	f507 7341 	add.w	r3, r7, #772	@ 0x304
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f007 fa40 	bl	8008ea4 <CDC_Transmit_FS>
 8001a24:	46b5      	mov	sp, r6
 8001a26:	e002      	b.n	8001a2e <main+0x242>
				}
			} else {
				send_ack(false);
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f7ff fd9b 	bl	8001564 <send_ack>
			}

			// Add a small delay before starting to receive again
			HAL_Delay(100);
 8001a2e:	2064      	movs	r0, #100	@ 0x64
 8001a30:	f000 fba8 	bl	8002184 <HAL_Delay>

			LoRa_startReceiving(&myLoRa);
 8001a34:	4803      	ldr	r0, [pc, #12]	@ (8001a44 <main+0x258>)
 8001a36:	f7ff fc81 	bl	800133c <LoRa_startReceiving>
		}

		HAL_Delay(10);
 8001a3a:	200a      	movs	r0, #10
 8001a3c:	f000 fba2 	bl	8002184 <HAL_Delay>
		if (receivedFlag) {
 8001a40:	e6ec      	b.n	800181c <main+0x30>
 8001a42:	bf00      	nop
 8001a44:	2000020c 	.word	0x2000020c
 8001a48:	200002b8 	.word	0x200002b8
 8001a4c:	20000238 	.word	0x20000238
 8001a50:	0800a190 	.word	0x0800a190
 8001a54:	0800a1a8 	.word	0x0800a1a8
 8001a58:	0800a1c0 	.word	0x0800a1c0
 8001a5c:	0800a1cc 	.word	0x0800a1cc

08001a60 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b094      	sub	sp, #80	@ 0x50
 8001a64:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001a66:	f107 0320 	add.w	r3, r7, #32
 8001a6a:	2230      	movs	r2, #48	@ 0x30
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f007 febe 	bl	80097f0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001a74:	f107 030c 	add.w	r3, r7, #12
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001a84:	2300      	movs	r3, #0
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	4b29      	ldr	r3, [pc, #164]	@ (8001b30 <SystemClock_Config+0xd0>)
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8c:	4a28      	ldr	r2, [pc, #160]	@ (8001b30 <SystemClock_Config+0xd0>)
 8001a8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a92:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a94:	4b26      	ldr	r3, [pc, #152]	@ (8001b30 <SystemClock_Config+0xd0>)
 8001a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	4b23      	ldr	r3, [pc, #140]	@ (8001b34 <SystemClock_Config+0xd4>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001aac:	4a21      	ldr	r2, [pc, #132]	@ (8001b34 <SystemClock_Config+0xd4>)
 8001aae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b34 <SystemClock_Config+0xd4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ac4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ac8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aca:	2302      	movs	r3, #2
 8001acc:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ace:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8001ad4:	2319      	movs	r3, #25
 8001ad6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001ad8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001adc:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001ade:	2304      	movs	r3, #4
 8001ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001ae2:	2307      	movs	r3, #7
 8001ae4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001ae6:	f107 0320 	add.w	r3, r7, #32
 8001aea:	4618      	mov	r0, r3
 8001aec:	f002 f8f0 	bl	8003cd0 <HAL_RCC_OscConfig>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <SystemClock_Config+0x9a>
		Error_Handler();
 8001af6:	f000 f937 	bl	8001d68 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001afa:	230f      	movs	r3, #15
 8001afc:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001afe:	2302      	movs	r3, #2
 8001b00:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b02:	2300      	movs	r3, #0
 8001b04:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b0a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001b10:	f107 030c 	add.w	r3, r7, #12
 8001b14:	2102      	movs	r1, #2
 8001b16:	4618      	mov	r0, r3
 8001b18:	f002 fb52 	bl	80041c0 <HAL_RCC_ClockConfig>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <SystemClock_Config+0xc6>
		Error_Handler();
 8001b22:	f000 f921 	bl	8001d68 <Error_Handler>
	}
}
 8001b26:	bf00      	nop
 8001b28:	3750      	adds	r7, #80	@ 0x50
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40007000 	.word	0x40007000

08001b38 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8001b3c:	4b06      	ldr	r3, [pc, #24]	@ (8001b58 <MX_CRC_Init+0x20>)
 8001b3e:	4a07      	ldr	r2, [pc, #28]	@ (8001b5c <MX_CRC_Init+0x24>)
 8001b40:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8001b42:	4805      	ldr	r0, [pc, #20]	@ (8001b58 <MX_CRC_Init+0x20>)
 8001b44:	f000 fc53 	bl	80023ee <HAL_CRC_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_CRC_Init+0x1a>
		Error_Handler();
 8001b4e:	f000 f90b 	bl	8001d68 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000168 	.word	0x20000168
 8001b5c:	40023000 	.word	0x40023000

08001b60 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
	/* USER CODE END SPI1_Init 0 */

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	hspi1.Instance = SPI1;
 8001b64:	4b17      	ldr	r3, [pc, #92]	@ (8001bc4 <MX_SPI1_Init+0x64>)
 8001b66:	4a18      	ldr	r2, [pc, #96]	@ (8001bc8 <MX_SPI1_Init+0x68>)
 8001b68:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b6a:	4b16      	ldr	r3, [pc, #88]	@ (8001bc4 <MX_SPI1_Init+0x64>)
 8001b6c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b70:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b72:	4b14      	ldr	r3, [pc, #80]	@ (8001bc4 <MX_SPI1_Init+0x64>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b78:	4b12      	ldr	r3, [pc, #72]	@ (8001bc4 <MX_SPI1_Init+0x64>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b7e:	4b11      	ldr	r3, [pc, #68]	@ (8001bc4 <MX_SPI1_Init+0x64>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b84:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc4 <MX_SPI1_Init+0x64>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc4 <MX_SPI1_Init+0x64>)
 8001b8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b90:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b92:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc4 <MX_SPI1_Init+0x64>)
 8001b94:	2218      	movs	r2, #24
 8001b96:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b98:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc4 <MX_SPI1_Init+0x64>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b9e:	4b09      	ldr	r3, [pc, #36]	@ (8001bc4 <MX_SPI1_Init+0x64>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ba4:	4b07      	ldr	r3, [pc, #28]	@ (8001bc4 <MX_SPI1_Init+0x64>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001baa:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <MX_SPI1_Init+0x64>)
 8001bac:	220a      	movs	r2, #10
 8001bae:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001bb0:	4804      	ldr	r0, [pc, #16]	@ (8001bc4 <MX_SPI1_Init+0x64>)
 8001bb2:	f002 fce5 	bl	8004580 <HAL_SPI_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_SPI1_Init+0x60>
		Error_Handler();
 8001bbc:	f000 f8d4 	bl	8001d68 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */
}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000170 	.word	0x20000170
 8001bc8:	40013000 	.word	0x40013000

08001bcc <MX_USART2_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_Init(void) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	husart2.Instance = USART2;
 8001bd0:	4b12      	ldr	r3, [pc, #72]	@ (8001c1c <MX_USART2_Init+0x50>)
 8001bd2:	4a13      	ldr	r2, [pc, #76]	@ (8001c20 <MX_USART2_Init+0x54>)
 8001bd4:	601a      	str	r2, [r3, #0]
	husart2.Init.BaudRate = 115200;
 8001bd6:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <MX_USART2_Init+0x50>)
 8001bd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bdc:	605a      	str	r2, [r3, #4]
	husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8001bde:	4b0f      	ldr	r3, [pc, #60]	@ (8001c1c <MX_USART2_Init+0x50>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]
	husart2.Init.StopBits = USART_STOPBITS_1;
 8001be4:	4b0d      	ldr	r3, [pc, #52]	@ (8001c1c <MX_USART2_Init+0x50>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	60da      	str	r2, [r3, #12]
	husart2.Init.Parity = USART_PARITY_NONE;
 8001bea:	4b0c      	ldr	r3, [pc, #48]	@ (8001c1c <MX_USART2_Init+0x50>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	611a      	str	r2, [r3, #16]
	husart2.Init.Mode = USART_MODE_TX_RX;
 8001bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8001c1c <MX_USART2_Init+0x50>)
 8001bf2:	220c      	movs	r2, #12
 8001bf4:	615a      	str	r2, [r3, #20]
	husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8001bf6:	4b09      	ldr	r3, [pc, #36]	@ (8001c1c <MX_USART2_Init+0x50>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	619a      	str	r2, [r3, #24]
	husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8001bfc:	4b07      	ldr	r3, [pc, #28]	@ (8001c1c <MX_USART2_Init+0x50>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	61da      	str	r2, [r3, #28]
	husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001c02:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <MX_USART2_Init+0x50>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	621a      	str	r2, [r3, #32]
	if (HAL_USART_Init(&husart2) != HAL_OK) {
 8001c08:	4804      	ldr	r0, [pc, #16]	@ (8001c1c <MX_USART2_Init+0x50>)
 8001c0a:	f003 fa99 	bl	8005140 <HAL_USART_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_USART2_Init+0x4c>
		Error_Handler();
 8001c14:	f000 f8a8 	bl	8001d68 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */
}
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	200001c8 	.word	0x200001c8
 8001c20:	40004400 	.word	0x40004400

08001c24 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	@ 0x28
 8001c28:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001c2a:	f107 0314 	add.w	r3, r7, #20
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	60da      	str	r2, [r3, #12]
 8001c38:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d2c <MX_GPIO_Init+0x108>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c42:	4a3a      	ldr	r2, [pc, #232]	@ (8001d2c <MX_GPIO_Init+0x108>)
 8001c44:	f043 0304 	orr.w	r3, r3, #4
 8001c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4a:	4b38      	ldr	r3, [pc, #224]	@ (8001d2c <MX_GPIO_Init+0x108>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4e:	f003 0304 	and.w	r3, r3, #4
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b34      	ldr	r3, [pc, #208]	@ (8001d2c <MX_GPIO_Init+0x108>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	4a33      	ldr	r2, [pc, #204]	@ (8001d2c <MX_GPIO_Init+0x108>)
 8001c60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c66:	4b31      	ldr	r3, [pc, #196]	@ (8001d2c <MX_GPIO_Init+0x108>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	4b2d      	ldr	r3, [pc, #180]	@ (8001d2c <MX_GPIO_Init+0x108>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	4a2c      	ldr	r2, [pc, #176]	@ (8001d2c <MX_GPIO_Init+0x108>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c82:	4b2a      	ldr	r3, [pc, #168]	@ (8001d2c <MX_GPIO_Init+0x108>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	607b      	str	r3, [r7, #4]
 8001c92:	4b26      	ldr	r3, [pc, #152]	@ (8001d2c <MX_GPIO_Init+0x108>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c96:	4a25      	ldr	r2, [pc, #148]	@ (8001d2c <MX_GPIO_Init+0x108>)
 8001c98:	f043 0302 	orr.w	r3, r3, #2
 8001c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c9e:	4b23      	ldr	r3, [pc, #140]	@ (8001d2c <MX_GPIO_Init+0x108>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001caa:	2201      	movs	r2, #1
 8001cac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cb0:	481f      	ldr	r0, [pc, #124]	@ (8001d30 <MX_GPIO_Init+0x10c>)
 8001cb2:	f000 fd6f 	bl	8002794 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, NSS_Pin | RESET_Pin, GPIO_PIN_SET);
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	2103      	movs	r1, #3
 8001cba:	481e      	ldr	r0, [pc, #120]	@ (8001d34 <MX_GPIO_Init+0x110>)
 8001cbc:	f000 fd6a 	bl	8002794 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8001cc0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cc4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4815      	ldr	r0, [pc, #84]	@ (8001d30 <MX_GPIO_Init+0x10c>)
 8001cda:	f000 fbd7 	bl	800248c <HAL_GPIO_Init>

	/*Configure GPIO pins : NSS_Pin RESET_Pin */
	GPIO_InitStruct.Pin = NSS_Pin | RESET_Pin;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cea:	2300      	movs	r3, #0
 8001cec:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	480f      	ldr	r0, [pc, #60]	@ (8001d34 <MX_GPIO_Init+0x110>)
 8001cf6:	f000 fbc9 	bl	800248c <HAL_GPIO_Init>

	/*Configure GPIO pin : DIO0_Pin */
	GPIO_InitStruct.Pin = DIO0_Pin;
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cfe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d02:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4809      	ldr	r0, [pc, #36]	@ (8001d34 <MX_GPIO_Init+0x110>)
 8001d10:	f000 fbbc 	bl	800248c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001d14:	2200      	movs	r2, #0
 8001d16:	2100      	movs	r1, #0
 8001d18:	2008      	movs	r0, #8
 8001d1a:	f000 fb32 	bl	8002382 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001d1e:	2008      	movs	r0, #8
 8001d20:	f000 fb4b 	bl	80023ba <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001d24:	bf00      	nop
 8001d26:	3728      	adds	r7, #40	@ 0x28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40020800 	.word	0x40020800
 8001d34:	40020400 	.word	0x40020400

08001d38 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == myLoRa.DIO0_pin) {
 8001d42:	4b07      	ldr	r3, [pc, #28]	@ (8001d60 <HAL_GPIO_EXTI_Callback+0x28>)
 8001d44:	8a9b      	ldrh	r3, [r3, #20]
 8001d46:	88fa      	ldrh	r2, [r7, #6]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d102      	bne.n	8001d52 <HAL_GPIO_EXTI_Callback+0x1a>
		// This indicates a packet has been received
		// We'll handle it in the main loop
		receivedFlag = 1;
 8001d4c:	4b05      	ldr	r3, [pc, #20]	@ (8001d64 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	701a      	strb	r2, [r3, #0]
	}
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	2000020c 	.word	0x2000020c
 8001d64:	200002b8 	.word	0x200002b8

08001d68 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d6c:	b672      	cpsid	i
}
 8001d6e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001d70:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d74:	4803      	ldr	r0, [pc, #12]	@ (8001d84 <Error_Handler+0x1c>)
 8001d76:	f000 fd26 	bl	80027c6 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8001d7a:	20c8      	movs	r0, #200	@ 0xc8
 8001d7c:	f000 fa02 	bl	8002184 <HAL_Delay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001d80:	bf00      	nop
 8001d82:	e7f5      	b.n	8001d70 <Error_Handler+0x8>
 8001d84:	40020800 	.word	0x40020800

08001d88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	607b      	str	r3, [r7, #4]
 8001d92:	4b10      	ldr	r3, [pc, #64]	@ (8001dd4 <HAL_MspInit+0x4c>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d96:	4a0f      	ldr	r2, [pc, #60]	@ (8001dd4 <HAL_MspInit+0x4c>)
 8001d98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd4 <HAL_MspInit+0x4c>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001da6:	607b      	str	r3, [r7, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	603b      	str	r3, [r7, #0]
 8001dae:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <HAL_MspInit+0x4c>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db2:	4a08      	ldr	r2, [pc, #32]	@ (8001dd4 <HAL_MspInit+0x4c>)
 8001db4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001db8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dba:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <HAL_MspInit+0x4c>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc2:	603b      	str	r3, [r7, #0]
 8001dc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	40023800 	.word	0x40023800

08001dd8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0b      	ldr	r2, [pc, #44]	@ (8001e14 <HAL_CRC_MspInit+0x3c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d10d      	bne.n	8001e06 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	4b0a      	ldr	r3, [pc, #40]	@ (8001e18 <HAL_CRC_MspInit+0x40>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df2:	4a09      	ldr	r2, [pc, #36]	@ (8001e18 <HAL_CRC_MspInit+0x40>)
 8001df4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dfa:	4b07      	ldr	r3, [pc, #28]	@ (8001e18 <HAL_CRC_MspInit+0x40>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001e06:	bf00      	nop
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	40023000 	.word	0x40023000
 8001e18:	40023800 	.word	0x40023800

08001e1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08a      	sub	sp, #40	@ 0x28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a19      	ldr	r2, [pc, #100]	@ (8001ea0 <HAL_SPI_MspInit+0x84>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d12b      	bne.n	8001e96 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	4b18      	ldr	r3, [pc, #96]	@ (8001ea4 <HAL_SPI_MspInit+0x88>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e46:	4a17      	ldr	r2, [pc, #92]	@ (8001ea4 <HAL_SPI_MspInit+0x88>)
 8001e48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ea4 <HAL_SPI_MspInit+0x88>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	4b11      	ldr	r3, [pc, #68]	@ (8001ea4 <HAL_SPI_MspInit+0x88>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e62:	4a10      	ldr	r2, [pc, #64]	@ (8001ea4 <HAL_SPI_MspInit+0x88>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea4 <HAL_SPI_MspInit+0x88>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e76:	23e0      	movs	r3, #224	@ 0xe0
 8001e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e82:	2303      	movs	r3, #3
 8001e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e86:	2305      	movs	r3, #5
 8001e88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8a:	f107 0314 	add.w	r3, r7, #20
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4805      	ldr	r0, [pc, #20]	@ (8001ea8 <HAL_SPI_MspInit+0x8c>)
 8001e92:	f000 fafb 	bl	800248c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001e96:	bf00      	nop
 8001e98:	3728      	adds	r7, #40	@ 0x28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40013000 	.word	0x40013000
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40020000 	.word	0x40020000

08001eac <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08a      	sub	sp, #40	@ 0x28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a19      	ldr	r2, [pc, #100]	@ (8001f30 <HAL_USART_MspInit+0x84>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d12b      	bne.n	8001f26 <HAL_USART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	4b18      	ldr	r3, [pc, #96]	@ (8001f34 <HAL_USART_MspInit+0x88>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed6:	4a17      	ldr	r2, [pc, #92]	@ (8001f34 <HAL_USART_MspInit+0x88>)
 8001ed8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001edc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ede:	4b15      	ldr	r3, [pc, #84]	@ (8001f34 <HAL_USART_MspInit+0x88>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	4b11      	ldr	r3, [pc, #68]	@ (8001f34 <HAL_USART_MspInit+0x88>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	4a10      	ldr	r2, [pc, #64]	@ (8001f34 <HAL_USART_MspInit+0x88>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001efa:	4b0e      	ldr	r3, [pc, #56]	@ (8001f34 <HAL_USART_MspInit+0x88>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001f06:	231c      	movs	r3, #28
 8001f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f12:	2303      	movs	r3, #3
 8001f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f16:	2307      	movs	r3, #7
 8001f18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1a:	f107 0314 	add.w	r3, r7, #20
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4805      	ldr	r0, [pc, #20]	@ (8001f38 <HAL_USART_MspInit+0x8c>)
 8001f22:	f000 fab3 	bl	800248c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001f26:	bf00      	nop
 8001f28:	3728      	adds	r7, #40	@ 0x28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40004400 	.word	0x40004400
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40020000 	.word	0x40020000

08001f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f40:	bf00      	nop
 8001f42:	e7fd      	b.n	8001f40 <NMI_Handler+0x4>

08001f44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f48:	bf00      	nop
 8001f4a:	e7fd      	b.n	8001f48 <HardFault_Handler+0x4>

08001f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f50:	bf00      	nop
 8001f52:	e7fd      	b.n	8001f50 <MemManage_Handler+0x4>

08001f54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f58:	bf00      	nop
 8001f5a:	e7fd      	b.n	8001f58 <BusFault_Handler+0x4>

08001f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f60:	bf00      	nop
 8001f62:	e7fd      	b.n	8001f60 <UsageFault_Handler+0x4>

08001f64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f92:	f000 f8d7 	bl	8002144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8001f9e:	2004      	movs	r0, #4
 8001fa0:	f000 fc2c 	bl	80027fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001fac:	4802      	ldr	r0, [pc, #8]	@ (8001fb8 <OTG_FS_IRQHandler+0x10>)
 8001fae:	f000 fd81 	bl	8002ab4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	200010a4 	.word	0x200010a4

08001fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fc4:	4a14      	ldr	r2, [pc, #80]	@ (8002018 <_sbrk+0x5c>)
 8001fc6:	4b15      	ldr	r3, [pc, #84]	@ (800201c <_sbrk+0x60>)
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fd0:	4b13      	ldr	r3, [pc, #76]	@ (8002020 <_sbrk+0x64>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d102      	bne.n	8001fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fd8:	4b11      	ldr	r3, [pc, #68]	@ (8002020 <_sbrk+0x64>)
 8001fda:	4a12      	ldr	r2, [pc, #72]	@ (8002024 <_sbrk+0x68>)
 8001fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fde:	4b10      	ldr	r3, [pc, #64]	@ (8002020 <_sbrk+0x64>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d207      	bcs.n	8001ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fec:	f007 fc08 	bl	8009800 <__errno>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	220c      	movs	r2, #12
 8001ff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffa:	e009      	b.n	8002010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ffc:	4b08      	ldr	r3, [pc, #32]	@ (8002020 <_sbrk+0x64>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002002:	4b07      	ldr	r3, [pc, #28]	@ (8002020 <_sbrk+0x64>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	4a05      	ldr	r2, [pc, #20]	@ (8002020 <_sbrk+0x64>)
 800200c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800200e:	68fb      	ldr	r3, [r7, #12]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20010000 	.word	0x20010000
 800201c:	00000400 	.word	0x00000400
 8002020:	200003bc 	.word	0x200003bc
 8002024:	200018f0 	.word	0x200018f0

08002028 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800202c:	4b06      	ldr	r3, [pc, #24]	@ (8002048 <SystemInit+0x20>)
 800202e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002032:	4a05      	ldr	r2, [pc, #20]	@ (8002048 <SystemInit+0x20>)
 8002034:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002038:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800204c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002084 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002050:	f7ff ffea 	bl	8002028 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002054:	480c      	ldr	r0, [pc, #48]	@ (8002088 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002056:	490d      	ldr	r1, [pc, #52]	@ (800208c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002058:	4a0d      	ldr	r2, [pc, #52]	@ (8002090 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800205a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800205c:	e002      	b.n	8002064 <LoopCopyDataInit>

0800205e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800205e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002062:	3304      	adds	r3, #4

08002064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002068:	d3f9      	bcc.n	800205e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800206a:	4a0a      	ldr	r2, [pc, #40]	@ (8002094 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800206c:	4c0a      	ldr	r4, [pc, #40]	@ (8002098 <LoopFillZerobss+0x22>)
  movs r3, #0
 800206e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002070:	e001      	b.n	8002076 <LoopFillZerobss>

08002072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002074:	3204      	adds	r2, #4

08002076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002078:	d3fb      	bcc.n	8002072 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800207a:	f007 fbc7 	bl	800980c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800207e:	f7ff fbb5 	bl	80017ec <main>
  bx  lr    
 8002082:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002084:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002088:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800208c:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8002090:	0800a28c 	.word	0x0800a28c
  ldr r2, =_sbss
 8002094:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8002098:	200018f0 	.word	0x200018f0

0800209c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800209c:	e7fe      	b.n	800209c <ADC_IRQHandler>
	...

080020a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020a4:	4b0e      	ldr	r3, [pc, #56]	@ (80020e0 <HAL_Init+0x40>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a0d      	ldr	r2, [pc, #52]	@ (80020e0 <HAL_Init+0x40>)
 80020aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020b0:	4b0b      	ldr	r3, [pc, #44]	@ (80020e0 <HAL_Init+0x40>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a0a      	ldr	r2, [pc, #40]	@ (80020e0 <HAL_Init+0x40>)
 80020b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020bc:	4b08      	ldr	r3, [pc, #32]	@ (80020e0 <HAL_Init+0x40>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a07      	ldr	r2, [pc, #28]	@ (80020e0 <HAL_Init+0x40>)
 80020c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020c8:	2003      	movs	r0, #3
 80020ca:	f000 f94f 	bl	800236c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ce:	200f      	movs	r0, #15
 80020d0:	f000 f808 	bl	80020e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020d4:	f7ff fe58 	bl	8001d88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40023c00 	.word	0x40023c00

080020e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020ec:	4b12      	ldr	r3, [pc, #72]	@ (8002138 <HAL_InitTick+0x54>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b12      	ldr	r3, [pc, #72]	@ (800213c <HAL_InitTick+0x58>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	4619      	mov	r1, r3
 80020f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80020fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002102:	4618      	mov	r0, r3
 8002104:	f000 f967 	bl	80023d6 <HAL_SYSTICK_Config>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e00e      	b.n	8002130 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b0f      	cmp	r3, #15
 8002116:	d80a      	bhi.n	800212e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002118:	2200      	movs	r2, #0
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	f04f 30ff 	mov.w	r0, #4294967295
 8002120:	f000 f92f 	bl	8002382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002124:	4a06      	ldr	r2, [pc, #24]	@ (8002140 <HAL_InitTick+0x5c>)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
 800212c:	e000      	b.n	8002130 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20000000 	.word	0x20000000
 800213c:	20000008 	.word	0x20000008
 8002140:	20000004 	.word	0x20000004

08002144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002148:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <HAL_IncTick+0x20>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	461a      	mov	r2, r3
 800214e:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <HAL_IncTick+0x24>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4413      	add	r3, r2
 8002154:	4a04      	ldr	r2, [pc, #16]	@ (8002168 <HAL_IncTick+0x24>)
 8002156:	6013      	str	r3, [r2, #0]
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20000008 	.word	0x20000008
 8002168:	200003c0 	.word	0x200003c0

0800216c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return uwTick;
 8002170:	4b03      	ldr	r3, [pc, #12]	@ (8002180 <HAL_GetTick+0x14>)
 8002172:	681b      	ldr	r3, [r3, #0]
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	200003c0 	.word	0x200003c0

08002184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800218c:	f7ff ffee 	bl	800216c <HAL_GetTick>
 8002190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219c:	d005      	beq.n	80021aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800219e:	4b0a      	ldr	r3, [pc, #40]	@ (80021c8 <HAL_Delay+0x44>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	461a      	mov	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4413      	add	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021aa:	bf00      	nop
 80021ac:	f7ff ffde 	bl	800216c <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d8f7      	bhi.n	80021ac <HAL_Delay+0x28>
  {
  }
}
 80021bc:	bf00      	nop
 80021be:	bf00      	nop
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000008 	.word	0x20000008

080021cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002210 <__NVIC_SetPriorityGrouping+0x44>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021e8:	4013      	ands	r3, r2
 80021ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021fe:	4a04      	ldr	r2, [pc, #16]	@ (8002210 <__NVIC_SetPriorityGrouping+0x44>)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	60d3      	str	r3, [r2, #12]
}
 8002204:	bf00      	nop
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002218:	4b04      	ldr	r3, [pc, #16]	@ (800222c <__NVIC_GetPriorityGrouping+0x18>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	0a1b      	lsrs	r3, r3, #8
 800221e:	f003 0307 	and.w	r3, r3, #7
}
 8002222:	4618      	mov	r0, r3
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	2b00      	cmp	r3, #0
 8002240:	db0b      	blt.n	800225a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	f003 021f 	and.w	r2, r3, #31
 8002248:	4907      	ldr	r1, [pc, #28]	@ (8002268 <__NVIC_EnableIRQ+0x38>)
 800224a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224e:	095b      	lsrs	r3, r3, #5
 8002250:	2001      	movs	r0, #1
 8002252:	fa00 f202 	lsl.w	r2, r0, r2
 8002256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	e000e100 	.word	0xe000e100

0800226c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	6039      	str	r1, [r7, #0]
 8002276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227c:	2b00      	cmp	r3, #0
 800227e:	db0a      	blt.n	8002296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	b2da      	uxtb	r2, r3
 8002284:	490c      	ldr	r1, [pc, #48]	@ (80022b8 <__NVIC_SetPriority+0x4c>)
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	0112      	lsls	r2, r2, #4
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	440b      	add	r3, r1
 8002290:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002294:	e00a      	b.n	80022ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	b2da      	uxtb	r2, r3
 800229a:	4908      	ldr	r1, [pc, #32]	@ (80022bc <__NVIC_SetPriority+0x50>)
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	3b04      	subs	r3, #4
 80022a4:	0112      	lsls	r2, r2, #4
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	440b      	add	r3, r1
 80022aa:	761a      	strb	r2, [r3, #24]
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000e100 	.word	0xe000e100
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b089      	sub	sp, #36	@ 0x24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f1c3 0307 	rsb	r3, r3, #7
 80022da:	2b04      	cmp	r3, #4
 80022dc:	bf28      	it	cs
 80022de:	2304      	movcs	r3, #4
 80022e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3304      	adds	r3, #4
 80022e6:	2b06      	cmp	r3, #6
 80022e8:	d902      	bls.n	80022f0 <NVIC_EncodePriority+0x30>
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3b03      	subs	r3, #3
 80022ee:	e000      	b.n	80022f2 <NVIC_EncodePriority+0x32>
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f4:	f04f 32ff 	mov.w	r2, #4294967295
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43da      	mvns	r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	401a      	ands	r2, r3
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002308:	f04f 31ff 	mov.w	r1, #4294967295
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	fa01 f303 	lsl.w	r3, r1, r3
 8002312:	43d9      	mvns	r1, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	4313      	orrs	r3, r2
         );
}
 800231a:	4618      	mov	r0, r3
 800231c:	3724      	adds	r7, #36	@ 0x24
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3b01      	subs	r3, #1
 8002334:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002338:	d301      	bcc.n	800233e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800233a:	2301      	movs	r3, #1
 800233c:	e00f      	b.n	800235e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800233e:	4a0a      	ldr	r2, [pc, #40]	@ (8002368 <SysTick_Config+0x40>)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3b01      	subs	r3, #1
 8002344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002346:	210f      	movs	r1, #15
 8002348:	f04f 30ff 	mov.w	r0, #4294967295
 800234c:	f7ff ff8e 	bl	800226c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002350:	4b05      	ldr	r3, [pc, #20]	@ (8002368 <SysTick_Config+0x40>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002356:	4b04      	ldr	r3, [pc, #16]	@ (8002368 <SysTick_Config+0x40>)
 8002358:	2207      	movs	r2, #7
 800235a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	e000e010 	.word	0xe000e010

0800236c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff ff29 	bl	80021cc <__NVIC_SetPriorityGrouping>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002382:	b580      	push	{r7, lr}
 8002384:	b086      	sub	sp, #24
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002394:	f7ff ff3e 	bl	8002214 <__NVIC_GetPriorityGrouping>
 8002398:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	68b9      	ldr	r1, [r7, #8]
 800239e:	6978      	ldr	r0, [r7, #20]
 80023a0:	f7ff ff8e 	bl	80022c0 <NVIC_EncodePriority>
 80023a4:	4602      	mov	r2, r0
 80023a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023aa:	4611      	mov	r1, r2
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff ff5d 	bl	800226c <__NVIC_SetPriority>
}
 80023b2:	bf00      	nop
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	4603      	mov	r3, r0
 80023c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff ff31 	bl	8002230 <__NVIC_EnableIRQ>
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff ffa2 	bl	8002328 <SysTick_Config>
 80023e4:	4603      	mov	r3, r0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e00e      	b.n	800241e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	795b      	ldrb	r3, [r3, #5]
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d105      	bne.n	8002416 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff fce1 	bl	8001dd8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002426:	b480      	push	{r7}
 8002428:	b087      	sub	sp, #28
 800242a:	af00      	add	r7, sp, #0
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002432:	2300      	movs	r3, #0
 8002434:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2202      	movs	r2, #2
 800243a:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0201 	orr.w	r2, r2, #1
 800244a:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	e00a      	b.n	8002468 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	441a      	add	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	3301      	adds	r3, #1
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	429a      	cmp	r2, r3
 800246e:	d3f0      	bcc.n	8002452 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2201      	movs	r2, #1
 800247c:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800247e:	693b      	ldr	r3, [r7, #16]
}
 8002480:	4618      	mov	r0, r3
 8002482:	371c      	adds	r7, #28
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800248c:	b480      	push	{r7}
 800248e:	b089      	sub	sp, #36	@ 0x24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800249a:	2300      	movs	r3, #0
 800249c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800249e:	2300      	movs	r3, #0
 80024a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
 80024a6:	e159      	b.n	800275c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024a8:	2201      	movs	r2, #1
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	4013      	ands	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	f040 8148 	bne.w	8002756 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d005      	beq.n	80024de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d130      	bne.n	8002540 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	2203      	movs	r2, #3
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002514:	2201      	movs	r2, #1
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	091b      	lsrs	r3, r3, #4
 800252a:	f003 0201 	and.w	r2, r3, #1
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	2b03      	cmp	r3, #3
 800254a:	d017      	beq.n	800257c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	2203      	movs	r2, #3
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d123      	bne.n	80025d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	08da      	lsrs	r2, r3, #3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3208      	adds	r2, #8
 8002590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002594:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	220f      	movs	r2, #15
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	08da      	lsrs	r2, r3, #3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3208      	adds	r2, #8
 80025ca:	69b9      	ldr	r1, [r7, #24]
 80025cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	2203      	movs	r2, #3
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 0203 	and.w	r2, r3, #3
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 80a2 	beq.w	8002756 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	4b57      	ldr	r3, [pc, #348]	@ (8002774 <HAL_GPIO_Init+0x2e8>)
 8002618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261a:	4a56      	ldr	r2, [pc, #344]	@ (8002774 <HAL_GPIO_Init+0x2e8>)
 800261c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002620:	6453      	str	r3, [r2, #68]	@ 0x44
 8002622:	4b54      	ldr	r3, [pc, #336]	@ (8002774 <HAL_GPIO_Init+0x2e8>)
 8002624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002626:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800262e:	4a52      	ldr	r2, [pc, #328]	@ (8002778 <HAL_GPIO_Init+0x2ec>)
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	089b      	lsrs	r3, r3, #2
 8002634:	3302      	adds	r3, #2
 8002636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	220f      	movs	r2, #15
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4013      	ands	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a49      	ldr	r2, [pc, #292]	@ (800277c <HAL_GPIO_Init+0x2f0>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d019      	beq.n	800268e <HAL_GPIO_Init+0x202>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a48      	ldr	r2, [pc, #288]	@ (8002780 <HAL_GPIO_Init+0x2f4>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d013      	beq.n	800268a <HAL_GPIO_Init+0x1fe>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a47      	ldr	r2, [pc, #284]	@ (8002784 <HAL_GPIO_Init+0x2f8>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d00d      	beq.n	8002686 <HAL_GPIO_Init+0x1fa>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a46      	ldr	r2, [pc, #280]	@ (8002788 <HAL_GPIO_Init+0x2fc>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d007      	beq.n	8002682 <HAL_GPIO_Init+0x1f6>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a45      	ldr	r2, [pc, #276]	@ (800278c <HAL_GPIO_Init+0x300>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d101      	bne.n	800267e <HAL_GPIO_Init+0x1f2>
 800267a:	2304      	movs	r3, #4
 800267c:	e008      	b.n	8002690 <HAL_GPIO_Init+0x204>
 800267e:	2307      	movs	r3, #7
 8002680:	e006      	b.n	8002690 <HAL_GPIO_Init+0x204>
 8002682:	2303      	movs	r3, #3
 8002684:	e004      	b.n	8002690 <HAL_GPIO_Init+0x204>
 8002686:	2302      	movs	r3, #2
 8002688:	e002      	b.n	8002690 <HAL_GPIO_Init+0x204>
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <HAL_GPIO_Init+0x204>
 800268e:	2300      	movs	r3, #0
 8002690:	69fa      	ldr	r2, [r7, #28]
 8002692:	f002 0203 	and.w	r2, r2, #3
 8002696:	0092      	lsls	r2, r2, #2
 8002698:	4093      	lsls	r3, r2
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4313      	orrs	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026a0:	4935      	ldr	r1, [pc, #212]	@ (8002778 <HAL_GPIO_Init+0x2ec>)
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	089b      	lsrs	r3, r3, #2
 80026a6:	3302      	adds	r3, #2
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ae:	4b38      	ldr	r3, [pc, #224]	@ (8002790 <HAL_GPIO_Init+0x304>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	43db      	mvns	r3, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4013      	ands	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026d2:	4a2f      	ldr	r2, [pc, #188]	@ (8002790 <HAL_GPIO_Init+0x304>)
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002790 <HAL_GPIO_Init+0x304>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026fc:	4a24      	ldr	r2, [pc, #144]	@ (8002790 <HAL_GPIO_Init+0x304>)
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002702:	4b23      	ldr	r3, [pc, #140]	@ (8002790 <HAL_GPIO_Init+0x304>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	43db      	mvns	r3, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4013      	ands	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002726:	4a1a      	ldr	r2, [pc, #104]	@ (8002790 <HAL_GPIO_Init+0x304>)
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800272c:	4b18      	ldr	r3, [pc, #96]	@ (8002790 <HAL_GPIO_Init+0x304>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	43db      	mvns	r3, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4013      	ands	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002750:	4a0f      	ldr	r2, [pc, #60]	@ (8002790 <HAL_GPIO_Init+0x304>)
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3301      	adds	r3, #1
 800275a:	61fb      	str	r3, [r7, #28]
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	2b0f      	cmp	r3, #15
 8002760:	f67f aea2 	bls.w	80024a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002764:	bf00      	nop
 8002766:	bf00      	nop
 8002768:	3724      	adds	r7, #36	@ 0x24
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40023800 	.word	0x40023800
 8002778:	40013800 	.word	0x40013800
 800277c:	40020000 	.word	0x40020000
 8002780:	40020400 	.word	0x40020400
 8002784:	40020800 	.word	0x40020800
 8002788:	40020c00 	.word	0x40020c00
 800278c:	40021000 	.word	0x40021000
 8002790:	40013c00 	.word	0x40013c00

08002794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	807b      	strh	r3, [r7, #2]
 80027a0:	4613      	mov	r3, r2
 80027a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027a4:	787b      	ldrb	r3, [r7, #1]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027aa:	887a      	ldrh	r2, [r7, #2]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027b0:	e003      	b.n	80027ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027b2:	887b      	ldrh	r3, [r7, #2]
 80027b4:	041a      	lsls	r2, r3, #16
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	619a      	str	r2, [r3, #24]
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b085      	sub	sp, #20
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	460b      	mov	r3, r1
 80027d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027d8:	887a      	ldrh	r2, [r7, #2]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4013      	ands	r3, r2
 80027de:	041a      	lsls	r2, r3, #16
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	43d9      	mvns	r1, r3
 80027e4:	887b      	ldrh	r3, [r7, #2]
 80027e6:	400b      	ands	r3, r1
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	619a      	str	r2, [r3, #24]
}
 80027ee:	bf00      	nop
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
	...

080027fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002806:	4b08      	ldr	r3, [pc, #32]	@ (8002828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002808:	695a      	ldr	r2, [r3, #20]
 800280a:	88fb      	ldrh	r3, [r7, #6]
 800280c:	4013      	ands	r3, r2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d006      	beq.n	8002820 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002812:	4a05      	ldr	r2, [pc, #20]	@ (8002828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002814:	88fb      	ldrh	r3, [r7, #6]
 8002816:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002818:	88fb      	ldrh	r3, [r7, #6]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff fa8c 	bl	8001d38 <HAL_GPIO_EXTI_Callback>
  }
}
 8002820:	bf00      	nop
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40013c00 	.word	0x40013c00

0800282c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af02      	add	r7, sp, #8
 8002832:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e101      	b.n	8002a42 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d106      	bne.n	800285e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f006 fc6b 	bl	8009134 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2203      	movs	r2, #3
 8002862:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800286c:	d102      	bne.n	8002874 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f003 f852 	bl	8005922 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6818      	ldr	r0, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	7c1a      	ldrb	r2, [r3, #16]
 8002886:	f88d 2000 	strb.w	r2, [sp]
 800288a:	3304      	adds	r3, #4
 800288c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800288e:	f002 ff31 	bl	80056f4 <USB_CoreInit>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d005      	beq.n	80028a4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e0ce      	b.n	8002a42 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2100      	movs	r1, #0
 80028aa:	4618      	mov	r0, r3
 80028ac:	f003 f84a 	bl	8005944 <USB_SetCurrentMode>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d005      	beq.n	80028c2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2202      	movs	r2, #2
 80028ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e0bf      	b.n	8002a42 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028c2:	2300      	movs	r3, #0
 80028c4:	73fb      	strb	r3, [r7, #15]
 80028c6:	e04a      	b.n	800295e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028c8:	7bfa      	ldrb	r2, [r7, #15]
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4413      	add	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	3315      	adds	r3, #21
 80028d8:	2201      	movs	r2, #1
 80028da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028dc:	7bfa      	ldrb	r2, [r7, #15]
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	4413      	add	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	3314      	adds	r3, #20
 80028ec:	7bfa      	ldrb	r2, [r7, #15]
 80028ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028f0:	7bfa      	ldrb	r2, [r7, #15]
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	b298      	uxth	r0, r3
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	4413      	add	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	332e      	adds	r3, #46	@ 0x2e
 8002904:	4602      	mov	r2, r0
 8002906:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002908:	7bfa      	ldrb	r2, [r7, #15]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	4413      	add	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	3318      	adds	r3, #24
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800291c:	7bfa      	ldrb	r2, [r7, #15]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	4413      	add	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	331c      	adds	r3, #28
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002930:	7bfa      	ldrb	r2, [r7, #15]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	4413      	add	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	3320      	adds	r3, #32
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002944:	7bfa      	ldrb	r2, [r7, #15]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4413      	add	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	3324      	adds	r3, #36	@ 0x24
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002958:	7bfb      	ldrb	r3, [r7, #15]
 800295a:	3301      	adds	r3, #1
 800295c:	73fb      	strb	r3, [r7, #15]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	791b      	ldrb	r3, [r3, #4]
 8002962:	7bfa      	ldrb	r2, [r7, #15]
 8002964:	429a      	cmp	r2, r3
 8002966:	d3af      	bcc.n	80028c8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002968:	2300      	movs	r3, #0
 800296a:	73fb      	strb	r3, [r7, #15]
 800296c:	e044      	b.n	80029f8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800296e:	7bfa      	ldrb	r2, [r7, #15]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	4413      	add	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002980:	2200      	movs	r2, #0
 8002982:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002984:	7bfa      	ldrb	r2, [r7, #15]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	4613      	mov	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4413      	add	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002996:	7bfa      	ldrb	r2, [r7, #15]
 8002998:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800299a:	7bfa      	ldrb	r2, [r7, #15]
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	4613      	mov	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4413      	add	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029b0:	7bfa      	ldrb	r2, [r7, #15]
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	4413      	add	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029c6:	7bfa      	ldrb	r2, [r7, #15]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4413      	add	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029dc:	7bfa      	ldrb	r2, [r7, #15]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
 80029f4:	3301      	adds	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	791b      	ldrb	r3, [r3, #4]
 80029fc:	7bfa      	ldrb	r2, [r7, #15]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d3b5      	bcc.n	800296e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6818      	ldr	r0, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	7c1a      	ldrb	r2, [r3, #16]
 8002a0a:	f88d 2000 	strb.w	r2, [sp]
 8002a0e:	3304      	adds	r3, #4
 8002a10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a12:	f002 ffe3 	bl	80059dc <USB_DevInit>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e00c      	b.n	8002a42 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f004 f82d 	bl	8006a9a <USB_DevDisconnect>

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_PCD_Start+0x1c>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e022      	b.n	8002aac <HAL_PCD_Start+0x62>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d009      	beq.n	8002a8e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d105      	bne.n	8002a8e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a86:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f002 ff34 	bl	8005900 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f003 ffdb 	bl	8006a58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ab4:	b590      	push	{r4, r7, lr}
 8002ab6:	b08d      	sub	sp, #52	@ 0x34
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f004 f899 	bl	8006c02 <USB_GetMode>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f040 848c 	bne.w	80033f0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f003 fffd 	bl	8006adc <USB_ReadInterrupts>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 8482 	beq.w	80033ee <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	0a1b      	lsrs	r3, r3, #8
 8002af4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f003 ffea 	bl	8006adc <USB_ReadInterrupts>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d107      	bne.n	8002b22 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695a      	ldr	r2, [r3, #20]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f002 0202 	and.w	r2, r2, #2
 8002b20:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f003 ffd8 	bl	8006adc <USB_ReadInterrupts>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f003 0310 	and.w	r3, r3, #16
 8002b32:	2b10      	cmp	r3, #16
 8002b34:	d161      	bne.n	8002bfa <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	699a      	ldr	r2, [r3, #24]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0210 	bic.w	r2, r2, #16
 8002b44:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	f003 020f 	and.w	r2, r3, #15
 8002b52:	4613      	mov	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	4413      	add	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	4413      	add	r3, r2
 8002b62:	3304      	adds	r3, #4
 8002b64:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	0c5b      	lsrs	r3, r3, #17
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d124      	bne.n	8002bbc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002b78:	4013      	ands	r3, r2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d035      	beq.n	8002bea <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	091b      	lsrs	r3, r3, #4
 8002b86:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	461a      	mov	r2, r3
 8002b90:	6a38      	ldr	r0, [r7, #32]
 8002b92:	f003 fe0f 	bl	80067b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ba2:	441a      	add	r2, r3
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	695a      	ldr	r2, [r3, #20]
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	091b      	lsrs	r3, r3, #4
 8002bb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bb4:	441a      	add	r2, r3
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	615a      	str	r2, [r3, #20]
 8002bba:	e016      	b.n	8002bea <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	0c5b      	lsrs	r3, r3, #17
 8002bc0:	f003 030f 	and.w	r3, r3, #15
 8002bc4:	2b06      	cmp	r3, #6
 8002bc6:	d110      	bne.n	8002bea <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002bce:	2208      	movs	r2, #8
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	6a38      	ldr	r0, [r7, #32]
 8002bd4:	f003 fdee 	bl	80067b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	695a      	ldr	r2, [r3, #20]
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	091b      	lsrs	r3, r3, #4
 8002be0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002be4:	441a      	add	r2, r3
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	699a      	ldr	r2, [r3, #24]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 0210 	orr.w	r2, r2, #16
 8002bf8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f003 ff6c 	bl	8006adc <USB_ReadInterrupts>
 8002c04:	4603      	mov	r3, r0
 8002c06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c0a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002c0e:	f040 80a7 	bne.w	8002d60 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f003 ff71 	bl	8006b02 <USB_ReadDevAllOutEpInterrupt>
 8002c20:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002c22:	e099      	b.n	8002d58 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 808e 	beq.w	8002d4c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	4611      	mov	r1, r2
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f003 ff95 	bl	8006b6a <USB_ReadDevOutEPInterrupt>
 8002c40:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00c      	beq.n	8002c66 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4e:	015a      	lsls	r2, r3, #5
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	4413      	add	r3, r2
 8002c54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c58:	461a      	mov	r2, r3
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002c5e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 fea3 	bl	80039ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	f003 0308 	and.w	r3, r3, #8
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00c      	beq.n	8002c8a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c72:	015a      	lsls	r2, r3, #5
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	2308      	movs	r3, #8
 8002c80:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002c82:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 ff79 	bl	8003b7c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	f003 0310 	and.w	r3, r3, #16
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d008      	beq.n	8002ca6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	2310      	movs	r3, #16
 8002ca4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d030      	beq.n	8002d12 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cb8:	2b80      	cmp	r3, #128	@ 0x80
 8002cba:	d109      	bne.n	8002cd0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	69fa      	ldr	r2, [r7, #28]
 8002cc6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cce:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002cd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	78db      	ldrb	r3, [r3, #3]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d108      	bne.n	8002d00 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f006 fb16 	bl	800932c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d02:	015a      	lsls	r2, r3, #5
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	4413      	add	r3, r2
 8002d08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	2302      	movs	r3, #2
 8002d10:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f003 0320 	and.w	r3, r3, #32
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d008      	beq.n	8002d2e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1e:	015a      	lsls	r2, r3, #5
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	4413      	add	r3, r2
 8002d24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d28:	461a      	mov	r2, r3
 8002d2a:	2320      	movs	r3, #32
 8002d2c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d009      	beq.n	8002d4c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3a:	015a      	lsls	r2, r3, #5
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d44:	461a      	mov	r2, r3
 8002d46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d4a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4e:	3301      	adds	r3, #1
 8002d50:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d54:	085b      	lsrs	r3, r3, #1
 8002d56:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f47f af62 	bne.w	8002c24 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f003 feb9 	bl	8006adc <USB_ReadInterrupts>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d70:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d74:	f040 80db 	bne.w	8002f2e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f003 feda 	bl	8006b36 <USB_ReadDevAllInEpInterrupt>
 8002d82:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002d88:	e0cd      	b.n	8002f26 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80c2 	beq.w	8002f1a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	4611      	mov	r1, r2
 8002da0:	4618      	mov	r0, r3
 8002da2:	f003 ff00 	bl	8006ba6 <USB_ReadDevInEPInterrupt>
 8002da6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d057      	beq.n	8002e62 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db4:	f003 030f 	and.w	r3, r3, #15
 8002db8:	2201      	movs	r2, #1
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	69f9      	ldr	r1, [r7, #28]
 8002dce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002de2:	461a      	mov	r2, r3
 8002de4:	2301      	movs	r3, #1
 8002de6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	799b      	ldrb	r3, [r3, #6]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d132      	bne.n	8002e56 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002df4:	4613      	mov	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	3320      	adds	r3, #32
 8002e00:	6819      	ldr	r1, [r3, #0]
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e06:	4613      	mov	r3, r2
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4403      	add	r3, r0
 8002e10:	331c      	adds	r3, #28
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4419      	add	r1, r3
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	4413      	add	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4403      	add	r3, r0
 8002e24:	3320      	adds	r3, #32
 8002e26:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d113      	bne.n	8002e56 <HAL_PCD_IRQHandler+0x3a2>
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e32:	4613      	mov	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4413      	add	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	3324      	adds	r3, #36	@ 0x24
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d108      	bne.n	8002e56 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6818      	ldr	r0, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e4e:	461a      	mov	r2, r3
 8002e50:	2101      	movs	r1, #1
 8002e52:	f003 ff07 	bl	8006c64 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f006 f9ea 	bl	8009236 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e78:	461a      	mov	r2, r3
 8002e7a:	2308      	movs	r3, #8
 8002e7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f003 0310 	and.w	r3, r3, #16
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e94:	461a      	mov	r2, r3
 8002e96:	2310      	movs	r3, #16
 8002e98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea6:	015a      	lsls	r2, r3, #5
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	2340      	movs	r3, #64	@ 0x40
 8002eb4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d023      	beq.n	8002f08 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002ec0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ec2:	6a38      	ldr	r0, [r7, #32]
 8002ec4:	f002 feee 	bl	8005ca4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002ec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eca:	4613      	mov	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	4413      	add	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	3310      	adds	r3, #16
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3304      	adds	r3, #4
 8002eda:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	78db      	ldrb	r3, [r3, #3]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d108      	bne.n	8002ef6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	4619      	mov	r1, r3
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f006 fa2d 	bl	8009350 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f02:	461a      	mov	r2, r3
 8002f04:	2302      	movs	r3, #2
 8002f06:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002f12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 fcbd 	bl	8003894 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f22:	085b      	lsrs	r3, r3, #1
 8002f24:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f47f af2e 	bne.w	8002d8a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f003 fdd2 	bl	8006adc <USB_ReadInterrupts>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002f3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f42:	d122      	bne.n	8002f8a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	69fa      	ldr	r2, [r7, #28]
 8002f4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f52:	f023 0301 	bic.w	r3, r3, #1
 8002f56:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d108      	bne.n	8002f74 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 fea3 	bl	8003cb8 <HAL_PCDEx_LPM_Callback>
 8002f72:	e002      	b.n	8002f7a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f006 f9cb 	bl	8009310 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695a      	ldr	r2, [r3, #20]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002f88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f003 fda4 	bl	8006adc <USB_ReadInterrupts>
 8002f94:	4603      	mov	r3, r0
 8002f96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f9e:	d112      	bne.n	8002fc6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d102      	bne.n	8002fb6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f006 f987 	bl	80092c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	695a      	ldr	r2, [r3, #20]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002fc4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f003 fd86 	bl	8006adc <USB_ReadInterrupts>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fda:	f040 80b7 	bne.w	800314c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	69fa      	ldr	r2, [r7, #28]
 8002fe8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fec:	f023 0301 	bic.w	r3, r3, #1
 8002ff0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2110      	movs	r1, #16
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f002 fe53 	bl	8005ca4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ffe:	2300      	movs	r3, #0
 8003000:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003002:	e046      	b.n	8003092 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	4413      	add	r3, r2
 800300c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003010:	461a      	mov	r2, r3
 8003012:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003016:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	4413      	add	r3, r2
 8003020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003028:	0151      	lsls	r1, r2, #5
 800302a:	69fa      	ldr	r2, [r7, #28]
 800302c:	440a      	add	r2, r1
 800302e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003032:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003036:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800303a:	015a      	lsls	r2, r3, #5
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	4413      	add	r3, r2
 8003040:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003044:	461a      	mov	r2, r3
 8003046:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800304a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800304c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800304e:	015a      	lsls	r2, r3, #5
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	4413      	add	r3, r2
 8003054:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800305c:	0151      	lsls	r1, r2, #5
 800305e:	69fa      	ldr	r2, [r7, #28]
 8003060:	440a      	add	r2, r1
 8003062:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003066:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800306a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800306c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800306e:	015a      	lsls	r2, r3, #5
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	4413      	add	r3, r2
 8003074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800307c:	0151      	lsls	r1, r2, #5
 800307e:	69fa      	ldr	r2, [r7, #28]
 8003080:	440a      	add	r2, r1
 8003082:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003086:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800308a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800308c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800308e:	3301      	adds	r3, #1
 8003090:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	791b      	ldrb	r3, [r3, #4]
 8003096:	461a      	mov	r2, r3
 8003098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800309a:	4293      	cmp	r3, r2
 800309c:	d3b2      	bcc.n	8003004 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	69fa      	ldr	r2, [r7, #28]
 80030a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030ac:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80030b0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	7bdb      	ldrb	r3, [r3, #15]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d016      	beq.n	80030e8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030c4:	69fa      	ldr	r2, [r7, #28]
 80030c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030ca:	f043 030b 	orr.w	r3, r3, #11
 80030ce:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030da:	69fa      	ldr	r2, [r7, #28]
 80030dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030e0:	f043 030b 	orr.w	r3, r3, #11
 80030e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80030e6:	e015      	b.n	8003114 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	69fa      	ldr	r2, [r7, #28]
 80030f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80030fa:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80030fe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	69fa      	ldr	r2, [r7, #28]
 800310a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800310e:	f043 030b 	orr.w	r3, r3, #11
 8003112:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	69fa      	ldr	r2, [r7, #28]
 800311e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003122:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003126:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6818      	ldr	r0, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003136:	461a      	mov	r2, r3
 8003138:	f003 fd94 	bl	8006c64 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	695a      	ldr	r2, [r3, #20]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800314a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4618      	mov	r0, r3
 8003152:	f003 fcc3 	bl	8006adc <USB_ReadInterrupts>
 8003156:	4603      	mov	r3, r0
 8003158:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800315c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003160:	d123      	bne.n	80031aa <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f003 fd59 	bl	8006c1e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f002 fe10 	bl	8005d96 <USB_GetDevSpeed>
 8003176:	4603      	mov	r3, r0
 8003178:	461a      	mov	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681c      	ldr	r4, [r3, #0]
 8003182:	f001 f9c9 	bl	8004518 <HAL_RCC_GetHCLKFreq>
 8003186:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800318c:	461a      	mov	r2, r3
 800318e:	4620      	mov	r0, r4
 8003190:	f002 fb14 	bl	80057bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f006 f876 	bl	8009286 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695a      	ldr	r2, [r3, #20]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80031a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f003 fc94 	bl	8006adc <USB_ReadInterrupts>
 80031b4:	4603      	mov	r3, r0
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d10a      	bne.n	80031d4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f006 f853 	bl	800926a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695a      	ldr	r2, [r3, #20]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f002 0208 	and.w	r2, r2, #8
 80031d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f003 fc7f 	bl	8006adc <USB_ReadInterrupts>
 80031de:	4603      	mov	r3, r0
 80031e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e4:	2b80      	cmp	r3, #128	@ 0x80
 80031e6:	d123      	bne.n	8003230 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031f4:	2301      	movs	r3, #1
 80031f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80031f8:	e014      	b.n	8003224 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031fe:	4613      	mov	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	4413      	add	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	440b      	add	r3, r1
 8003208:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d105      	bne.n	800321e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003214:	b2db      	uxtb	r3, r3
 8003216:	4619      	mov	r1, r3
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 fb0a 	bl	8003832 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800321e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003220:	3301      	adds	r3, #1
 8003222:	627b      	str	r3, [r7, #36]	@ 0x24
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	791b      	ldrb	r3, [r3, #4]
 8003228:	461a      	mov	r2, r3
 800322a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322c:	4293      	cmp	r3, r2
 800322e:	d3e4      	bcc.n	80031fa <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f003 fc51 	bl	8006adc <USB_ReadInterrupts>
 800323a:	4603      	mov	r3, r0
 800323c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003240:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003244:	d13c      	bne.n	80032c0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003246:	2301      	movs	r3, #1
 8003248:	627b      	str	r3, [r7, #36]	@ 0x24
 800324a:	e02b      	b.n	80032a4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800324c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324e:	015a      	lsls	r2, r3, #5
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	4413      	add	r3, r2
 8003254:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003260:	4613      	mov	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	3318      	adds	r3, #24
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d115      	bne.n	800329e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003272:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003274:	2b00      	cmp	r3, #0
 8003276:	da12      	bge.n	800329e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800327c:	4613      	mov	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	3317      	adds	r3, #23
 8003288:	2201      	movs	r2, #1
 800328a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800328c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328e:	b2db      	uxtb	r3, r3
 8003290:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003294:	b2db      	uxtb	r3, r3
 8003296:	4619      	mov	r1, r3
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 faca 	bl	8003832 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800329e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a0:	3301      	adds	r3, #1
 80032a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	791b      	ldrb	r3, [r3, #4]
 80032a8:	461a      	mov	r2, r3
 80032aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d3cd      	bcc.n	800324c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695a      	ldr	r2, [r3, #20]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80032be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f003 fc09 	bl	8006adc <USB_ReadInterrupts>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032d4:	d156      	bne.n	8003384 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032d6:	2301      	movs	r3, #1
 80032d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80032da:	e045      	b.n	8003368 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80032dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032de:	015a      	lsls	r2, r3, #5
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	4413      	add	r3, r2
 80032e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032f0:	4613      	mov	r3, r2
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	4413      	add	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d12e      	bne.n	8003362 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003304:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003306:	2b00      	cmp	r3, #0
 8003308:	da2b      	bge.n	8003362 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003316:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800331a:	429a      	cmp	r2, r3
 800331c:	d121      	bne.n	8003362 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003322:	4613      	mov	r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	4413      	add	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	440b      	add	r3, r1
 800332c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003330:	2201      	movs	r2, #1
 8003332:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10a      	bne.n	8003362 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	69fa      	ldr	r2, [r7, #28]
 8003356:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800335a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800335e:	6053      	str	r3, [r2, #4]
            break;
 8003360:	e008      	b.n	8003374 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003364:	3301      	adds	r3, #1
 8003366:	627b      	str	r3, [r7, #36]	@ 0x24
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	791b      	ldrb	r3, [r3, #4]
 800336c:	461a      	mov	r2, r3
 800336e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003370:	4293      	cmp	r3, r2
 8003372:	d3b3      	bcc.n	80032dc <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695a      	ldr	r2, [r3, #20]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003382:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f003 fba7 	bl	8006adc <USB_ReadInterrupts>
 800338e:	4603      	mov	r3, r0
 8003390:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003394:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003398:	d10a      	bne.n	80033b0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f005 ffea 	bl	8009374 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695a      	ldr	r2, [r3, #20]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80033ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f003 fb91 	bl	8006adc <USB_ReadInterrupts>
 80033ba:	4603      	mov	r3, r0
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b04      	cmp	r3, #4
 80033c2:	d115      	bne.n	80033f0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f005 ffda 	bl	8009390 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6859      	ldr	r1, [r3, #4]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	605a      	str	r2, [r3, #4]
 80033ec:	e000      	b.n	80033f0 <HAL_PCD_IRQHandler+0x93c>
      return;
 80033ee:	bf00      	nop
    }
  }
}
 80033f0:	3734      	adds	r7, #52	@ 0x34
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd90      	pop	{r4, r7, pc}

080033f6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b082      	sub	sp, #8
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	460b      	mov	r3, r1
 8003400:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_PCD_SetAddress+0x1a>
 800340c:	2302      	movs	r3, #2
 800340e:	e012      	b.n	8003436 <HAL_PCD_SetAddress+0x40>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	78fa      	ldrb	r2, [r7, #3]
 800341c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	78fa      	ldrb	r2, [r7, #3]
 8003424:	4611      	mov	r1, r2
 8003426:	4618      	mov	r0, r3
 8003428:	f003 faf0 	bl	8006a0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b084      	sub	sp, #16
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
 8003446:	4608      	mov	r0, r1
 8003448:	4611      	mov	r1, r2
 800344a:	461a      	mov	r2, r3
 800344c:	4603      	mov	r3, r0
 800344e:	70fb      	strb	r3, [r7, #3]
 8003450:	460b      	mov	r3, r1
 8003452:	803b      	strh	r3, [r7, #0]
 8003454:	4613      	mov	r3, r2
 8003456:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003458:	2300      	movs	r3, #0
 800345a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800345c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003460:	2b00      	cmp	r3, #0
 8003462:	da0f      	bge.n	8003484 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003464:	78fb      	ldrb	r3, [r7, #3]
 8003466:	f003 020f 	and.w	r2, r3, #15
 800346a:	4613      	mov	r3, r2
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4413      	add	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	3310      	adds	r3, #16
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	4413      	add	r3, r2
 8003478:	3304      	adds	r3, #4
 800347a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2201      	movs	r2, #1
 8003480:	705a      	strb	r2, [r3, #1]
 8003482:	e00f      	b.n	80034a4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003484:	78fb      	ldrb	r3, [r7, #3]
 8003486:	f003 020f 	and.w	r2, r3, #15
 800348a:	4613      	mov	r3, r2
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	4413      	add	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	4413      	add	r3, r2
 800349a:	3304      	adds	r3, #4
 800349c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034a4:	78fb      	ldrb	r3, [r7, #3]
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80034b0:	883b      	ldrh	r3, [r7, #0]
 80034b2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	78ba      	ldrb	r2, [r7, #2]
 80034be:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	785b      	ldrb	r3, [r3, #1]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d004      	beq.n	80034d2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	461a      	mov	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80034d2:	78bb      	ldrb	r3, [r7, #2]
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d102      	bne.n	80034de <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d101      	bne.n	80034ec <HAL_PCD_EP_Open+0xae>
 80034e8:	2302      	movs	r3, #2
 80034ea:	e00e      	b.n	800350a <HAL_PCD_EP_Open+0xcc>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68f9      	ldr	r1, [r7, #12]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f002 fc70 	bl	8005de0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003508:	7afb      	ldrb	r3, [r7, #11]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b084      	sub	sp, #16
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	460b      	mov	r3, r1
 800351c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800351e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003522:	2b00      	cmp	r3, #0
 8003524:	da0f      	bge.n	8003546 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003526:	78fb      	ldrb	r3, [r7, #3]
 8003528:	f003 020f 	and.w	r2, r3, #15
 800352c:	4613      	mov	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	3310      	adds	r3, #16
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	4413      	add	r3, r2
 800353a:	3304      	adds	r3, #4
 800353c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2201      	movs	r2, #1
 8003542:	705a      	strb	r2, [r3, #1]
 8003544:	e00f      	b.n	8003566 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003546:	78fb      	ldrb	r3, [r7, #3]
 8003548:	f003 020f 	and.w	r2, r3, #15
 800354c:	4613      	mov	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	4413      	add	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	4413      	add	r3, r2
 800355c:	3304      	adds	r3, #4
 800355e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003566:	78fb      	ldrb	r3, [r7, #3]
 8003568:	f003 030f 	and.w	r3, r3, #15
 800356c:	b2da      	uxtb	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <HAL_PCD_EP_Close+0x6e>
 800357c:	2302      	movs	r3, #2
 800357e:	e00e      	b.n	800359e <HAL_PCD_EP_Close+0x8c>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68f9      	ldr	r1, [r7, #12]
 800358e:	4618      	mov	r0, r3
 8003590:	f002 fcae 	bl	8005ef0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b086      	sub	sp, #24
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	60f8      	str	r0, [r7, #12]
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	603b      	str	r3, [r7, #0]
 80035b2:	460b      	mov	r3, r1
 80035b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035b6:	7afb      	ldrb	r3, [r7, #11]
 80035b8:	f003 020f 	and.w	r2, r3, #15
 80035bc:	4613      	mov	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	4413      	add	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	4413      	add	r3, r2
 80035cc:	3304      	adds	r3, #4
 80035ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	2200      	movs	r2, #0
 80035e0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2200      	movs	r2, #0
 80035e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035e8:	7afb      	ldrb	r3, [r7, #11]
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	799b      	ldrb	r3, [r3, #6]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d102      	bne.n	8003602 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	799b      	ldrb	r3, [r3, #6]
 800360a:	461a      	mov	r2, r3
 800360c:	6979      	ldr	r1, [r7, #20]
 800360e:	f002 fd4b 	bl	80060a8 <USB_EPStartXfer>

  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3718      	adds	r7, #24
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	460b      	mov	r3, r1
 8003626:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003628:	78fb      	ldrb	r3, [r7, #3]
 800362a:	f003 020f 	and.w	r2, r3, #15
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	4613      	mov	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	4413      	add	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800363e:	681b      	ldr	r3, [r3, #0]
}
 8003640:	4618      	mov	r0, r3
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	607a      	str	r2, [r7, #4]
 8003656:	603b      	str	r3, [r7, #0]
 8003658:	460b      	mov	r3, r1
 800365a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800365c:	7afb      	ldrb	r3, [r7, #11]
 800365e:	f003 020f 	and.w	r2, r3, #15
 8003662:	4613      	mov	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	4413      	add	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	3310      	adds	r3, #16
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	4413      	add	r3, r2
 8003670:	3304      	adds	r3, #4
 8003672:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	2200      	movs	r2, #0
 8003684:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	2201      	movs	r2, #1
 800368a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800368c:	7afb      	ldrb	r3, [r7, #11]
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	b2da      	uxtb	r2, r3
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	799b      	ldrb	r3, [r3, #6]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d102      	bne.n	80036a6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6818      	ldr	r0, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	799b      	ldrb	r3, [r3, #6]
 80036ae:	461a      	mov	r2, r3
 80036b0:	6979      	ldr	r1, [r7, #20]
 80036b2:	f002 fcf9 	bl	80060a8 <USB_EPStartXfer>

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	7912      	ldrb	r2, [r2, #4]
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d901      	bls.n	80036de <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e04f      	b.n	800377e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	da0f      	bge.n	8003706 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036e6:	78fb      	ldrb	r3, [r7, #3]
 80036e8:	f003 020f 	and.w	r2, r3, #15
 80036ec:	4613      	mov	r3, r2
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	4413      	add	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	3310      	adds	r3, #16
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	4413      	add	r3, r2
 80036fa:	3304      	adds	r3, #4
 80036fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2201      	movs	r2, #1
 8003702:	705a      	strb	r2, [r3, #1]
 8003704:	e00d      	b.n	8003722 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003706:	78fa      	ldrb	r2, [r7, #3]
 8003708:	4613      	mov	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	4413      	add	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	4413      	add	r3, r2
 8003718:	3304      	adds	r3, #4
 800371a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2201      	movs	r2, #1
 8003726:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	b2da      	uxtb	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_PCD_EP_SetStall+0x82>
 800373e:	2302      	movs	r3, #2
 8003740:	e01d      	b.n	800377e <HAL_PCD_EP_SetStall+0xbe>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68f9      	ldr	r1, [r7, #12]
 8003750:	4618      	mov	r0, r3
 8003752:	f003 f887 	bl	8006864 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003756:	78fb      	ldrb	r3, [r7, #3]
 8003758:	f003 030f 	and.w	r3, r3, #15
 800375c:	2b00      	cmp	r3, #0
 800375e:	d109      	bne.n	8003774 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6818      	ldr	r0, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	7999      	ldrb	r1, [r3, #6]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800376e:	461a      	mov	r2, r3
 8003770:	f003 fa78 	bl	8006c64 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b084      	sub	sp, #16
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
 800378e:	460b      	mov	r3, r1
 8003790:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003792:	78fb      	ldrb	r3, [r7, #3]
 8003794:	f003 030f 	and.w	r3, r3, #15
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	7912      	ldrb	r2, [r2, #4]
 800379c:	4293      	cmp	r3, r2
 800379e:	d901      	bls.n	80037a4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e042      	b.n	800382a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	da0f      	bge.n	80037cc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037ac:	78fb      	ldrb	r3, [r7, #3]
 80037ae:	f003 020f 	and.w	r2, r3, #15
 80037b2:	4613      	mov	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	4413      	add	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	3310      	adds	r3, #16
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	4413      	add	r3, r2
 80037c0:	3304      	adds	r3, #4
 80037c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2201      	movs	r2, #1
 80037c8:	705a      	strb	r2, [r3, #1]
 80037ca:	e00f      	b.n	80037ec <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037cc:	78fb      	ldrb	r3, [r7, #3]
 80037ce:	f003 020f 	and.w	r2, r3, #15
 80037d2:	4613      	mov	r3, r2
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	4413      	add	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	4413      	add	r3, r2
 80037e2:	3304      	adds	r3, #4
 80037e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037f2:	78fb      	ldrb	r3, [r7, #3]
 80037f4:	f003 030f 	and.w	r3, r3, #15
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_PCD_EP_ClrStall+0x86>
 8003808:	2302      	movs	r3, #2
 800380a:	e00e      	b.n	800382a <HAL_PCD_EP_ClrStall+0xa4>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68f9      	ldr	r1, [r7, #12]
 800381a:	4618      	mov	r0, r3
 800381c:	f003 f890 	bl	8006940 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b084      	sub	sp, #16
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
 800383a:	460b      	mov	r3, r1
 800383c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800383e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003842:	2b00      	cmp	r3, #0
 8003844:	da0c      	bge.n	8003860 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003846:	78fb      	ldrb	r3, [r7, #3]
 8003848:	f003 020f 	and.w	r2, r3, #15
 800384c:	4613      	mov	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	3310      	adds	r3, #16
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	4413      	add	r3, r2
 800385a:	3304      	adds	r3, #4
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	e00c      	b.n	800387a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003860:	78fb      	ldrb	r3, [r7, #3]
 8003862:	f003 020f 	and.w	r2, r3, #15
 8003866:	4613      	mov	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	4413      	add	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	4413      	add	r3, r2
 8003876:	3304      	adds	r3, #4
 8003878:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68f9      	ldr	r1, [r7, #12]
 8003880:	4618      	mov	r0, r3
 8003882:	f002 feaf 	bl	80065e4 <USB_EPStopXfer>
 8003886:	4603      	mov	r3, r0
 8003888:	72fb      	strb	r3, [r7, #11]

  return ret;
 800388a:	7afb      	ldrb	r3, [r7, #11]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08a      	sub	sp, #40	@ 0x28
 8003898:	af02      	add	r7, sp, #8
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	4613      	mov	r3, r2
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	4413      	add	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	3310      	adds	r3, #16
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	4413      	add	r3, r2
 80038b8:	3304      	adds	r3, #4
 80038ba:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	695a      	ldr	r2, [r3, #20]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d901      	bls.n	80038cc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e06b      	b.n	80039a4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	691a      	ldr	r2, [r3, #16]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	69fa      	ldr	r2, [r7, #28]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d902      	bls.n	80038e8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	3303      	adds	r3, #3
 80038ec:	089b      	lsrs	r3, r3, #2
 80038ee:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038f0:	e02a      	b.n	8003948 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	691a      	ldr	r2, [r3, #16]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	69fa      	ldr	r2, [r7, #28]
 8003904:	429a      	cmp	r2, r3
 8003906:	d902      	bls.n	800390e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	3303      	adds	r3, #3
 8003912:	089b      	lsrs	r3, r3, #2
 8003914:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	68d9      	ldr	r1, [r3, #12]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	b2da      	uxtb	r2, r3
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	4603      	mov	r3, r0
 800392a:	6978      	ldr	r0, [r7, #20]
 800392c:	f002 ff04 	bl	8006738 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	441a      	add	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	695a      	ldr	r2, [r3, #20]
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	441a      	add	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	4413      	add	r3, r2
 8003950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	429a      	cmp	r2, r3
 800395c:	d809      	bhi.n	8003972 <PCD_WriteEmptyTxFifo+0xde>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	695a      	ldr	r2, [r3, #20]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003966:	429a      	cmp	r2, r3
 8003968:	d203      	bcs.n	8003972 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1bf      	bne.n	80038f2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	691a      	ldr	r2, [r3, #16]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	429a      	cmp	r2, r3
 800397c:	d811      	bhi.n	80039a2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	f003 030f 	and.w	r3, r3, #15
 8003984:	2201      	movs	r2, #1
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003992:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	43db      	mvns	r3, r3
 8003998:	6939      	ldr	r1, [r7, #16]
 800399a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800399e:	4013      	ands	r3, r2
 80039a0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3720      	adds	r7, #32
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	333c      	adds	r3, #60	@ 0x3c
 80039c4:	3304      	adds	r3, #4
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	015a      	lsls	r2, r3, #5
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	4413      	add	r3, r2
 80039d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	799b      	ldrb	r3, [r3, #6]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d17b      	bne.n	8003ada <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d015      	beq.n	8003a18 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	4a61      	ldr	r2, [pc, #388]	@ (8003b74 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	f240 80b9 	bls.w	8003b68 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 80b3 	beq.w	8003b68 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a0e:	461a      	mov	r2, r3
 8003a10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a14:	6093      	str	r3, [r2, #8]
 8003a16:	e0a7      	b.n	8003b68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	f003 0320 	and.w	r3, r3, #32
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d009      	beq.n	8003a36 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	015a      	lsls	r2, r3, #5
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a2e:	461a      	mov	r2, r3
 8003a30:	2320      	movs	r3, #32
 8003a32:	6093      	str	r3, [r2, #8]
 8003a34:	e098      	b.n	8003b68 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f040 8093 	bne.w	8003b68 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	4a4b      	ldr	r2, [pc, #300]	@ (8003b74 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d90f      	bls.n	8003a6a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00a      	beq.n	8003a6a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a60:	461a      	mov	r2, r3
 8003a62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a66:	6093      	str	r3, [r2, #8]
 8003a68:	e07e      	b.n	8003b68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	4413      	add	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a1a      	ldr	r2, [r3, #32]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	0159      	lsls	r1, r3, #5
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	440b      	add	r3, r1
 8003a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a96:	1ad2      	subs	r2, r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d114      	bne.n	8003acc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d109      	bne.n	8003abe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	f003 f8d4 	bl	8006c64 <USB_EP0_OutStart>
 8003abc:	e006      	b.n	8003acc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	441a      	add	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f005 fb94 	bl	8009200 <HAL_PCD_DataOutStageCallback>
 8003ad8:	e046      	b.n	8003b68 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	4a26      	ldr	r2, [pc, #152]	@ (8003b78 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d124      	bne.n	8003b2c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00a      	beq.n	8003b02 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003af8:	461a      	mov	r2, r3
 8003afa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003afe:	6093      	str	r3, [r2, #8]
 8003b00:	e032      	b.n	8003b68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f003 0320 	and.w	r3, r3, #32
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d008      	beq.n	8003b1e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	015a      	lsls	r2, r3, #5
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	4413      	add	r3, r2
 8003b14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b18:	461a      	mov	r2, r3
 8003b1a:	2320      	movs	r3, #32
 8003b1c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	4619      	mov	r1, r3
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f005 fb6b 	bl	8009200 <HAL_PCD_DataOutStageCallback>
 8003b2a:	e01d      	b.n	8003b68 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d114      	bne.n	8003b5c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	4613      	mov	r3, r2
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d108      	bne.n	8003b5c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6818      	ldr	r0, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b54:	461a      	mov	r2, r3
 8003b56:	2100      	movs	r1, #0
 8003b58:	f003 f884 	bl	8006c64 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	4619      	mov	r1, r3
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f005 fb4c 	bl	8009200 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3720      	adds	r7, #32
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	4f54300a 	.word	0x4f54300a
 8003b78:	4f54310a 	.word	0x4f54310a

08003b7c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	333c      	adds	r3, #60	@ 0x3c
 8003b94:	3304      	adds	r3, #4
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	015a      	lsls	r2, r3, #5
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	4a15      	ldr	r2, [pc, #84]	@ (8003c04 <PCD_EP_OutSetupPacket_int+0x88>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d90e      	bls.n	8003bd0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d009      	beq.n	8003bd0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bc8:	461a      	mov	r2, r3
 8003bca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f005 fb03 	bl	80091dc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	4a0a      	ldr	r2, [pc, #40]	@ (8003c04 <PCD_EP_OutSetupPacket_int+0x88>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d90c      	bls.n	8003bf8 <PCD_EP_OutSetupPacket_int+0x7c>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	799b      	ldrb	r3, [r3, #6]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d108      	bne.n	8003bf8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6818      	ldr	r0, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	f003 f836 	bl	8006c64 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	4f54300a 	.word	0x4f54300a

08003c08 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	460b      	mov	r3, r1
 8003c12:	70fb      	strb	r3, [r7, #3]
 8003c14:	4613      	mov	r3, r2
 8003c16:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c20:	78fb      	ldrb	r3, [r7, #3]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d107      	bne.n	8003c36 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c26:	883b      	ldrh	r3, [r7, #0]
 8003c28:	0419      	lsls	r1, r3, #16
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	430a      	orrs	r2, r1
 8003c32:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c34:	e028      	b.n	8003c88 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c3c:	0c1b      	lsrs	r3, r3, #16
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	4413      	add	r3, r2
 8003c42:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c44:	2300      	movs	r3, #0
 8003c46:	73fb      	strb	r3, [r7, #15]
 8003c48:	e00d      	b.n	8003c66 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	3340      	adds	r3, #64	@ 0x40
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	0c1b      	lsrs	r3, r3, #16
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c60:	7bfb      	ldrb	r3, [r7, #15]
 8003c62:	3301      	adds	r3, #1
 8003c64:	73fb      	strb	r3, [r7, #15]
 8003c66:	7bfa      	ldrb	r2, [r7, #15]
 8003c68:	78fb      	ldrb	r3, [r7, #3]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d3ec      	bcc.n	8003c4a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003c70:	883b      	ldrh	r3, [r7, #0]
 8003c72:	0418      	lsls	r0, r3, #16
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6819      	ldr	r1, [r3, #0]
 8003c78:	78fb      	ldrb	r3, [r7, #3]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	4302      	orrs	r2, r0
 8003c80:	3340      	adds	r3, #64	@ 0x40
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	887a      	ldrh	r2, [r7, #2]
 8003ca8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e267      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d075      	beq.n	8003dda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003cee:	4b88      	ldr	r3, [pc, #544]	@ (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d00c      	beq.n	8003d14 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cfa:	4b85      	ldr	r3, [pc, #532]	@ (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d02:	2b08      	cmp	r3, #8
 8003d04:	d112      	bne.n	8003d2c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d06:	4b82      	ldr	r3, [pc, #520]	@ (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d12:	d10b      	bne.n	8003d2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d14:	4b7e      	ldr	r3, [pc, #504]	@ (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d05b      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x108>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d157      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e242      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d34:	d106      	bne.n	8003d44 <HAL_RCC_OscConfig+0x74>
 8003d36:	4b76      	ldr	r3, [pc, #472]	@ (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a75      	ldr	r2, [pc, #468]	@ (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003d3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d40:	6013      	str	r3, [r2, #0]
 8003d42:	e01d      	b.n	8003d80 <HAL_RCC_OscConfig+0xb0>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d4c:	d10c      	bne.n	8003d68 <HAL_RCC_OscConfig+0x98>
 8003d4e:	4b70      	ldr	r3, [pc, #448]	@ (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a6f      	ldr	r2, [pc, #444]	@ (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003d54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	4b6d      	ldr	r3, [pc, #436]	@ (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a6c      	ldr	r2, [pc, #432]	@ (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	e00b      	b.n	8003d80 <HAL_RCC_OscConfig+0xb0>
 8003d68:	4b69      	ldr	r3, [pc, #420]	@ (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a68      	ldr	r2, [pc, #416]	@ (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003d6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d72:	6013      	str	r3, [r2, #0]
 8003d74:	4b66      	ldr	r3, [pc, #408]	@ (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a65      	ldr	r2, [pc, #404]	@ (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003d7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d013      	beq.n	8003db0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d88:	f7fe f9f0 	bl	800216c <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d90:	f7fe f9ec 	bl	800216c <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b64      	cmp	r3, #100	@ 0x64
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e207      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da2:	4b5b      	ldr	r3, [pc, #364]	@ (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0f0      	beq.n	8003d90 <HAL_RCC_OscConfig+0xc0>
 8003dae:	e014      	b.n	8003dda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db0:	f7fe f9dc 	bl	800216c <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003db8:	f7fe f9d8 	bl	800216c <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b64      	cmp	r3, #100	@ 0x64
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e1f3      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dca:	4b51      	ldr	r3, [pc, #324]	@ (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1f0      	bne.n	8003db8 <HAL_RCC_OscConfig+0xe8>
 8003dd6:	e000      	b.n	8003dda <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d063      	beq.n	8003eae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003de6:	4b4a      	ldr	r3, [pc, #296]	@ (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 030c 	and.w	r3, r3, #12
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00b      	beq.n	8003e0a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003df2:	4b47      	ldr	r3, [pc, #284]	@ (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d11c      	bne.n	8003e38 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dfe:	4b44      	ldr	r3, [pc, #272]	@ (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d116      	bne.n	8003e38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e0a:	4b41      	ldr	r3, [pc, #260]	@ (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d005      	beq.n	8003e22 <HAL_RCC_OscConfig+0x152>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d001      	beq.n	8003e22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e1c7      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e22:	4b3b      	ldr	r3, [pc, #236]	@ (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	4937      	ldr	r1, [pc, #220]	@ (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e36:	e03a      	b.n	8003eae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d020      	beq.n	8003e82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e40:	4b34      	ldr	r3, [pc, #208]	@ (8003f14 <HAL_RCC_OscConfig+0x244>)
 8003e42:	2201      	movs	r2, #1
 8003e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e46:	f7fe f991 	bl	800216c <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e4c:	e008      	b.n	8003e60 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e4e:	f7fe f98d 	bl	800216c <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e1a8      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e60:	4b2b      	ldr	r3, [pc, #172]	@ (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0f0      	beq.n	8003e4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e6c:	4b28      	ldr	r3, [pc, #160]	@ (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	4925      	ldr	r1, [pc, #148]	@ (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	600b      	str	r3, [r1, #0]
 8003e80:	e015      	b.n	8003eae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e82:	4b24      	ldr	r3, [pc, #144]	@ (8003f14 <HAL_RCC_OscConfig+0x244>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e88:	f7fe f970 	bl	800216c <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e90:	f7fe f96c 	bl	800216c <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e187      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1f0      	bne.n	8003e90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0308 	and.w	r3, r3, #8
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d036      	beq.n	8003f28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d016      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ec2:	4b15      	ldr	r3, [pc, #84]	@ (8003f18 <HAL_RCC_OscConfig+0x248>)
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec8:	f7fe f950 	bl	800216c <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ed0:	f7fe f94c 	bl	800216c <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e167      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8003f10 <HAL_RCC_OscConfig+0x240>)
 8003ee4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0f0      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x200>
 8003eee:	e01b      	b.n	8003f28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ef0:	4b09      	ldr	r3, [pc, #36]	@ (8003f18 <HAL_RCC_OscConfig+0x248>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef6:	f7fe f939 	bl	800216c <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003efc:	e00e      	b.n	8003f1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003efe:	f7fe f935 	bl	800216c <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d907      	bls.n	8003f1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e150      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
 8003f10:	40023800 	.word	0x40023800
 8003f14:	42470000 	.word	0x42470000
 8003f18:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f1c:	4b88      	ldr	r3, [pc, #544]	@ (8004140 <HAL_RCC_OscConfig+0x470>)
 8003f1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1ea      	bne.n	8003efe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 8097 	beq.w	8004064 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f36:	2300      	movs	r3, #0
 8003f38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f3a:	4b81      	ldr	r3, [pc, #516]	@ (8004140 <HAL_RCC_OscConfig+0x470>)
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10f      	bne.n	8003f66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f46:	2300      	movs	r3, #0
 8003f48:	60bb      	str	r3, [r7, #8]
 8003f4a:	4b7d      	ldr	r3, [pc, #500]	@ (8004140 <HAL_RCC_OscConfig+0x470>)
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4e:	4a7c      	ldr	r2, [pc, #496]	@ (8004140 <HAL_RCC_OscConfig+0x470>)
 8003f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f54:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f56:	4b7a      	ldr	r3, [pc, #488]	@ (8004140 <HAL_RCC_OscConfig+0x470>)
 8003f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f5e:	60bb      	str	r3, [r7, #8]
 8003f60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f62:	2301      	movs	r3, #1
 8003f64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f66:	4b77      	ldr	r3, [pc, #476]	@ (8004144 <HAL_RCC_OscConfig+0x474>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d118      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f72:	4b74      	ldr	r3, [pc, #464]	@ (8004144 <HAL_RCC_OscConfig+0x474>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a73      	ldr	r2, [pc, #460]	@ (8004144 <HAL_RCC_OscConfig+0x474>)
 8003f78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f7e:	f7fe f8f5 	bl	800216c <HAL_GetTick>
 8003f82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f84:	e008      	b.n	8003f98 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f86:	f7fe f8f1 	bl	800216c <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e10c      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f98:	4b6a      	ldr	r3, [pc, #424]	@ (8004144 <HAL_RCC_OscConfig+0x474>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0f0      	beq.n	8003f86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d106      	bne.n	8003fba <HAL_RCC_OscConfig+0x2ea>
 8003fac:	4b64      	ldr	r3, [pc, #400]	@ (8004140 <HAL_RCC_OscConfig+0x470>)
 8003fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb0:	4a63      	ldr	r2, [pc, #396]	@ (8004140 <HAL_RCC_OscConfig+0x470>)
 8003fb2:	f043 0301 	orr.w	r3, r3, #1
 8003fb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fb8:	e01c      	b.n	8003ff4 <HAL_RCC_OscConfig+0x324>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	2b05      	cmp	r3, #5
 8003fc0:	d10c      	bne.n	8003fdc <HAL_RCC_OscConfig+0x30c>
 8003fc2:	4b5f      	ldr	r3, [pc, #380]	@ (8004140 <HAL_RCC_OscConfig+0x470>)
 8003fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc6:	4a5e      	ldr	r2, [pc, #376]	@ (8004140 <HAL_RCC_OscConfig+0x470>)
 8003fc8:	f043 0304 	orr.w	r3, r3, #4
 8003fcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fce:	4b5c      	ldr	r3, [pc, #368]	@ (8004140 <HAL_RCC_OscConfig+0x470>)
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd2:	4a5b      	ldr	r2, [pc, #364]	@ (8004140 <HAL_RCC_OscConfig+0x470>)
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fda:	e00b      	b.n	8003ff4 <HAL_RCC_OscConfig+0x324>
 8003fdc:	4b58      	ldr	r3, [pc, #352]	@ (8004140 <HAL_RCC_OscConfig+0x470>)
 8003fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe0:	4a57      	ldr	r2, [pc, #348]	@ (8004140 <HAL_RCC_OscConfig+0x470>)
 8003fe2:	f023 0301 	bic.w	r3, r3, #1
 8003fe6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fe8:	4b55      	ldr	r3, [pc, #340]	@ (8004140 <HAL_RCC_OscConfig+0x470>)
 8003fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fec:	4a54      	ldr	r2, [pc, #336]	@ (8004140 <HAL_RCC_OscConfig+0x470>)
 8003fee:	f023 0304 	bic.w	r3, r3, #4
 8003ff2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d015      	beq.n	8004028 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ffc:	f7fe f8b6 	bl	800216c <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004002:	e00a      	b.n	800401a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004004:	f7fe f8b2 	bl	800216c <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004012:	4293      	cmp	r3, r2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e0cb      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800401a:	4b49      	ldr	r3, [pc, #292]	@ (8004140 <HAL_RCC_OscConfig+0x470>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0ee      	beq.n	8004004 <HAL_RCC_OscConfig+0x334>
 8004026:	e014      	b.n	8004052 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004028:	f7fe f8a0 	bl	800216c <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800402e:	e00a      	b.n	8004046 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004030:	f7fe f89c 	bl	800216c <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800403e:	4293      	cmp	r3, r2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e0b5      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004046:	4b3e      	ldr	r3, [pc, #248]	@ (8004140 <HAL_RCC_OscConfig+0x470>)
 8004048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1ee      	bne.n	8004030 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004052:	7dfb      	ldrb	r3, [r7, #23]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d105      	bne.n	8004064 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004058:	4b39      	ldr	r3, [pc, #228]	@ (8004140 <HAL_RCC_OscConfig+0x470>)
 800405a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405c:	4a38      	ldr	r2, [pc, #224]	@ (8004140 <HAL_RCC_OscConfig+0x470>)
 800405e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004062:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 80a1 	beq.w	80041b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800406e:	4b34      	ldr	r3, [pc, #208]	@ (8004140 <HAL_RCC_OscConfig+0x470>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 030c 	and.w	r3, r3, #12
 8004076:	2b08      	cmp	r3, #8
 8004078:	d05c      	beq.n	8004134 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	2b02      	cmp	r3, #2
 8004080:	d141      	bne.n	8004106 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004082:	4b31      	ldr	r3, [pc, #196]	@ (8004148 <HAL_RCC_OscConfig+0x478>)
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004088:	f7fe f870 	bl	800216c <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004090:	f7fe f86c 	bl	800216c <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e087      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a2:	4b27      	ldr	r3, [pc, #156]	@ (8004140 <HAL_RCC_OscConfig+0x470>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f0      	bne.n	8004090 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69da      	ldr	r2, [r3, #28]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040bc:	019b      	lsls	r3, r3, #6
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c4:	085b      	lsrs	r3, r3, #1
 80040c6:	3b01      	subs	r3, #1
 80040c8:	041b      	lsls	r3, r3, #16
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d0:	061b      	lsls	r3, r3, #24
 80040d2:	491b      	ldr	r1, [pc, #108]	@ (8004140 <HAL_RCC_OscConfig+0x470>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004148 <HAL_RCC_OscConfig+0x478>)
 80040da:	2201      	movs	r2, #1
 80040dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040de:	f7fe f845 	bl	800216c <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e6:	f7fe f841 	bl	800216c <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e05c      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040f8:	4b11      	ldr	r3, [pc, #68]	@ (8004140 <HAL_RCC_OscConfig+0x470>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0f0      	beq.n	80040e6 <HAL_RCC_OscConfig+0x416>
 8004104:	e054      	b.n	80041b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004106:	4b10      	ldr	r3, [pc, #64]	@ (8004148 <HAL_RCC_OscConfig+0x478>)
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800410c:	f7fe f82e 	bl	800216c <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004114:	f7fe f82a 	bl	800216c <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e045      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004126:	4b06      	ldr	r3, [pc, #24]	@ (8004140 <HAL_RCC_OscConfig+0x470>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f0      	bne.n	8004114 <HAL_RCC_OscConfig+0x444>
 8004132:	e03d      	b.n	80041b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d107      	bne.n	800414c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e038      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
 8004140:	40023800 	.word	0x40023800
 8004144:	40007000 	.word	0x40007000
 8004148:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800414c:	4b1b      	ldr	r3, [pc, #108]	@ (80041bc <HAL_RCC_OscConfig+0x4ec>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d028      	beq.n	80041ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004164:	429a      	cmp	r2, r3
 8004166:	d121      	bne.n	80041ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004172:	429a      	cmp	r2, r3
 8004174:	d11a      	bne.n	80041ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800417c:	4013      	ands	r3, r2
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004182:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004184:	4293      	cmp	r3, r2
 8004186:	d111      	bne.n	80041ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004192:	085b      	lsrs	r3, r3, #1
 8004194:	3b01      	subs	r3, #1
 8004196:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004198:	429a      	cmp	r2, r3
 800419a:	d107      	bne.n	80041ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d001      	beq.n	80041b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e000      	b.n	80041b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	40023800 	.word	0x40023800

080041c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e0cc      	b.n	800436e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041d4:	4b68      	ldr	r3, [pc, #416]	@ (8004378 <HAL_RCC_ClockConfig+0x1b8>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d90c      	bls.n	80041fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e2:	4b65      	ldr	r3, [pc, #404]	@ (8004378 <HAL_RCC_ClockConfig+0x1b8>)
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ea:	4b63      	ldr	r3, [pc, #396]	@ (8004378 <HAL_RCC_ClockConfig+0x1b8>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d001      	beq.n	80041fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e0b8      	b.n	800436e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d020      	beq.n	800424a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	d005      	beq.n	8004220 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004214:	4b59      	ldr	r3, [pc, #356]	@ (800437c <HAL_RCC_ClockConfig+0x1bc>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	4a58      	ldr	r2, [pc, #352]	@ (800437c <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800421e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0308 	and.w	r3, r3, #8
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800422c:	4b53      	ldr	r3, [pc, #332]	@ (800437c <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	4a52      	ldr	r2, [pc, #328]	@ (800437c <HAL_RCC_ClockConfig+0x1bc>)
 8004232:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004236:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004238:	4b50      	ldr	r3, [pc, #320]	@ (800437c <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	494d      	ldr	r1, [pc, #308]	@ (800437c <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	4313      	orrs	r3, r2
 8004248:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d044      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d107      	bne.n	800426e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425e:	4b47      	ldr	r3, [pc, #284]	@ (800437c <HAL_RCC_ClockConfig+0x1bc>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d119      	bne.n	800429e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e07f      	b.n	800436e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b02      	cmp	r3, #2
 8004274:	d003      	beq.n	800427e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800427a:	2b03      	cmp	r3, #3
 800427c:	d107      	bne.n	800428e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800427e:	4b3f      	ldr	r3, [pc, #252]	@ (800437c <HAL_RCC_ClockConfig+0x1bc>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d109      	bne.n	800429e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e06f      	b.n	800436e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800428e:	4b3b      	ldr	r3, [pc, #236]	@ (800437c <HAL_RCC_ClockConfig+0x1bc>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e067      	b.n	800436e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800429e:	4b37      	ldr	r3, [pc, #220]	@ (800437c <HAL_RCC_ClockConfig+0x1bc>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f023 0203 	bic.w	r2, r3, #3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	4934      	ldr	r1, [pc, #208]	@ (800437c <HAL_RCC_ClockConfig+0x1bc>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042b0:	f7fd ff5c 	bl	800216c <HAL_GetTick>
 80042b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b6:	e00a      	b.n	80042ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b8:	f7fd ff58 	bl	800216c <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e04f      	b.n	800436e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ce:	4b2b      	ldr	r3, [pc, #172]	@ (800437c <HAL_RCC_ClockConfig+0x1bc>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 020c 	and.w	r2, r3, #12
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	429a      	cmp	r2, r3
 80042de:	d1eb      	bne.n	80042b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042e0:	4b25      	ldr	r3, [pc, #148]	@ (8004378 <HAL_RCC_ClockConfig+0x1b8>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d20c      	bcs.n	8004308 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ee:	4b22      	ldr	r3, [pc, #136]	@ (8004378 <HAL_RCC_ClockConfig+0x1b8>)
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	b2d2      	uxtb	r2, r2
 80042f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f6:	4b20      	ldr	r3, [pc, #128]	@ (8004378 <HAL_RCC_ClockConfig+0x1b8>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0307 	and.w	r3, r3, #7
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	429a      	cmp	r2, r3
 8004302:	d001      	beq.n	8004308 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e032      	b.n	800436e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d008      	beq.n	8004326 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004314:	4b19      	ldr	r3, [pc, #100]	@ (800437c <HAL_RCC_ClockConfig+0x1bc>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	4916      	ldr	r1, [pc, #88]	@ (800437c <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	4313      	orrs	r3, r2
 8004324:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	2b00      	cmp	r3, #0
 8004330:	d009      	beq.n	8004346 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004332:	4b12      	ldr	r3, [pc, #72]	@ (800437c <HAL_RCC_ClockConfig+0x1bc>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	490e      	ldr	r1, [pc, #56]	@ (800437c <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	4313      	orrs	r3, r2
 8004344:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004346:	f000 f821 	bl	800438c <HAL_RCC_GetSysClockFreq>
 800434a:	4602      	mov	r2, r0
 800434c:	4b0b      	ldr	r3, [pc, #44]	@ (800437c <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	091b      	lsrs	r3, r3, #4
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	490a      	ldr	r1, [pc, #40]	@ (8004380 <HAL_RCC_ClockConfig+0x1c0>)
 8004358:	5ccb      	ldrb	r3, [r1, r3]
 800435a:	fa22 f303 	lsr.w	r3, r2, r3
 800435e:	4a09      	ldr	r2, [pc, #36]	@ (8004384 <HAL_RCC_ClockConfig+0x1c4>)
 8004360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004362:	4b09      	ldr	r3, [pc, #36]	@ (8004388 <HAL_RCC_ClockConfig+0x1c8>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f7fd febc 	bl	80020e4 <HAL_InitTick>

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	40023c00 	.word	0x40023c00
 800437c:	40023800 	.word	0x40023800
 8004380:	0800a230 	.word	0x0800a230
 8004384:	20000000 	.word	0x20000000
 8004388:	20000004 	.word	0x20000004

0800438c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800438c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004390:	b090      	sub	sp, #64	@ 0x40
 8004392:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800439c:	2300      	movs	r3, #0
 800439e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043a4:	4b59      	ldr	r3, [pc, #356]	@ (800450c <HAL_RCC_GetSysClockFreq+0x180>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 030c 	and.w	r3, r3, #12
 80043ac:	2b08      	cmp	r3, #8
 80043ae:	d00d      	beq.n	80043cc <HAL_RCC_GetSysClockFreq+0x40>
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	f200 80a1 	bhi.w	80044f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d002      	beq.n	80043c0 <HAL_RCC_GetSysClockFreq+0x34>
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d003      	beq.n	80043c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80043be:	e09b      	b.n	80044f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043c0:	4b53      	ldr	r3, [pc, #332]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x184>)
 80043c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043c4:	e09b      	b.n	80044fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043c6:	4b53      	ldr	r3, [pc, #332]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x188>)
 80043c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043ca:	e098      	b.n	80044fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043cc:	4b4f      	ldr	r3, [pc, #316]	@ (800450c <HAL_RCC_GetSysClockFreq+0x180>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043d6:	4b4d      	ldr	r3, [pc, #308]	@ (800450c <HAL_RCC_GetSysClockFreq+0x180>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d028      	beq.n	8004434 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043e2:	4b4a      	ldr	r3, [pc, #296]	@ (800450c <HAL_RCC_GetSysClockFreq+0x180>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	099b      	lsrs	r3, r3, #6
 80043e8:	2200      	movs	r2, #0
 80043ea:	623b      	str	r3, [r7, #32]
 80043ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80043f4:	2100      	movs	r1, #0
 80043f6:	4b47      	ldr	r3, [pc, #284]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x188>)
 80043f8:	fb03 f201 	mul.w	r2, r3, r1
 80043fc:	2300      	movs	r3, #0
 80043fe:	fb00 f303 	mul.w	r3, r0, r3
 8004402:	4413      	add	r3, r2
 8004404:	4a43      	ldr	r2, [pc, #268]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x188>)
 8004406:	fba0 1202 	umull	r1, r2, r0, r2
 800440a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800440c:	460a      	mov	r2, r1
 800440e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004410:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004412:	4413      	add	r3, r2
 8004414:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004418:	2200      	movs	r2, #0
 800441a:	61bb      	str	r3, [r7, #24]
 800441c:	61fa      	str	r2, [r7, #28]
 800441e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004422:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004426:	f7fc fb29 	bl	8000a7c <__aeabi_uldivmod>
 800442a:	4602      	mov	r2, r0
 800442c:	460b      	mov	r3, r1
 800442e:	4613      	mov	r3, r2
 8004430:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004432:	e053      	b.n	80044dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004434:	4b35      	ldr	r3, [pc, #212]	@ (800450c <HAL_RCC_GetSysClockFreq+0x180>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	099b      	lsrs	r3, r3, #6
 800443a:	2200      	movs	r2, #0
 800443c:	613b      	str	r3, [r7, #16]
 800443e:	617a      	str	r2, [r7, #20]
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004446:	f04f 0b00 	mov.w	fp, #0
 800444a:	4652      	mov	r2, sl
 800444c:	465b      	mov	r3, fp
 800444e:	f04f 0000 	mov.w	r0, #0
 8004452:	f04f 0100 	mov.w	r1, #0
 8004456:	0159      	lsls	r1, r3, #5
 8004458:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800445c:	0150      	lsls	r0, r2, #5
 800445e:	4602      	mov	r2, r0
 8004460:	460b      	mov	r3, r1
 8004462:	ebb2 080a 	subs.w	r8, r2, sl
 8004466:	eb63 090b 	sbc.w	r9, r3, fp
 800446a:	f04f 0200 	mov.w	r2, #0
 800446e:	f04f 0300 	mov.w	r3, #0
 8004472:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004476:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800447a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800447e:	ebb2 0408 	subs.w	r4, r2, r8
 8004482:	eb63 0509 	sbc.w	r5, r3, r9
 8004486:	f04f 0200 	mov.w	r2, #0
 800448a:	f04f 0300 	mov.w	r3, #0
 800448e:	00eb      	lsls	r3, r5, #3
 8004490:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004494:	00e2      	lsls	r2, r4, #3
 8004496:	4614      	mov	r4, r2
 8004498:	461d      	mov	r5, r3
 800449a:	eb14 030a 	adds.w	r3, r4, sl
 800449e:	603b      	str	r3, [r7, #0]
 80044a0:	eb45 030b 	adc.w	r3, r5, fp
 80044a4:	607b      	str	r3, [r7, #4]
 80044a6:	f04f 0200 	mov.w	r2, #0
 80044aa:	f04f 0300 	mov.w	r3, #0
 80044ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044b2:	4629      	mov	r1, r5
 80044b4:	028b      	lsls	r3, r1, #10
 80044b6:	4621      	mov	r1, r4
 80044b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044bc:	4621      	mov	r1, r4
 80044be:	028a      	lsls	r2, r1, #10
 80044c0:	4610      	mov	r0, r2
 80044c2:	4619      	mov	r1, r3
 80044c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044c6:	2200      	movs	r2, #0
 80044c8:	60bb      	str	r3, [r7, #8]
 80044ca:	60fa      	str	r2, [r7, #12]
 80044cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044d0:	f7fc fad4 	bl	8000a7c <__aeabi_uldivmod>
 80044d4:	4602      	mov	r2, r0
 80044d6:	460b      	mov	r3, r1
 80044d8:	4613      	mov	r3, r2
 80044da:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80044dc:	4b0b      	ldr	r3, [pc, #44]	@ (800450c <HAL_RCC_GetSysClockFreq+0x180>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	0c1b      	lsrs	r3, r3, #16
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	3301      	adds	r3, #1
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80044ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80044ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044f6:	e002      	b.n	80044fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044f8:	4b05      	ldr	r3, [pc, #20]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x184>)
 80044fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004500:	4618      	mov	r0, r3
 8004502:	3740      	adds	r7, #64	@ 0x40
 8004504:	46bd      	mov	sp, r7
 8004506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800450a:	bf00      	nop
 800450c:	40023800 	.word	0x40023800
 8004510:	00f42400 	.word	0x00f42400
 8004514:	017d7840 	.word	0x017d7840

08004518 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800451c:	4b03      	ldr	r3, [pc, #12]	@ (800452c <HAL_RCC_GetHCLKFreq+0x14>)
 800451e:	681b      	ldr	r3, [r3, #0]
}
 8004520:	4618      	mov	r0, r3
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	20000000 	.word	0x20000000

08004530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004534:	f7ff fff0 	bl	8004518 <HAL_RCC_GetHCLKFreq>
 8004538:	4602      	mov	r2, r0
 800453a:	4b05      	ldr	r3, [pc, #20]	@ (8004550 <HAL_RCC_GetPCLK1Freq+0x20>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	0a9b      	lsrs	r3, r3, #10
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	4903      	ldr	r1, [pc, #12]	@ (8004554 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004546:	5ccb      	ldrb	r3, [r1, r3]
 8004548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800454c:	4618      	mov	r0, r3
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40023800 	.word	0x40023800
 8004554:	0800a240 	.word	0x0800a240

08004558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800455c:	f7ff ffdc 	bl	8004518 <HAL_RCC_GetHCLKFreq>
 8004560:	4602      	mov	r2, r0
 8004562:	4b05      	ldr	r3, [pc, #20]	@ (8004578 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	0b5b      	lsrs	r3, r3, #13
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	4903      	ldr	r1, [pc, #12]	@ (800457c <HAL_RCC_GetPCLK2Freq+0x24>)
 800456e:	5ccb      	ldrb	r3, [r1, r3]
 8004570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004574:	4618      	mov	r0, r3
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40023800 	.word	0x40023800
 800457c:	0800a240 	.word	0x0800a240

08004580 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e07b      	b.n	800468a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004596:	2b00      	cmp	r3, #0
 8004598:	d108      	bne.n	80045ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045a2:	d009      	beq.n	80045b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	61da      	str	r2, [r3, #28]
 80045aa:	e005      	b.n	80045b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d106      	bne.n	80045d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7fd fc22 	bl	8001e1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004600:	431a      	orrs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	431a      	orrs	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004628:	431a      	orrs	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800463c:	ea42 0103 	orr.w	r1, r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004644:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	0c1b      	lsrs	r3, r3, #16
 8004656:	f003 0104 	and.w	r1, r3, #4
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465e:	f003 0210 	and.w	r2, r3, #16
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	69da      	ldr	r2, [r3, #28]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004678:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b088      	sub	sp, #32
 8004696:	af00      	add	r7, sp, #0
 8004698:	60f8      	str	r0, [r7, #12]
 800469a:	60b9      	str	r1, [r7, #8]
 800469c:	603b      	str	r3, [r7, #0]
 800469e:	4613      	mov	r3, r2
 80046a0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046a2:	f7fd fd63 	bl	800216c <HAL_GetTick>
 80046a6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80046a8:	88fb      	ldrh	r3, [r7, #6]
 80046aa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d001      	beq.n	80046bc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80046b8:	2302      	movs	r3, #2
 80046ba:	e12a      	b.n	8004912 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <HAL_SPI_Transmit+0x36>
 80046c2:	88fb      	ldrh	r3, [r7, #6]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e122      	b.n	8004912 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d101      	bne.n	80046da <HAL_SPI_Transmit+0x48>
 80046d6:	2302      	movs	r3, #2
 80046d8:	e11b      	b.n	8004912 <HAL_SPI_Transmit+0x280>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2203      	movs	r2, #3
 80046e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	88fa      	ldrh	r2, [r7, #6]
 80046fa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	88fa      	ldrh	r2, [r7, #6]
 8004700:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004728:	d10f      	bne.n	800474a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004738:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004748:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004754:	2b40      	cmp	r3, #64	@ 0x40
 8004756:	d007      	beq.n	8004768 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004766:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004770:	d152      	bne.n	8004818 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d002      	beq.n	8004780 <HAL_SPI_Transmit+0xee>
 800477a:	8b7b      	ldrh	r3, [r7, #26]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d145      	bne.n	800480c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004784:	881a      	ldrh	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004790:	1c9a      	adds	r2, r3, #2
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800479a:	b29b      	uxth	r3, r3
 800479c:	3b01      	subs	r3, #1
 800479e:	b29a      	uxth	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80047a4:	e032      	b.n	800480c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d112      	bne.n	80047da <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b8:	881a      	ldrh	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c4:	1c9a      	adds	r2, r3, #2
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	3b01      	subs	r3, #1
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80047d8:	e018      	b.n	800480c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047da:	f7fd fcc7 	bl	800216c <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d803      	bhi.n	80047f2 <HAL_SPI_Transmit+0x160>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f0:	d102      	bne.n	80047f8 <HAL_SPI_Transmit+0x166>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d109      	bne.n	800480c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e082      	b.n	8004912 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004810:	b29b      	uxth	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1c7      	bne.n	80047a6 <HAL_SPI_Transmit+0x114>
 8004816:	e053      	b.n	80048c0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <HAL_SPI_Transmit+0x194>
 8004820:	8b7b      	ldrh	r3, [r7, #26]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d147      	bne.n	80048b6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	330c      	adds	r3, #12
 8004830:	7812      	ldrb	r2, [r2, #0]
 8004832:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004842:	b29b      	uxth	r3, r3
 8004844:	3b01      	subs	r3, #1
 8004846:	b29a      	uxth	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800484c:	e033      	b.n	80048b6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b02      	cmp	r3, #2
 800485a:	d113      	bne.n	8004884 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	330c      	adds	r3, #12
 8004866:	7812      	ldrb	r2, [r2, #0]
 8004868:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800486e:	1c5a      	adds	r2, r3, #1
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004878:	b29b      	uxth	r3, r3
 800487a:	3b01      	subs	r3, #1
 800487c:	b29a      	uxth	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004882:	e018      	b.n	80048b6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004884:	f7fd fc72 	bl	800216c <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	429a      	cmp	r2, r3
 8004892:	d803      	bhi.n	800489c <HAL_SPI_Transmit+0x20a>
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489a:	d102      	bne.n	80048a2 <HAL_SPI_Transmit+0x210>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d109      	bne.n	80048b6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e02d      	b.n	8004912 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1c6      	bne.n	800484e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048c0:	69fa      	ldr	r2, [r7, #28]
 80048c2:	6839      	ldr	r1, [r7, #0]
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f000 fbe7 	bl	8005098 <SPI_EndRxTxTransaction>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2220      	movs	r2, #32
 80048d4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10a      	bne.n	80048f4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048de:	2300      	movs	r3, #0
 80048e0:	617b      	str	r3, [r7, #20]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	617b      	str	r3, [r7, #20]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	617b      	str	r3, [r7, #20]
 80048f2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e000      	b.n	8004912 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004910:	2300      	movs	r3, #0
  }
}
 8004912:	4618      	mov	r0, r3
 8004914:	3720      	adds	r7, #32
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b088      	sub	sp, #32
 800491e:	af02      	add	r7, sp, #8
 8004920:	60f8      	str	r0, [r7, #12]
 8004922:	60b9      	str	r1, [r7, #8]
 8004924:	603b      	str	r3, [r7, #0]
 8004926:	4613      	mov	r3, r2
 8004928:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b01      	cmp	r3, #1
 8004934:	d001      	beq.n	800493a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004936:	2302      	movs	r3, #2
 8004938:	e104      	b.n	8004b44 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004942:	d112      	bne.n	800496a <HAL_SPI_Receive+0x50>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10e      	bne.n	800496a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2204      	movs	r2, #4
 8004950:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004954:	88fa      	ldrh	r2, [r7, #6]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	4613      	mov	r3, r2
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	68b9      	ldr	r1, [r7, #8]
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 f8f3 	bl	8004b4c <HAL_SPI_TransmitReceive>
 8004966:	4603      	mov	r3, r0
 8004968:	e0ec      	b.n	8004b44 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800496a:	f7fd fbff 	bl	800216c <HAL_GetTick>
 800496e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d002      	beq.n	800497c <HAL_SPI_Receive+0x62>
 8004976:	88fb      	ldrh	r3, [r7, #6]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e0e1      	b.n	8004b44 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004986:	2b01      	cmp	r3, #1
 8004988:	d101      	bne.n	800498e <HAL_SPI_Receive+0x74>
 800498a:	2302      	movs	r3, #2
 800498c:	e0da      	b.n	8004b44 <HAL_SPI_Receive+0x22a>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2204      	movs	r2, #4
 800499a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	88fa      	ldrh	r2, [r7, #6]
 80049ae:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	88fa      	ldrh	r2, [r7, #6]
 80049b4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049dc:	d10f      	bne.n	80049fe <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80049fc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a08:	2b40      	cmp	r3, #64	@ 0x40
 8004a0a:	d007      	beq.n	8004a1c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a1a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d170      	bne.n	8004b06 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004a24:	e035      	b.n	8004a92 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d115      	bne.n	8004a60 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f103 020c 	add.w	r2, r3, #12
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a40:	7812      	ldrb	r2, [r2, #0]
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a4a:	1c5a      	adds	r2, r3, #1
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	3b01      	subs	r3, #1
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a5e:	e018      	b.n	8004a92 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a60:	f7fd fb84 	bl	800216c <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d803      	bhi.n	8004a78 <HAL_SPI_Receive+0x15e>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a76:	d102      	bne.n	8004a7e <HAL_SPI_Receive+0x164>
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d109      	bne.n	8004a92 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e058      	b.n	8004b44 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1c4      	bne.n	8004a26 <HAL_SPI_Receive+0x10c>
 8004a9c:	e038      	b.n	8004b10 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d113      	bne.n	8004ad4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab6:	b292      	uxth	r2, r2
 8004ab8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004abe:	1c9a      	adds	r2, r3, #2
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	3b01      	subs	r3, #1
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ad2:	e018      	b.n	8004b06 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ad4:	f7fd fb4a 	bl	800216c <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d803      	bhi.n	8004aec <HAL_SPI_Receive+0x1d2>
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aea:	d102      	bne.n	8004af2 <HAL_SPI_Receive+0x1d8>
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d109      	bne.n	8004b06 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e01e      	b.n	8004b44 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1c6      	bne.n	8004a9e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	6839      	ldr	r1, [r7, #0]
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 fa59 	bl	8004fcc <SPI_EndRxTransaction>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d002      	beq.n	8004b26 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2220      	movs	r2, #32
 8004b24:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e000      	b.n	8004b44 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004b42:	2300      	movs	r3, #0
  }
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b08a      	sub	sp, #40	@ 0x28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
 8004b58:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b5e:	f7fd fb05 	bl	800216c <HAL_GetTick>
 8004b62:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b6a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004b72:	887b      	ldrh	r3, [r7, #2]
 8004b74:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b76:	7ffb      	ldrb	r3, [r7, #31]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d00c      	beq.n	8004b96 <HAL_SPI_TransmitReceive+0x4a>
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b82:	d106      	bne.n	8004b92 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d102      	bne.n	8004b92 <HAL_SPI_TransmitReceive+0x46>
 8004b8c:	7ffb      	ldrb	r3, [r7, #31]
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d001      	beq.n	8004b96 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004b92:	2302      	movs	r3, #2
 8004b94:	e17f      	b.n	8004e96 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d005      	beq.n	8004ba8 <HAL_SPI_TransmitReceive+0x5c>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d002      	beq.n	8004ba8 <HAL_SPI_TransmitReceive+0x5c>
 8004ba2:	887b      	ldrh	r3, [r7, #2]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d101      	bne.n	8004bac <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e174      	b.n	8004e96 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d101      	bne.n	8004bba <HAL_SPI_TransmitReceive+0x6e>
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	e16d      	b.n	8004e96 <HAL_SPI_TransmitReceive+0x34a>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d003      	beq.n	8004bd6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2205      	movs	r2, #5
 8004bd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	887a      	ldrh	r2, [r7, #2]
 8004be6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	887a      	ldrh	r2, [r7, #2]
 8004bec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	887a      	ldrh	r2, [r7, #2]
 8004bf8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	887a      	ldrh	r2, [r7, #2]
 8004bfe:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c16:	2b40      	cmp	r3, #64	@ 0x40
 8004c18:	d007      	beq.n	8004c2a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c32:	d17e      	bne.n	8004d32 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <HAL_SPI_TransmitReceive+0xf6>
 8004c3c:	8afb      	ldrh	r3, [r7, #22]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d16c      	bne.n	8004d1c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c46:	881a      	ldrh	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c52:	1c9a      	adds	r2, r3, #2
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c66:	e059      	b.n	8004d1c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d11b      	bne.n	8004cae <HAL_SPI_TransmitReceive+0x162>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d016      	beq.n	8004cae <HAL_SPI_TransmitReceive+0x162>
 8004c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d113      	bne.n	8004cae <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8a:	881a      	ldrh	r2, [r3, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c96:	1c9a      	adds	r2, r3, #2
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d119      	bne.n	8004cf0 <HAL_SPI_TransmitReceive+0x1a4>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d014      	beq.n	8004cf0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68da      	ldr	r2, [r3, #12]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd0:	b292      	uxth	r2, r2
 8004cd2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd8:	1c9a      	adds	r2, r3, #2
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cec:	2301      	movs	r3, #1
 8004cee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004cf0:	f7fd fa3c 	bl	800216c <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d80d      	bhi.n	8004d1c <HAL_SPI_TransmitReceive+0x1d0>
 8004d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d06:	d009      	beq.n	8004d1c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e0bc      	b.n	8004e96 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1a0      	bne.n	8004c68 <HAL_SPI_TransmitReceive+0x11c>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d19b      	bne.n	8004c68 <HAL_SPI_TransmitReceive+0x11c>
 8004d30:	e082      	b.n	8004e38 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d002      	beq.n	8004d40 <HAL_SPI_TransmitReceive+0x1f4>
 8004d3a:	8afb      	ldrh	r3, [r7, #22]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d171      	bne.n	8004e24 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	330c      	adds	r3, #12
 8004d4a:	7812      	ldrb	r2, [r2, #0]
 8004d4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d52:	1c5a      	adds	r2, r3, #1
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d66:	e05d      	b.n	8004e24 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d11c      	bne.n	8004db0 <HAL_SPI_TransmitReceive+0x264>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d017      	beq.n	8004db0 <HAL_SPI_TransmitReceive+0x264>
 8004d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d114      	bne.n	8004db0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	330c      	adds	r3, #12
 8004d90:	7812      	ldrb	r2, [r2, #0]
 8004d92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d98:	1c5a      	adds	r2, r3, #1
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	3b01      	subs	r3, #1
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d119      	bne.n	8004df2 <HAL_SPI_TransmitReceive+0x2a6>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d014      	beq.n	8004df2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	3b01      	subs	r3, #1
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004dee:	2301      	movs	r3, #1
 8004df0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004df2:	f7fd f9bb 	bl	800216c <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d803      	bhi.n	8004e0a <HAL_SPI_TransmitReceive+0x2be>
 8004e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e08:	d102      	bne.n	8004e10 <HAL_SPI_TransmitReceive+0x2c4>
 8004e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d109      	bne.n	8004e24 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e038      	b.n	8004e96 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d19c      	bne.n	8004d68 <HAL_SPI_TransmitReceive+0x21c>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d197      	bne.n	8004d68 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e38:	6a3a      	ldr	r2, [r7, #32]
 8004e3a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f000 f92b 	bl	8005098 <SPI_EndRxTxTransaction>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d008      	beq.n	8004e5a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e01d      	b.n	8004e96 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10a      	bne.n	8004e78 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e62:	2300      	movs	r3, #0
 8004e64:	613b      	str	r3, [r7, #16]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	613b      	str	r3, [r7, #16]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	613b      	str	r3, [r7, #16]
 8004e76:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e000      	b.n	8004e96 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004e94:	2300      	movs	r3, #0
  }
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3728      	adds	r7, #40	@ 0x28
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004eac:	b2db      	uxtb	r3, r3
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
	...

08004ebc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b088      	sub	sp, #32
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	603b      	str	r3, [r7, #0]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ecc:	f7fd f94e 	bl	800216c <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed4:	1a9b      	subs	r3, r3, r2
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	4413      	add	r3, r2
 8004eda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004edc:	f7fd f946 	bl	800216c <HAL_GetTick>
 8004ee0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ee2:	4b39      	ldr	r3, [pc, #228]	@ (8004fc8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	015b      	lsls	r3, r3, #5
 8004ee8:	0d1b      	lsrs	r3, r3, #20
 8004eea:	69fa      	ldr	r2, [r7, #28]
 8004eec:	fb02 f303 	mul.w	r3, r2, r3
 8004ef0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ef2:	e054      	b.n	8004f9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efa:	d050      	beq.n	8004f9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004efc:	f7fd f936 	bl	800216c <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	69fa      	ldr	r2, [r7, #28]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d902      	bls.n	8004f12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d13d      	bne.n	8004f8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	685a      	ldr	r2, [r3, #4]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f2a:	d111      	bne.n	8004f50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f34:	d004      	beq.n	8004f40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f3e:	d107      	bne.n	8004f50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f58:	d10f      	bne.n	8004f7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e017      	b.n	8004fbe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	68ba      	ldr	r2, [r7, #8]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	bf0c      	ite	eq
 8004fae:	2301      	moveq	r3, #1
 8004fb0:	2300      	movne	r3, #0
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	79fb      	ldrb	r3, [r7, #7]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d19b      	bne.n	8004ef4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3720      	adds	r7, #32
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20000000 	.word	0x20000000

08004fcc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af02      	add	r7, sp, #8
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fe0:	d111      	bne.n	8005006 <SPI_EndRxTransaction+0x3a>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fea:	d004      	beq.n	8004ff6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ff4:	d107      	bne.n	8005006 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005004:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800500e:	d12a      	bne.n	8005066 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005018:	d012      	beq.n	8005040 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	2200      	movs	r2, #0
 8005022:	2180      	movs	r1, #128	@ 0x80
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f7ff ff49 	bl	8004ebc <SPI_WaitFlagStateUntilTimeout>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d02d      	beq.n	800508c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005034:	f043 0220 	orr.w	r2, r3, #32
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e026      	b.n	800508e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	2200      	movs	r2, #0
 8005048:	2101      	movs	r1, #1
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f7ff ff36 	bl	8004ebc <SPI_WaitFlagStateUntilTimeout>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d01a      	beq.n	800508c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800505a:	f043 0220 	orr.w	r2, r3, #32
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e013      	b.n	800508e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2200      	movs	r2, #0
 800506e:	2101      	movs	r1, #1
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f7ff ff23 	bl	8004ebc <SPI_WaitFlagStateUntilTimeout>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d007      	beq.n	800508c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005080:	f043 0220 	orr.w	r2, r3, #32
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e000      	b.n	800508e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
	...

08005098 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b088      	sub	sp, #32
 800509c:	af02      	add	r7, sp, #8
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	2201      	movs	r2, #1
 80050ac:	2102      	movs	r1, #2
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f7ff ff04 	bl	8004ebc <SPI_WaitFlagStateUntilTimeout>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d007      	beq.n	80050ca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050be:	f043 0220 	orr.w	r2, r3, #32
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e032      	b.n	8005130 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80050ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005138 <SPI_EndRxTxTransaction+0xa0>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a1b      	ldr	r2, [pc, #108]	@ (800513c <SPI_EndRxTxTransaction+0xa4>)
 80050d0:	fba2 2303 	umull	r2, r3, r2, r3
 80050d4:	0d5b      	lsrs	r3, r3, #21
 80050d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80050da:	fb02 f303 	mul.w	r3, r2, r3
 80050de:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050e8:	d112      	bne.n	8005110 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	2200      	movs	r2, #0
 80050f2:	2180      	movs	r1, #128	@ 0x80
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f7ff fee1 	bl	8004ebc <SPI_WaitFlagStateUntilTimeout>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d016      	beq.n	800512e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005104:	f043 0220 	orr.w	r2, r3, #32
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e00f      	b.n	8005130 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	3b01      	subs	r3, #1
 800511a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005126:	2b80      	cmp	r3, #128	@ 0x80
 8005128:	d0f2      	beq.n	8005110 <SPI_EndRxTxTransaction+0x78>
 800512a:	e000      	b.n	800512e <SPI_EndRxTxTransaction+0x96>
        break;
 800512c:	bf00      	nop
  }

  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3718      	adds	r7, #24
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	20000000 	.word	0x20000000
 800513c:	165e9f81 	.word	0x165e9f81

08005140 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e033      	b.n	80051ba <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d106      	bne.n	800516c <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7fc fea0 	bl	8001eac <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f825 	bl	80051c4 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	691a      	ldr	r2, [r3, #16]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005188:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	695a      	ldr	r2, [r3, #20]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005198:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68da      	ldr	r2, [r3, #12]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051a8:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	641a      	str	r2, [r3, #64]	@ 0x40
  husart->State = HAL_USART_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
	...

080051c4 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 80051c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051c8:	b0c6      	sub	sp, #280	@ 0x118
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg = 0x00U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80051d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68d9      	ldr	r1, [r3, #12]
 80051de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	f021 030c 	bic.w	r3, r1, #12
 80051e8:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 80051ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 80051f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051fa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80051fe:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8005202:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005206:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8005208:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800520c:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800520e:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8005210:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	431a      	orrs	r2, r3
 8005218:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800521c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800521e:	431a      	orrs	r2, r3
 8005220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005224:	4313      	orrs	r3, r2
 8005226:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800522a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 800522e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005238:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 800523a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8005246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800524a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800524e:	f023 030c 	bic.w	r3, r3, #12
 8005252:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8005256:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	431a      	orrs	r2, r3
 8005264:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	431a      	orrs	r2, r3
 800526c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005270:	4313      	orrs	r3, r2
 8005272:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005276:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 800527a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005284:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8005286:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6959      	ldr	r1, [r3, #20]
 800528e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
 8005298:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 800529a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	4b8b      	ldr	r3, [pc, #556]	@ (80054d0 <USART_SetConfig+0x30c>)
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d006      	beq.n	80052b4 <USART_SetConfig+0xf0>
 80052a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	4b89      	ldr	r3, [pc, #548]	@ (80054d4 <USART_SetConfig+0x310>)
 80052ae:	429a      	cmp	r2, r3
 80052b0:	f040 8114 	bne.w	80054dc <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80052b4:	f7ff f950 	bl	8004558 <HAL_RCC_GetPCLK2Freq>
 80052b8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80052bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80052c0:	2200      	movs	r2, #0
 80052c2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80052c6:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 80052ca:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80052ce:	4622      	mov	r2, r4
 80052d0:	462b      	mov	r3, r5
 80052d2:	1891      	adds	r1, r2, r2
 80052d4:	6739      	str	r1, [r7, #112]	@ 0x70
 80052d6:	415b      	adcs	r3, r3
 80052d8:	677b      	str	r3, [r7, #116]	@ 0x74
 80052da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80052de:	4621      	mov	r1, r4
 80052e0:	eb12 0801 	adds.w	r8, r2, r1
 80052e4:	4629      	mov	r1, r5
 80052e6:	eb43 0901 	adc.w	r9, r3, r1
 80052ea:	f04f 0200 	mov.w	r2, #0
 80052ee:	f04f 0300 	mov.w	r3, #0
 80052f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052fe:	4690      	mov	r8, r2
 8005300:	4699      	mov	r9, r3
 8005302:	4623      	mov	r3, r4
 8005304:	eb18 0303 	adds.w	r3, r8, r3
 8005308:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800530c:	462b      	mov	r3, r5
 800530e:	eb49 0303 	adc.w	r3, r9, r3
 8005312:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005316:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005322:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8005326:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800532a:	460b      	mov	r3, r1
 800532c:	18db      	adds	r3, r3, r3
 800532e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005330:	4613      	mov	r3, r2
 8005332:	eb42 0303 	adc.w	r3, r2, r3
 8005336:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005338:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800533c:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8005340:	f7fb fb9c 	bl	8000a7c <__aeabi_uldivmod>
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	4b63      	ldr	r3, [pc, #396]	@ (80054d8 <USART_SetConfig+0x314>)
 800534a:	fba3 2302 	umull	r2, r3, r3, r2
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	011c      	lsls	r4, r3, #4
 8005352:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005356:	2200      	movs	r2, #0
 8005358:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800535c:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005360:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8005364:	4642      	mov	r2, r8
 8005366:	464b      	mov	r3, r9
 8005368:	1891      	adds	r1, r2, r2
 800536a:	6639      	str	r1, [r7, #96]	@ 0x60
 800536c:	415b      	adcs	r3, r3
 800536e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005370:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8005374:	4641      	mov	r1, r8
 8005376:	1851      	adds	r1, r2, r1
 8005378:	65b9      	str	r1, [r7, #88]	@ 0x58
 800537a:	4649      	mov	r1, r9
 800537c:	414b      	adcs	r3, r1
 800537e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005380:	f04f 0200 	mov.w	r2, #0
 8005384:	f04f 0300 	mov.w	r3, #0
 8005388:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 800538c:	4659      	mov	r1, fp
 800538e:	00cb      	lsls	r3, r1, #3
 8005390:	4651      	mov	r1, sl
 8005392:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005396:	4651      	mov	r1, sl
 8005398:	00ca      	lsls	r2, r1, #3
 800539a:	4610      	mov	r0, r2
 800539c:	4619      	mov	r1, r3
 800539e:	4603      	mov	r3, r0
 80053a0:	4642      	mov	r2, r8
 80053a2:	189b      	adds	r3, r3, r2
 80053a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80053a8:	464b      	mov	r3, r9
 80053aa:	460a      	mov	r2, r1
 80053ac:	eb42 0303 	adc.w	r3, r2, r3
 80053b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80053b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80053c0:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80053c4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80053c8:	460b      	mov	r3, r1
 80053ca:	18db      	adds	r3, r3, r3
 80053cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80053ce:	4613      	mov	r3, r2
 80053d0:	eb42 0303 	adc.w	r3, r2, r3
 80053d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80053d6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80053da:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80053de:	f7fb fb4d 	bl	8000a7c <__aeabi_uldivmod>
 80053e2:	4602      	mov	r2, r0
 80053e4:	460b      	mov	r3, r1
 80053e6:	4611      	mov	r1, r2
 80053e8:	4b3b      	ldr	r3, [pc, #236]	@ (80054d8 <USART_SetConfig+0x314>)
 80053ea:	fba3 2301 	umull	r2, r3, r3, r1
 80053ee:	095b      	lsrs	r3, r3, #5
 80053f0:	2264      	movs	r2, #100	@ 0x64
 80053f2:	fb02 f303 	mul.w	r3, r2, r3
 80053f6:	1acb      	subs	r3, r1, r3
 80053f8:	00db      	lsls	r3, r3, #3
 80053fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80053fe:	4b36      	ldr	r3, [pc, #216]	@ (80054d8 <USART_SetConfig+0x314>)
 8005400:	fba3 2302 	umull	r2, r3, r3, r2
 8005404:	095b      	lsrs	r3, r3, #5
 8005406:	005b      	lsls	r3, r3, #1
 8005408:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800540c:	441c      	add	r4, r3
 800540e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005412:	2200      	movs	r2, #0
 8005414:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005418:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800541c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005420:	4642      	mov	r2, r8
 8005422:	464b      	mov	r3, r9
 8005424:	1891      	adds	r1, r2, r2
 8005426:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005428:	415b      	adcs	r3, r3
 800542a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800542c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005430:	4641      	mov	r1, r8
 8005432:	1851      	adds	r1, r2, r1
 8005434:	6439      	str	r1, [r7, #64]	@ 0x40
 8005436:	4649      	mov	r1, r9
 8005438:	414b      	adcs	r3, r1
 800543a:	647b      	str	r3, [r7, #68]	@ 0x44
 800543c:	f04f 0200 	mov.w	r2, #0
 8005440:	f04f 0300 	mov.w	r3, #0
 8005444:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	@ 0x40
 8005448:	4659      	mov	r1, fp
 800544a:	00cb      	lsls	r3, r1, #3
 800544c:	4651      	mov	r1, sl
 800544e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005452:	4651      	mov	r1, sl
 8005454:	00ca      	lsls	r2, r1, #3
 8005456:	4610      	mov	r0, r2
 8005458:	4619      	mov	r1, r3
 800545a:	4603      	mov	r3, r0
 800545c:	4642      	mov	r2, r8
 800545e:	189b      	adds	r3, r3, r2
 8005460:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005464:	464b      	mov	r3, r9
 8005466:	460a      	mov	r2, r1
 8005468:	eb42 0303 	adc.w	r3, r2, r3
 800546c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005470:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800547c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005480:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005484:	460b      	mov	r3, r1
 8005486:	18db      	adds	r3, r3, r3
 8005488:	63bb      	str	r3, [r7, #56]	@ 0x38
 800548a:	4613      	mov	r3, r2
 800548c:	eb42 0303 	adc.w	r3, r2, r3
 8005490:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005492:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005496:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800549a:	f7fb faef 	bl	8000a7c <__aeabi_uldivmod>
 800549e:	4602      	mov	r2, r0
 80054a0:	460b      	mov	r3, r1
 80054a2:	4b0d      	ldr	r3, [pc, #52]	@ (80054d8 <USART_SetConfig+0x314>)
 80054a4:	fba3 1302 	umull	r1, r3, r3, r2
 80054a8:	095b      	lsrs	r3, r3, #5
 80054aa:	2164      	movs	r1, #100	@ 0x64
 80054ac:	fb01 f303 	mul.w	r3, r1, r3
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	3332      	adds	r3, #50	@ 0x32
 80054b6:	4a08      	ldr	r2, [pc, #32]	@ (80054d8 <USART_SetConfig+0x314>)
 80054b8:	fba2 2303 	umull	r2, r3, r2, r3
 80054bc:	095b      	lsrs	r3, r3, #5
 80054be:	f003 0207 	and.w	r2, r3, #7
 80054c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4422      	add	r2, r4
 80054ca:	609a      	str	r2, [r3, #8]
 80054cc:	e109      	b.n	80056e2 <USART_SetConfig+0x51e>
 80054ce:	bf00      	nop
 80054d0:	40011000 	.word	0x40011000
 80054d4:	40011400 	.word	0x40011400
 80054d8:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80054dc:	f7ff f828 	bl	8004530 <HAL_RCC_GetPCLK1Freq>
 80054e0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80054e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80054e8:	2200      	movs	r2, #0
 80054ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054ee:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80054f2:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80054f6:	4642      	mov	r2, r8
 80054f8:	464b      	mov	r3, r9
 80054fa:	1891      	adds	r1, r2, r2
 80054fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80054fe:	415b      	adcs	r3, r3
 8005500:	637b      	str	r3, [r7, #52]	@ 0x34
 8005502:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8005506:	4641      	mov	r1, r8
 8005508:	1854      	adds	r4, r2, r1
 800550a:	4649      	mov	r1, r9
 800550c:	eb43 0501 	adc.w	r5, r3, r1
 8005510:	f04f 0200 	mov.w	r2, #0
 8005514:	f04f 0300 	mov.w	r3, #0
 8005518:	00eb      	lsls	r3, r5, #3
 800551a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800551e:	00e2      	lsls	r2, r4, #3
 8005520:	4614      	mov	r4, r2
 8005522:	461d      	mov	r5, r3
 8005524:	4643      	mov	r3, r8
 8005526:	18e3      	adds	r3, r4, r3
 8005528:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800552c:	464b      	mov	r3, r9
 800552e:	eb45 0303 	adc.w	r3, r5, r3
 8005532:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005536:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005542:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005546:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800554a:	460b      	mov	r3, r1
 800554c:	18db      	adds	r3, r3, r3
 800554e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005550:	4613      	mov	r3, r2
 8005552:	eb42 0303 	adc.w	r3, r2, r3
 8005556:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005558:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800555c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005560:	f7fb fa8c 	bl	8000a7c <__aeabi_uldivmod>
 8005564:	4602      	mov	r2, r0
 8005566:	460b      	mov	r3, r1
 8005568:	4b61      	ldr	r3, [pc, #388]	@ (80056f0 <USART_SetConfig+0x52c>)
 800556a:	fba3 2302 	umull	r2, r3, r3, r2
 800556e:	095b      	lsrs	r3, r3, #5
 8005570:	011c      	lsls	r4, r3, #4
 8005572:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005576:	2200      	movs	r2, #0
 8005578:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800557c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005580:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005584:	4642      	mov	r2, r8
 8005586:	464b      	mov	r3, r9
 8005588:	1891      	adds	r1, r2, r2
 800558a:	6239      	str	r1, [r7, #32]
 800558c:	415b      	adcs	r3, r3
 800558e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005590:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005594:	4641      	mov	r1, r8
 8005596:	eb12 0a01 	adds.w	sl, r2, r1
 800559a:	4649      	mov	r1, r9
 800559c:	eb43 0b01 	adc.w	fp, r3, r1
 80055a0:	f04f 0200 	mov.w	r2, #0
 80055a4:	f04f 0300 	mov.w	r3, #0
 80055a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055b4:	4692      	mov	sl, r2
 80055b6:	469b      	mov	fp, r3
 80055b8:	4643      	mov	r3, r8
 80055ba:	eb1a 0303 	adds.w	r3, sl, r3
 80055be:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80055c2:	464b      	mov	r3, r9
 80055c4:	eb4b 0303 	adc.w	r3, fp, r3
 80055c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80055cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055d8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80055dc:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80055e0:	460b      	mov	r3, r1
 80055e2:	18db      	adds	r3, r3, r3
 80055e4:	61bb      	str	r3, [r7, #24]
 80055e6:	4613      	mov	r3, r2
 80055e8:	eb42 0303 	adc.w	r3, r2, r3
 80055ec:	61fb      	str	r3, [r7, #28]
 80055ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055f2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80055f6:	f7fb fa41 	bl	8000a7c <__aeabi_uldivmod>
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	4611      	mov	r1, r2
 8005600:	4b3b      	ldr	r3, [pc, #236]	@ (80056f0 <USART_SetConfig+0x52c>)
 8005602:	fba3 2301 	umull	r2, r3, r3, r1
 8005606:	095b      	lsrs	r3, r3, #5
 8005608:	2264      	movs	r2, #100	@ 0x64
 800560a:	fb02 f303 	mul.w	r3, r2, r3
 800560e:	1acb      	subs	r3, r1, r3
 8005610:	00db      	lsls	r3, r3, #3
 8005612:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005616:	4b36      	ldr	r3, [pc, #216]	@ (80056f0 <USART_SetConfig+0x52c>)
 8005618:	fba3 2302 	umull	r2, r3, r3, r2
 800561c:	095b      	lsrs	r3, r3, #5
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005624:	441c      	add	r4, r3
 8005626:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800562a:	2200      	movs	r2, #0
 800562c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005630:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005634:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005638:	4642      	mov	r2, r8
 800563a:	464b      	mov	r3, r9
 800563c:	1891      	adds	r1, r2, r2
 800563e:	6139      	str	r1, [r7, #16]
 8005640:	415b      	adcs	r3, r3
 8005642:	617b      	str	r3, [r7, #20]
 8005644:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005648:	4641      	mov	r1, r8
 800564a:	1851      	adds	r1, r2, r1
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	4649      	mov	r1, r9
 8005650:	414b      	adcs	r3, r1
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	f04f 0200 	mov.w	r2, #0
 8005658:	f04f 0300 	mov.w	r3, #0
 800565c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005660:	4659      	mov	r1, fp
 8005662:	00cb      	lsls	r3, r1, #3
 8005664:	4651      	mov	r1, sl
 8005666:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800566a:	4651      	mov	r1, sl
 800566c:	00ca      	lsls	r2, r1, #3
 800566e:	4610      	mov	r0, r2
 8005670:	4619      	mov	r1, r3
 8005672:	4603      	mov	r3, r0
 8005674:	4642      	mov	r2, r8
 8005676:	189b      	adds	r3, r3, r2
 8005678:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800567c:	464b      	mov	r3, r9
 800567e:	460a      	mov	r2, r1
 8005680:	eb42 0303 	adc.w	r3, r2, r3
 8005684:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005688:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005692:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005694:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005698:	460b      	mov	r3, r1
 800569a:	18db      	adds	r3, r3, r3
 800569c:	603b      	str	r3, [r7, #0]
 800569e:	4613      	mov	r3, r2
 80056a0:	eb42 0303 	adc.w	r3, r2, r3
 80056a4:	607b      	str	r3, [r7, #4]
 80056a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80056ae:	f7fb f9e5 	bl	8000a7c <__aeabi_uldivmod>
 80056b2:	4602      	mov	r2, r0
 80056b4:	460b      	mov	r3, r1
 80056b6:	4b0e      	ldr	r3, [pc, #56]	@ (80056f0 <USART_SetConfig+0x52c>)
 80056b8:	fba3 1302 	umull	r1, r3, r3, r2
 80056bc:	095b      	lsrs	r3, r3, #5
 80056be:	2164      	movs	r1, #100	@ 0x64
 80056c0:	fb01 f303 	mul.w	r3, r1, r3
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	00db      	lsls	r3, r3, #3
 80056c8:	3332      	adds	r3, #50	@ 0x32
 80056ca:	4a09      	ldr	r2, [pc, #36]	@ (80056f0 <USART_SetConfig+0x52c>)
 80056cc:	fba2 2303 	umull	r2, r3, r2, r3
 80056d0:	095b      	lsrs	r3, r3, #5
 80056d2:	f003 0207 	and.w	r2, r3, #7
 80056d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4422      	add	r2, r4
 80056de:	609a      	str	r2, [r3, #8]
  }
}
 80056e0:	bf00      	nop
 80056e2:	bf00      	nop
 80056e4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80056e8:	46bd      	mov	sp, r7
 80056ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056ee:	bf00      	nop
 80056f0:	51eb851f 	.word	0x51eb851f

080056f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056f4:	b084      	sub	sp, #16
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b084      	sub	sp, #16
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	f107 001c 	add.w	r0, r7, #28
 8005702:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005706:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800570a:	2b01      	cmp	r3, #1
 800570c:	d123      	bne.n	8005756 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005712:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005722:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005736:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800573a:	2b01      	cmp	r3, #1
 800573c:	d105      	bne.n	800574a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f001 fae8 	bl	8006d20 <USB_CoreReset>
 8005750:	4603      	mov	r3, r0
 8005752:	73fb      	strb	r3, [r7, #15]
 8005754:	e01b      	b.n	800578e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f001 fadc 	bl	8006d20 <USB_CoreReset>
 8005768:	4603      	mov	r3, r0
 800576a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800576c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005770:	2b00      	cmp	r3, #0
 8005772:	d106      	bne.n	8005782 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005778:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005780:	e005      	b.n	800578e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005786:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800578e:	7fbb      	ldrb	r3, [r7, #30]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d10b      	bne.n	80057ac <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f043 0206 	orr.w	r2, r3, #6
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f043 0220 	orr.w	r2, r3, #32
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057b8:	b004      	add	sp, #16
 80057ba:	4770      	bx	lr

080057bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	4613      	mov	r3, r2
 80057c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80057ca:	79fb      	ldrb	r3, [r7, #7]
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d165      	bne.n	800589c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	4a41      	ldr	r2, [pc, #260]	@ (80058d8 <USB_SetTurnaroundTime+0x11c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d906      	bls.n	80057e6 <USB_SetTurnaroundTime+0x2a>
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	4a40      	ldr	r2, [pc, #256]	@ (80058dc <USB_SetTurnaroundTime+0x120>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d202      	bcs.n	80057e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80057e0:	230f      	movs	r3, #15
 80057e2:	617b      	str	r3, [r7, #20]
 80057e4:	e062      	b.n	80058ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	4a3c      	ldr	r2, [pc, #240]	@ (80058dc <USB_SetTurnaroundTime+0x120>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d306      	bcc.n	80057fc <USB_SetTurnaroundTime+0x40>
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	4a3b      	ldr	r2, [pc, #236]	@ (80058e0 <USB_SetTurnaroundTime+0x124>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d202      	bcs.n	80057fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80057f6:	230e      	movs	r3, #14
 80057f8:	617b      	str	r3, [r7, #20]
 80057fa:	e057      	b.n	80058ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	4a38      	ldr	r2, [pc, #224]	@ (80058e0 <USB_SetTurnaroundTime+0x124>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d306      	bcc.n	8005812 <USB_SetTurnaroundTime+0x56>
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	4a37      	ldr	r2, [pc, #220]	@ (80058e4 <USB_SetTurnaroundTime+0x128>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d202      	bcs.n	8005812 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800580c:	230d      	movs	r3, #13
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	e04c      	b.n	80058ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	4a33      	ldr	r2, [pc, #204]	@ (80058e4 <USB_SetTurnaroundTime+0x128>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d306      	bcc.n	8005828 <USB_SetTurnaroundTime+0x6c>
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	4a32      	ldr	r2, [pc, #200]	@ (80058e8 <USB_SetTurnaroundTime+0x12c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d802      	bhi.n	8005828 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005822:	230c      	movs	r3, #12
 8005824:	617b      	str	r3, [r7, #20]
 8005826:	e041      	b.n	80058ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	4a2f      	ldr	r2, [pc, #188]	@ (80058e8 <USB_SetTurnaroundTime+0x12c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d906      	bls.n	800583e <USB_SetTurnaroundTime+0x82>
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	4a2e      	ldr	r2, [pc, #184]	@ (80058ec <USB_SetTurnaroundTime+0x130>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d802      	bhi.n	800583e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005838:	230b      	movs	r3, #11
 800583a:	617b      	str	r3, [r7, #20]
 800583c:	e036      	b.n	80058ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	4a2a      	ldr	r2, [pc, #168]	@ (80058ec <USB_SetTurnaroundTime+0x130>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d906      	bls.n	8005854 <USB_SetTurnaroundTime+0x98>
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	4a29      	ldr	r2, [pc, #164]	@ (80058f0 <USB_SetTurnaroundTime+0x134>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d802      	bhi.n	8005854 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800584e:	230a      	movs	r3, #10
 8005850:	617b      	str	r3, [r7, #20]
 8005852:	e02b      	b.n	80058ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	4a26      	ldr	r2, [pc, #152]	@ (80058f0 <USB_SetTurnaroundTime+0x134>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d906      	bls.n	800586a <USB_SetTurnaroundTime+0xae>
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	4a25      	ldr	r2, [pc, #148]	@ (80058f4 <USB_SetTurnaroundTime+0x138>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d202      	bcs.n	800586a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005864:	2309      	movs	r3, #9
 8005866:	617b      	str	r3, [r7, #20]
 8005868:	e020      	b.n	80058ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	4a21      	ldr	r2, [pc, #132]	@ (80058f4 <USB_SetTurnaroundTime+0x138>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d306      	bcc.n	8005880 <USB_SetTurnaroundTime+0xc4>
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	4a20      	ldr	r2, [pc, #128]	@ (80058f8 <USB_SetTurnaroundTime+0x13c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d802      	bhi.n	8005880 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800587a:	2308      	movs	r3, #8
 800587c:	617b      	str	r3, [r7, #20]
 800587e:	e015      	b.n	80058ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	4a1d      	ldr	r2, [pc, #116]	@ (80058f8 <USB_SetTurnaroundTime+0x13c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d906      	bls.n	8005896 <USB_SetTurnaroundTime+0xda>
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	4a1c      	ldr	r2, [pc, #112]	@ (80058fc <USB_SetTurnaroundTime+0x140>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d202      	bcs.n	8005896 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005890:	2307      	movs	r3, #7
 8005892:	617b      	str	r3, [r7, #20]
 8005894:	e00a      	b.n	80058ac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005896:	2306      	movs	r3, #6
 8005898:	617b      	str	r3, [r7, #20]
 800589a:	e007      	b.n	80058ac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800589c:	79fb      	ldrb	r3, [r7, #7]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d102      	bne.n	80058a8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80058a2:	2309      	movs	r3, #9
 80058a4:	617b      	str	r3, [r7, #20]
 80058a6:	e001      	b.n	80058ac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80058a8:	2309      	movs	r3, #9
 80058aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	68da      	ldr	r2, [r3, #12]
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	029b      	lsls	r3, r3, #10
 80058c0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80058c4:	431a      	orrs	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	371c      	adds	r7, #28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	00d8acbf 	.word	0x00d8acbf
 80058dc:	00e4e1c0 	.word	0x00e4e1c0
 80058e0:	00f42400 	.word	0x00f42400
 80058e4:	01067380 	.word	0x01067380
 80058e8:	011a499f 	.word	0x011a499f
 80058ec:	01312cff 	.word	0x01312cff
 80058f0:	014ca43f 	.word	0x014ca43f
 80058f4:	016e3600 	.word	0x016e3600
 80058f8:	01a6ab1f 	.word	0x01a6ab1f
 80058fc:	01e84800 	.word	0x01e84800

08005900 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f043 0201 	orr.w	r2, r3, #1
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f023 0201 	bic.w	r2, r3, #1
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	460b      	mov	r3, r1
 800594e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005950:	2300      	movs	r3, #0
 8005952:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005960:	78fb      	ldrb	r3, [r7, #3]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d115      	bne.n	8005992 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005972:	200a      	movs	r0, #10
 8005974:	f7fc fc06 	bl	8002184 <HAL_Delay>
      ms += 10U;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	330a      	adds	r3, #10
 800597c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f001 f93f 	bl	8006c02 <USB_GetMode>
 8005984:	4603      	mov	r3, r0
 8005986:	2b01      	cmp	r3, #1
 8005988:	d01e      	beq.n	80059c8 <USB_SetCurrentMode+0x84>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2bc7      	cmp	r3, #199	@ 0xc7
 800598e:	d9f0      	bls.n	8005972 <USB_SetCurrentMode+0x2e>
 8005990:	e01a      	b.n	80059c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005992:	78fb      	ldrb	r3, [r7, #3]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d115      	bne.n	80059c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80059a4:	200a      	movs	r0, #10
 80059a6:	f7fc fbed 	bl	8002184 <HAL_Delay>
      ms += 10U;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	330a      	adds	r3, #10
 80059ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f001 f926 	bl	8006c02 <USB_GetMode>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d005      	beq.n	80059c8 <USB_SetCurrentMode+0x84>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2bc7      	cmp	r3, #199	@ 0xc7
 80059c0:	d9f0      	bls.n	80059a4 <USB_SetCurrentMode+0x60>
 80059c2:	e001      	b.n	80059c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e005      	b.n	80059d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2bc8      	cmp	r3, #200	@ 0xc8
 80059cc:	d101      	bne.n	80059d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e000      	b.n	80059d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059dc:	b084      	sub	sp, #16
 80059de:	b580      	push	{r7, lr}
 80059e0:	b086      	sub	sp, #24
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
 80059e6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80059ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80059ee:	2300      	movs	r3, #0
 80059f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80059f6:	2300      	movs	r3, #0
 80059f8:	613b      	str	r3, [r7, #16]
 80059fa:	e009      	b.n	8005a10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	3340      	adds	r3, #64	@ 0x40
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	2200      	movs	r2, #0
 8005a08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	613b      	str	r3, [r7, #16]
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	2b0e      	cmp	r3, #14
 8005a14:	d9f2      	bls.n	80059fc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a16:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d11c      	bne.n	8005a58 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a2c:	f043 0302 	orr.w	r3, r3, #2
 8005a30:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a36:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a42:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a4e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a56:	e00b      	b.n	8005a70 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a5c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a68:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a76:	461a      	mov	r2, r3
 8005a78:	2300      	movs	r3, #0
 8005a7a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a7c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d10d      	bne.n	8005aa0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005a84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d104      	bne.n	8005a96 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f968 	bl	8005d64 <USB_SetDevSpeed>
 8005a94:	e008      	b.n	8005aa8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005a96:	2101      	movs	r1, #1
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 f963 	bl	8005d64 <USB_SetDevSpeed>
 8005a9e:	e003      	b.n	8005aa8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005aa0:	2103      	movs	r1, #3
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f95e 	bl	8005d64 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005aa8:	2110      	movs	r1, #16
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f8fa 	bl	8005ca4 <USB_FlushTxFifo>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f924 	bl	8005d08 <USB_FlushRxFifo>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005adc:	461a      	mov	r2, r3
 8005ade:	2300      	movs	r3, #0
 8005ae0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ae8:	461a      	mov	r2, r3
 8005aea:	2300      	movs	r3, #0
 8005aec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005aee:	2300      	movs	r3, #0
 8005af0:	613b      	str	r3, [r7, #16]
 8005af2:	e043      	b.n	8005b7c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b0a:	d118      	bne.n	8005b3e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10a      	bne.n	8005b28 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b1e:	461a      	mov	r2, r3
 8005b20:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	e013      	b.n	8005b50 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b34:	461a      	mov	r2, r3
 8005b36:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005b3a:	6013      	str	r3, [r2, #0]
 8005b3c:	e008      	b.n	8005b50 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	2300      	movs	r3, #0
 8005b60:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b6e:	461a      	mov	r2, r3
 8005b70:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005b74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	613b      	str	r3, [r7, #16]
 8005b7c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005b80:	461a      	mov	r2, r3
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d3b5      	bcc.n	8005af4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b88:	2300      	movs	r3, #0
 8005b8a:	613b      	str	r3, [r7, #16]
 8005b8c:	e043      	b.n	8005c16 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	015a      	lsls	r2, r3, #5
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ba0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ba4:	d118      	bne.n	8005bd8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10a      	bne.n	8005bc2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	015a      	lsls	r2, r3, #5
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bb8:	461a      	mov	r2, r3
 8005bba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005bbe:	6013      	str	r3, [r2, #0]
 8005bc0:	e013      	b.n	8005bea <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bce:	461a      	mov	r2, r3
 8005bd0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005bd4:	6013      	str	r3, [r2, #0]
 8005bd6:	e008      	b.n	8005bea <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005be4:	461a      	mov	r2, r3
 8005be6:	2300      	movs	r3, #0
 8005be8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c08:	461a      	mov	r2, r3
 8005c0a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005c0e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	3301      	adds	r3, #1
 8005c14:	613b      	str	r3, [r7, #16]
 8005c16:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d3b5      	bcc.n	8005b8e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c34:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005c42:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d105      	bne.n	8005c58 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	f043 0210 	orr.w	r2, r3, #16
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	699a      	ldr	r2, [r3, #24]
 8005c5c:	4b10      	ldr	r3, [pc, #64]	@ (8005ca0 <USB_DevInit+0x2c4>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c64:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d005      	beq.n	8005c78 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	f043 0208 	orr.w	r2, r3, #8
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c78:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d107      	bne.n	8005c90 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c88:	f043 0304 	orr.w	r3, r3, #4
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c9c:	b004      	add	sp, #16
 8005c9e:	4770      	bx	lr
 8005ca0:	803c3800 	.word	0x803c3800

08005ca4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005cbe:	d901      	bls.n	8005cc4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e01b      	b.n	8005cfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	daf2      	bge.n	8005cb2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	019b      	lsls	r3, r3, #6
 8005cd4:	f043 0220 	orr.w	r2, r3, #32
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ce8:	d901      	bls.n	8005cee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e006      	b.n	8005cfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	f003 0320 	and.w	r3, r3, #32
 8005cf6:	2b20      	cmp	r3, #32
 8005cf8:	d0f0      	beq.n	8005cdc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d10:	2300      	movs	r3, #0
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	3301      	adds	r3, #1
 8005d18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d20:	d901      	bls.n	8005d26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e018      	b.n	8005d58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	daf2      	bge.n	8005d14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2210      	movs	r2, #16
 8005d36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d44:	d901      	bls.n	8005d4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e006      	b.n	8005d58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	f003 0310 	and.w	r3, r3, #16
 8005d52:	2b10      	cmp	r3, #16
 8005d54:	d0f0      	beq.n	8005d38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3714      	adds	r7, #20
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	78fb      	ldrb	r3, [r7, #3]
 8005d7e:	68f9      	ldr	r1, [r7, #12]
 8005d80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d84:	4313      	orrs	r3, r2
 8005d86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b087      	sub	sp, #28
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f003 0306 	and.w	r3, r3, #6
 8005dae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d102      	bne.n	8005dbc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005db6:	2300      	movs	r3, #0
 8005db8:	75fb      	strb	r3, [r7, #23]
 8005dba:	e00a      	b.n	8005dd2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d002      	beq.n	8005dc8 <USB_GetDevSpeed+0x32>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2b06      	cmp	r3, #6
 8005dc6:	d102      	bne.n	8005dce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005dc8:	2302      	movs	r3, #2
 8005dca:	75fb      	strb	r3, [r7, #23]
 8005dcc:	e001      	b.n	8005dd2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005dce:	230f      	movs	r3, #15
 8005dd0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	371c      	adds	r7, #28
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	785b      	ldrb	r3, [r3, #1]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d13a      	bne.n	8005e72 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e02:	69da      	ldr	r2, [r3, #28]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	f003 030f 	and.w	r3, r3, #15
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	68f9      	ldr	r1, [r7, #12]
 8005e16:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d155      	bne.n	8005ee0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	015a      	lsls	r2, r3, #5
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	791b      	ldrb	r3, [r3, #4]
 8005e4e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e50:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	059b      	lsls	r3, r3, #22
 8005e56:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	0151      	lsls	r1, r2, #5
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	440a      	add	r2, r1
 8005e62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e6e:	6013      	str	r3, [r2, #0]
 8005e70:	e036      	b.n	8005ee0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e78:	69da      	ldr	r2, [r3, #28]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	f003 030f 	and.w	r3, r3, #15
 8005e82:	2101      	movs	r1, #1
 8005e84:	fa01 f303 	lsl.w	r3, r1, r3
 8005e88:	041b      	lsls	r3, r3, #16
 8005e8a:	68f9      	ldr	r1, [r7, #12]
 8005e8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e90:	4313      	orrs	r3, r2
 8005e92:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d11a      	bne.n	8005ee0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	791b      	ldrb	r3, [r3, #4]
 8005ec4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ec6:	430b      	orrs	r3, r1
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	0151      	lsls	r1, r2, #5
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	440a      	add	r2, r1
 8005ed2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ed6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005eda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ede:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
	...

08005ef0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	785b      	ldrb	r3, [r3, #1]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d161      	bne.n	8005fd0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f22:	d11f      	bne.n	8005f64 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	0151      	lsls	r1, r2, #5
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	440a      	add	r2, r1
 8005f3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f3e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005f42:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	0151      	lsls	r1, r2, #5
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	440a      	add	r2, r1
 8005f5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f5e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	f003 030f 	and.w	r3, r3, #15
 8005f74:	2101      	movs	r1, #1
 8005f76:	fa01 f303 	lsl.w	r3, r1, r3
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	43db      	mvns	r3, r3
 8005f7e:	68f9      	ldr	r1, [r7, #12]
 8005f80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f84:	4013      	ands	r3, r2
 8005f86:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f8e:	69da      	ldr	r2, [r3, #28]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	f003 030f 	and.w	r3, r3, #15
 8005f98:	2101      	movs	r1, #1
 8005f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	43db      	mvns	r3, r3
 8005fa2:	68f9      	ldr	r1, [r7, #12]
 8005fa4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005fa8:	4013      	ands	r3, r2
 8005faa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	0159      	lsls	r1, r3, #5
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	440b      	add	r3, r1
 8005fc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	4b35      	ldr	r3, [pc, #212]	@ (80060a0 <USB_DeactivateEndpoint+0x1b0>)
 8005fca:	4013      	ands	r3, r2
 8005fcc:	600b      	str	r3, [r1, #0]
 8005fce:	e060      	b.n	8006092 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005fe2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fe6:	d11f      	bne.n	8006028 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	0151      	lsls	r1, r2, #5
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	440a      	add	r2, r1
 8005ffe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006002:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006006:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4413      	add	r3, r2
 8006010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	0151      	lsls	r1, r2, #5
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	440a      	add	r2, r1
 800601e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006022:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006026:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800602e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	f003 030f 	and.w	r3, r3, #15
 8006038:	2101      	movs	r1, #1
 800603a:	fa01 f303 	lsl.w	r3, r1, r3
 800603e:	041b      	lsls	r3, r3, #16
 8006040:	43db      	mvns	r3, r3
 8006042:	68f9      	ldr	r1, [r7, #12]
 8006044:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006048:	4013      	ands	r3, r2
 800604a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006052:	69da      	ldr	r2, [r3, #28]
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	f003 030f 	and.w	r3, r3, #15
 800605c:	2101      	movs	r1, #1
 800605e:	fa01 f303 	lsl.w	r3, r1, r3
 8006062:	041b      	lsls	r3, r3, #16
 8006064:	43db      	mvns	r3, r3
 8006066:	68f9      	ldr	r1, [r7, #12]
 8006068:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800606c:	4013      	ands	r3, r2
 800606e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	0159      	lsls	r1, r3, #5
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	440b      	add	r3, r1
 8006086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800608a:	4619      	mov	r1, r3
 800608c:	4b05      	ldr	r3, [pc, #20]	@ (80060a4 <USB_DeactivateEndpoint+0x1b4>)
 800608e:	4013      	ands	r3, r2
 8006090:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr
 80060a0:	ec337800 	.word	0xec337800
 80060a4:	eff37800 	.word	0xeff37800

080060a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b08a      	sub	sp, #40	@ 0x28
 80060ac:	af02      	add	r7, sp, #8
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	4613      	mov	r3, r2
 80060b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	785b      	ldrb	r3, [r3, #1]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	f040 817f 	bne.w	80063c8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d132      	bne.n	8006138 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	0151      	lsls	r1, r2, #5
 80060e4:	69fa      	ldr	r2, [r7, #28]
 80060e6:	440a      	add	r2, r1
 80060e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060ec:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80060f0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80060f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	015a      	lsls	r2, r3, #5
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	0151      	lsls	r1, r2, #5
 8006108:	69fa      	ldr	r2, [r7, #28]
 800610a:	440a      	add	r2, r1
 800610c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006110:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006114:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	015a      	lsls	r2, r3, #5
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	4413      	add	r3, r2
 800611e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	0151      	lsls	r1, r2, #5
 8006128:	69fa      	ldr	r2, [r7, #28]
 800612a:	440a      	add	r2, r1
 800612c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006130:	0cdb      	lsrs	r3, r3, #19
 8006132:	04db      	lsls	r3, r3, #19
 8006134:	6113      	str	r3, [r2, #16]
 8006136:	e097      	b.n	8006268 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	4413      	add	r3, r2
 8006140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	69ba      	ldr	r2, [r7, #24]
 8006148:	0151      	lsls	r1, r2, #5
 800614a:	69fa      	ldr	r2, [r7, #28]
 800614c:	440a      	add	r2, r1
 800614e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006152:	0cdb      	lsrs	r3, r3, #19
 8006154:	04db      	lsls	r3, r3, #19
 8006156:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	0151      	lsls	r1, r2, #5
 800616a:	69fa      	ldr	r2, [r7, #28]
 800616c:	440a      	add	r2, r1
 800616e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006172:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006176:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800617a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d11a      	bne.n	80061b8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	691a      	ldr	r2, [r3, #16]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	429a      	cmp	r2, r3
 800618c:	d903      	bls.n	8006196 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	689a      	ldr	r2, [r3, #8]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	4413      	add	r3, r2
 800619e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	0151      	lsls	r1, r2, #5
 80061a8:	69fa      	ldr	r2, [r7, #28]
 80061aa:	440a      	add	r2, r1
 80061ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80061b4:	6113      	str	r3, [r2, #16]
 80061b6:	e044      	b.n	8006242 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	691a      	ldr	r2, [r3, #16]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	4413      	add	r3, r2
 80061c2:	1e5a      	subs	r2, r3, #1
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061cc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	015a      	lsls	r2, r3, #5
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061da:	691a      	ldr	r2, [r3, #16]
 80061dc:	8afb      	ldrh	r3, [r7, #22]
 80061de:	04d9      	lsls	r1, r3, #19
 80061e0:	4ba4      	ldr	r3, [pc, #656]	@ (8006474 <USB_EPStartXfer+0x3cc>)
 80061e2:	400b      	ands	r3, r1
 80061e4:	69b9      	ldr	r1, [r7, #24]
 80061e6:	0148      	lsls	r0, r1, #5
 80061e8:	69f9      	ldr	r1, [r7, #28]
 80061ea:	4401      	add	r1, r0
 80061ec:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80061f0:	4313      	orrs	r3, r2
 80061f2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	791b      	ldrb	r3, [r3, #4]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d122      	bne.n	8006242 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	0151      	lsls	r1, r2, #5
 800620e:	69fa      	ldr	r2, [r7, #28]
 8006210:	440a      	add	r2, r1
 8006212:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006216:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800621a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006228:	691a      	ldr	r2, [r3, #16]
 800622a:	8afb      	ldrh	r3, [r7, #22]
 800622c:	075b      	lsls	r3, r3, #29
 800622e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006232:	69b9      	ldr	r1, [r7, #24]
 8006234:	0148      	lsls	r0, r1, #5
 8006236:	69f9      	ldr	r1, [r7, #28]
 8006238:	4401      	add	r1, r0
 800623a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800623e:	4313      	orrs	r3, r2
 8006240:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	015a      	lsls	r2, r3, #5
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	4413      	add	r3, r2
 800624a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800624e:	691a      	ldr	r2, [r3, #16]
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006258:	69b9      	ldr	r1, [r7, #24]
 800625a:	0148      	lsls	r0, r1, #5
 800625c:	69f9      	ldr	r1, [r7, #28]
 800625e:	4401      	add	r1, r0
 8006260:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006264:	4313      	orrs	r3, r2
 8006266:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006268:	79fb      	ldrb	r3, [r7, #7]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d14b      	bne.n	8006306 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d009      	beq.n	800628a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	015a      	lsls	r2, r3, #5
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	4413      	add	r3, r2
 800627e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006282:	461a      	mov	r2, r3
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	69db      	ldr	r3, [r3, #28]
 8006288:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	791b      	ldrb	r3, [r3, #4]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d128      	bne.n	80062e4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d110      	bne.n	80062c4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	015a      	lsls	r2, r3, #5
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	4413      	add	r3, r2
 80062aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	69ba      	ldr	r2, [r7, #24]
 80062b2:	0151      	lsls	r1, r2, #5
 80062b4:	69fa      	ldr	r2, [r7, #28]
 80062b6:	440a      	add	r2, r1
 80062b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80062c0:	6013      	str	r3, [r2, #0]
 80062c2:	e00f      	b.n	80062e4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	69ba      	ldr	r2, [r7, #24]
 80062d4:	0151      	lsls	r1, r2, #5
 80062d6:	69fa      	ldr	r2, [r7, #28]
 80062d8:	440a      	add	r2, r1
 80062da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062e2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	015a      	lsls	r2, r3, #5
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	4413      	add	r3, r2
 80062ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	69ba      	ldr	r2, [r7, #24]
 80062f4:	0151      	lsls	r1, r2, #5
 80062f6:	69fa      	ldr	r2, [r7, #28]
 80062f8:	440a      	add	r2, r1
 80062fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062fe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006302:	6013      	str	r3, [r2, #0]
 8006304:	e166      	b.n	80065d4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	4413      	add	r3, r2
 800630e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	0151      	lsls	r1, r2, #5
 8006318:	69fa      	ldr	r2, [r7, #28]
 800631a:	440a      	add	r2, r1
 800631c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006320:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006324:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	791b      	ldrb	r3, [r3, #4]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d015      	beq.n	800635a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 814e 	beq.w	80065d4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800633e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	f003 030f 	and.w	r3, r3, #15
 8006348:	2101      	movs	r1, #1
 800634a:	fa01 f303 	lsl.w	r3, r1, r3
 800634e:	69f9      	ldr	r1, [r7, #28]
 8006350:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006354:	4313      	orrs	r3, r2
 8006356:	634b      	str	r3, [r1, #52]	@ 0x34
 8006358:	e13c      	b.n	80065d4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006366:	2b00      	cmp	r3, #0
 8006368:	d110      	bne.n	800638c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	015a      	lsls	r2, r3, #5
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	4413      	add	r3, r2
 8006372:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	69ba      	ldr	r2, [r7, #24]
 800637a:	0151      	lsls	r1, r2, #5
 800637c:	69fa      	ldr	r2, [r7, #28]
 800637e:	440a      	add	r2, r1
 8006380:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006384:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006388:	6013      	str	r3, [r2, #0]
 800638a:	e00f      	b.n	80063ac <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	015a      	lsls	r2, r3, #5
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	4413      	add	r3, r2
 8006394:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	0151      	lsls	r1, r2, #5
 800639e:	69fa      	ldr	r2, [r7, #28]
 80063a0:	440a      	add	r2, r1
 80063a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063aa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	68d9      	ldr	r1, [r3, #12]
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	781a      	ldrb	r2, [r3, #0]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	b298      	uxth	r0, r3
 80063ba:	79fb      	ldrb	r3, [r7, #7]
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	4603      	mov	r3, r0
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f000 f9b9 	bl	8006738 <USB_WritePacket>
 80063c6:	e105      	b.n	80065d4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	69ba      	ldr	r2, [r7, #24]
 80063d8:	0151      	lsls	r1, r2, #5
 80063da:	69fa      	ldr	r2, [r7, #28]
 80063dc:	440a      	add	r2, r1
 80063de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063e2:	0cdb      	lsrs	r3, r3, #19
 80063e4:	04db      	lsls	r3, r3, #19
 80063e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	69ba      	ldr	r2, [r7, #24]
 80063f8:	0151      	lsls	r1, r2, #5
 80063fa:	69fa      	ldr	r2, [r7, #28]
 80063fc:	440a      	add	r2, r1
 80063fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006402:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006406:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800640a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d132      	bne.n	8006478 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d003      	beq.n	8006422 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	689a      	ldr	r2, [r3, #8]
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	689a      	ldr	r2, [r3, #8]
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	015a      	lsls	r2, r3, #5
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	4413      	add	r3, r2
 8006432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006436:	691a      	ldr	r2, [r3, #16]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006440:	69b9      	ldr	r1, [r7, #24]
 8006442:	0148      	lsls	r0, r1, #5
 8006444:	69f9      	ldr	r1, [r7, #28]
 8006446:	4401      	add	r1, r0
 8006448:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800644c:	4313      	orrs	r3, r2
 800644e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	015a      	lsls	r2, r3, #5
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	4413      	add	r3, r2
 8006458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	69ba      	ldr	r2, [r7, #24]
 8006460:	0151      	lsls	r1, r2, #5
 8006462:	69fa      	ldr	r2, [r7, #28]
 8006464:	440a      	add	r2, r1
 8006466:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800646a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800646e:	6113      	str	r3, [r2, #16]
 8006470:	e062      	b.n	8006538 <USB_EPStartXfer+0x490>
 8006472:	bf00      	nop
 8006474:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d123      	bne.n	80064c8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	4413      	add	r3, r2
 8006488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800648c:	691a      	ldr	r2, [r3, #16]
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006496:	69b9      	ldr	r1, [r7, #24]
 8006498:	0148      	lsls	r0, r1, #5
 800649a:	69f9      	ldr	r1, [r7, #28]
 800649c:	4401      	add	r1, r0
 800649e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80064a2:	4313      	orrs	r3, r2
 80064a4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	015a      	lsls	r2, r3, #5
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	4413      	add	r3, r2
 80064ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	0151      	lsls	r1, r2, #5
 80064b8:	69fa      	ldr	r2, [r7, #28]
 80064ba:	440a      	add	r2, r1
 80064bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80064c4:	6113      	str	r3, [r2, #16]
 80064c6:	e037      	b.n	8006538 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	691a      	ldr	r2, [r3, #16]
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	4413      	add	r3, r2
 80064d2:	1e5a      	subs	r2, r3, #1
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064dc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	8afa      	ldrh	r2, [r7, #22]
 80064e4:	fb03 f202 	mul.w	r2, r3, r2
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064f8:	691a      	ldr	r2, [r3, #16]
 80064fa:	8afb      	ldrh	r3, [r7, #22]
 80064fc:	04d9      	lsls	r1, r3, #19
 80064fe:	4b38      	ldr	r3, [pc, #224]	@ (80065e0 <USB_EPStartXfer+0x538>)
 8006500:	400b      	ands	r3, r1
 8006502:	69b9      	ldr	r1, [r7, #24]
 8006504:	0148      	lsls	r0, r1, #5
 8006506:	69f9      	ldr	r1, [r7, #28]
 8006508:	4401      	add	r1, r0
 800650a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800650e:	4313      	orrs	r3, r2
 8006510:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	4413      	add	r3, r2
 800651a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800651e:	691a      	ldr	r2, [r3, #16]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006528:	69b9      	ldr	r1, [r7, #24]
 800652a:	0148      	lsls	r0, r1, #5
 800652c:	69f9      	ldr	r1, [r7, #28]
 800652e:	4401      	add	r1, r0
 8006530:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006534:	4313      	orrs	r3, r2
 8006536:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006538:	79fb      	ldrb	r3, [r7, #7]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d10d      	bne.n	800655a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d009      	beq.n	800655a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	68d9      	ldr	r1, [r3, #12]
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	015a      	lsls	r2, r3, #5
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	4413      	add	r3, r2
 8006552:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006556:	460a      	mov	r2, r1
 8006558:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	791b      	ldrb	r3, [r3, #4]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d128      	bne.n	80065b4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800656e:	2b00      	cmp	r3, #0
 8006570:	d110      	bne.n	8006594 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	4413      	add	r3, r2
 800657a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	69ba      	ldr	r2, [r7, #24]
 8006582:	0151      	lsls	r1, r2, #5
 8006584:	69fa      	ldr	r2, [r7, #28]
 8006586:	440a      	add	r2, r1
 8006588:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800658c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006590:	6013      	str	r3, [r2, #0]
 8006592:	e00f      	b.n	80065b4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	69ba      	ldr	r2, [r7, #24]
 80065a4:	0151      	lsls	r1, r2, #5
 80065a6:	69fa      	ldr	r2, [r7, #28]
 80065a8:	440a      	add	r2, r1
 80065aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	69ba      	ldr	r2, [r7, #24]
 80065c4:	0151      	lsls	r1, r2, #5
 80065c6:	69fa      	ldr	r2, [r7, #28]
 80065c8:	440a      	add	r2, r1
 80065ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065ce:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80065d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3720      	adds	r7, #32
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	1ff80000 	.word	0x1ff80000

080065e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80065f2:	2300      	movs	r3, #0
 80065f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	785b      	ldrb	r3, [r3, #1]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d14a      	bne.n	8006698 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	4413      	add	r3, r2
 800660c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006616:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800661a:	f040 8086 	bne.w	800672a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	7812      	ldrb	r2, [r2, #0]
 8006632:	0151      	lsls	r1, r2, #5
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	440a      	add	r2, r1
 8006638:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800663c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006640:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	4413      	add	r3, r2
 800664c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	683a      	ldr	r2, [r7, #0]
 8006654:	7812      	ldrb	r2, [r2, #0]
 8006656:	0151      	lsls	r1, r2, #5
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	440a      	add	r2, r1
 800665c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006660:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006664:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	3301      	adds	r3, #1
 800666a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006672:	4293      	cmp	r3, r2
 8006674:	d902      	bls.n	800667c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	75fb      	strb	r3, [r7, #23]
          break;
 800667a:	e056      	b.n	800672a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	015a      	lsls	r2, r3, #5
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	4413      	add	r3, r2
 8006686:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006690:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006694:	d0e7      	beq.n	8006666 <USB_EPStopXfer+0x82>
 8006696:	e048      	b.n	800672a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066b0:	d13b      	bne.n	800672a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	7812      	ldrb	r2, [r2, #0]
 80066c6:	0151      	lsls	r1, r2, #5
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	440a      	add	r2, r1
 80066cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066d0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80066d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	7812      	ldrb	r2, [r2, #0]
 80066ea:	0151      	lsls	r1, r2, #5
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	440a      	add	r2, r1
 80066f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	3301      	adds	r3, #1
 80066fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006706:	4293      	cmp	r3, r2
 8006708:	d902      	bls.n	8006710 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	75fb      	strb	r3, [r7, #23]
          break;
 800670e:	e00c      	b.n	800672a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	015a      	lsls	r2, r3, #5
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	4413      	add	r3, r2
 800671a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006724:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006728:	d0e7      	beq.n	80066fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800672a:	7dfb      	ldrb	r3, [r7, #23]
}
 800672c:	4618      	mov	r0, r3
 800672e:	371c      	adds	r7, #28
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006738:	b480      	push	{r7}
 800673a:	b089      	sub	sp, #36	@ 0x24
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	4611      	mov	r1, r2
 8006744:	461a      	mov	r2, r3
 8006746:	460b      	mov	r3, r1
 8006748:	71fb      	strb	r3, [r7, #7]
 800674a:	4613      	mov	r3, r2
 800674c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006756:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800675a:	2b00      	cmp	r3, #0
 800675c:	d123      	bne.n	80067a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800675e:	88bb      	ldrh	r3, [r7, #4]
 8006760:	3303      	adds	r3, #3
 8006762:	089b      	lsrs	r3, r3, #2
 8006764:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006766:	2300      	movs	r3, #0
 8006768:	61bb      	str	r3, [r7, #24]
 800676a:	e018      	b.n	800679e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800676c:	79fb      	ldrb	r3, [r7, #7]
 800676e:	031a      	lsls	r2, r3, #12
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	4413      	add	r3, r2
 8006774:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006778:	461a      	mov	r2, r3
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	3301      	adds	r3, #1
 8006784:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	3301      	adds	r3, #1
 800678a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	3301      	adds	r3, #1
 8006790:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	3301      	adds	r3, #1
 8006796:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	3301      	adds	r3, #1
 800679c:	61bb      	str	r3, [r7, #24]
 800679e:	69ba      	ldr	r2, [r7, #24]
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d3e2      	bcc.n	800676c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3724      	adds	r7, #36	@ 0x24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b08b      	sub	sp, #44	@ 0x2c
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	4613      	mov	r3, r2
 80067c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80067ca:	88fb      	ldrh	r3, [r7, #6]
 80067cc:	089b      	lsrs	r3, r3, #2
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80067d2:	88fb      	ldrh	r3, [r7, #6]
 80067d4:	f003 0303 	and.w	r3, r3, #3
 80067d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80067da:	2300      	movs	r3, #0
 80067dc:	623b      	str	r3, [r7, #32]
 80067de:	e014      	b.n	800680a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80067ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ee:	3301      	adds	r3, #1
 80067f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80067f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f4:	3301      	adds	r3, #1
 80067f6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80067f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fa:	3301      	adds	r3, #1
 80067fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80067fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006800:	3301      	adds	r3, #1
 8006802:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006804:	6a3b      	ldr	r3, [r7, #32]
 8006806:	3301      	adds	r3, #1
 8006808:	623b      	str	r3, [r7, #32]
 800680a:	6a3a      	ldr	r2, [r7, #32]
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	429a      	cmp	r2, r3
 8006810:	d3e6      	bcc.n	80067e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006812:	8bfb      	ldrh	r3, [r7, #30]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d01e      	beq.n	8006856 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006818:	2300      	movs	r3, #0
 800681a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006822:	461a      	mov	r2, r3
 8006824:	f107 0310 	add.w	r3, r7, #16
 8006828:	6812      	ldr	r2, [r2, #0]
 800682a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	6a3b      	ldr	r3, [r7, #32]
 8006830:	b2db      	uxtb	r3, r3
 8006832:	00db      	lsls	r3, r3, #3
 8006834:	fa22 f303 	lsr.w	r3, r2, r3
 8006838:	b2da      	uxtb	r2, r3
 800683a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683c:	701a      	strb	r2, [r3, #0]
      i++;
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	3301      	adds	r3, #1
 8006842:	623b      	str	r3, [r7, #32]
      pDest++;
 8006844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006846:	3301      	adds	r3, #1
 8006848:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800684a:	8bfb      	ldrh	r3, [r7, #30]
 800684c:	3b01      	subs	r3, #1
 800684e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006850:	8bfb      	ldrh	r3, [r7, #30]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1ea      	bne.n	800682c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006858:	4618      	mov	r0, r3
 800685a:	372c      	adds	r7, #44	@ 0x2c
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	785b      	ldrb	r3, [r3, #1]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d12c      	bne.n	80068da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	4413      	add	r3, r2
 8006888:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	db12      	blt.n	80068b8 <USB_EPSetStall+0x54>
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00f      	beq.n	80068b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	0151      	lsls	r1, r2, #5
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	440a      	add	r2, r1
 80068ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80068b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	015a      	lsls	r2, r3, #5
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	4413      	add	r3, r2
 80068c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	0151      	lsls	r1, r2, #5
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	440a      	add	r2, r1
 80068ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80068d6:	6013      	str	r3, [r2, #0]
 80068d8:	e02b      	b.n	8006932 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	015a      	lsls	r2, r3, #5
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	db12      	blt.n	8006912 <USB_EPSetStall+0xae>
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00f      	beq.n	8006912 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	015a      	lsls	r2, r3, #5
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68ba      	ldr	r2, [r7, #8]
 8006902:	0151      	lsls	r1, r2, #5
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	440a      	add	r2, r1
 8006908:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800690c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006910:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	015a      	lsls	r2, r3, #5
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	4413      	add	r3, r2
 800691a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	0151      	lsls	r1, r2, #5
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	440a      	add	r2, r1
 8006928:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800692c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006930:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3714      	adds	r7, #20
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	785b      	ldrb	r3, [r3, #1]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d128      	bne.n	80069ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4413      	add	r3, r2
 8006964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	0151      	lsls	r1, r2, #5
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	440a      	add	r2, r1
 8006972:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006976:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800697a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	791b      	ldrb	r3, [r3, #4]
 8006980:	2b03      	cmp	r3, #3
 8006982:	d003      	beq.n	800698c <USB_EPClearStall+0x4c>
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	791b      	ldrb	r3, [r3, #4]
 8006988:	2b02      	cmp	r3, #2
 800698a:	d138      	bne.n	80069fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4413      	add	r3, r2
 8006994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	0151      	lsls	r1, r2, #5
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	440a      	add	r2, r1
 80069a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069aa:	6013      	str	r3, [r2, #0]
 80069ac:	e027      	b.n	80069fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	015a      	lsls	r2, r3, #5
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	0151      	lsls	r1, r2, #5
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	440a      	add	r2, r1
 80069c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069c8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	791b      	ldrb	r3, [r3, #4]
 80069d2:	2b03      	cmp	r3, #3
 80069d4:	d003      	beq.n	80069de <USB_EPClearStall+0x9e>
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	791b      	ldrb	r3, [r3, #4]
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d10f      	bne.n	80069fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	015a      	lsls	r2, r3, #5
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	4413      	add	r3, r2
 80069e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	0151      	lsls	r1, r2, #5
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	440a      	add	r2, r1
 80069f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	460b      	mov	r3, r1
 8006a16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a2a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006a2e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	78fb      	ldrb	r3, [r7, #3]
 8006a3a:	011b      	lsls	r3, r3, #4
 8006a3c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006a40:	68f9      	ldr	r1, [r7, #12]
 8006a42:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a46:	4313      	orrs	r3, r2
 8006a48:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006a72:	f023 0303 	bic.w	r3, r3, #3
 8006a76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a86:	f023 0302 	bic.w	r3, r3, #2
 8006a8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b085      	sub	sp, #20
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006ab4:	f023 0303 	bic.w	r3, r3, #3
 8006ab8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ac8:	f043 0302 	orr.w	r3, r3, #2
 8006acc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3714      	adds	r7, #20
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	695b      	ldr	r3, [r3, #20]
 8006ae8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	4013      	ands	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006af4:	68fb      	ldr	r3, [r7, #12]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3714      	adds	r7, #20
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr

08006b02 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b085      	sub	sp, #20
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b1e:	69db      	ldr	r3, [r3, #28]
 8006b20:	68ba      	ldr	r2, [r7, #8]
 8006b22:	4013      	ands	r3, r2
 8006b24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	0c1b      	lsrs	r3, r3, #16
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3714      	adds	r7, #20
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b085      	sub	sp, #20
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	68ba      	ldr	r2, [r7, #8]
 8006b56:	4013      	ands	r3, r2
 8006b58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	b29b      	uxth	r3, r3
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	b085      	sub	sp, #20
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
 8006b72:	460b      	mov	r3, r1
 8006b74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006b7a:	78fb      	ldrb	r3, [r7, #3]
 8006b7c:	015a      	lsls	r2, r3, #5
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	4413      	add	r3, r2
 8006b82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	4013      	ands	r3, r2
 8006b96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b98:	68bb      	ldr	r3, [r7, #8]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b087      	sub	sp, #28
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	460b      	mov	r3, r1
 8006bb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bc8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006bca:	78fb      	ldrb	r3, [r7, #3]
 8006bcc:	f003 030f 	and.w	r3, r3, #15
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd6:	01db      	lsls	r3, r3, #7
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006be0:	78fb      	ldrb	r3, [r7, #3]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006bf4:	68bb      	ldr	r3, [r7, #8]
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	371c      	adds	r7, #28
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b083      	sub	sp, #12
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	f003 0301 	and.w	r3, r3, #1
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b085      	sub	sp, #20
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c38:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006c3c:	f023 0307 	bic.w	r3, r3, #7
 8006c40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3714      	adds	r7, #20
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	607a      	str	r2, [r7, #4]
 8006c70:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	333c      	adds	r3, #60	@ 0x3c
 8006c7a:	3304      	adds	r3, #4
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	4a26      	ldr	r2, [pc, #152]	@ (8006d1c <USB_EP0_OutStart+0xb8>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d90a      	bls.n	8006c9e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c98:	d101      	bne.n	8006c9e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	e037      	b.n	8006d0e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cb8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006cbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ccc:	f043 0318 	orr.w	r3, r3, #24
 8006cd0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ce0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006ce4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006ce6:	7afb      	ldrb	r3, [r7, #11]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d10f      	bne.n	8006d0c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d06:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006d0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	371c      	adds	r7, #28
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	4f54300a 	.word	0x4f54300a

08006d20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d38:	d901      	bls.n	8006d3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e01b      	b.n	8006d76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	daf2      	bge.n	8006d2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	f043 0201 	orr.w	r2, r3, #1
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d62:	d901      	bls.n	8006d68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e006      	b.n	8006d76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	f003 0301 	and.w	r3, r3, #1
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d0f0      	beq.n	8006d56 <USB_CoreReset+0x36>

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
	...

08006d84 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d90:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006d94:	f002 fc94 	bl	80096c0 <USBD_static_malloc>
 8006d98:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d109      	bne.n	8006db4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	32b0      	adds	r2, #176	@ 0xb0
 8006daa:	2100      	movs	r1, #0
 8006dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006db0:	2302      	movs	r3, #2
 8006db2:	e0d4      	b.n	8006f5e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006db4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006db8:	2100      	movs	r1, #0
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f002 fd18 	bl	80097f0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	32b0      	adds	r2, #176	@ 0xb0
 8006dca:	68f9      	ldr	r1, [r7, #12]
 8006dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	32b0      	adds	r2, #176	@ 0xb0
 8006dda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	7c1b      	ldrb	r3, [r3, #16]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d138      	bne.n	8006e5e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006dec:	4b5e      	ldr	r3, [pc, #376]	@ (8006f68 <USBD_CDC_Init+0x1e4>)
 8006dee:	7819      	ldrb	r1, [r3, #0]
 8006df0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006df4:	2202      	movs	r2, #2
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f002 fb3f 	bl	800947a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006dfc:	4b5a      	ldr	r3, [pc, #360]	@ (8006f68 <USBD_CDC_Init+0x1e4>)
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	f003 020f 	and.w	r2, r3, #15
 8006e04:	6879      	ldr	r1, [r7, #4]
 8006e06:	4613      	mov	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	440b      	add	r3, r1
 8006e10:	3324      	adds	r3, #36	@ 0x24
 8006e12:	2201      	movs	r2, #1
 8006e14:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006e16:	4b55      	ldr	r3, [pc, #340]	@ (8006f6c <USBD_CDC_Init+0x1e8>)
 8006e18:	7819      	ldrb	r1, [r3, #0]
 8006e1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e1e:	2202      	movs	r2, #2
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f002 fb2a 	bl	800947a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006e26:	4b51      	ldr	r3, [pc, #324]	@ (8006f6c <USBD_CDC_Init+0x1e8>)
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	f003 020f 	and.w	r2, r3, #15
 8006e2e:	6879      	ldr	r1, [r7, #4]
 8006e30:	4613      	mov	r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4413      	add	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	440b      	add	r3, r1
 8006e3a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006e3e:	2201      	movs	r2, #1
 8006e40:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006e42:	4b4b      	ldr	r3, [pc, #300]	@ (8006f70 <USBD_CDC_Init+0x1ec>)
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	f003 020f 	and.w	r2, r3, #15
 8006e4a:	6879      	ldr	r1, [r7, #4]
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	440b      	add	r3, r1
 8006e56:	3326      	adds	r3, #38	@ 0x26
 8006e58:	2210      	movs	r2, #16
 8006e5a:	801a      	strh	r2, [r3, #0]
 8006e5c:	e035      	b.n	8006eca <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006e5e:	4b42      	ldr	r3, [pc, #264]	@ (8006f68 <USBD_CDC_Init+0x1e4>)
 8006e60:	7819      	ldrb	r1, [r3, #0]
 8006e62:	2340      	movs	r3, #64	@ 0x40
 8006e64:	2202      	movs	r2, #2
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f002 fb07 	bl	800947a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006e6c:	4b3e      	ldr	r3, [pc, #248]	@ (8006f68 <USBD_CDC_Init+0x1e4>)
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	f003 020f 	and.w	r2, r3, #15
 8006e74:	6879      	ldr	r1, [r7, #4]
 8006e76:	4613      	mov	r3, r2
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	4413      	add	r3, r2
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	440b      	add	r3, r1
 8006e80:	3324      	adds	r3, #36	@ 0x24
 8006e82:	2201      	movs	r2, #1
 8006e84:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006e86:	4b39      	ldr	r3, [pc, #228]	@ (8006f6c <USBD_CDC_Init+0x1e8>)
 8006e88:	7819      	ldrb	r1, [r3, #0]
 8006e8a:	2340      	movs	r3, #64	@ 0x40
 8006e8c:	2202      	movs	r2, #2
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f002 faf3 	bl	800947a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006e94:	4b35      	ldr	r3, [pc, #212]	@ (8006f6c <USBD_CDC_Init+0x1e8>)
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	f003 020f 	and.w	r2, r3, #15
 8006e9c:	6879      	ldr	r1, [r7, #4]
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4413      	add	r3, r2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	440b      	add	r3, r1
 8006ea8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006eac:	2201      	movs	r2, #1
 8006eae:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006eb0:	4b2f      	ldr	r3, [pc, #188]	@ (8006f70 <USBD_CDC_Init+0x1ec>)
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	f003 020f 	and.w	r2, r3, #15
 8006eb8:	6879      	ldr	r1, [r7, #4]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	4413      	add	r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	440b      	add	r3, r1
 8006ec4:	3326      	adds	r3, #38	@ 0x26
 8006ec6:	2210      	movs	r2, #16
 8006ec8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006eca:	4b29      	ldr	r3, [pc, #164]	@ (8006f70 <USBD_CDC_Init+0x1ec>)
 8006ecc:	7819      	ldrb	r1, [r3, #0]
 8006ece:	2308      	movs	r3, #8
 8006ed0:	2203      	movs	r2, #3
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f002 fad1 	bl	800947a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006ed8:	4b25      	ldr	r3, [pc, #148]	@ (8006f70 <USBD_CDC_Init+0x1ec>)
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	f003 020f 	and.w	r2, r3, #15
 8006ee0:	6879      	ldr	r1, [r7, #4]
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4413      	add	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	440b      	add	r3, r1
 8006eec:	3324      	adds	r3, #36	@ 0x24
 8006eee:	2201      	movs	r2, #1
 8006ef0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	33b0      	adds	r3, #176	@ 0xb0
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006f28:	2302      	movs	r3, #2
 8006f2a:	e018      	b.n	8006f5e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	7c1b      	ldrb	r3, [r3, #16]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10a      	bne.n	8006f4a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f34:	4b0d      	ldr	r3, [pc, #52]	@ (8006f6c <USBD_CDC_Init+0x1e8>)
 8006f36:	7819      	ldrb	r1, [r3, #0]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006f3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f002 fb88 	bl	8009658 <USBD_LL_PrepareReceive>
 8006f48:	e008      	b.n	8006f5c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f4a:	4b08      	ldr	r3, [pc, #32]	@ (8006f6c <USBD_CDC_Init+0x1e8>)
 8006f4c:	7819      	ldrb	r1, [r3, #0]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006f54:	2340      	movs	r3, #64	@ 0x40
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f002 fb7e 	bl	8009658 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	20000093 	.word	0x20000093
 8006f6c:	20000094 	.word	0x20000094
 8006f70:	20000095 	.word	0x20000095

08006f74 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006f80:	4b3a      	ldr	r3, [pc, #232]	@ (800706c <USBD_CDC_DeInit+0xf8>)
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	4619      	mov	r1, r3
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f002 fa9d 	bl	80094c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006f8c:	4b37      	ldr	r3, [pc, #220]	@ (800706c <USBD_CDC_DeInit+0xf8>)
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	f003 020f 	and.w	r2, r3, #15
 8006f94:	6879      	ldr	r1, [r7, #4]
 8006f96:	4613      	mov	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4413      	add	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	440b      	add	r3, r1
 8006fa0:	3324      	adds	r3, #36	@ 0x24
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006fa6:	4b32      	ldr	r3, [pc, #200]	@ (8007070 <USBD_CDC_DeInit+0xfc>)
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	4619      	mov	r1, r3
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f002 fa8a 	bl	80094c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006fb2:	4b2f      	ldr	r3, [pc, #188]	@ (8007070 <USBD_CDC_DeInit+0xfc>)
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	f003 020f 	and.w	r2, r3, #15
 8006fba:	6879      	ldr	r1, [r7, #4]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4413      	add	r3, r2
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	440b      	add	r3, r1
 8006fc6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006fca:	2200      	movs	r2, #0
 8006fcc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006fce:	4b29      	ldr	r3, [pc, #164]	@ (8007074 <USBD_CDC_DeInit+0x100>)
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f002 fa76 	bl	80094c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006fda:	4b26      	ldr	r3, [pc, #152]	@ (8007074 <USBD_CDC_DeInit+0x100>)
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	f003 020f 	and.w	r2, r3, #15
 8006fe2:	6879      	ldr	r1, [r7, #4]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4413      	add	r3, r2
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	440b      	add	r3, r1
 8006fee:	3324      	adds	r3, #36	@ 0x24
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006ff4:	4b1f      	ldr	r3, [pc, #124]	@ (8007074 <USBD_CDC_DeInit+0x100>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	f003 020f 	and.w	r2, r3, #15
 8006ffc:	6879      	ldr	r1, [r7, #4]
 8006ffe:	4613      	mov	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4413      	add	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	440b      	add	r3, r1
 8007008:	3326      	adds	r3, #38	@ 0x26
 800700a:	2200      	movs	r2, #0
 800700c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	32b0      	adds	r2, #176	@ 0xb0
 8007018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d01f      	beq.n	8007060 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	33b0      	adds	r3, #176	@ 0xb0
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	4413      	add	r3, r2
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	32b0      	adds	r2, #176	@ 0xb0
 800703e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007042:	4618      	mov	r0, r3
 8007044:	f002 fb4a 	bl	80096dc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	32b0      	adds	r2, #176	@ 0xb0
 8007052:	2100      	movs	r1, #0
 8007054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	20000093 	.word	0x20000093
 8007070:	20000094 	.word	0x20000094
 8007074:	20000095 	.word	0x20000095

08007078 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b086      	sub	sp, #24
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	32b0      	adds	r2, #176	@ 0xb0
 800708c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007090:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007092:	2300      	movs	r3, #0
 8007094:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007096:	2300      	movs	r3, #0
 8007098:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800709a:	2300      	movs	r3, #0
 800709c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d101      	bne.n	80070a8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e0bf      	b.n	8007228 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d050      	beq.n	8007156 <USBD_CDC_Setup+0xde>
 80070b4:	2b20      	cmp	r3, #32
 80070b6:	f040 80af 	bne.w	8007218 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	88db      	ldrh	r3, [r3, #6]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d03a      	beq.n	8007138 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	b25b      	sxtb	r3, r3
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	da1b      	bge.n	8007104 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	33b0      	adds	r3, #176	@ 0xb0
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4413      	add	r3, r2
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80070e2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80070e4:	683a      	ldr	r2, [r7, #0]
 80070e6:	88d2      	ldrh	r2, [r2, #6]
 80070e8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	88db      	ldrh	r3, [r3, #6]
 80070ee:	2b07      	cmp	r3, #7
 80070f0:	bf28      	it	cs
 80070f2:	2307      	movcs	r3, #7
 80070f4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	89fa      	ldrh	r2, [r7, #14]
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f001 fd93 	bl	8008c28 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007102:	e090      	b.n	8007226 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	785a      	ldrb	r2, [r3, #1]
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	88db      	ldrh	r3, [r3, #6]
 8007112:	2b3f      	cmp	r3, #63	@ 0x3f
 8007114:	d803      	bhi.n	800711e <USBD_CDC_Setup+0xa6>
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	88db      	ldrh	r3, [r3, #6]
 800711a:	b2da      	uxtb	r2, r3
 800711c:	e000      	b.n	8007120 <USBD_CDC_Setup+0xa8>
 800711e:	2240      	movs	r2, #64	@ 0x40
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007126:	6939      	ldr	r1, [r7, #16]
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800712e:	461a      	mov	r2, r3
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f001 fda5 	bl	8008c80 <USBD_CtlPrepareRx>
      break;
 8007136:	e076      	b.n	8007226 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	33b0      	adds	r3, #176	@ 0xb0
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4413      	add	r3, r2
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	683a      	ldr	r2, [r7, #0]
 800714c:	7850      	ldrb	r0, [r2, #1]
 800714e:	2200      	movs	r2, #0
 8007150:	6839      	ldr	r1, [r7, #0]
 8007152:	4798      	blx	r3
      break;
 8007154:	e067      	b.n	8007226 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	785b      	ldrb	r3, [r3, #1]
 800715a:	2b0b      	cmp	r3, #11
 800715c:	d851      	bhi.n	8007202 <USBD_CDC_Setup+0x18a>
 800715e:	a201      	add	r2, pc, #4	@ (adr r2, 8007164 <USBD_CDC_Setup+0xec>)
 8007160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007164:	08007195 	.word	0x08007195
 8007168:	08007211 	.word	0x08007211
 800716c:	08007203 	.word	0x08007203
 8007170:	08007203 	.word	0x08007203
 8007174:	08007203 	.word	0x08007203
 8007178:	08007203 	.word	0x08007203
 800717c:	08007203 	.word	0x08007203
 8007180:	08007203 	.word	0x08007203
 8007184:	08007203 	.word	0x08007203
 8007188:	08007203 	.word	0x08007203
 800718c:	080071bf 	.word	0x080071bf
 8007190:	080071e9 	.word	0x080071e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800719a:	b2db      	uxtb	r3, r3
 800719c:	2b03      	cmp	r3, #3
 800719e:	d107      	bne.n	80071b0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80071a0:	f107 030a 	add.w	r3, r7, #10
 80071a4:	2202      	movs	r2, #2
 80071a6:	4619      	mov	r1, r3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f001 fd3d 	bl	8008c28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071ae:	e032      	b.n	8007216 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80071b0:	6839      	ldr	r1, [r7, #0]
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f001 fcbb 	bl	8008b2e <USBD_CtlError>
            ret = USBD_FAIL;
 80071b8:	2303      	movs	r3, #3
 80071ba:	75fb      	strb	r3, [r7, #23]
          break;
 80071bc:	e02b      	b.n	8007216 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	2b03      	cmp	r3, #3
 80071c8:	d107      	bne.n	80071da <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80071ca:	f107 030d 	add.w	r3, r7, #13
 80071ce:	2201      	movs	r2, #1
 80071d0:	4619      	mov	r1, r3
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f001 fd28 	bl	8008c28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071d8:	e01d      	b.n	8007216 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80071da:	6839      	ldr	r1, [r7, #0]
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f001 fca6 	bl	8008b2e <USBD_CtlError>
            ret = USBD_FAIL;
 80071e2:	2303      	movs	r3, #3
 80071e4:	75fb      	strb	r3, [r7, #23]
          break;
 80071e6:	e016      	b.n	8007216 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	2b03      	cmp	r3, #3
 80071f2:	d00f      	beq.n	8007214 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80071f4:	6839      	ldr	r1, [r7, #0]
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f001 fc99 	bl	8008b2e <USBD_CtlError>
            ret = USBD_FAIL;
 80071fc:	2303      	movs	r3, #3
 80071fe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007200:	e008      	b.n	8007214 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007202:	6839      	ldr	r1, [r7, #0]
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f001 fc92 	bl	8008b2e <USBD_CtlError>
          ret = USBD_FAIL;
 800720a:	2303      	movs	r3, #3
 800720c:	75fb      	strb	r3, [r7, #23]
          break;
 800720e:	e002      	b.n	8007216 <USBD_CDC_Setup+0x19e>
          break;
 8007210:	bf00      	nop
 8007212:	e008      	b.n	8007226 <USBD_CDC_Setup+0x1ae>
          break;
 8007214:	bf00      	nop
      }
      break;
 8007216:	e006      	b.n	8007226 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007218:	6839      	ldr	r1, [r7, #0]
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f001 fc87 	bl	8008b2e <USBD_CtlError>
      ret = USBD_FAIL;
 8007220:	2303      	movs	r3, #3
 8007222:	75fb      	strb	r3, [r7, #23]
      break;
 8007224:	bf00      	nop
  }

  return (uint8_t)ret;
 8007226:	7dfb      	ldrb	r3, [r7, #23]
}
 8007228:	4618      	mov	r0, r3
 800722a:	3718      	adds	r7, #24
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	460b      	mov	r3, r1
 800723a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007242:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	32b0      	adds	r2, #176	@ 0xb0
 800724e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d101      	bne.n	800725a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007256:	2303      	movs	r3, #3
 8007258:	e065      	b.n	8007326 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	32b0      	adds	r2, #176	@ 0xb0
 8007264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007268:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800726a:	78fb      	ldrb	r3, [r7, #3]
 800726c:	f003 020f 	and.w	r2, r3, #15
 8007270:	6879      	ldr	r1, [r7, #4]
 8007272:	4613      	mov	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4413      	add	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	440b      	add	r3, r1
 800727c:	3318      	adds	r3, #24
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d02f      	beq.n	80072e4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007284:	78fb      	ldrb	r3, [r7, #3]
 8007286:	f003 020f 	and.w	r2, r3, #15
 800728a:	6879      	ldr	r1, [r7, #4]
 800728c:	4613      	mov	r3, r2
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	4413      	add	r3, r2
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	440b      	add	r3, r1
 8007296:	3318      	adds	r3, #24
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	78fb      	ldrb	r3, [r7, #3]
 800729c:	f003 010f 	and.w	r1, r3, #15
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	460b      	mov	r3, r1
 80072a4:	00db      	lsls	r3, r3, #3
 80072a6:	440b      	add	r3, r1
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4403      	add	r3, r0
 80072ac:	331c      	adds	r3, #28
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80072b4:	fb01 f303 	mul.w	r3, r1, r3
 80072b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d112      	bne.n	80072e4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80072be:	78fb      	ldrb	r3, [r7, #3]
 80072c0:	f003 020f 	and.w	r2, r3, #15
 80072c4:	6879      	ldr	r1, [r7, #4]
 80072c6:	4613      	mov	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4413      	add	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	440b      	add	r3, r1
 80072d0:	3318      	adds	r3, #24
 80072d2:	2200      	movs	r2, #0
 80072d4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80072d6:	78f9      	ldrb	r1, [r7, #3]
 80072d8:	2300      	movs	r3, #0
 80072da:	2200      	movs	r2, #0
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f002 f99a 	bl	8009616 <USBD_LL_Transmit>
 80072e2:	e01f      	b.n	8007324 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	33b0      	adds	r3, #176	@ 0xb0
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4413      	add	r3, r2
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d010      	beq.n	8007324 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	33b0      	adds	r3, #176	@ 0xb0
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4413      	add	r3, r2
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800731a:	68ba      	ldr	r2, [r7, #8]
 800731c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007320:	78fa      	ldrb	r2, [r7, #3]
 8007322:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b084      	sub	sp, #16
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	460b      	mov	r3, r1
 8007338:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	32b0      	adds	r2, #176	@ 0xb0
 8007344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007348:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	32b0      	adds	r2, #176	@ 0xb0
 8007354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d101      	bne.n	8007360 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800735c:	2303      	movs	r3, #3
 800735e:	e01a      	b.n	8007396 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007360:	78fb      	ldrb	r3, [r7, #3]
 8007362:	4619      	mov	r1, r3
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f002 f998 	bl	800969a <USBD_LL_GetRxDataSize>
 800736a:	4602      	mov	r2, r0
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	33b0      	adds	r3, #176	@ 0xb0
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4413      	add	r3, r2
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	68fa      	ldr	r2, [r7, #12]
 8007386:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007390:	4611      	mov	r1, r2
 8007392:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b084      	sub	sp, #16
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	32b0      	adds	r2, #176	@ 0xb0
 80073b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d101      	bne.n	80073c0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80073bc:	2303      	movs	r3, #3
 80073be:	e024      	b.n	800740a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	33b0      	adds	r3, #176	@ 0xb0
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	4413      	add	r3, r2
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d019      	beq.n	8007408 <USBD_CDC_EP0_RxReady+0x6a>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80073da:	2bff      	cmp	r3, #255	@ 0xff
 80073dc:	d014      	beq.n	8007408 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	33b0      	adds	r3, #176	@ 0xb0
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80073f6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80073fe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	22ff      	movs	r2, #255	@ 0xff
 8007404:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
	...

08007414 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b086      	sub	sp, #24
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800741c:	2182      	movs	r1, #130	@ 0x82
 800741e:	4818      	ldr	r0, [pc, #96]	@ (8007480 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007420:	f000 fd4f 	bl	8007ec2 <USBD_GetEpDesc>
 8007424:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007426:	2101      	movs	r1, #1
 8007428:	4815      	ldr	r0, [pc, #84]	@ (8007480 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800742a:	f000 fd4a 	bl	8007ec2 <USBD_GetEpDesc>
 800742e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007430:	2181      	movs	r1, #129	@ 0x81
 8007432:	4813      	ldr	r0, [pc, #76]	@ (8007480 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007434:	f000 fd45 	bl	8007ec2 <USBD_GetEpDesc>
 8007438:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d002      	beq.n	8007446 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	2210      	movs	r2, #16
 8007444:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d006      	beq.n	800745a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	2200      	movs	r2, #0
 8007450:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007454:	711a      	strb	r2, [r3, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d006      	beq.n	800746e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007468:	711a      	strb	r2, [r3, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2243      	movs	r2, #67	@ 0x43
 8007472:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007474:	4b02      	ldr	r3, [pc, #8]	@ (8007480 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007476:	4618      	mov	r0, r3
 8007478:	3718      	adds	r7, #24
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	20000050 	.word	0x20000050

08007484 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800748c:	2182      	movs	r1, #130	@ 0x82
 800748e:	4818      	ldr	r0, [pc, #96]	@ (80074f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007490:	f000 fd17 	bl	8007ec2 <USBD_GetEpDesc>
 8007494:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007496:	2101      	movs	r1, #1
 8007498:	4815      	ldr	r0, [pc, #84]	@ (80074f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800749a:	f000 fd12 	bl	8007ec2 <USBD_GetEpDesc>
 800749e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80074a0:	2181      	movs	r1, #129	@ 0x81
 80074a2:	4813      	ldr	r0, [pc, #76]	@ (80074f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80074a4:	f000 fd0d 	bl	8007ec2 <USBD_GetEpDesc>
 80074a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d002      	beq.n	80074b6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	2210      	movs	r2, #16
 80074b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d006      	beq.n	80074ca <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	2200      	movs	r2, #0
 80074c0:	711a      	strb	r2, [r3, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f042 0202 	orr.w	r2, r2, #2
 80074c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d006      	beq.n	80074de <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	711a      	strb	r2, [r3, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f042 0202 	orr.w	r2, r2, #2
 80074dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2243      	movs	r2, #67	@ 0x43
 80074e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80074e4:	4b02      	ldr	r3, [pc, #8]	@ (80074f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3718      	adds	r7, #24
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	20000050 	.word	0x20000050

080074f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80074fc:	2182      	movs	r1, #130	@ 0x82
 80074fe:	4818      	ldr	r0, [pc, #96]	@ (8007560 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007500:	f000 fcdf 	bl	8007ec2 <USBD_GetEpDesc>
 8007504:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007506:	2101      	movs	r1, #1
 8007508:	4815      	ldr	r0, [pc, #84]	@ (8007560 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800750a:	f000 fcda 	bl	8007ec2 <USBD_GetEpDesc>
 800750e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007510:	2181      	movs	r1, #129	@ 0x81
 8007512:	4813      	ldr	r0, [pc, #76]	@ (8007560 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007514:	f000 fcd5 	bl	8007ec2 <USBD_GetEpDesc>
 8007518:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d002      	beq.n	8007526 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	2210      	movs	r2, #16
 8007524:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d006      	beq.n	800753a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	2200      	movs	r2, #0
 8007530:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007534:	711a      	strb	r2, [r3, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d006      	beq.n	800754e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007548:	711a      	strb	r2, [r3, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2243      	movs	r2, #67	@ 0x43
 8007552:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007554:	4b02      	ldr	r3, [pc, #8]	@ (8007560 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007556:	4618      	mov	r0, r3
 8007558:	3718      	adds	r7, #24
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	20000050 	.word	0x20000050

08007564 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	220a      	movs	r2, #10
 8007570:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007572:	4b03      	ldr	r3, [pc, #12]	@ (8007580 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007574:	4618      	mov	r0, r3
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr
 8007580:	2000000c 	.word	0x2000000c

08007584 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d101      	bne.n	8007598 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007594:	2303      	movs	r3, #3
 8007596:	e009      	b.n	80075ac <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	33b0      	adds	r3, #176	@ 0xb0
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	4413      	add	r3, r2
 80075a6:	683a      	ldr	r2, [r7, #0]
 80075a8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b087      	sub	sp, #28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	32b0      	adds	r2, #176	@ 0xb0
 80075ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075d2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d101      	bne.n	80075de <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80075da:	2303      	movs	r3, #3
 80075dc:	e008      	b.n	80075f0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	371c      	adds	r7, #28
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	32b0      	adds	r2, #176	@ 0xb0
 8007610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007614:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d101      	bne.n	8007620 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800761c:	2303      	movs	r3, #3
 800761e:	e004      	b.n	800762a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	683a      	ldr	r2, [r7, #0]
 8007624:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3714      	adds	r7, #20
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
	...

08007638 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	32b0      	adds	r2, #176	@ 0xb0
 800764a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800764e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007650:	2301      	movs	r3, #1
 8007652:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d101      	bne.n	800765e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800765a:	2303      	movs	r3, #3
 800765c:	e025      	b.n	80076aa <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007664:	2b00      	cmp	r3, #0
 8007666:	d11f      	bne.n	80076a8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	2201      	movs	r2, #1
 800766c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007670:	4b10      	ldr	r3, [pc, #64]	@ (80076b4 <USBD_CDC_TransmitPacket+0x7c>)
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	f003 020f 	and.w	r2, r3, #15
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	4613      	mov	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4403      	add	r3, r0
 800768a:	3318      	adds	r3, #24
 800768c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800768e:	4b09      	ldr	r3, [pc, #36]	@ (80076b4 <USBD_CDC_TransmitPacket+0x7c>)
 8007690:	7819      	ldrb	r1, [r3, #0]
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f001 ffb9 	bl	8009616 <USBD_LL_Transmit>

    ret = USBD_OK;
 80076a4:	2300      	movs	r3, #0
 80076a6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80076a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	20000093 	.word	0x20000093

080076b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	32b0      	adds	r2, #176	@ 0xb0
 80076ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ce:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	32b0      	adds	r2, #176	@ 0xb0
 80076da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d101      	bne.n	80076e6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80076e2:	2303      	movs	r3, #3
 80076e4:	e018      	b.n	8007718 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	7c1b      	ldrb	r3, [r3, #16]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d10a      	bne.n	8007704 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80076ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007720 <USBD_CDC_ReceivePacket+0x68>)
 80076f0:	7819      	ldrb	r1, [r3, #0]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80076f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f001 ffab 	bl	8009658 <USBD_LL_PrepareReceive>
 8007702:	e008      	b.n	8007716 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007704:	4b06      	ldr	r3, [pc, #24]	@ (8007720 <USBD_CDC_ReceivePacket+0x68>)
 8007706:	7819      	ldrb	r1, [r3, #0]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800770e:	2340      	movs	r3, #64	@ 0x40
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f001 ffa1 	bl	8009658 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}
 8007720:	20000094 	.word	0x20000094

08007724 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b086      	sub	sp, #24
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	4613      	mov	r3, r2
 8007730:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d101      	bne.n	800773c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007738:	2303      	movs	r3, #3
 800773a:	e01f      	b.n	800777c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d003      	beq.n	8007762 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	79fa      	ldrb	r2, [r7, #7]
 800776e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f001 fe1b 	bl	80093ac <USBD_LL_Init>
 8007776:	4603      	mov	r3, r0
 8007778:	75fb      	strb	r3, [r7, #23]

  return ret;
 800777a:	7dfb      	ldrb	r3, [r7, #23]
}
 800777c:	4618      	mov	r0, r3
 800777e:	3718      	adds	r7, #24
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800778e:	2300      	movs	r3, #0
 8007790:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007798:	2303      	movs	r3, #3
 800779a:	e025      	b.n	80077e8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	32ae      	adds	r2, #174	@ 0xae
 80077ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00f      	beq.n	80077d8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	32ae      	adds	r2, #174	@ 0xae
 80077c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c8:	f107 020e 	add.w	r2, r7, #14
 80077cc:	4610      	mov	r0, r2
 80077ce:	4798      	blx	r3
 80077d0:	4602      	mov	r2, r0
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80077de:	1c5a      	adds	r2, r3, #1
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f001 fe23 	bl	8009444 <USBD_LL_Start>
 80077fe:	4603      	mov	r3, r0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007810:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007812:	4618      	mov	r0, r3
 8007814:	370c      	adds	r7, #12
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr

0800781e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b084      	sub	sp, #16
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
 8007826:	460b      	mov	r3, r1
 8007828:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800782a:	2300      	movs	r3, #0
 800782c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007834:	2b00      	cmp	r3, #0
 8007836:	d009      	beq.n	800784c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	78fa      	ldrb	r2, [r7, #3]
 8007842:	4611      	mov	r1, r2
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	4798      	blx	r3
 8007848:	4603      	mov	r3, r0
 800784a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800784c:	7bfb      	ldrb	r3, [r7, #15]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b084      	sub	sp, #16
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
 800785e:	460b      	mov	r3, r1
 8007860:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	78fa      	ldrb	r2, [r7, #3]
 8007870:	4611      	mov	r1, r2
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	4798      	blx	r3
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d001      	beq.n	8007880 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800787c:	2303      	movs	r3, #3
 800787e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007880:	7bfb      	ldrb	r3, [r7, #15]
}
 8007882:	4618      	mov	r0, r3
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b084      	sub	sp, #16
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
 8007892:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800789a:	6839      	ldr	r1, [r7, #0]
 800789c:	4618      	mov	r0, r3
 800789e:	f001 f90c 	bl	8008aba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2201      	movs	r2, #1
 80078a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80078b0:	461a      	mov	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80078be:	f003 031f 	and.w	r3, r3, #31
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	d01a      	beq.n	80078fc <USBD_LL_SetupStage+0x72>
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d822      	bhi.n	8007910 <USBD_LL_SetupStage+0x86>
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d002      	beq.n	80078d4 <USBD_LL_SetupStage+0x4a>
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d00a      	beq.n	80078e8 <USBD_LL_SetupStage+0x5e>
 80078d2:	e01d      	b.n	8007910 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80078da:	4619      	mov	r1, r3
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fb63 	bl	8007fa8 <USBD_StdDevReq>
 80078e2:	4603      	mov	r3, r0
 80078e4:	73fb      	strb	r3, [r7, #15]
      break;
 80078e6:	e020      	b.n	800792a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80078ee:	4619      	mov	r1, r3
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fbcb 	bl	800808c <USBD_StdItfReq>
 80078f6:	4603      	mov	r3, r0
 80078f8:	73fb      	strb	r3, [r7, #15]
      break;
 80078fa:	e016      	b.n	800792a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007902:	4619      	mov	r1, r3
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fc2d 	bl	8008164 <USBD_StdEPReq>
 800790a:	4603      	mov	r3, r0
 800790c:	73fb      	strb	r3, [r7, #15]
      break;
 800790e:	e00c      	b.n	800792a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007916:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800791a:	b2db      	uxtb	r3, r3
 800791c:	4619      	mov	r1, r3
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f001 fdf0 	bl	8009504 <USBD_LL_StallEP>
 8007924:	4603      	mov	r3, r0
 8007926:	73fb      	strb	r3, [r7, #15]
      break;
 8007928:	bf00      	nop
  }

  return ret;
 800792a:	7bfb      	ldrb	r3, [r7, #15]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b086      	sub	sp, #24
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	460b      	mov	r3, r1
 800793e:	607a      	str	r2, [r7, #4]
 8007940:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007942:	2300      	movs	r3, #0
 8007944:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007946:	7afb      	ldrb	r3, [r7, #11]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d16e      	bne.n	8007a2a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007952:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800795a:	2b03      	cmp	r3, #3
 800795c:	f040 8098 	bne.w	8007a90 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	689a      	ldr	r2, [r3, #8]
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	429a      	cmp	r2, r3
 800796a:	d913      	bls.n	8007994 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	689a      	ldr	r2, [r3, #8]
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	1ad2      	subs	r2, r2, r3
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	68da      	ldr	r2, [r3, #12]
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	4293      	cmp	r3, r2
 8007984:	bf28      	it	cs
 8007986:	4613      	movcs	r3, r2
 8007988:	461a      	mov	r2, r3
 800798a:	6879      	ldr	r1, [r7, #4]
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f001 f994 	bl	8008cba <USBD_CtlContinueRx>
 8007992:	e07d      	b.n	8007a90 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800799a:	f003 031f 	and.w	r3, r3, #31
 800799e:	2b02      	cmp	r3, #2
 80079a0:	d014      	beq.n	80079cc <USBD_LL_DataOutStage+0x98>
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d81d      	bhi.n	80079e2 <USBD_LL_DataOutStage+0xae>
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d002      	beq.n	80079b0 <USBD_LL_DataOutStage+0x7c>
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d003      	beq.n	80079b6 <USBD_LL_DataOutStage+0x82>
 80079ae:	e018      	b.n	80079e2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80079b0:	2300      	movs	r3, #0
 80079b2:	75bb      	strb	r3, [r7, #22]
            break;
 80079b4:	e018      	b.n	80079e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	4619      	mov	r1, r3
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f000 fa64 	bl	8007e8e <USBD_CoreFindIF>
 80079c6:	4603      	mov	r3, r0
 80079c8:	75bb      	strb	r3, [r7, #22]
            break;
 80079ca:	e00d      	b.n	80079e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	4619      	mov	r1, r3
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f000 fa66 	bl	8007ea8 <USBD_CoreFindEP>
 80079dc:	4603      	mov	r3, r0
 80079de:	75bb      	strb	r3, [r7, #22]
            break;
 80079e0:	e002      	b.n	80079e8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80079e2:	2300      	movs	r3, #0
 80079e4:	75bb      	strb	r3, [r7, #22]
            break;
 80079e6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80079e8:	7dbb      	ldrb	r3, [r7, #22]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d119      	bne.n	8007a22 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b03      	cmp	r3, #3
 80079f8:	d113      	bne.n	8007a22 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80079fa:	7dba      	ldrb	r2, [r7, #22]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	32ae      	adds	r2, #174	@ 0xae
 8007a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00b      	beq.n	8007a22 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007a0a:	7dba      	ldrb	r2, [r7, #22]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007a12:	7dba      	ldrb	r2, [r7, #22]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	32ae      	adds	r2, #174	@ 0xae
 8007a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	f001 f95a 	bl	8008cdc <USBD_CtlSendStatus>
 8007a28:	e032      	b.n	8007a90 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007a2a:	7afb      	ldrb	r3, [r7, #11]
 8007a2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	4619      	mov	r1, r3
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f000 fa37 	bl	8007ea8 <USBD_CoreFindEP>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a3e:	7dbb      	ldrb	r3, [r7, #22]
 8007a40:	2bff      	cmp	r3, #255	@ 0xff
 8007a42:	d025      	beq.n	8007a90 <USBD_LL_DataOutStage+0x15c>
 8007a44:	7dbb      	ldrb	r3, [r7, #22]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d122      	bne.n	8007a90 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b03      	cmp	r3, #3
 8007a54:	d117      	bne.n	8007a86 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007a56:	7dba      	ldrb	r2, [r7, #22]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	32ae      	adds	r2, #174	@ 0xae
 8007a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a60:	699b      	ldr	r3, [r3, #24]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00f      	beq.n	8007a86 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007a66:	7dba      	ldrb	r2, [r7, #22]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007a6e:	7dba      	ldrb	r2, [r7, #22]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	32ae      	adds	r2, #174	@ 0xae
 8007a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	7afa      	ldrb	r2, [r7, #11]
 8007a7c:	4611      	mov	r1, r2
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	4798      	blx	r3
 8007a82:	4603      	mov	r3, r0
 8007a84:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007a86:	7dfb      	ldrb	r3, [r7, #23]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d001      	beq.n	8007a90 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007a8c:	7dfb      	ldrb	r3, [r7, #23]
 8007a8e:	e000      	b.n	8007a92 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3718      	adds	r7, #24
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b086      	sub	sp, #24
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	60f8      	str	r0, [r7, #12]
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	607a      	str	r2, [r7, #4]
 8007aa6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007aa8:	7afb      	ldrb	r3, [r7, #11]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d16f      	bne.n	8007b8e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	3314      	adds	r3, #20
 8007ab2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d15a      	bne.n	8007b74 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	689a      	ldr	r2, [r3, #8]
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d914      	bls.n	8007af4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	689a      	ldr	r2, [r3, #8]
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	1ad2      	subs	r2, r2, r3
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	461a      	mov	r2, r3
 8007ade:	6879      	ldr	r1, [r7, #4]
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f001 f8bc 	bl	8008c5e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	2200      	movs	r2, #0
 8007aea:	2100      	movs	r1, #0
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f001 fdb3 	bl	8009658 <USBD_LL_PrepareReceive>
 8007af2:	e03f      	b.n	8007b74 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	68da      	ldr	r2, [r3, #12]
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d11c      	bne.n	8007b3a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	685a      	ldr	r2, [r3, #4]
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d316      	bcc.n	8007b3a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d20f      	bcs.n	8007b3a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f001 f89d 	bl	8008c5e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	2200      	movs	r2, #0
 8007b30:	2100      	movs	r1, #0
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f001 fd90 	bl	8009658 <USBD_LL_PrepareReceive>
 8007b38:	e01c      	b.n	8007b74 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	2b03      	cmp	r3, #3
 8007b44:	d10f      	bne.n	8007b66 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d009      	beq.n	8007b66 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b66:	2180      	movs	r1, #128	@ 0x80
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f001 fccb 	bl	8009504 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f001 f8c7 	bl	8008d02 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d03a      	beq.n	8007bf4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f7ff fe42 	bl	8007808 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007b8c:	e032      	b.n	8007bf4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007b8e:	7afb      	ldrb	r3, [r7, #11]
 8007b90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	4619      	mov	r1, r3
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f000 f985 	bl	8007ea8 <USBD_CoreFindEP>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ba2:	7dfb      	ldrb	r3, [r7, #23]
 8007ba4:	2bff      	cmp	r3, #255	@ 0xff
 8007ba6:	d025      	beq.n	8007bf4 <USBD_LL_DataInStage+0x15a>
 8007ba8:	7dfb      	ldrb	r3, [r7, #23]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d122      	bne.n	8007bf4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	2b03      	cmp	r3, #3
 8007bb8:	d11c      	bne.n	8007bf4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007bba:	7dfa      	ldrb	r2, [r7, #23]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	32ae      	adds	r2, #174	@ 0xae
 8007bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bc4:	695b      	ldr	r3, [r3, #20]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d014      	beq.n	8007bf4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007bca:	7dfa      	ldrb	r2, [r7, #23]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007bd2:	7dfa      	ldrb	r2, [r7, #23]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	32ae      	adds	r2, #174	@ 0xae
 8007bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	7afa      	ldrb	r2, [r7, #11]
 8007be0:	4611      	mov	r1, r2
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	4798      	blx	r3
 8007be6:	4603      	mov	r3, r0
 8007be8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007bea:	7dbb      	ldrb	r3, [r7, #22]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d001      	beq.n	8007bf4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007bf0:	7dbb      	ldrb	r3, [r7, #22]
 8007bf2:	e000      	b.n	8007bf6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3718      	adds	r7, #24
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b084      	sub	sp, #16
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c06:	2300      	movs	r3, #0
 8007c08:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d014      	beq.n	8007c64 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00e      	beq.n	8007c64 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	6852      	ldr	r2, [r2, #4]
 8007c52:	b2d2      	uxtb	r2, r2
 8007c54:	4611      	mov	r1, r2
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	4798      	blx	r3
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d001      	beq.n	8007c64 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007c60:	2303      	movs	r3, #3
 8007c62:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c64:	2340      	movs	r3, #64	@ 0x40
 8007c66:	2200      	movs	r2, #0
 8007c68:	2100      	movs	r1, #0
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f001 fc05 	bl	800947a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2240      	movs	r2, #64	@ 0x40
 8007c7c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c80:	2340      	movs	r3, #64	@ 0x40
 8007c82:	2200      	movs	r2, #0
 8007c84:	2180      	movs	r1, #128	@ 0x80
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f001 fbf7 	bl	800947a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2240      	movs	r2, #64	@ 0x40
 8007c96:	621a      	str	r2, [r3, #32]

  return ret;
 8007c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b083      	sub	sp, #12
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	460b      	mov	r3, r1
 8007cac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	78fa      	ldrb	r2, [r7, #3]
 8007cb2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	370c      	adds	r7, #12
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr

08007cc2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	b083      	sub	sp, #12
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b04      	cmp	r3, #4
 8007cd4:	d006      	beq.n	8007ce4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cdc:	b2da      	uxtb	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2204      	movs	r2, #4
 8007ce8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b083      	sub	sp, #12
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b04      	cmp	r3, #4
 8007d0c:	d106      	bne.n	8007d1c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007d14:	b2da      	uxtb	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	370c      	adds	r7, #12
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr

08007d2a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b082      	sub	sp, #8
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b03      	cmp	r3, #3
 8007d3c:	d110      	bne.n	8007d60 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00b      	beq.n	8007d60 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d4e:	69db      	ldr	r3, [r3, #28]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d005      	beq.n	8007d60 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d5a:	69db      	ldr	r3, [r3, #28]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b082      	sub	sp, #8
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
 8007d72:	460b      	mov	r3, r1
 8007d74:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	32ae      	adds	r2, #174	@ 0xae
 8007d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d101      	bne.n	8007d8c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	e01c      	b.n	8007dc6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	2b03      	cmp	r3, #3
 8007d96:	d115      	bne.n	8007dc4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	32ae      	adds	r2, #174	@ 0xae
 8007da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da6:	6a1b      	ldr	r3, [r3, #32]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00b      	beq.n	8007dc4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	32ae      	adds	r2, #174	@ 0xae
 8007db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dba:	6a1b      	ldr	r3, [r3, #32]
 8007dbc:	78fa      	ldrb	r2, [r7, #3]
 8007dbe:	4611      	mov	r1, r2
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}

08007dce <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b082      	sub	sp, #8
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	32ae      	adds	r2, #174	@ 0xae
 8007de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d101      	bne.n	8007df0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007dec:	2303      	movs	r3, #3
 8007dee:	e01c      	b.n	8007e2a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	2b03      	cmp	r3, #3
 8007dfa:	d115      	bne.n	8007e28 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	32ae      	adds	r2, #174	@ 0xae
 8007e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00b      	beq.n	8007e28 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	32ae      	adds	r2, #174	@ 0xae
 8007e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e20:	78fa      	ldrb	r2, [r7, #3]
 8007e22:	4611      	mov	r1, r2
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b083      	sub	sp, #12
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007e50:	2300      	movs	r3, #0
 8007e52:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00e      	beq.n	8007e84 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	6852      	ldr	r2, [r2, #4]
 8007e72:	b2d2      	uxtb	r2, r2
 8007e74:	4611      	mov	r1, r2
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	4798      	blx	r3
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d001      	beq.n	8007e84 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007e80:	2303      	movs	r3, #3
 8007e82:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007e8e:	b480      	push	{r7}
 8007e90:	b083      	sub	sp, #12
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
 8007e96:	460b      	mov	r3, r1
 8007e98:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007e9a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007eb4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	370c      	adds	r7, #12
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr

08007ec2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b086      	sub	sp, #24
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
 8007eca:	460b      	mov	r3, r1
 8007ecc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	885b      	ldrh	r3, [r3, #2]
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	7812      	ldrb	r2, [r2, #0]
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d91f      	bls.n	8007f28 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007eee:	e013      	b.n	8007f18 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007ef0:	f107 030a 	add.w	r3, r7, #10
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	6978      	ldr	r0, [r7, #20]
 8007ef8:	f000 f81b 	bl	8007f32 <USBD_GetNextDesc>
 8007efc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	785b      	ldrb	r3, [r3, #1]
 8007f02:	2b05      	cmp	r3, #5
 8007f04:	d108      	bne.n	8007f18 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	789b      	ldrb	r3, [r3, #2]
 8007f0e:	78fa      	ldrb	r2, [r7, #3]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d008      	beq.n	8007f26 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007f14:	2300      	movs	r3, #0
 8007f16:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	885b      	ldrh	r3, [r3, #2]
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	897b      	ldrh	r3, [r7, #10]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d8e5      	bhi.n	8007ef0 <USBD_GetEpDesc+0x2e>
 8007f24:	e000      	b.n	8007f28 <USBD_GetEpDesc+0x66>
          break;
 8007f26:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007f28:	693b      	ldr	r3, [r7, #16]
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3718      	adds	r7, #24
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b085      	sub	sp, #20
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
 8007f3a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	881b      	ldrh	r3, [r3, #0]
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	7812      	ldrb	r2, [r2, #0]
 8007f48:	4413      	add	r3, r2
 8007f4a:	b29a      	uxth	r2, r3
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	461a      	mov	r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4413      	add	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3714      	adds	r7, #20
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b087      	sub	sp, #28
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007f88:	8a3b      	ldrh	r3, [r7, #16]
 8007f8a:	021b      	lsls	r3, r3, #8
 8007f8c:	b21a      	sxth	r2, r3
 8007f8e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	b21b      	sxth	r3, r3
 8007f96:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007f98:	89fb      	ldrh	r3, [r7, #14]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	371c      	adds	r7, #28
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr
	...

08007fa8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007fbe:	2b40      	cmp	r3, #64	@ 0x40
 8007fc0:	d005      	beq.n	8007fce <USBD_StdDevReq+0x26>
 8007fc2:	2b40      	cmp	r3, #64	@ 0x40
 8007fc4:	d857      	bhi.n	8008076 <USBD_StdDevReq+0xce>
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00f      	beq.n	8007fea <USBD_StdDevReq+0x42>
 8007fca:	2b20      	cmp	r3, #32
 8007fcc:	d153      	bne.n	8008076 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	32ae      	adds	r2, #174	@ 0xae
 8007fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	6839      	ldr	r1, [r7, #0]
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	4798      	blx	r3
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8007fe8:	e04a      	b.n	8008080 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	785b      	ldrb	r3, [r3, #1]
 8007fee:	2b09      	cmp	r3, #9
 8007ff0:	d83b      	bhi.n	800806a <USBD_StdDevReq+0xc2>
 8007ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ff8 <USBD_StdDevReq+0x50>)
 8007ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff8:	0800804d 	.word	0x0800804d
 8007ffc:	08008061 	.word	0x08008061
 8008000:	0800806b 	.word	0x0800806b
 8008004:	08008057 	.word	0x08008057
 8008008:	0800806b 	.word	0x0800806b
 800800c:	0800802b 	.word	0x0800802b
 8008010:	08008021 	.word	0x08008021
 8008014:	0800806b 	.word	0x0800806b
 8008018:	08008043 	.word	0x08008043
 800801c:	08008035 	.word	0x08008035
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008020:	6839      	ldr	r1, [r7, #0]
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 fa3c 	bl	80084a0 <USBD_GetDescriptor>
          break;
 8008028:	e024      	b.n	8008074 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800802a:	6839      	ldr	r1, [r7, #0]
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 fba1 	bl	8008774 <USBD_SetAddress>
          break;
 8008032:	e01f      	b.n	8008074 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008034:	6839      	ldr	r1, [r7, #0]
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 fbe0 	bl	80087fc <USBD_SetConfig>
 800803c:	4603      	mov	r3, r0
 800803e:	73fb      	strb	r3, [r7, #15]
          break;
 8008040:	e018      	b.n	8008074 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008042:	6839      	ldr	r1, [r7, #0]
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fc83 	bl	8008950 <USBD_GetConfig>
          break;
 800804a:	e013      	b.n	8008074 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800804c:	6839      	ldr	r1, [r7, #0]
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 fcb4 	bl	80089bc <USBD_GetStatus>
          break;
 8008054:	e00e      	b.n	8008074 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008056:	6839      	ldr	r1, [r7, #0]
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 fce3 	bl	8008a24 <USBD_SetFeature>
          break;
 800805e:	e009      	b.n	8008074 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fd07 	bl	8008a76 <USBD_ClrFeature>
          break;
 8008068:	e004      	b.n	8008074 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800806a:	6839      	ldr	r1, [r7, #0]
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 fd5e 	bl	8008b2e <USBD_CtlError>
          break;
 8008072:	bf00      	nop
      }
      break;
 8008074:	e004      	b.n	8008080 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008076:	6839      	ldr	r1, [r7, #0]
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 fd58 	bl	8008b2e <USBD_CtlError>
      break;
 800807e:	bf00      	nop
  }

  return ret;
 8008080:	7bfb      	ldrb	r3, [r7, #15]
}
 8008082:	4618      	mov	r0, r3
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop

0800808c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008096:	2300      	movs	r3, #0
 8008098:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80080a2:	2b40      	cmp	r3, #64	@ 0x40
 80080a4:	d005      	beq.n	80080b2 <USBD_StdItfReq+0x26>
 80080a6:	2b40      	cmp	r3, #64	@ 0x40
 80080a8:	d852      	bhi.n	8008150 <USBD_StdItfReq+0xc4>
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d001      	beq.n	80080b2 <USBD_StdItfReq+0x26>
 80080ae:	2b20      	cmp	r3, #32
 80080b0:	d14e      	bne.n	8008150 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	3b01      	subs	r3, #1
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d840      	bhi.n	8008142 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	889b      	ldrh	r3, [r3, #4]
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d836      	bhi.n	8008138 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	889b      	ldrh	r3, [r3, #4]
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	4619      	mov	r1, r3
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f7ff fedb 	bl	8007e8e <USBD_CoreFindIF>
 80080d8:	4603      	mov	r3, r0
 80080da:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080dc:	7bbb      	ldrb	r3, [r7, #14]
 80080de:	2bff      	cmp	r3, #255	@ 0xff
 80080e0:	d01d      	beq.n	800811e <USBD_StdItfReq+0x92>
 80080e2:	7bbb      	ldrb	r3, [r7, #14]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d11a      	bne.n	800811e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80080e8:	7bba      	ldrb	r2, [r7, #14]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	32ae      	adds	r2, #174	@ 0xae
 80080ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00f      	beq.n	8008118 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80080f8:	7bba      	ldrb	r2, [r7, #14]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008100:	7bba      	ldrb	r2, [r7, #14]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	32ae      	adds	r2, #174	@ 0xae
 8008106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	6839      	ldr	r1, [r7, #0]
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	4798      	blx	r3
 8008112:	4603      	mov	r3, r0
 8008114:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008116:	e004      	b.n	8008122 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008118:	2303      	movs	r3, #3
 800811a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800811c:	e001      	b.n	8008122 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800811e:	2303      	movs	r3, #3
 8008120:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	88db      	ldrh	r3, [r3, #6]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d110      	bne.n	800814c <USBD_StdItfReq+0xc0>
 800812a:	7bfb      	ldrb	r3, [r7, #15]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d10d      	bne.n	800814c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fdd3 	bl	8008cdc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008136:	e009      	b.n	800814c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008138:	6839      	ldr	r1, [r7, #0]
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fcf7 	bl	8008b2e <USBD_CtlError>
          break;
 8008140:	e004      	b.n	800814c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008142:	6839      	ldr	r1, [r7, #0]
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 fcf2 	bl	8008b2e <USBD_CtlError>
          break;
 800814a:	e000      	b.n	800814e <USBD_StdItfReq+0xc2>
          break;
 800814c:	bf00      	nop
      }
      break;
 800814e:	e004      	b.n	800815a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008150:	6839      	ldr	r1, [r7, #0]
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fceb 	bl	8008b2e <USBD_CtlError>
      break;
 8008158:	bf00      	nop
  }

  return ret;
 800815a:	7bfb      	ldrb	r3, [r7, #15]
}
 800815c:	4618      	mov	r0, r3
 800815e:	3710      	adds	r7, #16
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800816e:	2300      	movs	r3, #0
 8008170:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	889b      	ldrh	r3, [r3, #4]
 8008176:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008180:	2b40      	cmp	r3, #64	@ 0x40
 8008182:	d007      	beq.n	8008194 <USBD_StdEPReq+0x30>
 8008184:	2b40      	cmp	r3, #64	@ 0x40
 8008186:	f200 817f 	bhi.w	8008488 <USBD_StdEPReq+0x324>
 800818a:	2b00      	cmp	r3, #0
 800818c:	d02a      	beq.n	80081e4 <USBD_StdEPReq+0x80>
 800818e:	2b20      	cmp	r3, #32
 8008190:	f040 817a 	bne.w	8008488 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008194:	7bbb      	ldrb	r3, [r7, #14]
 8008196:	4619      	mov	r1, r3
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f7ff fe85 	bl	8007ea8 <USBD_CoreFindEP>
 800819e:	4603      	mov	r3, r0
 80081a0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081a2:	7b7b      	ldrb	r3, [r7, #13]
 80081a4:	2bff      	cmp	r3, #255	@ 0xff
 80081a6:	f000 8174 	beq.w	8008492 <USBD_StdEPReq+0x32e>
 80081aa:	7b7b      	ldrb	r3, [r7, #13]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f040 8170 	bne.w	8008492 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80081b2:	7b7a      	ldrb	r2, [r7, #13]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80081ba:	7b7a      	ldrb	r2, [r7, #13]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	32ae      	adds	r2, #174	@ 0xae
 80081c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	f000 8163 	beq.w	8008492 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80081cc:	7b7a      	ldrb	r2, [r7, #13]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	32ae      	adds	r2, #174	@ 0xae
 80081d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	6839      	ldr	r1, [r7, #0]
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	4798      	blx	r3
 80081de:	4603      	mov	r3, r0
 80081e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80081e2:	e156      	b.n	8008492 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	785b      	ldrb	r3, [r3, #1]
 80081e8:	2b03      	cmp	r3, #3
 80081ea:	d008      	beq.n	80081fe <USBD_StdEPReq+0x9a>
 80081ec:	2b03      	cmp	r3, #3
 80081ee:	f300 8145 	bgt.w	800847c <USBD_StdEPReq+0x318>
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f000 809b 	beq.w	800832e <USBD_StdEPReq+0x1ca>
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d03c      	beq.n	8008276 <USBD_StdEPReq+0x112>
 80081fc:	e13e      	b.n	800847c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008204:	b2db      	uxtb	r3, r3
 8008206:	2b02      	cmp	r3, #2
 8008208:	d002      	beq.n	8008210 <USBD_StdEPReq+0xac>
 800820a:	2b03      	cmp	r3, #3
 800820c:	d016      	beq.n	800823c <USBD_StdEPReq+0xd8>
 800820e:	e02c      	b.n	800826a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008210:	7bbb      	ldrb	r3, [r7, #14]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00d      	beq.n	8008232 <USBD_StdEPReq+0xce>
 8008216:	7bbb      	ldrb	r3, [r7, #14]
 8008218:	2b80      	cmp	r3, #128	@ 0x80
 800821a:	d00a      	beq.n	8008232 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800821c:	7bbb      	ldrb	r3, [r7, #14]
 800821e:	4619      	mov	r1, r3
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f001 f96f 	bl	8009504 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008226:	2180      	movs	r1, #128	@ 0x80
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f001 f96b 	bl	8009504 <USBD_LL_StallEP>
 800822e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008230:	e020      	b.n	8008274 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008232:	6839      	ldr	r1, [r7, #0]
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 fc7a 	bl	8008b2e <USBD_CtlError>
              break;
 800823a:	e01b      	b.n	8008274 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	885b      	ldrh	r3, [r3, #2]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d10e      	bne.n	8008262 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008244:	7bbb      	ldrb	r3, [r7, #14]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00b      	beq.n	8008262 <USBD_StdEPReq+0xfe>
 800824a:	7bbb      	ldrb	r3, [r7, #14]
 800824c:	2b80      	cmp	r3, #128	@ 0x80
 800824e:	d008      	beq.n	8008262 <USBD_StdEPReq+0xfe>
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	88db      	ldrh	r3, [r3, #6]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d104      	bne.n	8008262 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008258:	7bbb      	ldrb	r3, [r7, #14]
 800825a:	4619      	mov	r1, r3
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f001 f951 	bl	8009504 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fd3a 	bl	8008cdc <USBD_CtlSendStatus>

              break;
 8008268:	e004      	b.n	8008274 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800826a:	6839      	ldr	r1, [r7, #0]
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fc5e 	bl	8008b2e <USBD_CtlError>
              break;
 8008272:	bf00      	nop
          }
          break;
 8008274:	e107      	b.n	8008486 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800827c:	b2db      	uxtb	r3, r3
 800827e:	2b02      	cmp	r3, #2
 8008280:	d002      	beq.n	8008288 <USBD_StdEPReq+0x124>
 8008282:	2b03      	cmp	r3, #3
 8008284:	d016      	beq.n	80082b4 <USBD_StdEPReq+0x150>
 8008286:	e04b      	b.n	8008320 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008288:	7bbb      	ldrb	r3, [r7, #14]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00d      	beq.n	80082aa <USBD_StdEPReq+0x146>
 800828e:	7bbb      	ldrb	r3, [r7, #14]
 8008290:	2b80      	cmp	r3, #128	@ 0x80
 8008292:	d00a      	beq.n	80082aa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008294:	7bbb      	ldrb	r3, [r7, #14]
 8008296:	4619      	mov	r1, r3
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f001 f933 	bl	8009504 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800829e:	2180      	movs	r1, #128	@ 0x80
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f001 f92f 	bl	8009504 <USBD_LL_StallEP>
 80082a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082a8:	e040      	b.n	800832c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80082aa:	6839      	ldr	r1, [r7, #0]
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fc3e 	bl	8008b2e <USBD_CtlError>
              break;
 80082b2:	e03b      	b.n	800832c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	885b      	ldrh	r3, [r3, #2]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d136      	bne.n	800832a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80082bc:	7bbb      	ldrb	r3, [r7, #14]
 80082be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d004      	beq.n	80082d0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80082c6:	7bbb      	ldrb	r3, [r7, #14]
 80082c8:	4619      	mov	r1, r3
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f001 f939 	bl	8009542 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 fd03 	bl	8008cdc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80082d6:	7bbb      	ldrb	r3, [r7, #14]
 80082d8:	4619      	mov	r1, r3
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f7ff fde4 	bl	8007ea8 <USBD_CoreFindEP>
 80082e0:	4603      	mov	r3, r0
 80082e2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082e4:	7b7b      	ldrb	r3, [r7, #13]
 80082e6:	2bff      	cmp	r3, #255	@ 0xff
 80082e8:	d01f      	beq.n	800832a <USBD_StdEPReq+0x1c6>
 80082ea:	7b7b      	ldrb	r3, [r7, #13]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d11c      	bne.n	800832a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80082f0:	7b7a      	ldrb	r2, [r7, #13]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80082f8:	7b7a      	ldrb	r2, [r7, #13]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	32ae      	adds	r2, #174	@ 0xae
 80082fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d010      	beq.n	800832a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008308:	7b7a      	ldrb	r2, [r7, #13]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	32ae      	adds	r2, #174	@ 0xae
 800830e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	6839      	ldr	r1, [r7, #0]
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	4798      	blx	r3
 800831a:	4603      	mov	r3, r0
 800831c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800831e:	e004      	b.n	800832a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008320:	6839      	ldr	r1, [r7, #0]
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 fc03 	bl	8008b2e <USBD_CtlError>
              break;
 8008328:	e000      	b.n	800832c <USBD_StdEPReq+0x1c8>
              break;
 800832a:	bf00      	nop
          }
          break;
 800832c:	e0ab      	b.n	8008486 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008334:	b2db      	uxtb	r3, r3
 8008336:	2b02      	cmp	r3, #2
 8008338:	d002      	beq.n	8008340 <USBD_StdEPReq+0x1dc>
 800833a:	2b03      	cmp	r3, #3
 800833c:	d032      	beq.n	80083a4 <USBD_StdEPReq+0x240>
 800833e:	e097      	b.n	8008470 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008340:	7bbb      	ldrb	r3, [r7, #14]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d007      	beq.n	8008356 <USBD_StdEPReq+0x1f2>
 8008346:	7bbb      	ldrb	r3, [r7, #14]
 8008348:	2b80      	cmp	r3, #128	@ 0x80
 800834a:	d004      	beq.n	8008356 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800834c:	6839      	ldr	r1, [r7, #0]
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fbed 	bl	8008b2e <USBD_CtlError>
                break;
 8008354:	e091      	b.n	800847a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008356:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800835a:	2b00      	cmp	r3, #0
 800835c:	da0b      	bge.n	8008376 <USBD_StdEPReq+0x212>
 800835e:	7bbb      	ldrb	r3, [r7, #14]
 8008360:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008364:	4613      	mov	r3, r2
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	4413      	add	r3, r2
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	3310      	adds	r3, #16
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	4413      	add	r3, r2
 8008372:	3304      	adds	r3, #4
 8008374:	e00b      	b.n	800838e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008376:	7bbb      	ldrb	r3, [r7, #14]
 8008378:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800837c:	4613      	mov	r3, r2
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	4413      	add	r3, r2
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	4413      	add	r3, r2
 800838c:	3304      	adds	r3, #4
 800838e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	2200      	movs	r2, #0
 8008394:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	2202      	movs	r2, #2
 800839a:	4619      	mov	r1, r3
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 fc43 	bl	8008c28 <USBD_CtlSendData>
              break;
 80083a2:	e06a      	b.n	800847a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80083a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	da11      	bge.n	80083d0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80083ac:	7bbb      	ldrb	r3, [r7, #14]
 80083ae:	f003 020f 	and.w	r2, r3, #15
 80083b2:	6879      	ldr	r1, [r7, #4]
 80083b4:	4613      	mov	r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	4413      	add	r3, r2
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	440b      	add	r3, r1
 80083be:	3324      	adds	r3, #36	@ 0x24
 80083c0:	881b      	ldrh	r3, [r3, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d117      	bne.n	80083f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80083c6:	6839      	ldr	r1, [r7, #0]
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 fbb0 	bl	8008b2e <USBD_CtlError>
                  break;
 80083ce:	e054      	b.n	800847a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80083d0:	7bbb      	ldrb	r3, [r7, #14]
 80083d2:	f003 020f 	and.w	r2, r3, #15
 80083d6:	6879      	ldr	r1, [r7, #4]
 80083d8:	4613      	mov	r3, r2
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	4413      	add	r3, r2
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	440b      	add	r3, r1
 80083e2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80083e6:	881b      	ldrh	r3, [r3, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d104      	bne.n	80083f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80083ec:	6839      	ldr	r1, [r7, #0]
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 fb9d 	bl	8008b2e <USBD_CtlError>
                  break;
 80083f4:	e041      	b.n	800847a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	da0b      	bge.n	8008416 <USBD_StdEPReq+0x2b2>
 80083fe:	7bbb      	ldrb	r3, [r7, #14]
 8008400:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008404:	4613      	mov	r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	4413      	add	r3, r2
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	3310      	adds	r3, #16
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	4413      	add	r3, r2
 8008412:	3304      	adds	r3, #4
 8008414:	e00b      	b.n	800842e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008416:	7bbb      	ldrb	r3, [r7, #14]
 8008418:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800841c:	4613      	mov	r3, r2
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	4413      	add	r3, r2
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	4413      	add	r3, r2
 800842c:	3304      	adds	r3, #4
 800842e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008430:	7bbb      	ldrb	r3, [r7, #14]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d002      	beq.n	800843c <USBD_StdEPReq+0x2d8>
 8008436:	7bbb      	ldrb	r3, [r7, #14]
 8008438:	2b80      	cmp	r3, #128	@ 0x80
 800843a:	d103      	bne.n	8008444 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	2200      	movs	r2, #0
 8008440:	601a      	str	r2, [r3, #0]
 8008442:	e00e      	b.n	8008462 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008444:	7bbb      	ldrb	r3, [r7, #14]
 8008446:	4619      	mov	r1, r3
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f001 f899 	bl	8009580 <USBD_LL_IsStallEP>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d003      	beq.n	800845c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	2201      	movs	r2, #1
 8008458:	601a      	str	r2, [r3, #0]
 800845a:	e002      	b.n	8008462 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	2200      	movs	r2, #0
 8008460:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	2202      	movs	r2, #2
 8008466:	4619      	mov	r1, r3
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 fbdd 	bl	8008c28 <USBD_CtlSendData>
              break;
 800846e:	e004      	b.n	800847a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008470:	6839      	ldr	r1, [r7, #0]
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 fb5b 	bl	8008b2e <USBD_CtlError>
              break;
 8008478:	bf00      	nop
          }
          break;
 800847a:	e004      	b.n	8008486 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800847c:	6839      	ldr	r1, [r7, #0]
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 fb55 	bl	8008b2e <USBD_CtlError>
          break;
 8008484:	bf00      	nop
      }
      break;
 8008486:	e005      	b.n	8008494 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008488:	6839      	ldr	r1, [r7, #0]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fb4f 	bl	8008b2e <USBD_CtlError>
      break;
 8008490:	e000      	b.n	8008494 <USBD_StdEPReq+0x330>
      break;
 8008492:	bf00      	nop
  }

  return ret;
 8008494:	7bfb      	ldrb	r3, [r7, #15]
}
 8008496:	4618      	mov	r0, r3
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
	...

080084a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084aa:	2300      	movs	r3, #0
 80084ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80084ae:	2300      	movs	r3, #0
 80084b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80084b2:	2300      	movs	r3, #0
 80084b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	885b      	ldrh	r3, [r3, #2]
 80084ba:	0a1b      	lsrs	r3, r3, #8
 80084bc:	b29b      	uxth	r3, r3
 80084be:	3b01      	subs	r3, #1
 80084c0:	2b06      	cmp	r3, #6
 80084c2:	f200 8128 	bhi.w	8008716 <USBD_GetDescriptor+0x276>
 80084c6:	a201      	add	r2, pc, #4	@ (adr r2, 80084cc <USBD_GetDescriptor+0x2c>)
 80084c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084cc:	080084e9 	.word	0x080084e9
 80084d0:	08008501 	.word	0x08008501
 80084d4:	08008541 	.word	0x08008541
 80084d8:	08008717 	.word	0x08008717
 80084dc:	08008717 	.word	0x08008717
 80084e0:	080086b7 	.word	0x080086b7
 80084e4:	080086e3 	.word	0x080086e3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	7c12      	ldrb	r2, [r2, #16]
 80084f4:	f107 0108 	add.w	r1, r7, #8
 80084f8:	4610      	mov	r0, r2
 80084fa:	4798      	blx	r3
 80084fc:	60f8      	str	r0, [r7, #12]
      break;
 80084fe:	e112      	b.n	8008726 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	7c1b      	ldrb	r3, [r3, #16]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d10d      	bne.n	8008524 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800850e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008510:	f107 0208 	add.w	r2, r7, #8
 8008514:	4610      	mov	r0, r2
 8008516:	4798      	blx	r3
 8008518:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	3301      	adds	r3, #1
 800851e:	2202      	movs	r2, #2
 8008520:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008522:	e100      	b.n	8008726 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800852a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800852c:	f107 0208 	add.w	r2, r7, #8
 8008530:	4610      	mov	r0, r2
 8008532:	4798      	blx	r3
 8008534:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	3301      	adds	r3, #1
 800853a:	2202      	movs	r2, #2
 800853c:	701a      	strb	r2, [r3, #0]
      break;
 800853e:	e0f2      	b.n	8008726 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	885b      	ldrh	r3, [r3, #2]
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b05      	cmp	r3, #5
 8008548:	f200 80ac 	bhi.w	80086a4 <USBD_GetDescriptor+0x204>
 800854c:	a201      	add	r2, pc, #4	@ (adr r2, 8008554 <USBD_GetDescriptor+0xb4>)
 800854e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008552:	bf00      	nop
 8008554:	0800856d 	.word	0x0800856d
 8008558:	080085a1 	.word	0x080085a1
 800855c:	080085d5 	.word	0x080085d5
 8008560:	08008609 	.word	0x08008609
 8008564:	0800863d 	.word	0x0800863d
 8008568:	08008671 	.word	0x08008671
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00b      	beq.n	8008590 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	7c12      	ldrb	r2, [r2, #16]
 8008584:	f107 0108 	add.w	r1, r7, #8
 8008588:	4610      	mov	r0, r2
 800858a:	4798      	blx	r3
 800858c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800858e:	e091      	b.n	80086b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008590:	6839      	ldr	r1, [r7, #0]
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 facb 	bl	8008b2e <USBD_CtlError>
            err++;
 8008598:	7afb      	ldrb	r3, [r7, #11]
 800859a:	3301      	adds	r3, #1
 800859c:	72fb      	strb	r3, [r7, #11]
          break;
 800859e:	e089      	b.n	80086b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00b      	beq.n	80085c4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	7c12      	ldrb	r2, [r2, #16]
 80085b8:	f107 0108 	add.w	r1, r7, #8
 80085bc:	4610      	mov	r0, r2
 80085be:	4798      	blx	r3
 80085c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085c2:	e077      	b.n	80086b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085c4:	6839      	ldr	r1, [r7, #0]
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 fab1 	bl	8008b2e <USBD_CtlError>
            err++;
 80085cc:	7afb      	ldrb	r3, [r7, #11]
 80085ce:	3301      	adds	r3, #1
 80085d0:	72fb      	strb	r3, [r7, #11]
          break;
 80085d2:	e06f      	b.n	80086b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00b      	beq.n	80085f8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	7c12      	ldrb	r2, [r2, #16]
 80085ec:	f107 0108 	add.w	r1, r7, #8
 80085f0:	4610      	mov	r0, r2
 80085f2:	4798      	blx	r3
 80085f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085f6:	e05d      	b.n	80086b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085f8:	6839      	ldr	r1, [r7, #0]
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 fa97 	bl	8008b2e <USBD_CtlError>
            err++;
 8008600:	7afb      	ldrb	r3, [r7, #11]
 8008602:	3301      	adds	r3, #1
 8008604:	72fb      	strb	r3, [r7, #11]
          break;
 8008606:	e055      	b.n	80086b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00b      	beq.n	800862c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	7c12      	ldrb	r2, [r2, #16]
 8008620:	f107 0108 	add.w	r1, r7, #8
 8008624:	4610      	mov	r0, r2
 8008626:	4798      	blx	r3
 8008628:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800862a:	e043      	b.n	80086b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800862c:	6839      	ldr	r1, [r7, #0]
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fa7d 	bl	8008b2e <USBD_CtlError>
            err++;
 8008634:	7afb      	ldrb	r3, [r7, #11]
 8008636:	3301      	adds	r3, #1
 8008638:	72fb      	strb	r3, [r7, #11]
          break;
 800863a:	e03b      	b.n	80086b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008642:	695b      	ldr	r3, [r3, #20]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d00b      	beq.n	8008660 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800864e:	695b      	ldr	r3, [r3, #20]
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	7c12      	ldrb	r2, [r2, #16]
 8008654:	f107 0108 	add.w	r1, r7, #8
 8008658:	4610      	mov	r0, r2
 800865a:	4798      	blx	r3
 800865c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800865e:	e029      	b.n	80086b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008660:	6839      	ldr	r1, [r7, #0]
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 fa63 	bl	8008b2e <USBD_CtlError>
            err++;
 8008668:	7afb      	ldrb	r3, [r7, #11]
 800866a:	3301      	adds	r3, #1
 800866c:	72fb      	strb	r3, [r7, #11]
          break;
 800866e:	e021      	b.n	80086b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008676:	699b      	ldr	r3, [r3, #24]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00b      	beq.n	8008694 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	7c12      	ldrb	r2, [r2, #16]
 8008688:	f107 0108 	add.w	r1, r7, #8
 800868c:	4610      	mov	r0, r2
 800868e:	4798      	blx	r3
 8008690:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008692:	e00f      	b.n	80086b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008694:	6839      	ldr	r1, [r7, #0]
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fa49 	bl	8008b2e <USBD_CtlError>
            err++;
 800869c:	7afb      	ldrb	r3, [r7, #11]
 800869e:	3301      	adds	r3, #1
 80086a0:	72fb      	strb	r3, [r7, #11]
          break;
 80086a2:	e007      	b.n	80086b4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80086a4:	6839      	ldr	r1, [r7, #0]
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fa41 	bl	8008b2e <USBD_CtlError>
          err++;
 80086ac:	7afb      	ldrb	r3, [r7, #11]
 80086ae:	3301      	adds	r3, #1
 80086b0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80086b2:	bf00      	nop
      }
      break;
 80086b4:	e037      	b.n	8008726 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	7c1b      	ldrb	r3, [r3, #16]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d109      	bne.n	80086d2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086c6:	f107 0208 	add.w	r2, r7, #8
 80086ca:	4610      	mov	r0, r2
 80086cc:	4798      	blx	r3
 80086ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086d0:	e029      	b.n	8008726 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80086d2:	6839      	ldr	r1, [r7, #0]
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 fa2a 	bl	8008b2e <USBD_CtlError>
        err++;
 80086da:	7afb      	ldrb	r3, [r7, #11]
 80086dc:	3301      	adds	r3, #1
 80086de:	72fb      	strb	r3, [r7, #11]
      break;
 80086e0:	e021      	b.n	8008726 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	7c1b      	ldrb	r3, [r3, #16]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d10d      	bne.n	8008706 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086f2:	f107 0208 	add.w	r2, r7, #8
 80086f6:	4610      	mov	r0, r2
 80086f8:	4798      	blx	r3
 80086fa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	3301      	adds	r3, #1
 8008700:	2207      	movs	r2, #7
 8008702:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008704:	e00f      	b.n	8008726 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008706:	6839      	ldr	r1, [r7, #0]
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 fa10 	bl	8008b2e <USBD_CtlError>
        err++;
 800870e:	7afb      	ldrb	r3, [r7, #11]
 8008710:	3301      	adds	r3, #1
 8008712:	72fb      	strb	r3, [r7, #11]
      break;
 8008714:	e007      	b.n	8008726 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008716:	6839      	ldr	r1, [r7, #0]
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fa08 	bl	8008b2e <USBD_CtlError>
      err++;
 800871e:	7afb      	ldrb	r3, [r7, #11]
 8008720:	3301      	adds	r3, #1
 8008722:	72fb      	strb	r3, [r7, #11]
      break;
 8008724:	bf00      	nop
  }

  if (err != 0U)
 8008726:	7afb      	ldrb	r3, [r7, #11]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d11e      	bne.n	800876a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	88db      	ldrh	r3, [r3, #6]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d016      	beq.n	8008762 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008734:	893b      	ldrh	r3, [r7, #8]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00e      	beq.n	8008758 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	88da      	ldrh	r2, [r3, #6]
 800873e:	893b      	ldrh	r3, [r7, #8]
 8008740:	4293      	cmp	r3, r2
 8008742:	bf28      	it	cs
 8008744:	4613      	movcs	r3, r2
 8008746:	b29b      	uxth	r3, r3
 8008748:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800874a:	893b      	ldrh	r3, [r7, #8]
 800874c:	461a      	mov	r2, r3
 800874e:	68f9      	ldr	r1, [r7, #12]
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 fa69 	bl	8008c28 <USBD_CtlSendData>
 8008756:	e009      	b.n	800876c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008758:	6839      	ldr	r1, [r7, #0]
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 f9e7 	bl	8008b2e <USBD_CtlError>
 8008760:	e004      	b.n	800876c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 faba 	bl	8008cdc <USBD_CtlSendStatus>
 8008768:	e000      	b.n	800876c <USBD_GetDescriptor+0x2cc>
    return;
 800876a:	bf00      	nop
  }
}
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop

08008774 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	889b      	ldrh	r3, [r3, #4]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d131      	bne.n	80087ea <USBD_SetAddress+0x76>
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	88db      	ldrh	r3, [r3, #6]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d12d      	bne.n	80087ea <USBD_SetAddress+0x76>
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	885b      	ldrh	r3, [r3, #2]
 8008792:	2b7f      	cmp	r3, #127	@ 0x7f
 8008794:	d829      	bhi.n	80087ea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	885b      	ldrh	r3, [r3, #2]
 800879a:	b2db      	uxtb	r3, r3
 800879c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	2b03      	cmp	r3, #3
 80087ac:	d104      	bne.n	80087b8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80087ae:	6839      	ldr	r1, [r7, #0]
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 f9bc 	bl	8008b2e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087b6:	e01d      	b.n	80087f4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	7bfa      	ldrb	r2, [r7, #15]
 80087bc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80087c0:	7bfb      	ldrb	r3, [r7, #15]
 80087c2:	4619      	mov	r1, r3
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 ff07 	bl	80095d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 fa86 	bl	8008cdc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80087d0:	7bfb      	ldrb	r3, [r7, #15]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d004      	beq.n	80087e0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2202      	movs	r2, #2
 80087da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087de:	e009      	b.n	80087f4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087e8:	e004      	b.n	80087f4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80087ea:	6839      	ldr	r1, [r7, #0]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 f99e 	bl	8008b2e <USBD_CtlError>
  }
}
 80087f2:	bf00      	nop
 80087f4:	bf00      	nop
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008806:	2300      	movs	r3, #0
 8008808:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	885b      	ldrh	r3, [r3, #2]
 800880e:	b2da      	uxtb	r2, r3
 8008810:	4b4e      	ldr	r3, [pc, #312]	@ (800894c <USBD_SetConfig+0x150>)
 8008812:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008814:	4b4d      	ldr	r3, [pc, #308]	@ (800894c <USBD_SetConfig+0x150>)
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	2b01      	cmp	r3, #1
 800881a:	d905      	bls.n	8008828 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800881c:	6839      	ldr	r1, [r7, #0]
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 f985 	bl	8008b2e <USBD_CtlError>
    return USBD_FAIL;
 8008824:	2303      	movs	r3, #3
 8008826:	e08c      	b.n	8008942 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800882e:	b2db      	uxtb	r3, r3
 8008830:	2b02      	cmp	r3, #2
 8008832:	d002      	beq.n	800883a <USBD_SetConfig+0x3e>
 8008834:	2b03      	cmp	r3, #3
 8008836:	d029      	beq.n	800888c <USBD_SetConfig+0x90>
 8008838:	e075      	b.n	8008926 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800883a:	4b44      	ldr	r3, [pc, #272]	@ (800894c <USBD_SetConfig+0x150>)
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d020      	beq.n	8008884 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008842:	4b42      	ldr	r3, [pc, #264]	@ (800894c <USBD_SetConfig+0x150>)
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	461a      	mov	r2, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800884c:	4b3f      	ldr	r3, [pc, #252]	@ (800894c <USBD_SetConfig+0x150>)
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	4619      	mov	r1, r3
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f7fe ffe3 	bl	800781e <USBD_SetClassConfig>
 8008858:	4603      	mov	r3, r0
 800885a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800885c:	7bfb      	ldrb	r3, [r7, #15]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d008      	beq.n	8008874 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008862:	6839      	ldr	r1, [r7, #0]
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 f962 	bl	8008b2e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2202      	movs	r2, #2
 800886e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008872:	e065      	b.n	8008940 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 fa31 	bl	8008cdc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2203      	movs	r2, #3
 800887e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008882:	e05d      	b.n	8008940 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 fa29 	bl	8008cdc <USBD_CtlSendStatus>
      break;
 800888a:	e059      	b.n	8008940 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800888c:	4b2f      	ldr	r3, [pc, #188]	@ (800894c <USBD_SetConfig+0x150>)
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d112      	bne.n	80088ba <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2202      	movs	r2, #2
 8008898:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800889c:	4b2b      	ldr	r3, [pc, #172]	@ (800894c <USBD_SetConfig+0x150>)
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	461a      	mov	r2, r3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80088a6:	4b29      	ldr	r3, [pc, #164]	@ (800894c <USBD_SetConfig+0x150>)
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	4619      	mov	r1, r3
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f7fe ffd2 	bl	8007856 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 fa12 	bl	8008cdc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80088b8:	e042      	b.n	8008940 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80088ba:	4b24      	ldr	r3, [pc, #144]	@ (800894c <USBD_SetConfig+0x150>)
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	461a      	mov	r2, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d02a      	beq.n	800891e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	4619      	mov	r1, r3
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f7fe ffc0 	bl	8007856 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80088d6:	4b1d      	ldr	r3, [pc, #116]	@ (800894c <USBD_SetConfig+0x150>)
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	461a      	mov	r2, r3
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80088e0:	4b1a      	ldr	r3, [pc, #104]	@ (800894c <USBD_SetConfig+0x150>)
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	4619      	mov	r1, r3
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f7fe ff99 	bl	800781e <USBD_SetClassConfig>
 80088ec:	4603      	mov	r3, r0
 80088ee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80088f0:	7bfb      	ldrb	r3, [r7, #15]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d00f      	beq.n	8008916 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80088f6:	6839      	ldr	r1, [r7, #0]
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 f918 	bl	8008b2e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	b2db      	uxtb	r3, r3
 8008904:	4619      	mov	r1, r3
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f7fe ffa5 	bl	8007856 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2202      	movs	r2, #2
 8008910:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008914:	e014      	b.n	8008940 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 f9e0 	bl	8008cdc <USBD_CtlSendStatus>
      break;
 800891c:	e010      	b.n	8008940 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 f9dc 	bl	8008cdc <USBD_CtlSendStatus>
      break;
 8008924:	e00c      	b.n	8008940 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008926:	6839      	ldr	r1, [r7, #0]
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 f900 	bl	8008b2e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800892e:	4b07      	ldr	r3, [pc, #28]	@ (800894c <USBD_SetConfig+0x150>)
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	4619      	mov	r1, r3
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f7fe ff8e 	bl	8007856 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800893a:	2303      	movs	r3, #3
 800893c:	73fb      	strb	r3, [r7, #15]
      break;
 800893e:	bf00      	nop
  }

  return ret;
 8008940:	7bfb      	ldrb	r3, [r7, #15]
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	200003c4 	.word	0x200003c4

08008950 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	88db      	ldrh	r3, [r3, #6]
 800895e:	2b01      	cmp	r3, #1
 8008960:	d004      	beq.n	800896c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008962:	6839      	ldr	r1, [r7, #0]
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 f8e2 	bl	8008b2e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800896a:	e023      	b.n	80089b4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008972:	b2db      	uxtb	r3, r3
 8008974:	2b02      	cmp	r3, #2
 8008976:	dc02      	bgt.n	800897e <USBD_GetConfig+0x2e>
 8008978:	2b00      	cmp	r3, #0
 800897a:	dc03      	bgt.n	8008984 <USBD_GetConfig+0x34>
 800897c:	e015      	b.n	80089aa <USBD_GetConfig+0x5a>
 800897e:	2b03      	cmp	r3, #3
 8008980:	d00b      	beq.n	800899a <USBD_GetConfig+0x4a>
 8008982:	e012      	b.n	80089aa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	3308      	adds	r3, #8
 800898e:	2201      	movs	r2, #1
 8008990:	4619      	mov	r1, r3
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 f948 	bl	8008c28 <USBD_CtlSendData>
        break;
 8008998:	e00c      	b.n	80089b4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	3304      	adds	r3, #4
 800899e:	2201      	movs	r2, #1
 80089a0:	4619      	mov	r1, r3
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 f940 	bl	8008c28 <USBD_CtlSendData>
        break;
 80089a8:	e004      	b.n	80089b4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80089aa:	6839      	ldr	r1, [r7, #0]
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 f8be 	bl	8008b2e <USBD_CtlError>
        break;
 80089b2:	bf00      	nop
}
 80089b4:	bf00      	nop
 80089b6:	3708      	adds	r7, #8
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	3b01      	subs	r3, #1
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d81e      	bhi.n	8008a12 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	88db      	ldrh	r3, [r3, #6]
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d004      	beq.n	80089e6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80089dc:	6839      	ldr	r1, [r7, #0]
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f8a5 	bl	8008b2e <USBD_CtlError>
        break;
 80089e4:	e01a      	b.n	8008a1c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2201      	movs	r2, #1
 80089ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d005      	beq.n	8008a02 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	f043 0202 	orr.w	r2, r3, #2
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	330c      	adds	r3, #12
 8008a06:	2202      	movs	r2, #2
 8008a08:	4619      	mov	r1, r3
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 f90c 	bl	8008c28 <USBD_CtlSendData>
      break;
 8008a10:	e004      	b.n	8008a1c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008a12:	6839      	ldr	r1, [r7, #0]
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 f88a 	bl	8008b2e <USBD_CtlError>
      break;
 8008a1a:	bf00      	nop
  }
}
 8008a1c:	bf00      	nop
 8008a1e:	3708      	adds	r7, #8
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	885b      	ldrh	r3, [r3, #2]
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d107      	bne.n	8008a46 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 f94c 	bl	8008cdc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008a44:	e013      	b.n	8008a6e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	885b      	ldrh	r3, [r3, #2]
 8008a4a:	2b02      	cmp	r3, #2
 8008a4c:	d10b      	bne.n	8008a66 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	889b      	ldrh	r3, [r3, #4]
 8008a52:	0a1b      	lsrs	r3, r3, #8
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	b2da      	uxtb	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 f93c 	bl	8008cdc <USBD_CtlSendStatus>
}
 8008a64:	e003      	b.n	8008a6e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008a66:	6839      	ldr	r1, [r7, #0]
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 f860 	bl	8008b2e <USBD_CtlError>
}
 8008a6e:	bf00      	nop
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b082      	sub	sp, #8
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
 8008a7e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	3b01      	subs	r3, #1
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d80b      	bhi.n	8008aa6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	885b      	ldrh	r3, [r3, #2]
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d10c      	bne.n	8008ab0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 f91c 	bl	8008cdc <USBD_CtlSendStatus>
      }
      break;
 8008aa4:	e004      	b.n	8008ab0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008aa6:	6839      	ldr	r1, [r7, #0]
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 f840 	bl	8008b2e <USBD_CtlError>
      break;
 8008aae:	e000      	b.n	8008ab2 <USBD_ClrFeature+0x3c>
      break;
 8008ab0:	bf00      	nop
  }
}
 8008ab2:	bf00      	nop
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b084      	sub	sp, #16
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
 8008ac2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	781a      	ldrb	r2, [r3, #0]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	781a      	ldrb	r2, [r3, #0]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f7ff fa40 	bl	8007f6a <SWAPBYTE>
 8008aea:	4603      	mov	r3, r0
 8008aec:	461a      	mov	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	3301      	adds	r3, #1
 8008af6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	3301      	adds	r3, #1
 8008afc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008afe:	68f8      	ldr	r0, [r7, #12]
 8008b00:	f7ff fa33 	bl	8007f6a <SWAPBYTE>
 8008b04:	4603      	mov	r3, r0
 8008b06:	461a      	mov	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	3301      	adds	r3, #1
 8008b16:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f7ff fa26 	bl	8007f6a <SWAPBYTE>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	461a      	mov	r2, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	80da      	strh	r2, [r3, #6]
}
 8008b26:	bf00      	nop
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b082      	sub	sp, #8
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
 8008b36:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b38:	2180      	movs	r1, #128	@ 0x80
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fce2 	bl	8009504 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008b40:	2100      	movs	r1, #0
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fcde 	bl	8009504 <USBD_LL_StallEP>
}
 8008b48:	bf00      	nop
 8008b4a:	3708      	adds	r7, #8
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b086      	sub	sp, #24
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d042      	beq.n	8008bec <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008b6a:	6938      	ldr	r0, [r7, #16]
 8008b6c:	f000 f842 	bl	8008bf4 <USBD_GetLen>
 8008b70:	4603      	mov	r3, r0
 8008b72:	3301      	adds	r3, #1
 8008b74:	005b      	lsls	r3, r3, #1
 8008b76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b7a:	d808      	bhi.n	8008b8e <USBD_GetString+0x3e>
 8008b7c:	6938      	ldr	r0, [r7, #16]
 8008b7e:	f000 f839 	bl	8008bf4 <USBD_GetLen>
 8008b82:	4603      	mov	r3, r0
 8008b84:	3301      	adds	r3, #1
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	005b      	lsls	r3, r3, #1
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	e001      	b.n	8008b92 <USBD_GetString+0x42>
 8008b8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008b96:	7dfb      	ldrb	r3, [r7, #23]
 8008b98:	68ba      	ldr	r2, [r7, #8]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	7812      	ldrb	r2, [r2, #0]
 8008ba0:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ba2:	7dfb      	ldrb	r3, [r7, #23]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008ba8:	7dfb      	ldrb	r3, [r7, #23]
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	4413      	add	r3, r2
 8008bae:	2203      	movs	r2, #3
 8008bb0:	701a      	strb	r2, [r3, #0]
  idx++;
 8008bb2:	7dfb      	ldrb	r3, [r7, #23]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008bb8:	e013      	b.n	8008be2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008bba:	7dfb      	ldrb	r3, [r7, #23]
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	693a      	ldr	r2, [r7, #16]
 8008bc2:	7812      	ldrb	r2, [r2, #0]
 8008bc4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	3301      	adds	r3, #1
 8008bca:	613b      	str	r3, [r7, #16]
    idx++;
 8008bcc:	7dfb      	ldrb	r3, [r7, #23]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008bd2:	7dfb      	ldrb	r3, [r7, #23]
 8008bd4:	68ba      	ldr	r2, [r7, #8]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	2200      	movs	r2, #0
 8008bda:	701a      	strb	r2, [r3, #0]
    idx++;
 8008bdc:	7dfb      	ldrb	r3, [r7, #23]
 8008bde:	3301      	adds	r3, #1
 8008be0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d1e7      	bne.n	8008bba <USBD_GetString+0x6a>
 8008bea:	e000      	b.n	8008bee <USBD_GetString+0x9e>
    return;
 8008bec:	bf00      	nop
  }
}
 8008bee:	3718      	adds	r7, #24
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008c04:	e005      	b.n	8008c12 <USBD_GetLen+0x1e>
  {
    len++;
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d1f5      	bne.n	8008c06 <USBD_GetLen+0x12>
  }

  return len;
 8008c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3714      	adds	r7, #20
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2202      	movs	r2, #2
 8008c38:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f000 fce1 	bl	8009616 <USBD_LL_Transmit>

  return USBD_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b084      	sub	sp, #16
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	60f8      	str	r0, [r7, #12]
 8008c66:	60b9      	str	r1, [r7, #8]
 8008c68:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	68ba      	ldr	r2, [r7, #8]
 8008c6e:	2100      	movs	r1, #0
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	f000 fcd0 	bl	8009616 <USBD_LL_Transmit>

  return USBD_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2203      	movs	r2, #3
 8008c90:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	68ba      	ldr	r2, [r7, #8]
 8008ca8:	2100      	movs	r1, #0
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f000 fcd4 	bl	8009658 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3710      	adds	r7, #16
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b084      	sub	sp, #16
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	60f8      	str	r0, [r7, #12]
 8008cc2:	60b9      	str	r1, [r7, #8]
 8008cc4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	2100      	movs	r1, #0
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f000 fcc3 	bl	8009658 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3710      	adds	r7, #16
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2204      	movs	r2, #4
 8008ce8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008cec:	2300      	movs	r3, #0
 8008cee:	2200      	movs	r2, #0
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 fc8f 	bl	8009616 <USBD_LL_Transmit>

  return USBD_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b082      	sub	sp, #8
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2205      	movs	r2, #5
 8008d0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d12:	2300      	movs	r3, #0
 8008d14:	2200      	movs	r2, #0
 8008d16:	2100      	movs	r1, #0
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 fc9d 	bl	8009658 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	4912      	ldr	r1, [pc, #72]	@ (8008d78 <MX_USB_DEVICE_Init+0x50>)
 8008d30:	4812      	ldr	r0, [pc, #72]	@ (8008d7c <MX_USB_DEVICE_Init+0x54>)
 8008d32:	f7fe fcf7 	bl	8007724 <USBD_Init>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d001      	beq.n	8008d40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d3c:	f7f9 f814 	bl	8001d68 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008d40:	490f      	ldr	r1, [pc, #60]	@ (8008d80 <MX_USB_DEVICE_Init+0x58>)
 8008d42:	480e      	ldr	r0, [pc, #56]	@ (8008d7c <MX_USB_DEVICE_Init+0x54>)
 8008d44:	f7fe fd1e 	bl	8007784 <USBD_RegisterClass>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d001      	beq.n	8008d52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d4e:	f7f9 f80b 	bl	8001d68 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008d52:	490c      	ldr	r1, [pc, #48]	@ (8008d84 <MX_USB_DEVICE_Init+0x5c>)
 8008d54:	4809      	ldr	r0, [pc, #36]	@ (8008d7c <MX_USB_DEVICE_Init+0x54>)
 8008d56:	f7fe fc15 	bl	8007584 <USBD_CDC_RegisterInterface>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d001      	beq.n	8008d64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d60:	f7f9 f802 	bl	8001d68 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d64:	4805      	ldr	r0, [pc, #20]	@ (8008d7c <MX_USB_DEVICE_Init+0x54>)
 8008d66:	f7fe fd43 	bl	80077f0 <USBD_Start>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d001      	beq.n	8008d74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008d70:	f7f8 fffa 	bl	8001d68 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d74:	bf00      	nop
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	200000ac 	.word	0x200000ac
 8008d7c:	200003c8 	.word	0x200003c8
 8008d80:	20000018 	.word	0x20000018
 8008d84:	20000098 	.word	0x20000098

08008d88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	4905      	ldr	r1, [pc, #20]	@ (8008da4 <CDC_Init_FS+0x1c>)
 8008d90:	4805      	ldr	r0, [pc, #20]	@ (8008da8 <CDC_Init_FS+0x20>)
 8008d92:	f7fe fc11 	bl	80075b8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008d96:	4905      	ldr	r1, [pc, #20]	@ (8008dac <CDC_Init_FS+0x24>)
 8008d98:	4803      	ldr	r0, [pc, #12]	@ (8008da8 <CDC_Init_FS+0x20>)
 8008d9a:	f7fe fc2f 	bl	80075fc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008d9e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	20000aa4 	.word	0x20000aa4
 8008da8:	200003c8 	.word	0x200003c8
 8008dac:	200006a4 	.word	0x200006a4

08008db0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008db0:	b480      	push	{r7}
 8008db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008db4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	6039      	str	r1, [r7, #0]
 8008dca:	71fb      	strb	r3, [r7, #7]
 8008dcc:	4613      	mov	r3, r2
 8008dce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008dd0:	79fb      	ldrb	r3, [r7, #7]
 8008dd2:	2b23      	cmp	r3, #35	@ 0x23
 8008dd4:	d84a      	bhi.n	8008e6c <CDC_Control_FS+0xac>
 8008dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8008ddc <CDC_Control_FS+0x1c>)
 8008dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ddc:	08008e6d 	.word	0x08008e6d
 8008de0:	08008e6d 	.word	0x08008e6d
 8008de4:	08008e6d 	.word	0x08008e6d
 8008de8:	08008e6d 	.word	0x08008e6d
 8008dec:	08008e6d 	.word	0x08008e6d
 8008df0:	08008e6d 	.word	0x08008e6d
 8008df4:	08008e6d 	.word	0x08008e6d
 8008df8:	08008e6d 	.word	0x08008e6d
 8008dfc:	08008e6d 	.word	0x08008e6d
 8008e00:	08008e6d 	.word	0x08008e6d
 8008e04:	08008e6d 	.word	0x08008e6d
 8008e08:	08008e6d 	.word	0x08008e6d
 8008e0c:	08008e6d 	.word	0x08008e6d
 8008e10:	08008e6d 	.word	0x08008e6d
 8008e14:	08008e6d 	.word	0x08008e6d
 8008e18:	08008e6d 	.word	0x08008e6d
 8008e1c:	08008e6d 	.word	0x08008e6d
 8008e20:	08008e6d 	.word	0x08008e6d
 8008e24:	08008e6d 	.word	0x08008e6d
 8008e28:	08008e6d 	.word	0x08008e6d
 8008e2c:	08008e6d 	.word	0x08008e6d
 8008e30:	08008e6d 	.word	0x08008e6d
 8008e34:	08008e6d 	.word	0x08008e6d
 8008e38:	08008e6d 	.word	0x08008e6d
 8008e3c:	08008e6d 	.word	0x08008e6d
 8008e40:	08008e6d 	.word	0x08008e6d
 8008e44:	08008e6d 	.word	0x08008e6d
 8008e48:	08008e6d 	.word	0x08008e6d
 8008e4c:	08008e6d 	.word	0x08008e6d
 8008e50:	08008e6d 	.word	0x08008e6d
 8008e54:	08008e6d 	.word	0x08008e6d
 8008e58:	08008e6d 	.word	0x08008e6d
 8008e5c:	08008e6d 	.word	0x08008e6d
 8008e60:	08008e6d 	.word	0x08008e6d
 8008e64:	08008e6d 	.word	0x08008e6d
 8008e68:	08008e6d 	.word	0x08008e6d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008e6c:	bf00      	nop
  }

  return (USBD_OK);
 8008e6e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008e86:	6879      	ldr	r1, [r7, #4]
 8008e88:	4805      	ldr	r0, [pc, #20]	@ (8008ea0 <CDC_Receive_FS+0x24>)
 8008e8a:	f7fe fbb7 	bl	80075fc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008e8e:	4804      	ldr	r0, [pc, #16]	@ (8008ea0 <CDC_Receive_FS+0x24>)
 8008e90:	f7fe fc12 	bl	80076b8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008e94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3708      	adds	r7, #8
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	200003c8 	.word	0x200003c8

08008ea4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	460b      	mov	r3, r1
 8008eae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8008eec <CDC_Transmit_FS+0x48>)
 8008eb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008eba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d001      	beq.n	8008eca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	e00b      	b.n	8008ee2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008eca:	887b      	ldrh	r3, [r7, #2]
 8008ecc:	461a      	mov	r2, r3
 8008ece:	6879      	ldr	r1, [r7, #4]
 8008ed0:	4806      	ldr	r0, [pc, #24]	@ (8008eec <CDC_Transmit_FS+0x48>)
 8008ed2:	f7fe fb71 	bl	80075b8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008ed6:	4805      	ldr	r0, [pc, #20]	@ (8008eec <CDC_Transmit_FS+0x48>)
 8008ed8:	f7fe fbae 	bl	8007638 <USBD_CDC_TransmitPacket>
 8008edc:	4603      	mov	r3, r0
 8008ede:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	200003c8 	.word	0x200003c8

08008ef0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b087      	sub	sp, #28
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	4613      	mov	r3, r2
 8008efc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008efe:	2300      	movs	r3, #0
 8008f00:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008f02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	371c      	adds	r7, #28
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
	...

08008f14 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	6039      	str	r1, [r7, #0]
 8008f1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	2212      	movs	r2, #18
 8008f24:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008f26:	4b03      	ldr	r3, [pc, #12]	@ (8008f34 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr
 8008f34:	200000c8 	.word	0x200000c8

08008f38 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	4603      	mov	r3, r0
 8008f40:	6039      	str	r1, [r7, #0]
 8008f42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	2204      	movs	r2, #4
 8008f48:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008f4a:	4b03      	ldr	r3, [pc, #12]	@ (8008f58 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	370c      	adds	r7, #12
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr
 8008f58:	200000dc 	.word	0x200000dc

08008f5c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	4603      	mov	r3, r0
 8008f64:	6039      	str	r1, [r7, #0]
 8008f66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f68:	79fb      	ldrb	r3, [r7, #7]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d105      	bne.n	8008f7a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f6e:	683a      	ldr	r2, [r7, #0]
 8008f70:	4907      	ldr	r1, [pc, #28]	@ (8008f90 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f72:	4808      	ldr	r0, [pc, #32]	@ (8008f94 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f74:	f7ff fdec 	bl	8008b50 <USBD_GetString>
 8008f78:	e004      	b.n	8008f84 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f7a:	683a      	ldr	r2, [r7, #0]
 8008f7c:	4904      	ldr	r1, [pc, #16]	@ (8008f90 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f7e:	4805      	ldr	r0, [pc, #20]	@ (8008f94 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f80:	f7ff fde6 	bl	8008b50 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f84:	4b02      	ldr	r3, [pc, #8]	@ (8008f90 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3708      	adds	r7, #8
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	20000ea4 	.word	0x20000ea4
 8008f94:	0800a1e8 	.word	0x0800a1e8

08008f98 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	6039      	str	r1, [r7, #0]
 8008fa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008fa4:	683a      	ldr	r2, [r7, #0]
 8008fa6:	4904      	ldr	r1, [pc, #16]	@ (8008fb8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008fa8:	4804      	ldr	r0, [pc, #16]	@ (8008fbc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008faa:	f7ff fdd1 	bl	8008b50 <USBD_GetString>
  return USBD_StrDesc;
 8008fae:	4b02      	ldr	r3, [pc, #8]	@ (8008fb8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3708      	adds	r7, #8
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	20000ea4 	.word	0x20000ea4
 8008fbc:	0800a200 	.word	0x0800a200

08008fc0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	6039      	str	r1, [r7, #0]
 8008fca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	221a      	movs	r2, #26
 8008fd0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008fd2:	f000 f843 	bl	800905c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008fd6:	4b02      	ldr	r3, [pc, #8]	@ (8008fe0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3708      	adds	r7, #8
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	200000e0 	.word	0x200000e0

08008fe4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	4603      	mov	r3, r0
 8008fec:	6039      	str	r1, [r7, #0]
 8008fee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008ff0:	79fb      	ldrb	r3, [r7, #7]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d105      	bne.n	8009002 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008ff6:	683a      	ldr	r2, [r7, #0]
 8008ff8:	4907      	ldr	r1, [pc, #28]	@ (8009018 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ffa:	4808      	ldr	r0, [pc, #32]	@ (800901c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ffc:	f7ff fda8 	bl	8008b50 <USBD_GetString>
 8009000:	e004      	b.n	800900c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009002:	683a      	ldr	r2, [r7, #0]
 8009004:	4904      	ldr	r1, [pc, #16]	@ (8009018 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009006:	4805      	ldr	r0, [pc, #20]	@ (800901c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009008:	f7ff fda2 	bl	8008b50 <USBD_GetString>
  }
  return USBD_StrDesc;
 800900c:	4b02      	ldr	r3, [pc, #8]	@ (8009018 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800900e:	4618      	mov	r0, r3
 8009010:	3708      	adds	r7, #8
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	20000ea4 	.word	0x20000ea4
 800901c:	0800a214 	.word	0x0800a214

08009020 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	4603      	mov	r3, r0
 8009028:	6039      	str	r1, [r7, #0]
 800902a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800902c:	79fb      	ldrb	r3, [r7, #7]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d105      	bne.n	800903e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009032:	683a      	ldr	r2, [r7, #0]
 8009034:	4907      	ldr	r1, [pc, #28]	@ (8009054 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009036:	4808      	ldr	r0, [pc, #32]	@ (8009058 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009038:	f7ff fd8a 	bl	8008b50 <USBD_GetString>
 800903c:	e004      	b.n	8009048 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800903e:	683a      	ldr	r2, [r7, #0]
 8009040:	4904      	ldr	r1, [pc, #16]	@ (8009054 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009042:	4805      	ldr	r0, [pc, #20]	@ (8009058 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009044:	f7ff fd84 	bl	8008b50 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009048:	4b02      	ldr	r3, [pc, #8]	@ (8009054 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800904a:	4618      	mov	r0, r3
 800904c:	3708      	adds	r7, #8
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	20000ea4 	.word	0x20000ea4
 8009058:	0800a220 	.word	0x0800a220

0800905c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009062:	4b0f      	ldr	r3, [pc, #60]	@ (80090a0 <Get_SerialNum+0x44>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009068:	4b0e      	ldr	r3, [pc, #56]	@ (80090a4 <Get_SerialNum+0x48>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800906e:	4b0e      	ldr	r3, [pc, #56]	@ (80090a8 <Get_SerialNum+0x4c>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009074:	68fa      	ldr	r2, [r7, #12]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4413      	add	r3, r2
 800907a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d009      	beq.n	8009096 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009082:	2208      	movs	r2, #8
 8009084:	4909      	ldr	r1, [pc, #36]	@ (80090ac <Get_SerialNum+0x50>)
 8009086:	68f8      	ldr	r0, [r7, #12]
 8009088:	f000 f814 	bl	80090b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800908c:	2204      	movs	r2, #4
 800908e:	4908      	ldr	r1, [pc, #32]	@ (80090b0 <Get_SerialNum+0x54>)
 8009090:	68b8      	ldr	r0, [r7, #8]
 8009092:	f000 f80f 	bl	80090b4 <IntToUnicode>
  }
}
 8009096:	bf00      	nop
 8009098:	3710      	adds	r7, #16
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	1fff7a10 	.word	0x1fff7a10
 80090a4:	1fff7a14 	.word	0x1fff7a14
 80090a8:	1fff7a18 	.word	0x1fff7a18
 80090ac:	200000e2 	.word	0x200000e2
 80090b0:	200000f2 	.word	0x200000f2

080090b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b087      	sub	sp, #28
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	4613      	mov	r3, r2
 80090c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80090c2:	2300      	movs	r3, #0
 80090c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80090c6:	2300      	movs	r3, #0
 80090c8:	75fb      	strb	r3, [r7, #23]
 80090ca:	e027      	b.n	800911c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	0f1b      	lsrs	r3, r3, #28
 80090d0:	2b09      	cmp	r3, #9
 80090d2:	d80b      	bhi.n	80090ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	0f1b      	lsrs	r3, r3, #28
 80090d8:	b2da      	uxtb	r2, r3
 80090da:	7dfb      	ldrb	r3, [r7, #23]
 80090dc:	005b      	lsls	r3, r3, #1
 80090de:	4619      	mov	r1, r3
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	440b      	add	r3, r1
 80090e4:	3230      	adds	r2, #48	@ 0x30
 80090e6:	b2d2      	uxtb	r2, r2
 80090e8:	701a      	strb	r2, [r3, #0]
 80090ea:	e00a      	b.n	8009102 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	0f1b      	lsrs	r3, r3, #28
 80090f0:	b2da      	uxtb	r2, r3
 80090f2:	7dfb      	ldrb	r3, [r7, #23]
 80090f4:	005b      	lsls	r3, r3, #1
 80090f6:	4619      	mov	r1, r3
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	440b      	add	r3, r1
 80090fc:	3237      	adds	r2, #55	@ 0x37
 80090fe:	b2d2      	uxtb	r2, r2
 8009100:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	011b      	lsls	r3, r3, #4
 8009106:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009108:	7dfb      	ldrb	r3, [r7, #23]
 800910a:	005b      	lsls	r3, r3, #1
 800910c:	3301      	adds	r3, #1
 800910e:	68ba      	ldr	r2, [r7, #8]
 8009110:	4413      	add	r3, r2
 8009112:	2200      	movs	r2, #0
 8009114:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009116:	7dfb      	ldrb	r3, [r7, #23]
 8009118:	3301      	adds	r3, #1
 800911a:	75fb      	strb	r3, [r7, #23]
 800911c:	7dfa      	ldrb	r2, [r7, #23]
 800911e:	79fb      	ldrb	r3, [r7, #7]
 8009120:	429a      	cmp	r2, r3
 8009122:	d3d3      	bcc.n	80090cc <IntToUnicode+0x18>
  }
}
 8009124:	bf00      	nop
 8009126:	bf00      	nop
 8009128:	371c      	adds	r7, #28
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
	...

08009134 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b08a      	sub	sp, #40	@ 0x28
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800913c:	f107 0314 	add.w	r3, r7, #20
 8009140:	2200      	movs	r2, #0
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	605a      	str	r2, [r3, #4]
 8009146:	609a      	str	r2, [r3, #8]
 8009148:	60da      	str	r2, [r3, #12]
 800914a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009154:	d13a      	bne.n	80091cc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009156:	2300      	movs	r3, #0
 8009158:	613b      	str	r3, [r7, #16]
 800915a:	4b1e      	ldr	r3, [pc, #120]	@ (80091d4 <HAL_PCD_MspInit+0xa0>)
 800915c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800915e:	4a1d      	ldr	r2, [pc, #116]	@ (80091d4 <HAL_PCD_MspInit+0xa0>)
 8009160:	f043 0301 	orr.w	r3, r3, #1
 8009164:	6313      	str	r3, [r2, #48]	@ 0x30
 8009166:	4b1b      	ldr	r3, [pc, #108]	@ (80091d4 <HAL_PCD_MspInit+0xa0>)
 8009168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800916a:	f003 0301 	and.w	r3, r3, #1
 800916e:	613b      	str	r3, [r7, #16]
 8009170:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009172:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009178:	2302      	movs	r3, #2
 800917a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800917c:	2300      	movs	r3, #0
 800917e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009180:	2303      	movs	r3, #3
 8009182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009184:	230a      	movs	r3, #10
 8009186:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009188:	f107 0314 	add.w	r3, r7, #20
 800918c:	4619      	mov	r1, r3
 800918e:	4812      	ldr	r0, [pc, #72]	@ (80091d8 <HAL_PCD_MspInit+0xa4>)
 8009190:	f7f9 f97c 	bl	800248c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009194:	4b0f      	ldr	r3, [pc, #60]	@ (80091d4 <HAL_PCD_MspInit+0xa0>)
 8009196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009198:	4a0e      	ldr	r2, [pc, #56]	@ (80091d4 <HAL_PCD_MspInit+0xa0>)
 800919a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800919e:	6353      	str	r3, [r2, #52]	@ 0x34
 80091a0:	2300      	movs	r3, #0
 80091a2:	60fb      	str	r3, [r7, #12]
 80091a4:	4b0b      	ldr	r3, [pc, #44]	@ (80091d4 <HAL_PCD_MspInit+0xa0>)
 80091a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091a8:	4a0a      	ldr	r2, [pc, #40]	@ (80091d4 <HAL_PCD_MspInit+0xa0>)
 80091aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80091ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80091b0:	4b08      	ldr	r3, [pc, #32]	@ (80091d4 <HAL_PCD_MspInit+0xa0>)
 80091b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80091b8:	60fb      	str	r3, [r7, #12]
 80091ba:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80091bc:	2200      	movs	r2, #0
 80091be:	2100      	movs	r1, #0
 80091c0:	2043      	movs	r0, #67	@ 0x43
 80091c2:	f7f9 f8de 	bl	8002382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80091c6:	2043      	movs	r0, #67	@ 0x43
 80091c8:	f7f9 f8f7 	bl	80023ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80091cc:	bf00      	nop
 80091ce:	3728      	adds	r7, #40	@ 0x28
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	40023800 	.word	0x40023800
 80091d8:	40020000 	.word	0x40020000

080091dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80091f0:	4619      	mov	r1, r3
 80091f2:	4610      	mov	r0, r2
 80091f4:	f7fe fb49 	bl	800788a <USBD_LL_SetupStage>
}
 80091f8:	bf00      	nop
 80091fa:	3708      	adds	r7, #8
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	460b      	mov	r3, r1
 800920a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009212:	78fa      	ldrb	r2, [r7, #3]
 8009214:	6879      	ldr	r1, [r7, #4]
 8009216:	4613      	mov	r3, r2
 8009218:	00db      	lsls	r3, r3, #3
 800921a:	4413      	add	r3, r2
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	440b      	add	r3, r1
 8009220:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	78fb      	ldrb	r3, [r7, #3]
 8009228:	4619      	mov	r1, r3
 800922a:	f7fe fb83 	bl	8007934 <USBD_LL_DataOutStage>
}
 800922e:	bf00      	nop
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b082      	sub	sp, #8
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
 800923e:	460b      	mov	r3, r1
 8009240:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009248:	78fa      	ldrb	r2, [r7, #3]
 800924a:	6879      	ldr	r1, [r7, #4]
 800924c:	4613      	mov	r3, r2
 800924e:	00db      	lsls	r3, r3, #3
 8009250:	4413      	add	r3, r2
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	440b      	add	r3, r1
 8009256:	3320      	adds	r3, #32
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	78fb      	ldrb	r3, [r7, #3]
 800925c:	4619      	mov	r1, r3
 800925e:	f7fe fc1c 	bl	8007a9a <USBD_LL_DataInStage>
}
 8009262:	bf00      	nop
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800926a:	b580      	push	{r7, lr}
 800926c:	b082      	sub	sp, #8
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009278:	4618      	mov	r0, r3
 800927a:	f7fe fd56 	bl	8007d2a <USBD_LL_SOF>
}
 800927e:	bf00      	nop
 8009280:	3708      	adds	r7, #8
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b084      	sub	sp, #16
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800928e:	2301      	movs	r3, #1
 8009290:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	79db      	ldrb	r3, [r3, #7]
 8009296:	2b02      	cmp	r3, #2
 8009298:	d001      	beq.n	800929e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800929a:	f7f8 fd65 	bl	8001d68 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80092a4:	7bfa      	ldrb	r2, [r7, #15]
 80092a6:	4611      	mov	r1, r2
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7fe fcfa 	bl	8007ca2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80092b4:	4618      	mov	r0, r3
 80092b6:	f7fe fca2 	bl	8007bfe <USBD_LL_Reset>
}
 80092ba:	bf00      	nop
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
	...

080092c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7fe fcf5 	bl	8007cc2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	6812      	ldr	r2, [r2, #0]
 80092e6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80092ea:	f043 0301 	orr.w	r3, r3, #1
 80092ee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	7adb      	ldrb	r3, [r3, #11]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d005      	beq.n	8009304 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80092f8:	4b04      	ldr	r3, [pc, #16]	@ (800930c <HAL_PCD_SuspendCallback+0x48>)
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	4a03      	ldr	r2, [pc, #12]	@ (800930c <HAL_PCD_SuspendCallback+0x48>)
 80092fe:	f043 0306 	orr.w	r3, r3, #6
 8009302:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009304:	bf00      	nop
 8009306:	3708      	adds	r7, #8
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}
 800930c:	e000ed00 	.word	0xe000ed00

08009310 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800931e:	4618      	mov	r0, r3
 8009320:	f7fe fceb 	bl	8007cfa <USBD_LL_Resume>
}
 8009324:	bf00      	nop
 8009326:	3708      	adds	r7, #8
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	460b      	mov	r3, r1
 8009336:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800933e:	78fa      	ldrb	r2, [r7, #3]
 8009340:	4611      	mov	r1, r2
 8009342:	4618      	mov	r0, r3
 8009344:	f7fe fd43 	bl	8007dce <USBD_LL_IsoOUTIncomplete>
}
 8009348:	bf00      	nop
 800934a:	3708      	adds	r7, #8
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	460b      	mov	r3, r1
 800935a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009362:	78fa      	ldrb	r2, [r7, #3]
 8009364:	4611      	mov	r1, r2
 8009366:	4618      	mov	r0, r3
 8009368:	f7fe fcff 	bl	8007d6a <USBD_LL_IsoINIncomplete>
}
 800936c:	bf00      	nop
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009382:	4618      	mov	r0, r3
 8009384:	f7fe fd55 	bl	8007e32 <USBD_LL_DevConnected>
}
 8009388:	bf00      	nop
 800938a:	3708      	adds	r7, #8
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800939e:	4618      	mov	r0, r3
 80093a0:	f7fe fd52 	bl	8007e48 <USBD_LL_DevDisconnected>
}
 80093a4:	bf00      	nop
 80093a6:	3708      	adds	r7, #8
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d13c      	bne.n	8009436 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80093bc:	4a20      	ldr	r2, [pc, #128]	@ (8009440 <USBD_LL_Init+0x94>)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	4a1e      	ldr	r2, [pc, #120]	@ (8009440 <USBD_LL_Init+0x94>)
 80093c8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80093cc:	4b1c      	ldr	r3, [pc, #112]	@ (8009440 <USBD_LL_Init+0x94>)
 80093ce:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80093d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80093d4:	4b1a      	ldr	r3, [pc, #104]	@ (8009440 <USBD_LL_Init+0x94>)
 80093d6:	2204      	movs	r2, #4
 80093d8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80093da:	4b19      	ldr	r3, [pc, #100]	@ (8009440 <USBD_LL_Init+0x94>)
 80093dc:	2202      	movs	r2, #2
 80093de:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80093e0:	4b17      	ldr	r3, [pc, #92]	@ (8009440 <USBD_LL_Init+0x94>)
 80093e2:	2200      	movs	r2, #0
 80093e4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80093e6:	4b16      	ldr	r3, [pc, #88]	@ (8009440 <USBD_LL_Init+0x94>)
 80093e8:	2202      	movs	r2, #2
 80093ea:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80093ec:	4b14      	ldr	r3, [pc, #80]	@ (8009440 <USBD_LL_Init+0x94>)
 80093ee:	2200      	movs	r2, #0
 80093f0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80093f2:	4b13      	ldr	r3, [pc, #76]	@ (8009440 <USBD_LL_Init+0x94>)
 80093f4:	2200      	movs	r2, #0
 80093f6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80093f8:	4b11      	ldr	r3, [pc, #68]	@ (8009440 <USBD_LL_Init+0x94>)
 80093fa:	2200      	movs	r2, #0
 80093fc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80093fe:	4b10      	ldr	r3, [pc, #64]	@ (8009440 <USBD_LL_Init+0x94>)
 8009400:	2200      	movs	r2, #0
 8009402:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009404:	4b0e      	ldr	r3, [pc, #56]	@ (8009440 <USBD_LL_Init+0x94>)
 8009406:	2200      	movs	r2, #0
 8009408:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800940a:	480d      	ldr	r0, [pc, #52]	@ (8009440 <USBD_LL_Init+0x94>)
 800940c:	f7f9 fa0e 	bl	800282c <HAL_PCD_Init>
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	d001      	beq.n	800941a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009416:	f7f8 fca7 	bl	8001d68 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800941a:	2180      	movs	r1, #128	@ 0x80
 800941c:	4808      	ldr	r0, [pc, #32]	@ (8009440 <USBD_LL_Init+0x94>)
 800941e:	f7fa fc3a 	bl	8003c96 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009422:	2240      	movs	r2, #64	@ 0x40
 8009424:	2100      	movs	r1, #0
 8009426:	4806      	ldr	r0, [pc, #24]	@ (8009440 <USBD_LL_Init+0x94>)
 8009428:	f7fa fbee 	bl	8003c08 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800942c:	2280      	movs	r2, #128	@ 0x80
 800942e:	2101      	movs	r1, #1
 8009430:	4803      	ldr	r0, [pc, #12]	@ (8009440 <USBD_LL_Init+0x94>)
 8009432:	f7fa fbe9 	bl	8003c08 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009436:	2300      	movs	r3, #0
}
 8009438:	4618      	mov	r0, r3
 800943a:	3708      	adds	r7, #8
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}
 8009440:	200010a4 	.word	0x200010a4

08009444 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800944c:	2300      	movs	r3, #0
 800944e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009450:	2300      	movs	r3, #0
 8009452:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800945a:	4618      	mov	r0, r3
 800945c:	f7f9 faf5 	bl	8002a4a <HAL_PCD_Start>
 8009460:	4603      	mov	r3, r0
 8009462:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009464:	7bfb      	ldrb	r3, [r7, #15]
 8009466:	4618      	mov	r0, r3
 8009468:	f000 f942 	bl	80096f0 <USBD_Get_USB_Status>
 800946c:	4603      	mov	r3, r0
 800946e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009470:	7bbb      	ldrb	r3, [r7, #14]
}
 8009472:	4618      	mov	r0, r3
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b084      	sub	sp, #16
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
 8009482:	4608      	mov	r0, r1
 8009484:	4611      	mov	r1, r2
 8009486:	461a      	mov	r2, r3
 8009488:	4603      	mov	r3, r0
 800948a:	70fb      	strb	r3, [r7, #3]
 800948c:	460b      	mov	r3, r1
 800948e:	70bb      	strb	r3, [r7, #2]
 8009490:	4613      	mov	r3, r2
 8009492:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009494:	2300      	movs	r3, #0
 8009496:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009498:	2300      	movs	r3, #0
 800949a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80094a2:	78bb      	ldrb	r3, [r7, #2]
 80094a4:	883a      	ldrh	r2, [r7, #0]
 80094a6:	78f9      	ldrb	r1, [r7, #3]
 80094a8:	f7f9 ffc9 	bl	800343e <HAL_PCD_EP_Open>
 80094ac:	4603      	mov	r3, r0
 80094ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094b0:	7bfb      	ldrb	r3, [r7, #15]
 80094b2:	4618      	mov	r0, r3
 80094b4:	f000 f91c 	bl	80096f0 <USBD_Get_USB_Status>
 80094b8:	4603      	mov	r3, r0
 80094ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b084      	sub	sp, #16
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
 80094ce:	460b      	mov	r3, r1
 80094d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094d2:	2300      	movs	r3, #0
 80094d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094d6:	2300      	movs	r3, #0
 80094d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80094e0:	78fa      	ldrb	r2, [r7, #3]
 80094e2:	4611      	mov	r1, r2
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7fa f814 	bl	8003512 <HAL_PCD_EP_Close>
 80094ea:	4603      	mov	r3, r0
 80094ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094ee:	7bfb      	ldrb	r3, [r7, #15]
 80094f0:	4618      	mov	r0, r3
 80094f2:	f000 f8fd 	bl	80096f0 <USBD_Get_USB_Status>
 80094f6:	4603      	mov	r3, r0
 80094f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3710      	adds	r7, #16
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	460b      	mov	r3, r1
 800950e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009510:	2300      	movs	r3, #0
 8009512:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009514:	2300      	movs	r3, #0
 8009516:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800951e:	78fa      	ldrb	r2, [r7, #3]
 8009520:	4611      	mov	r1, r2
 8009522:	4618      	mov	r0, r3
 8009524:	f7fa f8cc 	bl	80036c0 <HAL_PCD_EP_SetStall>
 8009528:	4603      	mov	r3, r0
 800952a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800952c:	7bfb      	ldrb	r3, [r7, #15]
 800952e:	4618      	mov	r0, r3
 8009530:	f000 f8de 	bl	80096f0 <USBD_Get_USB_Status>
 8009534:	4603      	mov	r3, r0
 8009536:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009538:	7bbb      	ldrb	r3, [r7, #14]
}
 800953a:	4618      	mov	r0, r3
 800953c:	3710      	adds	r7, #16
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}

08009542 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009542:	b580      	push	{r7, lr}
 8009544:	b084      	sub	sp, #16
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
 800954a:	460b      	mov	r3, r1
 800954c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800954e:	2300      	movs	r3, #0
 8009550:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009552:	2300      	movs	r3, #0
 8009554:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800955c:	78fa      	ldrb	r2, [r7, #3]
 800955e:	4611      	mov	r1, r2
 8009560:	4618      	mov	r0, r3
 8009562:	f7fa f910 	bl	8003786 <HAL_PCD_EP_ClrStall>
 8009566:	4603      	mov	r3, r0
 8009568:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800956a:	7bfb      	ldrb	r3, [r7, #15]
 800956c:	4618      	mov	r0, r3
 800956e:	f000 f8bf 	bl	80096f0 <USBD_Get_USB_Status>
 8009572:	4603      	mov	r3, r0
 8009574:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009576:	7bbb      	ldrb	r3, [r7, #14]
}
 8009578:	4618      	mov	r0, r3
 800957a:	3710      	adds	r7, #16
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009580:	b480      	push	{r7}
 8009582:	b085      	sub	sp, #20
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	460b      	mov	r3, r1
 800958a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009592:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009594:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009598:	2b00      	cmp	r3, #0
 800959a:	da0b      	bge.n	80095b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800959c:	78fb      	ldrb	r3, [r7, #3]
 800959e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095a2:	68f9      	ldr	r1, [r7, #12]
 80095a4:	4613      	mov	r3, r2
 80095a6:	00db      	lsls	r3, r3, #3
 80095a8:	4413      	add	r3, r2
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	440b      	add	r3, r1
 80095ae:	3316      	adds	r3, #22
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	e00b      	b.n	80095cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80095b4:	78fb      	ldrb	r3, [r7, #3]
 80095b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095ba:	68f9      	ldr	r1, [r7, #12]
 80095bc:	4613      	mov	r3, r2
 80095be:	00db      	lsls	r3, r3, #3
 80095c0:	4413      	add	r3, r2
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	440b      	add	r3, r1
 80095c6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80095ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3714      	adds	r7, #20
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	460b      	mov	r3, r1
 80095e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095e4:	2300      	movs	r3, #0
 80095e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095e8:	2300      	movs	r3, #0
 80095ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80095f2:	78fa      	ldrb	r2, [r7, #3]
 80095f4:	4611      	mov	r1, r2
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7f9 fefd 	bl	80033f6 <HAL_PCD_SetAddress>
 80095fc:	4603      	mov	r3, r0
 80095fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009600:	7bfb      	ldrb	r3, [r7, #15]
 8009602:	4618      	mov	r0, r3
 8009604:	f000 f874 	bl	80096f0 <USBD_Get_USB_Status>
 8009608:	4603      	mov	r3, r0
 800960a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800960c:	7bbb      	ldrb	r3, [r7, #14]
}
 800960e:	4618      	mov	r0, r3
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b086      	sub	sp, #24
 800961a:	af00      	add	r7, sp, #0
 800961c:	60f8      	str	r0, [r7, #12]
 800961e:	607a      	str	r2, [r7, #4]
 8009620:	603b      	str	r3, [r7, #0]
 8009622:	460b      	mov	r3, r1
 8009624:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009626:	2300      	movs	r3, #0
 8009628:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800962a:	2300      	movs	r3, #0
 800962c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009634:	7af9      	ldrb	r1, [r7, #11]
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	f7fa f807 	bl	800364c <HAL_PCD_EP_Transmit>
 800963e:	4603      	mov	r3, r0
 8009640:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009642:	7dfb      	ldrb	r3, [r7, #23]
 8009644:	4618      	mov	r0, r3
 8009646:	f000 f853 	bl	80096f0 <USBD_Get_USB_Status>
 800964a:	4603      	mov	r3, r0
 800964c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800964e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3718      	adds	r7, #24
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b086      	sub	sp, #24
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	607a      	str	r2, [r7, #4]
 8009662:	603b      	str	r3, [r7, #0]
 8009664:	460b      	mov	r3, r1
 8009666:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009668:	2300      	movs	r3, #0
 800966a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800966c:	2300      	movs	r3, #0
 800966e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009676:	7af9      	ldrb	r1, [r7, #11]
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	f7f9 ff93 	bl	80035a6 <HAL_PCD_EP_Receive>
 8009680:	4603      	mov	r3, r0
 8009682:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009684:	7dfb      	ldrb	r3, [r7, #23]
 8009686:	4618      	mov	r0, r3
 8009688:	f000 f832 	bl	80096f0 <USBD_Get_USB_Status>
 800968c:	4603      	mov	r3, r0
 800968e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009690:	7dbb      	ldrb	r3, [r7, #22]
}
 8009692:	4618      	mov	r0, r3
 8009694:	3718      	adds	r7, #24
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b082      	sub	sp, #8
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
 80096a2:	460b      	mov	r3, r1
 80096a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80096ac:	78fa      	ldrb	r2, [r7, #3]
 80096ae:	4611      	mov	r1, r2
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7f9 ffb3 	bl	800361c <HAL_PCD_EP_GetRxCount>
 80096b6:	4603      	mov	r3, r0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80096c8:	4b03      	ldr	r3, [pc, #12]	@ (80096d8 <USBD_static_malloc+0x18>)
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	370c      	adds	r7, #12
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop
 80096d8:	20001588 	.word	0x20001588

080096dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]

}
 80096e4:	bf00      	nop
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b085      	sub	sp, #20
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	4603      	mov	r3, r0
 80096f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096fa:	2300      	movs	r3, #0
 80096fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80096fe:	79fb      	ldrb	r3, [r7, #7]
 8009700:	2b03      	cmp	r3, #3
 8009702:	d817      	bhi.n	8009734 <USBD_Get_USB_Status+0x44>
 8009704:	a201      	add	r2, pc, #4	@ (adr r2, 800970c <USBD_Get_USB_Status+0x1c>)
 8009706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800970a:	bf00      	nop
 800970c:	0800971d 	.word	0x0800971d
 8009710:	08009723 	.word	0x08009723
 8009714:	08009729 	.word	0x08009729
 8009718:	0800972f 	.word	0x0800972f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800971c:	2300      	movs	r3, #0
 800971e:	73fb      	strb	r3, [r7, #15]
    break;
 8009720:	e00b      	b.n	800973a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009722:	2303      	movs	r3, #3
 8009724:	73fb      	strb	r3, [r7, #15]
    break;
 8009726:	e008      	b.n	800973a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009728:	2301      	movs	r3, #1
 800972a:	73fb      	strb	r3, [r7, #15]
    break;
 800972c:	e005      	b.n	800973a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800972e:	2303      	movs	r3, #3
 8009730:	73fb      	strb	r3, [r7, #15]
    break;
 8009732:	e002      	b.n	800973a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009734:	2303      	movs	r3, #3
 8009736:	73fb      	strb	r3, [r7, #15]
    break;
 8009738:	bf00      	nop
  }
  return usb_status;
 800973a:	7bfb      	ldrb	r3, [r7, #15]
}
 800973c:	4618      	mov	r0, r3
 800973e:	3714      	adds	r7, #20
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <sniprintf>:
 8009748:	b40c      	push	{r2, r3}
 800974a:	b530      	push	{r4, r5, lr}
 800974c:	4b17      	ldr	r3, [pc, #92]	@ (80097ac <sniprintf+0x64>)
 800974e:	1e0c      	subs	r4, r1, #0
 8009750:	681d      	ldr	r5, [r3, #0]
 8009752:	b09d      	sub	sp, #116	@ 0x74
 8009754:	da08      	bge.n	8009768 <sniprintf+0x20>
 8009756:	238b      	movs	r3, #139	@ 0x8b
 8009758:	602b      	str	r3, [r5, #0]
 800975a:	f04f 30ff 	mov.w	r0, #4294967295
 800975e:	b01d      	add	sp, #116	@ 0x74
 8009760:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009764:	b002      	add	sp, #8
 8009766:	4770      	bx	lr
 8009768:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800976c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009770:	bf14      	ite	ne
 8009772:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009776:	4623      	moveq	r3, r4
 8009778:	9304      	str	r3, [sp, #16]
 800977a:	9307      	str	r3, [sp, #28]
 800977c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009780:	9002      	str	r0, [sp, #8]
 8009782:	9006      	str	r0, [sp, #24]
 8009784:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009788:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800978a:	ab21      	add	r3, sp, #132	@ 0x84
 800978c:	a902      	add	r1, sp, #8
 800978e:	4628      	mov	r0, r5
 8009790:	9301      	str	r3, [sp, #4]
 8009792:	f000 f9c3 	bl	8009b1c <_svfiprintf_r>
 8009796:	1c43      	adds	r3, r0, #1
 8009798:	bfbc      	itt	lt
 800979a:	238b      	movlt	r3, #139	@ 0x8b
 800979c:	602b      	strlt	r3, [r5, #0]
 800979e:	2c00      	cmp	r4, #0
 80097a0:	d0dd      	beq.n	800975e <sniprintf+0x16>
 80097a2:	9b02      	ldr	r3, [sp, #8]
 80097a4:	2200      	movs	r2, #0
 80097a6:	701a      	strb	r2, [r3, #0]
 80097a8:	e7d9      	b.n	800975e <sniprintf+0x16>
 80097aa:	bf00      	nop
 80097ac:	200000fc 	.word	0x200000fc

080097b0 <siprintf>:
 80097b0:	b40e      	push	{r1, r2, r3}
 80097b2:	b500      	push	{lr}
 80097b4:	b09c      	sub	sp, #112	@ 0x70
 80097b6:	ab1d      	add	r3, sp, #116	@ 0x74
 80097b8:	9002      	str	r0, [sp, #8]
 80097ba:	9006      	str	r0, [sp, #24]
 80097bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80097c0:	4809      	ldr	r0, [pc, #36]	@ (80097e8 <siprintf+0x38>)
 80097c2:	9107      	str	r1, [sp, #28]
 80097c4:	9104      	str	r1, [sp, #16]
 80097c6:	4909      	ldr	r1, [pc, #36]	@ (80097ec <siprintf+0x3c>)
 80097c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80097cc:	9105      	str	r1, [sp, #20]
 80097ce:	6800      	ldr	r0, [r0, #0]
 80097d0:	9301      	str	r3, [sp, #4]
 80097d2:	a902      	add	r1, sp, #8
 80097d4:	f000 f9a2 	bl	8009b1c <_svfiprintf_r>
 80097d8:	9b02      	ldr	r3, [sp, #8]
 80097da:	2200      	movs	r2, #0
 80097dc:	701a      	strb	r2, [r3, #0]
 80097de:	b01c      	add	sp, #112	@ 0x70
 80097e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80097e4:	b003      	add	sp, #12
 80097e6:	4770      	bx	lr
 80097e8:	200000fc 	.word	0x200000fc
 80097ec:	ffff0208 	.word	0xffff0208

080097f0 <memset>:
 80097f0:	4402      	add	r2, r0
 80097f2:	4603      	mov	r3, r0
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d100      	bne.n	80097fa <memset+0xa>
 80097f8:	4770      	bx	lr
 80097fa:	f803 1b01 	strb.w	r1, [r3], #1
 80097fe:	e7f9      	b.n	80097f4 <memset+0x4>

08009800 <__errno>:
 8009800:	4b01      	ldr	r3, [pc, #4]	@ (8009808 <__errno+0x8>)
 8009802:	6818      	ldr	r0, [r3, #0]
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop
 8009808:	200000fc 	.word	0x200000fc

0800980c <__libc_init_array>:
 800980c:	b570      	push	{r4, r5, r6, lr}
 800980e:	4d0d      	ldr	r5, [pc, #52]	@ (8009844 <__libc_init_array+0x38>)
 8009810:	4c0d      	ldr	r4, [pc, #52]	@ (8009848 <__libc_init_array+0x3c>)
 8009812:	1b64      	subs	r4, r4, r5
 8009814:	10a4      	asrs	r4, r4, #2
 8009816:	2600      	movs	r6, #0
 8009818:	42a6      	cmp	r6, r4
 800981a:	d109      	bne.n	8009830 <__libc_init_array+0x24>
 800981c:	4d0b      	ldr	r5, [pc, #44]	@ (800984c <__libc_init_array+0x40>)
 800981e:	4c0c      	ldr	r4, [pc, #48]	@ (8009850 <__libc_init_array+0x44>)
 8009820:	f000 fc66 	bl	800a0f0 <_init>
 8009824:	1b64      	subs	r4, r4, r5
 8009826:	10a4      	asrs	r4, r4, #2
 8009828:	2600      	movs	r6, #0
 800982a:	42a6      	cmp	r6, r4
 800982c:	d105      	bne.n	800983a <__libc_init_array+0x2e>
 800982e:	bd70      	pop	{r4, r5, r6, pc}
 8009830:	f855 3b04 	ldr.w	r3, [r5], #4
 8009834:	4798      	blx	r3
 8009836:	3601      	adds	r6, #1
 8009838:	e7ee      	b.n	8009818 <__libc_init_array+0xc>
 800983a:	f855 3b04 	ldr.w	r3, [r5], #4
 800983e:	4798      	blx	r3
 8009840:	3601      	adds	r6, #1
 8009842:	e7f2      	b.n	800982a <__libc_init_array+0x1e>
 8009844:	0800a284 	.word	0x0800a284
 8009848:	0800a284 	.word	0x0800a284
 800984c:	0800a284 	.word	0x0800a284
 8009850:	0800a288 	.word	0x0800a288

08009854 <__retarget_lock_acquire_recursive>:
 8009854:	4770      	bx	lr

08009856 <__retarget_lock_release_recursive>:
 8009856:	4770      	bx	lr

08009858 <memcpy>:
 8009858:	440a      	add	r2, r1
 800985a:	4291      	cmp	r1, r2
 800985c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009860:	d100      	bne.n	8009864 <memcpy+0xc>
 8009862:	4770      	bx	lr
 8009864:	b510      	push	{r4, lr}
 8009866:	f811 4b01 	ldrb.w	r4, [r1], #1
 800986a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800986e:	4291      	cmp	r1, r2
 8009870:	d1f9      	bne.n	8009866 <memcpy+0xe>
 8009872:	bd10      	pop	{r4, pc}

08009874 <_free_r>:
 8009874:	b538      	push	{r3, r4, r5, lr}
 8009876:	4605      	mov	r5, r0
 8009878:	2900      	cmp	r1, #0
 800987a:	d041      	beq.n	8009900 <_free_r+0x8c>
 800987c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009880:	1f0c      	subs	r4, r1, #4
 8009882:	2b00      	cmp	r3, #0
 8009884:	bfb8      	it	lt
 8009886:	18e4      	addlt	r4, r4, r3
 8009888:	f000 f8e0 	bl	8009a4c <__malloc_lock>
 800988c:	4a1d      	ldr	r2, [pc, #116]	@ (8009904 <_free_r+0x90>)
 800988e:	6813      	ldr	r3, [r2, #0]
 8009890:	b933      	cbnz	r3, 80098a0 <_free_r+0x2c>
 8009892:	6063      	str	r3, [r4, #4]
 8009894:	6014      	str	r4, [r2, #0]
 8009896:	4628      	mov	r0, r5
 8009898:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800989c:	f000 b8dc 	b.w	8009a58 <__malloc_unlock>
 80098a0:	42a3      	cmp	r3, r4
 80098a2:	d908      	bls.n	80098b6 <_free_r+0x42>
 80098a4:	6820      	ldr	r0, [r4, #0]
 80098a6:	1821      	adds	r1, r4, r0
 80098a8:	428b      	cmp	r3, r1
 80098aa:	bf01      	itttt	eq
 80098ac:	6819      	ldreq	r1, [r3, #0]
 80098ae:	685b      	ldreq	r3, [r3, #4]
 80098b0:	1809      	addeq	r1, r1, r0
 80098b2:	6021      	streq	r1, [r4, #0]
 80098b4:	e7ed      	b.n	8009892 <_free_r+0x1e>
 80098b6:	461a      	mov	r2, r3
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	b10b      	cbz	r3, 80098c0 <_free_r+0x4c>
 80098bc:	42a3      	cmp	r3, r4
 80098be:	d9fa      	bls.n	80098b6 <_free_r+0x42>
 80098c0:	6811      	ldr	r1, [r2, #0]
 80098c2:	1850      	adds	r0, r2, r1
 80098c4:	42a0      	cmp	r0, r4
 80098c6:	d10b      	bne.n	80098e0 <_free_r+0x6c>
 80098c8:	6820      	ldr	r0, [r4, #0]
 80098ca:	4401      	add	r1, r0
 80098cc:	1850      	adds	r0, r2, r1
 80098ce:	4283      	cmp	r3, r0
 80098d0:	6011      	str	r1, [r2, #0]
 80098d2:	d1e0      	bne.n	8009896 <_free_r+0x22>
 80098d4:	6818      	ldr	r0, [r3, #0]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	6053      	str	r3, [r2, #4]
 80098da:	4408      	add	r0, r1
 80098dc:	6010      	str	r0, [r2, #0]
 80098de:	e7da      	b.n	8009896 <_free_r+0x22>
 80098e0:	d902      	bls.n	80098e8 <_free_r+0x74>
 80098e2:	230c      	movs	r3, #12
 80098e4:	602b      	str	r3, [r5, #0]
 80098e6:	e7d6      	b.n	8009896 <_free_r+0x22>
 80098e8:	6820      	ldr	r0, [r4, #0]
 80098ea:	1821      	adds	r1, r4, r0
 80098ec:	428b      	cmp	r3, r1
 80098ee:	bf04      	itt	eq
 80098f0:	6819      	ldreq	r1, [r3, #0]
 80098f2:	685b      	ldreq	r3, [r3, #4]
 80098f4:	6063      	str	r3, [r4, #4]
 80098f6:	bf04      	itt	eq
 80098f8:	1809      	addeq	r1, r1, r0
 80098fa:	6021      	streq	r1, [r4, #0]
 80098fc:	6054      	str	r4, [r2, #4]
 80098fe:	e7ca      	b.n	8009896 <_free_r+0x22>
 8009900:	bd38      	pop	{r3, r4, r5, pc}
 8009902:	bf00      	nop
 8009904:	200018ec 	.word	0x200018ec

08009908 <sbrk_aligned>:
 8009908:	b570      	push	{r4, r5, r6, lr}
 800990a:	4e0f      	ldr	r6, [pc, #60]	@ (8009948 <sbrk_aligned+0x40>)
 800990c:	460c      	mov	r4, r1
 800990e:	6831      	ldr	r1, [r6, #0]
 8009910:	4605      	mov	r5, r0
 8009912:	b911      	cbnz	r1, 800991a <sbrk_aligned+0x12>
 8009914:	f000 fba6 	bl	800a064 <_sbrk_r>
 8009918:	6030      	str	r0, [r6, #0]
 800991a:	4621      	mov	r1, r4
 800991c:	4628      	mov	r0, r5
 800991e:	f000 fba1 	bl	800a064 <_sbrk_r>
 8009922:	1c43      	adds	r3, r0, #1
 8009924:	d103      	bne.n	800992e <sbrk_aligned+0x26>
 8009926:	f04f 34ff 	mov.w	r4, #4294967295
 800992a:	4620      	mov	r0, r4
 800992c:	bd70      	pop	{r4, r5, r6, pc}
 800992e:	1cc4      	adds	r4, r0, #3
 8009930:	f024 0403 	bic.w	r4, r4, #3
 8009934:	42a0      	cmp	r0, r4
 8009936:	d0f8      	beq.n	800992a <sbrk_aligned+0x22>
 8009938:	1a21      	subs	r1, r4, r0
 800993a:	4628      	mov	r0, r5
 800993c:	f000 fb92 	bl	800a064 <_sbrk_r>
 8009940:	3001      	adds	r0, #1
 8009942:	d1f2      	bne.n	800992a <sbrk_aligned+0x22>
 8009944:	e7ef      	b.n	8009926 <sbrk_aligned+0x1e>
 8009946:	bf00      	nop
 8009948:	200018e8 	.word	0x200018e8

0800994c <_malloc_r>:
 800994c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009950:	1ccd      	adds	r5, r1, #3
 8009952:	f025 0503 	bic.w	r5, r5, #3
 8009956:	3508      	adds	r5, #8
 8009958:	2d0c      	cmp	r5, #12
 800995a:	bf38      	it	cc
 800995c:	250c      	movcc	r5, #12
 800995e:	2d00      	cmp	r5, #0
 8009960:	4606      	mov	r6, r0
 8009962:	db01      	blt.n	8009968 <_malloc_r+0x1c>
 8009964:	42a9      	cmp	r1, r5
 8009966:	d904      	bls.n	8009972 <_malloc_r+0x26>
 8009968:	230c      	movs	r3, #12
 800996a:	6033      	str	r3, [r6, #0]
 800996c:	2000      	movs	r0, #0
 800996e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009972:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009a48 <_malloc_r+0xfc>
 8009976:	f000 f869 	bl	8009a4c <__malloc_lock>
 800997a:	f8d8 3000 	ldr.w	r3, [r8]
 800997e:	461c      	mov	r4, r3
 8009980:	bb44      	cbnz	r4, 80099d4 <_malloc_r+0x88>
 8009982:	4629      	mov	r1, r5
 8009984:	4630      	mov	r0, r6
 8009986:	f7ff ffbf 	bl	8009908 <sbrk_aligned>
 800998a:	1c43      	adds	r3, r0, #1
 800998c:	4604      	mov	r4, r0
 800998e:	d158      	bne.n	8009a42 <_malloc_r+0xf6>
 8009990:	f8d8 4000 	ldr.w	r4, [r8]
 8009994:	4627      	mov	r7, r4
 8009996:	2f00      	cmp	r7, #0
 8009998:	d143      	bne.n	8009a22 <_malloc_r+0xd6>
 800999a:	2c00      	cmp	r4, #0
 800999c:	d04b      	beq.n	8009a36 <_malloc_r+0xea>
 800999e:	6823      	ldr	r3, [r4, #0]
 80099a0:	4639      	mov	r1, r7
 80099a2:	4630      	mov	r0, r6
 80099a4:	eb04 0903 	add.w	r9, r4, r3
 80099a8:	f000 fb5c 	bl	800a064 <_sbrk_r>
 80099ac:	4581      	cmp	r9, r0
 80099ae:	d142      	bne.n	8009a36 <_malloc_r+0xea>
 80099b0:	6821      	ldr	r1, [r4, #0]
 80099b2:	1a6d      	subs	r5, r5, r1
 80099b4:	4629      	mov	r1, r5
 80099b6:	4630      	mov	r0, r6
 80099b8:	f7ff ffa6 	bl	8009908 <sbrk_aligned>
 80099bc:	3001      	adds	r0, #1
 80099be:	d03a      	beq.n	8009a36 <_malloc_r+0xea>
 80099c0:	6823      	ldr	r3, [r4, #0]
 80099c2:	442b      	add	r3, r5
 80099c4:	6023      	str	r3, [r4, #0]
 80099c6:	f8d8 3000 	ldr.w	r3, [r8]
 80099ca:	685a      	ldr	r2, [r3, #4]
 80099cc:	bb62      	cbnz	r2, 8009a28 <_malloc_r+0xdc>
 80099ce:	f8c8 7000 	str.w	r7, [r8]
 80099d2:	e00f      	b.n	80099f4 <_malloc_r+0xa8>
 80099d4:	6822      	ldr	r2, [r4, #0]
 80099d6:	1b52      	subs	r2, r2, r5
 80099d8:	d420      	bmi.n	8009a1c <_malloc_r+0xd0>
 80099da:	2a0b      	cmp	r2, #11
 80099dc:	d917      	bls.n	8009a0e <_malloc_r+0xc2>
 80099de:	1961      	adds	r1, r4, r5
 80099e0:	42a3      	cmp	r3, r4
 80099e2:	6025      	str	r5, [r4, #0]
 80099e4:	bf18      	it	ne
 80099e6:	6059      	strne	r1, [r3, #4]
 80099e8:	6863      	ldr	r3, [r4, #4]
 80099ea:	bf08      	it	eq
 80099ec:	f8c8 1000 	streq.w	r1, [r8]
 80099f0:	5162      	str	r2, [r4, r5]
 80099f2:	604b      	str	r3, [r1, #4]
 80099f4:	4630      	mov	r0, r6
 80099f6:	f000 f82f 	bl	8009a58 <__malloc_unlock>
 80099fa:	f104 000b 	add.w	r0, r4, #11
 80099fe:	1d23      	adds	r3, r4, #4
 8009a00:	f020 0007 	bic.w	r0, r0, #7
 8009a04:	1ac2      	subs	r2, r0, r3
 8009a06:	bf1c      	itt	ne
 8009a08:	1a1b      	subne	r3, r3, r0
 8009a0a:	50a3      	strne	r3, [r4, r2]
 8009a0c:	e7af      	b.n	800996e <_malloc_r+0x22>
 8009a0e:	6862      	ldr	r2, [r4, #4]
 8009a10:	42a3      	cmp	r3, r4
 8009a12:	bf0c      	ite	eq
 8009a14:	f8c8 2000 	streq.w	r2, [r8]
 8009a18:	605a      	strne	r2, [r3, #4]
 8009a1a:	e7eb      	b.n	80099f4 <_malloc_r+0xa8>
 8009a1c:	4623      	mov	r3, r4
 8009a1e:	6864      	ldr	r4, [r4, #4]
 8009a20:	e7ae      	b.n	8009980 <_malloc_r+0x34>
 8009a22:	463c      	mov	r4, r7
 8009a24:	687f      	ldr	r7, [r7, #4]
 8009a26:	e7b6      	b.n	8009996 <_malloc_r+0x4a>
 8009a28:	461a      	mov	r2, r3
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	42a3      	cmp	r3, r4
 8009a2e:	d1fb      	bne.n	8009a28 <_malloc_r+0xdc>
 8009a30:	2300      	movs	r3, #0
 8009a32:	6053      	str	r3, [r2, #4]
 8009a34:	e7de      	b.n	80099f4 <_malloc_r+0xa8>
 8009a36:	230c      	movs	r3, #12
 8009a38:	6033      	str	r3, [r6, #0]
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	f000 f80c 	bl	8009a58 <__malloc_unlock>
 8009a40:	e794      	b.n	800996c <_malloc_r+0x20>
 8009a42:	6005      	str	r5, [r0, #0]
 8009a44:	e7d6      	b.n	80099f4 <_malloc_r+0xa8>
 8009a46:	bf00      	nop
 8009a48:	200018ec 	.word	0x200018ec

08009a4c <__malloc_lock>:
 8009a4c:	4801      	ldr	r0, [pc, #4]	@ (8009a54 <__malloc_lock+0x8>)
 8009a4e:	f7ff bf01 	b.w	8009854 <__retarget_lock_acquire_recursive>
 8009a52:	bf00      	nop
 8009a54:	200018e4 	.word	0x200018e4

08009a58 <__malloc_unlock>:
 8009a58:	4801      	ldr	r0, [pc, #4]	@ (8009a60 <__malloc_unlock+0x8>)
 8009a5a:	f7ff befc 	b.w	8009856 <__retarget_lock_release_recursive>
 8009a5e:	bf00      	nop
 8009a60:	200018e4 	.word	0x200018e4

08009a64 <__ssputs_r>:
 8009a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a68:	688e      	ldr	r6, [r1, #8]
 8009a6a:	461f      	mov	r7, r3
 8009a6c:	42be      	cmp	r6, r7
 8009a6e:	680b      	ldr	r3, [r1, #0]
 8009a70:	4682      	mov	sl, r0
 8009a72:	460c      	mov	r4, r1
 8009a74:	4690      	mov	r8, r2
 8009a76:	d82d      	bhi.n	8009ad4 <__ssputs_r+0x70>
 8009a78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009a80:	d026      	beq.n	8009ad0 <__ssputs_r+0x6c>
 8009a82:	6965      	ldr	r5, [r4, #20]
 8009a84:	6909      	ldr	r1, [r1, #16]
 8009a86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a8a:	eba3 0901 	sub.w	r9, r3, r1
 8009a8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a92:	1c7b      	adds	r3, r7, #1
 8009a94:	444b      	add	r3, r9
 8009a96:	106d      	asrs	r5, r5, #1
 8009a98:	429d      	cmp	r5, r3
 8009a9a:	bf38      	it	cc
 8009a9c:	461d      	movcc	r5, r3
 8009a9e:	0553      	lsls	r3, r2, #21
 8009aa0:	d527      	bpl.n	8009af2 <__ssputs_r+0x8e>
 8009aa2:	4629      	mov	r1, r5
 8009aa4:	f7ff ff52 	bl	800994c <_malloc_r>
 8009aa8:	4606      	mov	r6, r0
 8009aaa:	b360      	cbz	r0, 8009b06 <__ssputs_r+0xa2>
 8009aac:	6921      	ldr	r1, [r4, #16]
 8009aae:	464a      	mov	r2, r9
 8009ab0:	f7ff fed2 	bl	8009858 <memcpy>
 8009ab4:	89a3      	ldrh	r3, [r4, #12]
 8009ab6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009aba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009abe:	81a3      	strh	r3, [r4, #12]
 8009ac0:	6126      	str	r6, [r4, #16]
 8009ac2:	6165      	str	r5, [r4, #20]
 8009ac4:	444e      	add	r6, r9
 8009ac6:	eba5 0509 	sub.w	r5, r5, r9
 8009aca:	6026      	str	r6, [r4, #0]
 8009acc:	60a5      	str	r5, [r4, #8]
 8009ace:	463e      	mov	r6, r7
 8009ad0:	42be      	cmp	r6, r7
 8009ad2:	d900      	bls.n	8009ad6 <__ssputs_r+0x72>
 8009ad4:	463e      	mov	r6, r7
 8009ad6:	6820      	ldr	r0, [r4, #0]
 8009ad8:	4632      	mov	r2, r6
 8009ada:	4641      	mov	r1, r8
 8009adc:	f000 faa8 	bl	800a030 <memmove>
 8009ae0:	68a3      	ldr	r3, [r4, #8]
 8009ae2:	1b9b      	subs	r3, r3, r6
 8009ae4:	60a3      	str	r3, [r4, #8]
 8009ae6:	6823      	ldr	r3, [r4, #0]
 8009ae8:	4433      	add	r3, r6
 8009aea:	6023      	str	r3, [r4, #0]
 8009aec:	2000      	movs	r0, #0
 8009aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009af2:	462a      	mov	r2, r5
 8009af4:	f000 fac6 	bl	800a084 <_realloc_r>
 8009af8:	4606      	mov	r6, r0
 8009afa:	2800      	cmp	r0, #0
 8009afc:	d1e0      	bne.n	8009ac0 <__ssputs_r+0x5c>
 8009afe:	6921      	ldr	r1, [r4, #16]
 8009b00:	4650      	mov	r0, sl
 8009b02:	f7ff feb7 	bl	8009874 <_free_r>
 8009b06:	230c      	movs	r3, #12
 8009b08:	f8ca 3000 	str.w	r3, [sl]
 8009b0c:	89a3      	ldrh	r3, [r4, #12]
 8009b0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b12:	81a3      	strh	r3, [r4, #12]
 8009b14:	f04f 30ff 	mov.w	r0, #4294967295
 8009b18:	e7e9      	b.n	8009aee <__ssputs_r+0x8a>
	...

08009b1c <_svfiprintf_r>:
 8009b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b20:	4698      	mov	r8, r3
 8009b22:	898b      	ldrh	r3, [r1, #12]
 8009b24:	061b      	lsls	r3, r3, #24
 8009b26:	b09d      	sub	sp, #116	@ 0x74
 8009b28:	4607      	mov	r7, r0
 8009b2a:	460d      	mov	r5, r1
 8009b2c:	4614      	mov	r4, r2
 8009b2e:	d510      	bpl.n	8009b52 <_svfiprintf_r+0x36>
 8009b30:	690b      	ldr	r3, [r1, #16]
 8009b32:	b973      	cbnz	r3, 8009b52 <_svfiprintf_r+0x36>
 8009b34:	2140      	movs	r1, #64	@ 0x40
 8009b36:	f7ff ff09 	bl	800994c <_malloc_r>
 8009b3a:	6028      	str	r0, [r5, #0]
 8009b3c:	6128      	str	r0, [r5, #16]
 8009b3e:	b930      	cbnz	r0, 8009b4e <_svfiprintf_r+0x32>
 8009b40:	230c      	movs	r3, #12
 8009b42:	603b      	str	r3, [r7, #0]
 8009b44:	f04f 30ff 	mov.w	r0, #4294967295
 8009b48:	b01d      	add	sp, #116	@ 0x74
 8009b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b4e:	2340      	movs	r3, #64	@ 0x40
 8009b50:	616b      	str	r3, [r5, #20]
 8009b52:	2300      	movs	r3, #0
 8009b54:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b56:	2320      	movs	r3, #32
 8009b58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b60:	2330      	movs	r3, #48	@ 0x30
 8009b62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009d00 <_svfiprintf_r+0x1e4>
 8009b66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b6a:	f04f 0901 	mov.w	r9, #1
 8009b6e:	4623      	mov	r3, r4
 8009b70:	469a      	mov	sl, r3
 8009b72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b76:	b10a      	cbz	r2, 8009b7c <_svfiprintf_r+0x60>
 8009b78:	2a25      	cmp	r2, #37	@ 0x25
 8009b7a:	d1f9      	bne.n	8009b70 <_svfiprintf_r+0x54>
 8009b7c:	ebba 0b04 	subs.w	fp, sl, r4
 8009b80:	d00b      	beq.n	8009b9a <_svfiprintf_r+0x7e>
 8009b82:	465b      	mov	r3, fp
 8009b84:	4622      	mov	r2, r4
 8009b86:	4629      	mov	r1, r5
 8009b88:	4638      	mov	r0, r7
 8009b8a:	f7ff ff6b 	bl	8009a64 <__ssputs_r>
 8009b8e:	3001      	adds	r0, #1
 8009b90:	f000 80a7 	beq.w	8009ce2 <_svfiprintf_r+0x1c6>
 8009b94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b96:	445a      	add	r2, fp
 8009b98:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b9a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	f000 809f 	beq.w	8009ce2 <_svfiprintf_r+0x1c6>
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8009baa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bae:	f10a 0a01 	add.w	sl, sl, #1
 8009bb2:	9304      	str	r3, [sp, #16]
 8009bb4:	9307      	str	r3, [sp, #28]
 8009bb6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009bba:	931a      	str	r3, [sp, #104]	@ 0x68
 8009bbc:	4654      	mov	r4, sl
 8009bbe:	2205      	movs	r2, #5
 8009bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bc4:	484e      	ldr	r0, [pc, #312]	@ (8009d00 <_svfiprintf_r+0x1e4>)
 8009bc6:	f7f6 fb13 	bl	80001f0 <memchr>
 8009bca:	9a04      	ldr	r2, [sp, #16]
 8009bcc:	b9d8      	cbnz	r0, 8009c06 <_svfiprintf_r+0xea>
 8009bce:	06d0      	lsls	r0, r2, #27
 8009bd0:	bf44      	itt	mi
 8009bd2:	2320      	movmi	r3, #32
 8009bd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bd8:	0711      	lsls	r1, r2, #28
 8009bda:	bf44      	itt	mi
 8009bdc:	232b      	movmi	r3, #43	@ 0x2b
 8009bde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009be2:	f89a 3000 	ldrb.w	r3, [sl]
 8009be6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009be8:	d015      	beq.n	8009c16 <_svfiprintf_r+0xfa>
 8009bea:	9a07      	ldr	r2, [sp, #28]
 8009bec:	4654      	mov	r4, sl
 8009bee:	2000      	movs	r0, #0
 8009bf0:	f04f 0c0a 	mov.w	ip, #10
 8009bf4:	4621      	mov	r1, r4
 8009bf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bfa:	3b30      	subs	r3, #48	@ 0x30
 8009bfc:	2b09      	cmp	r3, #9
 8009bfe:	d94b      	bls.n	8009c98 <_svfiprintf_r+0x17c>
 8009c00:	b1b0      	cbz	r0, 8009c30 <_svfiprintf_r+0x114>
 8009c02:	9207      	str	r2, [sp, #28]
 8009c04:	e014      	b.n	8009c30 <_svfiprintf_r+0x114>
 8009c06:	eba0 0308 	sub.w	r3, r0, r8
 8009c0a:	fa09 f303 	lsl.w	r3, r9, r3
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	9304      	str	r3, [sp, #16]
 8009c12:	46a2      	mov	sl, r4
 8009c14:	e7d2      	b.n	8009bbc <_svfiprintf_r+0xa0>
 8009c16:	9b03      	ldr	r3, [sp, #12]
 8009c18:	1d19      	adds	r1, r3, #4
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	9103      	str	r1, [sp, #12]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	bfbb      	ittet	lt
 8009c22:	425b      	neglt	r3, r3
 8009c24:	f042 0202 	orrlt.w	r2, r2, #2
 8009c28:	9307      	strge	r3, [sp, #28]
 8009c2a:	9307      	strlt	r3, [sp, #28]
 8009c2c:	bfb8      	it	lt
 8009c2e:	9204      	strlt	r2, [sp, #16]
 8009c30:	7823      	ldrb	r3, [r4, #0]
 8009c32:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c34:	d10a      	bne.n	8009c4c <_svfiprintf_r+0x130>
 8009c36:	7863      	ldrb	r3, [r4, #1]
 8009c38:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c3a:	d132      	bne.n	8009ca2 <_svfiprintf_r+0x186>
 8009c3c:	9b03      	ldr	r3, [sp, #12]
 8009c3e:	1d1a      	adds	r2, r3, #4
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	9203      	str	r2, [sp, #12]
 8009c44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c48:	3402      	adds	r4, #2
 8009c4a:	9305      	str	r3, [sp, #20]
 8009c4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009d10 <_svfiprintf_r+0x1f4>
 8009c50:	7821      	ldrb	r1, [r4, #0]
 8009c52:	2203      	movs	r2, #3
 8009c54:	4650      	mov	r0, sl
 8009c56:	f7f6 facb 	bl	80001f0 <memchr>
 8009c5a:	b138      	cbz	r0, 8009c6c <_svfiprintf_r+0x150>
 8009c5c:	9b04      	ldr	r3, [sp, #16]
 8009c5e:	eba0 000a 	sub.w	r0, r0, sl
 8009c62:	2240      	movs	r2, #64	@ 0x40
 8009c64:	4082      	lsls	r2, r0
 8009c66:	4313      	orrs	r3, r2
 8009c68:	3401      	adds	r4, #1
 8009c6a:	9304      	str	r3, [sp, #16]
 8009c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c70:	4824      	ldr	r0, [pc, #144]	@ (8009d04 <_svfiprintf_r+0x1e8>)
 8009c72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c76:	2206      	movs	r2, #6
 8009c78:	f7f6 faba 	bl	80001f0 <memchr>
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	d036      	beq.n	8009cee <_svfiprintf_r+0x1d2>
 8009c80:	4b21      	ldr	r3, [pc, #132]	@ (8009d08 <_svfiprintf_r+0x1ec>)
 8009c82:	bb1b      	cbnz	r3, 8009ccc <_svfiprintf_r+0x1b0>
 8009c84:	9b03      	ldr	r3, [sp, #12]
 8009c86:	3307      	adds	r3, #7
 8009c88:	f023 0307 	bic.w	r3, r3, #7
 8009c8c:	3308      	adds	r3, #8
 8009c8e:	9303      	str	r3, [sp, #12]
 8009c90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c92:	4433      	add	r3, r6
 8009c94:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c96:	e76a      	b.n	8009b6e <_svfiprintf_r+0x52>
 8009c98:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c9c:	460c      	mov	r4, r1
 8009c9e:	2001      	movs	r0, #1
 8009ca0:	e7a8      	b.n	8009bf4 <_svfiprintf_r+0xd8>
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	3401      	adds	r4, #1
 8009ca6:	9305      	str	r3, [sp, #20]
 8009ca8:	4619      	mov	r1, r3
 8009caa:	f04f 0c0a 	mov.w	ip, #10
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cb4:	3a30      	subs	r2, #48	@ 0x30
 8009cb6:	2a09      	cmp	r2, #9
 8009cb8:	d903      	bls.n	8009cc2 <_svfiprintf_r+0x1a6>
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d0c6      	beq.n	8009c4c <_svfiprintf_r+0x130>
 8009cbe:	9105      	str	r1, [sp, #20]
 8009cc0:	e7c4      	b.n	8009c4c <_svfiprintf_r+0x130>
 8009cc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cc6:	4604      	mov	r4, r0
 8009cc8:	2301      	movs	r3, #1
 8009cca:	e7f0      	b.n	8009cae <_svfiprintf_r+0x192>
 8009ccc:	ab03      	add	r3, sp, #12
 8009cce:	9300      	str	r3, [sp, #0]
 8009cd0:	462a      	mov	r2, r5
 8009cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8009d0c <_svfiprintf_r+0x1f0>)
 8009cd4:	a904      	add	r1, sp, #16
 8009cd6:	4638      	mov	r0, r7
 8009cd8:	f3af 8000 	nop.w
 8009cdc:	1c42      	adds	r2, r0, #1
 8009cde:	4606      	mov	r6, r0
 8009ce0:	d1d6      	bne.n	8009c90 <_svfiprintf_r+0x174>
 8009ce2:	89ab      	ldrh	r3, [r5, #12]
 8009ce4:	065b      	lsls	r3, r3, #25
 8009ce6:	f53f af2d 	bmi.w	8009b44 <_svfiprintf_r+0x28>
 8009cea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009cec:	e72c      	b.n	8009b48 <_svfiprintf_r+0x2c>
 8009cee:	ab03      	add	r3, sp, #12
 8009cf0:	9300      	str	r3, [sp, #0]
 8009cf2:	462a      	mov	r2, r5
 8009cf4:	4b05      	ldr	r3, [pc, #20]	@ (8009d0c <_svfiprintf_r+0x1f0>)
 8009cf6:	a904      	add	r1, sp, #16
 8009cf8:	4638      	mov	r0, r7
 8009cfa:	f000 f879 	bl	8009df0 <_printf_i>
 8009cfe:	e7ed      	b.n	8009cdc <_svfiprintf_r+0x1c0>
 8009d00:	0800a248 	.word	0x0800a248
 8009d04:	0800a252 	.word	0x0800a252
 8009d08:	00000000 	.word	0x00000000
 8009d0c:	08009a65 	.word	0x08009a65
 8009d10:	0800a24e 	.word	0x0800a24e

08009d14 <_printf_common>:
 8009d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d18:	4616      	mov	r6, r2
 8009d1a:	4698      	mov	r8, r3
 8009d1c:	688a      	ldr	r2, [r1, #8]
 8009d1e:	690b      	ldr	r3, [r1, #16]
 8009d20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009d24:	4293      	cmp	r3, r2
 8009d26:	bfb8      	it	lt
 8009d28:	4613      	movlt	r3, r2
 8009d2a:	6033      	str	r3, [r6, #0]
 8009d2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009d30:	4607      	mov	r7, r0
 8009d32:	460c      	mov	r4, r1
 8009d34:	b10a      	cbz	r2, 8009d3a <_printf_common+0x26>
 8009d36:	3301      	adds	r3, #1
 8009d38:	6033      	str	r3, [r6, #0]
 8009d3a:	6823      	ldr	r3, [r4, #0]
 8009d3c:	0699      	lsls	r1, r3, #26
 8009d3e:	bf42      	ittt	mi
 8009d40:	6833      	ldrmi	r3, [r6, #0]
 8009d42:	3302      	addmi	r3, #2
 8009d44:	6033      	strmi	r3, [r6, #0]
 8009d46:	6825      	ldr	r5, [r4, #0]
 8009d48:	f015 0506 	ands.w	r5, r5, #6
 8009d4c:	d106      	bne.n	8009d5c <_printf_common+0x48>
 8009d4e:	f104 0a19 	add.w	sl, r4, #25
 8009d52:	68e3      	ldr	r3, [r4, #12]
 8009d54:	6832      	ldr	r2, [r6, #0]
 8009d56:	1a9b      	subs	r3, r3, r2
 8009d58:	42ab      	cmp	r3, r5
 8009d5a:	dc26      	bgt.n	8009daa <_printf_common+0x96>
 8009d5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009d60:	6822      	ldr	r2, [r4, #0]
 8009d62:	3b00      	subs	r3, #0
 8009d64:	bf18      	it	ne
 8009d66:	2301      	movne	r3, #1
 8009d68:	0692      	lsls	r2, r2, #26
 8009d6a:	d42b      	bmi.n	8009dc4 <_printf_common+0xb0>
 8009d6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009d70:	4641      	mov	r1, r8
 8009d72:	4638      	mov	r0, r7
 8009d74:	47c8      	blx	r9
 8009d76:	3001      	adds	r0, #1
 8009d78:	d01e      	beq.n	8009db8 <_printf_common+0xa4>
 8009d7a:	6823      	ldr	r3, [r4, #0]
 8009d7c:	6922      	ldr	r2, [r4, #16]
 8009d7e:	f003 0306 	and.w	r3, r3, #6
 8009d82:	2b04      	cmp	r3, #4
 8009d84:	bf02      	ittt	eq
 8009d86:	68e5      	ldreq	r5, [r4, #12]
 8009d88:	6833      	ldreq	r3, [r6, #0]
 8009d8a:	1aed      	subeq	r5, r5, r3
 8009d8c:	68a3      	ldr	r3, [r4, #8]
 8009d8e:	bf0c      	ite	eq
 8009d90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d94:	2500      	movne	r5, #0
 8009d96:	4293      	cmp	r3, r2
 8009d98:	bfc4      	itt	gt
 8009d9a:	1a9b      	subgt	r3, r3, r2
 8009d9c:	18ed      	addgt	r5, r5, r3
 8009d9e:	2600      	movs	r6, #0
 8009da0:	341a      	adds	r4, #26
 8009da2:	42b5      	cmp	r5, r6
 8009da4:	d11a      	bne.n	8009ddc <_printf_common+0xc8>
 8009da6:	2000      	movs	r0, #0
 8009da8:	e008      	b.n	8009dbc <_printf_common+0xa8>
 8009daa:	2301      	movs	r3, #1
 8009dac:	4652      	mov	r2, sl
 8009dae:	4641      	mov	r1, r8
 8009db0:	4638      	mov	r0, r7
 8009db2:	47c8      	blx	r9
 8009db4:	3001      	adds	r0, #1
 8009db6:	d103      	bne.n	8009dc0 <_printf_common+0xac>
 8009db8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dc0:	3501      	adds	r5, #1
 8009dc2:	e7c6      	b.n	8009d52 <_printf_common+0x3e>
 8009dc4:	18e1      	adds	r1, r4, r3
 8009dc6:	1c5a      	adds	r2, r3, #1
 8009dc8:	2030      	movs	r0, #48	@ 0x30
 8009dca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009dce:	4422      	add	r2, r4
 8009dd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009dd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009dd8:	3302      	adds	r3, #2
 8009dda:	e7c7      	b.n	8009d6c <_printf_common+0x58>
 8009ddc:	2301      	movs	r3, #1
 8009dde:	4622      	mov	r2, r4
 8009de0:	4641      	mov	r1, r8
 8009de2:	4638      	mov	r0, r7
 8009de4:	47c8      	blx	r9
 8009de6:	3001      	adds	r0, #1
 8009de8:	d0e6      	beq.n	8009db8 <_printf_common+0xa4>
 8009dea:	3601      	adds	r6, #1
 8009dec:	e7d9      	b.n	8009da2 <_printf_common+0x8e>
	...

08009df0 <_printf_i>:
 8009df0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009df4:	7e0f      	ldrb	r7, [r1, #24]
 8009df6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009df8:	2f78      	cmp	r7, #120	@ 0x78
 8009dfa:	4691      	mov	r9, r2
 8009dfc:	4680      	mov	r8, r0
 8009dfe:	460c      	mov	r4, r1
 8009e00:	469a      	mov	sl, r3
 8009e02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009e06:	d807      	bhi.n	8009e18 <_printf_i+0x28>
 8009e08:	2f62      	cmp	r7, #98	@ 0x62
 8009e0a:	d80a      	bhi.n	8009e22 <_printf_i+0x32>
 8009e0c:	2f00      	cmp	r7, #0
 8009e0e:	f000 80d2 	beq.w	8009fb6 <_printf_i+0x1c6>
 8009e12:	2f58      	cmp	r7, #88	@ 0x58
 8009e14:	f000 80b9 	beq.w	8009f8a <_printf_i+0x19a>
 8009e18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009e20:	e03a      	b.n	8009e98 <_printf_i+0xa8>
 8009e22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009e26:	2b15      	cmp	r3, #21
 8009e28:	d8f6      	bhi.n	8009e18 <_printf_i+0x28>
 8009e2a:	a101      	add	r1, pc, #4	@ (adr r1, 8009e30 <_printf_i+0x40>)
 8009e2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e30:	08009e89 	.word	0x08009e89
 8009e34:	08009e9d 	.word	0x08009e9d
 8009e38:	08009e19 	.word	0x08009e19
 8009e3c:	08009e19 	.word	0x08009e19
 8009e40:	08009e19 	.word	0x08009e19
 8009e44:	08009e19 	.word	0x08009e19
 8009e48:	08009e9d 	.word	0x08009e9d
 8009e4c:	08009e19 	.word	0x08009e19
 8009e50:	08009e19 	.word	0x08009e19
 8009e54:	08009e19 	.word	0x08009e19
 8009e58:	08009e19 	.word	0x08009e19
 8009e5c:	08009f9d 	.word	0x08009f9d
 8009e60:	08009ec7 	.word	0x08009ec7
 8009e64:	08009f57 	.word	0x08009f57
 8009e68:	08009e19 	.word	0x08009e19
 8009e6c:	08009e19 	.word	0x08009e19
 8009e70:	08009fbf 	.word	0x08009fbf
 8009e74:	08009e19 	.word	0x08009e19
 8009e78:	08009ec7 	.word	0x08009ec7
 8009e7c:	08009e19 	.word	0x08009e19
 8009e80:	08009e19 	.word	0x08009e19
 8009e84:	08009f5f 	.word	0x08009f5f
 8009e88:	6833      	ldr	r3, [r6, #0]
 8009e8a:	1d1a      	adds	r2, r3, #4
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	6032      	str	r2, [r6, #0]
 8009e90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009e98:	2301      	movs	r3, #1
 8009e9a:	e09d      	b.n	8009fd8 <_printf_i+0x1e8>
 8009e9c:	6833      	ldr	r3, [r6, #0]
 8009e9e:	6820      	ldr	r0, [r4, #0]
 8009ea0:	1d19      	adds	r1, r3, #4
 8009ea2:	6031      	str	r1, [r6, #0]
 8009ea4:	0606      	lsls	r6, r0, #24
 8009ea6:	d501      	bpl.n	8009eac <_printf_i+0xbc>
 8009ea8:	681d      	ldr	r5, [r3, #0]
 8009eaa:	e003      	b.n	8009eb4 <_printf_i+0xc4>
 8009eac:	0645      	lsls	r5, r0, #25
 8009eae:	d5fb      	bpl.n	8009ea8 <_printf_i+0xb8>
 8009eb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009eb4:	2d00      	cmp	r5, #0
 8009eb6:	da03      	bge.n	8009ec0 <_printf_i+0xd0>
 8009eb8:	232d      	movs	r3, #45	@ 0x2d
 8009eba:	426d      	negs	r5, r5
 8009ebc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ec0:	4859      	ldr	r0, [pc, #356]	@ (800a028 <_printf_i+0x238>)
 8009ec2:	230a      	movs	r3, #10
 8009ec4:	e011      	b.n	8009eea <_printf_i+0xfa>
 8009ec6:	6821      	ldr	r1, [r4, #0]
 8009ec8:	6833      	ldr	r3, [r6, #0]
 8009eca:	0608      	lsls	r0, r1, #24
 8009ecc:	f853 5b04 	ldr.w	r5, [r3], #4
 8009ed0:	d402      	bmi.n	8009ed8 <_printf_i+0xe8>
 8009ed2:	0649      	lsls	r1, r1, #25
 8009ed4:	bf48      	it	mi
 8009ed6:	b2ad      	uxthmi	r5, r5
 8009ed8:	2f6f      	cmp	r7, #111	@ 0x6f
 8009eda:	4853      	ldr	r0, [pc, #332]	@ (800a028 <_printf_i+0x238>)
 8009edc:	6033      	str	r3, [r6, #0]
 8009ede:	bf14      	ite	ne
 8009ee0:	230a      	movne	r3, #10
 8009ee2:	2308      	moveq	r3, #8
 8009ee4:	2100      	movs	r1, #0
 8009ee6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009eea:	6866      	ldr	r6, [r4, #4]
 8009eec:	60a6      	str	r6, [r4, #8]
 8009eee:	2e00      	cmp	r6, #0
 8009ef0:	bfa2      	ittt	ge
 8009ef2:	6821      	ldrge	r1, [r4, #0]
 8009ef4:	f021 0104 	bicge.w	r1, r1, #4
 8009ef8:	6021      	strge	r1, [r4, #0]
 8009efa:	b90d      	cbnz	r5, 8009f00 <_printf_i+0x110>
 8009efc:	2e00      	cmp	r6, #0
 8009efe:	d04b      	beq.n	8009f98 <_printf_i+0x1a8>
 8009f00:	4616      	mov	r6, r2
 8009f02:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f06:	fb03 5711 	mls	r7, r3, r1, r5
 8009f0a:	5dc7      	ldrb	r7, [r0, r7]
 8009f0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f10:	462f      	mov	r7, r5
 8009f12:	42bb      	cmp	r3, r7
 8009f14:	460d      	mov	r5, r1
 8009f16:	d9f4      	bls.n	8009f02 <_printf_i+0x112>
 8009f18:	2b08      	cmp	r3, #8
 8009f1a:	d10b      	bne.n	8009f34 <_printf_i+0x144>
 8009f1c:	6823      	ldr	r3, [r4, #0]
 8009f1e:	07df      	lsls	r7, r3, #31
 8009f20:	d508      	bpl.n	8009f34 <_printf_i+0x144>
 8009f22:	6923      	ldr	r3, [r4, #16]
 8009f24:	6861      	ldr	r1, [r4, #4]
 8009f26:	4299      	cmp	r1, r3
 8009f28:	bfde      	ittt	le
 8009f2a:	2330      	movle	r3, #48	@ 0x30
 8009f2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009f30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009f34:	1b92      	subs	r2, r2, r6
 8009f36:	6122      	str	r2, [r4, #16]
 8009f38:	f8cd a000 	str.w	sl, [sp]
 8009f3c:	464b      	mov	r3, r9
 8009f3e:	aa03      	add	r2, sp, #12
 8009f40:	4621      	mov	r1, r4
 8009f42:	4640      	mov	r0, r8
 8009f44:	f7ff fee6 	bl	8009d14 <_printf_common>
 8009f48:	3001      	adds	r0, #1
 8009f4a:	d14a      	bne.n	8009fe2 <_printf_i+0x1f2>
 8009f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f50:	b004      	add	sp, #16
 8009f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f56:	6823      	ldr	r3, [r4, #0]
 8009f58:	f043 0320 	orr.w	r3, r3, #32
 8009f5c:	6023      	str	r3, [r4, #0]
 8009f5e:	4833      	ldr	r0, [pc, #204]	@ (800a02c <_printf_i+0x23c>)
 8009f60:	2778      	movs	r7, #120	@ 0x78
 8009f62:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009f66:	6823      	ldr	r3, [r4, #0]
 8009f68:	6831      	ldr	r1, [r6, #0]
 8009f6a:	061f      	lsls	r7, r3, #24
 8009f6c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009f70:	d402      	bmi.n	8009f78 <_printf_i+0x188>
 8009f72:	065f      	lsls	r7, r3, #25
 8009f74:	bf48      	it	mi
 8009f76:	b2ad      	uxthmi	r5, r5
 8009f78:	6031      	str	r1, [r6, #0]
 8009f7a:	07d9      	lsls	r1, r3, #31
 8009f7c:	bf44      	itt	mi
 8009f7e:	f043 0320 	orrmi.w	r3, r3, #32
 8009f82:	6023      	strmi	r3, [r4, #0]
 8009f84:	b11d      	cbz	r5, 8009f8e <_printf_i+0x19e>
 8009f86:	2310      	movs	r3, #16
 8009f88:	e7ac      	b.n	8009ee4 <_printf_i+0xf4>
 8009f8a:	4827      	ldr	r0, [pc, #156]	@ (800a028 <_printf_i+0x238>)
 8009f8c:	e7e9      	b.n	8009f62 <_printf_i+0x172>
 8009f8e:	6823      	ldr	r3, [r4, #0]
 8009f90:	f023 0320 	bic.w	r3, r3, #32
 8009f94:	6023      	str	r3, [r4, #0]
 8009f96:	e7f6      	b.n	8009f86 <_printf_i+0x196>
 8009f98:	4616      	mov	r6, r2
 8009f9a:	e7bd      	b.n	8009f18 <_printf_i+0x128>
 8009f9c:	6833      	ldr	r3, [r6, #0]
 8009f9e:	6825      	ldr	r5, [r4, #0]
 8009fa0:	6961      	ldr	r1, [r4, #20]
 8009fa2:	1d18      	adds	r0, r3, #4
 8009fa4:	6030      	str	r0, [r6, #0]
 8009fa6:	062e      	lsls	r6, r5, #24
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	d501      	bpl.n	8009fb0 <_printf_i+0x1c0>
 8009fac:	6019      	str	r1, [r3, #0]
 8009fae:	e002      	b.n	8009fb6 <_printf_i+0x1c6>
 8009fb0:	0668      	lsls	r0, r5, #25
 8009fb2:	d5fb      	bpl.n	8009fac <_printf_i+0x1bc>
 8009fb4:	8019      	strh	r1, [r3, #0]
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	6123      	str	r3, [r4, #16]
 8009fba:	4616      	mov	r6, r2
 8009fbc:	e7bc      	b.n	8009f38 <_printf_i+0x148>
 8009fbe:	6833      	ldr	r3, [r6, #0]
 8009fc0:	1d1a      	adds	r2, r3, #4
 8009fc2:	6032      	str	r2, [r6, #0]
 8009fc4:	681e      	ldr	r6, [r3, #0]
 8009fc6:	6862      	ldr	r2, [r4, #4]
 8009fc8:	2100      	movs	r1, #0
 8009fca:	4630      	mov	r0, r6
 8009fcc:	f7f6 f910 	bl	80001f0 <memchr>
 8009fd0:	b108      	cbz	r0, 8009fd6 <_printf_i+0x1e6>
 8009fd2:	1b80      	subs	r0, r0, r6
 8009fd4:	6060      	str	r0, [r4, #4]
 8009fd6:	6863      	ldr	r3, [r4, #4]
 8009fd8:	6123      	str	r3, [r4, #16]
 8009fda:	2300      	movs	r3, #0
 8009fdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009fe0:	e7aa      	b.n	8009f38 <_printf_i+0x148>
 8009fe2:	6923      	ldr	r3, [r4, #16]
 8009fe4:	4632      	mov	r2, r6
 8009fe6:	4649      	mov	r1, r9
 8009fe8:	4640      	mov	r0, r8
 8009fea:	47d0      	blx	sl
 8009fec:	3001      	adds	r0, #1
 8009fee:	d0ad      	beq.n	8009f4c <_printf_i+0x15c>
 8009ff0:	6823      	ldr	r3, [r4, #0]
 8009ff2:	079b      	lsls	r3, r3, #30
 8009ff4:	d413      	bmi.n	800a01e <_printf_i+0x22e>
 8009ff6:	68e0      	ldr	r0, [r4, #12]
 8009ff8:	9b03      	ldr	r3, [sp, #12]
 8009ffa:	4298      	cmp	r0, r3
 8009ffc:	bfb8      	it	lt
 8009ffe:	4618      	movlt	r0, r3
 800a000:	e7a6      	b.n	8009f50 <_printf_i+0x160>
 800a002:	2301      	movs	r3, #1
 800a004:	4632      	mov	r2, r6
 800a006:	4649      	mov	r1, r9
 800a008:	4640      	mov	r0, r8
 800a00a:	47d0      	blx	sl
 800a00c:	3001      	adds	r0, #1
 800a00e:	d09d      	beq.n	8009f4c <_printf_i+0x15c>
 800a010:	3501      	adds	r5, #1
 800a012:	68e3      	ldr	r3, [r4, #12]
 800a014:	9903      	ldr	r1, [sp, #12]
 800a016:	1a5b      	subs	r3, r3, r1
 800a018:	42ab      	cmp	r3, r5
 800a01a:	dcf2      	bgt.n	800a002 <_printf_i+0x212>
 800a01c:	e7eb      	b.n	8009ff6 <_printf_i+0x206>
 800a01e:	2500      	movs	r5, #0
 800a020:	f104 0619 	add.w	r6, r4, #25
 800a024:	e7f5      	b.n	800a012 <_printf_i+0x222>
 800a026:	bf00      	nop
 800a028:	0800a259 	.word	0x0800a259
 800a02c:	0800a26a 	.word	0x0800a26a

0800a030 <memmove>:
 800a030:	4288      	cmp	r0, r1
 800a032:	b510      	push	{r4, lr}
 800a034:	eb01 0402 	add.w	r4, r1, r2
 800a038:	d902      	bls.n	800a040 <memmove+0x10>
 800a03a:	4284      	cmp	r4, r0
 800a03c:	4623      	mov	r3, r4
 800a03e:	d807      	bhi.n	800a050 <memmove+0x20>
 800a040:	1e43      	subs	r3, r0, #1
 800a042:	42a1      	cmp	r1, r4
 800a044:	d008      	beq.n	800a058 <memmove+0x28>
 800a046:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a04a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a04e:	e7f8      	b.n	800a042 <memmove+0x12>
 800a050:	4402      	add	r2, r0
 800a052:	4601      	mov	r1, r0
 800a054:	428a      	cmp	r2, r1
 800a056:	d100      	bne.n	800a05a <memmove+0x2a>
 800a058:	bd10      	pop	{r4, pc}
 800a05a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a05e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a062:	e7f7      	b.n	800a054 <memmove+0x24>

0800a064 <_sbrk_r>:
 800a064:	b538      	push	{r3, r4, r5, lr}
 800a066:	4d06      	ldr	r5, [pc, #24]	@ (800a080 <_sbrk_r+0x1c>)
 800a068:	2300      	movs	r3, #0
 800a06a:	4604      	mov	r4, r0
 800a06c:	4608      	mov	r0, r1
 800a06e:	602b      	str	r3, [r5, #0]
 800a070:	f7f7 ffa4 	bl	8001fbc <_sbrk>
 800a074:	1c43      	adds	r3, r0, #1
 800a076:	d102      	bne.n	800a07e <_sbrk_r+0x1a>
 800a078:	682b      	ldr	r3, [r5, #0]
 800a07a:	b103      	cbz	r3, 800a07e <_sbrk_r+0x1a>
 800a07c:	6023      	str	r3, [r4, #0]
 800a07e:	bd38      	pop	{r3, r4, r5, pc}
 800a080:	200018e0 	.word	0x200018e0

0800a084 <_realloc_r>:
 800a084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a088:	4680      	mov	r8, r0
 800a08a:	4615      	mov	r5, r2
 800a08c:	460c      	mov	r4, r1
 800a08e:	b921      	cbnz	r1, 800a09a <_realloc_r+0x16>
 800a090:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a094:	4611      	mov	r1, r2
 800a096:	f7ff bc59 	b.w	800994c <_malloc_r>
 800a09a:	b92a      	cbnz	r2, 800a0a8 <_realloc_r+0x24>
 800a09c:	f7ff fbea 	bl	8009874 <_free_r>
 800a0a0:	2400      	movs	r4, #0
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0a8:	f000 f81a 	bl	800a0e0 <_malloc_usable_size_r>
 800a0ac:	4285      	cmp	r5, r0
 800a0ae:	4606      	mov	r6, r0
 800a0b0:	d802      	bhi.n	800a0b8 <_realloc_r+0x34>
 800a0b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a0b6:	d8f4      	bhi.n	800a0a2 <_realloc_r+0x1e>
 800a0b8:	4629      	mov	r1, r5
 800a0ba:	4640      	mov	r0, r8
 800a0bc:	f7ff fc46 	bl	800994c <_malloc_r>
 800a0c0:	4607      	mov	r7, r0
 800a0c2:	2800      	cmp	r0, #0
 800a0c4:	d0ec      	beq.n	800a0a0 <_realloc_r+0x1c>
 800a0c6:	42b5      	cmp	r5, r6
 800a0c8:	462a      	mov	r2, r5
 800a0ca:	4621      	mov	r1, r4
 800a0cc:	bf28      	it	cs
 800a0ce:	4632      	movcs	r2, r6
 800a0d0:	f7ff fbc2 	bl	8009858 <memcpy>
 800a0d4:	4621      	mov	r1, r4
 800a0d6:	4640      	mov	r0, r8
 800a0d8:	f7ff fbcc 	bl	8009874 <_free_r>
 800a0dc:	463c      	mov	r4, r7
 800a0de:	e7e0      	b.n	800a0a2 <_realloc_r+0x1e>

0800a0e0 <_malloc_usable_size_r>:
 800a0e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0e4:	1f18      	subs	r0, r3, #4
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	bfbc      	itt	lt
 800a0ea:	580b      	ldrlt	r3, [r1, r0]
 800a0ec:	18c0      	addlt	r0, r0, r3
 800a0ee:	4770      	bx	lr

0800a0f0 <_init>:
 800a0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0f2:	bf00      	nop
 800a0f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0f6:	bc08      	pop	{r3}
 800a0f8:	469e      	mov	lr, r3
 800a0fa:	4770      	bx	lr

0800a0fc <_fini>:
 800a0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0fe:	bf00      	nop
 800a100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a102:	bc08      	pop	{r3}
 800a104:	469e      	mov	lr, r3
 800a106:	4770      	bx	lr
