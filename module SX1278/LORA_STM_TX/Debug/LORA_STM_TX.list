
LORA_STM_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f80  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800a120  0800a120  0000b120  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a310  0800a310  0000c14c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a310  0800a310  0000b310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a318  0800a318  0000c14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a318  0800a318  0000b318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a31c  0800a31c  0000b31c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  0800a320  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001728  2000014c  0800a46c  0000c14c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001874  0800a46c  0000c874  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c14c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013938  00000000  00000000  0000c17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a0c  00000000  00000000  0001fab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  000234c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c4f  00000000  00000000  00024548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198cf  00000000  00000000  00025197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000190f5  00000000  00000000  0003ea66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b1f7  00000000  00000000  00057b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2d52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000491c  00000000  00000000  000e2d98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e76b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000014c 	.word	0x2000014c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a108 	.word	0x0800a108

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000150 	.word	0x20000150
 80001dc:	0800a108 	.word	0x0800a108

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b96a 	b.w	8000d68 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	460c      	mov	r4, r1
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d14e      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000ab8:	4694      	mov	ip, r2
 8000aba:	458c      	cmp	ip, r1
 8000abc:	4686      	mov	lr, r0
 8000abe:	fab2 f282 	clz	r2, r2
 8000ac2:	d962      	bls.n	8000b8a <__udivmoddi4+0xde>
 8000ac4:	b14a      	cbz	r2, 8000ada <__udivmoddi4+0x2e>
 8000ac6:	f1c2 0320 	rsb	r3, r2, #32
 8000aca:	4091      	lsls	r1, r2
 8000acc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ad0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad4:	4319      	orrs	r1, r3
 8000ad6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ada:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ade:	fa1f f68c 	uxth.w	r6, ip
 8000ae2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ae6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aea:	fb07 1114 	mls	r1, r7, r4, r1
 8000aee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af2:	fb04 f106 	mul.w	r1, r4, r6
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b02:	f080 8112 	bcs.w	8000d2a <__udivmoddi4+0x27e>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 810f 	bls.w	8000d2a <__udivmoddi4+0x27e>
 8000b0c:	3c02      	subs	r4, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a59      	subs	r1, r3, r1
 8000b12:	fa1f f38e 	uxth.w	r3, lr
 8000b16:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b1a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb00 f606 	mul.w	r6, r0, r6
 8000b26:	429e      	cmp	r6, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x94>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b32:	f080 80fc 	bcs.w	8000d2e <__udivmoddi4+0x282>
 8000b36:	429e      	cmp	r6, r3
 8000b38:	f240 80f9 	bls.w	8000d2e <__udivmoddi4+0x282>
 8000b3c:	4463      	add	r3, ip
 8000b3e:	3802      	subs	r0, #2
 8000b40:	1b9b      	subs	r3, r3, r6
 8000b42:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b46:	2100      	movs	r1, #0
 8000b48:	b11d      	cbz	r5, 8000b52 <__udivmoddi4+0xa6>
 8000b4a:	40d3      	lsrs	r3, r2
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d905      	bls.n	8000b66 <__udivmoddi4+0xba>
 8000b5a:	b10d      	cbz	r5, 8000b60 <__udivmoddi4+0xb4>
 8000b5c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b60:	2100      	movs	r1, #0
 8000b62:	4608      	mov	r0, r1
 8000b64:	e7f5      	b.n	8000b52 <__udivmoddi4+0xa6>
 8000b66:	fab3 f183 	clz	r1, r3
 8000b6a:	2900      	cmp	r1, #0
 8000b6c:	d146      	bne.n	8000bfc <__udivmoddi4+0x150>
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	d302      	bcc.n	8000b78 <__udivmoddi4+0xcc>
 8000b72:	4290      	cmp	r0, r2
 8000b74:	f0c0 80f0 	bcc.w	8000d58 <__udivmoddi4+0x2ac>
 8000b78:	1a86      	subs	r6, r0, r2
 8000b7a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b7e:	2001      	movs	r0, #1
 8000b80:	2d00      	cmp	r5, #0
 8000b82:	d0e6      	beq.n	8000b52 <__udivmoddi4+0xa6>
 8000b84:	e9c5 6300 	strd	r6, r3, [r5]
 8000b88:	e7e3      	b.n	8000b52 <__udivmoddi4+0xa6>
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	f040 8090 	bne.w	8000cb0 <__udivmoddi4+0x204>
 8000b90:	eba1 040c 	sub.w	r4, r1, ip
 8000b94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b98:	fa1f f78c 	uxth.w	r7, ip
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ba2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ba6:	fb08 4416 	mls	r4, r8, r6, r4
 8000baa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bae:	fb07 f006 	mul.w	r0, r7, r6
 8000bb2:	4298      	cmp	r0, r3
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x11c>
 8000bb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bba:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x11a>
 8000bc0:	4298      	cmp	r0, r3
 8000bc2:	f200 80cd 	bhi.w	8000d60 <__udivmoddi4+0x2b4>
 8000bc6:	4626      	mov	r6, r4
 8000bc8:	1a1c      	subs	r4, r3, r0
 8000bca:	fa1f f38e 	uxth.w	r3, lr
 8000bce:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bd2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bda:	fb00 f707 	mul.w	r7, r0, r7
 8000bde:	429f      	cmp	r7, r3
 8000be0:	d908      	bls.n	8000bf4 <__udivmoddi4+0x148>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bea:	d202      	bcs.n	8000bf2 <__udivmoddi4+0x146>
 8000bec:	429f      	cmp	r7, r3
 8000bee:	f200 80b0 	bhi.w	8000d52 <__udivmoddi4+0x2a6>
 8000bf2:	4620      	mov	r0, r4
 8000bf4:	1bdb      	subs	r3, r3, r7
 8000bf6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bfa:	e7a5      	b.n	8000b48 <__udivmoddi4+0x9c>
 8000bfc:	f1c1 0620 	rsb	r6, r1, #32
 8000c00:	408b      	lsls	r3, r1
 8000c02:	fa22 f706 	lsr.w	r7, r2, r6
 8000c06:	431f      	orrs	r7, r3
 8000c08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c10:	ea43 030c 	orr.w	r3, r3, ip
 8000c14:	40f4      	lsrs	r4, r6
 8000c16:	fa00 f801 	lsl.w	r8, r0, r1
 8000c1a:	0c38      	lsrs	r0, r7, #16
 8000c1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c20:	fbb4 fef0 	udiv	lr, r4, r0
 8000c24:	fa1f fc87 	uxth.w	ip, r7
 8000c28:	fb00 441e 	mls	r4, r0, lr, r4
 8000c2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c30:	fb0e f90c 	mul.w	r9, lr, ip
 8000c34:	45a1      	cmp	r9, r4
 8000c36:	fa02 f201 	lsl.w	r2, r2, r1
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x1a6>
 8000c3c:	193c      	adds	r4, r7, r4
 8000c3e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c42:	f080 8084 	bcs.w	8000d4e <__udivmoddi4+0x2a2>
 8000c46:	45a1      	cmp	r9, r4
 8000c48:	f240 8081 	bls.w	8000d4e <__udivmoddi4+0x2a2>
 8000c4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c50:	443c      	add	r4, r7
 8000c52:	eba4 0409 	sub.w	r4, r4, r9
 8000c56:	fa1f f983 	uxth.w	r9, r3
 8000c5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	d907      	bls.n	8000c7e <__udivmoddi4+0x1d2>
 8000c6e:	193c      	adds	r4, r7, r4
 8000c70:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c74:	d267      	bcs.n	8000d46 <__udivmoddi4+0x29a>
 8000c76:	45a4      	cmp	ip, r4
 8000c78:	d965      	bls.n	8000d46 <__udivmoddi4+0x29a>
 8000c7a:	3b02      	subs	r3, #2
 8000c7c:	443c      	add	r4, r7
 8000c7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c82:	fba0 9302 	umull	r9, r3, r0, r2
 8000c86:	eba4 040c 	sub.w	r4, r4, ip
 8000c8a:	429c      	cmp	r4, r3
 8000c8c:	46ce      	mov	lr, r9
 8000c8e:	469c      	mov	ip, r3
 8000c90:	d351      	bcc.n	8000d36 <__udivmoddi4+0x28a>
 8000c92:	d04e      	beq.n	8000d32 <__udivmoddi4+0x286>
 8000c94:	b155      	cbz	r5, 8000cac <__udivmoddi4+0x200>
 8000c96:	ebb8 030e 	subs.w	r3, r8, lr
 8000c9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000ca2:	40cb      	lsrs	r3, r1
 8000ca4:	431e      	orrs	r6, r3
 8000ca6:	40cc      	lsrs	r4, r1
 8000ca8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	e750      	b.n	8000b52 <__udivmoddi4+0xa6>
 8000cb0:	f1c2 0320 	rsb	r3, r2, #32
 8000cb4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cbc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cc0:	4094      	lsls	r4, r2
 8000cc2:	430c      	orrs	r4, r1
 8000cc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ccc:	fa1f f78c 	uxth.w	r7, ip
 8000cd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cd8:	0c23      	lsrs	r3, r4, #16
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb00 f107 	mul.w	r1, r0, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x24c>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cee:	d22c      	bcs.n	8000d4a <__udivmoddi4+0x29e>
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d92a      	bls.n	8000d4a <__udivmoddi4+0x29e>
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d00:	fb08 3311 	mls	r3, r8, r1, r3
 8000d04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d08:	fb01 f307 	mul.w	r3, r1, r7
 8000d0c:	42a3      	cmp	r3, r4
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x276>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d18:	d213      	bcs.n	8000d42 <__udivmoddi4+0x296>
 8000d1a:	42a3      	cmp	r3, r4
 8000d1c:	d911      	bls.n	8000d42 <__udivmoddi4+0x296>
 8000d1e:	3902      	subs	r1, #2
 8000d20:	4464      	add	r4, ip
 8000d22:	1ae4      	subs	r4, r4, r3
 8000d24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d28:	e739      	b.n	8000b9e <__udivmoddi4+0xf2>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	e6f0      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e706      	b.n	8000b40 <__udivmoddi4+0x94>
 8000d32:	45c8      	cmp	r8, r9
 8000d34:	d2ae      	bcs.n	8000c94 <__udivmoddi4+0x1e8>
 8000d36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d3e:	3801      	subs	r0, #1
 8000d40:	e7a8      	b.n	8000c94 <__udivmoddi4+0x1e8>
 8000d42:	4631      	mov	r1, r6
 8000d44:	e7ed      	b.n	8000d22 <__udivmoddi4+0x276>
 8000d46:	4603      	mov	r3, r0
 8000d48:	e799      	b.n	8000c7e <__udivmoddi4+0x1d2>
 8000d4a:	4630      	mov	r0, r6
 8000d4c:	e7d4      	b.n	8000cf8 <__udivmoddi4+0x24c>
 8000d4e:	46d6      	mov	lr, sl
 8000d50:	e77f      	b.n	8000c52 <__udivmoddi4+0x1a6>
 8000d52:	4463      	add	r3, ip
 8000d54:	3802      	subs	r0, #2
 8000d56:	e74d      	b.n	8000bf4 <__udivmoddi4+0x148>
 8000d58:	4606      	mov	r6, r0
 8000d5a:	4623      	mov	r3, r4
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	e70f      	b.n	8000b80 <__udivmoddi4+0xd4>
 8000d60:	3e02      	subs	r6, #2
 8000d62:	4463      	add	r3, ip
 8000d64:	e730      	b.n	8000bc8 <__udivmoddi4+0x11c>
 8000d66:	bf00      	nop

08000d68 <__aeabi_idiv0>:
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000d76:	2101      	movs	r1, #1
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f000 f9fe 	bl	800117a <LoRa_read>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000d82:	7bbb      	ldrb	r3, [r7, #14]
 8000d84:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d107      	bne.n	8000d9c <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000d8c:	7bbb      	ldrb	r3, [r7, #14]
 8000d8e:	f023 0307 	bic.w	r3, r3, #7
 8000d92:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2200      	movs	r2, #0
 8000d98:	61da      	str	r2, [r3, #28]
 8000d9a:	e03e      	b.n	8000e1a <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d10c      	bne.n	8000dbc <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000da2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000da6:	f023 0307 	bic.w	r3, r3, #7
 8000daa:	b25b      	sxtb	r3, r3
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	b25b      	sxtb	r3, r3
 8000db2:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2201      	movs	r2, #1
 8000db8:	61da      	str	r2, [r3, #28]
 8000dba:	e02e      	b.n	8000e1a <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	2b03      	cmp	r3, #3
 8000dc0:	d10c      	bne.n	8000ddc <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000dc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000dc6:	f023 0307 	bic.w	r3, r3, #7
 8000dca:	b25b      	sxtb	r3, r3
 8000dcc:	f043 0303 	orr.w	r3, r3, #3
 8000dd0:	b25b      	sxtb	r3, r3
 8000dd2:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	61da      	str	r2, [r3, #28]
 8000dda:	e01e      	b.n	8000e1a <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	2b05      	cmp	r3, #5
 8000de0:	d10c      	bne.n	8000dfc <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000de2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000de6:	f023 0307 	bic.w	r3, r3, #7
 8000dea:	b25b      	sxtb	r3, r3
 8000dec:	f043 0305 	orr.w	r3, r3, #5
 8000df0:	b25b      	sxtb	r3, r3
 8000df2:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2205      	movs	r2, #5
 8000df8:	61da      	str	r2, [r3, #28]
 8000dfa:	e00e      	b.n	8000e1a <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	2b06      	cmp	r3, #6
 8000e00:	d10b      	bne.n	8000e1a <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000e02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e06:	f023 0307 	bic.w	r3, r3, #7
 8000e0a:	b25b      	sxtb	r3, r3
 8000e0c:	f043 0306 	orr.w	r3, r3, #6
 8000e10:	b25b      	sxtb	r3, r3
 8000e12:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2206      	movs	r2, #6
 8000e18:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	2101      	movs	r1, #1
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f000 f9c4 	bl	80011ae <LoRa_write>
	//HAL_Delay(10);
}
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b084      	sub	sp, #16
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	60f8      	str	r0, [r7, #12]
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	603b      	str	r3, [r7, #0]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	6818      	ldr	r0, [r3, #0]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	889b      	ldrh	r3, [r3, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f001 fcbd 	bl	80027c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	6998      	ldr	r0, [r3, #24]
 8000e52:	88fa      	ldrh	r2, [r7, #6]
 8000e54:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000e58:	68b9      	ldr	r1, [r7, #8]
 8000e5a:	f003 fc26 	bl	80046aa <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000e5e:	bf00      	nop
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f004 f826 	bl	8004eb6 <HAL_SPI_GetState>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d1f7      	bne.n	8000e60 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	6998      	ldr	r0, [r3, #24]
 8000e74:	8b3a      	ldrh	r2, [r7, #24]
 8000e76:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000e7a:	6839      	ldr	r1, [r7, #0]
 8000e7c:	f003 fd59 	bl	8004932 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000e80:	bf00      	nop
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f004 f815 	bl	8004eb6 <HAL_SPI_GetState>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d1f7      	bne.n	8000e82 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	6818      	ldr	r0, [r3, #0]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	889b      	ldrh	r3, [r3, #4]
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f001 fc93 	bl	80027c8 <HAL_GPIO_WritePin>
}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b084      	sub	sp, #16
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	60f8      	str	r0, [r7, #12]
 8000eb2:	60b9      	str	r1, [r7, #8]
 8000eb4:	603b      	str	r3, [r7, #0]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	6818      	ldr	r0, [r3, #0]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	889b      	ldrh	r3, [r3, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f001 fc7f 	bl	80027c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	6998      	ldr	r0, [r3, #24]
 8000ece:	88fa      	ldrh	r2, [r7, #6]
 8000ed0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ed4:	68b9      	ldr	r1, [r7, #8]
 8000ed6:	f003 fbe8 	bl	80046aa <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000eda:	bf00      	nop
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f003 ffe8 	bl	8004eb6 <HAL_SPI_GetState>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d1f7      	bne.n	8000edc <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	6998      	ldr	r0, [r3, #24]
 8000ef0:	8b3a      	ldrh	r2, [r7, #24]
 8000ef2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ef6:	6839      	ldr	r1, [r7, #0]
 8000ef8:	f003 fbd7 	bl	80046aa <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000efc:	bf00      	nop
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f003 ffd7 	bl	8004eb6 <HAL_SPI_GetState>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d1f7      	bne.n	8000efe <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	6818      	ldr	r0, [r3, #0]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	889b      	ldrh	r3, [r3, #4]
 8000f16:	2201      	movs	r2, #1
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f001 fc55 	bl	80027c8 <HAL_GPIO_WritePin>
}
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b084      	sub	sp, #16
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	460b      	mov	r3, r1
 8000f30:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000f32:	2126      	movs	r1, #38	@ 0x26
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f000 f920 	bl	800117a <LoRa_read>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	73bb      	strb	r3, [r7, #14]

	if(value)
 8000f3e:	78fb      	ldrb	r3, [r7, #3]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d004      	beq.n	8000f4e <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000f44:	7bbb      	ldrb	r3, [r7, #14]
 8000f46:	f043 0308 	orr.w	r3, r3, #8
 8000f4a:	73fb      	strb	r3, [r7, #15]
 8000f4c:	e003      	b.n	8000f56 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000f4e:	7bbb      	ldrb	r3, [r7, #14]
 8000f50:	f023 0308 	bic.w	r3, r3, #8
 8000f54:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	2126      	movs	r1, #38	@ 0x26
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f000 f926 	bl	80011ae <LoRa_write>
	HAL_Delay(10);
 8000f62:	200a      	movs	r0, #10
 8000f64:	f001 f928 	bl	80021b8 <HAL_Delay>
}
 8000f68:	bf00      	nop
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b096      	sub	sp, #88	@ 0x58
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8000f78:	4a17      	ldr	r2, [pc, #92]	@ (8000fd8 <LoRa_setAutoLDO+0x68>)
 8000f7a:	f107 0308 	add.w	r3, r7, #8
 8000f7e:	4611      	mov	r1, r2
 8000f80:	2250      	movs	r2, #80	@ 0x50
 8000f82:	4618      	mov	r0, r3
 8000f84:	f008 fc74 	bl	8009870 <memcpy>

	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f8e:	461a      	mov	r2, r3
 8000f90:	2301      	movs	r3, #1
 8000f92:	4093      	lsls	r3, r2
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff facd 	bl	8000534 <__aeabi_i2d>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	3358      	adds	r3, #88	@ 0x58
 8000fa4:	443b      	add	r3, r7
 8000fa6:	3b50      	subs	r3, #80	@ 0x50
 8000fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fac:	f7ff fc56 	bl	800085c <__aeabi_ddiv>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f7ff fd38 	bl	8000a2c <__aeabi_d2iz>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b10      	cmp	r3, #16
 8000fc0:	bfcc      	ite	gt
 8000fc2:	2301      	movgt	r3, #1
 8000fc4:	2300      	movle	r3, #0
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	4619      	mov	r1, r3
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffab 	bl	8000f26 <LoRa_setLowDaraRateOptimization>
}
 8000fd0:	bf00      	nop
 8000fd2:	3758      	adds	r7, #88	@ 0x58
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	0800a120 	.word	0x0800a120

08000fdc <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	04db      	lsls	r3, r3, #19
 8000fea:	115b      	asrs	r3, r3, #5
 8000fec:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	0c1b      	lsrs	r3, r3, #16
 8000ff2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8000ff4:	7afb      	ldrb	r3, [r7, #11]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	2106      	movs	r1, #6
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 f8d7 	bl	80011ae <LoRa_write>
	HAL_Delay(5);
 8001000:	2005      	movs	r0, #5
 8001002:	f001 f8d9 	bl	80021b8 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	0a1b      	lsrs	r3, r3, #8
 800100a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 800100c:	7afb      	ldrb	r3, [r7, #11]
 800100e:	461a      	mov	r2, r3
 8001010:	2107      	movs	r1, #7
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f000 f8cb 	bl	80011ae <LoRa_write>
	HAL_Delay(5);
 8001018:	2005      	movs	r0, #5
 800101a:	f001 f8cd 	bl	80021b8 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8001022:	7afb      	ldrb	r3, [r7, #11]
 8001024:	461a      	mov	r2, r3
 8001026:	2108      	movs	r1, #8
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f000 f8c0 	bl	80011ae <LoRa_write>
	HAL_Delay(5);
 800102e:	2005      	movs	r0, #5
 8001030:	f001 f8c2 	bl	80021b8 <HAL_Delay>
}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	2b0c      	cmp	r3, #12
 800104a:	dd01      	ble.n	8001050 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 800104c:	230c      	movs	r3, #12
 800104e:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	2b06      	cmp	r3, #6
 8001054:	dc01      	bgt.n	800105a <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8001056:	2307      	movs	r3, #7
 8001058:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 800105a:	211e      	movs	r1, #30
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f000 f88c 	bl	800117a <LoRa_read>
 8001062:	4603      	mov	r3, r0
 8001064:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8001066:	200a      	movs	r0, #10
 8001068:	f001 f8a6 	bl	80021b8 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	b2db      	uxtb	r3, r3
 8001070:	011b      	lsls	r3, r3, #4
 8001072:	b2da      	uxtb	r2, r3
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	b2db      	uxtb	r3, r3
 800107c:	4413      	add	r3, r2
 800107e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8001080:	7bbb      	ldrb	r3, [r7, #14]
 8001082:	461a      	mov	r2, r3
 8001084:	211e      	movs	r1, #30
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f000 f891 	bl	80011ae <LoRa_write>
	HAL_Delay(10);
 800108c:	200a      	movs	r0, #10
 800108e:	f001 f893 	bl	80021b8 <HAL_Delay>

	LoRa_setAutoLDO(_LoRa);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ff6c 	bl	8000f70 <LoRa_setAutoLDO>
}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80010ac:	78fb      	ldrb	r3, [r7, #3]
 80010ae:	461a      	mov	r2, r3
 80010b0:	2109      	movs	r1, #9
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 f87b 	bl	80011ae <LoRa_write>
	HAL_Delay(10);
 80010b8:	200a      	movs	r0, #10
 80010ba:	f001 f87d 	bl	80021b8 <HAL_Delay>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80010d8:	78fb      	ldrb	r3, [r7, #3]
 80010da:	2b2c      	cmp	r3, #44	@ 0x2c
 80010dc:	d801      	bhi.n	80010e2 <LoRa_setOCP+0x1a>
		current = 45;
 80010de:	232d      	movs	r3, #45	@ 0x2d
 80010e0:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80010e2:	78fb      	ldrb	r3, [r7, #3]
 80010e4:	2bf0      	cmp	r3, #240	@ 0xf0
 80010e6:	d901      	bls.n	80010ec <LoRa_setOCP+0x24>
		current = 240;
 80010e8:	23f0      	movs	r3, #240	@ 0xf0
 80010ea:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80010ec:	78fb      	ldrb	r3, [r7, #3]
 80010ee:	2b78      	cmp	r3, #120	@ 0x78
 80010f0:	d809      	bhi.n	8001106 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80010f2:	78fb      	ldrb	r3, [r7, #3]
 80010f4:	3b2d      	subs	r3, #45	@ 0x2d
 80010f6:	4a12      	ldr	r2, [pc, #72]	@ (8001140 <LoRa_setOCP+0x78>)
 80010f8:	fb82 1203 	smull	r1, r2, r2, r3
 80010fc:	1052      	asrs	r2, r2, #1
 80010fe:	17db      	asrs	r3, r3, #31
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	73fb      	strb	r3, [r7, #15]
 8001104:	e00b      	b.n	800111e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8001106:	78fb      	ldrb	r3, [r7, #3]
 8001108:	2bf0      	cmp	r3, #240	@ 0xf0
 800110a:	d808      	bhi.n	800111e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 800110c:	78fb      	ldrb	r3, [r7, #3]
 800110e:	331e      	adds	r3, #30
 8001110:	4a0b      	ldr	r2, [pc, #44]	@ (8001140 <LoRa_setOCP+0x78>)
 8001112:	fb82 1203 	smull	r1, r2, r2, r3
 8001116:	1092      	asrs	r2, r2, #2
 8001118:	17db      	asrs	r3, r3, #31
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	3320      	adds	r3, #32
 8001122:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	461a      	mov	r2, r3
 8001128:	210b      	movs	r1, #11
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 f83f 	bl	80011ae <LoRa_write>
	HAL_Delay(10);
 8001130:	200a      	movs	r0, #10
 8001132:	f001 f841 	bl	80021b8 <HAL_Delay>
}
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	66666667 	.word	0x66666667

08001144 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 800114c:	211e      	movs	r1, #30
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f000 f813 	bl	800117a <LoRa_read>
 8001154:	4603      	mov	r3, r0
 8001156:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	f043 0307 	orr.w	r3, r3, #7
 800115e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001160:	7bbb      	ldrb	r3, [r7, #14]
 8001162:	461a      	mov	r2, r3
 8001164:	211e      	movs	r1, #30
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 f821 	bl	80011ae <LoRa_write>
	HAL_Delay(10);
 800116c:	200a      	movs	r0, #10
 800116e:	f001 f823 	bl	80021b8 <HAL_Delay>
}
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 800117a:	b580      	push	{r7, lr}
 800117c:	b086      	sub	sp, #24
 800117e:	af02      	add	r7, sp, #8
 8001180:	6078      	str	r0, [r7, #4]
 8001182:	460b      	mov	r3, r1
 8001184:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8001186:	78fb      	ldrb	r3, [r7, #3]
 8001188:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800118c:	b2db      	uxtb	r3, r3
 800118e:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8001190:	f107 030f 	add.w	r3, r7, #15
 8001194:	f107 010e 	add.w	r1, r7, #14
 8001198:	2201      	movs	r2, #1
 800119a:	9200      	str	r2, [sp, #0]
 800119c:	2201      	movs	r2, #1
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff fe45 	bl	8000e2e <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b086      	sub	sp, #24
 80011b2:	af02      	add	r7, sp, #8
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	460b      	mov	r3, r1
 80011b8:	70fb      	strb	r3, [r7, #3]
 80011ba:	4613      	mov	r3, r2
 80011bc:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80011be:	78fb      	ldrb	r3, [r7, #3]
 80011c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	73bb      	strb	r3, [r7, #14]
	data = value;
 80011c8:	78bb      	ldrb	r3, [r7, #2]
 80011ca:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80011cc:	f107 030f 	add.w	r3, r7, #15
 80011d0:	f107 010e 	add.w	r1, r7, #14
 80011d4:	2201      	movs	r2, #1
 80011d6:	9200      	str	r2, [sp, #0]
 80011d8:	2201      	movs	r2, #1
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff fe65 	bl	8000eaa <LoRa_writeReg>
	//HAL_Delay(5);
}
 80011e0:	bf00      	nop
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	461a      	mov	r2, r3
 80011f4:	460b      	mov	r3, r1
 80011f6:	72fb      	strb	r3, [r7, #11]
 80011f8:	4613      	mov	r3, r2
 80011fa:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 80011fc:	7afb      	ldrb	r3, [r7, #11]
 80011fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001202:	b2db      	uxtb	r3, r3
 8001204:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6818      	ldr	r0, [r3, #0]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	889b      	ldrh	r3, [r3, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	4619      	mov	r1, r3
 8001212:	f001 fad9 	bl	80027c8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6998      	ldr	r0, [r3, #24]
 800121a:	f107 0117 	add.w	r1, r7, #23
 800121e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001222:	2201      	movs	r2, #1
 8001224:	f003 fa41 	bl	80046aa <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001228:	bf00      	nop
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	4618      	mov	r0, r3
 8001230:	f003 fe41 	bl	8004eb6 <HAL_SPI_GetState>
 8001234:	4603      	mov	r3, r0
 8001236:	2b01      	cmp	r3, #1
 8001238:	d1f7      	bne.n	800122a <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6998      	ldr	r0, [r3, #24]
 800123e:	7abb      	ldrb	r3, [r7, #10]
 8001240:	b29a      	uxth	r2, r3
 8001242:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	f003 fa2f 	bl	80046aa <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800124c:	bf00      	nop
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	4618      	mov	r0, r3
 8001254:	f003 fe2f 	bl	8004eb6 <HAL_SPI_GetState>
 8001258:	4603      	mov	r3, r0
 800125a:	2b01      	cmp	r3, #1
 800125c:	d1f7      	bne.n	800124e <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	6818      	ldr	r0, [r3, #0]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	889b      	ldrh	r3, [r3, #4]
 8001266:	2201      	movs	r2, #1
 8001268:	4619      	mov	r1, r3
 800126a:	f001 faad 	bl	80027c8 <HAL_GPIO_WritePin>
}
 800126e:	bf00      	nop
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]

	return 1;
 800127e:	2301      	movs	r3, #1
}
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	4611      	mov	r1, r2
 8001298:	461a      	mov	r2, r3
 800129a:	460b      	mov	r3, r1
 800129c:	71fb      	strb	r3, [r7, #7]
 800129e:	4613      	mov	r3, r2
 80012a0:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80012a8:	2101      	movs	r1, #1
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f7ff fd5e 	bl	8000d6c <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 80012b0:	210e      	movs	r1, #14
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f7ff ff61 	bl	800117a <LoRa_read>
 80012b8:	4603      	mov	r3, r0
 80012ba:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80012bc:	7cfb      	ldrb	r3, [r7, #19]
 80012be:	461a      	mov	r2, r3
 80012c0:	210d      	movs	r1, #13
 80012c2:	68f8      	ldr	r0, [r7, #12]
 80012c4:	f7ff ff73 	bl	80011ae <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	461a      	mov	r2, r3
 80012cc:	2122      	movs	r1, #34	@ 0x22
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f7ff ff6d 	bl	80011ae <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	2100      	movs	r1, #0
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f7ff ff84 	bl	80011e8 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 80012e0:	2103      	movs	r1, #3
 80012e2:	68f8      	ldr	r0, [r7, #12]
 80012e4:	f7ff fd42 	bl	8000d6c <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 80012e8:	2112      	movs	r1, #18
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f7ff ff45 	bl	800117a <LoRa_read>
 80012f0:	4603      	mov	r3, r0
 80012f2:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 80012f4:	7cfb      	ldrb	r3, [r7, #19]
 80012f6:	f003 0308 	and.w	r3, r3, #8
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00a      	beq.n	8001314 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80012fe:	22ff      	movs	r2, #255	@ 0xff
 8001300:	2112      	movs	r1, #18
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f7ff ff53 	bl	80011ae <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001308:	6979      	ldr	r1, [r7, #20]
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	f7ff fd2e 	bl	8000d6c <LoRa_gotoMode>
			return 1;
 8001310:	2301      	movs	r3, #1
 8001312:	e00f      	b.n	8001334 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8001314:	88bb      	ldrh	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	80bb      	strh	r3, [r7, #4]
 800131a:	88bb      	ldrh	r3, [r7, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d105      	bne.n	800132c <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8001320:	6979      	ldr	r1, [r7, #20]
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f7ff fd22 	bl	8000d6c <LoRa_gotoMode>
				return 0;
 8001328:	2300      	movs	r3, #0
 800132a:	e003      	b.n	8001334 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 800132c:	2001      	movs	r0, #1
 800132e:	f000 ff43 	bl	80021b8 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001332:	e7d9      	b.n	80012e8 <LoRa_transmit+0x5c>
	}
}
 8001334:	4618      	mov	r0, r3
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 800133c:	b590      	push	{r4, r7, lr}
 800133e:	b089      	sub	sp, #36	@ 0x24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	4613      	mov	r3, r2
 8001348:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 800134e:	2300      	movs	r3, #0
 8001350:	61bb      	str	r3, [r7, #24]
 8001352:	e007      	b.n	8001364 <LoRa_receive+0x28>
		data[i]=0;
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	4413      	add	r3, r2
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	3301      	adds	r3, #1
 8001362:	61bb      	str	r3, [r7, #24]
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	429a      	cmp	r2, r3
 800136a:	dbf3      	blt.n	8001354 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 800136c:	2101      	movs	r1, #1
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f7ff fcfc 	bl	8000d6c <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8001374:	2112      	movs	r1, #18
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f7ff feff 	bl	800117a <LoRa_read>
 800137c:	4603      	mov	r3, r0
 800137e:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8001380:	7cfb      	ldrb	r3, [r7, #19]
 8001382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001386:	2b00      	cmp	r3, #0
 8001388:	d02f      	beq.n	80013ea <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 800138a:	22ff      	movs	r2, #255	@ 0xff
 800138c:	2112      	movs	r1, #18
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f7ff ff0d 	bl	80011ae <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8001394:	2113      	movs	r1, #19
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f7ff feef 	bl	800117a <LoRa_read>
 800139c:	4603      	mov	r3, r0
 800139e:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 80013a0:	2110      	movs	r1, #16
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f7ff fee9 	bl	800117a <LoRa_read>
 80013a8:	4603      	mov	r3, r0
 80013aa:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80013ac:	7cfb      	ldrb	r3, [r7, #19]
 80013ae:	461a      	mov	r2, r3
 80013b0:	210d      	movs	r1, #13
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f7ff fefb 	bl	80011ae <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 80013b8:	7cba      	ldrb	r2, [r7, #18]
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	4293      	cmp	r3, r2
 80013be:	bf28      	it	cs
 80013c0:	4613      	movcs	r3, r2
 80013c2:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	e00b      	b.n	80013e2 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	68ba      	ldr	r2, [r7, #8]
 80013ce:	18d4      	adds	r4, r2, r3
 80013d0:	2100      	movs	r1, #0
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f7ff fed1 	bl	800117a <LoRa_read>
 80013d8:	4603      	mov	r3, r0
 80013da:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	3301      	adds	r3, #1
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	7ffb      	ldrb	r3, [r7, #31]
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	dbef      	blt.n	80013ca <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80013ea:	2105      	movs	r1, #5
 80013ec:	68f8      	ldr	r0, [r7, #12]
 80013ee:	f7ff fcbd 	bl	8000d6c <LoRa_gotoMode>
    return min;
 80013f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3724      	adds	r7, #36	@ 0x24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd90      	pop	{r4, r7, pc}

080013fc <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ff36 	bl	8001276 <LoRa_isvalid>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 8096 	beq.w	800153e <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001412:	2100      	movs	r1, #0
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff fca9 	bl	8000d6c <LoRa_gotoMode>
			HAL_Delay(10);
 800141a:	200a      	movs	r0, #10
 800141c:	f000 fecc 	bl	80021b8 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8001420:	2101      	movs	r1, #1
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff fea9 	bl	800117a <LoRa_read>
 8001428:	4603      	mov	r3, r0
 800142a:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 800142c:	200a      	movs	r0, #10
 800142e:	f000 fec3 	bl	80021b8 <HAL_Delay>
			data = read | 0x80;
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001438:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 800143a:	7bbb      	ldrb	r3, [r7, #14]
 800143c:	461a      	mov	r2, r3
 800143e:	2101      	movs	r1, #1
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff feb4 	bl	80011ae <LoRa_write>
			HAL_Delay(100);
 8001446:	2064      	movs	r0, #100	@ 0x64
 8001448:	f000 feb6 	bl	80021b8 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	4619      	mov	r1, r3
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff fdc2 	bl	8000fdc <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800145e:	4619      	mov	r1, r3
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff fe1d 	bl	80010a0 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800146c:	4619      	mov	r1, r3
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff fe2a 	bl	80010c8 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8001474:	2223      	movs	r2, #35	@ 0x23
 8001476:	210c      	movs	r1, #12
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff fe98 	bl	80011ae <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff fe60 	bl	8001144 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800148a:	4619      	mov	r1, r3
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff fdd5 	bl	800103c <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001492:	22ff      	movs	r2, #255	@ 0xff
 8001494:	211f      	movs	r1, #31
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff fe89 	bl	80011ae <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014a6:	011b      	lsls	r3, r3, #4
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	4413      	add	r3, r2
 80014b6:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 80014b8:	7bbb      	ldrb	r3, [r7, #14]
 80014ba:	461a      	mov	r2, r3
 80014bc:	211d      	movs	r1, #29
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff fe75 	bl	80011ae <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff fd53 	bl	8000f70 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014ce:	0a1b      	lsrs	r3, r3, #8
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	461a      	mov	r2, r3
 80014d6:	2120      	movs	r1, #32
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff fe68 	bl	80011ae <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	461a      	mov	r2, r3
 80014e6:	2121      	movs	r1, #33	@ 0x21
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff fe60 	bl	80011ae <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 80014ee:	2140      	movs	r1, #64	@ 0x40
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff fe42 	bl	800117a <LoRa_read>
 80014f6:	4603      	mov	r3, r0
 80014f8:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8001500:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001502:	7bbb      	ldrb	r3, [r7, #14]
 8001504:	461a      	mov	r2, r3
 8001506:	2140      	movs	r1, #64	@ 0x40
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff fe50 	bl	80011ae <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 800150e:	2101      	movs	r1, #1
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff fc2b 	bl	8000d6c <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2201      	movs	r2, #1
 800151a:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 800151c:	200a      	movs	r0, #10
 800151e:	f000 fe4b 	bl	80021b8 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8001522:	2142      	movs	r1, #66	@ 0x42
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff fe28 	bl	800117a <LoRa_read>
 800152a:	4603      	mov	r3, r0
 800152c:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 800152e:	7bfb      	ldrb	r3, [r7, #15]
 8001530:	2b12      	cmp	r3, #18
 8001532:	d101      	bne.n	8001538 <LoRa_init+0x13c>
				return LORA_OK;
 8001534:	23c8      	movs	r3, #200	@ 0xc8
 8001536:	e004      	b.n	8001542 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8001538:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 800153c:	e001      	b.n	8001542 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 800153e:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8001542:	4618      	mov	r0, r3
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <receive_ack>:
#include "ack_handler.h"
#include "main.h"
#include "crc_calculator.h"

bool receive_ack(void) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b0c6      	sub	sp, #280	@ 0x118
 8001550:	af00      	add	r7, sp, #0
	uint8_t ackData[16];
	char buffer[256];
	bool responseReceived = false;
 8001552:	2300      	movs	r3, #0
 8001554:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

	uint32_t startTime = HAL_GetTick();
 8001558:	f000 fe22 	bl	80021a0 <HAL_GetTick>
 800155c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
	while (HAL_GetTick() - startTime < 2000) { // Wait up to 2 seconds for response
 8001560:	e063      	b.n	800162a <receive_ack+0xde>
		if (LoRa_receive(&myLoRa, ackData, 16)) {
 8001562:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001566:	2210      	movs	r2, #16
 8001568:	4619      	mov	r1, r3
 800156a:	4843      	ldr	r0, [pc, #268]	@ (8001678 <receive_ack+0x12c>)
 800156c:	f7ff fee6 	bl	800133c <LoRa_receive>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d059      	beq.n	800162a <receive_ack+0xde>
			sprintf(buffer, "Received data: %.*s\r\n", 16, ackData);
 8001576:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800157a:	4638      	mov	r0, r7
 800157c:	2210      	movs	r2, #16
 800157e:	493f      	ldr	r1, [pc, #252]	@ (800167c <receive_ack+0x130>)
 8001580:	f008 f922 	bl	80097c8 <siprintf>
			CDC_Transmit_FS((uint8_t*) buffer, strlen(buffer));
 8001584:	463b      	mov	r3, r7
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe fe2a 	bl	80001e0 <strlen>
 800158c:	4603      	mov	r3, r0
 800158e:	b29a      	uxth	r2, r3
 8001590:	463b      	mov	r3, r7
 8001592:	4611      	mov	r1, r2
 8001594:	4618      	mov	r0, r3
 8001596:	f007 fc91 	bl	8008ebc <CDC_Transmit_FS>

			if (ackData[0] == 'A' && ackData[1] == 'C' && ackData[2] == 'K') {
 800159a:	f897 3100 	ldrb.w	r3, [r7, #256]	@ 0x100
 800159e:	2b41      	cmp	r3, #65	@ 0x41
 80015a0:	d11d      	bne.n	80015de <receive_ack+0x92>
 80015a2:	f897 3101 	ldrb.w	r3, [r7, #257]	@ 0x101
 80015a6:	2b43      	cmp	r3, #67	@ 0x43
 80015a8:	d119      	bne.n	80015de <receive_ack+0x92>
 80015aa:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
 80015ae:	2b4b      	cmp	r3, #75	@ 0x4b
 80015b0:	d115      	bne.n	80015de <receive_ack+0x92>
				sprintf(buffer, "Received ACK: %s\r\n", ackData);
 80015b2:	f507 7280 	add.w	r2, r7, #256	@ 0x100
 80015b6:	463b      	mov	r3, r7
 80015b8:	4931      	ldr	r1, [pc, #196]	@ (8001680 <receive_ack+0x134>)
 80015ba:	4618      	mov	r0, r3
 80015bc:	f008 f904 	bl	80097c8 <siprintf>
				CDC_Transmit_FS((uint8_t*) buffer, strlen(buffer));
 80015c0:	463b      	mov	r3, r7
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe fe0c 	bl	80001e0 <strlen>
 80015c8:	4603      	mov	r3, r0
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	463b      	mov	r3, r7
 80015ce:	4611      	mov	r1, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f007 fc73 	bl	8008ebc <CDC_Transmit_FS>
				responseReceived = true;
 80015d6:	2301      	movs	r3, #1
 80015d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
				break;
 80015dc:	e02e      	b.n	800163c <receive_ack+0xf0>
			} else if (ackData[0] == 'N' && ackData[1] == 'A'
 80015de:	f897 3100 	ldrb.w	r3, [r7, #256]	@ 0x100
 80015e2:	2b4e      	cmp	r3, #78	@ 0x4e
 80015e4:	d121      	bne.n	800162a <receive_ack+0xde>
 80015e6:	f897 3101 	ldrb.w	r3, [r7, #257]	@ 0x101
 80015ea:	2b41      	cmp	r3, #65	@ 0x41
 80015ec:	d11d      	bne.n	800162a <receive_ack+0xde>
					&& ackData[2] == 'C' && ackData[3] == 'K') {
 80015ee:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
 80015f2:	2b43      	cmp	r3, #67	@ 0x43
 80015f4:	d119      	bne.n	800162a <receive_ack+0xde>
 80015f6:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80015fa:	2b4b      	cmp	r3, #75	@ 0x4b
 80015fc:	d115      	bne.n	800162a <receive_ack+0xde>
				sprintf(buffer, "Received NACK: %s\r\n", ackData);
 80015fe:	f507 7280 	add.w	r2, r7, #256	@ 0x100
 8001602:	463b      	mov	r3, r7
 8001604:	491f      	ldr	r1, [pc, #124]	@ (8001684 <receive_ack+0x138>)
 8001606:	4618      	mov	r0, r3
 8001608:	f008 f8de 	bl	80097c8 <siprintf>
				CDC_Transmit_FS((uint8_t*) buffer, strlen(buffer));
 800160c:	463b      	mov	r3, r7
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe fde6 	bl	80001e0 <strlen>
 8001614:	4603      	mov	r3, r0
 8001616:	b29a      	uxth	r2, r3
 8001618:	463b      	mov	r3, r7
 800161a:	4611      	mov	r1, r2
 800161c:	4618      	mov	r0, r3
 800161e:	f007 fc4d 	bl	8008ebc <CDC_Transmit_FS>
				responseReceived = true;
 8001622:	2301      	movs	r3, #1
 8001624:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
				break;
 8001628:	e008      	b.n	800163c <receive_ack+0xf0>
	while (HAL_GetTick() - startTime < 2000) { // Wait up to 2 seconds for response
 800162a:	f000 fdb9 	bl	80021a0 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800163a:	d392      	bcc.n	8001562 <receive_ack+0x16>
			}
		}
	}

	if (!responseReceived) {
 800163c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001640:	f083 0301 	eor.w	r3, r3, #1
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00f      	beq.n	800166a <receive_ack+0x11e>
		sprintf(buffer, "No response received\r\n");
 800164a:	463b      	mov	r3, r7
 800164c:	490e      	ldr	r1, [pc, #56]	@ (8001688 <receive_ack+0x13c>)
 800164e:	4618      	mov	r0, r3
 8001650:	f008 f8ba 	bl	80097c8 <siprintf>
		CDC_Transmit_FS((uint8_t*) buffer, strlen(buffer));
 8001654:	463b      	mov	r3, r7
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe fdc2 	bl	80001e0 <strlen>
 800165c:	4603      	mov	r3, r0
 800165e:	b29a      	uxth	r2, r3
 8001660:	463b      	mov	r3, r7
 8001662:	4611      	mov	r1, r2
 8001664:	4618      	mov	r0, r3
 8001666:	f007 fc29 	bl	8008ebc <CDC_Transmit_FS>
	}

	return responseReceived;
 800166a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
}
 800166e:	4618      	mov	r0, r3
 8001670:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	2000020c 	.word	0x2000020c
 800167c:	0800a170 	.word	0x0800a170
 8001680:	0800a188 	.word	0x0800a188
 8001684:	0800a19c 	.word	0x0800a19c
 8001688:	0800a1b0 	.word	0x0800a1b0

0800168c <sendMessageAndWaitForAck>:

bool sendMessageAndWaitForAck(LoRa *lora, uint8_t *messageBuffer, uint8_t totalLen) {
 800168c:	b590      	push	{r4, r7, lr}
 800168e:	b0d1      	sub	sp, #324	@ 0x144
 8001690:	af02      	add	r7, sp, #8
 8001692:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001696:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800169a:	6018      	str	r0, [r3, #0]
 800169c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80016a0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80016a4:	6019      	str	r1, [r3, #0]
 80016a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80016aa:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80016ae:	701a      	strb	r2, [r3, #0]
    const char originalMessage[] = "Hello, LoRa!";
 80016b0:	4b31      	ldr	r3, [pc, #196]	@ (8001778 <sendMessageAndWaitForAck+0xec>)
 80016b2:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 80016b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016b8:	c407      	stmia	r4!, {r0, r1, r2}
 80016ba:	7023      	strb	r3, [r4, #0]
    uint8_t msgLen = strlen(originalMessage);
 80016bc:	230c      	movs	r3, #12
 80016be:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137

    // Calculate CRC for the original message
    uint32_t crc = Calculate_CRC((uint8_t*) originalMessage, msgLen);
 80016c2:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 80016c6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 f85b 	bl	8001788 <Calculate_CRC>
 80016d2:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130

    // Delay for 200ms (maybe for LoRa to settle, or other reasons)
    HAL_Delay(200);
 80016d6:	20c8      	movs	r0, #200	@ 0xc8
 80016d8:	f000 fd6e 	bl	80021b8 <HAL_Delay>

    // Transmit "CRC: " via CDC
    CDC_Transmit_FS((uint8_t*) "CRC: ", strlen("CRC: "));
 80016dc:	2105      	movs	r1, #5
 80016de:	4827      	ldr	r0, [pc, #156]	@ (800177c <sendMessageAndWaitForAck+0xf0>)
 80016e0:	f007 fbec 	bl	8008ebc <CDC_Transmit_FS>

    // Format the CRC as a string
    char crcString[15]; // Buffer for CRC in hex + null terminator
    snprintf(crcString, sizeof(crcString), "0x%08X\r\n", (unsigned int) crc); // Format CRC as an 8-digit hex number
 80016e4:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 80016e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80016ec:	4a24      	ldr	r2, [pc, #144]	@ (8001780 <sendMessageAndWaitForAck+0xf4>)
 80016ee:	210f      	movs	r1, #15
 80016f0:	f008 f836 	bl	8009760 <sniprintf>

    // Transmit the formatted CRC string via CDC
    CDC_Transmit_FS((uint8_t*) crcString, strlen(crcString));
 80016f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe fd71 	bl	80001e0 <strlen>
 80016fe:	4603      	mov	r3, r0
 8001700:	b29a      	uxth	r2, r3
 8001702:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f007 fbd7 	bl	8008ebc <CDC_Transmit_FS>

    // Combine the message and the CRC into a single packet
    char packet[256];
    snprintf(packet, sizeof(packet), "%s0x%08X", originalMessage, (unsigned int) crc);
 800170e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8001712:	f107 0010 	add.w	r0, r7, #16
 8001716:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	4613      	mov	r3, r2
 800171e:	4a19      	ldr	r2, [pc, #100]	@ (8001784 <sendMessageAndWaitForAck+0xf8>)
 8001720:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001724:	f008 f81c 	bl	8009760 <sniprintf>

    // Transmit the combined packet via LoRa
    uint8_t result = LoRa_transmit(lora, (uint8_t*) packet, strlen(packet), 1000);
 8001728:	f107 0310 	add.w	r3, r7, #16
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe fd57 	bl	80001e0 <strlen>
 8001732:	4603      	mov	r3, r0
 8001734:	b2da      	uxtb	r2, r3
 8001736:	f107 0110 	add.w	r1, r7, #16
 800173a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800173e:	f5a3 7096 	sub.w	r0, r3, #300	@ 0x12c
 8001742:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001746:	6800      	ldr	r0, [r0, #0]
 8001748:	f7ff fda0 	bl	800128c <LoRa_transmit>
 800174c:	4603      	mov	r3, r0
 800174e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

    // Check for acknowledgment
    if (result) {
 8001752:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8001756:	2b00      	cmp	r3, #0
 8001758:	d007      	beq.n	800176a <sendMessageAndWaitForAck+0xde>
        bool responseReceived = receive_ack();
 800175a:	f7ff fef7 	bl	800154c <receive_ack>
 800175e:	4603      	mov	r3, r0
 8001760:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
        return responseReceived;
 8001764:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8001768:	e000      	b.n	800176c <sendMessageAndWaitForAck+0xe0>
    } else {
        return false;
 800176a:	2300      	movs	r3, #0
    }
}
 800176c:	4618      	mov	r0, r3
 800176e:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8001772:	46bd      	mov	sp, r7
 8001774:	bd90      	pop	{r4, r7, pc}
 8001776:	bf00      	nop
 8001778:	0800a1e8 	.word	0x0800a1e8
 800177c:	0800a1c8 	.word	0x0800a1c8
 8001780:	0800a1d0 	.word	0x0800a1d0
 8001784:	0800a1dc 	.word	0x0800a1dc

08001788 <Calculate_CRC>:
#include "crc_calculator.h"
#include "main.h"



uint32_t Calculate_CRC(const uint8_t *data, uint8_t length) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b0c6      	sub	sp, #280	@ 0x118
 800178c:	af00      	add	r7, sp, #0
 800178e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001792:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001796:	6018      	str	r0, [r3, #0]
 8001798:	460a      	mov	r2, r1
 800179a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800179e:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 80017a2:	701a      	strb	r2, [r3, #0]
    uint32_t crc = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    uint32_t buffer32[(256 + 3) / 4]; // Pre-allocate buffer for max data size
    uint32_t wordCount = (length + 3) / 4;
 80017aa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80017ae:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	3303      	adds	r3, #3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	da00      	bge.n	80017bc <Calculate_CRC+0x34>
 80017ba:	3303      	adds	r3, #3
 80017bc:	109b      	asrs	r3, r3, #2
 80017be:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    uint8_t i, j;

    // Pack bytes into 32-bit words (little-endian)
    for (i = 0; i < wordCount; i++) {
 80017c2:	2300      	movs	r3, #0
 80017c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80017c8:	e044      	b.n	8001854 <Calculate_CRC+0xcc>
        uint32_t word = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
        for (j = 0; j < 4 && (i * 4 + j) < length; j++) {
 80017d0:	2300      	movs	r3, #0
 80017d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80017d6:	e01d      	b.n	8001814 <Calculate_CRC+0x8c>
            word |= (uint32_t)data[i * 4 + j] << (j * 8);
 80017d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80017dc:	009a      	lsls	r2, r3, #2
 80017de:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80017e2:	4413      	add	r3, r2
 80017e4:	461a      	mov	r2, r3
 80017e6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80017ea:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4413      	add	r3, r2
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001804:	4313      	orrs	r3, r2
 8001806:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
        for (j = 0; j < 4 && (i * 4 + j) < length; j++) {
 800180a:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800180e:	3301      	adds	r3, #1
 8001810:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8001814:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8001818:	2b03      	cmp	r3, #3
 800181a:	d80c      	bhi.n	8001836 <Calculate_CRC+0xae>
 800181c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001820:	009a      	lsls	r2, r3, #2
 8001822:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8001826:	441a      	add	r2, r3
 8001828:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800182c:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	dbd0      	blt.n	80017d8 <Calculate_CRC+0x50>
        }
        buffer32[i] = word;
 8001836:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 800183a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800183e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001842:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 8001846:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < wordCount; i++) {
 800184a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800184e:	3301      	adds	r3, #1
 8001850:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8001854:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001858:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800185c:	429a      	cmp	r2, r3
 800185e:	d8b4      	bhi.n	80017ca <Calculate_CRC+0x42>
    }

    // Compute CRC using HAL function
    crc = HAL_CRC_Calculate(&hcrc, buffer32, wordCount);
 8001860:	f107 0308 	add.w	r3, r7, #8
 8001864:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001868:	4619      	mov	r1, r3
 800186a:	4806      	ldr	r0, [pc, #24]	@ (8001884 <Calculate_CRC+0xfc>)
 800186c:	f000 fdf5 	bl	800245a <HAL_CRC_Calculate>
 8001870:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c

    // Apply final XOR
    return crc ^ 0xFFFFFFFF;
 8001874:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001878:	43db      	mvns	r3, r3
}
 800187a:	4618      	mov	r0, r3
 800187c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000168 	.word	0x20000168

08001888 <LoRa_Init>:
#include "SX1278.h"
#include "usbd_cdc_if.h"

extern SPI_HandleTypeDef hspi1;

void LoRa_Init(void) {
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
    myLoRa.CS_port = GPIOB;
 800188c:	4b29      	ldr	r3, [pc, #164]	@ (8001934 <LoRa_Init+0xac>)
 800188e:	4a2a      	ldr	r2, [pc, #168]	@ (8001938 <LoRa_Init+0xb0>)
 8001890:	601a      	str	r2, [r3, #0]
    myLoRa.CS_pin = GPIO_PIN_0;
 8001892:	4b28      	ldr	r3, [pc, #160]	@ (8001934 <LoRa_Init+0xac>)
 8001894:	2201      	movs	r2, #1
 8001896:	809a      	strh	r2, [r3, #4]
    myLoRa.reset_port = GPIOB;
 8001898:	4b26      	ldr	r3, [pc, #152]	@ (8001934 <LoRa_Init+0xac>)
 800189a:	4a27      	ldr	r2, [pc, #156]	@ (8001938 <LoRa_Init+0xb0>)
 800189c:	609a      	str	r2, [r3, #8]
    myLoRa.reset_pin = GPIO_PIN_1;
 800189e:	4b25      	ldr	r3, [pc, #148]	@ (8001934 <LoRa_Init+0xac>)
 80018a0:	2202      	movs	r2, #2
 80018a2:	819a      	strh	r2, [r3, #12]
    myLoRa.DIO0_port = GPIOB;
 80018a4:	4b23      	ldr	r3, [pc, #140]	@ (8001934 <LoRa_Init+0xac>)
 80018a6:	4a24      	ldr	r2, [pc, #144]	@ (8001938 <LoRa_Init+0xb0>)
 80018a8:	611a      	str	r2, [r3, #16]
    myLoRa.DIO0_pin = GPIO_PIN_2;
 80018aa:	4b22      	ldr	r3, [pc, #136]	@ (8001934 <LoRa_Init+0xac>)
 80018ac:	2204      	movs	r2, #4
 80018ae:	829a      	strh	r2, [r3, #20]
    myLoRa.hSPIx = &hspi1;
 80018b0:	4b20      	ldr	r3, [pc, #128]	@ (8001934 <LoRa_Init+0xac>)
 80018b2:	4a22      	ldr	r2, [pc, #136]	@ (800193c <LoRa_Init+0xb4>)
 80018b4:	619a      	str	r2, [r3, #24]

    myLoRa.frequency = 433;
 80018b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001934 <LoRa_Init+0xac>)
 80018b8:	f240 12b1 	movw	r2, #433	@ 0x1b1
 80018bc:	621a      	str	r2, [r3, #32]
    myLoRa.spredingFactor = SF_7;
 80018be:	4b1d      	ldr	r3, [pc, #116]	@ (8001934 <LoRa_Init+0xac>)
 80018c0:	2207      	movs	r2, #7
 80018c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    myLoRa.bandWidth = BW_125KHz;
 80018c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001934 <LoRa_Init+0xac>)
 80018c8:	2207      	movs	r2, #7
 80018ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    myLoRa.crcRate = CR_4_5;
 80018ce:	4b19      	ldr	r3, [pc, #100]	@ (8001934 <LoRa_Init+0xac>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    myLoRa.power = POWER_20db;
 80018d6:	4b17      	ldr	r3, [pc, #92]	@ (8001934 <LoRa_Init+0xac>)
 80018d8:	22ff      	movs	r2, #255	@ 0xff
 80018da:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    myLoRa.overCurrentProtection = 130;
 80018de:	4b15      	ldr	r3, [pc, #84]	@ (8001934 <LoRa_Init+0xac>)
 80018e0:	2282      	movs	r2, #130	@ 0x82
 80018e2:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    myLoRa.preamble = 8;
 80018e6:	4b13      	ldr	r3, [pc, #76]	@ (8001934 <LoRa_Init+0xac>)
 80018e8:	2208      	movs	r2, #8
 80018ea:	851a      	strh	r2, [r3, #40]	@ 0x28


    // Initialize LoRa
    if (LoRa_init(&myLoRa) != LORA_OK) {
 80018ec:	4811      	ldr	r0, [pc, #68]	@ (8001934 <LoRa_Init+0xac>)
 80018ee:	f7ff fd85 	bl	80013fc <LoRa_init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2bc8      	cmp	r3, #200	@ 0xc8
 80018f6:	d00e      	beq.n	8001916 <LoRa_Init+0x8e>
        sprintf(buffer, "LoRa Init Failed\r\n");
 80018f8:	4911      	ldr	r1, [pc, #68]	@ (8001940 <LoRa_Init+0xb8>)
 80018fa:	4812      	ldr	r0, [pc, #72]	@ (8001944 <LoRa_Init+0xbc>)
 80018fc:	f007 ff64 	bl	80097c8 <siprintf>
        CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 8001900:	4810      	ldr	r0, [pc, #64]	@ (8001944 <LoRa_Init+0xbc>)
 8001902:	f7fe fc6d 	bl	80001e0 <strlen>
 8001906:	4603      	mov	r3, r0
 8001908:	b29b      	uxth	r3, r3
 800190a:	4619      	mov	r1, r3
 800190c:	480d      	ldr	r0, [pc, #52]	@ (8001944 <LoRa_Init+0xbc>)
 800190e:	f007 fad5 	bl	8008ebc <CDC_Transmit_FS>
        while (1);
 8001912:	bf00      	nop
 8001914:	e7fd      	b.n	8001912 <LoRa_Init+0x8a>
    }
    // Send initialization message
    sprintf(buffer, "LoRa Transmitter Initialized\r\n");
 8001916:	490c      	ldr	r1, [pc, #48]	@ (8001948 <LoRa_Init+0xc0>)
 8001918:	480a      	ldr	r0, [pc, #40]	@ (8001944 <LoRa_Init+0xbc>)
 800191a:	f007 ff55 	bl	80097c8 <siprintf>
    CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 800191e:	4809      	ldr	r0, [pc, #36]	@ (8001944 <LoRa_Init+0xbc>)
 8001920:	f7fe fc5e 	bl	80001e0 <strlen>
 8001924:	4603      	mov	r3, r0
 8001926:	b29b      	uxth	r3, r3
 8001928:	4619      	mov	r1, r3
 800192a:	4806      	ldr	r0, [pc, #24]	@ (8001944 <LoRa_Init+0xbc>)
 800192c:	f007 fac6 	bl	8008ebc <CDC_Transmit_FS>
}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}
 8001934:	2000020c 	.word	0x2000020c
 8001938:	40020400 	.word	0x40020400
 800193c:	20000170 	.word	0x20000170
 8001940:	0800a1f8 	.word	0x0800a1f8
 8001944:	20000240 	.word	0x20000240
 8001948:	0800a20c 	.word	0x0800a20c

0800194c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b0cb      	sub	sp, #300	@ 0x12c
 8001950:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001952:	f000 fbbf 	bl	80020d4 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001956:	f000 f8cb 	bl	8001af0 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800195a:	f000 f9ab 	bl	8001cb4 <MX_GPIO_Init>
    MX_SPI1_Init();
 800195e:	f000 f947 	bl	8001bf0 <MX_SPI1_Init>
    MX_USART2_Init();
 8001962:	f000 f97b 	bl	8001c5c <MX_USART2_Init>
    MX_USB_DEVICE_Init();
 8001966:	f007 f9eb 	bl	8008d40 <MX_USB_DEVICE_Init>
    MX_CRC_Init();
 800196a:	f000 f92d 	bl	8001bc8 <MX_CRC_Init>
    /* USER CODE BEGIN 2 */

    LoRa_Init();
 800196e:	f7ff ff8b 	bl	8001888 <LoRa_Init>

    uint8_t messageBuffer[256];
    const char originalMessage[] = "Hello, LoRa!";
 8001972:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001976:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800197a:	4a54      	ldr	r2, [pc, #336]	@ (8001acc <main+0x180>)
 800197c:	461c      	mov	r4, r3
 800197e:	4613      	mov	r3, r2
 8001980:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001982:	c407      	stmia	r4!, {r0, r1, r2}
 8001984:	7023      	strb	r3, [r4, #0]
    uint8_t msgLen = strlen(originalMessage);
 8001986:	230c      	movs	r3, #12
 8001988:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

    uint32_t crc = Calculate_CRC((const uint8_t *)originalMessage, msgLen);
 800198c:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	4611      	mov	r1, r2
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fef7 	bl	8001788 <Calculate_CRC>
 800199a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
    uint8_t totalLen = msgLen + 4; // 4 bytes for CRC
 800199e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80019a2:	3304      	adds	r3, #4
 80019a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    memcpy(messageBuffer, originalMessage, msgLen);
 80019a8:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 80019ac:	1d39      	adds	r1, r7, #4
 80019ae:	f107 0314 	add.w	r3, r7, #20
 80019b2:	4618      	mov	r0, r3
 80019b4:	f007 ff5c 	bl	8009870 <memcpy>

    messageBuffer[msgLen] = crc & 0xFF;
 80019b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80019bc:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80019c0:	b2d1      	uxtb	r1, r2
 80019c2:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80019c6:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80019ca:	54d1      	strb	r1, [r2, r3]
    messageBuffer[msgLen + 1] = (crc >> 8) & 0xFF;
 80019cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80019d0:	0a1a      	lsrs	r2, r3, #8
 80019d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80019d6:	3301      	adds	r3, #1
 80019d8:	b2d1      	uxtb	r1, r2
 80019da:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80019de:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80019e2:	54d1      	strb	r1, [r2, r3]
    messageBuffer[msgLen + 2] = (crc >> 16) & 0xFF;
 80019e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80019e8:	0c1a      	lsrs	r2, r3, #16
 80019ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80019ee:	3302      	adds	r3, #2
 80019f0:	b2d1      	uxtb	r1, r2
 80019f2:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80019f6:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80019fa:	54d1      	strb	r1, [r2, r3]
    messageBuffer[msgLen + 3] = (crc >> 24) & 0xFF;
 80019fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001a00:	0e1a      	lsrs	r2, r3, #24
 8001a02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8001a06:	3303      	adds	r3, #3
 8001a08:	b2d1      	uxtb	r1, r2
 8001a0a:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8001a0e:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8001a12:	54d1      	strb	r1, [r2, r3]
    while (1)
    {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        uint32_t currentTime = HAL_GetTick();
 8001a14:	f000 fbc4 	bl	80021a0 <HAL_GetTick>
 8001a18:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        if (!messageSent && (currentTime - lastTxTime >= txInterval)) {
 8001a1c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ad0 <main+0x184>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	f083 0301 	eor.w	r3, r3, #1
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d04b      	beq.n	8001ac2 <main+0x176>
 8001a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad4 <main+0x188>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d342      	bcc.n	8001ac2 <main+0x176>
            HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a42:	4825      	ldr	r0, [pc, #148]	@ (8001ad8 <main+0x18c>)
 8001a44:	f000 fec0 	bl	80027c8 <HAL_GPIO_WritePin>
            sprintf(buffer, "TX: %s\r\n", originalMessage);
 8001a48:	1d3b      	adds	r3, r7, #4
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4923      	ldr	r1, [pc, #140]	@ (8001adc <main+0x190>)
 8001a4e:	4824      	ldr	r0, [pc, #144]	@ (8001ae0 <main+0x194>)
 8001a50:	f007 feba 	bl	80097c8 <siprintf>
            CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 8001a54:	4822      	ldr	r0, [pc, #136]	@ (8001ae0 <main+0x194>)
 8001a56:	f7fe fbc3 	bl	80001e0 <strlen>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	4619      	mov	r1, r3
 8001a60:	481f      	ldr	r0, [pc, #124]	@ (8001ae0 <main+0x194>)
 8001a62:	f007 fa2b 	bl	8008ebc <CDC_Transmit_FS>

            // Send the message and wait for ACK
            bool ackReceived = sendMessageAndWaitForAck(&myLoRa, messageBuffer, totalLen);
 8001a66:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 8001a6a:	f107 0314 	add.w	r3, r7, #20
 8001a6e:	4619      	mov	r1, r3
 8001a70:	481c      	ldr	r0, [pc, #112]	@ (8001ae4 <main+0x198>)
 8001a72:	f7ff fe0b 	bl	800168c <sendMessageAndWaitForAck>
 8001a76:	4603      	mov	r3, r0
 8001a78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

            HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a82:	4815      	ldr	r0, [pc, #84]	@ (8001ad8 <main+0x18c>)
 8001a84:	f000 fea0 	bl	80027c8 <HAL_GPIO_WritePin>
            if (ackReceived) {
 8001a88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d007      	beq.n	8001aa0 <main+0x154>
                sprintf(buffer, "ACK received successfully.\r\n");
 8001a90:	4915      	ldr	r1, [pc, #84]	@ (8001ae8 <main+0x19c>)
 8001a92:	4813      	ldr	r0, [pc, #76]	@ (8001ae0 <main+0x194>)
 8001a94:	f007 fe98 	bl	80097c8 <siprintf>
                messageSent = true;
 8001a98:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad0 <main+0x184>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	701a      	strb	r2, [r3, #0]
 8001a9e:	e003      	b.n	8001aa8 <main+0x15c>
            } else {
                sprintf(buffer, "No ACK received.\r\n");
 8001aa0:	4912      	ldr	r1, [pc, #72]	@ (8001aec <main+0x1a0>)
 8001aa2:	480f      	ldr	r0, [pc, #60]	@ (8001ae0 <main+0x194>)
 8001aa4:	f007 fe90 	bl	80097c8 <siprintf>
            }
            CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 8001aa8:	480d      	ldr	r0, [pc, #52]	@ (8001ae0 <main+0x194>)
 8001aaa:	f7fe fb99 	bl	80001e0 <strlen>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	480a      	ldr	r0, [pc, #40]	@ (8001ae0 <main+0x194>)
 8001ab6:	f007 fa01 	bl	8008ebc <CDC_Transmit_FS>

            lastTxTime = currentTime;
 8001aba:	4a06      	ldr	r2, [pc, #24]	@ (8001ad4 <main+0x188>)
 8001abc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ac0:	6013      	str	r3, [r2, #0]
        }
        HAL_Delay(10);
 8001ac2:	200a      	movs	r0, #10
 8001ac4:	f000 fb78 	bl	80021b8 <HAL_Delay>
    {
 8001ac8:	e7a4      	b.n	8001a14 <main+0xc8>
 8001aca:	bf00      	nop
 8001acc:	0800a26c 	.word	0x0800a26c
 8001ad0:	2000023c 	.word	0x2000023c
 8001ad4:	20000238 	.word	0x20000238
 8001ad8:	40020800 	.word	0x40020800
 8001adc:	0800a22c 	.word	0x0800a22c
 8001ae0:	20000240 	.word	0x20000240
 8001ae4:	2000020c 	.word	0x2000020c
 8001ae8:	0800a238 	.word	0x0800a238
 8001aec:	0800a258 	.word	0x0800a258

08001af0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b094      	sub	sp, #80	@ 0x50
 8001af4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001af6:	f107 0320 	add.w	r3, r7, #32
 8001afa:	2230      	movs	r2, #48	@ 0x30
 8001afc:	2100      	movs	r1, #0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f007 fe82 	bl	8009808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b04:	f107 030c 	add.w	r3, r7, #12
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b14:	2300      	movs	r3, #0
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	4b29      	ldr	r3, [pc, #164]	@ (8001bc0 <SystemClock_Config+0xd0>)
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1c:	4a28      	ldr	r2, [pc, #160]	@ (8001bc0 <SystemClock_Config+0xd0>)
 8001b1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b22:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b24:	4b26      	ldr	r3, [pc, #152]	@ (8001bc0 <SystemClock_Config+0xd0>)
 8001b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b30:	2300      	movs	r3, #0
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	4b23      	ldr	r3, [pc, #140]	@ (8001bc4 <SystemClock_Config+0xd4>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001b3c:	4a21      	ldr	r2, [pc, #132]	@ (8001bc4 <SystemClock_Config+0xd4>)
 8001b3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc4 <SystemClock_Config+0xd4>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b50:	2301      	movs	r3, #1
 8001b52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b54:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b58:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b5e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001b64:	2319      	movs	r3, #25
 8001b66:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001b68:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001b6c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001b6e:	2304      	movs	r3, #4
 8001b70:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b72:	2307      	movs	r3, #7
 8001b74:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b76:	f107 0320 	add.w	r3, r7, #32
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f002 f8b4 	bl	8003ce8 <HAL_RCC_OscConfig>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001b86:	f000 f913 	bl	8001db0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b8a:	230f      	movs	r3, #15
 8001b8c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ba0:	f107 030c 	add.w	r3, r7, #12
 8001ba4:	2102      	movs	r1, #2
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f002 fb16 	bl	80041d8 <HAL_RCC_ClockConfig>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001bb2:	f000 f8fd 	bl	8001db0 <Error_Handler>
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	3750      	adds	r7, #80	@ 0x50
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40007000 	.word	0x40007000

08001bc8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
    /* USER CODE END CRC_Init 0 */

    /* USER CODE BEGIN CRC_Init 1 */

    /* USER CODE END CRC_Init 1 */
    hcrc.Instance = CRC;
 8001bcc:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <MX_CRC_Init+0x20>)
 8001bce:	4a07      	ldr	r2, [pc, #28]	@ (8001bec <MX_CRC_Init+0x24>)
 8001bd0:	601a      	str	r2, [r3, #0]

    if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001bd2:	4805      	ldr	r0, [pc, #20]	@ (8001be8 <MX_CRC_Init+0x20>)
 8001bd4:	f000 fc25 	bl	8002422 <HAL_CRC_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_CRC_Init+0x1a>
    {
        Error_Handler();
 8001bde:	f000 f8e7 	bl	8001db0 <Error_Handler>
    }
    /* USER CODE BEGIN CRC_Init 2 */

    /* USER CODE END CRC_Init 2 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000168 	.word	0x20000168
 8001bec:	40023000 	.word	0x40023000

08001bf0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
 8001bf4:	4b17      	ldr	r3, [pc, #92]	@ (8001c54 <MX_SPI1_Init+0x64>)
 8001bf6:	4a18      	ldr	r2, [pc, #96]	@ (8001c58 <MX_SPI1_Init+0x68>)
 8001bf8:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bfa:	4b16      	ldr	r3, [pc, #88]	@ (8001c54 <MX_SPI1_Init+0x64>)
 8001bfc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c00:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c02:	4b14      	ldr	r3, [pc, #80]	@ (8001c54 <MX_SPI1_Init+0x64>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c08:	4b12      	ldr	r3, [pc, #72]	@ (8001c54 <MX_SPI1_Init+0x64>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c0e:	4b11      	ldr	r3, [pc, #68]	@ (8001c54 <MX_SPI1_Init+0x64>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c14:	4b0f      	ldr	r3, [pc, #60]	@ (8001c54 <MX_SPI1_Init+0x64>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c54 <MX_SPI1_Init+0x64>)
 8001c1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c20:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c22:	4b0c      	ldr	r3, [pc, #48]	@ (8001c54 <MX_SPI1_Init+0x64>)
 8001c24:	2218      	movs	r2, #24
 8001c26:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c28:	4b0a      	ldr	r3, [pc, #40]	@ (8001c54 <MX_SPI1_Init+0x64>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c2e:	4b09      	ldr	r3, [pc, #36]	@ (8001c54 <MX_SPI1_Init+0x64>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c34:	4b07      	ldr	r3, [pc, #28]	@ (8001c54 <MX_SPI1_Init+0x64>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi1.Init.CRCPolynomial = 10;
 8001c3a:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <MX_SPI1_Init+0x64>)
 8001c3c:	220a      	movs	r2, #10
 8001c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c40:	4804      	ldr	r0, [pc, #16]	@ (8001c54 <MX_SPI1_Init+0x64>)
 8001c42:	f002 fca9 	bl	8004598 <HAL_SPI_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_SPI1_Init+0x60>
    {
        Error_Handler();
 8001c4c:	f000 f8b0 	bl	8001db0 <Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */
}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000170 	.word	0x20000170
 8001c58:	40013000 	.word	0x40013000

08001c5c <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    husart2.Instance = USART2;
 8001c60:	4b12      	ldr	r3, [pc, #72]	@ (8001cac <MX_USART2_Init+0x50>)
 8001c62:	4a13      	ldr	r2, [pc, #76]	@ (8001cb0 <MX_USART2_Init+0x54>)
 8001c64:	601a      	str	r2, [r3, #0]
    husart2.Init.BaudRate = 115200;
 8001c66:	4b11      	ldr	r3, [pc, #68]	@ (8001cac <MX_USART2_Init+0x50>)
 8001c68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c6c:	605a      	str	r2, [r3, #4]
    husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001cac <MX_USART2_Init+0x50>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
    husart2.Init.StopBits = USART_STOPBITS_1;
 8001c74:	4b0d      	ldr	r3, [pc, #52]	@ (8001cac <MX_USART2_Init+0x50>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	60da      	str	r2, [r3, #12]
    husart2.Init.Parity = USART_PARITY_NONE;
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001cac <MX_USART2_Init+0x50>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	611a      	str	r2, [r3, #16]
    husart2.Init.Mode = USART_MODE_TX_RX;
 8001c80:	4b0a      	ldr	r3, [pc, #40]	@ (8001cac <MX_USART2_Init+0x50>)
 8001c82:	220c      	movs	r2, #12
 8001c84:	615a      	str	r2, [r3, #20]
    husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8001c86:	4b09      	ldr	r3, [pc, #36]	@ (8001cac <MX_USART2_Init+0x50>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
    husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8001c8c:	4b07      	ldr	r3, [pc, #28]	@ (8001cac <MX_USART2_Init+0x50>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	61da      	str	r2, [r3, #28]
    husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001c92:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <MX_USART2_Init+0x50>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	621a      	str	r2, [r3, #32]
    if (HAL_USART_Init(&husart2) != HAL_OK)
 8001c98:	4804      	ldr	r0, [pc, #16]	@ (8001cac <MX_USART2_Init+0x50>)
 8001c9a:	f003 fa5d 	bl	8005158 <HAL_USART_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_USART2_Init+0x4c>
    {
        Error_Handler();
 8001ca4:	f000 f884 	bl	8001db0 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */
}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	200001c8 	.word	0x200001c8
 8001cb0:	40004400 	.word	0x40004400

08001cb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	@ 0x28
 8001cb8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	609a      	str	r2, [r3, #8]
 8001cc6:	60da      	str	r2, [r3, #12]
 8001cc8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	4b35      	ldr	r3, [pc, #212]	@ (8001da4 <MX_GPIO_Init+0xf0>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	4a34      	ldr	r2, [pc, #208]	@ (8001da4 <MX_GPIO_Init+0xf0>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cda:	4b32      	ldr	r3, [pc, #200]	@ (8001da4 <MX_GPIO_Init+0xf0>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b2e      	ldr	r3, [pc, #184]	@ (8001da4 <MX_GPIO_Init+0xf0>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cee:	4a2d      	ldr	r2, [pc, #180]	@ (8001da4 <MX_GPIO_Init+0xf0>)
 8001cf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf6:	4b2b      	ldr	r3, [pc, #172]	@ (8001da4 <MX_GPIO_Init+0xf0>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	4b27      	ldr	r3, [pc, #156]	@ (8001da4 <MX_GPIO_Init+0xf0>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	4a26      	ldr	r2, [pc, #152]	@ (8001da4 <MX_GPIO_Init+0xf0>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d12:	4b24      	ldr	r3, [pc, #144]	@ (8001da4 <MX_GPIO_Init+0xf0>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	607b      	str	r3, [r7, #4]
 8001d22:	4b20      	ldr	r3, [pc, #128]	@ (8001da4 <MX_GPIO_Init+0xf0>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	4a1f      	ldr	r2, [pc, #124]	@ (8001da4 <MX_GPIO_Init+0xf0>)
 8001d28:	f043 0302 	orr.w	r3, r3, #2
 8001d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001da4 <MX_GPIO_Init+0xf0>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d40:	4819      	ldr	r0, [pc, #100]	@ (8001da8 <MX_GPIO_Init+0xf4>)
 8001d42:	f000 fd41 	bl	80027c8 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, NSS_Pin|RESET_Pin, GPIO_PIN_SET);
 8001d46:	2201      	movs	r2, #1
 8001d48:	2103      	movs	r1, #3
 8001d4a:	4818      	ldr	r0, [pc, #96]	@ (8001dac <MX_GPIO_Init+0xf8>)
 8001d4c:	f000 fd3c 	bl	80027c8 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : LED_Pin */
    GPIO_InitStruct.Pin = LED_Pin;
 8001d50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d56:	2301      	movs	r3, #1
 8001d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	4619      	mov	r1, r3
 8001d68:	480f      	ldr	r0, [pc, #60]	@ (8001da8 <MX_GPIO_Init+0xf4>)
 8001d6a:	f000 fba9 	bl	80024c0 <HAL_GPIO_Init>

    /*Configure GPIO pins : NSS_Pin RESET_Pin */
    GPIO_InitStruct.Pin = NSS_Pin|RESET_Pin;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d72:	2301      	movs	r3, #1
 8001d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	4619      	mov	r1, r3
 8001d84:	4809      	ldr	r0, [pc, #36]	@ (8001dac <MX_GPIO_Init+0xf8>)
 8001d86:	f000 fb9b 	bl	80024c0 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	2008      	movs	r0, #8
 8001d90:	f000 fb11 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001d94:	2008      	movs	r0, #8
 8001d96:	f000 fb2a 	bl	80023ee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d9a:	bf00      	nop
 8001d9c:	3728      	adds	r7, #40	@ 0x28
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40020800 	.word	0x40020800
 8001dac:	40020400 	.word	0x40020400

08001db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001db4:	b672      	cpsid	i
}
 8001db6:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001db8:	bf00      	nop
 8001dba:	e7fd      	b.n	8001db8 <Error_Handler+0x8>

08001dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	607b      	str	r3, [r7, #4]
 8001dc6:	4b10      	ldr	r3, [pc, #64]	@ (8001e08 <HAL_MspInit+0x4c>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dca:	4a0f      	ldr	r2, [pc, #60]	@ (8001e08 <HAL_MspInit+0x4c>)
 8001dcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e08 <HAL_MspInit+0x4c>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dda:	607b      	str	r3, [r7, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	603b      	str	r3, [r7, #0]
 8001de2:	4b09      	ldr	r3, [pc, #36]	@ (8001e08 <HAL_MspInit+0x4c>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	4a08      	ldr	r2, [pc, #32]	@ (8001e08 <HAL_MspInit+0x4c>)
 8001de8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dee:	4b06      	ldr	r3, [pc, #24]	@ (8001e08 <HAL_MspInit+0x4c>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800

08001e0c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a0b      	ldr	r2, [pc, #44]	@ (8001e48 <HAL_CRC_MspInit+0x3c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d10d      	bne.n	8001e3a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	4b0a      	ldr	r3, [pc, #40]	@ (8001e4c <HAL_CRC_MspInit+0x40>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	4a09      	ldr	r2, [pc, #36]	@ (8001e4c <HAL_CRC_MspInit+0x40>)
 8001e28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e2e:	4b07      	ldr	r3, [pc, #28]	@ (8001e4c <HAL_CRC_MspInit+0x40>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40023000 	.word	0x40023000
 8001e4c:	40023800 	.word	0x40023800

08001e50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	@ 0x28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a19      	ldr	r2, [pc, #100]	@ (8001ed4 <HAL_SPI_MspInit+0x84>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d12b      	bne.n	8001eca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	4b18      	ldr	r3, [pc, #96]	@ (8001ed8 <HAL_SPI_MspInit+0x88>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7a:	4a17      	ldr	r2, [pc, #92]	@ (8001ed8 <HAL_SPI_MspInit+0x88>)
 8001e7c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e82:	4b15      	ldr	r3, [pc, #84]	@ (8001ed8 <HAL_SPI_MspInit+0x88>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	4b11      	ldr	r3, [pc, #68]	@ (8001ed8 <HAL_SPI_MspInit+0x88>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	4a10      	ldr	r2, [pc, #64]	@ (8001ed8 <HAL_SPI_MspInit+0x88>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed8 <HAL_SPI_MspInit+0x88>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001eaa:	23e0      	movs	r3, #224	@ 0xe0
 8001eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eba:	2305      	movs	r3, #5
 8001ebc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ebe:	f107 0314 	add.w	r3, r7, #20
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4805      	ldr	r0, [pc, #20]	@ (8001edc <HAL_SPI_MspInit+0x8c>)
 8001ec6:	f000 fafb 	bl	80024c0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001eca:	bf00      	nop
 8001ecc:	3728      	adds	r7, #40	@ 0x28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40013000 	.word	0x40013000
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40020000 	.word	0x40020000

08001ee0 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	@ 0x28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a19      	ldr	r2, [pc, #100]	@ (8001f64 <HAL_USART_MspInit+0x84>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d12b      	bne.n	8001f5a <HAL_USART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	4b18      	ldr	r3, [pc, #96]	@ (8001f68 <HAL_USART_MspInit+0x88>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0a:	4a17      	ldr	r2, [pc, #92]	@ (8001f68 <HAL_USART_MspInit+0x88>)
 8001f0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f12:	4b15      	ldr	r3, [pc, #84]	@ (8001f68 <HAL_USART_MspInit+0x88>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	4b11      	ldr	r3, [pc, #68]	@ (8001f68 <HAL_USART_MspInit+0x88>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f26:	4a10      	ldr	r2, [pc, #64]	@ (8001f68 <HAL_USART_MspInit+0x88>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f68 <HAL_USART_MspInit+0x88>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001f3a:	231c      	movs	r3, #28
 8001f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f46:	2303      	movs	r3, #3
 8001f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f4a:	2307      	movs	r3, #7
 8001f4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4e:	f107 0314 	add.w	r3, r7, #20
 8001f52:	4619      	mov	r1, r3
 8001f54:	4805      	ldr	r0, [pc, #20]	@ (8001f6c <HAL_USART_MspInit+0x8c>)
 8001f56:	f000 fab3 	bl	80024c0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001f5a:	bf00      	nop
 8001f5c:	3728      	adds	r7, #40	@ 0x28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40004400 	.word	0x40004400
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40020000 	.word	0x40020000

08001f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f74:	bf00      	nop
 8001f76:	e7fd      	b.n	8001f74 <NMI_Handler+0x4>

08001f78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f7c:	bf00      	nop
 8001f7e:	e7fd      	b.n	8001f7c <HardFault_Handler+0x4>

08001f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f84:	bf00      	nop
 8001f86:	e7fd      	b.n	8001f84 <MemManage_Handler+0x4>

08001f88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f8c:	bf00      	nop
 8001f8e:	e7fd      	b.n	8001f8c <BusFault_Handler+0x4>

08001f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f94:	bf00      	nop
 8001f96:	e7fd      	b.n	8001f94 <UsageFault_Handler+0x4>

08001f98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fc6:	f000 f8d7 	bl	8002178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8001fd2:	2004      	movs	r0, #4
 8001fd4:	f000 fc12 	bl	80027fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001fe0:	4802      	ldr	r0, [pc, #8]	@ (8001fec <OTG_FS_IRQHandler+0x10>)
 8001fe2:	f000 fd72 	bl	8002aca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20001028 	.word	0x20001028

08001ff0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ff8:	4a14      	ldr	r2, [pc, #80]	@ (800204c <_sbrk+0x5c>)
 8001ffa:	4b15      	ldr	r3, [pc, #84]	@ (8002050 <_sbrk+0x60>)
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002004:	4b13      	ldr	r3, [pc, #76]	@ (8002054 <_sbrk+0x64>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d102      	bne.n	8002012 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800200c:	4b11      	ldr	r3, [pc, #68]	@ (8002054 <_sbrk+0x64>)
 800200e:	4a12      	ldr	r2, [pc, #72]	@ (8002058 <_sbrk+0x68>)
 8002010:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002012:	4b10      	ldr	r3, [pc, #64]	@ (8002054 <_sbrk+0x64>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4413      	add	r3, r2
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	429a      	cmp	r2, r3
 800201e:	d207      	bcs.n	8002030 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002020:	f007 fbfa 	bl	8009818 <__errno>
 8002024:	4603      	mov	r3, r0
 8002026:	220c      	movs	r2, #12
 8002028:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800202a:	f04f 33ff 	mov.w	r3, #4294967295
 800202e:	e009      	b.n	8002044 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002030:	4b08      	ldr	r3, [pc, #32]	@ (8002054 <_sbrk+0x64>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002036:	4b07      	ldr	r3, [pc, #28]	@ (8002054 <_sbrk+0x64>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4413      	add	r3, r2
 800203e:	4a05      	ldr	r2, [pc, #20]	@ (8002054 <_sbrk+0x64>)
 8002040:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002042:	68fb      	ldr	r3, [r7, #12]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20010000 	.word	0x20010000
 8002050:	00000400 	.word	0x00000400
 8002054:	20000340 	.word	0x20000340
 8002058:	20001878 	.word	0x20001878

0800205c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002060:	4b06      	ldr	r3, [pc, #24]	@ (800207c <SystemInit+0x20>)
 8002062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002066:	4a05      	ldr	r2, [pc, #20]	@ (800207c <SystemInit+0x20>)
 8002068:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800206c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002080:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002084:	f7ff ffea 	bl	800205c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002088:	480c      	ldr	r0, [pc, #48]	@ (80020bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800208a:	490d      	ldr	r1, [pc, #52]	@ (80020c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800208c:	4a0d      	ldr	r2, [pc, #52]	@ (80020c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800208e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002090:	e002      	b.n	8002098 <LoopCopyDataInit>

08002092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002096:	3304      	adds	r3, #4

08002098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800209a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800209c:	d3f9      	bcc.n	8002092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800209e:	4a0a      	ldr	r2, [pc, #40]	@ (80020c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020a0:	4c0a      	ldr	r4, [pc, #40]	@ (80020cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80020a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a4:	e001      	b.n	80020aa <LoopFillZerobss>

080020a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a8:	3204      	adds	r2, #4

080020aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020ac:	d3fb      	bcc.n	80020a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020ae:	f007 fbb9 	bl	8009824 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020b2:	f7ff fc4b 	bl	800194c <main>
  bx  lr    
 80020b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020b8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80020bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020c0:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 80020c4:	0800a320 	.word	0x0800a320
  ldr r2, =_sbss
 80020c8:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 80020cc:	20001874 	.word	0x20001874

080020d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020d0:	e7fe      	b.n	80020d0 <ADC_IRQHandler>
	...

080020d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002114 <HAL_Init+0x40>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002114 <HAL_Init+0x40>)
 80020de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002114 <HAL_Init+0x40>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002114 <HAL_Init+0x40>)
 80020ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020f0:	4b08      	ldr	r3, [pc, #32]	@ (8002114 <HAL_Init+0x40>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a07      	ldr	r2, [pc, #28]	@ (8002114 <HAL_Init+0x40>)
 80020f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020fc:	2003      	movs	r0, #3
 80020fe:	f000 f94f 	bl	80023a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002102:	200f      	movs	r0, #15
 8002104:	f000 f808 	bl	8002118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002108:	f7ff fe58 	bl	8001dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40023c00 	.word	0x40023c00

08002118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002120:	4b12      	ldr	r3, [pc, #72]	@ (800216c <HAL_InitTick+0x54>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b12      	ldr	r3, [pc, #72]	@ (8002170 <HAL_InitTick+0x58>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	4619      	mov	r1, r3
 800212a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800212e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002132:	fbb2 f3f3 	udiv	r3, r2, r3
 8002136:	4618      	mov	r0, r3
 8002138:	f000 f967 	bl	800240a <HAL_SYSTICK_Config>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e00e      	b.n	8002164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b0f      	cmp	r3, #15
 800214a:	d80a      	bhi.n	8002162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800214c:	2200      	movs	r2, #0
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	f04f 30ff 	mov.w	r0, #4294967295
 8002154:	f000 f92f 	bl	80023b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002158:	4a06      	ldr	r2, [pc, #24]	@ (8002174 <HAL_InitTick+0x5c>)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	e000      	b.n	8002164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000000 	.word	0x20000000
 8002170:	20000008 	.word	0x20000008
 8002174:	20000004 	.word	0x20000004

08002178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800217c:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <HAL_IncTick+0x20>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	4b06      	ldr	r3, [pc, #24]	@ (800219c <HAL_IncTick+0x24>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4413      	add	r3, r2
 8002188:	4a04      	ldr	r2, [pc, #16]	@ (800219c <HAL_IncTick+0x24>)
 800218a:	6013      	str	r3, [r2, #0]
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20000008 	.word	0x20000008
 800219c:	20000344 	.word	0x20000344

080021a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return uwTick;
 80021a4:	4b03      	ldr	r3, [pc, #12]	@ (80021b4 <HAL_GetTick+0x14>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	20000344 	.word	0x20000344

080021b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021c0:	f7ff ffee 	bl	80021a0 <HAL_GetTick>
 80021c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d0:	d005      	beq.n	80021de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021d2:	4b0a      	ldr	r3, [pc, #40]	@ (80021fc <HAL_Delay+0x44>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4413      	add	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021de:	bf00      	nop
 80021e0:	f7ff ffde 	bl	80021a0 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d8f7      	bhi.n	80021e0 <HAL_Delay+0x28>
  {
  }
}
 80021f0:	bf00      	nop
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000008 	.word	0x20000008

08002200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002210:	4b0c      	ldr	r3, [pc, #48]	@ (8002244 <__NVIC_SetPriorityGrouping+0x44>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800221c:	4013      	ands	r3, r2
 800221e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002228:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800222c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002232:	4a04      	ldr	r2, [pc, #16]	@ (8002244 <__NVIC_SetPriorityGrouping+0x44>)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	60d3      	str	r3, [r2, #12]
}
 8002238:	bf00      	nop
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800224c:	4b04      	ldr	r3, [pc, #16]	@ (8002260 <__NVIC_GetPriorityGrouping+0x18>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	0a1b      	lsrs	r3, r3, #8
 8002252:	f003 0307 	and.w	r3, r3, #7
}
 8002256:	4618      	mov	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	2b00      	cmp	r3, #0
 8002274:	db0b      	blt.n	800228e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	f003 021f 	and.w	r2, r3, #31
 800227c:	4907      	ldr	r1, [pc, #28]	@ (800229c <__NVIC_EnableIRQ+0x38>)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	2001      	movs	r0, #1
 8002286:	fa00 f202 	lsl.w	r2, r0, r2
 800228a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	e000e100 	.word	0xe000e100

080022a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	6039      	str	r1, [r7, #0]
 80022aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	db0a      	blt.n	80022ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	490c      	ldr	r1, [pc, #48]	@ (80022ec <__NVIC_SetPriority+0x4c>)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	0112      	lsls	r2, r2, #4
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	440b      	add	r3, r1
 80022c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c8:	e00a      	b.n	80022e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	4908      	ldr	r1, [pc, #32]	@ (80022f0 <__NVIC_SetPriority+0x50>)
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	3b04      	subs	r3, #4
 80022d8:	0112      	lsls	r2, r2, #4
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	440b      	add	r3, r1
 80022de:	761a      	strb	r2, [r3, #24]
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000e100 	.word	0xe000e100
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b089      	sub	sp, #36	@ 0x24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f1c3 0307 	rsb	r3, r3, #7
 800230e:	2b04      	cmp	r3, #4
 8002310:	bf28      	it	cs
 8002312:	2304      	movcs	r3, #4
 8002314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3304      	adds	r3, #4
 800231a:	2b06      	cmp	r3, #6
 800231c:	d902      	bls.n	8002324 <NVIC_EncodePriority+0x30>
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	3b03      	subs	r3, #3
 8002322:	e000      	b.n	8002326 <NVIC_EncodePriority+0x32>
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002328:	f04f 32ff 	mov.w	r2, #4294967295
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43da      	mvns	r2, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	401a      	ands	r2, r3
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800233c:	f04f 31ff 	mov.w	r1, #4294967295
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	fa01 f303 	lsl.w	r3, r1, r3
 8002346:	43d9      	mvns	r1, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800234c:	4313      	orrs	r3, r2
         );
}
 800234e:	4618      	mov	r0, r3
 8002350:	3724      	adds	r7, #36	@ 0x24
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
	...

0800235c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3b01      	subs	r3, #1
 8002368:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800236c:	d301      	bcc.n	8002372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800236e:	2301      	movs	r3, #1
 8002370:	e00f      	b.n	8002392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002372:	4a0a      	ldr	r2, [pc, #40]	@ (800239c <SysTick_Config+0x40>)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3b01      	subs	r3, #1
 8002378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800237a:	210f      	movs	r1, #15
 800237c:	f04f 30ff 	mov.w	r0, #4294967295
 8002380:	f7ff ff8e 	bl	80022a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002384:	4b05      	ldr	r3, [pc, #20]	@ (800239c <SysTick_Config+0x40>)
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800238a:	4b04      	ldr	r3, [pc, #16]	@ (800239c <SysTick_Config+0x40>)
 800238c:	2207      	movs	r2, #7
 800238e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	e000e010 	.word	0xe000e010

080023a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff ff29 	bl	8002200 <__NVIC_SetPriorityGrouping>
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b086      	sub	sp, #24
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	4603      	mov	r3, r0
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
 80023c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c8:	f7ff ff3e 	bl	8002248 <__NVIC_GetPriorityGrouping>
 80023cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68b9      	ldr	r1, [r7, #8]
 80023d2:	6978      	ldr	r0, [r7, #20]
 80023d4:	f7ff ff8e 	bl	80022f4 <NVIC_EncodePriority>
 80023d8:	4602      	mov	r2, r0
 80023da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023de:	4611      	mov	r1, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff ff5d 	bl	80022a0 <__NVIC_SetPriority>
}
 80023e6:	bf00      	nop
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	4603      	mov	r3, r0
 80023f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff ff31 	bl	8002264 <__NVIC_EnableIRQ>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff ffa2 	bl	800235c <SysTick_Config>
 8002418:	4603      	mov	r3, r0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e00e      	b.n	8002452 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	795b      	ldrb	r3, [r3, #5]
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d105      	bne.n	800244a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff fce1 	bl	8001e0c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800245a:	b480      	push	{r7}
 800245c:	b087      	sub	sp, #28
 800245e:	af00      	add	r7, sp, #0
 8002460:	60f8      	str	r0, [r7, #12]
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2202      	movs	r2, #2
 800246e:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0201 	orr.w	r2, r2, #1
 800247e:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	e00a      	b.n	800249c <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	441a      	add	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6812      	ldr	r2, [r2, #0]
 8002494:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	3301      	adds	r3, #1
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d3f0      	bcc.n	8002486 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2201      	movs	r2, #1
 80024b0:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80024b2:	693b      	ldr	r3, [r7, #16]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	371c      	adds	r7, #28
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b089      	sub	sp, #36	@ 0x24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
 80024da:	e159      	b.n	8002790 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024dc:	2201      	movs	r2, #1
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	4013      	ands	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	f040 8148 	bne.w	800278a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	2b01      	cmp	r3, #1
 8002504:	d005      	beq.n	8002512 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800250e:	2b02      	cmp	r3, #2
 8002510:	d130      	bne.n	8002574 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	2203      	movs	r2, #3
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002548:	2201      	movs	r2, #1
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	091b      	lsrs	r3, r3, #4
 800255e:	f003 0201 	and.w	r2, r3, #1
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	2b03      	cmp	r3, #3
 800257e:	d017      	beq.n	80025b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	2203      	movs	r2, #3
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d123      	bne.n	8002604 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	08da      	lsrs	r2, r3, #3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3208      	adds	r2, #8
 80025c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	220f      	movs	r2, #15
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	08da      	lsrs	r2, r3, #3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3208      	adds	r2, #8
 80025fe:	69b9      	ldr	r1, [r7, #24]
 8002600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	2203      	movs	r2, #3
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 0203 	and.w	r2, r3, #3
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4313      	orrs	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 80a2 	beq.w	800278a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	4b57      	ldr	r3, [pc, #348]	@ (80027a8 <HAL_GPIO_Init+0x2e8>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264e:	4a56      	ldr	r2, [pc, #344]	@ (80027a8 <HAL_GPIO_Init+0x2e8>)
 8002650:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002654:	6453      	str	r3, [r2, #68]	@ 0x44
 8002656:	4b54      	ldr	r3, [pc, #336]	@ (80027a8 <HAL_GPIO_Init+0x2e8>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002662:	4a52      	ldr	r2, [pc, #328]	@ (80027ac <HAL_GPIO_Init+0x2ec>)
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	089b      	lsrs	r3, r3, #2
 8002668:	3302      	adds	r3, #2
 800266a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	220f      	movs	r2, #15
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4013      	ands	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a49      	ldr	r2, [pc, #292]	@ (80027b0 <HAL_GPIO_Init+0x2f0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d019      	beq.n	80026c2 <HAL_GPIO_Init+0x202>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a48      	ldr	r2, [pc, #288]	@ (80027b4 <HAL_GPIO_Init+0x2f4>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d013      	beq.n	80026be <HAL_GPIO_Init+0x1fe>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a47      	ldr	r2, [pc, #284]	@ (80027b8 <HAL_GPIO_Init+0x2f8>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d00d      	beq.n	80026ba <HAL_GPIO_Init+0x1fa>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a46      	ldr	r2, [pc, #280]	@ (80027bc <HAL_GPIO_Init+0x2fc>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d007      	beq.n	80026b6 <HAL_GPIO_Init+0x1f6>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a45      	ldr	r2, [pc, #276]	@ (80027c0 <HAL_GPIO_Init+0x300>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d101      	bne.n	80026b2 <HAL_GPIO_Init+0x1f2>
 80026ae:	2304      	movs	r3, #4
 80026b0:	e008      	b.n	80026c4 <HAL_GPIO_Init+0x204>
 80026b2:	2307      	movs	r3, #7
 80026b4:	e006      	b.n	80026c4 <HAL_GPIO_Init+0x204>
 80026b6:	2303      	movs	r3, #3
 80026b8:	e004      	b.n	80026c4 <HAL_GPIO_Init+0x204>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e002      	b.n	80026c4 <HAL_GPIO_Init+0x204>
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <HAL_GPIO_Init+0x204>
 80026c2:	2300      	movs	r3, #0
 80026c4:	69fa      	ldr	r2, [r7, #28]
 80026c6:	f002 0203 	and.w	r2, r2, #3
 80026ca:	0092      	lsls	r2, r2, #2
 80026cc:	4093      	lsls	r3, r2
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026d4:	4935      	ldr	r1, [pc, #212]	@ (80027ac <HAL_GPIO_Init+0x2ec>)
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	089b      	lsrs	r3, r3, #2
 80026da:	3302      	adds	r3, #2
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026e2:	4b38      	ldr	r3, [pc, #224]	@ (80027c4 <HAL_GPIO_Init+0x304>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	43db      	mvns	r3, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4013      	ands	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002706:	4a2f      	ldr	r2, [pc, #188]	@ (80027c4 <HAL_GPIO_Init+0x304>)
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800270c:	4b2d      	ldr	r3, [pc, #180]	@ (80027c4 <HAL_GPIO_Init+0x304>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002730:	4a24      	ldr	r2, [pc, #144]	@ (80027c4 <HAL_GPIO_Init+0x304>)
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002736:	4b23      	ldr	r3, [pc, #140]	@ (80027c4 <HAL_GPIO_Init+0x304>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	43db      	mvns	r3, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4013      	ands	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800275a:	4a1a      	ldr	r2, [pc, #104]	@ (80027c4 <HAL_GPIO_Init+0x304>)
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002760:	4b18      	ldr	r3, [pc, #96]	@ (80027c4 <HAL_GPIO_Init+0x304>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	43db      	mvns	r3, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4013      	ands	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002784:	4a0f      	ldr	r2, [pc, #60]	@ (80027c4 <HAL_GPIO_Init+0x304>)
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3301      	adds	r3, #1
 800278e:	61fb      	str	r3, [r7, #28]
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	2b0f      	cmp	r3, #15
 8002794:	f67f aea2 	bls.w	80024dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002798:	bf00      	nop
 800279a:	bf00      	nop
 800279c:	3724      	adds	r7, #36	@ 0x24
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40013800 	.word	0x40013800
 80027b0:	40020000 	.word	0x40020000
 80027b4:	40020400 	.word	0x40020400
 80027b8:	40020800 	.word	0x40020800
 80027bc:	40020c00 	.word	0x40020c00
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40013c00 	.word	0x40013c00

080027c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	807b      	strh	r3, [r7, #2]
 80027d4:	4613      	mov	r3, r2
 80027d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027d8:	787b      	ldrb	r3, [r7, #1]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027de:	887a      	ldrh	r2, [r7, #2]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027e4:	e003      	b.n	80027ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027e6:	887b      	ldrh	r3, [r7, #2]
 80027e8:	041a      	lsls	r2, r3, #16
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	619a      	str	r2, [r3, #24]
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
	...

080027fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002806:	4b08      	ldr	r3, [pc, #32]	@ (8002828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002808:	695a      	ldr	r2, [r3, #20]
 800280a:	88fb      	ldrh	r3, [r7, #6]
 800280c:	4013      	ands	r3, r2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d006      	beq.n	8002820 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002812:	4a05      	ldr	r2, [pc, #20]	@ (8002828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002814:	88fb      	ldrh	r3, [r7, #6]
 8002816:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002818:	88fb      	ldrh	r3, [r7, #6]
 800281a:	4618      	mov	r0, r3
 800281c:	f000 f806 	bl	800282c <HAL_GPIO_EXTI_Callback>
  }
}
 8002820:	bf00      	nop
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40013c00 	.word	0x40013c00

0800282c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b086      	sub	sp, #24
 8002846:	af02      	add	r7, sp, #8
 8002848:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e101      	b.n	8002a58 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d106      	bne.n	8002874 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f006 fc6c 	bl	800914c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2203      	movs	r2, #3
 8002878:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002882:	d102      	bne.n	800288a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f003 f853 	bl	800593a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6818      	ldr	r0, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	7c1a      	ldrb	r2, [r3, #16]
 800289c:	f88d 2000 	strb.w	r2, [sp]
 80028a0:	3304      	adds	r3, #4
 80028a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028a4:	f002 ff32 	bl	800570c <USB_CoreInit>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d005      	beq.n	80028ba <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2202      	movs	r2, #2
 80028b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e0ce      	b.n	8002a58 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2100      	movs	r1, #0
 80028c0:	4618      	mov	r0, r3
 80028c2:	f003 f84b 	bl	800595c <USB_SetCurrentMode>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0bf      	b.n	8002a58 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028d8:	2300      	movs	r3, #0
 80028da:	73fb      	strb	r3, [r7, #15]
 80028dc:	e04a      	b.n	8002974 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028de:	7bfa      	ldrb	r2, [r7, #15]
 80028e0:	6879      	ldr	r1, [r7, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	4413      	add	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	440b      	add	r3, r1
 80028ec:	3315      	adds	r3, #21
 80028ee:	2201      	movs	r2, #1
 80028f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028f2:	7bfa      	ldrb	r2, [r7, #15]
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	4413      	add	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	3314      	adds	r3, #20
 8002902:	7bfa      	ldrb	r2, [r7, #15]
 8002904:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002906:	7bfa      	ldrb	r2, [r7, #15]
 8002908:	7bfb      	ldrb	r3, [r7, #15]
 800290a:	b298      	uxth	r0, r3
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4413      	add	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	440b      	add	r3, r1
 8002918:	332e      	adds	r3, #46	@ 0x2e
 800291a:	4602      	mov	r2, r0
 800291c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800291e:	7bfa      	ldrb	r2, [r7, #15]
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	4413      	add	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	3318      	adds	r3, #24
 800292e:	2200      	movs	r2, #0
 8002930:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002932:	7bfa      	ldrb	r2, [r7, #15]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	331c      	adds	r3, #28
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002946:	7bfa      	ldrb	r2, [r7, #15]
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4413      	add	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	3320      	adds	r3, #32
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800295a:	7bfa      	ldrb	r2, [r7, #15]
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	3324      	adds	r3, #36	@ 0x24
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800296e:	7bfb      	ldrb	r3, [r7, #15]
 8002970:	3301      	adds	r3, #1
 8002972:	73fb      	strb	r3, [r7, #15]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	791b      	ldrb	r3, [r3, #4]
 8002978:	7bfa      	ldrb	r2, [r7, #15]
 800297a:	429a      	cmp	r2, r3
 800297c:	d3af      	bcc.n	80028de <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800297e:	2300      	movs	r3, #0
 8002980:	73fb      	strb	r3, [r7, #15]
 8002982:	e044      	b.n	8002a0e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002984:	7bfa      	ldrb	r2, [r7, #15]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	4613      	mov	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4413      	add	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002996:	2200      	movs	r2, #0
 8002998:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800299a:	7bfa      	ldrb	r2, [r7, #15]
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	4613      	mov	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4413      	add	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80029ac:	7bfa      	ldrb	r2, [r7, #15]
 80029ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029b0:	7bfa      	ldrb	r2, [r7, #15]
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	4413      	add	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80029c2:	2200      	movs	r2, #0
 80029c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029c6:	7bfa      	ldrb	r2, [r7, #15]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4413      	add	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029dc:	7bfa      	ldrb	r2, [r7, #15]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029f2:	7bfa      	ldrb	r2, [r7, #15]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	4413      	add	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
 8002a00:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	73fb      	strb	r3, [r7, #15]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	791b      	ldrb	r3, [r3, #4]
 8002a12:	7bfa      	ldrb	r2, [r7, #15]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d3b5      	bcc.n	8002984 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6818      	ldr	r0, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	7c1a      	ldrb	r2, [r3, #16]
 8002a20:	f88d 2000 	strb.w	r2, [sp]
 8002a24:	3304      	adds	r3, #4
 8002a26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a28:	f002 ffe4 	bl	80059f4 <USB_DevInit>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d005      	beq.n	8002a3e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2202      	movs	r2, #2
 8002a36:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e00c      	b.n	8002a58 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f004 f82e 	bl	8006ab2 <USB_DevDisconnect>

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d101      	bne.n	8002a7c <HAL_PCD_Start+0x1c>
 8002a78:	2302      	movs	r3, #2
 8002a7a:	e022      	b.n	8002ac2 <HAL_PCD_Start+0x62>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d009      	beq.n	8002aa4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d105      	bne.n	8002aa4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a9c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f002 ff35 	bl	8005918 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f003 ffdc 	bl	8006a70 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002aca:	b590      	push	{r4, r7, lr}
 8002acc:	b08d      	sub	sp, #52	@ 0x34
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f004 f89a 	bl	8006c1a <USB_GetMode>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f040 848c 	bne.w	8003406 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f003 fffe 	bl	8006af4 <USB_ReadInterrupts>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 8482 	beq.w	8003404 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	0a1b      	lsrs	r3, r3, #8
 8002b0a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f003 ffeb 	bl	8006af4 <USB_ReadInterrupts>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d107      	bne.n	8002b38 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695a      	ldr	r2, [r3, #20]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f002 0202 	and.w	r2, r2, #2
 8002b36:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f003 ffd9 	bl	8006af4 <USB_ReadInterrupts>
 8002b42:	4603      	mov	r3, r0
 8002b44:	f003 0310 	and.w	r3, r3, #16
 8002b48:	2b10      	cmp	r3, #16
 8002b4a:	d161      	bne.n	8002c10 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	699a      	ldr	r2, [r3, #24]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0210 	bic.w	r2, r2, #16
 8002b5a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	f003 020f 	and.w	r2, r3, #15
 8002b68:	4613      	mov	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	4413      	add	r3, r2
 8002b78:	3304      	adds	r3, #4
 8002b7a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	0c5b      	lsrs	r3, r3, #17
 8002b80:	f003 030f 	and.w	r3, r3, #15
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d124      	bne.n	8002bd2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002b8e:	4013      	ands	r3, r2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d035      	beq.n	8002c00 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	091b      	lsrs	r3, r3, #4
 8002b9c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	6a38      	ldr	r0, [r7, #32]
 8002ba8:	f003 fe10 	bl	80067cc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	091b      	lsrs	r3, r3, #4
 8002bb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bb8:	441a      	add	r2, r3
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	695a      	ldr	r2, [r3, #20]
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	091b      	lsrs	r3, r3, #4
 8002bc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bca:	441a      	add	r2, r3
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	615a      	str	r2, [r3, #20]
 8002bd0:	e016      	b.n	8002c00 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	0c5b      	lsrs	r3, r3, #17
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	2b06      	cmp	r3, #6
 8002bdc:	d110      	bne.n	8002c00 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002be4:	2208      	movs	r2, #8
 8002be6:	4619      	mov	r1, r3
 8002be8:	6a38      	ldr	r0, [r7, #32]
 8002bea:	f003 fdef 	bl	80067cc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	091b      	lsrs	r3, r3, #4
 8002bf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bfa:	441a      	add	r2, r3
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	699a      	ldr	r2, [r3, #24]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0210 	orr.w	r2, r2, #16
 8002c0e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f003 ff6d 	bl	8006af4 <USB_ReadInterrupts>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c20:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002c24:	f040 80a7 	bne.w	8002d76 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f003 ff72 	bl	8006b1a <USB_ReadDevAllOutEpInterrupt>
 8002c36:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002c38:	e099      	b.n	8002d6e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 808e 	beq.w	8002d62 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	4611      	mov	r1, r2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f003 ff96 	bl	8006b82 <USB_ReadDevOutEPInterrupt>
 8002c56:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00c      	beq.n	8002c7c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c64:	015a      	lsls	r2, r3, #5
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	4413      	add	r3, r2
 8002c6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c6e:	461a      	mov	r2, r3
 8002c70:	2301      	movs	r3, #1
 8002c72:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002c74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 fea4 	bl	80039c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	f003 0308 	and.w	r3, r3, #8
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00c      	beq.n	8002ca0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c88:	015a      	lsls	r2, r3, #5
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c92:	461a      	mov	r2, r3
 8002c94:	2308      	movs	r3, #8
 8002c96:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002c98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 ff7a 	bl	8003b94 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	f003 0310 	and.w	r3, r3, #16
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d008      	beq.n	8002cbc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cac:	015a      	lsls	r2, r3, #5
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	2310      	movs	r3, #16
 8002cba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d030      	beq.n	8002d28 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cce:	2b80      	cmp	r3, #128	@ 0x80
 8002cd0:	d109      	bne.n	8002ce6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	69fa      	ldr	r2, [r7, #28]
 8002cdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ce0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ce4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ce8:	4613      	mov	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	4413      	add	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	78db      	ldrb	r3, [r3, #3]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d108      	bne.n	8002d16 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	2200      	movs	r2, #0
 8002d08:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	4619      	mov	r1, r3
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f006 fb17 	bl	8009344 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d18:	015a      	lsls	r2, r3, #5
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d22:	461a      	mov	r2, r3
 8002d24:	2302      	movs	r3, #2
 8002d26:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f003 0320 	and.w	r3, r3, #32
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d008      	beq.n	8002d44 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d34:	015a      	lsls	r2, r3, #5
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	4413      	add	r3, r2
 8002d3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d3e:	461a      	mov	r2, r3
 8002d40:	2320      	movs	r3, #32
 8002d42:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d009      	beq.n	8002d62 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d50:	015a      	lsls	r2, r3, #5
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d60:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d64:	3301      	adds	r3, #1
 8002d66:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d6a:	085b      	lsrs	r3, r3, #1
 8002d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f47f af62 	bne.w	8002c3a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f003 feba 	bl	8006af4 <USB_ReadInterrupts>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d8a:	f040 80db 	bne.w	8002f44 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f003 fedb 	bl	8006b4e <USB_ReadDevAllInEpInterrupt>
 8002d98:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002d9e:	e0cd      	b.n	8002f3c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 80c2 	beq.w	8002f30 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	4611      	mov	r1, r2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f003 ff01 	bl	8006bbe <USB_ReadDevInEPInterrupt>
 8002dbc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d057      	beq.n	8002e78 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	2201      	movs	r2, #1
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ddc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69f9      	ldr	r1, [r7, #28]
 8002de4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002de8:	4013      	ands	r3, r2
 8002dea:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002df8:	461a      	mov	r2, r3
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	799b      	ldrb	r3, [r3, #6]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d132      	bne.n	8002e6c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	4413      	add	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	440b      	add	r3, r1
 8002e14:	3320      	adds	r3, #32
 8002e16:	6819      	ldr	r1, [r3, #0]
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4403      	add	r3, r0
 8002e26:	331c      	adds	r3, #28
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4419      	add	r1, r3
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e30:	4613      	mov	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4413      	add	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4403      	add	r3, r0
 8002e3a:	3320      	adds	r3, #32
 8002e3c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d113      	bne.n	8002e6c <HAL_PCD_IRQHandler+0x3a2>
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e48:	4613      	mov	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	3324      	adds	r3, #36	@ 0x24
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d108      	bne.n	8002e6c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6818      	ldr	r0, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e64:	461a      	mov	r2, r3
 8002e66:	2101      	movs	r1, #1
 8002e68:	f003 ff08 	bl	8006c7c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	4619      	mov	r1, r3
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f006 f9eb 	bl	800924e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d008      	beq.n	8002e94 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e84:	015a      	lsls	r2, r3, #5
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	4413      	add	r3, r2
 8002e8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e8e:	461a      	mov	r2, r3
 8002e90:	2308      	movs	r3, #8
 8002e92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	f003 0310 	and.w	r3, r3, #16
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d008      	beq.n	8002eb0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	015a      	lsls	r2, r3, #5
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002eaa:	461a      	mov	r2, r3
 8002eac:	2310      	movs	r3, #16
 8002eae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d008      	beq.n	8002ecc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	2340      	movs	r3, #64	@ 0x40
 8002eca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d023      	beq.n	8002f1e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002ed6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ed8:	6a38      	ldr	r0, [r7, #32]
 8002eda:	f002 feef 	bl	8005cbc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	4413      	add	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	3310      	adds	r3, #16
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	4413      	add	r3, r2
 8002eee:	3304      	adds	r3, #4
 8002ef0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	78db      	ldrb	r3, [r3, #3]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d108      	bne.n	8002f0c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2200      	movs	r2, #0
 8002efe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	4619      	mov	r1, r3
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f006 fa2e 	bl	8009368 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0e:	015a      	lsls	r2, r3, #5
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	4413      	add	r3, r2
 8002f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f18:	461a      	mov	r2, r3
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002f28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 fcbd 	bl	80038aa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f32:	3301      	adds	r3, #1
 8002f34:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f38:	085b      	lsrs	r3, r3, #1
 8002f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f47f af2e 	bne.w	8002da0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f003 fdd3 	bl	8006af4 <USB_ReadInterrupts>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002f54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f58:	d122      	bne.n	8002fa0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	69fa      	ldr	r2, [r7, #28]
 8002f64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f68:	f023 0301 	bic.w	r3, r3, #1
 8002f6c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d108      	bne.n	8002f8a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002f80:	2100      	movs	r1, #0
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 fea4 	bl	8003cd0 <HAL_PCDEx_LPM_Callback>
 8002f88:	e002      	b.n	8002f90 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f006 f9cc 	bl	8009328 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695a      	ldr	r2, [r3, #20]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002f9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f003 fda5 	bl	8006af4 <USB_ReadInterrupts>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fb4:	d112      	bne.n	8002fdc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d102      	bne.n	8002fcc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f006 f988 	bl	80092dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695a      	ldr	r2, [r3, #20]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002fda:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f003 fd87 	bl	8006af4 <USB_ReadInterrupts>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ff0:	f040 80b7 	bne.w	8003162 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	69fa      	ldr	r2, [r7, #28]
 8002ffe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003002:	f023 0301 	bic.w	r3, r3, #1
 8003006:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2110      	movs	r1, #16
 800300e:	4618      	mov	r0, r3
 8003010:	f002 fe54 	bl	8005cbc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003014:	2300      	movs	r3, #0
 8003016:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003018:	e046      	b.n	80030a8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800301a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	4413      	add	r3, r2
 8003022:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003026:	461a      	mov	r2, r3
 8003028:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800302c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800302e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003030:	015a      	lsls	r2, r3, #5
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	4413      	add	r3, r2
 8003036:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800303e:	0151      	lsls	r1, r2, #5
 8003040:	69fa      	ldr	r2, [r7, #28]
 8003042:	440a      	add	r2, r1
 8003044:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003048:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800304c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800304e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	4413      	add	r3, r2
 8003056:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800305a:	461a      	mov	r2, r3
 800305c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003060:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003064:	015a      	lsls	r2, r3, #5
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	4413      	add	r3, r2
 800306a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003072:	0151      	lsls	r1, r2, #5
 8003074:	69fa      	ldr	r2, [r7, #28]
 8003076:	440a      	add	r2, r1
 8003078:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800307c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003080:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003084:	015a      	lsls	r2, r3, #5
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	4413      	add	r3, r2
 800308a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003092:	0151      	lsls	r1, r2, #5
 8003094:	69fa      	ldr	r2, [r7, #28]
 8003096:	440a      	add	r2, r1
 8003098:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800309c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80030a0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030a4:	3301      	adds	r3, #1
 80030a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	791b      	ldrb	r3, [r3, #4]
 80030ac:	461a      	mov	r2, r3
 80030ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d3b2      	bcc.n	800301a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	69fa      	ldr	r2, [r7, #28]
 80030be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030c2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80030c6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	7bdb      	ldrb	r3, [r3, #15]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d016      	beq.n	80030fe <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030da:	69fa      	ldr	r2, [r7, #28]
 80030dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030e0:	f043 030b 	orr.w	r3, r3, #11
 80030e4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f0:	69fa      	ldr	r2, [r7, #28]
 80030f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030f6:	f043 030b 	orr.w	r3, r3, #11
 80030fa:	6453      	str	r3, [r2, #68]	@ 0x44
 80030fc:	e015      	b.n	800312a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	69fa      	ldr	r2, [r7, #28]
 8003108:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800310c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003110:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003114:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	69fa      	ldr	r2, [r7, #28]
 8003120:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003124:	f043 030b 	orr.w	r3, r3, #11
 8003128:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	69fa      	ldr	r2, [r7, #28]
 8003134:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003138:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800313c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800314c:	461a      	mov	r2, r3
 800314e:	f003 fd95 	bl	8006c7c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695a      	ldr	r2, [r3, #20]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003160:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f003 fcc4 	bl	8006af4 <USB_ReadInterrupts>
 800316c:	4603      	mov	r3, r0
 800316e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003172:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003176:	d123      	bne.n	80031c0 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f003 fd5a 	bl	8006c36 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f002 fe11 	bl	8005dae <USB_GetDevSpeed>
 800318c:	4603      	mov	r3, r0
 800318e:	461a      	mov	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681c      	ldr	r4, [r3, #0]
 8003198:	f001 f9ca 	bl	8004530 <HAL_RCC_GetHCLKFreq>
 800319c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031a2:	461a      	mov	r2, r3
 80031a4:	4620      	mov	r0, r4
 80031a6:	f002 fb15 	bl	80057d4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f006 f877 	bl	800929e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695a      	ldr	r2, [r3, #20]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80031be:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f003 fc95 	bl	8006af4 <USB_ReadInterrupts>
 80031ca:	4603      	mov	r3, r0
 80031cc:	f003 0308 	and.w	r3, r3, #8
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d10a      	bne.n	80031ea <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f006 f854 	bl	8009282 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695a      	ldr	r2, [r3, #20]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f002 0208 	and.w	r2, r2, #8
 80031e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f003 fc80 	bl	8006af4 <USB_ReadInterrupts>
 80031f4:	4603      	mov	r3, r0
 80031f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031fa:	2b80      	cmp	r3, #128	@ 0x80
 80031fc:	d123      	bne.n	8003246 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80031fe:	6a3b      	ldr	r3, [r7, #32]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800320a:	2301      	movs	r3, #1
 800320c:	627b      	str	r3, [r7, #36]	@ 0x24
 800320e:	e014      	b.n	800323a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003214:	4613      	mov	r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d105      	bne.n	8003234 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322a:	b2db      	uxtb	r3, r3
 800322c:	4619      	mov	r1, r3
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 fb0a 	bl	8003848 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003236:	3301      	adds	r3, #1
 8003238:	627b      	str	r3, [r7, #36]	@ 0x24
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	791b      	ldrb	r3, [r3, #4]
 800323e:	461a      	mov	r2, r3
 8003240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003242:	4293      	cmp	r3, r2
 8003244:	d3e4      	bcc.n	8003210 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f003 fc52 	bl	8006af4 <USB_ReadInterrupts>
 8003250:	4603      	mov	r3, r0
 8003252:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003256:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800325a:	d13c      	bne.n	80032d6 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800325c:	2301      	movs	r3, #1
 800325e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003260:	e02b      	b.n	80032ba <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003264:	015a      	lsls	r2, r3, #5
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	4413      	add	r3, r2
 800326a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003276:	4613      	mov	r3, r2
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	4413      	add	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	440b      	add	r3, r1
 8003280:	3318      	adds	r3, #24
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d115      	bne.n	80032b4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003288:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800328a:	2b00      	cmp	r3, #0
 800328c:	da12      	bge.n	80032b4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003292:	4613      	mov	r3, r2
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	4413      	add	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	3317      	adds	r3, #23
 800329e:	2201      	movs	r2, #1
 80032a0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80032a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	4619      	mov	r1, r3
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 faca 	bl	8003848 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b6:	3301      	adds	r3, #1
 80032b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	791b      	ldrb	r3, [r3, #4]
 80032be:	461a      	mov	r2, r3
 80032c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d3cd      	bcc.n	8003262 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695a      	ldr	r2, [r3, #20]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80032d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f003 fc0a 	bl	8006af4 <USB_ReadInterrupts>
 80032e0:	4603      	mov	r3, r0
 80032e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032ea:	d156      	bne.n	800339a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032ec:	2301      	movs	r3, #1
 80032ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80032f0:	e045      	b.n	800337e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80032f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f4:	015a      	lsls	r2, r3, #5
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003306:	4613      	mov	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	4413      	add	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d12e      	bne.n	8003378 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800331a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800331c:	2b00      	cmp	r3, #0
 800331e:	da2b      	bge.n	8003378 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800332c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003330:	429a      	cmp	r2, r3
 8003332:	d121      	bne.n	8003378 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003338:	4613      	mov	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003346:	2201      	movs	r2, #1
 8003348:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003356:	6a3b      	ldr	r3, [r7, #32]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10a      	bne.n	8003378 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	69fa      	ldr	r2, [r7, #28]
 800336c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003370:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003374:	6053      	str	r3, [r2, #4]
            break;
 8003376:	e008      	b.n	800338a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337a:	3301      	adds	r3, #1
 800337c:	627b      	str	r3, [r7, #36]	@ 0x24
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	791b      	ldrb	r3, [r3, #4]
 8003382:	461a      	mov	r2, r3
 8003384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003386:	4293      	cmp	r3, r2
 8003388:	d3b3      	bcc.n	80032f2 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695a      	ldr	r2, [r3, #20]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003398:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f003 fba8 	bl	8006af4 <USB_ReadInterrupts>
 80033a4:	4603      	mov	r3, r0
 80033a6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80033aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033ae:	d10a      	bne.n	80033c6 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f005 ffeb 	bl	800938c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695a      	ldr	r2, [r3, #20]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80033c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f003 fb92 	bl	8006af4 <USB_ReadInterrupts>
 80033d0:	4603      	mov	r3, r0
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d115      	bne.n	8003406 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d002      	beq.n	80033f2 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f005 ffdb 	bl	80093a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6859      	ldr	r1, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	430a      	orrs	r2, r1
 8003400:	605a      	str	r2, [r3, #4]
 8003402:	e000      	b.n	8003406 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003404:	bf00      	nop
    }
  }
}
 8003406:	3734      	adds	r7, #52	@ 0x34
 8003408:	46bd      	mov	sp, r7
 800340a:	bd90      	pop	{r4, r7, pc}

0800340c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	460b      	mov	r3, r1
 8003416:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_PCD_SetAddress+0x1a>
 8003422:	2302      	movs	r3, #2
 8003424:	e012      	b.n	800344c <HAL_PCD_SetAddress+0x40>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	78fa      	ldrb	r2, [r7, #3]
 8003432:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	78fa      	ldrb	r2, [r7, #3]
 800343a:	4611      	mov	r1, r2
 800343c:	4618      	mov	r0, r3
 800343e:	f003 faf1 	bl	8006a24 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	4608      	mov	r0, r1
 800345e:	4611      	mov	r1, r2
 8003460:	461a      	mov	r2, r3
 8003462:	4603      	mov	r3, r0
 8003464:	70fb      	strb	r3, [r7, #3]
 8003466:	460b      	mov	r3, r1
 8003468:	803b      	strh	r3, [r7, #0]
 800346a:	4613      	mov	r3, r2
 800346c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800346e:	2300      	movs	r3, #0
 8003470:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003472:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003476:	2b00      	cmp	r3, #0
 8003478:	da0f      	bge.n	800349a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800347a:	78fb      	ldrb	r3, [r7, #3]
 800347c:	f003 020f 	and.w	r2, r3, #15
 8003480:	4613      	mov	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4413      	add	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	3310      	adds	r3, #16
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	4413      	add	r3, r2
 800348e:	3304      	adds	r3, #4
 8003490:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2201      	movs	r2, #1
 8003496:	705a      	strb	r2, [r3, #1]
 8003498:	e00f      	b.n	80034ba <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800349a:	78fb      	ldrb	r3, [r7, #3]
 800349c:	f003 020f 	and.w	r2, r3, #15
 80034a0:	4613      	mov	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	4413      	add	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	4413      	add	r3, r2
 80034b0:	3304      	adds	r3, #4
 80034b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034ba:	78fb      	ldrb	r3, [r7, #3]
 80034bc:	f003 030f 	and.w	r3, r3, #15
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80034c6:	883b      	ldrh	r3, [r7, #0]
 80034c8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	78ba      	ldrb	r2, [r7, #2]
 80034d4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	785b      	ldrb	r3, [r3, #1]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d004      	beq.n	80034e8 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	461a      	mov	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80034e8:	78bb      	ldrb	r3, [r7, #2]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d102      	bne.n	80034f4 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d101      	bne.n	8003502 <HAL_PCD_EP_Open+0xae>
 80034fe:	2302      	movs	r3, #2
 8003500:	e00e      	b.n	8003520 <HAL_PCD_EP_Open+0xcc>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68f9      	ldr	r1, [r7, #12]
 8003510:	4618      	mov	r0, r3
 8003512:	f002 fc71 	bl	8005df8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800351e:	7afb      	ldrb	r3, [r7, #11]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	460b      	mov	r3, r1
 8003532:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003534:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003538:	2b00      	cmp	r3, #0
 800353a:	da0f      	bge.n	800355c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	f003 020f 	and.w	r2, r3, #15
 8003542:	4613      	mov	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	3310      	adds	r3, #16
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	4413      	add	r3, r2
 8003550:	3304      	adds	r3, #4
 8003552:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2201      	movs	r2, #1
 8003558:	705a      	strb	r2, [r3, #1]
 800355a:	e00f      	b.n	800357c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800355c:	78fb      	ldrb	r3, [r7, #3]
 800355e:	f003 020f 	and.w	r2, r3, #15
 8003562:	4613      	mov	r3, r2
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	4413      	add	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	4413      	add	r3, r2
 8003572:	3304      	adds	r3, #4
 8003574:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800357c:	78fb      	ldrb	r3, [r7, #3]
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	b2da      	uxtb	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800358e:	2b01      	cmp	r3, #1
 8003590:	d101      	bne.n	8003596 <HAL_PCD_EP_Close+0x6e>
 8003592:	2302      	movs	r3, #2
 8003594:	e00e      	b.n	80035b4 <HAL_PCD_EP_Close+0x8c>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68f9      	ldr	r1, [r7, #12]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f002 fcaf 	bl	8005f08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	607a      	str	r2, [r7, #4]
 80035c6:	603b      	str	r3, [r7, #0]
 80035c8:	460b      	mov	r3, r1
 80035ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035cc:	7afb      	ldrb	r3, [r7, #11]
 80035ce:	f003 020f 	and.w	r2, r3, #15
 80035d2:	4613      	mov	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	4413      	add	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	4413      	add	r3, r2
 80035e2:	3304      	adds	r3, #4
 80035e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2200      	movs	r2, #0
 80035f6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	2200      	movs	r2, #0
 80035fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035fe:	7afb      	ldrb	r3, [r7, #11]
 8003600:	f003 030f 	and.w	r3, r3, #15
 8003604:	b2da      	uxtb	r2, r3
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	799b      	ldrb	r3, [r3, #6]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d102      	bne.n	8003618 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6818      	ldr	r0, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	799b      	ldrb	r3, [r3, #6]
 8003620:	461a      	mov	r2, r3
 8003622:	6979      	ldr	r1, [r7, #20]
 8003624:	f002 fd4c 	bl	80060c0 <USB_EPStartXfer>

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
 800363a:	460b      	mov	r3, r1
 800363c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800363e:	78fb      	ldrb	r3, [r7, #3]
 8003640:	f003 020f 	and.w	r2, r3, #15
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	4413      	add	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003654:	681b      	ldr	r3, [r3, #0]
}
 8003656:	4618      	mov	r0, r3
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b086      	sub	sp, #24
 8003666:	af00      	add	r7, sp, #0
 8003668:	60f8      	str	r0, [r7, #12]
 800366a:	607a      	str	r2, [r7, #4]
 800366c:	603b      	str	r3, [r7, #0]
 800366e:	460b      	mov	r3, r1
 8003670:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003672:	7afb      	ldrb	r3, [r7, #11]
 8003674:	f003 020f 	and.w	r2, r3, #15
 8003678:	4613      	mov	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	3310      	adds	r3, #16
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	4413      	add	r3, r2
 8003686:	3304      	adds	r3, #4
 8003688:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2200      	movs	r2, #0
 800369a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	2201      	movs	r2, #1
 80036a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036a2:	7afb      	ldrb	r3, [r7, #11]
 80036a4:	f003 030f 	and.w	r3, r3, #15
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	799b      	ldrb	r3, [r3, #6]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d102      	bne.n	80036bc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6818      	ldr	r0, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	799b      	ldrb	r3, [r3, #6]
 80036c4:	461a      	mov	r2, r3
 80036c6:	6979      	ldr	r1, [r7, #20]
 80036c8:	f002 fcfa 	bl	80060c0 <USB_EPStartXfer>

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	460b      	mov	r3, r1
 80036e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80036e2:	78fb      	ldrb	r3, [r7, #3]
 80036e4:	f003 030f 	and.w	r3, r3, #15
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	7912      	ldrb	r2, [r2, #4]
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d901      	bls.n	80036f4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e04f      	b.n	8003794 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	da0f      	bge.n	800371c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036fc:	78fb      	ldrb	r3, [r7, #3]
 80036fe:	f003 020f 	and.w	r2, r3, #15
 8003702:	4613      	mov	r3, r2
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4413      	add	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	3310      	adds	r3, #16
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	4413      	add	r3, r2
 8003710:	3304      	adds	r3, #4
 8003712:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2201      	movs	r2, #1
 8003718:	705a      	strb	r2, [r3, #1]
 800371a:	e00d      	b.n	8003738 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800371c:	78fa      	ldrb	r2, [r7, #3]
 800371e:	4613      	mov	r3, r2
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	4413      	add	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	4413      	add	r3, r2
 800372e:	3304      	adds	r3, #4
 8003730:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2201      	movs	r2, #1
 800373c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800373e:	78fb      	ldrb	r3, [r7, #3]
 8003740:	f003 030f 	and.w	r3, r3, #15
 8003744:	b2da      	uxtb	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003750:	2b01      	cmp	r3, #1
 8003752:	d101      	bne.n	8003758 <HAL_PCD_EP_SetStall+0x82>
 8003754:	2302      	movs	r3, #2
 8003756:	e01d      	b.n	8003794 <HAL_PCD_EP_SetStall+0xbe>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68f9      	ldr	r1, [r7, #12]
 8003766:	4618      	mov	r0, r3
 8003768:	f003 f888 	bl	800687c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800376c:	78fb      	ldrb	r3, [r7, #3]
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6818      	ldr	r0, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	7999      	ldrb	r1, [r3, #6]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003784:	461a      	mov	r2, r3
 8003786:	f003 fa79 	bl	8006c7c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80037a8:	78fb      	ldrb	r3, [r7, #3]
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	7912      	ldrb	r2, [r2, #4]
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d901      	bls.n	80037ba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e042      	b.n	8003840 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	da0f      	bge.n	80037e2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037c2:	78fb      	ldrb	r3, [r7, #3]
 80037c4:	f003 020f 	and.w	r2, r3, #15
 80037c8:	4613      	mov	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	4413      	add	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	3310      	adds	r3, #16
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	4413      	add	r3, r2
 80037d6:	3304      	adds	r3, #4
 80037d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2201      	movs	r2, #1
 80037de:	705a      	strb	r2, [r3, #1]
 80037e0:	e00f      	b.n	8003802 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037e2:	78fb      	ldrb	r3, [r7, #3]
 80037e4:	f003 020f 	and.w	r2, r3, #15
 80037e8:	4613      	mov	r3, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	4413      	add	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	4413      	add	r3, r2
 80037f8:	3304      	adds	r3, #4
 80037fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003808:	78fb      	ldrb	r3, [r7, #3]
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	b2da      	uxtb	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_PCD_EP_ClrStall+0x86>
 800381e:	2302      	movs	r3, #2
 8003820:	e00e      	b.n	8003840 <HAL_PCD_EP_ClrStall+0xa4>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68f9      	ldr	r1, [r7, #12]
 8003830:	4618      	mov	r0, r3
 8003832:	f003 f891 	bl	8006958 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	460b      	mov	r3, r1
 8003852:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003854:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003858:	2b00      	cmp	r3, #0
 800385a:	da0c      	bge.n	8003876 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800385c:	78fb      	ldrb	r3, [r7, #3]
 800385e:	f003 020f 	and.w	r2, r3, #15
 8003862:	4613      	mov	r3, r2
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	4413      	add	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	3310      	adds	r3, #16
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	4413      	add	r3, r2
 8003870:	3304      	adds	r3, #4
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	e00c      	b.n	8003890 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003876:	78fb      	ldrb	r3, [r7, #3]
 8003878:	f003 020f 	and.w	r2, r3, #15
 800387c:	4613      	mov	r3, r2
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	4413      	add	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	4413      	add	r3, r2
 800388c:	3304      	adds	r3, #4
 800388e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68f9      	ldr	r1, [r7, #12]
 8003896:	4618      	mov	r0, r3
 8003898:	f002 feb0 	bl	80065fc <USB_EPStopXfer>
 800389c:	4603      	mov	r3, r0
 800389e:	72fb      	strb	r3, [r7, #11]

  return ret;
 80038a0:	7afb      	ldrb	r3, [r7, #11]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b08a      	sub	sp, #40	@ 0x28
 80038ae:	af02      	add	r7, sp, #8
 80038b0:	6078      	str	r0, [r7, #4]
 80038b2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	4613      	mov	r3, r2
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	4413      	add	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	3310      	adds	r3, #16
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	4413      	add	r3, r2
 80038ce:	3304      	adds	r3, #4
 80038d0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	695a      	ldr	r2, [r3, #20]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d901      	bls.n	80038e2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e06b      	b.n	80039ba <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	691a      	ldr	r2, [r3, #16]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	69fa      	ldr	r2, [r7, #28]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d902      	bls.n	80038fe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	3303      	adds	r3, #3
 8003902:	089b      	lsrs	r3, r3, #2
 8003904:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003906:	e02a      	b.n	800395e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	691a      	ldr	r2, [r3, #16]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	69fa      	ldr	r2, [r7, #28]
 800391a:	429a      	cmp	r2, r3
 800391c:	d902      	bls.n	8003924 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	3303      	adds	r3, #3
 8003928:	089b      	lsrs	r3, r3, #2
 800392a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	68d9      	ldr	r1, [r3, #12]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	b2da      	uxtb	r2, r3
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	4603      	mov	r3, r0
 8003940:	6978      	ldr	r0, [r7, #20]
 8003942:	f002 ff05 	bl	8006750 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	441a      	add	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	695a      	ldr	r2, [r3, #20]
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	441a      	add	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	4413      	add	r3, r2
 8003966:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	429a      	cmp	r2, r3
 8003972:	d809      	bhi.n	8003988 <PCD_WriteEmptyTxFifo+0xde>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	695a      	ldr	r2, [r3, #20]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800397c:	429a      	cmp	r2, r3
 800397e:	d203      	bcs.n	8003988 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1bf      	bne.n	8003908 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	429a      	cmp	r2, r3
 8003992:	d811      	bhi.n	80039b8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	2201      	movs	r2, #1
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	43db      	mvns	r3, r3
 80039ae:	6939      	ldr	r1, [r7, #16]
 80039b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80039b4:	4013      	ands	r3, r2
 80039b6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3720      	adds	r7, #32
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
	...

080039c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b088      	sub	sp, #32
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	333c      	adds	r3, #60	@ 0x3c
 80039dc:	3304      	adds	r3, #4
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	015a      	lsls	r2, r3, #5
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	4413      	add	r3, r2
 80039ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	799b      	ldrb	r3, [r3, #6]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d17b      	bne.n	8003af2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d015      	beq.n	8003a30 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	4a61      	ldr	r2, [pc, #388]	@ (8003b8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	f240 80b9 	bls.w	8003b80 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 80b3 	beq.w	8003b80 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	015a      	lsls	r2, r3, #5
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	4413      	add	r3, r2
 8003a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a26:	461a      	mov	r2, r3
 8003a28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a2c:	6093      	str	r3, [r2, #8]
 8003a2e:	e0a7      	b.n	8003b80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d009      	beq.n	8003a4e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	015a      	lsls	r2, r3, #5
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	4413      	add	r3, r2
 8003a42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a46:	461a      	mov	r2, r3
 8003a48:	2320      	movs	r3, #32
 8003a4a:	6093      	str	r3, [r2, #8]
 8003a4c:	e098      	b.n	8003b80 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f040 8093 	bne.w	8003b80 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	4a4b      	ldr	r2, [pc, #300]	@ (8003b8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d90f      	bls.n	8003a82 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a78:	461a      	mov	r2, r3
 8003a7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a7e:	6093      	str	r3, [r2, #8]
 8003a80:	e07e      	b.n	8003b80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	4613      	mov	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4413      	add	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	4413      	add	r3, r2
 8003a94:	3304      	adds	r3, #4
 8003a96:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a1a      	ldr	r2, [r3, #32]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	0159      	lsls	r1, r3, #5
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	440b      	add	r3, r1
 8003aa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aae:	1ad2      	subs	r2, r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d114      	bne.n	8003ae4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d109      	bne.n	8003ad6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6818      	ldr	r0, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003acc:	461a      	mov	r2, r3
 8003ace:	2101      	movs	r1, #1
 8003ad0:	f003 f8d4 	bl	8006c7c <USB_EP0_OutStart>
 8003ad4:	e006      	b.n	8003ae4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	441a      	add	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	4619      	mov	r1, r3
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f005 fb94 	bl	8009218 <HAL_PCD_DataOutStageCallback>
 8003af0:	e046      	b.n	8003b80 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	4a26      	ldr	r2, [pc, #152]	@ (8003b90 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d124      	bne.n	8003b44 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00a      	beq.n	8003b1a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	015a      	lsls	r2, r3, #5
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b10:	461a      	mov	r2, r3
 8003b12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b16:	6093      	str	r3, [r2, #8]
 8003b18:	e032      	b.n	8003b80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f003 0320 	and.w	r3, r3, #32
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d008      	beq.n	8003b36 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	015a      	lsls	r2, r3, #5
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b30:	461a      	mov	r2, r3
 8003b32:	2320      	movs	r3, #32
 8003b34:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f005 fb6b 	bl	8009218 <HAL_PCD_DataOutStageCallback>
 8003b42:	e01d      	b.n	8003b80 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d114      	bne.n	8003b74 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	4413      	add	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d108      	bne.n	8003b74 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6818      	ldr	r0, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	2100      	movs	r1, #0
 8003b70:	f003 f884 	bl	8006c7c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	4619      	mov	r1, r3
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f005 fb4c 	bl	8009218 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3720      	adds	r7, #32
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	4f54300a 	.word	0x4f54300a
 8003b90:	4f54310a 	.word	0x4f54310a

08003b94 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	333c      	adds	r3, #60	@ 0x3c
 8003bac:	3304      	adds	r3, #4
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4a15      	ldr	r2, [pc, #84]	@ (8003c1c <PCD_EP_OutSetupPacket_int+0x88>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d90e      	bls.n	8003be8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d009      	beq.n	8003be8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003be0:	461a      	mov	r2, r3
 8003be2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003be6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f005 fb03 	bl	80091f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8003c1c <PCD_EP_OutSetupPacket_int+0x88>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d90c      	bls.n	8003c10 <PCD_EP_OutSetupPacket_int+0x7c>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	799b      	ldrb	r3, [r3, #6]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d108      	bne.n	8003c10 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6818      	ldr	r0, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c08:	461a      	mov	r2, r3
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	f003 f836 	bl	8006c7c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3718      	adds	r7, #24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	4f54300a 	.word	0x4f54300a

08003c20 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	70fb      	strb	r3, [r7, #3]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c36:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d107      	bne.n	8003c4e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c3e:	883b      	ldrh	r3, [r7, #0]
 8003c40:	0419      	lsls	r1, r3, #16
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c4c:	e028      	b.n	8003ca0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c54:	0c1b      	lsrs	r3, r3, #16
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	4413      	add	r3, r2
 8003c5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	73fb      	strb	r3, [r7, #15]
 8003c60:	e00d      	b.n	8003c7e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	7bfb      	ldrb	r3, [r7, #15]
 8003c68:	3340      	adds	r3, #64	@ 0x40
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	0c1b      	lsrs	r3, r3, #16
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	4413      	add	r3, r2
 8003c76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	73fb      	strb	r3, [r7, #15]
 8003c7e:	7bfa      	ldrb	r2, [r7, #15]
 8003c80:	78fb      	ldrb	r3, [r7, #3]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d3ec      	bcc.n	8003c62 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003c88:	883b      	ldrh	r3, [r7, #0]
 8003c8a:	0418      	lsls	r0, r3, #16
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6819      	ldr	r1, [r3, #0]
 8003c90:	78fb      	ldrb	r3, [r7, #3]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	4302      	orrs	r2, r0
 8003c98:	3340      	adds	r3, #64	@ 0x40
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	887a      	ldrh	r2, [r7, #2]
 8003cc0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e267      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d075      	beq.n	8003df2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d06:	4b88      	ldr	r3, [pc, #544]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 030c 	and.w	r3, r3, #12
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d00c      	beq.n	8003d2c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d12:	4b85      	ldr	r3, [pc, #532]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d1a:	2b08      	cmp	r3, #8
 8003d1c:	d112      	bne.n	8003d44 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d1e:	4b82      	ldr	r3, [pc, #520]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d2a:	d10b      	bne.n	8003d44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d2c:	4b7e      	ldr	r3, [pc, #504]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d05b      	beq.n	8003df0 <HAL_RCC_OscConfig+0x108>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d157      	bne.n	8003df0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e242      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d4c:	d106      	bne.n	8003d5c <HAL_RCC_OscConfig+0x74>
 8003d4e:	4b76      	ldr	r3, [pc, #472]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a75      	ldr	r2, [pc, #468]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	e01d      	b.n	8003d98 <HAL_RCC_OscConfig+0xb0>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCC_OscConfig+0x98>
 8003d66:	4b70      	ldr	r3, [pc, #448]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a6f      	ldr	r2, [pc, #444]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	4b6d      	ldr	r3, [pc, #436]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a6c      	ldr	r2, [pc, #432]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	e00b      	b.n	8003d98 <HAL_RCC_OscConfig+0xb0>
 8003d80:	4b69      	ldr	r3, [pc, #420]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a68      	ldr	r2, [pc, #416]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d8a:	6013      	str	r3, [r2, #0]
 8003d8c:	4b66      	ldr	r3, [pc, #408]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a65      	ldr	r2, [pc, #404]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003d92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d013      	beq.n	8003dc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da0:	f7fe f9fe 	bl	80021a0 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da8:	f7fe f9fa 	bl	80021a0 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b64      	cmp	r3, #100	@ 0x64
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e207      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dba:	4b5b      	ldr	r3, [pc, #364]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0f0      	beq.n	8003da8 <HAL_RCC_OscConfig+0xc0>
 8003dc6:	e014      	b.n	8003df2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc8:	f7fe f9ea 	bl	80021a0 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd0:	f7fe f9e6 	bl	80021a0 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b64      	cmp	r3, #100	@ 0x64
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e1f3      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003de2:	4b51      	ldr	r3, [pc, #324]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0xe8>
 8003dee:	e000      	b.n	8003df2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d063      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003dfe:	4b4a      	ldr	r3, [pc, #296]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 030c 	and.w	r3, r3, #12
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00b      	beq.n	8003e22 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e0a:	4b47      	ldr	r3, [pc, #284]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d11c      	bne.n	8003e50 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e16:	4b44      	ldr	r3, [pc, #272]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d116      	bne.n	8003e50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e22:	4b41      	ldr	r3, [pc, #260]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <HAL_RCC_OscConfig+0x152>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d001      	beq.n	8003e3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e1c7      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e3a:	4b3b      	ldr	r3, [pc, #236]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	4937      	ldr	r1, [pc, #220]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e4e:	e03a      	b.n	8003ec6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d020      	beq.n	8003e9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e58:	4b34      	ldr	r3, [pc, #208]	@ (8003f2c <HAL_RCC_OscConfig+0x244>)
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5e:	f7fe f99f 	bl	80021a0 <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e66:	f7fe f99b 	bl	80021a0 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e1a8      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e78:	4b2b      	ldr	r3, [pc, #172]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0f0      	beq.n	8003e66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e84:	4b28      	ldr	r3, [pc, #160]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	4925      	ldr	r1, [pc, #148]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	600b      	str	r3, [r1, #0]
 8003e98:	e015      	b.n	8003ec6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e9a:	4b24      	ldr	r3, [pc, #144]	@ (8003f2c <HAL_RCC_OscConfig+0x244>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea0:	f7fe f97e 	bl	80021a0 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ea8:	f7fe f97a 	bl	80021a0 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e187      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eba:	4b1b      	ldr	r3, [pc, #108]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f0      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0308 	and.w	r3, r3, #8
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d036      	beq.n	8003f40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d016      	beq.n	8003f08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eda:	4b15      	ldr	r3, [pc, #84]	@ (8003f30 <HAL_RCC_OscConfig+0x248>)
 8003edc:	2201      	movs	r2, #1
 8003ede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee0:	f7fe f95e 	bl	80021a0 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ee8:	f7fe f95a 	bl	80021a0 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e167      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003efa:	4b0b      	ldr	r3, [pc, #44]	@ (8003f28 <HAL_RCC_OscConfig+0x240>)
 8003efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0f0      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x200>
 8003f06:	e01b      	b.n	8003f40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f08:	4b09      	ldr	r3, [pc, #36]	@ (8003f30 <HAL_RCC_OscConfig+0x248>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f0e:	f7fe f947 	bl	80021a0 <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f14:	e00e      	b.n	8003f34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f16:	f7fe f943 	bl	80021a0 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d907      	bls.n	8003f34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e150      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	42470000 	.word	0x42470000
 8003f30:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f34:	4b88      	ldr	r3, [pc, #544]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8003f36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1ea      	bne.n	8003f16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 8097 	beq.w	800407c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f52:	4b81      	ldr	r3, [pc, #516]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8003f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10f      	bne.n	8003f7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60bb      	str	r3, [r7, #8]
 8003f62:	4b7d      	ldr	r3, [pc, #500]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f66:	4a7c      	ldr	r2, [pc, #496]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8003f68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f6e:	4b7a      	ldr	r3, [pc, #488]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8003f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f76:	60bb      	str	r3, [r7, #8]
 8003f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7e:	4b77      	ldr	r3, [pc, #476]	@ (800415c <HAL_RCC_OscConfig+0x474>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d118      	bne.n	8003fbc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f8a:	4b74      	ldr	r3, [pc, #464]	@ (800415c <HAL_RCC_OscConfig+0x474>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a73      	ldr	r2, [pc, #460]	@ (800415c <HAL_RCC_OscConfig+0x474>)
 8003f90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f96:	f7fe f903 	bl	80021a0 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f9e:	f7fe f8ff 	bl	80021a0 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e10c      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb0:	4b6a      	ldr	r3, [pc, #424]	@ (800415c <HAL_RCC_OscConfig+0x474>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0f0      	beq.n	8003f9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d106      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x2ea>
 8003fc4:	4b64      	ldr	r3, [pc, #400]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8003fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc8:	4a63      	ldr	r2, [pc, #396]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8003fca:	f043 0301 	orr.w	r3, r3, #1
 8003fce:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fd0:	e01c      	b.n	800400c <HAL_RCC_OscConfig+0x324>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	2b05      	cmp	r3, #5
 8003fd8:	d10c      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x30c>
 8003fda:	4b5f      	ldr	r3, [pc, #380]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fde:	4a5e      	ldr	r2, [pc, #376]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8003fe0:	f043 0304 	orr.w	r3, r3, #4
 8003fe4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fe6:	4b5c      	ldr	r3, [pc, #368]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8003fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fea:	4a5b      	ldr	r2, [pc, #364]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ff2:	e00b      	b.n	800400c <HAL_RCC_OscConfig+0x324>
 8003ff4:	4b58      	ldr	r3, [pc, #352]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8003ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff8:	4a57      	ldr	r2, [pc, #348]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8003ffa:	f023 0301 	bic.w	r3, r3, #1
 8003ffe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004000:	4b55      	ldr	r3, [pc, #340]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8004002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004004:	4a54      	ldr	r2, [pc, #336]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8004006:	f023 0304 	bic.w	r3, r3, #4
 800400a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d015      	beq.n	8004040 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004014:	f7fe f8c4 	bl	80021a0 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800401a:	e00a      	b.n	8004032 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800401c:	f7fe f8c0 	bl	80021a0 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800402a:	4293      	cmp	r3, r2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e0cb      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004032:	4b49      	ldr	r3, [pc, #292]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8004034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0ee      	beq.n	800401c <HAL_RCC_OscConfig+0x334>
 800403e:	e014      	b.n	800406a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004040:	f7fe f8ae 	bl	80021a0 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004046:	e00a      	b.n	800405e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004048:	f7fe f8aa 	bl	80021a0 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004056:	4293      	cmp	r3, r2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e0b5      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800405e:	4b3e      	ldr	r3, [pc, #248]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8004060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1ee      	bne.n	8004048 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800406a:	7dfb      	ldrb	r3, [r7, #23]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d105      	bne.n	800407c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004070:	4b39      	ldr	r3, [pc, #228]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8004072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004074:	4a38      	ldr	r2, [pc, #224]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8004076:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800407a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 80a1 	beq.w	80041c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004086:	4b34      	ldr	r3, [pc, #208]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 030c 	and.w	r3, r3, #12
 800408e:	2b08      	cmp	r3, #8
 8004090:	d05c      	beq.n	800414c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	2b02      	cmp	r3, #2
 8004098:	d141      	bne.n	800411e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800409a:	4b31      	ldr	r3, [pc, #196]	@ (8004160 <HAL_RCC_OscConfig+0x478>)
 800409c:	2200      	movs	r2, #0
 800409e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a0:	f7fe f87e 	bl	80021a0 <HAL_GetTick>
 80040a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a6:	e008      	b.n	80040ba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a8:	f7fe f87a 	bl	80021a0 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e087      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ba:	4b27      	ldr	r3, [pc, #156]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1f0      	bne.n	80040a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69da      	ldr	r2, [r3, #28]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d4:	019b      	lsls	r3, r3, #6
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040dc:	085b      	lsrs	r3, r3, #1
 80040de:	3b01      	subs	r3, #1
 80040e0:	041b      	lsls	r3, r3, #16
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e8:	061b      	lsls	r3, r3, #24
 80040ea:	491b      	ldr	r1, [pc, #108]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004160 <HAL_RCC_OscConfig+0x478>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f6:	f7fe f853 	bl	80021a0 <HAL_GetTick>
 80040fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040fc:	e008      	b.n	8004110 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040fe:	f7fe f84f 	bl	80021a0 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e05c      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004110:	4b11      	ldr	r3, [pc, #68]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0f0      	beq.n	80040fe <HAL_RCC_OscConfig+0x416>
 800411c:	e054      	b.n	80041c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800411e:	4b10      	ldr	r3, [pc, #64]	@ (8004160 <HAL_RCC_OscConfig+0x478>)
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004124:	f7fe f83c 	bl	80021a0 <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800412c:	f7fe f838 	bl	80021a0 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e045      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800413e:	4b06      	ldr	r3, [pc, #24]	@ (8004158 <HAL_RCC_OscConfig+0x470>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1f0      	bne.n	800412c <HAL_RCC_OscConfig+0x444>
 800414a:	e03d      	b.n	80041c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d107      	bne.n	8004164 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e038      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
 8004158:	40023800 	.word	0x40023800
 800415c:	40007000 	.word	0x40007000
 8004160:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004164:	4b1b      	ldr	r3, [pc, #108]	@ (80041d4 <HAL_RCC_OscConfig+0x4ec>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d028      	beq.n	80041c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800417c:	429a      	cmp	r2, r3
 800417e:	d121      	bne.n	80041c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800418a:	429a      	cmp	r2, r3
 800418c:	d11a      	bne.n	80041c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004194:	4013      	ands	r3, r2
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800419a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800419c:	4293      	cmp	r3, r2
 800419e:	d111      	bne.n	80041c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041aa:	085b      	lsrs	r3, r3, #1
 80041ac:	3b01      	subs	r3, #1
 80041ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d107      	bne.n	80041c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d001      	beq.n	80041c8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e000      	b.n	80041ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3718      	adds	r7, #24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	40023800 	.word	0x40023800

080041d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e0cc      	b.n	8004386 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041ec:	4b68      	ldr	r3, [pc, #416]	@ (8004390 <HAL_RCC_ClockConfig+0x1b8>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d90c      	bls.n	8004214 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fa:	4b65      	ldr	r3, [pc, #404]	@ (8004390 <HAL_RCC_ClockConfig+0x1b8>)
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004202:	4b63      	ldr	r3, [pc, #396]	@ (8004390 <HAL_RCC_ClockConfig+0x1b8>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d001      	beq.n	8004214 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e0b8      	b.n	8004386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d020      	beq.n	8004262 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800422c:	4b59      	ldr	r3, [pc, #356]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	4a58      	ldr	r2, [pc, #352]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 8004232:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004236:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0308 	and.w	r3, r3, #8
 8004240:	2b00      	cmp	r3, #0
 8004242:	d005      	beq.n	8004250 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004244:	4b53      	ldr	r3, [pc, #332]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	4a52      	ldr	r2, [pc, #328]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 800424a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800424e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004250:	4b50      	ldr	r3, [pc, #320]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	494d      	ldr	r1, [pc, #308]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	4313      	orrs	r3, r2
 8004260:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d044      	beq.n	80042f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d107      	bne.n	8004286 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004276:	4b47      	ldr	r3, [pc, #284]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d119      	bne.n	80042b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e07f      	b.n	8004386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b02      	cmp	r3, #2
 800428c:	d003      	beq.n	8004296 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004292:	2b03      	cmp	r3, #3
 8004294:	d107      	bne.n	80042a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004296:	4b3f      	ldr	r3, [pc, #252]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d109      	bne.n	80042b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e06f      	b.n	8004386 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a6:	4b3b      	ldr	r3, [pc, #236]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e067      	b.n	8004386 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042b6:	4b37      	ldr	r3, [pc, #220]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f023 0203 	bic.w	r2, r3, #3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	4934      	ldr	r1, [pc, #208]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042c8:	f7fd ff6a 	bl	80021a0 <HAL_GetTick>
 80042cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ce:	e00a      	b.n	80042e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042d0:	f7fd ff66 	bl	80021a0 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042de:	4293      	cmp	r3, r2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e04f      	b.n	8004386 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e6:	4b2b      	ldr	r3, [pc, #172]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 020c 	and.w	r2, r3, #12
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d1eb      	bne.n	80042d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042f8:	4b25      	ldr	r3, [pc, #148]	@ (8004390 <HAL_RCC_ClockConfig+0x1b8>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	429a      	cmp	r2, r3
 8004304:	d20c      	bcs.n	8004320 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004306:	4b22      	ldr	r3, [pc, #136]	@ (8004390 <HAL_RCC_ClockConfig+0x1b8>)
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800430e:	4b20      	ldr	r3, [pc, #128]	@ (8004390 <HAL_RCC_ClockConfig+0x1b8>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	429a      	cmp	r2, r3
 800431a:	d001      	beq.n	8004320 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e032      	b.n	8004386 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d008      	beq.n	800433e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800432c:	4b19      	ldr	r3, [pc, #100]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	4916      	ldr	r1, [pc, #88]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 800433a:	4313      	orrs	r3, r2
 800433c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	2b00      	cmp	r3, #0
 8004348:	d009      	beq.n	800435e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800434a:	4b12      	ldr	r3, [pc, #72]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	490e      	ldr	r1, [pc, #56]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	4313      	orrs	r3, r2
 800435c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800435e:	f000 f821 	bl	80043a4 <HAL_RCC_GetSysClockFreq>
 8004362:	4602      	mov	r2, r0
 8004364:	4b0b      	ldr	r3, [pc, #44]	@ (8004394 <HAL_RCC_ClockConfig+0x1bc>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	091b      	lsrs	r3, r3, #4
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	490a      	ldr	r1, [pc, #40]	@ (8004398 <HAL_RCC_ClockConfig+0x1c0>)
 8004370:	5ccb      	ldrb	r3, [r1, r3]
 8004372:	fa22 f303 	lsr.w	r3, r2, r3
 8004376:	4a09      	ldr	r2, [pc, #36]	@ (800439c <HAL_RCC_ClockConfig+0x1c4>)
 8004378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800437a:	4b09      	ldr	r3, [pc, #36]	@ (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f7fd feca 	bl	8002118 <HAL_InitTick>

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	40023c00 	.word	0x40023c00
 8004394:	40023800 	.word	0x40023800
 8004398:	0800a2c4 	.word	0x0800a2c4
 800439c:	20000000 	.word	0x20000000
 80043a0:	20000004 	.word	0x20000004

080043a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043a8:	b090      	sub	sp, #64	@ 0x40
 80043aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80043b4:	2300      	movs	r3, #0
 80043b6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043bc:	4b59      	ldr	r3, [pc, #356]	@ (8004524 <HAL_RCC_GetSysClockFreq+0x180>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f003 030c 	and.w	r3, r3, #12
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	d00d      	beq.n	80043e4 <HAL_RCC_GetSysClockFreq+0x40>
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	f200 80a1 	bhi.w	8004510 <HAL_RCC_GetSysClockFreq+0x16c>
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <HAL_RCC_GetSysClockFreq+0x34>
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	d003      	beq.n	80043de <HAL_RCC_GetSysClockFreq+0x3a>
 80043d6:	e09b      	b.n	8004510 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043d8:	4b53      	ldr	r3, [pc, #332]	@ (8004528 <HAL_RCC_GetSysClockFreq+0x184>)
 80043da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043dc:	e09b      	b.n	8004516 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043de:	4b53      	ldr	r3, [pc, #332]	@ (800452c <HAL_RCC_GetSysClockFreq+0x188>)
 80043e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043e2:	e098      	b.n	8004516 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043e4:	4b4f      	ldr	r3, [pc, #316]	@ (8004524 <HAL_RCC_GetSysClockFreq+0x180>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043ee:	4b4d      	ldr	r3, [pc, #308]	@ (8004524 <HAL_RCC_GetSysClockFreq+0x180>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d028      	beq.n	800444c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043fa:	4b4a      	ldr	r3, [pc, #296]	@ (8004524 <HAL_RCC_GetSysClockFreq+0x180>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	099b      	lsrs	r3, r3, #6
 8004400:	2200      	movs	r2, #0
 8004402:	623b      	str	r3, [r7, #32]
 8004404:	627a      	str	r2, [r7, #36]	@ 0x24
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800440c:	2100      	movs	r1, #0
 800440e:	4b47      	ldr	r3, [pc, #284]	@ (800452c <HAL_RCC_GetSysClockFreq+0x188>)
 8004410:	fb03 f201 	mul.w	r2, r3, r1
 8004414:	2300      	movs	r3, #0
 8004416:	fb00 f303 	mul.w	r3, r0, r3
 800441a:	4413      	add	r3, r2
 800441c:	4a43      	ldr	r2, [pc, #268]	@ (800452c <HAL_RCC_GetSysClockFreq+0x188>)
 800441e:	fba0 1202 	umull	r1, r2, r0, r2
 8004422:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004424:	460a      	mov	r2, r1
 8004426:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004428:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800442a:	4413      	add	r3, r2
 800442c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800442e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004430:	2200      	movs	r2, #0
 8004432:	61bb      	str	r3, [r7, #24]
 8004434:	61fa      	str	r2, [r7, #28]
 8004436:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800443a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800443e:	f7fc fb1d 	bl	8000a7c <__aeabi_uldivmod>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	4613      	mov	r3, r2
 8004448:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800444a:	e053      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800444c:	4b35      	ldr	r3, [pc, #212]	@ (8004524 <HAL_RCC_GetSysClockFreq+0x180>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	099b      	lsrs	r3, r3, #6
 8004452:	2200      	movs	r2, #0
 8004454:	613b      	str	r3, [r7, #16]
 8004456:	617a      	str	r2, [r7, #20]
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800445e:	f04f 0b00 	mov.w	fp, #0
 8004462:	4652      	mov	r2, sl
 8004464:	465b      	mov	r3, fp
 8004466:	f04f 0000 	mov.w	r0, #0
 800446a:	f04f 0100 	mov.w	r1, #0
 800446e:	0159      	lsls	r1, r3, #5
 8004470:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004474:	0150      	lsls	r0, r2, #5
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	ebb2 080a 	subs.w	r8, r2, sl
 800447e:	eb63 090b 	sbc.w	r9, r3, fp
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	f04f 0300 	mov.w	r3, #0
 800448a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800448e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004492:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004496:	ebb2 0408 	subs.w	r4, r2, r8
 800449a:	eb63 0509 	sbc.w	r5, r3, r9
 800449e:	f04f 0200 	mov.w	r2, #0
 80044a2:	f04f 0300 	mov.w	r3, #0
 80044a6:	00eb      	lsls	r3, r5, #3
 80044a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044ac:	00e2      	lsls	r2, r4, #3
 80044ae:	4614      	mov	r4, r2
 80044b0:	461d      	mov	r5, r3
 80044b2:	eb14 030a 	adds.w	r3, r4, sl
 80044b6:	603b      	str	r3, [r7, #0]
 80044b8:	eb45 030b 	adc.w	r3, r5, fp
 80044bc:	607b      	str	r3, [r7, #4]
 80044be:	f04f 0200 	mov.w	r2, #0
 80044c2:	f04f 0300 	mov.w	r3, #0
 80044c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044ca:	4629      	mov	r1, r5
 80044cc:	028b      	lsls	r3, r1, #10
 80044ce:	4621      	mov	r1, r4
 80044d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044d4:	4621      	mov	r1, r4
 80044d6:	028a      	lsls	r2, r1, #10
 80044d8:	4610      	mov	r0, r2
 80044da:	4619      	mov	r1, r3
 80044dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044de:	2200      	movs	r2, #0
 80044e0:	60bb      	str	r3, [r7, #8]
 80044e2:	60fa      	str	r2, [r7, #12]
 80044e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044e8:	f7fc fac8 	bl	8000a7c <__aeabi_uldivmod>
 80044ec:	4602      	mov	r2, r0
 80044ee:	460b      	mov	r3, r1
 80044f0:	4613      	mov	r3, r2
 80044f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80044f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004524 <HAL_RCC_GetSysClockFreq+0x180>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	0c1b      	lsrs	r3, r3, #16
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	3301      	adds	r3, #1
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004504:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004508:	fbb2 f3f3 	udiv	r3, r2, r3
 800450c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800450e:	e002      	b.n	8004516 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004510:	4b05      	ldr	r3, [pc, #20]	@ (8004528 <HAL_RCC_GetSysClockFreq+0x184>)
 8004512:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004514:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004518:	4618      	mov	r0, r3
 800451a:	3740      	adds	r7, #64	@ 0x40
 800451c:	46bd      	mov	sp, r7
 800451e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004522:	bf00      	nop
 8004524:	40023800 	.word	0x40023800
 8004528:	00f42400 	.word	0x00f42400
 800452c:	017d7840 	.word	0x017d7840

08004530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004534:	4b03      	ldr	r3, [pc, #12]	@ (8004544 <HAL_RCC_GetHCLKFreq+0x14>)
 8004536:	681b      	ldr	r3, [r3, #0]
}
 8004538:	4618      	mov	r0, r3
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	20000000 	.word	0x20000000

08004548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800454c:	f7ff fff0 	bl	8004530 <HAL_RCC_GetHCLKFreq>
 8004550:	4602      	mov	r2, r0
 8004552:	4b05      	ldr	r3, [pc, #20]	@ (8004568 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	0a9b      	lsrs	r3, r3, #10
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	4903      	ldr	r1, [pc, #12]	@ (800456c <HAL_RCC_GetPCLK1Freq+0x24>)
 800455e:	5ccb      	ldrb	r3, [r1, r3]
 8004560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004564:	4618      	mov	r0, r3
 8004566:	bd80      	pop	{r7, pc}
 8004568:	40023800 	.word	0x40023800
 800456c:	0800a2d4 	.word	0x0800a2d4

08004570 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004574:	f7ff ffdc 	bl	8004530 <HAL_RCC_GetHCLKFreq>
 8004578:	4602      	mov	r2, r0
 800457a:	4b05      	ldr	r3, [pc, #20]	@ (8004590 <HAL_RCC_GetPCLK2Freq+0x20>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	0b5b      	lsrs	r3, r3, #13
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	4903      	ldr	r1, [pc, #12]	@ (8004594 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004586:	5ccb      	ldrb	r3, [r1, r3]
 8004588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800458c:	4618      	mov	r0, r3
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40023800 	.word	0x40023800
 8004594:	0800a2d4 	.word	0x0800a2d4

08004598 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e07b      	b.n	80046a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d108      	bne.n	80045c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045ba:	d009      	beq.n	80045d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	61da      	str	r2, [r3, #28]
 80045c2:	e005      	b.n	80045d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7fd fc30 	bl	8001e50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004606:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004618:	431a      	orrs	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	431a      	orrs	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004640:	431a      	orrs	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004654:	ea42 0103 	orr.w	r1, r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800465c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	0c1b      	lsrs	r3, r3, #16
 800466e:	f003 0104 	and.w	r1, r3, #4
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004676:	f003 0210 	and.w	r2, r3, #16
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	69da      	ldr	r2, [r3, #28]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004690:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b088      	sub	sp, #32
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	60f8      	str	r0, [r7, #12]
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	603b      	str	r3, [r7, #0]
 80046b6:	4613      	mov	r3, r2
 80046b8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046ba:	f7fd fd71 	bl	80021a0 <HAL_GetTick>
 80046be:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80046c0:	88fb      	ldrh	r3, [r7, #6]
 80046c2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d001      	beq.n	80046d4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80046d0:	2302      	movs	r3, #2
 80046d2:	e12a      	b.n	800492a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <HAL_SPI_Transmit+0x36>
 80046da:	88fb      	ldrh	r3, [r7, #6]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e122      	b.n	800492a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d101      	bne.n	80046f2 <HAL_SPI_Transmit+0x48>
 80046ee:	2302      	movs	r3, #2
 80046f0:	e11b      	b.n	800492a <HAL_SPI_Transmit+0x280>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2203      	movs	r2, #3
 80046fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	88fa      	ldrh	r2, [r7, #6]
 8004712:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	88fa      	ldrh	r2, [r7, #6]
 8004718:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004740:	d10f      	bne.n	8004762 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004750:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004760:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800476c:	2b40      	cmp	r3, #64	@ 0x40
 800476e:	d007      	beq.n	8004780 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800477e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004788:	d152      	bne.n	8004830 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d002      	beq.n	8004798 <HAL_SPI_Transmit+0xee>
 8004792:	8b7b      	ldrh	r3, [r7, #26]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d145      	bne.n	8004824 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800479c:	881a      	ldrh	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a8:	1c9a      	adds	r2, r3, #2
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	3b01      	subs	r3, #1
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80047bc:	e032      	b.n	8004824 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d112      	bne.n	80047f2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d0:	881a      	ldrh	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047dc:	1c9a      	adds	r2, r3, #2
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	86da      	strh	r2, [r3, #54]	@ 0x36
 80047f0:	e018      	b.n	8004824 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047f2:	f7fd fcd5 	bl	80021a0 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d803      	bhi.n	800480a <HAL_SPI_Transmit+0x160>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004808:	d102      	bne.n	8004810 <HAL_SPI_Transmit+0x166>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d109      	bne.n	8004824 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e082      	b.n	800492a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004828:	b29b      	uxth	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1c7      	bne.n	80047be <HAL_SPI_Transmit+0x114>
 800482e:	e053      	b.n	80048d8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d002      	beq.n	800483e <HAL_SPI_Transmit+0x194>
 8004838:	8b7b      	ldrh	r3, [r7, #26]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d147      	bne.n	80048ce <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	330c      	adds	r3, #12
 8004848:	7812      	ldrb	r2, [r2, #0]
 800484a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004850:	1c5a      	adds	r2, r3, #1
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800485a:	b29b      	uxth	r3, r3
 800485c:	3b01      	subs	r3, #1
 800485e:	b29a      	uxth	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004864:	e033      	b.n	80048ce <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b02      	cmp	r3, #2
 8004872:	d113      	bne.n	800489c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	330c      	adds	r3, #12
 800487e:	7812      	ldrb	r2, [r2, #0]
 8004880:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004886:	1c5a      	adds	r2, r3, #1
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004890:	b29b      	uxth	r3, r3
 8004892:	3b01      	subs	r3, #1
 8004894:	b29a      	uxth	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	86da      	strh	r2, [r3, #54]	@ 0x36
 800489a:	e018      	b.n	80048ce <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800489c:	f7fd fc80 	bl	80021a0 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d803      	bhi.n	80048b4 <HAL_SPI_Transmit+0x20a>
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b2:	d102      	bne.n	80048ba <HAL_SPI_Transmit+0x210>
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d109      	bne.n	80048ce <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e02d      	b.n	800492a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1c6      	bne.n	8004866 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048d8:	69fa      	ldr	r2, [r7, #28]
 80048da:	6839      	ldr	r1, [r7, #0]
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 fbe7 	bl	80050b0 <SPI_EndRxTxTransaction>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2220      	movs	r2, #32
 80048ec:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10a      	bne.n	800490c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048f6:	2300      	movs	r3, #0
 80048f8:	617b      	str	r3, [r7, #20]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	617b      	str	r3, [r7, #20]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e000      	b.n	800492a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004928:	2300      	movs	r3, #0
  }
}
 800492a:	4618      	mov	r0, r3
 800492c:	3720      	adds	r7, #32
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b088      	sub	sp, #32
 8004936:	af02      	add	r7, sp, #8
 8004938:	60f8      	str	r0, [r7, #12]
 800493a:	60b9      	str	r1, [r7, #8]
 800493c:	603b      	str	r3, [r7, #0]
 800493e:	4613      	mov	r3, r2
 8004940:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b01      	cmp	r3, #1
 800494c:	d001      	beq.n	8004952 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800494e:	2302      	movs	r3, #2
 8004950:	e104      	b.n	8004b5c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800495a:	d112      	bne.n	8004982 <HAL_SPI_Receive+0x50>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10e      	bne.n	8004982 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2204      	movs	r2, #4
 8004968:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800496c:	88fa      	ldrh	r2, [r7, #6]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	4613      	mov	r3, r2
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	68b9      	ldr	r1, [r7, #8]
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 f8f3 	bl	8004b64 <HAL_SPI_TransmitReceive>
 800497e:	4603      	mov	r3, r0
 8004980:	e0ec      	b.n	8004b5c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004982:	f7fd fc0d 	bl	80021a0 <HAL_GetTick>
 8004986:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <HAL_SPI_Receive+0x62>
 800498e:	88fb      	ldrh	r3, [r7, #6]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e0e1      	b.n	8004b5c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d101      	bne.n	80049a6 <HAL_SPI_Receive+0x74>
 80049a2:	2302      	movs	r3, #2
 80049a4:	e0da      	b.n	8004b5c <HAL_SPI_Receive+0x22a>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2204      	movs	r2, #4
 80049b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	88fa      	ldrh	r2, [r7, #6]
 80049c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	88fa      	ldrh	r2, [r7, #6]
 80049cc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049f4:	d10f      	bne.n	8004a16 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004a14:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a20:	2b40      	cmp	r3, #64	@ 0x40
 8004a22:	d007      	beq.n	8004a34 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a32:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d170      	bne.n	8004b1e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004a3c:	e035      	b.n	8004aaa <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d115      	bne.n	8004a78 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f103 020c 	add.w	r2, r3, #12
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a58:	7812      	ldrb	r2, [r2, #0]
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004a76:	e018      	b.n	8004aaa <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a78:	f7fd fb92 	bl	80021a0 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d803      	bhi.n	8004a90 <HAL_SPI_Receive+0x15e>
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8e:	d102      	bne.n	8004a96 <HAL_SPI_Receive+0x164>
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d109      	bne.n	8004aaa <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e058      	b.n	8004b5c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1c4      	bne.n	8004a3e <HAL_SPI_Receive+0x10c>
 8004ab4:	e038      	b.n	8004b28 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d113      	bne.n	8004aec <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ace:	b292      	uxth	r2, r2
 8004ad0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad6:	1c9a      	adds	r2, r3, #2
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004aea:	e018      	b.n	8004b1e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004aec:	f7fd fb58 	bl	80021a0 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d803      	bhi.n	8004b04 <HAL_SPI_Receive+0x1d2>
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b02:	d102      	bne.n	8004b0a <HAL_SPI_Receive+0x1d8>
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d109      	bne.n	8004b1e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e01e      	b.n	8004b5c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1c6      	bne.n	8004ab6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	6839      	ldr	r1, [r7, #0]
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f000 fa59 	bl	8004fe4 <SPI_EndRxTransaction>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e000      	b.n	8004b5c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
  }
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08a      	sub	sp, #40	@ 0x28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
 8004b70:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b72:	2301      	movs	r3, #1
 8004b74:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b76:	f7fd fb13 	bl	80021a0 <HAL_GetTick>
 8004b7a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b82:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004b8a:	887b      	ldrh	r3, [r7, #2]
 8004b8c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b8e:	7ffb      	ldrb	r3, [r7, #31]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d00c      	beq.n	8004bae <HAL_SPI_TransmitReceive+0x4a>
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b9a:	d106      	bne.n	8004baa <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d102      	bne.n	8004baa <HAL_SPI_TransmitReceive+0x46>
 8004ba4:	7ffb      	ldrb	r3, [r7, #31]
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	d001      	beq.n	8004bae <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004baa:	2302      	movs	r3, #2
 8004bac:	e17f      	b.n	8004eae <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d005      	beq.n	8004bc0 <HAL_SPI_TransmitReceive+0x5c>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d002      	beq.n	8004bc0 <HAL_SPI_TransmitReceive+0x5c>
 8004bba:	887b      	ldrh	r3, [r7, #2]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e174      	b.n	8004eae <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d101      	bne.n	8004bd2 <HAL_SPI_TransmitReceive+0x6e>
 8004bce:	2302      	movs	r3, #2
 8004bd0:	e16d      	b.n	8004eae <HAL_SPI_TransmitReceive+0x34a>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	d003      	beq.n	8004bee <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2205      	movs	r2, #5
 8004bea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	887a      	ldrh	r2, [r7, #2]
 8004bfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	887a      	ldrh	r2, [r7, #2]
 8004c04:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	887a      	ldrh	r2, [r7, #2]
 8004c10:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	887a      	ldrh	r2, [r7, #2]
 8004c16:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c2e:	2b40      	cmp	r3, #64	@ 0x40
 8004c30:	d007      	beq.n	8004c42 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c4a:	d17e      	bne.n	8004d4a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <HAL_SPI_TransmitReceive+0xf6>
 8004c54:	8afb      	ldrh	r3, [r7, #22]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d16c      	bne.n	8004d34 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c5e:	881a      	ldrh	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c6a:	1c9a      	adds	r2, r3, #2
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	3b01      	subs	r3, #1
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c7e:	e059      	b.n	8004d34 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d11b      	bne.n	8004cc6 <HAL_SPI_TransmitReceive+0x162>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d016      	beq.n	8004cc6 <HAL_SPI_TransmitReceive+0x162>
 8004c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d113      	bne.n	8004cc6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca2:	881a      	ldrh	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cae:	1c9a      	adds	r2, r3, #2
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d119      	bne.n	8004d08 <HAL_SPI_TransmitReceive+0x1a4>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d014      	beq.n	8004d08 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68da      	ldr	r2, [r3, #12]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce8:	b292      	uxth	r2, r2
 8004cea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf0:	1c9a      	adds	r2, r3, #2
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d04:	2301      	movs	r3, #1
 8004d06:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d08:	f7fd fa4a 	bl	80021a0 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d80d      	bhi.n	8004d34 <HAL_SPI_TransmitReceive+0x1d0>
 8004d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1e:	d009      	beq.n	8004d34 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e0bc      	b.n	8004eae <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1a0      	bne.n	8004c80 <HAL_SPI_TransmitReceive+0x11c>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d19b      	bne.n	8004c80 <HAL_SPI_TransmitReceive+0x11c>
 8004d48:	e082      	b.n	8004e50 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <HAL_SPI_TransmitReceive+0x1f4>
 8004d52:	8afb      	ldrh	r3, [r7, #22]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d171      	bne.n	8004e3c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	330c      	adds	r3, #12
 8004d62:	7812      	ldrb	r2, [r2, #0]
 8004d64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d6a:	1c5a      	adds	r2, r3, #1
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	3b01      	subs	r3, #1
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d7e:	e05d      	b.n	8004e3c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d11c      	bne.n	8004dc8 <HAL_SPI_TransmitReceive+0x264>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d017      	beq.n	8004dc8 <HAL_SPI_TransmitReceive+0x264>
 8004d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d114      	bne.n	8004dc8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	330c      	adds	r3, #12
 8004da8:	7812      	ldrb	r2, [r2, #0]
 8004daa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db0:	1c5a      	adds	r2, r3, #1
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d119      	bne.n	8004e0a <HAL_SPI_TransmitReceive+0x2a6>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d014      	beq.n	8004e0a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68da      	ldr	r2, [r3, #12]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e06:	2301      	movs	r3, #1
 8004e08:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e0a:	f7fd f9c9 	bl	80021a0 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	6a3b      	ldr	r3, [r7, #32]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d803      	bhi.n	8004e22 <HAL_SPI_TransmitReceive+0x2be>
 8004e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e20:	d102      	bne.n	8004e28 <HAL_SPI_TransmitReceive+0x2c4>
 8004e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d109      	bne.n	8004e3c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e038      	b.n	8004eae <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d19c      	bne.n	8004d80 <HAL_SPI_TransmitReceive+0x21c>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d197      	bne.n	8004d80 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e50:	6a3a      	ldr	r2, [r7, #32]
 8004e52:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 f92b 	bl	80050b0 <SPI_EndRxTxTransaction>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d008      	beq.n	8004e72 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2220      	movs	r2, #32
 8004e64:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e01d      	b.n	8004eae <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10a      	bne.n	8004e90 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	613b      	str	r3, [r7, #16]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	613b      	str	r3, [r7, #16]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	613b      	str	r3, [r7, #16]
 8004e8e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e000      	b.n	8004eae <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004eac:	2300      	movs	r3, #0
  }
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3728      	adds	r7, #40	@ 0x28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004eb6:	b480      	push	{r7}
 8004eb8:	b083      	sub	sp, #12
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ec4:	b2db      	uxtb	r3, r3
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
	...

08004ed4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b088      	sub	sp, #32
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	603b      	str	r3, [r7, #0]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ee4:	f7fd f95c 	bl	80021a0 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eec:	1a9b      	subs	r3, r3, r2
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ef4:	f7fd f954 	bl	80021a0 <HAL_GetTick>
 8004ef8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004efa:	4b39      	ldr	r3, [pc, #228]	@ (8004fe0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	015b      	lsls	r3, r3, #5
 8004f00:	0d1b      	lsrs	r3, r3, #20
 8004f02:	69fa      	ldr	r2, [r7, #28]
 8004f04:	fb02 f303 	mul.w	r3, r2, r3
 8004f08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f0a:	e054      	b.n	8004fb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f12:	d050      	beq.n	8004fb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f14:	f7fd f944 	bl	80021a0 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	69fa      	ldr	r2, [r7, #28]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d902      	bls.n	8004f2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d13d      	bne.n	8004fa6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f42:	d111      	bne.n	8004f68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f4c:	d004      	beq.n	8004f58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f56:	d107      	bne.n	8004f68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f70:	d10f      	bne.n	8004f92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e017      	b.n	8004fd6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	bf0c      	ite	eq
 8004fc6:	2301      	moveq	r3, #1
 8004fc8:	2300      	movne	r3, #0
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	461a      	mov	r2, r3
 8004fce:	79fb      	ldrb	r3, [r7, #7]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d19b      	bne.n	8004f0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3720      	adds	r7, #32
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	20000000 	.word	0x20000000

08004fe4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ff8:	d111      	bne.n	800501e <SPI_EndRxTransaction+0x3a>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005002:	d004      	beq.n	800500e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800500c:	d107      	bne.n	800501e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800501c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005026:	d12a      	bne.n	800507e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005030:	d012      	beq.n	8005058 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2200      	movs	r2, #0
 800503a:	2180      	movs	r1, #128	@ 0x80
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f7ff ff49 	bl	8004ed4 <SPI_WaitFlagStateUntilTimeout>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d02d      	beq.n	80050a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800504c:	f043 0220 	orr.w	r2, r3, #32
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e026      	b.n	80050a6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	2200      	movs	r2, #0
 8005060:	2101      	movs	r1, #1
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f7ff ff36 	bl	8004ed4 <SPI_WaitFlagStateUntilTimeout>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d01a      	beq.n	80050a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005072:	f043 0220 	orr.w	r2, r3, #32
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e013      	b.n	80050a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	2200      	movs	r2, #0
 8005086:	2101      	movs	r1, #1
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f7ff ff23 	bl	8004ed4 <SPI_WaitFlagStateUntilTimeout>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d007      	beq.n	80050a4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005098:	f043 0220 	orr.w	r2, r3, #32
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e000      	b.n	80050a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
	...

080050b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b088      	sub	sp, #32
 80050b4:	af02      	add	r7, sp, #8
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	2201      	movs	r2, #1
 80050c4:	2102      	movs	r1, #2
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f7ff ff04 	bl	8004ed4 <SPI_WaitFlagStateUntilTimeout>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d007      	beq.n	80050e2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d6:	f043 0220 	orr.w	r2, r3, #32
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e032      	b.n	8005148 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80050e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005150 <SPI_EndRxTxTransaction+0xa0>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a1b      	ldr	r2, [pc, #108]	@ (8005154 <SPI_EndRxTxTransaction+0xa4>)
 80050e8:	fba2 2303 	umull	r2, r3, r2, r3
 80050ec:	0d5b      	lsrs	r3, r3, #21
 80050ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80050f2:	fb02 f303 	mul.w	r3, r2, r3
 80050f6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005100:	d112      	bne.n	8005128 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	2200      	movs	r2, #0
 800510a:	2180      	movs	r1, #128	@ 0x80
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f7ff fee1 	bl	8004ed4 <SPI_WaitFlagStateUntilTimeout>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d016      	beq.n	8005146 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800511c:	f043 0220 	orr.w	r2, r3, #32
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e00f      	b.n	8005148 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00a      	beq.n	8005144 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	3b01      	subs	r3, #1
 8005132:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800513e:	2b80      	cmp	r3, #128	@ 0x80
 8005140:	d0f2      	beq.n	8005128 <SPI_EndRxTxTransaction+0x78>
 8005142:	e000      	b.n	8005146 <SPI_EndRxTxTransaction+0x96>
        break;
 8005144:	bf00      	nop
  }

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3718      	adds	r7, #24
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	20000000 	.word	0x20000000
 8005154:	165e9f81 	.word	0x165e9f81

08005158 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e033      	b.n	80051d2 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d106      	bne.n	8005184 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7fc feae 	bl	8001ee0 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f825 	bl	80051dc <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	691a      	ldr	r2, [r3, #16]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80051a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	695a      	ldr	r2, [r3, #20]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051b0:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68da      	ldr	r2, [r3, #12]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051c0:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	641a      	str	r2, [r3, #64]	@ 0x40
  husart->State = HAL_USART_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
	...

080051dc <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 80051dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051e0:	b0c6      	sub	sp, #280	@ 0x118
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg = 0x00U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80051ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68d9      	ldr	r1, [r3, #12]
 80051f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	f021 030c 	bic.w	r3, r1, #12
 8005200:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8005202:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 800520e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005212:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005216:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800521a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800521e:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8005220:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005224:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8005226:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8005228:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	431a      	orrs	r2, r3
 8005230:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005234:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8005236:	431a      	orrs	r2, r3
 8005238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800523c:	4313      	orrs	r3, r2
 800523e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005242:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8005246:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005250:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8005252:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800525e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005262:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8005266:	f023 030c 	bic.w	r3, r3, #12
 800526a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800526e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005272:	689a      	ldr	r2, [r3, #8]
 8005274:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	431a      	orrs	r2, r3
 800527c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	431a      	orrs	r2, r3
 8005284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005288:	4313      	orrs	r3, r2
 800528a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800528e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8005292:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800529c:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 800529e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6959      	ldr	r1, [r3, #20]
 80052a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
 80052b0:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 80052b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	4b8b      	ldr	r3, [pc, #556]	@ (80054e8 <USART_SetConfig+0x30c>)
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d006      	beq.n	80052cc <USART_SetConfig+0xf0>
 80052be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	4b89      	ldr	r3, [pc, #548]	@ (80054ec <USART_SetConfig+0x310>)
 80052c6:	429a      	cmp	r2, r3
 80052c8:	f040 8114 	bne.w	80054f4 <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80052cc:	f7ff f950 	bl	8004570 <HAL_RCC_GetPCLK2Freq>
 80052d0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80052d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80052d8:	2200      	movs	r2, #0
 80052da:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80052de:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 80052e2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80052e6:	4622      	mov	r2, r4
 80052e8:	462b      	mov	r3, r5
 80052ea:	1891      	adds	r1, r2, r2
 80052ec:	6739      	str	r1, [r7, #112]	@ 0x70
 80052ee:	415b      	adcs	r3, r3
 80052f0:	677b      	str	r3, [r7, #116]	@ 0x74
 80052f2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80052f6:	4621      	mov	r1, r4
 80052f8:	eb12 0801 	adds.w	r8, r2, r1
 80052fc:	4629      	mov	r1, r5
 80052fe:	eb43 0901 	adc.w	r9, r3, r1
 8005302:	f04f 0200 	mov.w	r2, #0
 8005306:	f04f 0300 	mov.w	r3, #0
 800530a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800530e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005312:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005316:	4690      	mov	r8, r2
 8005318:	4699      	mov	r9, r3
 800531a:	4623      	mov	r3, r4
 800531c:	eb18 0303 	adds.w	r3, r8, r3
 8005320:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005324:	462b      	mov	r3, r5
 8005326:	eb49 0303 	adc.w	r3, r9, r3
 800532a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800532e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800533a:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800533e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005342:	460b      	mov	r3, r1
 8005344:	18db      	adds	r3, r3, r3
 8005346:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005348:	4613      	mov	r3, r2
 800534a:	eb42 0303 	adc.w	r3, r2, r3
 800534e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005350:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8005354:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8005358:	f7fb fb90 	bl	8000a7c <__aeabi_uldivmod>
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	4b63      	ldr	r3, [pc, #396]	@ (80054f0 <USART_SetConfig+0x314>)
 8005362:	fba3 2302 	umull	r2, r3, r3, r2
 8005366:	095b      	lsrs	r3, r3, #5
 8005368:	011c      	lsls	r4, r3, #4
 800536a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800536e:	2200      	movs	r2, #0
 8005370:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005374:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005378:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800537c:	4642      	mov	r2, r8
 800537e:	464b      	mov	r3, r9
 8005380:	1891      	adds	r1, r2, r2
 8005382:	6639      	str	r1, [r7, #96]	@ 0x60
 8005384:	415b      	adcs	r3, r3
 8005386:	667b      	str	r3, [r7, #100]	@ 0x64
 8005388:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800538c:	4641      	mov	r1, r8
 800538e:	1851      	adds	r1, r2, r1
 8005390:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005392:	4649      	mov	r1, r9
 8005394:	414b      	adcs	r3, r1
 8005396:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005398:	f04f 0200 	mov.w	r2, #0
 800539c:	f04f 0300 	mov.w	r3, #0
 80053a0:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 80053a4:	4659      	mov	r1, fp
 80053a6:	00cb      	lsls	r3, r1, #3
 80053a8:	4651      	mov	r1, sl
 80053aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053ae:	4651      	mov	r1, sl
 80053b0:	00ca      	lsls	r2, r1, #3
 80053b2:	4610      	mov	r0, r2
 80053b4:	4619      	mov	r1, r3
 80053b6:	4603      	mov	r3, r0
 80053b8:	4642      	mov	r2, r8
 80053ba:	189b      	adds	r3, r3, r2
 80053bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80053c0:	464b      	mov	r3, r9
 80053c2:	460a      	mov	r2, r1
 80053c4:	eb42 0303 	adc.w	r3, r2, r3
 80053c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80053cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80053d8:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80053dc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80053e0:	460b      	mov	r3, r1
 80053e2:	18db      	adds	r3, r3, r3
 80053e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80053e6:	4613      	mov	r3, r2
 80053e8:	eb42 0303 	adc.w	r3, r2, r3
 80053ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80053ee:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80053f2:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80053f6:	f7fb fb41 	bl	8000a7c <__aeabi_uldivmod>
 80053fa:	4602      	mov	r2, r0
 80053fc:	460b      	mov	r3, r1
 80053fe:	4611      	mov	r1, r2
 8005400:	4b3b      	ldr	r3, [pc, #236]	@ (80054f0 <USART_SetConfig+0x314>)
 8005402:	fba3 2301 	umull	r2, r3, r3, r1
 8005406:	095b      	lsrs	r3, r3, #5
 8005408:	2264      	movs	r2, #100	@ 0x64
 800540a:	fb02 f303 	mul.w	r3, r2, r3
 800540e:	1acb      	subs	r3, r1, r3
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005416:	4b36      	ldr	r3, [pc, #216]	@ (80054f0 <USART_SetConfig+0x314>)
 8005418:	fba3 2302 	umull	r2, r3, r3, r2
 800541c:	095b      	lsrs	r3, r3, #5
 800541e:	005b      	lsls	r3, r3, #1
 8005420:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005424:	441c      	add	r4, r3
 8005426:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800542a:	2200      	movs	r2, #0
 800542c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005430:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005434:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005438:	4642      	mov	r2, r8
 800543a:	464b      	mov	r3, r9
 800543c:	1891      	adds	r1, r2, r2
 800543e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005440:	415b      	adcs	r3, r3
 8005442:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005444:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005448:	4641      	mov	r1, r8
 800544a:	1851      	adds	r1, r2, r1
 800544c:	6439      	str	r1, [r7, #64]	@ 0x40
 800544e:	4649      	mov	r1, r9
 8005450:	414b      	adcs	r3, r1
 8005452:	647b      	str	r3, [r7, #68]	@ 0x44
 8005454:	f04f 0200 	mov.w	r2, #0
 8005458:	f04f 0300 	mov.w	r3, #0
 800545c:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	@ 0x40
 8005460:	4659      	mov	r1, fp
 8005462:	00cb      	lsls	r3, r1, #3
 8005464:	4651      	mov	r1, sl
 8005466:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800546a:	4651      	mov	r1, sl
 800546c:	00ca      	lsls	r2, r1, #3
 800546e:	4610      	mov	r0, r2
 8005470:	4619      	mov	r1, r3
 8005472:	4603      	mov	r3, r0
 8005474:	4642      	mov	r2, r8
 8005476:	189b      	adds	r3, r3, r2
 8005478:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800547c:	464b      	mov	r3, r9
 800547e:	460a      	mov	r2, r1
 8005480:	eb42 0303 	adc.w	r3, r2, r3
 8005484:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005488:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005494:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005498:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800549c:	460b      	mov	r3, r1
 800549e:	18db      	adds	r3, r3, r3
 80054a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054a2:	4613      	mov	r3, r2
 80054a4:	eb42 0303 	adc.w	r3, r2, r3
 80054a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054aa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80054ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80054b2:	f7fb fae3 	bl	8000a7c <__aeabi_uldivmod>
 80054b6:	4602      	mov	r2, r0
 80054b8:	460b      	mov	r3, r1
 80054ba:	4b0d      	ldr	r3, [pc, #52]	@ (80054f0 <USART_SetConfig+0x314>)
 80054bc:	fba3 1302 	umull	r1, r3, r3, r2
 80054c0:	095b      	lsrs	r3, r3, #5
 80054c2:	2164      	movs	r1, #100	@ 0x64
 80054c4:	fb01 f303 	mul.w	r3, r1, r3
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	00db      	lsls	r3, r3, #3
 80054cc:	3332      	adds	r3, #50	@ 0x32
 80054ce:	4a08      	ldr	r2, [pc, #32]	@ (80054f0 <USART_SetConfig+0x314>)
 80054d0:	fba2 2303 	umull	r2, r3, r2, r3
 80054d4:	095b      	lsrs	r3, r3, #5
 80054d6:	f003 0207 	and.w	r2, r3, #7
 80054da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4422      	add	r2, r4
 80054e2:	609a      	str	r2, [r3, #8]
 80054e4:	e109      	b.n	80056fa <USART_SetConfig+0x51e>
 80054e6:	bf00      	nop
 80054e8:	40011000 	.word	0x40011000
 80054ec:	40011400 	.word	0x40011400
 80054f0:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80054f4:	f7ff f828 	bl	8004548 <HAL_RCC_GetPCLK1Freq>
 80054f8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80054fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005500:	2200      	movs	r2, #0
 8005502:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005506:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800550a:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800550e:	4642      	mov	r2, r8
 8005510:	464b      	mov	r3, r9
 8005512:	1891      	adds	r1, r2, r2
 8005514:	6339      	str	r1, [r7, #48]	@ 0x30
 8005516:	415b      	adcs	r3, r3
 8005518:	637b      	str	r3, [r7, #52]	@ 0x34
 800551a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800551e:	4641      	mov	r1, r8
 8005520:	1854      	adds	r4, r2, r1
 8005522:	4649      	mov	r1, r9
 8005524:	eb43 0501 	adc.w	r5, r3, r1
 8005528:	f04f 0200 	mov.w	r2, #0
 800552c:	f04f 0300 	mov.w	r3, #0
 8005530:	00eb      	lsls	r3, r5, #3
 8005532:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005536:	00e2      	lsls	r2, r4, #3
 8005538:	4614      	mov	r4, r2
 800553a:	461d      	mov	r5, r3
 800553c:	4643      	mov	r3, r8
 800553e:	18e3      	adds	r3, r4, r3
 8005540:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005544:	464b      	mov	r3, r9
 8005546:	eb45 0303 	adc.w	r3, r5, r3
 800554a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800554e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800555a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800555e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005562:	460b      	mov	r3, r1
 8005564:	18db      	adds	r3, r3, r3
 8005566:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005568:	4613      	mov	r3, r2
 800556a:	eb42 0303 	adc.w	r3, r2, r3
 800556e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005570:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005574:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005578:	f7fb fa80 	bl	8000a7c <__aeabi_uldivmod>
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	4b61      	ldr	r3, [pc, #388]	@ (8005708 <USART_SetConfig+0x52c>)
 8005582:	fba3 2302 	umull	r2, r3, r3, r2
 8005586:	095b      	lsrs	r3, r3, #5
 8005588:	011c      	lsls	r4, r3, #4
 800558a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800558e:	2200      	movs	r2, #0
 8005590:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005594:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005598:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800559c:	4642      	mov	r2, r8
 800559e:	464b      	mov	r3, r9
 80055a0:	1891      	adds	r1, r2, r2
 80055a2:	6239      	str	r1, [r7, #32]
 80055a4:	415b      	adcs	r3, r3
 80055a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80055a8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055ac:	4641      	mov	r1, r8
 80055ae:	eb12 0a01 	adds.w	sl, r2, r1
 80055b2:	4649      	mov	r1, r9
 80055b4:	eb43 0b01 	adc.w	fp, r3, r1
 80055b8:	f04f 0200 	mov.w	r2, #0
 80055bc:	f04f 0300 	mov.w	r3, #0
 80055c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055cc:	4692      	mov	sl, r2
 80055ce:	469b      	mov	fp, r3
 80055d0:	4643      	mov	r3, r8
 80055d2:	eb1a 0303 	adds.w	r3, sl, r3
 80055d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80055da:	464b      	mov	r3, r9
 80055dc:	eb4b 0303 	adc.w	r3, fp, r3
 80055e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80055e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055f0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80055f4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80055f8:	460b      	mov	r3, r1
 80055fa:	18db      	adds	r3, r3, r3
 80055fc:	61bb      	str	r3, [r7, #24]
 80055fe:	4613      	mov	r3, r2
 8005600:	eb42 0303 	adc.w	r3, r2, r3
 8005604:	61fb      	str	r3, [r7, #28]
 8005606:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800560a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800560e:	f7fb fa35 	bl	8000a7c <__aeabi_uldivmod>
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	4611      	mov	r1, r2
 8005618:	4b3b      	ldr	r3, [pc, #236]	@ (8005708 <USART_SetConfig+0x52c>)
 800561a:	fba3 2301 	umull	r2, r3, r3, r1
 800561e:	095b      	lsrs	r3, r3, #5
 8005620:	2264      	movs	r2, #100	@ 0x64
 8005622:	fb02 f303 	mul.w	r3, r2, r3
 8005626:	1acb      	subs	r3, r1, r3
 8005628:	00db      	lsls	r3, r3, #3
 800562a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800562e:	4b36      	ldr	r3, [pc, #216]	@ (8005708 <USART_SetConfig+0x52c>)
 8005630:	fba3 2302 	umull	r2, r3, r3, r2
 8005634:	095b      	lsrs	r3, r3, #5
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800563c:	441c      	add	r4, r3
 800563e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005642:	2200      	movs	r2, #0
 8005644:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005648:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800564c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005650:	4642      	mov	r2, r8
 8005652:	464b      	mov	r3, r9
 8005654:	1891      	adds	r1, r2, r2
 8005656:	6139      	str	r1, [r7, #16]
 8005658:	415b      	adcs	r3, r3
 800565a:	617b      	str	r3, [r7, #20]
 800565c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005660:	4641      	mov	r1, r8
 8005662:	1851      	adds	r1, r2, r1
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	4649      	mov	r1, r9
 8005668:	414b      	adcs	r3, r1
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	f04f 0200 	mov.w	r2, #0
 8005670:	f04f 0300 	mov.w	r3, #0
 8005674:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005678:	4659      	mov	r1, fp
 800567a:	00cb      	lsls	r3, r1, #3
 800567c:	4651      	mov	r1, sl
 800567e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005682:	4651      	mov	r1, sl
 8005684:	00ca      	lsls	r2, r1, #3
 8005686:	4610      	mov	r0, r2
 8005688:	4619      	mov	r1, r3
 800568a:	4603      	mov	r3, r0
 800568c:	4642      	mov	r2, r8
 800568e:	189b      	adds	r3, r3, r2
 8005690:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005694:	464b      	mov	r3, r9
 8005696:	460a      	mov	r2, r1
 8005698:	eb42 0303 	adc.w	r3, r2, r3
 800569c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80056aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80056ac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80056b0:	460b      	mov	r3, r1
 80056b2:	18db      	adds	r3, r3, r3
 80056b4:	603b      	str	r3, [r7, #0]
 80056b6:	4613      	mov	r3, r2
 80056b8:	eb42 0303 	adc.w	r3, r2, r3
 80056bc:	607b      	str	r3, [r7, #4]
 80056be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80056c6:	f7fb f9d9 	bl	8000a7c <__aeabi_uldivmod>
 80056ca:	4602      	mov	r2, r0
 80056cc:	460b      	mov	r3, r1
 80056ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005708 <USART_SetConfig+0x52c>)
 80056d0:	fba3 1302 	umull	r1, r3, r3, r2
 80056d4:	095b      	lsrs	r3, r3, #5
 80056d6:	2164      	movs	r1, #100	@ 0x64
 80056d8:	fb01 f303 	mul.w	r3, r1, r3
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	3332      	adds	r3, #50	@ 0x32
 80056e2:	4a09      	ldr	r2, [pc, #36]	@ (8005708 <USART_SetConfig+0x52c>)
 80056e4:	fba2 2303 	umull	r2, r3, r2, r3
 80056e8:	095b      	lsrs	r3, r3, #5
 80056ea:	f003 0207 	and.w	r2, r3, #7
 80056ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4422      	add	r2, r4
 80056f6:	609a      	str	r2, [r3, #8]
  }
}
 80056f8:	bf00      	nop
 80056fa:	bf00      	nop
 80056fc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005700:	46bd      	mov	sp, r7
 8005702:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005706:	bf00      	nop
 8005708:	51eb851f 	.word	0x51eb851f

0800570c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800570c:	b084      	sub	sp, #16
 800570e:	b580      	push	{r7, lr}
 8005710:	b084      	sub	sp, #16
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
 8005716:	f107 001c 	add.w	r0, r7, #28
 800571a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800571e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005722:	2b01      	cmp	r3, #1
 8005724:	d123      	bne.n	800576e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800572a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800573a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800574e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005752:	2b01      	cmp	r3, #1
 8005754:	d105      	bne.n	8005762 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f001 fae8 	bl	8006d38 <USB_CoreReset>
 8005768:	4603      	mov	r3, r0
 800576a:	73fb      	strb	r3, [r7, #15]
 800576c:	e01b      	b.n	80057a6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f001 fadc 	bl	8006d38 <USB_CoreReset>
 8005780:	4603      	mov	r3, r0
 8005782:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005784:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005788:	2b00      	cmp	r3, #0
 800578a:	d106      	bne.n	800579a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005790:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	639a      	str	r2, [r3, #56]	@ 0x38
 8005798:	e005      	b.n	80057a6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800579e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80057a6:	7fbb      	ldrb	r3, [r7, #30]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d10b      	bne.n	80057c4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f043 0206 	orr.w	r2, r3, #6
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f043 0220 	orr.w	r2, r3, #32
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057d0:	b004      	add	sp, #16
 80057d2:	4770      	bx	lr

080057d4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b087      	sub	sp, #28
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	4613      	mov	r3, r2
 80057e0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80057e2:	79fb      	ldrb	r3, [r7, #7]
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d165      	bne.n	80058b4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	4a41      	ldr	r2, [pc, #260]	@ (80058f0 <USB_SetTurnaroundTime+0x11c>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d906      	bls.n	80057fe <USB_SetTurnaroundTime+0x2a>
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	4a40      	ldr	r2, [pc, #256]	@ (80058f4 <USB_SetTurnaroundTime+0x120>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d202      	bcs.n	80057fe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80057f8:	230f      	movs	r3, #15
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	e062      	b.n	80058c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	4a3c      	ldr	r2, [pc, #240]	@ (80058f4 <USB_SetTurnaroundTime+0x120>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d306      	bcc.n	8005814 <USB_SetTurnaroundTime+0x40>
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	4a3b      	ldr	r2, [pc, #236]	@ (80058f8 <USB_SetTurnaroundTime+0x124>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d202      	bcs.n	8005814 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800580e:	230e      	movs	r3, #14
 8005810:	617b      	str	r3, [r7, #20]
 8005812:	e057      	b.n	80058c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	4a38      	ldr	r2, [pc, #224]	@ (80058f8 <USB_SetTurnaroundTime+0x124>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d306      	bcc.n	800582a <USB_SetTurnaroundTime+0x56>
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	4a37      	ldr	r2, [pc, #220]	@ (80058fc <USB_SetTurnaroundTime+0x128>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d202      	bcs.n	800582a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005824:	230d      	movs	r3, #13
 8005826:	617b      	str	r3, [r7, #20]
 8005828:	e04c      	b.n	80058c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	4a33      	ldr	r2, [pc, #204]	@ (80058fc <USB_SetTurnaroundTime+0x128>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d306      	bcc.n	8005840 <USB_SetTurnaroundTime+0x6c>
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	4a32      	ldr	r2, [pc, #200]	@ (8005900 <USB_SetTurnaroundTime+0x12c>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d802      	bhi.n	8005840 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800583a:	230c      	movs	r3, #12
 800583c:	617b      	str	r3, [r7, #20]
 800583e:	e041      	b.n	80058c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	4a2f      	ldr	r2, [pc, #188]	@ (8005900 <USB_SetTurnaroundTime+0x12c>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d906      	bls.n	8005856 <USB_SetTurnaroundTime+0x82>
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	4a2e      	ldr	r2, [pc, #184]	@ (8005904 <USB_SetTurnaroundTime+0x130>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d802      	bhi.n	8005856 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005850:	230b      	movs	r3, #11
 8005852:	617b      	str	r3, [r7, #20]
 8005854:	e036      	b.n	80058c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	4a2a      	ldr	r2, [pc, #168]	@ (8005904 <USB_SetTurnaroundTime+0x130>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d906      	bls.n	800586c <USB_SetTurnaroundTime+0x98>
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	4a29      	ldr	r2, [pc, #164]	@ (8005908 <USB_SetTurnaroundTime+0x134>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d802      	bhi.n	800586c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005866:	230a      	movs	r3, #10
 8005868:	617b      	str	r3, [r7, #20]
 800586a:	e02b      	b.n	80058c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	4a26      	ldr	r2, [pc, #152]	@ (8005908 <USB_SetTurnaroundTime+0x134>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d906      	bls.n	8005882 <USB_SetTurnaroundTime+0xae>
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	4a25      	ldr	r2, [pc, #148]	@ (800590c <USB_SetTurnaroundTime+0x138>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d202      	bcs.n	8005882 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800587c:	2309      	movs	r3, #9
 800587e:	617b      	str	r3, [r7, #20]
 8005880:	e020      	b.n	80058c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	4a21      	ldr	r2, [pc, #132]	@ (800590c <USB_SetTurnaroundTime+0x138>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d306      	bcc.n	8005898 <USB_SetTurnaroundTime+0xc4>
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	4a20      	ldr	r2, [pc, #128]	@ (8005910 <USB_SetTurnaroundTime+0x13c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d802      	bhi.n	8005898 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005892:	2308      	movs	r3, #8
 8005894:	617b      	str	r3, [r7, #20]
 8005896:	e015      	b.n	80058c4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	4a1d      	ldr	r2, [pc, #116]	@ (8005910 <USB_SetTurnaroundTime+0x13c>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d906      	bls.n	80058ae <USB_SetTurnaroundTime+0xda>
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	4a1c      	ldr	r2, [pc, #112]	@ (8005914 <USB_SetTurnaroundTime+0x140>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d202      	bcs.n	80058ae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80058a8:	2307      	movs	r3, #7
 80058aa:	617b      	str	r3, [r7, #20]
 80058ac:	e00a      	b.n	80058c4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80058ae:	2306      	movs	r3, #6
 80058b0:	617b      	str	r3, [r7, #20]
 80058b2:	e007      	b.n	80058c4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80058b4:	79fb      	ldrb	r3, [r7, #7]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d102      	bne.n	80058c0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80058ba:	2309      	movs	r3, #9
 80058bc:	617b      	str	r3, [r7, #20]
 80058be:	e001      	b.n	80058c4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80058c0:	2309      	movs	r3, #9
 80058c2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	68da      	ldr	r2, [r3, #12]
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	029b      	lsls	r3, r3, #10
 80058d8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80058dc:	431a      	orrs	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	371c      	adds	r7, #28
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	00d8acbf 	.word	0x00d8acbf
 80058f4:	00e4e1c0 	.word	0x00e4e1c0
 80058f8:	00f42400 	.word	0x00f42400
 80058fc:	01067380 	.word	0x01067380
 8005900:	011a499f 	.word	0x011a499f
 8005904:	01312cff 	.word	0x01312cff
 8005908:	014ca43f 	.word	0x014ca43f
 800590c:	016e3600 	.word	0x016e3600
 8005910:	01a6ab1f 	.word	0x01a6ab1f
 8005914:	01e84800 	.word	0x01e84800

08005918 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f043 0201 	orr.w	r2, r3, #1
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800593a:	b480      	push	{r7}
 800593c:	b083      	sub	sp, #12
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f023 0201 	bic.w	r2, r3, #1
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005968:	2300      	movs	r3, #0
 800596a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005978:	78fb      	ldrb	r3, [r7, #3]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d115      	bne.n	80059aa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800598a:	200a      	movs	r0, #10
 800598c:	f7fc fc14 	bl	80021b8 <HAL_Delay>
      ms += 10U;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	330a      	adds	r3, #10
 8005994:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f001 f93f 	bl	8006c1a <USB_GetMode>
 800599c:	4603      	mov	r3, r0
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d01e      	beq.n	80059e0 <USB_SetCurrentMode+0x84>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2bc7      	cmp	r3, #199	@ 0xc7
 80059a6:	d9f0      	bls.n	800598a <USB_SetCurrentMode+0x2e>
 80059a8:	e01a      	b.n	80059e0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80059aa:	78fb      	ldrb	r3, [r7, #3]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d115      	bne.n	80059dc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80059bc:	200a      	movs	r0, #10
 80059be:	f7fc fbfb 	bl	80021b8 <HAL_Delay>
      ms += 10U;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	330a      	adds	r3, #10
 80059c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f001 f926 	bl	8006c1a <USB_GetMode>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d005      	beq.n	80059e0 <USB_SetCurrentMode+0x84>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2bc7      	cmp	r3, #199	@ 0xc7
 80059d8:	d9f0      	bls.n	80059bc <USB_SetCurrentMode+0x60>
 80059da:	e001      	b.n	80059e0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e005      	b.n	80059ec <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2bc8      	cmp	r3, #200	@ 0xc8
 80059e4:	d101      	bne.n	80059ea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e000      	b.n	80059ec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059f4:	b084      	sub	sp, #16
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b086      	sub	sp, #24
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005a02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005a0e:	2300      	movs	r3, #0
 8005a10:	613b      	str	r3, [r7, #16]
 8005a12:	e009      	b.n	8005a28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	3340      	adds	r3, #64	@ 0x40
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	2200      	movs	r2, #0
 8005a20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	3301      	adds	r3, #1
 8005a26:	613b      	str	r3, [r7, #16]
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	2b0e      	cmp	r3, #14
 8005a2c:	d9f2      	bls.n	8005a14 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a2e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d11c      	bne.n	8005a70 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a44:	f043 0302 	orr.w	r3, r3, #2
 8005a48:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a4e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a5a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a66:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a6e:	e00b      	b.n	8005a88 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a74:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a80:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a8e:	461a      	mov	r2, r3
 8005a90:	2300      	movs	r3, #0
 8005a92:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a94:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d10d      	bne.n	8005ab8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d104      	bne.n	8005aae <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f968 	bl	8005d7c <USB_SetDevSpeed>
 8005aac:	e008      	b.n	8005ac0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005aae:	2101      	movs	r1, #1
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 f963 	bl	8005d7c <USB_SetDevSpeed>
 8005ab6:	e003      	b.n	8005ac0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005ab8:	2103      	movs	r1, #3
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f95e 	bl	8005d7c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ac0:	2110      	movs	r1, #16
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f8fa 	bl	8005cbc <USB_FlushTxFifo>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f924 	bl	8005d20 <USB_FlushRxFifo>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ae8:	461a      	mov	r2, r3
 8005aea:	2300      	movs	r3, #0
 8005aec:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005af4:	461a      	mov	r2, r3
 8005af6:	2300      	movs	r3, #0
 8005af8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b00:	461a      	mov	r2, r3
 8005b02:	2300      	movs	r3, #0
 8005b04:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b06:	2300      	movs	r3, #0
 8005b08:	613b      	str	r3, [r7, #16]
 8005b0a:	e043      	b.n	8005b94 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b22:	d118      	bne.n	8005b56 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10a      	bne.n	8005b40 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b36:	461a      	mov	r2, r3
 8005b38:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005b3c:	6013      	str	r3, [r2, #0]
 8005b3e:	e013      	b.n	8005b68 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005b52:	6013      	str	r3, [r2, #0]
 8005b54:	e008      	b.n	8005b68 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b62:	461a      	mov	r2, r3
 8005b64:	2300      	movs	r3, #0
 8005b66:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b74:	461a      	mov	r2, r3
 8005b76:	2300      	movs	r3, #0
 8005b78:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	015a      	lsls	r2, r3, #5
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	4413      	add	r3, r2
 8005b82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b86:	461a      	mov	r2, r3
 8005b88:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005b8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	3301      	adds	r3, #1
 8005b92:	613b      	str	r3, [r7, #16]
 8005b94:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005b98:	461a      	mov	r2, r3
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d3b5      	bcc.n	8005b0c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	613b      	str	r3, [r7, #16]
 8005ba4:	e043      	b.n	8005c2e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	015a      	lsls	r2, r3, #5
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005bb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005bbc:	d118      	bne.n	8005bf0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10a      	bne.n	8005bda <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005bd6:	6013      	str	r3, [r2, #0]
 8005bd8:	e013      	b.n	8005c02 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005be6:	461a      	mov	r2, r3
 8005be8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005bec:	6013      	str	r3, [r2, #0]
 8005bee:	e008      	b.n	8005c02 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	2300      	movs	r3, #0
 8005c00:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	015a      	lsls	r2, r3, #5
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c0e:	461a      	mov	r2, r3
 8005c10:	2300      	movs	r3, #0
 8005c12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c20:	461a      	mov	r2, r3
 8005c22:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005c26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	613b      	str	r3, [r7, #16]
 8005c2e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005c32:	461a      	mov	r2, r3
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d3b5      	bcc.n	8005ba6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c4c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005c5a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d105      	bne.n	8005c70 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	f043 0210 	orr.w	r2, r3, #16
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	699a      	ldr	r2, [r3, #24]
 8005c74:	4b10      	ldr	r3, [pc, #64]	@ (8005cb8 <USB_DevInit+0x2c4>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c7c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d005      	beq.n	8005c90 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	f043 0208 	orr.w	r2, r3, #8
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c90:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d107      	bne.n	8005ca8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ca0:	f043 0304 	orr.w	r3, r3, #4
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3718      	adds	r7, #24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cb4:	b004      	add	sp, #16
 8005cb6:	4770      	bx	lr
 8005cb8:	803c3800 	.word	0x803c3800

08005cbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005cd6:	d901      	bls.n	8005cdc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e01b      	b.n	8005d14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	daf2      	bge.n	8005cca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	019b      	lsls	r3, r3, #6
 8005cec:	f043 0220 	orr.w	r2, r3, #32
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d00:	d901      	bls.n	8005d06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e006      	b.n	8005d14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	f003 0320 	and.w	r3, r3, #32
 8005d0e:	2b20      	cmp	r3, #32
 8005d10:	d0f0      	beq.n	8005cf4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3714      	adds	r7, #20
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d38:	d901      	bls.n	8005d3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e018      	b.n	8005d70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	daf2      	bge.n	8005d2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005d46:	2300      	movs	r3, #0
 8005d48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2210      	movs	r2, #16
 8005d4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	3301      	adds	r3, #1
 8005d54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d5c:	d901      	bls.n	8005d62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e006      	b.n	8005d70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	f003 0310 	and.w	r3, r3, #16
 8005d6a:	2b10      	cmp	r3, #16
 8005d6c:	d0f0      	beq.n	8005d50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	460b      	mov	r3, r1
 8005d86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	78fb      	ldrb	r3, [r7, #3]
 8005d96:	68f9      	ldr	r1, [r7, #12]
 8005d98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3714      	adds	r7, #20
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b087      	sub	sp, #28
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f003 0306 	and.w	r3, r3, #6
 8005dc6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d102      	bne.n	8005dd4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	75fb      	strb	r3, [r7, #23]
 8005dd2:	e00a      	b.n	8005dea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d002      	beq.n	8005de0 <USB_GetDevSpeed+0x32>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2b06      	cmp	r3, #6
 8005dde:	d102      	bne.n	8005de6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005de0:	2302      	movs	r3, #2
 8005de2:	75fb      	strb	r3, [r7, #23]
 8005de4:	e001      	b.n	8005dea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005de6:	230f      	movs	r3, #15
 8005de8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	371c      	adds	r7, #28
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	785b      	ldrb	r3, [r3, #1]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d13a      	bne.n	8005e8a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e1a:	69da      	ldr	r2, [r3, #28]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	f003 030f 	and.w	r3, r3, #15
 8005e24:	2101      	movs	r1, #1
 8005e26:	fa01 f303 	lsl.w	r3, r1, r3
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	68f9      	ldr	r1, [r7, #12]
 8005e2e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e32:	4313      	orrs	r3, r2
 8005e34:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d155      	bne.n	8005ef8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	791b      	ldrb	r3, [r3, #4]
 8005e66:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e68:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	059b      	lsls	r3, r3, #22
 8005e6e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e70:	4313      	orrs	r3, r2
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	0151      	lsls	r1, r2, #5
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	440a      	add	r2, r1
 8005e7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e86:	6013      	str	r3, [r2, #0]
 8005e88:	e036      	b.n	8005ef8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e90:	69da      	ldr	r2, [r3, #28]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	f003 030f 	and.w	r3, r3, #15
 8005e9a:	2101      	movs	r1, #1
 8005e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea0:	041b      	lsls	r3, r3, #16
 8005ea2:	68f9      	ldr	r1, [r7, #12]
 8005ea4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d11a      	bne.n	8005ef8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	015a      	lsls	r2, r3, #5
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	791b      	ldrb	r3, [r3, #4]
 8005edc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ede:	430b      	orrs	r3, r1
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	0151      	lsls	r1, r2, #5
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	440a      	add	r2, r1
 8005eea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005eee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ef2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ef6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
	...

08005f08 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	785b      	ldrb	r3, [r3, #1]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d161      	bne.n	8005fe8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f3a:	d11f      	bne.n	8005f7c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	015a      	lsls	r2, r3, #5
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	0151      	lsls	r1, r2, #5
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	440a      	add	r2, r1
 8005f52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f56:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005f5a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	0151      	lsls	r1, r2, #5
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	440a      	add	r2, r1
 8005f72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f76:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	f003 030f 	and.w	r3, r3, #15
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	43db      	mvns	r3, r3
 8005f96:	68f9      	ldr	r1, [r7, #12]
 8005f98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fa6:	69da      	ldr	r2, [r3, #28]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	f003 030f 	and.w	r3, r3, #15
 8005fb0:	2101      	movs	r1, #1
 8005fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	43db      	mvns	r3, r3
 8005fba:	68f9      	ldr	r1, [r7, #12]
 8005fbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	0159      	lsls	r1, r3, #5
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	440b      	add	r3, r1
 8005fda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fde:	4619      	mov	r1, r3
 8005fe0:	4b35      	ldr	r3, [pc, #212]	@ (80060b8 <USB_DeactivateEndpoint+0x1b0>)
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	600b      	str	r3, [r1, #0]
 8005fe6:	e060      	b.n	80060aa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ffa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ffe:	d11f      	bne.n	8006040 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	4413      	add	r3, r2
 8006008:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	0151      	lsls	r1, r2, #5
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	440a      	add	r2, r1
 8006016:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800601a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800601e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	0151      	lsls	r1, r2, #5
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	440a      	add	r2, r1
 8006036:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800603a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800603e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006046:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	f003 030f 	and.w	r3, r3, #15
 8006050:	2101      	movs	r1, #1
 8006052:	fa01 f303 	lsl.w	r3, r1, r3
 8006056:	041b      	lsls	r3, r3, #16
 8006058:	43db      	mvns	r3, r3
 800605a:	68f9      	ldr	r1, [r7, #12]
 800605c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006060:	4013      	ands	r3, r2
 8006062:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800606a:	69da      	ldr	r2, [r3, #28]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	f003 030f 	and.w	r3, r3, #15
 8006074:	2101      	movs	r1, #1
 8006076:	fa01 f303 	lsl.w	r3, r1, r3
 800607a:	041b      	lsls	r3, r3, #16
 800607c:	43db      	mvns	r3, r3
 800607e:	68f9      	ldr	r1, [r7, #12]
 8006080:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006084:	4013      	ands	r3, r2
 8006086:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	015a      	lsls	r2, r3, #5
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4413      	add	r3, r2
 8006090:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	0159      	lsls	r1, r3, #5
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	440b      	add	r3, r1
 800609e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060a2:	4619      	mov	r1, r3
 80060a4:	4b05      	ldr	r3, [pc, #20]	@ (80060bc <USB_DeactivateEndpoint+0x1b4>)
 80060a6:	4013      	ands	r3, r2
 80060a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr
 80060b8:	ec337800 	.word	0xec337800
 80060bc:	eff37800 	.word	0xeff37800

080060c0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08a      	sub	sp, #40	@ 0x28
 80060c4:	af02      	add	r7, sp, #8
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	4613      	mov	r3, r2
 80060cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	785b      	ldrb	r3, [r3, #1]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	f040 817f 	bne.w	80063e0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d132      	bne.n	8006150 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	0151      	lsls	r1, r2, #5
 80060fc:	69fa      	ldr	r2, [r7, #28]
 80060fe:	440a      	add	r2, r1
 8006100:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006104:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006108:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800610c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	4413      	add	r3, r2
 8006116:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	0151      	lsls	r1, r2, #5
 8006120:	69fa      	ldr	r2, [r7, #28]
 8006122:	440a      	add	r2, r1
 8006124:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006128:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800612c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	4413      	add	r3, r2
 8006136:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	0151      	lsls	r1, r2, #5
 8006140:	69fa      	ldr	r2, [r7, #28]
 8006142:	440a      	add	r2, r1
 8006144:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006148:	0cdb      	lsrs	r3, r3, #19
 800614a:	04db      	lsls	r3, r3, #19
 800614c:	6113      	str	r3, [r2, #16]
 800614e:	e097      	b.n	8006280 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	4413      	add	r3, r2
 8006158:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	69ba      	ldr	r2, [r7, #24]
 8006160:	0151      	lsls	r1, r2, #5
 8006162:	69fa      	ldr	r2, [r7, #28]
 8006164:	440a      	add	r2, r1
 8006166:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800616a:	0cdb      	lsrs	r3, r3, #19
 800616c:	04db      	lsls	r3, r3, #19
 800616e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	4413      	add	r3, r2
 8006178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	69ba      	ldr	r2, [r7, #24]
 8006180:	0151      	lsls	r1, r2, #5
 8006182:	69fa      	ldr	r2, [r7, #28]
 8006184:	440a      	add	r2, r1
 8006186:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800618a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800618e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006192:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d11a      	bne.n	80061d0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	691a      	ldr	r2, [r3, #16]
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d903      	bls.n	80061ae <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	689a      	ldr	r2, [r3, #8]
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	0151      	lsls	r1, r2, #5
 80061c0:	69fa      	ldr	r2, [r7, #28]
 80061c2:	440a      	add	r2, r1
 80061c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80061cc:	6113      	str	r3, [r2, #16]
 80061ce:	e044      	b.n	800625a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	691a      	ldr	r2, [r3, #16]
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	4413      	add	r3, r2
 80061da:	1e5a      	subs	r2, r3, #1
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	015a      	lsls	r2, r3, #5
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	4413      	add	r3, r2
 80061ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061f2:	691a      	ldr	r2, [r3, #16]
 80061f4:	8afb      	ldrh	r3, [r7, #22]
 80061f6:	04d9      	lsls	r1, r3, #19
 80061f8:	4ba4      	ldr	r3, [pc, #656]	@ (800648c <USB_EPStartXfer+0x3cc>)
 80061fa:	400b      	ands	r3, r1
 80061fc:	69b9      	ldr	r1, [r7, #24]
 80061fe:	0148      	lsls	r0, r1, #5
 8006200:	69f9      	ldr	r1, [r7, #28]
 8006202:	4401      	add	r1, r0
 8006204:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006208:	4313      	orrs	r3, r2
 800620a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	791b      	ldrb	r3, [r3, #4]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d122      	bne.n	800625a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	4413      	add	r3, r2
 800621c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	69ba      	ldr	r2, [r7, #24]
 8006224:	0151      	lsls	r1, r2, #5
 8006226:	69fa      	ldr	r2, [r7, #28]
 8006228:	440a      	add	r2, r1
 800622a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800622e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006232:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	015a      	lsls	r2, r3, #5
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	4413      	add	r3, r2
 800623c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006240:	691a      	ldr	r2, [r3, #16]
 8006242:	8afb      	ldrh	r3, [r7, #22]
 8006244:	075b      	lsls	r3, r3, #29
 8006246:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800624a:	69b9      	ldr	r1, [r7, #24]
 800624c:	0148      	lsls	r0, r1, #5
 800624e:	69f9      	ldr	r1, [r7, #28]
 8006250:	4401      	add	r1, r0
 8006252:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006256:	4313      	orrs	r3, r2
 8006258:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006266:	691a      	ldr	r2, [r3, #16]
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006270:	69b9      	ldr	r1, [r7, #24]
 8006272:	0148      	lsls	r0, r1, #5
 8006274:	69f9      	ldr	r1, [r7, #28]
 8006276:	4401      	add	r1, r0
 8006278:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800627c:	4313      	orrs	r3, r2
 800627e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006280:	79fb      	ldrb	r3, [r7, #7]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d14b      	bne.n	800631e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d009      	beq.n	80062a2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	015a      	lsls	r2, r3, #5
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	4413      	add	r3, r2
 8006296:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800629a:	461a      	mov	r2, r3
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	69db      	ldr	r3, [r3, #28]
 80062a0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	791b      	ldrb	r3, [r3, #4]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d128      	bne.n	80062fc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d110      	bne.n	80062dc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	69ba      	ldr	r2, [r7, #24]
 80062ca:	0151      	lsls	r1, r2, #5
 80062cc:	69fa      	ldr	r2, [r7, #28]
 80062ce:	440a      	add	r2, r1
 80062d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	e00f      	b.n	80062fc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	69ba      	ldr	r2, [r7, #24]
 80062ec:	0151      	lsls	r1, r2, #5
 80062ee:	69fa      	ldr	r2, [r7, #28]
 80062f0:	440a      	add	r2, r1
 80062f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062fa:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	4413      	add	r3, r2
 8006304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	69ba      	ldr	r2, [r7, #24]
 800630c:	0151      	lsls	r1, r2, #5
 800630e:	69fa      	ldr	r2, [r7, #28]
 8006310:	440a      	add	r2, r1
 8006312:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006316:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800631a:	6013      	str	r3, [r2, #0]
 800631c:	e166      	b.n	80065ec <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	69ba      	ldr	r2, [r7, #24]
 800632e:	0151      	lsls	r1, r2, #5
 8006330:	69fa      	ldr	r2, [r7, #28]
 8006332:	440a      	add	r2, r1
 8006334:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006338:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800633c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	791b      	ldrb	r3, [r3, #4]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d015      	beq.n	8006372 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	2b00      	cmp	r3, #0
 800634c:	f000 814e 	beq.w	80065ec <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006356:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	f003 030f 	and.w	r3, r3, #15
 8006360:	2101      	movs	r1, #1
 8006362:	fa01 f303 	lsl.w	r3, r1, r3
 8006366:	69f9      	ldr	r1, [r7, #28]
 8006368:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800636c:	4313      	orrs	r3, r2
 800636e:	634b      	str	r3, [r1, #52]	@ 0x34
 8006370:	e13c      	b.n	80065ec <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800637e:	2b00      	cmp	r3, #0
 8006380:	d110      	bne.n	80063a4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	4413      	add	r3, r2
 800638a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	0151      	lsls	r1, r2, #5
 8006394:	69fa      	ldr	r2, [r7, #28]
 8006396:	440a      	add	r2, r1
 8006398:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800639c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80063a0:	6013      	str	r3, [r2, #0]
 80063a2:	e00f      	b.n	80063c4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	69ba      	ldr	r2, [r7, #24]
 80063b4:	0151      	lsls	r1, r2, #5
 80063b6:	69fa      	ldr	r2, [r7, #28]
 80063b8:	440a      	add	r2, r1
 80063ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063c2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	68d9      	ldr	r1, [r3, #12]
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	781a      	ldrb	r2, [r3, #0]
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	b298      	uxth	r0, r3
 80063d2:	79fb      	ldrb	r3, [r7, #7]
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	4603      	mov	r3, r0
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f000 f9b9 	bl	8006750 <USB_WritePacket>
 80063de:	e105      	b.n	80065ec <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	0151      	lsls	r1, r2, #5
 80063f2:	69fa      	ldr	r2, [r7, #28]
 80063f4:	440a      	add	r2, r1
 80063f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063fa:	0cdb      	lsrs	r3, r3, #19
 80063fc:	04db      	lsls	r3, r3, #19
 80063fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	015a      	lsls	r2, r3, #5
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	4413      	add	r3, r2
 8006408:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	69ba      	ldr	r2, [r7, #24]
 8006410:	0151      	lsls	r1, r2, #5
 8006412:	69fa      	ldr	r2, [r7, #28]
 8006414:	440a      	add	r2, r1
 8006416:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800641a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800641e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006422:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d132      	bne.n	8006490 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d003      	beq.n	800643a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	689a      	ldr	r2, [r3, #8]
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	689a      	ldr	r2, [r3, #8]
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	015a      	lsls	r2, r3, #5
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	4413      	add	r3, r2
 800644a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800644e:	691a      	ldr	r2, [r3, #16]
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006458:	69b9      	ldr	r1, [r7, #24]
 800645a:	0148      	lsls	r0, r1, #5
 800645c:	69f9      	ldr	r1, [r7, #28]
 800645e:	4401      	add	r1, r0
 8006460:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006464:	4313      	orrs	r3, r2
 8006466:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	015a      	lsls	r2, r3, #5
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	4413      	add	r3, r2
 8006470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	69ba      	ldr	r2, [r7, #24]
 8006478:	0151      	lsls	r1, r2, #5
 800647a:	69fa      	ldr	r2, [r7, #28]
 800647c:	440a      	add	r2, r1
 800647e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006482:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006486:	6113      	str	r3, [r2, #16]
 8006488:	e062      	b.n	8006550 <USB_EPStartXfer+0x490>
 800648a:	bf00      	nop
 800648c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d123      	bne.n	80064e0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	015a      	lsls	r2, r3, #5
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	4413      	add	r3, r2
 80064a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064a4:	691a      	ldr	r2, [r3, #16]
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064ae:	69b9      	ldr	r1, [r7, #24]
 80064b0:	0148      	lsls	r0, r1, #5
 80064b2:	69f9      	ldr	r1, [r7, #28]
 80064b4:	4401      	add	r1, r0
 80064b6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80064ba:	4313      	orrs	r3, r2
 80064bc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	69ba      	ldr	r2, [r7, #24]
 80064ce:	0151      	lsls	r1, r2, #5
 80064d0:	69fa      	ldr	r2, [r7, #28]
 80064d2:	440a      	add	r2, r1
 80064d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80064dc:	6113      	str	r3, [r2, #16]
 80064de:	e037      	b.n	8006550 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	691a      	ldr	r2, [r3, #16]
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	4413      	add	r3, r2
 80064ea:	1e5a      	subs	r2, r3, #1
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	8afa      	ldrh	r2, [r7, #22]
 80064fc:	fb03 f202 	mul.w	r2, r3, r2
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	015a      	lsls	r2, r3, #5
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	4413      	add	r3, r2
 800650c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006510:	691a      	ldr	r2, [r3, #16]
 8006512:	8afb      	ldrh	r3, [r7, #22]
 8006514:	04d9      	lsls	r1, r3, #19
 8006516:	4b38      	ldr	r3, [pc, #224]	@ (80065f8 <USB_EPStartXfer+0x538>)
 8006518:	400b      	ands	r3, r1
 800651a:	69b9      	ldr	r1, [r7, #24]
 800651c:	0148      	lsls	r0, r1, #5
 800651e:	69f9      	ldr	r1, [r7, #28]
 8006520:	4401      	add	r1, r0
 8006522:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006526:	4313      	orrs	r3, r2
 8006528:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	015a      	lsls	r2, r3, #5
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	4413      	add	r3, r2
 8006532:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006536:	691a      	ldr	r2, [r3, #16]
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	6a1b      	ldr	r3, [r3, #32]
 800653c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006540:	69b9      	ldr	r1, [r7, #24]
 8006542:	0148      	lsls	r0, r1, #5
 8006544:	69f9      	ldr	r1, [r7, #28]
 8006546:	4401      	add	r1, r0
 8006548:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800654c:	4313      	orrs	r3, r2
 800654e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006550:	79fb      	ldrb	r3, [r7, #7]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d10d      	bne.n	8006572 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d009      	beq.n	8006572 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	68d9      	ldr	r1, [r3, #12]
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	015a      	lsls	r2, r3, #5
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	4413      	add	r3, r2
 800656a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800656e:	460a      	mov	r2, r1
 8006570:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	791b      	ldrb	r3, [r3, #4]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d128      	bne.n	80065cc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006586:	2b00      	cmp	r3, #0
 8006588:	d110      	bne.n	80065ac <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	4413      	add	r3, r2
 8006592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	0151      	lsls	r1, r2, #5
 800659c:	69fa      	ldr	r2, [r7, #28]
 800659e:	440a      	add	r2, r1
 80065a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80065a8:	6013      	str	r3, [r2, #0]
 80065aa:	e00f      	b.n	80065cc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	69ba      	ldr	r2, [r7, #24]
 80065bc:	0151      	lsls	r1, r2, #5
 80065be:	69fa      	ldr	r2, [r7, #28]
 80065c0:	440a      	add	r2, r1
 80065c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065ca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	69ba      	ldr	r2, [r7, #24]
 80065dc:	0151      	lsls	r1, r2, #5
 80065de:	69fa      	ldr	r2, [r7, #28]
 80065e0:	440a      	add	r2, r1
 80065e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065e6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80065ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3720      	adds	r7, #32
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	1ff80000 	.word	0x1ff80000

080065fc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b087      	sub	sp, #28
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006606:	2300      	movs	r3, #0
 8006608:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800660a:	2300      	movs	r3, #0
 800660c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	785b      	ldrb	r3, [r3, #1]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d14a      	bne.n	80066b0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	4413      	add	r3, r2
 8006624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800662e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006632:	f040 8086 	bne.w	8006742 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	4413      	add	r3, r2
 8006640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	7812      	ldrb	r2, [r2, #0]
 800664a:	0151      	lsls	r1, r2, #5
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	440a      	add	r2, r1
 8006650:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006654:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006658:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	015a      	lsls	r2, r3, #5
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	4413      	add	r3, r2
 8006664:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	7812      	ldrb	r2, [r2, #0]
 800666e:	0151      	lsls	r1, r2, #5
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	440a      	add	r2, r1
 8006674:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006678:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800667c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	3301      	adds	r3, #1
 8006682:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f242 7210 	movw	r2, #10000	@ 0x2710
 800668a:	4293      	cmp	r3, r2
 800668c:	d902      	bls.n	8006694 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	75fb      	strb	r3, [r7, #23]
          break;
 8006692:	e056      	b.n	8006742 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	4413      	add	r3, r2
 800669e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066ac:	d0e7      	beq.n	800667e <USB_EPStopXfer+0x82>
 80066ae:	e048      	b.n	8006742 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	015a      	lsls	r2, r3, #5
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	4413      	add	r3, r2
 80066ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066c8:	d13b      	bne.n	8006742 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	7812      	ldrb	r2, [r2, #0]
 80066de:	0151      	lsls	r1, r2, #5
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	440a      	add	r2, r1
 80066e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066e8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80066ec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	7812      	ldrb	r2, [r2, #0]
 8006702:	0151      	lsls	r1, r2, #5
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	440a      	add	r2, r1
 8006708:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800670c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006710:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	3301      	adds	r3, #1
 8006716:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800671e:	4293      	cmp	r3, r2
 8006720:	d902      	bls.n	8006728 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	75fb      	strb	r3, [r7, #23]
          break;
 8006726:	e00c      	b.n	8006742 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	015a      	lsls	r2, r3, #5
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	4413      	add	r3, r2
 8006732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800673c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006740:	d0e7      	beq.n	8006712 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006742:	7dfb      	ldrb	r3, [r7, #23]
}
 8006744:	4618      	mov	r0, r3
 8006746:	371c      	adds	r7, #28
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006750:	b480      	push	{r7}
 8006752:	b089      	sub	sp, #36	@ 0x24
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	4611      	mov	r1, r2
 800675c:	461a      	mov	r2, r3
 800675e:	460b      	mov	r3, r1
 8006760:	71fb      	strb	r3, [r7, #7]
 8006762:	4613      	mov	r3, r2
 8006764:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800676e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006772:	2b00      	cmp	r3, #0
 8006774:	d123      	bne.n	80067be <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006776:	88bb      	ldrh	r3, [r7, #4]
 8006778:	3303      	adds	r3, #3
 800677a:	089b      	lsrs	r3, r3, #2
 800677c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800677e:	2300      	movs	r3, #0
 8006780:	61bb      	str	r3, [r7, #24]
 8006782:	e018      	b.n	80067b6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006784:	79fb      	ldrb	r3, [r7, #7]
 8006786:	031a      	lsls	r2, r3, #12
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	4413      	add	r3, r2
 800678c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006790:	461a      	mov	r2, r3
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	3301      	adds	r3, #1
 800679c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	3301      	adds	r3, #1
 80067a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	3301      	adds	r3, #1
 80067a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	3301      	adds	r3, #1
 80067ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	3301      	adds	r3, #1
 80067b4:	61bb      	str	r3, [r7, #24]
 80067b6:	69ba      	ldr	r2, [r7, #24]
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d3e2      	bcc.n	8006784 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3724      	adds	r7, #36	@ 0x24
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b08b      	sub	sp, #44	@ 0x2c
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	4613      	mov	r3, r2
 80067d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80067e2:	88fb      	ldrh	r3, [r7, #6]
 80067e4:	089b      	lsrs	r3, r3, #2
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80067ea:	88fb      	ldrh	r3, [r7, #6]
 80067ec:	f003 0303 	and.w	r3, r3, #3
 80067f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80067f2:	2300      	movs	r3, #0
 80067f4:	623b      	str	r3, [r7, #32]
 80067f6:	e014      	b.n	8006822 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006802:	601a      	str	r2, [r3, #0]
    pDest++;
 8006804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006806:	3301      	adds	r3, #1
 8006808:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800680a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680c:	3301      	adds	r3, #1
 800680e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006812:	3301      	adds	r3, #1
 8006814:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006818:	3301      	adds	r3, #1
 800681a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	3301      	adds	r3, #1
 8006820:	623b      	str	r3, [r7, #32]
 8006822:	6a3a      	ldr	r2, [r7, #32]
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	429a      	cmp	r2, r3
 8006828:	d3e6      	bcc.n	80067f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800682a:	8bfb      	ldrh	r3, [r7, #30]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d01e      	beq.n	800686e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006830:	2300      	movs	r3, #0
 8006832:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800683a:	461a      	mov	r2, r3
 800683c:	f107 0310 	add.w	r3, r7, #16
 8006840:	6812      	ldr	r2, [r2, #0]
 8006842:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	6a3b      	ldr	r3, [r7, #32]
 8006848:	b2db      	uxtb	r3, r3
 800684a:	00db      	lsls	r3, r3, #3
 800684c:	fa22 f303 	lsr.w	r3, r2, r3
 8006850:	b2da      	uxtb	r2, r3
 8006852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006854:	701a      	strb	r2, [r3, #0]
      i++;
 8006856:	6a3b      	ldr	r3, [r7, #32]
 8006858:	3301      	adds	r3, #1
 800685a:	623b      	str	r3, [r7, #32]
      pDest++;
 800685c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685e:	3301      	adds	r3, #1
 8006860:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006862:	8bfb      	ldrh	r3, [r7, #30]
 8006864:	3b01      	subs	r3, #1
 8006866:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006868:	8bfb      	ldrh	r3, [r7, #30]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1ea      	bne.n	8006844 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800686e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006870:	4618      	mov	r0, r3
 8006872:	372c      	adds	r7, #44	@ 0x2c
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	785b      	ldrb	r3, [r3, #1]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d12c      	bne.n	80068f2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	db12      	blt.n	80068d0 <USB_EPSetStall+0x54>
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00f      	beq.n	80068d0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	015a      	lsls	r2, r3, #5
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	4413      	add	r3, r2
 80068b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	0151      	lsls	r1, r2, #5
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	440a      	add	r2, r1
 80068c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80068ce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	0151      	lsls	r1, r2, #5
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	440a      	add	r2, r1
 80068e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80068ee:	6013      	str	r3, [r2, #0]
 80068f0:	e02b      	b.n	800694a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	015a      	lsls	r2, r3, #5
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	db12      	blt.n	800692a <USB_EPSetStall+0xae>
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00f      	beq.n	800692a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	015a      	lsls	r2, r3, #5
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	4413      	add	r3, r2
 8006912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	0151      	lsls	r1, r2, #5
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	440a      	add	r2, r1
 8006920:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006924:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006928:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	015a      	lsls	r2, r3, #5
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	4413      	add	r3, r2
 8006932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	0151      	lsls	r1, r2, #5
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	440a      	add	r2, r1
 8006940:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006944:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006948:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3714      	adds	r7, #20
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	785b      	ldrb	r3, [r3, #1]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d128      	bne.n	80069c6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	015a      	lsls	r2, r3, #5
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	4413      	add	r3, r2
 800697c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	0151      	lsls	r1, r2, #5
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	440a      	add	r2, r1
 800698a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800698e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006992:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	791b      	ldrb	r3, [r3, #4]
 8006998:	2b03      	cmp	r3, #3
 800699a:	d003      	beq.n	80069a4 <USB_EPClearStall+0x4c>
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	791b      	ldrb	r3, [r3, #4]
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d138      	bne.n	8006a16 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	015a      	lsls	r2, r3, #5
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	4413      	add	r3, r2
 80069ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	0151      	lsls	r1, r2, #5
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	440a      	add	r2, r1
 80069ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069c2:	6013      	str	r3, [r2, #0]
 80069c4:	e027      	b.n	8006a16 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	0151      	lsls	r1, r2, #5
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	440a      	add	r2, r1
 80069dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069e0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069e4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	791b      	ldrb	r3, [r3, #4]
 80069ea:	2b03      	cmp	r3, #3
 80069ec:	d003      	beq.n	80069f6 <USB_EPClearStall+0x9e>
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	791b      	ldrb	r3, [r3, #4]
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d10f      	bne.n	8006a16 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	015a      	lsls	r2, r3, #5
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	4413      	add	r3, r2
 80069fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	0151      	lsls	r1, r2, #5
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	440a      	add	r2, r1
 8006a0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a14:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3714      	adds	r7, #20
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a42:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006a46:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	78fb      	ldrb	r3, [r7, #3]
 8006a52:	011b      	lsls	r3, r3, #4
 8006a54:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006a58:	68f9      	ldr	r1, [r7, #12]
 8006a5a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3714      	adds	r7, #20
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006a8a:	f023 0303 	bic.w	r3, r3, #3
 8006a8e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a9e:	f023 0302 	bic.w	r3, r3, #2
 8006aa2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3714      	adds	r7, #20
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	b085      	sub	sp, #20
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006acc:	f023 0303 	bic.w	r3, r3, #3
 8006ad0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ae0:	f043 0302 	orr.w	r3, r3, #2
 8006ae4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3714      	adds	r7, #20
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	695b      	ldr	r3, [r3, #20]
 8006b00:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	4013      	ands	r3, r2
 8006b0a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr

08006b1a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	b085      	sub	sp, #20
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b36:	69db      	ldr	r3, [r3, #28]
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	0c1b      	lsrs	r3, r3, #16
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3714      	adds	r7, #20
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b085      	sub	sp, #20
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b6a:	69db      	ldr	r3, [r3, #28]
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	4013      	ands	r3, r2
 8006b70:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	b29b      	uxth	r3, r3
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b085      	sub	sp, #20
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006b92:	78fb      	ldrb	r3, [r7, #3]
 8006b94:	015a      	lsls	r2, r3, #5
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	4413      	add	r3, r2
 8006b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	4013      	ands	r3, r2
 8006bae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006bb0:	68bb      	ldr	r3, [r7, #8]
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3714      	adds	r7, #20
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr

08006bbe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b087      	sub	sp, #28
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006be0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006be2:	78fb      	ldrb	r3, [r7, #3]
 8006be4:	f003 030f 	and.w	r3, r3, #15
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	fa22 f303 	lsr.w	r3, r2, r3
 8006bee:	01db      	lsls	r3, r3, #7
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006bf8:	78fb      	ldrb	r3, [r7, #3]
 8006bfa:	015a      	lsls	r2, r3, #5
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	4013      	ands	r3, r2
 8006c0a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c0c:	68bb      	ldr	r3, [r7, #8]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	371c      	adds	r7, #28
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b083      	sub	sp, #12
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	f003 0301 	and.w	r3, r3, #1
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b085      	sub	sp, #20
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c50:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006c54:	f023 0307 	bic.w	r3, r3, #7
 8006c58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3714      	adds	r7, #20
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b087      	sub	sp, #28
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	460b      	mov	r3, r1
 8006c86:	607a      	str	r2, [r7, #4]
 8006c88:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	333c      	adds	r3, #60	@ 0x3c
 8006c92:	3304      	adds	r3, #4
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	4a26      	ldr	r2, [pc, #152]	@ (8006d34 <USB_EP0_OutStart+0xb8>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d90a      	bls.n	8006cb6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cb0:	d101      	bne.n	8006cb6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	e037      	b.n	8006d26 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cd0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006cd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ce4:	f043 0318 	orr.w	r3, r3, #24
 8006ce8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cf8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006cfc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006cfe:	7afb      	ldrb	r3, [r7, #11]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d10f      	bne.n	8006d24 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d1e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006d22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	371c      	adds	r7, #28
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	4f54300a 	.word	0x4f54300a

08006d38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d40:	2300      	movs	r3, #0
 8006d42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	3301      	adds	r3, #1
 8006d48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d50:	d901      	bls.n	8006d56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e01b      	b.n	8006d8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	daf2      	bge.n	8006d44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	f043 0201 	orr.w	r2, r3, #1
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	3301      	adds	r3, #1
 8006d72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d7a:	d901      	bls.n	8006d80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e006      	b.n	8006d8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d0f0      	beq.n	8006d6e <USB_CoreReset+0x36>

  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3714      	adds	r7, #20
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
	...

08006d9c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	460b      	mov	r3, r1
 8006da6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006da8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006dac:	f002 fc94 	bl	80096d8 <USBD_static_malloc>
 8006db0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d109      	bne.n	8006dcc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	32b0      	adds	r2, #176	@ 0xb0
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006dc8:	2302      	movs	r3, #2
 8006dca:	e0d4      	b.n	8006f76 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006dcc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f002 fd18 	bl	8009808 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	32b0      	adds	r2, #176	@ 0xb0
 8006de2:	68f9      	ldr	r1, [r7, #12]
 8006de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	32b0      	adds	r2, #176	@ 0xb0
 8006df2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	7c1b      	ldrb	r3, [r3, #16]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d138      	bne.n	8006e76 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006e04:	4b5e      	ldr	r3, [pc, #376]	@ (8006f80 <USBD_CDC_Init+0x1e4>)
 8006e06:	7819      	ldrb	r1, [r3, #0]
 8006e08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e0c:	2202      	movs	r2, #2
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f002 fb3f 	bl	8009492 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006e14:	4b5a      	ldr	r3, [pc, #360]	@ (8006f80 <USBD_CDC_Init+0x1e4>)
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	f003 020f 	and.w	r2, r3, #15
 8006e1c:	6879      	ldr	r1, [r7, #4]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	440b      	add	r3, r1
 8006e28:	3324      	adds	r3, #36	@ 0x24
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006e2e:	4b55      	ldr	r3, [pc, #340]	@ (8006f84 <USBD_CDC_Init+0x1e8>)
 8006e30:	7819      	ldrb	r1, [r3, #0]
 8006e32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e36:	2202      	movs	r2, #2
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f002 fb2a 	bl	8009492 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006e3e:	4b51      	ldr	r3, [pc, #324]	@ (8006f84 <USBD_CDC_Init+0x1e8>)
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	f003 020f 	and.w	r2, r3, #15
 8006e46:	6879      	ldr	r1, [r7, #4]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	440b      	add	r3, r1
 8006e52:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006e56:	2201      	movs	r2, #1
 8006e58:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006e5a:	4b4b      	ldr	r3, [pc, #300]	@ (8006f88 <USBD_CDC_Init+0x1ec>)
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	f003 020f 	and.w	r2, r3, #15
 8006e62:	6879      	ldr	r1, [r7, #4]
 8006e64:	4613      	mov	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	4413      	add	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	440b      	add	r3, r1
 8006e6e:	3326      	adds	r3, #38	@ 0x26
 8006e70:	2210      	movs	r2, #16
 8006e72:	801a      	strh	r2, [r3, #0]
 8006e74:	e035      	b.n	8006ee2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006e76:	4b42      	ldr	r3, [pc, #264]	@ (8006f80 <USBD_CDC_Init+0x1e4>)
 8006e78:	7819      	ldrb	r1, [r3, #0]
 8006e7a:	2340      	movs	r3, #64	@ 0x40
 8006e7c:	2202      	movs	r2, #2
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f002 fb07 	bl	8009492 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006e84:	4b3e      	ldr	r3, [pc, #248]	@ (8006f80 <USBD_CDC_Init+0x1e4>)
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	f003 020f 	and.w	r2, r3, #15
 8006e8c:	6879      	ldr	r1, [r7, #4]
 8006e8e:	4613      	mov	r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	4413      	add	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	440b      	add	r3, r1
 8006e98:	3324      	adds	r3, #36	@ 0x24
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006e9e:	4b39      	ldr	r3, [pc, #228]	@ (8006f84 <USBD_CDC_Init+0x1e8>)
 8006ea0:	7819      	ldrb	r1, [r3, #0]
 8006ea2:	2340      	movs	r3, #64	@ 0x40
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f002 faf3 	bl	8009492 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006eac:	4b35      	ldr	r3, [pc, #212]	@ (8006f84 <USBD_CDC_Init+0x1e8>)
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	f003 020f 	and.w	r2, r3, #15
 8006eb4:	6879      	ldr	r1, [r7, #4]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4413      	add	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	440b      	add	r3, r1
 8006ec0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006ec8:	4b2f      	ldr	r3, [pc, #188]	@ (8006f88 <USBD_CDC_Init+0x1ec>)
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	f003 020f 	and.w	r2, r3, #15
 8006ed0:	6879      	ldr	r1, [r7, #4]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	4413      	add	r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	440b      	add	r3, r1
 8006edc:	3326      	adds	r3, #38	@ 0x26
 8006ede:	2210      	movs	r2, #16
 8006ee0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006ee2:	4b29      	ldr	r3, [pc, #164]	@ (8006f88 <USBD_CDC_Init+0x1ec>)
 8006ee4:	7819      	ldrb	r1, [r3, #0]
 8006ee6:	2308      	movs	r3, #8
 8006ee8:	2203      	movs	r2, #3
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f002 fad1 	bl	8009492 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006ef0:	4b25      	ldr	r3, [pc, #148]	@ (8006f88 <USBD_CDC_Init+0x1ec>)
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	f003 020f 	and.w	r2, r3, #15
 8006ef8:	6879      	ldr	r1, [r7, #4]
 8006efa:	4613      	mov	r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	440b      	add	r3, r1
 8006f04:	3324      	adds	r3, #36	@ 0x24
 8006f06:	2201      	movs	r2, #1
 8006f08:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	33b0      	adds	r3, #176	@ 0xb0
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	4413      	add	r3, r2
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d101      	bne.n	8006f44 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006f40:	2302      	movs	r3, #2
 8006f42:	e018      	b.n	8006f76 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	7c1b      	ldrb	r3, [r3, #16]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10a      	bne.n	8006f62 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8006f84 <USBD_CDC_Init+0x1e8>)
 8006f4e:	7819      	ldrb	r1, [r3, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006f56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f002 fb88 	bl	8009670 <USBD_LL_PrepareReceive>
 8006f60:	e008      	b.n	8006f74 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f62:	4b08      	ldr	r3, [pc, #32]	@ (8006f84 <USBD_CDC_Init+0x1e8>)
 8006f64:	7819      	ldrb	r1, [r3, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006f6c:	2340      	movs	r3, #64	@ 0x40
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f002 fb7e 	bl	8009670 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	20000093 	.word	0x20000093
 8006f84:	20000094 	.word	0x20000094
 8006f88:	20000095 	.word	0x20000095

08006f8c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	460b      	mov	r3, r1
 8006f96:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006f98:	4b3a      	ldr	r3, [pc, #232]	@ (8007084 <USBD_CDC_DeInit+0xf8>)
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f002 fa9d 	bl	80094de <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006fa4:	4b37      	ldr	r3, [pc, #220]	@ (8007084 <USBD_CDC_DeInit+0xf8>)
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	f003 020f 	and.w	r2, r3, #15
 8006fac:	6879      	ldr	r1, [r7, #4]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	440b      	add	r3, r1
 8006fb8:	3324      	adds	r3, #36	@ 0x24
 8006fba:	2200      	movs	r2, #0
 8006fbc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006fbe:	4b32      	ldr	r3, [pc, #200]	@ (8007088 <USBD_CDC_DeInit+0xfc>)
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f002 fa8a 	bl	80094de <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006fca:	4b2f      	ldr	r3, [pc, #188]	@ (8007088 <USBD_CDC_DeInit+0xfc>)
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	f003 020f 	and.w	r2, r3, #15
 8006fd2:	6879      	ldr	r1, [r7, #4]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4413      	add	r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	440b      	add	r3, r1
 8006fde:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006fe6:	4b29      	ldr	r3, [pc, #164]	@ (800708c <USBD_CDC_DeInit+0x100>)
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	4619      	mov	r1, r3
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f002 fa76 	bl	80094de <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006ff2:	4b26      	ldr	r3, [pc, #152]	@ (800708c <USBD_CDC_DeInit+0x100>)
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	f003 020f 	and.w	r2, r3, #15
 8006ffa:	6879      	ldr	r1, [r7, #4]
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	4413      	add	r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	440b      	add	r3, r1
 8007006:	3324      	adds	r3, #36	@ 0x24
 8007008:	2200      	movs	r2, #0
 800700a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800700c:	4b1f      	ldr	r3, [pc, #124]	@ (800708c <USBD_CDC_DeInit+0x100>)
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	f003 020f 	and.w	r2, r3, #15
 8007014:	6879      	ldr	r1, [r7, #4]
 8007016:	4613      	mov	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4413      	add	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	440b      	add	r3, r1
 8007020:	3326      	adds	r3, #38	@ 0x26
 8007022:	2200      	movs	r2, #0
 8007024:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	32b0      	adds	r2, #176	@ 0xb0
 8007030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d01f      	beq.n	8007078 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	33b0      	adds	r3, #176	@ 0xb0
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	4413      	add	r3, r2
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	32b0      	adds	r2, #176	@ 0xb0
 8007056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800705a:	4618      	mov	r0, r3
 800705c:	f002 fb4a 	bl	80096f4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	32b0      	adds	r2, #176	@ 0xb0
 800706a:	2100      	movs	r1, #0
 800706c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	20000093 	.word	0x20000093
 8007088:	20000094 	.word	0x20000094
 800708c:	20000095 	.word	0x20000095

08007090 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	32b0      	adds	r2, #176	@ 0xb0
 80070a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80070aa:	2300      	movs	r3, #0
 80070ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80070ae:	2300      	movs	r3, #0
 80070b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80070b2:	2300      	movs	r3, #0
 80070b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d101      	bne.n	80070c0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80070bc:	2303      	movs	r3, #3
 80070be:	e0bf      	b.n	8007240 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d050      	beq.n	800716e <USBD_CDC_Setup+0xde>
 80070cc:	2b20      	cmp	r3, #32
 80070ce:	f040 80af 	bne.w	8007230 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	88db      	ldrh	r3, [r3, #6]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d03a      	beq.n	8007150 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	b25b      	sxtb	r3, r3
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	da1b      	bge.n	800711c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	33b0      	adds	r3, #176	@ 0xb0
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	4413      	add	r3, r2
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80070fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80070fc:	683a      	ldr	r2, [r7, #0]
 80070fe:	88d2      	ldrh	r2, [r2, #6]
 8007100:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	88db      	ldrh	r3, [r3, #6]
 8007106:	2b07      	cmp	r3, #7
 8007108:	bf28      	it	cs
 800710a:	2307      	movcs	r3, #7
 800710c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	89fa      	ldrh	r2, [r7, #14]
 8007112:	4619      	mov	r1, r3
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f001 fd93 	bl	8008c40 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800711a:	e090      	b.n	800723e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	785a      	ldrb	r2, [r3, #1]
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	88db      	ldrh	r3, [r3, #6]
 800712a:	2b3f      	cmp	r3, #63	@ 0x3f
 800712c:	d803      	bhi.n	8007136 <USBD_CDC_Setup+0xa6>
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	88db      	ldrh	r3, [r3, #6]
 8007132:	b2da      	uxtb	r2, r3
 8007134:	e000      	b.n	8007138 <USBD_CDC_Setup+0xa8>
 8007136:	2240      	movs	r2, #64	@ 0x40
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800713e:	6939      	ldr	r1, [r7, #16]
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007146:	461a      	mov	r2, r3
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f001 fda5 	bl	8008c98 <USBD_CtlPrepareRx>
      break;
 800714e:	e076      	b.n	800723e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	33b0      	adds	r3, #176	@ 0xb0
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	4413      	add	r3, r2
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	683a      	ldr	r2, [r7, #0]
 8007164:	7850      	ldrb	r0, [r2, #1]
 8007166:	2200      	movs	r2, #0
 8007168:	6839      	ldr	r1, [r7, #0]
 800716a:	4798      	blx	r3
      break;
 800716c:	e067      	b.n	800723e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	785b      	ldrb	r3, [r3, #1]
 8007172:	2b0b      	cmp	r3, #11
 8007174:	d851      	bhi.n	800721a <USBD_CDC_Setup+0x18a>
 8007176:	a201      	add	r2, pc, #4	@ (adr r2, 800717c <USBD_CDC_Setup+0xec>)
 8007178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717c:	080071ad 	.word	0x080071ad
 8007180:	08007229 	.word	0x08007229
 8007184:	0800721b 	.word	0x0800721b
 8007188:	0800721b 	.word	0x0800721b
 800718c:	0800721b 	.word	0x0800721b
 8007190:	0800721b 	.word	0x0800721b
 8007194:	0800721b 	.word	0x0800721b
 8007198:	0800721b 	.word	0x0800721b
 800719c:	0800721b 	.word	0x0800721b
 80071a0:	0800721b 	.word	0x0800721b
 80071a4:	080071d7 	.word	0x080071d7
 80071a8:	08007201 	.word	0x08007201
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b03      	cmp	r3, #3
 80071b6:	d107      	bne.n	80071c8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80071b8:	f107 030a 	add.w	r3, r7, #10
 80071bc:	2202      	movs	r2, #2
 80071be:	4619      	mov	r1, r3
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f001 fd3d 	bl	8008c40 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071c6:	e032      	b.n	800722e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80071c8:	6839      	ldr	r1, [r7, #0]
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f001 fcbb 	bl	8008b46 <USBD_CtlError>
            ret = USBD_FAIL;
 80071d0:	2303      	movs	r3, #3
 80071d2:	75fb      	strb	r3, [r7, #23]
          break;
 80071d4:	e02b      	b.n	800722e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b03      	cmp	r3, #3
 80071e0:	d107      	bne.n	80071f2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80071e2:	f107 030d 	add.w	r3, r7, #13
 80071e6:	2201      	movs	r2, #1
 80071e8:	4619      	mov	r1, r3
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f001 fd28 	bl	8008c40 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071f0:	e01d      	b.n	800722e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80071f2:	6839      	ldr	r1, [r7, #0]
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f001 fca6 	bl	8008b46 <USBD_CtlError>
            ret = USBD_FAIL;
 80071fa:	2303      	movs	r3, #3
 80071fc:	75fb      	strb	r3, [r7, #23]
          break;
 80071fe:	e016      	b.n	800722e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b03      	cmp	r3, #3
 800720a:	d00f      	beq.n	800722c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800720c:	6839      	ldr	r1, [r7, #0]
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f001 fc99 	bl	8008b46 <USBD_CtlError>
            ret = USBD_FAIL;
 8007214:	2303      	movs	r3, #3
 8007216:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007218:	e008      	b.n	800722c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800721a:	6839      	ldr	r1, [r7, #0]
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f001 fc92 	bl	8008b46 <USBD_CtlError>
          ret = USBD_FAIL;
 8007222:	2303      	movs	r3, #3
 8007224:	75fb      	strb	r3, [r7, #23]
          break;
 8007226:	e002      	b.n	800722e <USBD_CDC_Setup+0x19e>
          break;
 8007228:	bf00      	nop
 800722a:	e008      	b.n	800723e <USBD_CDC_Setup+0x1ae>
          break;
 800722c:	bf00      	nop
      }
      break;
 800722e:	e006      	b.n	800723e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007230:	6839      	ldr	r1, [r7, #0]
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f001 fc87 	bl	8008b46 <USBD_CtlError>
      ret = USBD_FAIL;
 8007238:	2303      	movs	r3, #3
 800723a:	75fb      	strb	r3, [r7, #23]
      break;
 800723c:	bf00      	nop
  }

  return (uint8_t)ret;
 800723e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3718      	adds	r7, #24
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	460b      	mov	r3, r1
 8007252:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800725a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	32b0      	adds	r2, #176	@ 0xb0
 8007266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d101      	bne.n	8007272 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800726e:	2303      	movs	r3, #3
 8007270:	e065      	b.n	800733e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	32b0      	adds	r2, #176	@ 0xb0
 800727c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007280:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007282:	78fb      	ldrb	r3, [r7, #3]
 8007284:	f003 020f 	and.w	r2, r3, #15
 8007288:	6879      	ldr	r1, [r7, #4]
 800728a:	4613      	mov	r3, r2
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	4413      	add	r3, r2
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	440b      	add	r3, r1
 8007294:	3318      	adds	r3, #24
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d02f      	beq.n	80072fc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800729c:	78fb      	ldrb	r3, [r7, #3]
 800729e:	f003 020f 	and.w	r2, r3, #15
 80072a2:	6879      	ldr	r1, [r7, #4]
 80072a4:	4613      	mov	r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	4413      	add	r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	440b      	add	r3, r1
 80072ae:	3318      	adds	r3, #24
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	78fb      	ldrb	r3, [r7, #3]
 80072b4:	f003 010f 	and.w	r1, r3, #15
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	460b      	mov	r3, r1
 80072bc:	00db      	lsls	r3, r3, #3
 80072be:	440b      	add	r3, r1
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4403      	add	r3, r0
 80072c4:	331c      	adds	r3, #28
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	fbb2 f1f3 	udiv	r1, r2, r3
 80072cc:	fb01 f303 	mul.w	r3, r1, r3
 80072d0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d112      	bne.n	80072fc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80072d6:	78fb      	ldrb	r3, [r7, #3]
 80072d8:	f003 020f 	and.w	r2, r3, #15
 80072dc:	6879      	ldr	r1, [r7, #4]
 80072de:	4613      	mov	r3, r2
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4413      	add	r3, r2
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	440b      	add	r3, r1
 80072e8:	3318      	adds	r3, #24
 80072ea:	2200      	movs	r2, #0
 80072ec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80072ee:	78f9      	ldrb	r1, [r7, #3]
 80072f0:	2300      	movs	r3, #0
 80072f2:	2200      	movs	r2, #0
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f002 f99a 	bl	800962e <USBD_LL_Transmit>
 80072fa:	e01f      	b.n	800733c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	2200      	movs	r2, #0
 8007300:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	33b0      	adds	r3, #176	@ 0xb0
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	4413      	add	r3, r2
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d010      	beq.n	800733c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	33b0      	adds	r3, #176	@ 0xb0
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4413      	add	r3, r2
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	68ba      	ldr	r2, [r7, #8]
 800732e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007332:	68ba      	ldr	r2, [r7, #8]
 8007334:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007338:	78fa      	ldrb	r2, [r7, #3]
 800733a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b084      	sub	sp, #16
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	460b      	mov	r3, r1
 8007350:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	32b0      	adds	r2, #176	@ 0xb0
 800735c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007360:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	32b0      	adds	r2, #176	@ 0xb0
 800736c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d101      	bne.n	8007378 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007374:	2303      	movs	r3, #3
 8007376:	e01a      	b.n	80073ae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007378:	78fb      	ldrb	r3, [r7, #3]
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f002 f998 	bl	80096b2 <USBD_LL_GetRxDataSize>
 8007382:	4602      	mov	r2, r0
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	33b0      	adds	r3, #176	@ 0xb0
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4413      	add	r3, r2
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80073a8:	4611      	mov	r1, r2
 80073aa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b084      	sub	sp, #16
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	32b0      	adds	r2, #176	@ 0xb0
 80073c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d101      	bne.n	80073d8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e024      	b.n	8007422 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	33b0      	adds	r3, #176	@ 0xb0
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4413      	add	r3, r2
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d019      	beq.n	8007420 <USBD_CDC_EP0_RxReady+0x6a>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80073f2:	2bff      	cmp	r3, #255	@ 0xff
 80073f4:	d014      	beq.n	8007420 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	33b0      	adds	r3, #176	@ 0xb0
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4413      	add	r3, r2
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800740e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007416:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	22ff      	movs	r2, #255	@ 0xff
 800741c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
	...

0800742c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b086      	sub	sp, #24
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007434:	2182      	movs	r1, #130	@ 0x82
 8007436:	4818      	ldr	r0, [pc, #96]	@ (8007498 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007438:	f000 fd4f 	bl	8007eda <USBD_GetEpDesc>
 800743c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800743e:	2101      	movs	r1, #1
 8007440:	4815      	ldr	r0, [pc, #84]	@ (8007498 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007442:	f000 fd4a 	bl	8007eda <USBD_GetEpDesc>
 8007446:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007448:	2181      	movs	r1, #129	@ 0x81
 800744a:	4813      	ldr	r0, [pc, #76]	@ (8007498 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800744c:	f000 fd45 	bl	8007eda <USBD_GetEpDesc>
 8007450:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d002      	beq.n	800745e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	2210      	movs	r2, #16
 800745c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d006      	beq.n	8007472 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	2200      	movs	r2, #0
 8007468:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800746c:	711a      	strb	r2, [r3, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d006      	beq.n	8007486 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2200      	movs	r2, #0
 800747c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007480:	711a      	strb	r2, [r3, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2243      	movs	r2, #67	@ 0x43
 800748a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800748c:	4b02      	ldr	r3, [pc, #8]	@ (8007498 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800748e:	4618      	mov	r0, r3
 8007490:	3718      	adds	r7, #24
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	20000050 	.word	0x20000050

0800749c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b086      	sub	sp, #24
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80074a4:	2182      	movs	r1, #130	@ 0x82
 80074a6:	4818      	ldr	r0, [pc, #96]	@ (8007508 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80074a8:	f000 fd17 	bl	8007eda <USBD_GetEpDesc>
 80074ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80074ae:	2101      	movs	r1, #1
 80074b0:	4815      	ldr	r0, [pc, #84]	@ (8007508 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80074b2:	f000 fd12 	bl	8007eda <USBD_GetEpDesc>
 80074b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80074b8:	2181      	movs	r1, #129	@ 0x81
 80074ba:	4813      	ldr	r0, [pc, #76]	@ (8007508 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80074bc:	f000 fd0d 	bl	8007eda <USBD_GetEpDesc>
 80074c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d002      	beq.n	80074ce <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	2210      	movs	r2, #16
 80074cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d006      	beq.n	80074e2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	2200      	movs	r2, #0
 80074d8:	711a      	strb	r2, [r3, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	f042 0202 	orr.w	r2, r2, #2
 80074e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d006      	beq.n	80074f6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	711a      	strb	r2, [r3, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f042 0202 	orr.w	r2, r2, #2
 80074f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2243      	movs	r2, #67	@ 0x43
 80074fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80074fc:	4b02      	ldr	r3, [pc, #8]	@ (8007508 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3718      	adds	r7, #24
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	20000050 	.word	0x20000050

0800750c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b086      	sub	sp, #24
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007514:	2182      	movs	r1, #130	@ 0x82
 8007516:	4818      	ldr	r0, [pc, #96]	@ (8007578 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007518:	f000 fcdf 	bl	8007eda <USBD_GetEpDesc>
 800751c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800751e:	2101      	movs	r1, #1
 8007520:	4815      	ldr	r0, [pc, #84]	@ (8007578 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007522:	f000 fcda 	bl	8007eda <USBD_GetEpDesc>
 8007526:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007528:	2181      	movs	r1, #129	@ 0x81
 800752a:	4813      	ldr	r0, [pc, #76]	@ (8007578 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800752c:	f000 fcd5 	bl	8007eda <USBD_GetEpDesc>
 8007530:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d002      	beq.n	800753e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	2210      	movs	r2, #16
 800753c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d006      	beq.n	8007552 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	2200      	movs	r2, #0
 8007548:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800754c:	711a      	strb	r2, [r3, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d006      	beq.n	8007566 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007560:	711a      	strb	r2, [r3, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2243      	movs	r2, #67	@ 0x43
 800756a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800756c:	4b02      	ldr	r3, [pc, #8]	@ (8007578 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800756e:	4618      	mov	r0, r3
 8007570:	3718      	adds	r7, #24
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	20000050 	.word	0x20000050

0800757c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	220a      	movs	r2, #10
 8007588:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800758a:	4b03      	ldr	r3, [pc, #12]	@ (8007598 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800758c:	4618      	mov	r0, r3
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr
 8007598:	2000000c 	.word	0x2000000c

0800759c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d101      	bne.n	80075b0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e009      	b.n	80075c4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	33b0      	adds	r3, #176	@ 0xb0
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	4413      	add	r3, r2
 80075be:	683a      	ldr	r2, [r7, #0]
 80075c0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b087      	sub	sp, #28
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	32b0      	adds	r2, #176	@ 0xb0
 80075e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ea:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d101      	bne.n	80075f6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e008      	b.n	8007608 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	371c      	adds	r7, #28
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	32b0      	adds	r2, #176	@ 0xb0
 8007628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800762c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d101      	bne.n	8007638 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007634:	2303      	movs	r3, #3
 8007636:	e004      	b.n	8007642 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	683a      	ldr	r2, [r7, #0]
 800763c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3714      	adds	r7, #20
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
	...

08007650 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	32b0      	adds	r2, #176	@ 0xb0
 8007662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007666:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007668:	2301      	movs	r3, #1
 800766a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d101      	bne.n	8007676 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007672:	2303      	movs	r3, #3
 8007674:	e025      	b.n	80076c2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800767c:	2b00      	cmp	r3, #0
 800767e:	d11f      	bne.n	80076c0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	2201      	movs	r2, #1
 8007684:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007688:	4b10      	ldr	r3, [pc, #64]	@ (80076cc <USBD_CDC_TransmitPacket+0x7c>)
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	f003 020f 	and.w	r2, r3, #15
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	4613      	mov	r3, r2
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	4413      	add	r3, r2
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4403      	add	r3, r0
 80076a2:	3318      	adds	r3, #24
 80076a4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80076a6:	4b09      	ldr	r3, [pc, #36]	@ (80076cc <USBD_CDC_TransmitPacket+0x7c>)
 80076a8:	7819      	ldrb	r1, [r3, #0]
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f001 ffb9 	bl	800962e <USBD_LL_Transmit>

    ret = USBD_OK;
 80076bc:	2300      	movs	r3, #0
 80076be:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80076c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	20000093 	.word	0x20000093

080076d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	32b0      	adds	r2, #176	@ 0xb0
 80076e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	32b0      	adds	r2, #176	@ 0xb0
 80076f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e018      	b.n	8007730 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	7c1b      	ldrb	r3, [r3, #16]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10a      	bne.n	800771c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007706:	4b0c      	ldr	r3, [pc, #48]	@ (8007738 <USBD_CDC_ReceivePacket+0x68>)
 8007708:	7819      	ldrb	r1, [r3, #0]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007710:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f001 ffab 	bl	8009670 <USBD_LL_PrepareReceive>
 800771a:	e008      	b.n	800772e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800771c:	4b06      	ldr	r3, [pc, #24]	@ (8007738 <USBD_CDC_ReceivePacket+0x68>)
 800771e:	7819      	ldrb	r1, [r3, #0]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007726:	2340      	movs	r3, #64	@ 0x40
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f001 ffa1 	bl	8009670 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	20000094 	.word	0x20000094

0800773c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b086      	sub	sp, #24
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	4613      	mov	r3, r2
 8007748:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d101      	bne.n	8007754 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007750:	2303      	movs	r3, #3
 8007752:	e01f      	b.n	8007794 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d003      	beq.n	800777a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	79fa      	ldrb	r2, [r7, #7]
 8007786:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f001 fe1b 	bl	80093c4 <USBD_LL_Init>
 800778e:	4603      	mov	r3, r0
 8007790:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007792:	7dfb      	ldrb	r3, [r7, #23]
}
 8007794:	4618      	mov	r0, r3
 8007796:	3718      	adds	r7, #24
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80077a6:	2300      	movs	r3, #0
 80077a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d101      	bne.n	80077b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80077b0:	2303      	movs	r3, #3
 80077b2:	e025      	b.n	8007800 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	32ae      	adds	r2, #174	@ 0xae
 80077c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00f      	beq.n	80077f0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	32ae      	adds	r2, #174	@ 0xae
 80077da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077e0:	f107 020e 	add.w	r2, r7, #14
 80077e4:	4610      	mov	r0, r2
 80077e6:	4798      	blx	r3
 80077e8:	4602      	mov	r2, r0
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80077f6:	1c5a      	adds	r2, r3, #1
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f001 fe23 	bl	800945c <USBD_LL_Start>
 8007816:	4603      	mov	r3, r0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3708      	adds	r7, #8
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007828:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800782a:	4618      	mov	r0, r3
 800782c:	370c      	adds	r7, #12
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b084      	sub	sp, #16
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
 800783e:	460b      	mov	r3, r1
 8007840:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007842:	2300      	movs	r3, #0
 8007844:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800784c:	2b00      	cmp	r3, #0
 800784e:	d009      	beq.n	8007864 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	78fa      	ldrb	r2, [r7, #3]
 800785a:	4611      	mov	r1, r2
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	4798      	blx	r3
 8007860:	4603      	mov	r3, r0
 8007862:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007864:	7bfb      	ldrb	r3, [r7, #15]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b084      	sub	sp, #16
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	460b      	mov	r3, r1
 8007878:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	78fa      	ldrb	r2, [r7, #3]
 8007888:	4611      	mov	r1, r2
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	4798      	blx	r3
 800788e:	4603      	mov	r3, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d001      	beq.n	8007898 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007894:	2303      	movs	r3, #3
 8007896:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007898:	7bfb      	ldrb	r3, [r7, #15]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b084      	sub	sp, #16
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
 80078aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80078b2:	6839      	ldr	r1, [r7, #0]
 80078b4:	4618      	mov	r0, r3
 80078b6:	f001 f90c 	bl	8008ad2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2201      	movs	r2, #1
 80078be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80078c8:	461a      	mov	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80078d6:	f003 031f 	and.w	r3, r3, #31
 80078da:	2b02      	cmp	r3, #2
 80078dc:	d01a      	beq.n	8007914 <USBD_LL_SetupStage+0x72>
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d822      	bhi.n	8007928 <USBD_LL_SetupStage+0x86>
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d002      	beq.n	80078ec <USBD_LL_SetupStage+0x4a>
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d00a      	beq.n	8007900 <USBD_LL_SetupStage+0x5e>
 80078ea:	e01d      	b.n	8007928 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80078f2:	4619      	mov	r1, r3
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 fb63 	bl	8007fc0 <USBD_StdDevReq>
 80078fa:	4603      	mov	r3, r0
 80078fc:	73fb      	strb	r3, [r7, #15]
      break;
 80078fe:	e020      	b.n	8007942 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007906:	4619      	mov	r1, r3
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fbcb 	bl	80080a4 <USBD_StdItfReq>
 800790e:	4603      	mov	r3, r0
 8007910:	73fb      	strb	r3, [r7, #15]
      break;
 8007912:	e016      	b.n	8007942 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800791a:	4619      	mov	r1, r3
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fc2d 	bl	800817c <USBD_StdEPReq>
 8007922:	4603      	mov	r3, r0
 8007924:	73fb      	strb	r3, [r7, #15]
      break;
 8007926:	e00c      	b.n	8007942 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800792e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007932:	b2db      	uxtb	r3, r3
 8007934:	4619      	mov	r1, r3
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f001 fdf0 	bl	800951c <USBD_LL_StallEP>
 800793c:	4603      	mov	r3, r0
 800793e:	73fb      	strb	r3, [r7, #15]
      break;
 8007940:	bf00      	nop
  }

  return ret;
 8007942:	7bfb      	ldrb	r3, [r7, #15]
}
 8007944:	4618      	mov	r0, r3
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b086      	sub	sp, #24
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	460b      	mov	r3, r1
 8007956:	607a      	str	r2, [r7, #4]
 8007958:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800795a:	2300      	movs	r3, #0
 800795c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800795e:	7afb      	ldrb	r3, [r7, #11]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d16e      	bne.n	8007a42 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800796a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007972:	2b03      	cmp	r3, #3
 8007974:	f040 8098 	bne.w	8007aa8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	689a      	ldr	r2, [r3, #8]
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	429a      	cmp	r2, r3
 8007982:	d913      	bls.n	80079ac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	689a      	ldr	r2, [r3, #8]
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	1ad2      	subs	r2, r2, r3
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	68da      	ldr	r2, [r3, #12]
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	4293      	cmp	r3, r2
 800799c:	bf28      	it	cs
 800799e:	4613      	movcs	r3, r2
 80079a0:	461a      	mov	r2, r3
 80079a2:	6879      	ldr	r1, [r7, #4]
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f001 f994 	bl	8008cd2 <USBD_CtlContinueRx>
 80079aa:	e07d      	b.n	8007aa8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80079b2:	f003 031f 	and.w	r3, r3, #31
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d014      	beq.n	80079e4 <USBD_LL_DataOutStage+0x98>
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d81d      	bhi.n	80079fa <USBD_LL_DataOutStage+0xae>
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d002      	beq.n	80079c8 <USBD_LL_DataOutStage+0x7c>
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d003      	beq.n	80079ce <USBD_LL_DataOutStage+0x82>
 80079c6:	e018      	b.n	80079fa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80079c8:	2300      	movs	r3, #0
 80079ca:	75bb      	strb	r3, [r7, #22]
            break;
 80079cc:	e018      	b.n	8007a00 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	4619      	mov	r1, r3
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	f000 fa64 	bl	8007ea6 <USBD_CoreFindIF>
 80079de:	4603      	mov	r3, r0
 80079e0:	75bb      	strb	r3, [r7, #22]
            break;
 80079e2:	e00d      	b.n	8007a00 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	4619      	mov	r1, r3
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f000 fa66 	bl	8007ec0 <USBD_CoreFindEP>
 80079f4:	4603      	mov	r3, r0
 80079f6:	75bb      	strb	r3, [r7, #22]
            break;
 80079f8:	e002      	b.n	8007a00 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80079fa:	2300      	movs	r3, #0
 80079fc:	75bb      	strb	r3, [r7, #22]
            break;
 80079fe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007a00:	7dbb      	ldrb	r3, [r7, #22]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d119      	bne.n	8007a3a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	2b03      	cmp	r3, #3
 8007a10:	d113      	bne.n	8007a3a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007a12:	7dba      	ldrb	r2, [r7, #22]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	32ae      	adds	r2, #174	@ 0xae
 8007a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00b      	beq.n	8007a3a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007a22:	7dba      	ldrb	r2, [r7, #22]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007a2a:	7dba      	ldrb	r2, [r7, #22]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	32ae      	adds	r2, #174	@ 0xae
 8007a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f001 f95a 	bl	8008cf4 <USBD_CtlSendStatus>
 8007a40:	e032      	b.n	8007aa8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007a42:	7afb      	ldrb	r3, [r7, #11]
 8007a44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f000 fa37 	bl	8007ec0 <USBD_CoreFindEP>
 8007a52:	4603      	mov	r3, r0
 8007a54:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a56:	7dbb      	ldrb	r3, [r7, #22]
 8007a58:	2bff      	cmp	r3, #255	@ 0xff
 8007a5a:	d025      	beq.n	8007aa8 <USBD_LL_DataOutStage+0x15c>
 8007a5c:	7dbb      	ldrb	r3, [r7, #22]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d122      	bne.n	8007aa8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	2b03      	cmp	r3, #3
 8007a6c:	d117      	bne.n	8007a9e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007a6e:	7dba      	ldrb	r2, [r7, #22]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	32ae      	adds	r2, #174	@ 0xae
 8007a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00f      	beq.n	8007a9e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007a7e:	7dba      	ldrb	r2, [r7, #22]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007a86:	7dba      	ldrb	r2, [r7, #22]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	32ae      	adds	r2, #174	@ 0xae
 8007a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a90:	699b      	ldr	r3, [r3, #24]
 8007a92:	7afa      	ldrb	r2, [r7, #11]
 8007a94:	4611      	mov	r1, r2
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	4798      	blx	r3
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007a9e:	7dfb      	ldrb	r3, [r7, #23]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d001      	beq.n	8007aa8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007aa4:	7dfb      	ldrb	r3, [r7, #23]
 8007aa6:	e000      	b.n	8007aaa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3718      	adds	r7, #24
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b086      	sub	sp, #24
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	60f8      	str	r0, [r7, #12]
 8007aba:	460b      	mov	r3, r1
 8007abc:	607a      	str	r2, [r7, #4]
 8007abe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007ac0:	7afb      	ldrb	r3, [r7, #11]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d16f      	bne.n	8007ba6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	3314      	adds	r3, #20
 8007aca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007ad2:	2b02      	cmp	r3, #2
 8007ad4:	d15a      	bne.n	8007b8c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	689a      	ldr	r2, [r3, #8]
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d914      	bls.n	8007b0c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	689a      	ldr	r2, [r3, #8]
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	1ad2      	subs	r2, r2, r3
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	461a      	mov	r2, r3
 8007af6:	6879      	ldr	r1, [r7, #4]
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f001 f8bc 	bl	8008c76 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007afe:	2300      	movs	r3, #0
 8007b00:	2200      	movs	r2, #0
 8007b02:	2100      	movs	r1, #0
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f001 fdb3 	bl	8009670 <USBD_LL_PrepareReceive>
 8007b0a:	e03f      	b.n	8007b8c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	68da      	ldr	r2, [r3, #12]
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d11c      	bne.n	8007b52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d316      	bcc.n	8007b52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	685a      	ldr	r2, [r3, #4]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d20f      	bcs.n	8007b52 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b32:	2200      	movs	r2, #0
 8007b34:	2100      	movs	r1, #0
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f001 f89d 	bl	8008c76 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b44:	2300      	movs	r3, #0
 8007b46:	2200      	movs	r2, #0
 8007b48:	2100      	movs	r1, #0
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f001 fd90 	bl	8009670 <USBD_LL_PrepareReceive>
 8007b50:	e01c      	b.n	8007b8c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b03      	cmp	r3, #3
 8007b5c:	d10f      	bne.n	8007b7e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d009      	beq.n	8007b7e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b7e:	2180      	movs	r1, #128	@ 0x80
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f001 fccb 	bl	800951c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f001 f8c7 	bl	8008d1a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d03a      	beq.n	8007c0c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f7ff fe42 	bl	8007820 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007ba4:	e032      	b.n	8007c0c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007ba6:	7afb      	ldrb	r3, [r7, #11]
 8007ba8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	4619      	mov	r1, r3
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f000 f985 	bl	8007ec0 <USBD_CoreFindEP>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bba:	7dfb      	ldrb	r3, [r7, #23]
 8007bbc:	2bff      	cmp	r3, #255	@ 0xff
 8007bbe:	d025      	beq.n	8007c0c <USBD_LL_DataInStage+0x15a>
 8007bc0:	7dfb      	ldrb	r3, [r7, #23]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d122      	bne.n	8007c0c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	d11c      	bne.n	8007c0c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007bd2:	7dfa      	ldrb	r2, [r7, #23]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	32ae      	adds	r2, #174	@ 0xae
 8007bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d014      	beq.n	8007c0c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007be2:	7dfa      	ldrb	r2, [r7, #23]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007bea:	7dfa      	ldrb	r2, [r7, #23]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	32ae      	adds	r2, #174	@ 0xae
 8007bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	7afa      	ldrb	r2, [r7, #11]
 8007bf8:	4611      	mov	r1, r2
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	4798      	blx	r3
 8007bfe:	4603      	mov	r3, r0
 8007c00:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007c02:	7dbb      	ldrb	r3, [r7, #22]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d001      	beq.n	8007c0c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007c08:	7dbb      	ldrb	r3, [r7, #22]
 8007c0a:	e000      	b.n	8007c0e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3718      	adds	r7, #24
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b084      	sub	sp, #16
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d014      	beq.n	8007c7c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00e      	beq.n	8007c7c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	6852      	ldr	r2, [r2, #4]
 8007c6a:	b2d2      	uxtb	r2, r2
 8007c6c:	4611      	mov	r1, r2
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	4798      	blx	r3
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d001      	beq.n	8007c7c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c7c:	2340      	movs	r3, #64	@ 0x40
 8007c7e:	2200      	movs	r2, #0
 8007c80:	2100      	movs	r1, #0
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f001 fc05 	bl	8009492 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2240      	movs	r2, #64	@ 0x40
 8007c94:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c98:	2340      	movs	r3, #64	@ 0x40
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	2180      	movs	r1, #128	@ 0x80
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f001 fbf7 	bl	8009492 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2240      	movs	r2, #64	@ 0x40
 8007cae:	621a      	str	r2, [r3, #32]

  return ret;
 8007cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007cba:	b480      	push	{r7}
 8007cbc:	b083      	sub	sp, #12
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	78fa      	ldrb	r2, [r7, #3]
 8007cca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	370c      	adds	r7, #12
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr

08007cda <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007cda:	b480      	push	{r7}
 8007cdc:	b083      	sub	sp, #12
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	2b04      	cmp	r3, #4
 8007cec:	d006      	beq.n	8007cfc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cf4:	b2da      	uxtb	r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2204      	movs	r2, #4
 8007d00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b083      	sub	sp, #12
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b04      	cmp	r3, #4
 8007d24:	d106      	bne.n	8007d34 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007d2c:	b2da      	uxtb	r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	370c      	adds	r7, #12
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr

08007d42 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b082      	sub	sp, #8
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	2b03      	cmp	r3, #3
 8007d54:	d110      	bne.n	8007d78 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d00b      	beq.n	8007d78 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d66:	69db      	ldr	r3, [r3, #28]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d005      	beq.n	8007d78 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d72:	69db      	ldr	r3, [r3, #28]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b082      	sub	sp, #8
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	32ae      	adds	r2, #174	@ 0xae
 8007d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d101      	bne.n	8007da4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007da0:	2303      	movs	r3, #3
 8007da2:	e01c      	b.n	8007dde <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	2b03      	cmp	r3, #3
 8007dae:	d115      	bne.n	8007ddc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	32ae      	adds	r2, #174	@ 0xae
 8007dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dbe:	6a1b      	ldr	r3, [r3, #32]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00b      	beq.n	8007ddc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	32ae      	adds	r2, #174	@ 0xae
 8007dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd2:	6a1b      	ldr	r3, [r3, #32]
 8007dd4:	78fa      	ldrb	r2, [r7, #3]
 8007dd6:	4611      	mov	r1, r2
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3708      	adds	r7, #8
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b082      	sub	sp, #8
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
 8007dee:	460b      	mov	r3, r1
 8007df0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	32ae      	adds	r2, #174	@ 0xae
 8007dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d101      	bne.n	8007e08 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007e04:	2303      	movs	r3, #3
 8007e06:	e01c      	b.n	8007e42 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	2b03      	cmp	r3, #3
 8007e12:	d115      	bne.n	8007e40 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	32ae      	adds	r2, #174	@ 0xae
 8007e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00b      	beq.n	8007e40 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	32ae      	adds	r2, #174	@ 0xae
 8007e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e38:	78fa      	ldrb	r2, [r7, #3]
 8007e3a:	4611      	mov	r1, r2
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3708      	adds	r7, #8
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b083      	sub	sp, #12
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e52:	2300      	movs	r3, #0
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00e      	beq.n	8007e9c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	6852      	ldr	r2, [r2, #4]
 8007e8a:	b2d2      	uxtb	r2, r2
 8007e8c:	4611      	mov	r1, r2
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	4798      	blx	r3
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d001      	beq.n	8007e9c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b083      	sub	sp, #12
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
 8007eae:	460b      	mov	r3, r1
 8007eb0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007eb2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007ecc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	370c      	adds	r7, #12
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr

08007eda <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b086      	sub	sp, #24
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	885b      	ldrh	r3, [r3, #2]
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	7812      	ldrb	r2, [r2, #0]
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d91f      	bls.n	8007f40 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007f06:	e013      	b.n	8007f30 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007f08:	f107 030a 	add.w	r3, r7, #10
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	6978      	ldr	r0, [r7, #20]
 8007f10:	f000 f81b 	bl	8007f4a <USBD_GetNextDesc>
 8007f14:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	785b      	ldrb	r3, [r3, #1]
 8007f1a:	2b05      	cmp	r3, #5
 8007f1c:	d108      	bne.n	8007f30 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	789b      	ldrb	r3, [r3, #2]
 8007f26:	78fa      	ldrb	r2, [r7, #3]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d008      	beq.n	8007f3e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	885b      	ldrh	r3, [r3, #2]
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	897b      	ldrh	r3, [r7, #10]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d8e5      	bhi.n	8007f08 <USBD_GetEpDesc+0x2e>
 8007f3c:	e000      	b.n	8007f40 <USBD_GetEpDesc+0x66>
          break;
 8007f3e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007f40:	693b      	ldr	r3, [r7, #16]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3718      	adds	r7, #24
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007f4a:	b480      	push	{r7}
 8007f4c:	b085      	sub	sp, #20
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
 8007f52:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	881b      	ldrh	r3, [r3, #0]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	7812      	ldrb	r2, [r2, #0]
 8007f60:	4413      	add	r3, r2
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4413      	add	r3, r2
 8007f72:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007f74:	68fb      	ldr	r3, [r7, #12]
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3714      	adds	r7, #20
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr

08007f82 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b087      	sub	sp, #28
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	3301      	adds	r3, #1
 8007f98:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007fa0:	8a3b      	ldrh	r3, [r7, #16]
 8007fa2:	021b      	lsls	r3, r3, #8
 8007fa4:	b21a      	sxth	r2, r3
 8007fa6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	b21b      	sxth	r3, r3
 8007fae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007fb0:	89fb      	ldrh	r3, [r7, #14]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	371c      	adds	r7, #28
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
	...

08007fc0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007fd6:	2b40      	cmp	r3, #64	@ 0x40
 8007fd8:	d005      	beq.n	8007fe6 <USBD_StdDevReq+0x26>
 8007fda:	2b40      	cmp	r3, #64	@ 0x40
 8007fdc:	d857      	bhi.n	800808e <USBD_StdDevReq+0xce>
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00f      	beq.n	8008002 <USBD_StdDevReq+0x42>
 8007fe2:	2b20      	cmp	r3, #32
 8007fe4:	d153      	bne.n	800808e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	32ae      	adds	r2, #174	@ 0xae
 8007ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	6839      	ldr	r1, [r7, #0]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	4798      	blx	r3
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8008000:	e04a      	b.n	8008098 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	785b      	ldrb	r3, [r3, #1]
 8008006:	2b09      	cmp	r3, #9
 8008008:	d83b      	bhi.n	8008082 <USBD_StdDevReq+0xc2>
 800800a:	a201      	add	r2, pc, #4	@ (adr r2, 8008010 <USBD_StdDevReq+0x50>)
 800800c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008010:	08008065 	.word	0x08008065
 8008014:	08008079 	.word	0x08008079
 8008018:	08008083 	.word	0x08008083
 800801c:	0800806f 	.word	0x0800806f
 8008020:	08008083 	.word	0x08008083
 8008024:	08008043 	.word	0x08008043
 8008028:	08008039 	.word	0x08008039
 800802c:	08008083 	.word	0x08008083
 8008030:	0800805b 	.word	0x0800805b
 8008034:	0800804d 	.word	0x0800804d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fa3c 	bl	80084b8 <USBD_GetDescriptor>
          break;
 8008040:	e024      	b.n	800808c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008042:	6839      	ldr	r1, [r7, #0]
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fba1 	bl	800878c <USBD_SetAddress>
          break;
 800804a:	e01f      	b.n	800808c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800804c:	6839      	ldr	r1, [r7, #0]
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 fbe0 	bl	8008814 <USBD_SetConfig>
 8008054:	4603      	mov	r3, r0
 8008056:	73fb      	strb	r3, [r7, #15]
          break;
 8008058:	e018      	b.n	800808c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fc83 	bl	8008968 <USBD_GetConfig>
          break;
 8008062:	e013      	b.n	800808c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fcb4 	bl	80089d4 <USBD_GetStatus>
          break;
 800806c:	e00e      	b.n	800808c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fce3 	bl	8008a3c <USBD_SetFeature>
          break;
 8008076:	e009      	b.n	800808c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008078:	6839      	ldr	r1, [r7, #0]
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 fd07 	bl	8008a8e <USBD_ClrFeature>
          break;
 8008080:	e004      	b.n	800808c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008082:	6839      	ldr	r1, [r7, #0]
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fd5e 	bl	8008b46 <USBD_CtlError>
          break;
 800808a:	bf00      	nop
      }
      break;
 800808c:	e004      	b.n	8008098 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800808e:	6839      	ldr	r1, [r7, #0]
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fd58 	bl	8008b46 <USBD_CtlError>
      break;
 8008096:	bf00      	nop
  }

  return ret;
 8008098:	7bfb      	ldrb	r3, [r7, #15]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop

080080a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80080ba:	2b40      	cmp	r3, #64	@ 0x40
 80080bc:	d005      	beq.n	80080ca <USBD_StdItfReq+0x26>
 80080be:	2b40      	cmp	r3, #64	@ 0x40
 80080c0:	d852      	bhi.n	8008168 <USBD_StdItfReq+0xc4>
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d001      	beq.n	80080ca <USBD_StdItfReq+0x26>
 80080c6:	2b20      	cmp	r3, #32
 80080c8:	d14e      	bne.n	8008168 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	3b01      	subs	r3, #1
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	d840      	bhi.n	800815a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	889b      	ldrh	r3, [r3, #4]
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d836      	bhi.n	8008150 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	889b      	ldrh	r3, [r3, #4]
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	4619      	mov	r1, r3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f7ff fedb 	bl	8007ea6 <USBD_CoreFindIF>
 80080f0:	4603      	mov	r3, r0
 80080f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080f4:	7bbb      	ldrb	r3, [r7, #14]
 80080f6:	2bff      	cmp	r3, #255	@ 0xff
 80080f8:	d01d      	beq.n	8008136 <USBD_StdItfReq+0x92>
 80080fa:	7bbb      	ldrb	r3, [r7, #14]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d11a      	bne.n	8008136 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008100:	7bba      	ldrb	r2, [r7, #14]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	32ae      	adds	r2, #174	@ 0xae
 8008106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00f      	beq.n	8008130 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008110:	7bba      	ldrb	r2, [r7, #14]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008118:	7bba      	ldrb	r2, [r7, #14]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	32ae      	adds	r2, #174	@ 0xae
 800811e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	4798      	blx	r3
 800812a:	4603      	mov	r3, r0
 800812c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800812e:	e004      	b.n	800813a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008130:	2303      	movs	r3, #3
 8008132:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008134:	e001      	b.n	800813a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008136:	2303      	movs	r3, #3
 8008138:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	88db      	ldrh	r3, [r3, #6]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d110      	bne.n	8008164 <USBD_StdItfReq+0xc0>
 8008142:	7bfb      	ldrb	r3, [r7, #15]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10d      	bne.n	8008164 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 fdd3 	bl	8008cf4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800814e:	e009      	b.n	8008164 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008150:	6839      	ldr	r1, [r7, #0]
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fcf7 	bl	8008b46 <USBD_CtlError>
          break;
 8008158:	e004      	b.n	8008164 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800815a:	6839      	ldr	r1, [r7, #0]
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 fcf2 	bl	8008b46 <USBD_CtlError>
          break;
 8008162:	e000      	b.n	8008166 <USBD_StdItfReq+0xc2>
          break;
 8008164:	bf00      	nop
      }
      break;
 8008166:	e004      	b.n	8008172 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 fceb 	bl	8008b46 <USBD_CtlError>
      break;
 8008170:	bf00      	nop
  }

  return ret;
 8008172:	7bfb      	ldrb	r3, [r7, #15]
}
 8008174:	4618      	mov	r0, r3
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008186:	2300      	movs	r3, #0
 8008188:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	889b      	ldrh	r3, [r3, #4]
 800818e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008198:	2b40      	cmp	r3, #64	@ 0x40
 800819a:	d007      	beq.n	80081ac <USBD_StdEPReq+0x30>
 800819c:	2b40      	cmp	r3, #64	@ 0x40
 800819e:	f200 817f 	bhi.w	80084a0 <USBD_StdEPReq+0x324>
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d02a      	beq.n	80081fc <USBD_StdEPReq+0x80>
 80081a6:	2b20      	cmp	r3, #32
 80081a8:	f040 817a 	bne.w	80084a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80081ac:	7bbb      	ldrb	r3, [r7, #14]
 80081ae:	4619      	mov	r1, r3
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f7ff fe85 	bl	8007ec0 <USBD_CoreFindEP>
 80081b6:	4603      	mov	r3, r0
 80081b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081ba:	7b7b      	ldrb	r3, [r7, #13]
 80081bc:	2bff      	cmp	r3, #255	@ 0xff
 80081be:	f000 8174 	beq.w	80084aa <USBD_StdEPReq+0x32e>
 80081c2:	7b7b      	ldrb	r3, [r7, #13]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f040 8170 	bne.w	80084aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80081ca:	7b7a      	ldrb	r2, [r7, #13]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80081d2:	7b7a      	ldrb	r2, [r7, #13]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	32ae      	adds	r2, #174	@ 0xae
 80081d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	f000 8163 	beq.w	80084aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80081e4:	7b7a      	ldrb	r2, [r7, #13]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	32ae      	adds	r2, #174	@ 0xae
 80081ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	6839      	ldr	r1, [r7, #0]
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	4798      	blx	r3
 80081f6:	4603      	mov	r3, r0
 80081f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80081fa:	e156      	b.n	80084aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	785b      	ldrb	r3, [r3, #1]
 8008200:	2b03      	cmp	r3, #3
 8008202:	d008      	beq.n	8008216 <USBD_StdEPReq+0x9a>
 8008204:	2b03      	cmp	r3, #3
 8008206:	f300 8145 	bgt.w	8008494 <USBD_StdEPReq+0x318>
 800820a:	2b00      	cmp	r3, #0
 800820c:	f000 809b 	beq.w	8008346 <USBD_StdEPReq+0x1ca>
 8008210:	2b01      	cmp	r3, #1
 8008212:	d03c      	beq.n	800828e <USBD_StdEPReq+0x112>
 8008214:	e13e      	b.n	8008494 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800821c:	b2db      	uxtb	r3, r3
 800821e:	2b02      	cmp	r3, #2
 8008220:	d002      	beq.n	8008228 <USBD_StdEPReq+0xac>
 8008222:	2b03      	cmp	r3, #3
 8008224:	d016      	beq.n	8008254 <USBD_StdEPReq+0xd8>
 8008226:	e02c      	b.n	8008282 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008228:	7bbb      	ldrb	r3, [r7, #14]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00d      	beq.n	800824a <USBD_StdEPReq+0xce>
 800822e:	7bbb      	ldrb	r3, [r7, #14]
 8008230:	2b80      	cmp	r3, #128	@ 0x80
 8008232:	d00a      	beq.n	800824a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008234:	7bbb      	ldrb	r3, [r7, #14]
 8008236:	4619      	mov	r1, r3
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f001 f96f 	bl	800951c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800823e:	2180      	movs	r1, #128	@ 0x80
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f001 f96b 	bl	800951c <USBD_LL_StallEP>
 8008246:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008248:	e020      	b.n	800828c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800824a:	6839      	ldr	r1, [r7, #0]
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 fc7a 	bl	8008b46 <USBD_CtlError>
              break;
 8008252:	e01b      	b.n	800828c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	885b      	ldrh	r3, [r3, #2]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10e      	bne.n	800827a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800825c:	7bbb      	ldrb	r3, [r7, #14]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00b      	beq.n	800827a <USBD_StdEPReq+0xfe>
 8008262:	7bbb      	ldrb	r3, [r7, #14]
 8008264:	2b80      	cmp	r3, #128	@ 0x80
 8008266:	d008      	beq.n	800827a <USBD_StdEPReq+0xfe>
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	88db      	ldrh	r3, [r3, #6]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d104      	bne.n	800827a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008270:	7bbb      	ldrb	r3, [r7, #14]
 8008272:	4619      	mov	r1, r3
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f001 f951 	bl	800951c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fd3a 	bl	8008cf4 <USBD_CtlSendStatus>

              break;
 8008280:	e004      	b.n	800828c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fc5e 	bl	8008b46 <USBD_CtlError>
              break;
 800828a:	bf00      	nop
          }
          break;
 800828c:	e107      	b.n	800849e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008294:	b2db      	uxtb	r3, r3
 8008296:	2b02      	cmp	r3, #2
 8008298:	d002      	beq.n	80082a0 <USBD_StdEPReq+0x124>
 800829a:	2b03      	cmp	r3, #3
 800829c:	d016      	beq.n	80082cc <USBD_StdEPReq+0x150>
 800829e:	e04b      	b.n	8008338 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082a0:	7bbb      	ldrb	r3, [r7, #14]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00d      	beq.n	80082c2 <USBD_StdEPReq+0x146>
 80082a6:	7bbb      	ldrb	r3, [r7, #14]
 80082a8:	2b80      	cmp	r3, #128	@ 0x80
 80082aa:	d00a      	beq.n	80082c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80082ac:	7bbb      	ldrb	r3, [r7, #14]
 80082ae:	4619      	mov	r1, r3
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f001 f933 	bl	800951c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80082b6:	2180      	movs	r1, #128	@ 0x80
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f001 f92f 	bl	800951c <USBD_LL_StallEP>
 80082be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082c0:	e040      	b.n	8008344 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 fc3e 	bl	8008b46 <USBD_CtlError>
              break;
 80082ca:	e03b      	b.n	8008344 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	885b      	ldrh	r3, [r3, #2]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d136      	bne.n	8008342 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
 80082d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d004      	beq.n	80082e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80082de:	7bbb      	ldrb	r3, [r7, #14]
 80082e0:	4619      	mov	r1, r3
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f001 f939 	bl	800955a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 fd03 	bl	8008cf4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80082ee:	7bbb      	ldrb	r3, [r7, #14]
 80082f0:	4619      	mov	r1, r3
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f7ff fde4 	bl	8007ec0 <USBD_CoreFindEP>
 80082f8:	4603      	mov	r3, r0
 80082fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082fc:	7b7b      	ldrb	r3, [r7, #13]
 80082fe:	2bff      	cmp	r3, #255	@ 0xff
 8008300:	d01f      	beq.n	8008342 <USBD_StdEPReq+0x1c6>
 8008302:	7b7b      	ldrb	r3, [r7, #13]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d11c      	bne.n	8008342 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008308:	7b7a      	ldrb	r2, [r7, #13]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008310:	7b7a      	ldrb	r2, [r7, #13]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	32ae      	adds	r2, #174	@ 0xae
 8008316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d010      	beq.n	8008342 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008320:	7b7a      	ldrb	r2, [r7, #13]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	32ae      	adds	r2, #174	@ 0xae
 8008326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	6839      	ldr	r1, [r7, #0]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	4798      	blx	r3
 8008332:	4603      	mov	r3, r0
 8008334:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008336:	e004      	b.n	8008342 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008338:	6839      	ldr	r1, [r7, #0]
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fc03 	bl	8008b46 <USBD_CtlError>
              break;
 8008340:	e000      	b.n	8008344 <USBD_StdEPReq+0x1c8>
              break;
 8008342:	bf00      	nop
          }
          break;
 8008344:	e0ab      	b.n	800849e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800834c:	b2db      	uxtb	r3, r3
 800834e:	2b02      	cmp	r3, #2
 8008350:	d002      	beq.n	8008358 <USBD_StdEPReq+0x1dc>
 8008352:	2b03      	cmp	r3, #3
 8008354:	d032      	beq.n	80083bc <USBD_StdEPReq+0x240>
 8008356:	e097      	b.n	8008488 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008358:	7bbb      	ldrb	r3, [r7, #14]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d007      	beq.n	800836e <USBD_StdEPReq+0x1f2>
 800835e:	7bbb      	ldrb	r3, [r7, #14]
 8008360:	2b80      	cmp	r3, #128	@ 0x80
 8008362:	d004      	beq.n	800836e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fbed 	bl	8008b46 <USBD_CtlError>
                break;
 800836c:	e091      	b.n	8008492 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800836e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008372:	2b00      	cmp	r3, #0
 8008374:	da0b      	bge.n	800838e <USBD_StdEPReq+0x212>
 8008376:	7bbb      	ldrb	r3, [r7, #14]
 8008378:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800837c:	4613      	mov	r3, r2
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	4413      	add	r3, r2
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	3310      	adds	r3, #16
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	4413      	add	r3, r2
 800838a:	3304      	adds	r3, #4
 800838c:	e00b      	b.n	80083a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800838e:	7bbb      	ldrb	r3, [r7, #14]
 8008390:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008394:	4613      	mov	r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	4413      	add	r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	4413      	add	r3, r2
 80083a4:	3304      	adds	r3, #4
 80083a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	2200      	movs	r2, #0
 80083ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	2202      	movs	r2, #2
 80083b2:	4619      	mov	r1, r3
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fc43 	bl	8008c40 <USBD_CtlSendData>
              break;
 80083ba:	e06a      	b.n	8008492 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80083bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	da11      	bge.n	80083e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80083c4:	7bbb      	ldrb	r3, [r7, #14]
 80083c6:	f003 020f 	and.w	r2, r3, #15
 80083ca:	6879      	ldr	r1, [r7, #4]
 80083cc:	4613      	mov	r3, r2
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	4413      	add	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	440b      	add	r3, r1
 80083d6:	3324      	adds	r3, #36	@ 0x24
 80083d8:	881b      	ldrh	r3, [r3, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d117      	bne.n	800840e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80083de:	6839      	ldr	r1, [r7, #0]
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 fbb0 	bl	8008b46 <USBD_CtlError>
                  break;
 80083e6:	e054      	b.n	8008492 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80083e8:	7bbb      	ldrb	r3, [r7, #14]
 80083ea:	f003 020f 	and.w	r2, r3, #15
 80083ee:	6879      	ldr	r1, [r7, #4]
 80083f0:	4613      	mov	r3, r2
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4413      	add	r3, r2
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	440b      	add	r3, r1
 80083fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80083fe:	881b      	ldrh	r3, [r3, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d104      	bne.n	800840e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 fb9d 	bl	8008b46 <USBD_CtlError>
                  break;
 800840c:	e041      	b.n	8008492 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800840e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008412:	2b00      	cmp	r3, #0
 8008414:	da0b      	bge.n	800842e <USBD_StdEPReq+0x2b2>
 8008416:	7bbb      	ldrb	r3, [r7, #14]
 8008418:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800841c:	4613      	mov	r3, r2
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	4413      	add	r3, r2
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	3310      	adds	r3, #16
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	4413      	add	r3, r2
 800842a:	3304      	adds	r3, #4
 800842c:	e00b      	b.n	8008446 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800842e:	7bbb      	ldrb	r3, [r7, #14]
 8008430:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008434:	4613      	mov	r3, r2
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4413      	add	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	4413      	add	r3, r2
 8008444:	3304      	adds	r3, #4
 8008446:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008448:	7bbb      	ldrb	r3, [r7, #14]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d002      	beq.n	8008454 <USBD_StdEPReq+0x2d8>
 800844e:	7bbb      	ldrb	r3, [r7, #14]
 8008450:	2b80      	cmp	r3, #128	@ 0x80
 8008452:	d103      	bne.n	800845c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	2200      	movs	r2, #0
 8008458:	601a      	str	r2, [r3, #0]
 800845a:	e00e      	b.n	800847a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800845c:	7bbb      	ldrb	r3, [r7, #14]
 800845e:	4619      	mov	r1, r3
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f001 f899 	bl	8009598 <USBD_LL_IsStallEP>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d003      	beq.n	8008474 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	2201      	movs	r2, #1
 8008470:	601a      	str	r2, [r3, #0]
 8008472:	e002      	b.n	800847a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	2200      	movs	r2, #0
 8008478:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	2202      	movs	r2, #2
 800847e:	4619      	mov	r1, r3
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 fbdd 	bl	8008c40 <USBD_CtlSendData>
              break;
 8008486:	e004      	b.n	8008492 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008488:	6839      	ldr	r1, [r7, #0]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fb5b 	bl	8008b46 <USBD_CtlError>
              break;
 8008490:	bf00      	nop
          }
          break;
 8008492:	e004      	b.n	800849e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fb55 	bl	8008b46 <USBD_CtlError>
          break;
 800849c:	bf00      	nop
      }
      break;
 800849e:	e005      	b.n	80084ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80084a0:	6839      	ldr	r1, [r7, #0]
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 fb4f 	bl	8008b46 <USBD_CtlError>
      break;
 80084a8:	e000      	b.n	80084ac <USBD_StdEPReq+0x330>
      break;
 80084aa:	bf00      	nop
  }

  return ret;
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
	...

080084b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084c2:	2300      	movs	r3, #0
 80084c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80084c6:	2300      	movs	r3, #0
 80084c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80084ca:	2300      	movs	r3, #0
 80084cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	885b      	ldrh	r3, [r3, #2]
 80084d2:	0a1b      	lsrs	r3, r3, #8
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	3b01      	subs	r3, #1
 80084d8:	2b06      	cmp	r3, #6
 80084da:	f200 8128 	bhi.w	800872e <USBD_GetDescriptor+0x276>
 80084de:	a201      	add	r2, pc, #4	@ (adr r2, 80084e4 <USBD_GetDescriptor+0x2c>)
 80084e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e4:	08008501 	.word	0x08008501
 80084e8:	08008519 	.word	0x08008519
 80084ec:	08008559 	.word	0x08008559
 80084f0:	0800872f 	.word	0x0800872f
 80084f4:	0800872f 	.word	0x0800872f
 80084f8:	080086cf 	.word	0x080086cf
 80084fc:	080086fb 	.word	0x080086fb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	7c12      	ldrb	r2, [r2, #16]
 800850c:	f107 0108 	add.w	r1, r7, #8
 8008510:	4610      	mov	r0, r2
 8008512:	4798      	blx	r3
 8008514:	60f8      	str	r0, [r7, #12]
      break;
 8008516:	e112      	b.n	800873e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	7c1b      	ldrb	r3, [r3, #16]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d10d      	bne.n	800853c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008528:	f107 0208 	add.w	r2, r7, #8
 800852c:	4610      	mov	r0, r2
 800852e:	4798      	blx	r3
 8008530:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	3301      	adds	r3, #1
 8008536:	2202      	movs	r2, #2
 8008538:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800853a:	e100      	b.n	800873e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008544:	f107 0208 	add.w	r2, r7, #8
 8008548:	4610      	mov	r0, r2
 800854a:	4798      	blx	r3
 800854c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	3301      	adds	r3, #1
 8008552:	2202      	movs	r2, #2
 8008554:	701a      	strb	r2, [r3, #0]
      break;
 8008556:	e0f2      	b.n	800873e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	885b      	ldrh	r3, [r3, #2]
 800855c:	b2db      	uxtb	r3, r3
 800855e:	2b05      	cmp	r3, #5
 8008560:	f200 80ac 	bhi.w	80086bc <USBD_GetDescriptor+0x204>
 8008564:	a201      	add	r2, pc, #4	@ (adr r2, 800856c <USBD_GetDescriptor+0xb4>)
 8008566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856a:	bf00      	nop
 800856c:	08008585 	.word	0x08008585
 8008570:	080085b9 	.word	0x080085b9
 8008574:	080085ed 	.word	0x080085ed
 8008578:	08008621 	.word	0x08008621
 800857c:	08008655 	.word	0x08008655
 8008580:	08008689 	.word	0x08008689
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00b      	beq.n	80085a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	7c12      	ldrb	r2, [r2, #16]
 800859c:	f107 0108 	add.w	r1, r7, #8
 80085a0:	4610      	mov	r0, r2
 80085a2:	4798      	blx	r3
 80085a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085a6:	e091      	b.n	80086cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085a8:	6839      	ldr	r1, [r7, #0]
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 facb 	bl	8008b46 <USBD_CtlError>
            err++;
 80085b0:	7afb      	ldrb	r3, [r7, #11]
 80085b2:	3301      	adds	r3, #1
 80085b4:	72fb      	strb	r3, [r7, #11]
          break;
 80085b6:	e089      	b.n	80086cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00b      	beq.n	80085dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	7c12      	ldrb	r2, [r2, #16]
 80085d0:	f107 0108 	add.w	r1, r7, #8
 80085d4:	4610      	mov	r0, r2
 80085d6:	4798      	blx	r3
 80085d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085da:	e077      	b.n	80086cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085dc:	6839      	ldr	r1, [r7, #0]
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fab1 	bl	8008b46 <USBD_CtlError>
            err++;
 80085e4:	7afb      	ldrb	r3, [r7, #11]
 80085e6:	3301      	adds	r3, #1
 80085e8:	72fb      	strb	r3, [r7, #11]
          break;
 80085ea:	e06f      	b.n	80086cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00b      	beq.n	8008610 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	7c12      	ldrb	r2, [r2, #16]
 8008604:	f107 0108 	add.w	r1, r7, #8
 8008608:	4610      	mov	r0, r2
 800860a:	4798      	blx	r3
 800860c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800860e:	e05d      	b.n	80086cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008610:	6839      	ldr	r1, [r7, #0]
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fa97 	bl	8008b46 <USBD_CtlError>
            err++;
 8008618:	7afb      	ldrb	r3, [r7, #11]
 800861a:	3301      	adds	r3, #1
 800861c:	72fb      	strb	r3, [r7, #11]
          break;
 800861e:	e055      	b.n	80086cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00b      	beq.n	8008644 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	7c12      	ldrb	r2, [r2, #16]
 8008638:	f107 0108 	add.w	r1, r7, #8
 800863c:	4610      	mov	r0, r2
 800863e:	4798      	blx	r3
 8008640:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008642:	e043      	b.n	80086cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008644:	6839      	ldr	r1, [r7, #0]
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fa7d 	bl	8008b46 <USBD_CtlError>
            err++;
 800864c:	7afb      	ldrb	r3, [r7, #11]
 800864e:	3301      	adds	r3, #1
 8008650:	72fb      	strb	r3, [r7, #11]
          break;
 8008652:	e03b      	b.n	80086cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800865a:	695b      	ldr	r3, [r3, #20]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00b      	beq.n	8008678 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008666:	695b      	ldr	r3, [r3, #20]
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	7c12      	ldrb	r2, [r2, #16]
 800866c:	f107 0108 	add.w	r1, r7, #8
 8008670:	4610      	mov	r0, r2
 8008672:	4798      	blx	r3
 8008674:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008676:	e029      	b.n	80086cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008678:	6839      	ldr	r1, [r7, #0]
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fa63 	bl	8008b46 <USBD_CtlError>
            err++;
 8008680:	7afb      	ldrb	r3, [r7, #11]
 8008682:	3301      	adds	r3, #1
 8008684:	72fb      	strb	r3, [r7, #11]
          break;
 8008686:	e021      	b.n	80086cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00b      	beq.n	80086ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800869a:	699b      	ldr	r3, [r3, #24]
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	7c12      	ldrb	r2, [r2, #16]
 80086a0:	f107 0108 	add.w	r1, r7, #8
 80086a4:	4610      	mov	r0, r2
 80086a6:	4798      	blx	r3
 80086a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086aa:	e00f      	b.n	80086cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086ac:	6839      	ldr	r1, [r7, #0]
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fa49 	bl	8008b46 <USBD_CtlError>
            err++;
 80086b4:	7afb      	ldrb	r3, [r7, #11]
 80086b6:	3301      	adds	r3, #1
 80086b8:	72fb      	strb	r3, [r7, #11]
          break;
 80086ba:	e007      	b.n	80086cc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80086bc:	6839      	ldr	r1, [r7, #0]
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 fa41 	bl	8008b46 <USBD_CtlError>
          err++;
 80086c4:	7afb      	ldrb	r3, [r7, #11]
 80086c6:	3301      	adds	r3, #1
 80086c8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80086ca:	bf00      	nop
      }
      break;
 80086cc:	e037      	b.n	800873e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	7c1b      	ldrb	r3, [r3, #16]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d109      	bne.n	80086ea <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086de:	f107 0208 	add.w	r2, r7, #8
 80086e2:	4610      	mov	r0, r2
 80086e4:	4798      	blx	r3
 80086e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086e8:	e029      	b.n	800873e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 fa2a 	bl	8008b46 <USBD_CtlError>
        err++;
 80086f2:	7afb      	ldrb	r3, [r7, #11]
 80086f4:	3301      	adds	r3, #1
 80086f6:	72fb      	strb	r3, [r7, #11]
      break;
 80086f8:	e021      	b.n	800873e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	7c1b      	ldrb	r3, [r3, #16]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d10d      	bne.n	800871e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800870a:	f107 0208 	add.w	r2, r7, #8
 800870e:	4610      	mov	r0, r2
 8008710:	4798      	blx	r3
 8008712:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	3301      	adds	r3, #1
 8008718:	2207      	movs	r2, #7
 800871a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800871c:	e00f      	b.n	800873e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800871e:	6839      	ldr	r1, [r7, #0]
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fa10 	bl	8008b46 <USBD_CtlError>
        err++;
 8008726:	7afb      	ldrb	r3, [r7, #11]
 8008728:	3301      	adds	r3, #1
 800872a:	72fb      	strb	r3, [r7, #11]
      break;
 800872c:	e007      	b.n	800873e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800872e:	6839      	ldr	r1, [r7, #0]
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 fa08 	bl	8008b46 <USBD_CtlError>
      err++;
 8008736:	7afb      	ldrb	r3, [r7, #11]
 8008738:	3301      	adds	r3, #1
 800873a:	72fb      	strb	r3, [r7, #11]
      break;
 800873c:	bf00      	nop
  }

  if (err != 0U)
 800873e:	7afb      	ldrb	r3, [r7, #11]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d11e      	bne.n	8008782 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	88db      	ldrh	r3, [r3, #6]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d016      	beq.n	800877a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800874c:	893b      	ldrh	r3, [r7, #8]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00e      	beq.n	8008770 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	88da      	ldrh	r2, [r3, #6]
 8008756:	893b      	ldrh	r3, [r7, #8]
 8008758:	4293      	cmp	r3, r2
 800875a:	bf28      	it	cs
 800875c:	4613      	movcs	r3, r2
 800875e:	b29b      	uxth	r3, r3
 8008760:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008762:	893b      	ldrh	r3, [r7, #8]
 8008764:	461a      	mov	r2, r3
 8008766:	68f9      	ldr	r1, [r7, #12]
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 fa69 	bl	8008c40 <USBD_CtlSendData>
 800876e:	e009      	b.n	8008784 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 f9e7 	bl	8008b46 <USBD_CtlError>
 8008778:	e004      	b.n	8008784 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 faba 	bl	8008cf4 <USBD_CtlSendStatus>
 8008780:	e000      	b.n	8008784 <USBD_GetDescriptor+0x2cc>
    return;
 8008782:	bf00      	nop
  }
}
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop

0800878c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	889b      	ldrh	r3, [r3, #4]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d131      	bne.n	8008802 <USBD_SetAddress+0x76>
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	88db      	ldrh	r3, [r3, #6]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d12d      	bne.n	8008802 <USBD_SetAddress+0x76>
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	885b      	ldrh	r3, [r3, #2]
 80087aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80087ac:	d829      	bhi.n	8008802 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	885b      	ldrh	r3, [r3, #2]
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	2b03      	cmp	r3, #3
 80087c4:	d104      	bne.n	80087d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80087c6:	6839      	ldr	r1, [r7, #0]
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 f9bc 	bl	8008b46 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087ce:	e01d      	b.n	800880c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	7bfa      	ldrb	r2, [r7, #15]
 80087d4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
 80087da:	4619      	mov	r1, r3
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 ff07 	bl	80095f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fa86 	bl	8008cf4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80087e8:	7bfb      	ldrb	r3, [r7, #15]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d004      	beq.n	80087f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2202      	movs	r2, #2
 80087f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087f6:	e009      	b.n	800880c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008800:	e004      	b.n	800880c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008802:	6839      	ldr	r1, [r7, #0]
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 f99e 	bl	8008b46 <USBD_CtlError>
  }
}
 800880a:	bf00      	nop
 800880c:	bf00      	nop
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800881e:	2300      	movs	r3, #0
 8008820:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	885b      	ldrh	r3, [r3, #2]
 8008826:	b2da      	uxtb	r2, r3
 8008828:	4b4e      	ldr	r3, [pc, #312]	@ (8008964 <USBD_SetConfig+0x150>)
 800882a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800882c:	4b4d      	ldr	r3, [pc, #308]	@ (8008964 <USBD_SetConfig+0x150>)
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	2b01      	cmp	r3, #1
 8008832:	d905      	bls.n	8008840 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008834:	6839      	ldr	r1, [r7, #0]
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 f985 	bl	8008b46 <USBD_CtlError>
    return USBD_FAIL;
 800883c:	2303      	movs	r3, #3
 800883e:	e08c      	b.n	800895a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008846:	b2db      	uxtb	r3, r3
 8008848:	2b02      	cmp	r3, #2
 800884a:	d002      	beq.n	8008852 <USBD_SetConfig+0x3e>
 800884c:	2b03      	cmp	r3, #3
 800884e:	d029      	beq.n	80088a4 <USBD_SetConfig+0x90>
 8008850:	e075      	b.n	800893e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008852:	4b44      	ldr	r3, [pc, #272]	@ (8008964 <USBD_SetConfig+0x150>)
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d020      	beq.n	800889c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800885a:	4b42      	ldr	r3, [pc, #264]	@ (8008964 <USBD_SetConfig+0x150>)
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	461a      	mov	r2, r3
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008864:	4b3f      	ldr	r3, [pc, #252]	@ (8008964 <USBD_SetConfig+0x150>)
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	4619      	mov	r1, r3
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f7fe ffe3 	bl	8007836 <USBD_SetClassConfig>
 8008870:	4603      	mov	r3, r0
 8008872:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008874:	7bfb      	ldrb	r3, [r7, #15]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d008      	beq.n	800888c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800887a:	6839      	ldr	r1, [r7, #0]
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 f962 	bl	8008b46 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2202      	movs	r2, #2
 8008886:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800888a:	e065      	b.n	8008958 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 fa31 	bl	8008cf4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2203      	movs	r2, #3
 8008896:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800889a:	e05d      	b.n	8008958 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 fa29 	bl	8008cf4 <USBD_CtlSendStatus>
      break;
 80088a2:	e059      	b.n	8008958 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80088a4:	4b2f      	ldr	r3, [pc, #188]	@ (8008964 <USBD_SetConfig+0x150>)
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d112      	bne.n	80088d2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2202      	movs	r2, #2
 80088b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80088b4:	4b2b      	ldr	r3, [pc, #172]	@ (8008964 <USBD_SetConfig+0x150>)
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	461a      	mov	r2, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80088be:	4b29      	ldr	r3, [pc, #164]	@ (8008964 <USBD_SetConfig+0x150>)
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	4619      	mov	r1, r3
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f7fe ffd2 	bl	800786e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 fa12 	bl	8008cf4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80088d0:	e042      	b.n	8008958 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80088d2:	4b24      	ldr	r3, [pc, #144]	@ (8008964 <USBD_SetConfig+0x150>)
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	461a      	mov	r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d02a      	beq.n	8008936 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	4619      	mov	r1, r3
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f7fe ffc0 	bl	800786e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80088ee:	4b1d      	ldr	r3, [pc, #116]	@ (8008964 <USBD_SetConfig+0x150>)
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	461a      	mov	r2, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80088f8:	4b1a      	ldr	r3, [pc, #104]	@ (8008964 <USBD_SetConfig+0x150>)
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	4619      	mov	r1, r3
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f7fe ff99 	bl	8007836 <USBD_SetClassConfig>
 8008904:	4603      	mov	r3, r0
 8008906:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008908:	7bfb      	ldrb	r3, [r7, #15]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00f      	beq.n	800892e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800890e:	6839      	ldr	r1, [r7, #0]
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 f918 	bl	8008b46 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	b2db      	uxtb	r3, r3
 800891c:	4619      	mov	r1, r3
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f7fe ffa5 	bl	800786e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2202      	movs	r2, #2
 8008928:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800892c:	e014      	b.n	8008958 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f9e0 	bl	8008cf4 <USBD_CtlSendStatus>
      break;
 8008934:	e010      	b.n	8008958 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f9dc 	bl	8008cf4 <USBD_CtlSendStatus>
      break;
 800893c:	e00c      	b.n	8008958 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800893e:	6839      	ldr	r1, [r7, #0]
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 f900 	bl	8008b46 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008946:	4b07      	ldr	r3, [pc, #28]	@ (8008964 <USBD_SetConfig+0x150>)
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	4619      	mov	r1, r3
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f7fe ff8e 	bl	800786e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008952:	2303      	movs	r3, #3
 8008954:	73fb      	strb	r3, [r7, #15]
      break;
 8008956:	bf00      	nop
  }

  return ret;
 8008958:	7bfb      	ldrb	r3, [r7, #15]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	20000348 	.word	0x20000348

08008968 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	88db      	ldrh	r3, [r3, #6]
 8008976:	2b01      	cmp	r3, #1
 8008978:	d004      	beq.n	8008984 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800897a:	6839      	ldr	r1, [r7, #0]
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 f8e2 	bl	8008b46 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008982:	e023      	b.n	80089cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800898a:	b2db      	uxtb	r3, r3
 800898c:	2b02      	cmp	r3, #2
 800898e:	dc02      	bgt.n	8008996 <USBD_GetConfig+0x2e>
 8008990:	2b00      	cmp	r3, #0
 8008992:	dc03      	bgt.n	800899c <USBD_GetConfig+0x34>
 8008994:	e015      	b.n	80089c2 <USBD_GetConfig+0x5a>
 8008996:	2b03      	cmp	r3, #3
 8008998:	d00b      	beq.n	80089b2 <USBD_GetConfig+0x4a>
 800899a:	e012      	b.n	80089c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	3308      	adds	r3, #8
 80089a6:	2201      	movs	r2, #1
 80089a8:	4619      	mov	r1, r3
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 f948 	bl	8008c40 <USBD_CtlSendData>
        break;
 80089b0:	e00c      	b.n	80089cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	3304      	adds	r3, #4
 80089b6:	2201      	movs	r2, #1
 80089b8:	4619      	mov	r1, r3
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f940 	bl	8008c40 <USBD_CtlSendData>
        break;
 80089c0:	e004      	b.n	80089cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80089c2:	6839      	ldr	r1, [r7, #0]
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 f8be 	bl	8008b46 <USBD_CtlError>
        break;
 80089ca:	bf00      	nop
}
 80089cc:	bf00      	nop
 80089ce:	3708      	adds	r7, #8
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	3b01      	subs	r3, #1
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d81e      	bhi.n	8008a2a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	88db      	ldrh	r3, [r3, #6]
 80089f0:	2b02      	cmp	r3, #2
 80089f2:	d004      	beq.n	80089fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f8a5 	bl	8008b46 <USBD_CtlError>
        break;
 80089fc:	e01a      	b.n	8008a34 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2201      	movs	r2, #1
 8008a02:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d005      	beq.n	8008a1a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	f043 0202 	orr.w	r2, r3, #2
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	330c      	adds	r3, #12
 8008a1e:	2202      	movs	r2, #2
 8008a20:	4619      	mov	r1, r3
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f90c 	bl	8008c40 <USBD_CtlSendData>
      break;
 8008a28:	e004      	b.n	8008a34 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008a2a:	6839      	ldr	r1, [r7, #0]
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 f88a 	bl	8008b46 <USBD_CtlError>
      break;
 8008a32:	bf00      	nop
  }
}
 8008a34:	bf00      	nop
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	885b      	ldrh	r3, [r3, #2]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d107      	bne.n	8008a5e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2201      	movs	r2, #1
 8008a52:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f94c 	bl	8008cf4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008a5c:	e013      	b.n	8008a86 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	885b      	ldrh	r3, [r3, #2]
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d10b      	bne.n	8008a7e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	889b      	ldrh	r3, [r3, #4]
 8008a6a:	0a1b      	lsrs	r3, r3, #8
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	b2da      	uxtb	r2, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 f93c 	bl	8008cf4 <USBD_CtlSendStatus>
}
 8008a7c:	e003      	b.n	8008a86 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008a7e:	6839      	ldr	r1, [r7, #0]
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 f860 	bl	8008b46 <USBD_CtlError>
}
 8008a86:	bf00      	nop
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b082      	sub	sp, #8
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
 8008a96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	2b02      	cmp	r3, #2
 8008aa4:	d80b      	bhi.n	8008abe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	885b      	ldrh	r3, [r3, #2]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d10c      	bne.n	8008ac8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f91c 	bl	8008cf4 <USBD_CtlSendStatus>
      }
      break;
 8008abc:	e004      	b.n	8008ac8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008abe:	6839      	ldr	r1, [r7, #0]
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 f840 	bl	8008b46 <USBD_CtlError>
      break;
 8008ac6:	e000      	b.n	8008aca <USBD_ClrFeature+0x3c>
      break;
 8008ac8:	bf00      	nop
  }
}
 8008aca:	bf00      	nop
 8008acc:	3708      	adds	r7, #8
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b084      	sub	sp, #16
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
 8008ada:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	781a      	ldrb	r2, [r3, #0]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	3301      	adds	r3, #1
 8008aec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	781a      	ldrb	r2, [r3, #0]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	3301      	adds	r3, #1
 8008afa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f7ff fa40 	bl	8007f82 <SWAPBYTE>
 8008b02:	4603      	mov	r3, r0
 8008b04:	461a      	mov	r2, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	3301      	adds	r3, #1
 8008b14:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	f7ff fa33 	bl	8007f82 <SWAPBYTE>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	461a      	mov	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	3301      	adds	r3, #1
 8008b28:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f7ff fa26 	bl	8007f82 <SWAPBYTE>
 8008b36:	4603      	mov	r3, r0
 8008b38:	461a      	mov	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	80da      	strh	r2, [r3, #6]
}
 8008b3e:	bf00      	nop
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b082      	sub	sp, #8
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
 8008b4e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b50:	2180      	movs	r1, #128	@ 0x80
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fce2 	bl	800951c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008b58:	2100      	movs	r1, #0
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 fcde 	bl	800951c <USBD_LL_StallEP>
}
 8008b60:	bf00      	nop
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b74:	2300      	movs	r3, #0
 8008b76:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d042      	beq.n	8008c04 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008b82:	6938      	ldr	r0, [r7, #16]
 8008b84:	f000 f842 	bl	8008c0c <USBD_GetLen>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	005b      	lsls	r3, r3, #1
 8008b8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b92:	d808      	bhi.n	8008ba6 <USBD_GetString+0x3e>
 8008b94:	6938      	ldr	r0, [r7, #16]
 8008b96:	f000 f839 	bl	8008c0c <USBD_GetLen>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	005b      	lsls	r3, r3, #1
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	e001      	b.n	8008baa <USBD_GetString+0x42>
 8008ba6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008bae:	7dfb      	ldrb	r3, [r7, #23]
 8008bb0:	68ba      	ldr	r2, [r7, #8]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	7812      	ldrb	r2, [r2, #0]
 8008bb8:	701a      	strb	r2, [r3, #0]
  idx++;
 8008bba:	7dfb      	ldrb	r3, [r7, #23]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008bc0:	7dfb      	ldrb	r3, [r7, #23]
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	2203      	movs	r2, #3
 8008bc8:	701a      	strb	r2, [r3, #0]
  idx++;
 8008bca:	7dfb      	ldrb	r3, [r7, #23]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008bd0:	e013      	b.n	8008bfa <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008bd2:	7dfb      	ldrb	r3, [r7, #23]
 8008bd4:	68ba      	ldr	r2, [r7, #8]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	693a      	ldr	r2, [r7, #16]
 8008bda:	7812      	ldrb	r2, [r2, #0]
 8008bdc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	3301      	adds	r3, #1
 8008be2:	613b      	str	r3, [r7, #16]
    idx++;
 8008be4:	7dfb      	ldrb	r3, [r7, #23]
 8008be6:	3301      	adds	r3, #1
 8008be8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008bea:	7dfb      	ldrb	r3, [r7, #23]
 8008bec:	68ba      	ldr	r2, [r7, #8]
 8008bee:	4413      	add	r3, r2
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	701a      	strb	r2, [r3, #0]
    idx++;
 8008bf4:	7dfb      	ldrb	r3, [r7, #23]
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1e7      	bne.n	8008bd2 <USBD_GetString+0x6a>
 8008c02:	e000      	b.n	8008c06 <USBD_GetString+0x9e>
    return;
 8008c04:	bf00      	nop
  }
}
 8008c06:	3718      	adds	r7, #24
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008c14:	2300      	movs	r3, #0
 8008c16:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008c1c:	e005      	b.n	8008c2a <USBD_GetLen+0x1e>
  {
    len++;
 8008c1e:	7bfb      	ldrb	r3, [r7, #15]
 8008c20:	3301      	adds	r3, #1
 8008c22:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	3301      	adds	r3, #1
 8008c28:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d1f5      	bne.n	8008c1e <USBD_GetLen+0x12>
  }

  return len;
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3714      	adds	r7, #20
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2202      	movs	r2, #2
 8008c50:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	2100      	movs	r1, #0
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	f000 fce1 	bl	800962e <USBD_LL_Transmit>

  return USBD_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b084      	sub	sp, #16
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	60f8      	str	r0, [r7, #12]
 8008c7e:	60b9      	str	r1, [r7, #8]
 8008c80:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	68ba      	ldr	r2, [r7, #8]
 8008c86:	2100      	movs	r1, #0
 8008c88:	68f8      	ldr	r0, [r7, #12]
 8008c8a:	f000 fcd0 	bl	800962e <USBD_LL_Transmit>

  return USBD_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3710      	adds	r7, #16
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2203      	movs	r2, #3
 8008ca8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	68f8      	ldr	r0, [r7, #12]
 8008cc4:	f000 fcd4 	bl	8009670 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b084      	sub	sp, #16
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	60f8      	str	r0, [r7, #12]
 8008cda:	60b9      	str	r1, [r7, #8]
 8008cdc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	68ba      	ldr	r2, [r7, #8]
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	68f8      	ldr	r0, [r7, #12]
 8008ce6:	f000 fcc3 	bl	8009670 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3710      	adds	r7, #16
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2204      	movs	r2, #4
 8008d00:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008d04:	2300      	movs	r3, #0
 8008d06:	2200      	movs	r2, #0
 8008d08:	2100      	movs	r1, #0
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 fc8f 	bl	800962e <USBD_LL_Transmit>

  return USBD_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b082      	sub	sp, #8
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2205      	movs	r2, #5
 8008d26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	2100      	movs	r1, #0
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 fc9d 	bl	8009670 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d36:	2300      	movs	r3, #0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d44:	2200      	movs	r2, #0
 8008d46:	4912      	ldr	r1, [pc, #72]	@ (8008d90 <MX_USB_DEVICE_Init+0x50>)
 8008d48:	4812      	ldr	r0, [pc, #72]	@ (8008d94 <MX_USB_DEVICE_Init+0x54>)
 8008d4a:	f7fe fcf7 	bl	800773c <USBD_Init>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d001      	beq.n	8008d58 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d54:	f7f9 f82c 	bl	8001db0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008d58:	490f      	ldr	r1, [pc, #60]	@ (8008d98 <MX_USB_DEVICE_Init+0x58>)
 8008d5a:	480e      	ldr	r0, [pc, #56]	@ (8008d94 <MX_USB_DEVICE_Init+0x54>)
 8008d5c:	f7fe fd1e 	bl	800779c <USBD_RegisterClass>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d001      	beq.n	8008d6a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d66:	f7f9 f823 	bl	8001db0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008d6a:	490c      	ldr	r1, [pc, #48]	@ (8008d9c <MX_USB_DEVICE_Init+0x5c>)
 8008d6c:	4809      	ldr	r0, [pc, #36]	@ (8008d94 <MX_USB_DEVICE_Init+0x54>)
 8008d6e:	f7fe fc15 	bl	800759c <USBD_CDC_RegisterInterface>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d001      	beq.n	8008d7c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d78:	f7f9 f81a 	bl	8001db0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d7c:	4805      	ldr	r0, [pc, #20]	@ (8008d94 <MX_USB_DEVICE_Init+0x54>)
 8008d7e:	f7fe fd43 	bl	8007808 <USBD_Start>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d001      	beq.n	8008d8c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008d88:	f7f9 f812 	bl	8001db0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d8c:	bf00      	nop
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	200000ac 	.word	0x200000ac
 8008d94:	2000034c 	.word	0x2000034c
 8008d98:	20000018 	.word	0x20000018
 8008d9c:	20000098 	.word	0x20000098

08008da0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008da4:	2200      	movs	r2, #0
 8008da6:	4905      	ldr	r1, [pc, #20]	@ (8008dbc <CDC_Init_FS+0x1c>)
 8008da8:	4805      	ldr	r0, [pc, #20]	@ (8008dc0 <CDC_Init_FS+0x20>)
 8008daa:	f7fe fc11 	bl	80075d0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008dae:	4905      	ldr	r1, [pc, #20]	@ (8008dc4 <CDC_Init_FS+0x24>)
 8008db0:	4803      	ldr	r0, [pc, #12]	@ (8008dc0 <CDC_Init_FS+0x20>)
 8008db2:	f7fe fc2f 	bl	8007614 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008db6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	20000a28 	.word	0x20000a28
 8008dc0:	2000034c 	.word	0x2000034c
 8008dc4:	20000628 	.word	0x20000628

08008dc8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008dcc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	4603      	mov	r3, r0
 8008de0:	6039      	str	r1, [r7, #0]
 8008de2:	71fb      	strb	r3, [r7, #7]
 8008de4:	4613      	mov	r3, r2
 8008de6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008de8:	79fb      	ldrb	r3, [r7, #7]
 8008dea:	2b23      	cmp	r3, #35	@ 0x23
 8008dec:	d84a      	bhi.n	8008e84 <CDC_Control_FS+0xac>
 8008dee:	a201      	add	r2, pc, #4	@ (adr r2, 8008df4 <CDC_Control_FS+0x1c>)
 8008df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df4:	08008e85 	.word	0x08008e85
 8008df8:	08008e85 	.word	0x08008e85
 8008dfc:	08008e85 	.word	0x08008e85
 8008e00:	08008e85 	.word	0x08008e85
 8008e04:	08008e85 	.word	0x08008e85
 8008e08:	08008e85 	.word	0x08008e85
 8008e0c:	08008e85 	.word	0x08008e85
 8008e10:	08008e85 	.word	0x08008e85
 8008e14:	08008e85 	.word	0x08008e85
 8008e18:	08008e85 	.word	0x08008e85
 8008e1c:	08008e85 	.word	0x08008e85
 8008e20:	08008e85 	.word	0x08008e85
 8008e24:	08008e85 	.word	0x08008e85
 8008e28:	08008e85 	.word	0x08008e85
 8008e2c:	08008e85 	.word	0x08008e85
 8008e30:	08008e85 	.word	0x08008e85
 8008e34:	08008e85 	.word	0x08008e85
 8008e38:	08008e85 	.word	0x08008e85
 8008e3c:	08008e85 	.word	0x08008e85
 8008e40:	08008e85 	.word	0x08008e85
 8008e44:	08008e85 	.word	0x08008e85
 8008e48:	08008e85 	.word	0x08008e85
 8008e4c:	08008e85 	.word	0x08008e85
 8008e50:	08008e85 	.word	0x08008e85
 8008e54:	08008e85 	.word	0x08008e85
 8008e58:	08008e85 	.word	0x08008e85
 8008e5c:	08008e85 	.word	0x08008e85
 8008e60:	08008e85 	.word	0x08008e85
 8008e64:	08008e85 	.word	0x08008e85
 8008e68:	08008e85 	.word	0x08008e85
 8008e6c:	08008e85 	.word	0x08008e85
 8008e70:	08008e85 	.word	0x08008e85
 8008e74:	08008e85 	.word	0x08008e85
 8008e78:	08008e85 	.word	0x08008e85
 8008e7c:	08008e85 	.word	0x08008e85
 8008e80:	08008e85 	.word	0x08008e85
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008e84:	bf00      	nop
  }

  return (USBD_OK);
 8008e86:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	370c      	adds	r7, #12
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008e9e:	6879      	ldr	r1, [r7, #4]
 8008ea0:	4805      	ldr	r0, [pc, #20]	@ (8008eb8 <CDC_Receive_FS+0x24>)
 8008ea2:	f7fe fbb7 	bl	8007614 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008ea6:	4804      	ldr	r0, [pc, #16]	@ (8008eb8 <CDC_Receive_FS+0x24>)
 8008ea8:	f7fe fc12 	bl	80076d0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008eac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3708      	adds	r7, #8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	2000034c 	.word	0x2000034c

08008ebc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008ecc:	4b0d      	ldr	r3, [pc, #52]	@ (8008f04 <CDC_Transmit_FS+0x48>)
 8008ece:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008ed2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d001      	beq.n	8008ee2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e00b      	b.n	8008efa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008ee2:	887b      	ldrh	r3, [r7, #2]
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	6879      	ldr	r1, [r7, #4]
 8008ee8:	4806      	ldr	r0, [pc, #24]	@ (8008f04 <CDC_Transmit_FS+0x48>)
 8008eea:	f7fe fb71 	bl	80075d0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008eee:	4805      	ldr	r0, [pc, #20]	@ (8008f04 <CDC_Transmit_FS+0x48>)
 8008ef0:	f7fe fbae 	bl	8007650 <USBD_CDC_TransmitPacket>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	2000034c 	.word	0x2000034c

08008f08 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b087      	sub	sp, #28
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	4613      	mov	r3, r2
 8008f14:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008f16:	2300      	movs	r3, #0
 8008f18:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008f1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	371c      	adds	r7, #28
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
	...

08008f2c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	4603      	mov	r3, r0
 8008f34:	6039      	str	r1, [r7, #0]
 8008f36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	2212      	movs	r2, #18
 8008f3c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008f3e:	4b03      	ldr	r3, [pc, #12]	@ (8008f4c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr
 8008f4c:	200000c8 	.word	0x200000c8

08008f50 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	4603      	mov	r3, r0
 8008f58:	6039      	str	r1, [r7, #0]
 8008f5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	2204      	movs	r2, #4
 8008f60:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008f62:	4b03      	ldr	r3, [pc, #12]	@ (8008f70 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr
 8008f70:	200000dc 	.word	0x200000dc

08008f74 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	6039      	str	r1, [r7, #0]
 8008f7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f80:	79fb      	ldrb	r3, [r7, #7]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d105      	bne.n	8008f92 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f86:	683a      	ldr	r2, [r7, #0]
 8008f88:	4907      	ldr	r1, [pc, #28]	@ (8008fa8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f8a:	4808      	ldr	r0, [pc, #32]	@ (8008fac <USBD_FS_ProductStrDescriptor+0x38>)
 8008f8c:	f7ff fdec 	bl	8008b68 <USBD_GetString>
 8008f90:	e004      	b.n	8008f9c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	4904      	ldr	r1, [pc, #16]	@ (8008fa8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f96:	4805      	ldr	r0, [pc, #20]	@ (8008fac <USBD_FS_ProductStrDescriptor+0x38>)
 8008f98:	f7ff fde6 	bl	8008b68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f9c:	4b02      	ldr	r3, [pc, #8]	@ (8008fa8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3708      	adds	r7, #8
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	20000e28 	.word	0x20000e28
 8008fac:	0800a27c 	.word	0x0800a27c

08008fb0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	6039      	str	r1, [r7, #0]
 8008fba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008fbc:	683a      	ldr	r2, [r7, #0]
 8008fbe:	4904      	ldr	r1, [pc, #16]	@ (8008fd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008fc0:	4804      	ldr	r0, [pc, #16]	@ (8008fd4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008fc2:	f7ff fdd1 	bl	8008b68 <USBD_GetString>
  return USBD_StrDesc;
 8008fc6:	4b02      	ldr	r3, [pc, #8]	@ (8008fd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3708      	adds	r7, #8
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	20000e28 	.word	0x20000e28
 8008fd4:	0800a294 	.word	0x0800a294

08008fd8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	4603      	mov	r3, r0
 8008fe0:	6039      	str	r1, [r7, #0]
 8008fe2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	221a      	movs	r2, #26
 8008fe8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008fea:	f000 f843 	bl	8009074 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008fee:	4b02      	ldr	r3, [pc, #8]	@ (8008ff8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3708      	adds	r7, #8
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	200000e0 	.word	0x200000e0

08008ffc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	4603      	mov	r3, r0
 8009004:	6039      	str	r1, [r7, #0]
 8009006:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009008:	79fb      	ldrb	r3, [r7, #7]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d105      	bne.n	800901a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800900e:	683a      	ldr	r2, [r7, #0]
 8009010:	4907      	ldr	r1, [pc, #28]	@ (8009030 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009012:	4808      	ldr	r0, [pc, #32]	@ (8009034 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009014:	f7ff fda8 	bl	8008b68 <USBD_GetString>
 8009018:	e004      	b.n	8009024 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800901a:	683a      	ldr	r2, [r7, #0]
 800901c:	4904      	ldr	r1, [pc, #16]	@ (8009030 <USBD_FS_ConfigStrDescriptor+0x34>)
 800901e:	4805      	ldr	r0, [pc, #20]	@ (8009034 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009020:	f7ff fda2 	bl	8008b68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009024:	4b02      	ldr	r3, [pc, #8]	@ (8009030 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009026:	4618      	mov	r0, r3
 8009028:	3708      	adds	r7, #8
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	20000e28 	.word	0x20000e28
 8009034:	0800a2a8 	.word	0x0800a2a8

08009038 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	4603      	mov	r3, r0
 8009040:	6039      	str	r1, [r7, #0]
 8009042:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009044:	79fb      	ldrb	r3, [r7, #7]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d105      	bne.n	8009056 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800904a:	683a      	ldr	r2, [r7, #0]
 800904c:	4907      	ldr	r1, [pc, #28]	@ (800906c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800904e:	4808      	ldr	r0, [pc, #32]	@ (8009070 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009050:	f7ff fd8a 	bl	8008b68 <USBD_GetString>
 8009054:	e004      	b.n	8009060 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009056:	683a      	ldr	r2, [r7, #0]
 8009058:	4904      	ldr	r1, [pc, #16]	@ (800906c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800905a:	4805      	ldr	r0, [pc, #20]	@ (8009070 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800905c:	f7ff fd84 	bl	8008b68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009060:	4b02      	ldr	r3, [pc, #8]	@ (800906c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009062:	4618      	mov	r0, r3
 8009064:	3708      	adds	r7, #8
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	20000e28 	.word	0x20000e28
 8009070:	0800a2b4 	.word	0x0800a2b4

08009074 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800907a:	4b0f      	ldr	r3, [pc, #60]	@ (80090b8 <Get_SerialNum+0x44>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009080:	4b0e      	ldr	r3, [pc, #56]	@ (80090bc <Get_SerialNum+0x48>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009086:	4b0e      	ldr	r3, [pc, #56]	@ (80090c0 <Get_SerialNum+0x4c>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4413      	add	r3, r2
 8009092:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d009      	beq.n	80090ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800909a:	2208      	movs	r2, #8
 800909c:	4909      	ldr	r1, [pc, #36]	@ (80090c4 <Get_SerialNum+0x50>)
 800909e:	68f8      	ldr	r0, [r7, #12]
 80090a0:	f000 f814 	bl	80090cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80090a4:	2204      	movs	r2, #4
 80090a6:	4908      	ldr	r1, [pc, #32]	@ (80090c8 <Get_SerialNum+0x54>)
 80090a8:	68b8      	ldr	r0, [r7, #8]
 80090aa:	f000 f80f 	bl	80090cc <IntToUnicode>
  }
}
 80090ae:	bf00      	nop
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	1fff7a10 	.word	0x1fff7a10
 80090bc:	1fff7a14 	.word	0x1fff7a14
 80090c0:	1fff7a18 	.word	0x1fff7a18
 80090c4:	200000e2 	.word	0x200000e2
 80090c8:	200000f2 	.word	0x200000f2

080090cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b087      	sub	sp, #28
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	4613      	mov	r3, r2
 80090d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80090da:	2300      	movs	r3, #0
 80090dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80090de:	2300      	movs	r3, #0
 80090e0:	75fb      	strb	r3, [r7, #23]
 80090e2:	e027      	b.n	8009134 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	0f1b      	lsrs	r3, r3, #28
 80090e8:	2b09      	cmp	r3, #9
 80090ea:	d80b      	bhi.n	8009104 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	0f1b      	lsrs	r3, r3, #28
 80090f0:	b2da      	uxtb	r2, r3
 80090f2:	7dfb      	ldrb	r3, [r7, #23]
 80090f4:	005b      	lsls	r3, r3, #1
 80090f6:	4619      	mov	r1, r3
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	440b      	add	r3, r1
 80090fc:	3230      	adds	r2, #48	@ 0x30
 80090fe:	b2d2      	uxtb	r2, r2
 8009100:	701a      	strb	r2, [r3, #0]
 8009102:	e00a      	b.n	800911a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	0f1b      	lsrs	r3, r3, #28
 8009108:	b2da      	uxtb	r2, r3
 800910a:	7dfb      	ldrb	r3, [r7, #23]
 800910c:	005b      	lsls	r3, r3, #1
 800910e:	4619      	mov	r1, r3
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	440b      	add	r3, r1
 8009114:	3237      	adds	r2, #55	@ 0x37
 8009116:	b2d2      	uxtb	r2, r2
 8009118:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	011b      	lsls	r3, r3, #4
 800911e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009120:	7dfb      	ldrb	r3, [r7, #23]
 8009122:	005b      	lsls	r3, r3, #1
 8009124:	3301      	adds	r3, #1
 8009126:	68ba      	ldr	r2, [r7, #8]
 8009128:	4413      	add	r3, r2
 800912a:	2200      	movs	r2, #0
 800912c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800912e:	7dfb      	ldrb	r3, [r7, #23]
 8009130:	3301      	adds	r3, #1
 8009132:	75fb      	strb	r3, [r7, #23]
 8009134:	7dfa      	ldrb	r2, [r7, #23]
 8009136:	79fb      	ldrb	r3, [r7, #7]
 8009138:	429a      	cmp	r2, r3
 800913a:	d3d3      	bcc.n	80090e4 <IntToUnicode+0x18>
  }
}
 800913c:	bf00      	nop
 800913e:	bf00      	nop
 8009140:	371c      	adds	r7, #28
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr
	...

0800914c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b08a      	sub	sp, #40	@ 0x28
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009154:	f107 0314 	add.w	r3, r7, #20
 8009158:	2200      	movs	r2, #0
 800915a:	601a      	str	r2, [r3, #0]
 800915c:	605a      	str	r2, [r3, #4]
 800915e:	609a      	str	r2, [r3, #8]
 8009160:	60da      	str	r2, [r3, #12]
 8009162:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800916c:	d13a      	bne.n	80091e4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800916e:	2300      	movs	r3, #0
 8009170:	613b      	str	r3, [r7, #16]
 8009172:	4b1e      	ldr	r3, [pc, #120]	@ (80091ec <HAL_PCD_MspInit+0xa0>)
 8009174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009176:	4a1d      	ldr	r2, [pc, #116]	@ (80091ec <HAL_PCD_MspInit+0xa0>)
 8009178:	f043 0301 	orr.w	r3, r3, #1
 800917c:	6313      	str	r3, [r2, #48]	@ 0x30
 800917e:	4b1b      	ldr	r3, [pc, #108]	@ (80091ec <HAL_PCD_MspInit+0xa0>)
 8009180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009182:	f003 0301 	and.w	r3, r3, #1
 8009186:	613b      	str	r3, [r7, #16]
 8009188:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800918a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800918e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009190:	2302      	movs	r3, #2
 8009192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009194:	2300      	movs	r3, #0
 8009196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009198:	2303      	movs	r3, #3
 800919a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800919c:	230a      	movs	r3, #10
 800919e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091a0:	f107 0314 	add.w	r3, r7, #20
 80091a4:	4619      	mov	r1, r3
 80091a6:	4812      	ldr	r0, [pc, #72]	@ (80091f0 <HAL_PCD_MspInit+0xa4>)
 80091a8:	f7f9 f98a 	bl	80024c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80091ac:	4b0f      	ldr	r3, [pc, #60]	@ (80091ec <HAL_PCD_MspInit+0xa0>)
 80091ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091b0:	4a0e      	ldr	r2, [pc, #56]	@ (80091ec <HAL_PCD_MspInit+0xa0>)
 80091b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091b6:	6353      	str	r3, [r2, #52]	@ 0x34
 80091b8:	2300      	movs	r3, #0
 80091ba:	60fb      	str	r3, [r7, #12]
 80091bc:	4b0b      	ldr	r3, [pc, #44]	@ (80091ec <HAL_PCD_MspInit+0xa0>)
 80091be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091c0:	4a0a      	ldr	r2, [pc, #40]	@ (80091ec <HAL_PCD_MspInit+0xa0>)
 80091c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80091c6:	6453      	str	r3, [r2, #68]	@ 0x44
 80091c8:	4b08      	ldr	r3, [pc, #32]	@ (80091ec <HAL_PCD_MspInit+0xa0>)
 80091ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80091d0:	60fb      	str	r3, [r7, #12]
 80091d2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80091d4:	2200      	movs	r2, #0
 80091d6:	2100      	movs	r1, #0
 80091d8:	2043      	movs	r0, #67	@ 0x43
 80091da:	f7f9 f8ec 	bl	80023b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80091de:	2043      	movs	r0, #67	@ 0x43
 80091e0:	f7f9 f905 	bl	80023ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80091e4:	bf00      	nop
 80091e6:	3728      	adds	r7, #40	@ 0x28
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	40023800 	.word	0x40023800
 80091f0:	40020000 	.word	0x40020000

080091f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009208:	4619      	mov	r1, r3
 800920a:	4610      	mov	r0, r2
 800920c:	f7fe fb49 	bl	80078a2 <USBD_LL_SetupStage>
}
 8009210:	bf00      	nop
 8009212:	3708      	adds	r7, #8
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	460b      	mov	r3, r1
 8009222:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800922a:	78fa      	ldrb	r2, [r7, #3]
 800922c:	6879      	ldr	r1, [r7, #4]
 800922e:	4613      	mov	r3, r2
 8009230:	00db      	lsls	r3, r3, #3
 8009232:	4413      	add	r3, r2
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	440b      	add	r3, r1
 8009238:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	78fb      	ldrb	r3, [r7, #3]
 8009240:	4619      	mov	r1, r3
 8009242:	f7fe fb83 	bl	800794c <USBD_LL_DataOutStage>
}
 8009246:	bf00      	nop
 8009248:	3708      	adds	r7, #8
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b082      	sub	sp, #8
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
 8009256:	460b      	mov	r3, r1
 8009258:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009260:	78fa      	ldrb	r2, [r7, #3]
 8009262:	6879      	ldr	r1, [r7, #4]
 8009264:	4613      	mov	r3, r2
 8009266:	00db      	lsls	r3, r3, #3
 8009268:	4413      	add	r3, r2
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	440b      	add	r3, r1
 800926e:	3320      	adds	r3, #32
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	78fb      	ldrb	r3, [r7, #3]
 8009274:	4619      	mov	r1, r3
 8009276:	f7fe fc1c 	bl	8007ab2 <USBD_LL_DataInStage>
}
 800927a:	bf00      	nop
 800927c:	3708      	adds	r7, #8
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b082      	sub	sp, #8
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009290:	4618      	mov	r0, r3
 8009292:	f7fe fd56 	bl	8007d42 <USBD_LL_SOF>
}
 8009296:	bf00      	nop
 8009298:	3708      	adds	r7, #8
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b084      	sub	sp, #16
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80092a6:	2301      	movs	r3, #1
 80092a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	79db      	ldrb	r3, [r3, #7]
 80092ae:	2b02      	cmp	r3, #2
 80092b0:	d001      	beq.n	80092b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80092b2:	f7f8 fd7d 	bl	8001db0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80092bc:	7bfa      	ldrb	r2, [r7, #15]
 80092be:	4611      	mov	r1, r2
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7fe fcfa 	bl	8007cba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7fe fca2 	bl	8007c16 <USBD_LL_Reset>
}
 80092d2:	bf00      	nop
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
	...

080092dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7fe fcf5 	bl	8007cda <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	6812      	ldr	r2, [r2, #0]
 80092fe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009302:	f043 0301 	orr.w	r3, r3, #1
 8009306:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	7adb      	ldrb	r3, [r3, #11]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d005      	beq.n	800931c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009310:	4b04      	ldr	r3, [pc, #16]	@ (8009324 <HAL_PCD_SuspendCallback+0x48>)
 8009312:	691b      	ldr	r3, [r3, #16]
 8009314:	4a03      	ldr	r2, [pc, #12]	@ (8009324 <HAL_PCD_SuspendCallback+0x48>)
 8009316:	f043 0306 	orr.w	r3, r3, #6
 800931a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800931c:	bf00      	nop
 800931e:	3708      	adds	r7, #8
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	e000ed00 	.word	0xe000ed00

08009328 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009336:	4618      	mov	r0, r3
 8009338:	f7fe fceb 	bl	8007d12 <USBD_LL_Resume>
}
 800933c:	bf00      	nop
 800933e:	3708      	adds	r7, #8
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	460b      	mov	r3, r1
 800934e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009356:	78fa      	ldrb	r2, [r7, #3]
 8009358:	4611      	mov	r1, r2
 800935a:	4618      	mov	r0, r3
 800935c:	f7fe fd43 	bl	8007de6 <USBD_LL_IsoOUTIncomplete>
}
 8009360:	bf00      	nop
 8009362:	3708      	adds	r7, #8
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	460b      	mov	r3, r1
 8009372:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800937a:	78fa      	ldrb	r2, [r7, #3]
 800937c:	4611      	mov	r1, r2
 800937e:	4618      	mov	r0, r3
 8009380:	f7fe fcff 	bl	8007d82 <USBD_LL_IsoINIncomplete>
}
 8009384:	bf00      	nop
 8009386:	3708      	adds	r7, #8
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800939a:	4618      	mov	r0, r3
 800939c:	f7fe fd55 	bl	8007e4a <USBD_LL_DevConnected>
}
 80093a0:	bf00      	nop
 80093a2:	3708      	adds	r7, #8
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7fe fd52 	bl	8007e60 <USBD_LL_DevDisconnected>
}
 80093bc:	bf00      	nop
 80093be:	3708      	adds	r7, #8
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d13c      	bne.n	800944e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80093d4:	4a20      	ldr	r2, [pc, #128]	@ (8009458 <USBD_LL_Init+0x94>)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4a1e      	ldr	r2, [pc, #120]	@ (8009458 <USBD_LL_Init+0x94>)
 80093e0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80093e4:	4b1c      	ldr	r3, [pc, #112]	@ (8009458 <USBD_LL_Init+0x94>)
 80093e6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80093ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80093ec:	4b1a      	ldr	r3, [pc, #104]	@ (8009458 <USBD_LL_Init+0x94>)
 80093ee:	2204      	movs	r2, #4
 80093f0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80093f2:	4b19      	ldr	r3, [pc, #100]	@ (8009458 <USBD_LL_Init+0x94>)
 80093f4:	2202      	movs	r2, #2
 80093f6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80093f8:	4b17      	ldr	r3, [pc, #92]	@ (8009458 <USBD_LL_Init+0x94>)
 80093fa:	2200      	movs	r2, #0
 80093fc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80093fe:	4b16      	ldr	r3, [pc, #88]	@ (8009458 <USBD_LL_Init+0x94>)
 8009400:	2202      	movs	r2, #2
 8009402:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009404:	4b14      	ldr	r3, [pc, #80]	@ (8009458 <USBD_LL_Init+0x94>)
 8009406:	2200      	movs	r2, #0
 8009408:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800940a:	4b13      	ldr	r3, [pc, #76]	@ (8009458 <USBD_LL_Init+0x94>)
 800940c:	2200      	movs	r2, #0
 800940e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009410:	4b11      	ldr	r3, [pc, #68]	@ (8009458 <USBD_LL_Init+0x94>)
 8009412:	2200      	movs	r2, #0
 8009414:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009416:	4b10      	ldr	r3, [pc, #64]	@ (8009458 <USBD_LL_Init+0x94>)
 8009418:	2200      	movs	r2, #0
 800941a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800941c:	4b0e      	ldr	r3, [pc, #56]	@ (8009458 <USBD_LL_Init+0x94>)
 800941e:	2200      	movs	r2, #0
 8009420:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009422:	480d      	ldr	r0, [pc, #52]	@ (8009458 <USBD_LL_Init+0x94>)
 8009424:	f7f9 fa0d 	bl	8002842 <HAL_PCD_Init>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d001      	beq.n	8009432 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800942e:	f7f8 fcbf 	bl	8001db0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009432:	2180      	movs	r1, #128	@ 0x80
 8009434:	4808      	ldr	r0, [pc, #32]	@ (8009458 <USBD_LL_Init+0x94>)
 8009436:	f7fa fc3a 	bl	8003cae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800943a:	2240      	movs	r2, #64	@ 0x40
 800943c:	2100      	movs	r1, #0
 800943e:	4806      	ldr	r0, [pc, #24]	@ (8009458 <USBD_LL_Init+0x94>)
 8009440:	f7fa fbee 	bl	8003c20 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009444:	2280      	movs	r2, #128	@ 0x80
 8009446:	2101      	movs	r1, #1
 8009448:	4803      	ldr	r0, [pc, #12]	@ (8009458 <USBD_LL_Init+0x94>)
 800944a:	f7fa fbe9 	bl	8003c20 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	20001028 	.word	0x20001028

0800945c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009464:	2300      	movs	r3, #0
 8009466:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009468:	2300      	movs	r3, #0
 800946a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009472:	4618      	mov	r0, r3
 8009474:	f7f9 faf4 	bl	8002a60 <HAL_PCD_Start>
 8009478:	4603      	mov	r3, r0
 800947a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800947c:	7bfb      	ldrb	r3, [r7, #15]
 800947e:	4618      	mov	r0, r3
 8009480:	f000 f942 	bl	8009708 <USBD_Get_USB_Status>
 8009484:	4603      	mov	r3, r0
 8009486:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009488:	7bbb      	ldrb	r3, [r7, #14]
}
 800948a:	4618      	mov	r0, r3
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009492:	b580      	push	{r7, lr}
 8009494:	b084      	sub	sp, #16
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
 800949a:	4608      	mov	r0, r1
 800949c:	4611      	mov	r1, r2
 800949e:	461a      	mov	r2, r3
 80094a0:	4603      	mov	r3, r0
 80094a2:	70fb      	strb	r3, [r7, #3]
 80094a4:	460b      	mov	r3, r1
 80094a6:	70bb      	strb	r3, [r7, #2]
 80094a8:	4613      	mov	r3, r2
 80094aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094ac:	2300      	movs	r3, #0
 80094ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094b0:	2300      	movs	r3, #0
 80094b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80094ba:	78bb      	ldrb	r3, [r7, #2]
 80094bc:	883a      	ldrh	r2, [r7, #0]
 80094be:	78f9      	ldrb	r1, [r7, #3]
 80094c0:	f7f9 ffc8 	bl	8003454 <HAL_PCD_EP_Open>
 80094c4:	4603      	mov	r3, r0
 80094c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094c8:	7bfb      	ldrb	r3, [r7, #15]
 80094ca:	4618      	mov	r0, r3
 80094cc:	f000 f91c 	bl	8009708 <USBD_Get_USB_Status>
 80094d0:	4603      	mov	r3, r0
 80094d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b084      	sub	sp, #16
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
 80094e6:	460b      	mov	r3, r1
 80094e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094ee:	2300      	movs	r3, #0
 80094f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80094f8:	78fa      	ldrb	r2, [r7, #3]
 80094fa:	4611      	mov	r1, r2
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7fa f813 	bl	8003528 <HAL_PCD_EP_Close>
 8009502:	4603      	mov	r3, r0
 8009504:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009506:	7bfb      	ldrb	r3, [r7, #15]
 8009508:	4618      	mov	r0, r3
 800950a:	f000 f8fd 	bl	8009708 <USBD_Get_USB_Status>
 800950e:	4603      	mov	r3, r0
 8009510:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009512:	7bbb      	ldrb	r3, [r7, #14]
}
 8009514:	4618      	mov	r0, r3
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	460b      	mov	r3, r1
 8009526:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009528:	2300      	movs	r3, #0
 800952a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800952c:	2300      	movs	r3, #0
 800952e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009536:	78fa      	ldrb	r2, [r7, #3]
 8009538:	4611      	mov	r1, r2
 800953a:	4618      	mov	r0, r3
 800953c:	f7fa f8cb 	bl	80036d6 <HAL_PCD_EP_SetStall>
 8009540:	4603      	mov	r3, r0
 8009542:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009544:	7bfb      	ldrb	r3, [r7, #15]
 8009546:	4618      	mov	r0, r3
 8009548:	f000 f8de 	bl	8009708 <USBD_Get_USB_Status>
 800954c:	4603      	mov	r3, r0
 800954e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009550:	7bbb      	ldrb	r3, [r7, #14]
}
 8009552:	4618      	mov	r0, r3
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b084      	sub	sp, #16
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
 8009562:	460b      	mov	r3, r1
 8009564:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009566:	2300      	movs	r3, #0
 8009568:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800956a:	2300      	movs	r3, #0
 800956c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009574:	78fa      	ldrb	r2, [r7, #3]
 8009576:	4611      	mov	r1, r2
 8009578:	4618      	mov	r0, r3
 800957a:	f7fa f90f 	bl	800379c <HAL_PCD_EP_ClrStall>
 800957e:	4603      	mov	r3, r0
 8009580:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009582:	7bfb      	ldrb	r3, [r7, #15]
 8009584:	4618      	mov	r0, r3
 8009586:	f000 f8bf 	bl	8009708 <USBD_Get_USB_Status>
 800958a:	4603      	mov	r3, r0
 800958c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800958e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009590:	4618      	mov	r0, r3
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	460b      	mov	r3, r1
 80095a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80095aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80095ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	da0b      	bge.n	80095cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80095b4:	78fb      	ldrb	r3, [r7, #3]
 80095b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095ba:	68f9      	ldr	r1, [r7, #12]
 80095bc:	4613      	mov	r3, r2
 80095be:	00db      	lsls	r3, r3, #3
 80095c0:	4413      	add	r3, r2
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	440b      	add	r3, r1
 80095c6:	3316      	adds	r3, #22
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	e00b      	b.n	80095e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80095cc:	78fb      	ldrb	r3, [r7, #3]
 80095ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80095d2:	68f9      	ldr	r1, [r7, #12]
 80095d4:	4613      	mov	r3, r2
 80095d6:	00db      	lsls	r3, r3, #3
 80095d8:	4413      	add	r3, r2
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	440b      	add	r3, r1
 80095de:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80095e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3714      	adds	r7, #20
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	460b      	mov	r3, r1
 80095fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095fc:	2300      	movs	r3, #0
 80095fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009600:	2300      	movs	r3, #0
 8009602:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800960a:	78fa      	ldrb	r2, [r7, #3]
 800960c:	4611      	mov	r1, r2
 800960e:	4618      	mov	r0, r3
 8009610:	f7f9 fefc 	bl	800340c <HAL_PCD_SetAddress>
 8009614:	4603      	mov	r3, r0
 8009616:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009618:	7bfb      	ldrb	r3, [r7, #15]
 800961a:	4618      	mov	r0, r3
 800961c:	f000 f874 	bl	8009708 <USBD_Get_USB_Status>
 8009620:	4603      	mov	r3, r0
 8009622:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009624:	7bbb      	ldrb	r3, [r7, #14]
}
 8009626:	4618      	mov	r0, r3
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800962e:	b580      	push	{r7, lr}
 8009630:	b086      	sub	sp, #24
 8009632:	af00      	add	r7, sp, #0
 8009634:	60f8      	str	r0, [r7, #12]
 8009636:	607a      	str	r2, [r7, #4]
 8009638:	603b      	str	r3, [r7, #0]
 800963a:	460b      	mov	r3, r1
 800963c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800963e:	2300      	movs	r3, #0
 8009640:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009642:	2300      	movs	r3, #0
 8009644:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800964c:	7af9      	ldrb	r1, [r7, #11]
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	f7fa f806 	bl	8003662 <HAL_PCD_EP_Transmit>
 8009656:	4603      	mov	r3, r0
 8009658:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800965a:	7dfb      	ldrb	r3, [r7, #23]
 800965c:	4618      	mov	r0, r3
 800965e:	f000 f853 	bl	8009708 <USBD_Get_USB_Status>
 8009662:	4603      	mov	r3, r0
 8009664:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009666:	7dbb      	ldrb	r3, [r7, #22]
}
 8009668:	4618      	mov	r0, r3
 800966a:	3718      	adds	r7, #24
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b086      	sub	sp, #24
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	607a      	str	r2, [r7, #4]
 800967a:	603b      	str	r3, [r7, #0]
 800967c:	460b      	mov	r3, r1
 800967e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009680:	2300      	movs	r3, #0
 8009682:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009684:	2300      	movs	r3, #0
 8009686:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800968e:	7af9      	ldrb	r1, [r7, #11]
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	f7f9 ff92 	bl	80035bc <HAL_PCD_EP_Receive>
 8009698:	4603      	mov	r3, r0
 800969a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800969c:	7dfb      	ldrb	r3, [r7, #23]
 800969e:	4618      	mov	r0, r3
 80096a0:	f000 f832 	bl	8009708 <USBD_Get_USB_Status>
 80096a4:	4603      	mov	r3, r0
 80096a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3718      	adds	r7, #24
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b082      	sub	sp, #8
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
 80096ba:	460b      	mov	r3, r1
 80096bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80096c4:	78fa      	ldrb	r2, [r7, #3]
 80096c6:	4611      	mov	r1, r2
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7f9 ffb2 	bl	8003632 <HAL_PCD_EP_GetRxCount>
 80096ce:	4603      	mov	r3, r0
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3708      	adds	r7, #8
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80096e0:	4b03      	ldr	r3, [pc, #12]	@ (80096f0 <USBD_static_malloc+0x18>)
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	370c      	adds	r7, #12
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr
 80096ee:	bf00      	nop
 80096f0:	2000150c 	.word	0x2000150c

080096f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]

}
 80096fc:	bf00      	nop
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	4603      	mov	r3, r0
 8009710:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009712:	2300      	movs	r3, #0
 8009714:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009716:	79fb      	ldrb	r3, [r7, #7]
 8009718:	2b03      	cmp	r3, #3
 800971a:	d817      	bhi.n	800974c <USBD_Get_USB_Status+0x44>
 800971c:	a201      	add	r2, pc, #4	@ (adr r2, 8009724 <USBD_Get_USB_Status+0x1c>)
 800971e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009722:	bf00      	nop
 8009724:	08009735 	.word	0x08009735
 8009728:	0800973b 	.word	0x0800973b
 800972c:	08009741 	.word	0x08009741
 8009730:	08009747 	.word	0x08009747
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009734:	2300      	movs	r3, #0
 8009736:	73fb      	strb	r3, [r7, #15]
    break;
 8009738:	e00b      	b.n	8009752 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800973a:	2303      	movs	r3, #3
 800973c:	73fb      	strb	r3, [r7, #15]
    break;
 800973e:	e008      	b.n	8009752 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009740:	2301      	movs	r3, #1
 8009742:	73fb      	strb	r3, [r7, #15]
    break;
 8009744:	e005      	b.n	8009752 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009746:	2303      	movs	r3, #3
 8009748:	73fb      	strb	r3, [r7, #15]
    break;
 800974a:	e002      	b.n	8009752 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800974c:	2303      	movs	r3, #3
 800974e:	73fb      	strb	r3, [r7, #15]
    break;
 8009750:	bf00      	nop
  }
  return usb_status;
 8009752:	7bfb      	ldrb	r3, [r7, #15]
}
 8009754:	4618      	mov	r0, r3
 8009756:	3714      	adds	r7, #20
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <sniprintf>:
 8009760:	b40c      	push	{r2, r3}
 8009762:	b530      	push	{r4, r5, lr}
 8009764:	4b17      	ldr	r3, [pc, #92]	@ (80097c4 <sniprintf+0x64>)
 8009766:	1e0c      	subs	r4, r1, #0
 8009768:	681d      	ldr	r5, [r3, #0]
 800976a:	b09d      	sub	sp, #116	@ 0x74
 800976c:	da08      	bge.n	8009780 <sniprintf+0x20>
 800976e:	238b      	movs	r3, #139	@ 0x8b
 8009770:	602b      	str	r3, [r5, #0]
 8009772:	f04f 30ff 	mov.w	r0, #4294967295
 8009776:	b01d      	add	sp, #116	@ 0x74
 8009778:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800977c:	b002      	add	sp, #8
 800977e:	4770      	bx	lr
 8009780:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009784:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009788:	bf14      	ite	ne
 800978a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800978e:	4623      	moveq	r3, r4
 8009790:	9304      	str	r3, [sp, #16]
 8009792:	9307      	str	r3, [sp, #28]
 8009794:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009798:	9002      	str	r0, [sp, #8]
 800979a:	9006      	str	r0, [sp, #24]
 800979c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80097a0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80097a2:	ab21      	add	r3, sp, #132	@ 0x84
 80097a4:	a902      	add	r1, sp, #8
 80097a6:	4628      	mov	r0, r5
 80097a8:	9301      	str	r3, [sp, #4]
 80097aa:	f000 f9c3 	bl	8009b34 <_svfiprintf_r>
 80097ae:	1c43      	adds	r3, r0, #1
 80097b0:	bfbc      	itt	lt
 80097b2:	238b      	movlt	r3, #139	@ 0x8b
 80097b4:	602b      	strlt	r3, [r5, #0]
 80097b6:	2c00      	cmp	r4, #0
 80097b8:	d0dd      	beq.n	8009776 <sniprintf+0x16>
 80097ba:	9b02      	ldr	r3, [sp, #8]
 80097bc:	2200      	movs	r2, #0
 80097be:	701a      	strb	r2, [r3, #0]
 80097c0:	e7d9      	b.n	8009776 <sniprintf+0x16>
 80097c2:	bf00      	nop
 80097c4:	200000fc 	.word	0x200000fc

080097c8 <siprintf>:
 80097c8:	b40e      	push	{r1, r2, r3}
 80097ca:	b500      	push	{lr}
 80097cc:	b09c      	sub	sp, #112	@ 0x70
 80097ce:	ab1d      	add	r3, sp, #116	@ 0x74
 80097d0:	9002      	str	r0, [sp, #8]
 80097d2:	9006      	str	r0, [sp, #24]
 80097d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80097d8:	4809      	ldr	r0, [pc, #36]	@ (8009800 <siprintf+0x38>)
 80097da:	9107      	str	r1, [sp, #28]
 80097dc:	9104      	str	r1, [sp, #16]
 80097de:	4909      	ldr	r1, [pc, #36]	@ (8009804 <siprintf+0x3c>)
 80097e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80097e4:	9105      	str	r1, [sp, #20]
 80097e6:	6800      	ldr	r0, [r0, #0]
 80097e8:	9301      	str	r3, [sp, #4]
 80097ea:	a902      	add	r1, sp, #8
 80097ec:	f000 f9a2 	bl	8009b34 <_svfiprintf_r>
 80097f0:	9b02      	ldr	r3, [sp, #8]
 80097f2:	2200      	movs	r2, #0
 80097f4:	701a      	strb	r2, [r3, #0]
 80097f6:	b01c      	add	sp, #112	@ 0x70
 80097f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80097fc:	b003      	add	sp, #12
 80097fe:	4770      	bx	lr
 8009800:	200000fc 	.word	0x200000fc
 8009804:	ffff0208 	.word	0xffff0208

08009808 <memset>:
 8009808:	4402      	add	r2, r0
 800980a:	4603      	mov	r3, r0
 800980c:	4293      	cmp	r3, r2
 800980e:	d100      	bne.n	8009812 <memset+0xa>
 8009810:	4770      	bx	lr
 8009812:	f803 1b01 	strb.w	r1, [r3], #1
 8009816:	e7f9      	b.n	800980c <memset+0x4>

08009818 <__errno>:
 8009818:	4b01      	ldr	r3, [pc, #4]	@ (8009820 <__errno+0x8>)
 800981a:	6818      	ldr	r0, [r3, #0]
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop
 8009820:	200000fc 	.word	0x200000fc

08009824 <__libc_init_array>:
 8009824:	b570      	push	{r4, r5, r6, lr}
 8009826:	4d0d      	ldr	r5, [pc, #52]	@ (800985c <__libc_init_array+0x38>)
 8009828:	4c0d      	ldr	r4, [pc, #52]	@ (8009860 <__libc_init_array+0x3c>)
 800982a:	1b64      	subs	r4, r4, r5
 800982c:	10a4      	asrs	r4, r4, #2
 800982e:	2600      	movs	r6, #0
 8009830:	42a6      	cmp	r6, r4
 8009832:	d109      	bne.n	8009848 <__libc_init_array+0x24>
 8009834:	4d0b      	ldr	r5, [pc, #44]	@ (8009864 <__libc_init_array+0x40>)
 8009836:	4c0c      	ldr	r4, [pc, #48]	@ (8009868 <__libc_init_array+0x44>)
 8009838:	f000 fc66 	bl	800a108 <_init>
 800983c:	1b64      	subs	r4, r4, r5
 800983e:	10a4      	asrs	r4, r4, #2
 8009840:	2600      	movs	r6, #0
 8009842:	42a6      	cmp	r6, r4
 8009844:	d105      	bne.n	8009852 <__libc_init_array+0x2e>
 8009846:	bd70      	pop	{r4, r5, r6, pc}
 8009848:	f855 3b04 	ldr.w	r3, [r5], #4
 800984c:	4798      	blx	r3
 800984e:	3601      	adds	r6, #1
 8009850:	e7ee      	b.n	8009830 <__libc_init_array+0xc>
 8009852:	f855 3b04 	ldr.w	r3, [r5], #4
 8009856:	4798      	blx	r3
 8009858:	3601      	adds	r6, #1
 800985a:	e7f2      	b.n	8009842 <__libc_init_array+0x1e>
 800985c:	0800a318 	.word	0x0800a318
 8009860:	0800a318 	.word	0x0800a318
 8009864:	0800a318 	.word	0x0800a318
 8009868:	0800a31c 	.word	0x0800a31c

0800986c <__retarget_lock_acquire_recursive>:
 800986c:	4770      	bx	lr

0800986e <__retarget_lock_release_recursive>:
 800986e:	4770      	bx	lr

08009870 <memcpy>:
 8009870:	440a      	add	r2, r1
 8009872:	4291      	cmp	r1, r2
 8009874:	f100 33ff 	add.w	r3, r0, #4294967295
 8009878:	d100      	bne.n	800987c <memcpy+0xc>
 800987a:	4770      	bx	lr
 800987c:	b510      	push	{r4, lr}
 800987e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009882:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009886:	4291      	cmp	r1, r2
 8009888:	d1f9      	bne.n	800987e <memcpy+0xe>
 800988a:	bd10      	pop	{r4, pc}

0800988c <_free_r>:
 800988c:	b538      	push	{r3, r4, r5, lr}
 800988e:	4605      	mov	r5, r0
 8009890:	2900      	cmp	r1, #0
 8009892:	d041      	beq.n	8009918 <_free_r+0x8c>
 8009894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009898:	1f0c      	subs	r4, r1, #4
 800989a:	2b00      	cmp	r3, #0
 800989c:	bfb8      	it	lt
 800989e:	18e4      	addlt	r4, r4, r3
 80098a0:	f000 f8e0 	bl	8009a64 <__malloc_lock>
 80098a4:	4a1d      	ldr	r2, [pc, #116]	@ (800991c <_free_r+0x90>)
 80098a6:	6813      	ldr	r3, [r2, #0]
 80098a8:	b933      	cbnz	r3, 80098b8 <_free_r+0x2c>
 80098aa:	6063      	str	r3, [r4, #4]
 80098ac:	6014      	str	r4, [r2, #0]
 80098ae:	4628      	mov	r0, r5
 80098b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098b4:	f000 b8dc 	b.w	8009a70 <__malloc_unlock>
 80098b8:	42a3      	cmp	r3, r4
 80098ba:	d908      	bls.n	80098ce <_free_r+0x42>
 80098bc:	6820      	ldr	r0, [r4, #0]
 80098be:	1821      	adds	r1, r4, r0
 80098c0:	428b      	cmp	r3, r1
 80098c2:	bf01      	itttt	eq
 80098c4:	6819      	ldreq	r1, [r3, #0]
 80098c6:	685b      	ldreq	r3, [r3, #4]
 80098c8:	1809      	addeq	r1, r1, r0
 80098ca:	6021      	streq	r1, [r4, #0]
 80098cc:	e7ed      	b.n	80098aa <_free_r+0x1e>
 80098ce:	461a      	mov	r2, r3
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	b10b      	cbz	r3, 80098d8 <_free_r+0x4c>
 80098d4:	42a3      	cmp	r3, r4
 80098d6:	d9fa      	bls.n	80098ce <_free_r+0x42>
 80098d8:	6811      	ldr	r1, [r2, #0]
 80098da:	1850      	adds	r0, r2, r1
 80098dc:	42a0      	cmp	r0, r4
 80098de:	d10b      	bne.n	80098f8 <_free_r+0x6c>
 80098e0:	6820      	ldr	r0, [r4, #0]
 80098e2:	4401      	add	r1, r0
 80098e4:	1850      	adds	r0, r2, r1
 80098e6:	4283      	cmp	r3, r0
 80098e8:	6011      	str	r1, [r2, #0]
 80098ea:	d1e0      	bne.n	80098ae <_free_r+0x22>
 80098ec:	6818      	ldr	r0, [r3, #0]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	6053      	str	r3, [r2, #4]
 80098f2:	4408      	add	r0, r1
 80098f4:	6010      	str	r0, [r2, #0]
 80098f6:	e7da      	b.n	80098ae <_free_r+0x22>
 80098f8:	d902      	bls.n	8009900 <_free_r+0x74>
 80098fa:	230c      	movs	r3, #12
 80098fc:	602b      	str	r3, [r5, #0]
 80098fe:	e7d6      	b.n	80098ae <_free_r+0x22>
 8009900:	6820      	ldr	r0, [r4, #0]
 8009902:	1821      	adds	r1, r4, r0
 8009904:	428b      	cmp	r3, r1
 8009906:	bf04      	itt	eq
 8009908:	6819      	ldreq	r1, [r3, #0]
 800990a:	685b      	ldreq	r3, [r3, #4]
 800990c:	6063      	str	r3, [r4, #4]
 800990e:	bf04      	itt	eq
 8009910:	1809      	addeq	r1, r1, r0
 8009912:	6021      	streq	r1, [r4, #0]
 8009914:	6054      	str	r4, [r2, #4]
 8009916:	e7ca      	b.n	80098ae <_free_r+0x22>
 8009918:	bd38      	pop	{r3, r4, r5, pc}
 800991a:	bf00      	nop
 800991c:	20001870 	.word	0x20001870

08009920 <sbrk_aligned>:
 8009920:	b570      	push	{r4, r5, r6, lr}
 8009922:	4e0f      	ldr	r6, [pc, #60]	@ (8009960 <sbrk_aligned+0x40>)
 8009924:	460c      	mov	r4, r1
 8009926:	6831      	ldr	r1, [r6, #0]
 8009928:	4605      	mov	r5, r0
 800992a:	b911      	cbnz	r1, 8009932 <sbrk_aligned+0x12>
 800992c:	f000 fba6 	bl	800a07c <_sbrk_r>
 8009930:	6030      	str	r0, [r6, #0]
 8009932:	4621      	mov	r1, r4
 8009934:	4628      	mov	r0, r5
 8009936:	f000 fba1 	bl	800a07c <_sbrk_r>
 800993a:	1c43      	adds	r3, r0, #1
 800993c:	d103      	bne.n	8009946 <sbrk_aligned+0x26>
 800993e:	f04f 34ff 	mov.w	r4, #4294967295
 8009942:	4620      	mov	r0, r4
 8009944:	bd70      	pop	{r4, r5, r6, pc}
 8009946:	1cc4      	adds	r4, r0, #3
 8009948:	f024 0403 	bic.w	r4, r4, #3
 800994c:	42a0      	cmp	r0, r4
 800994e:	d0f8      	beq.n	8009942 <sbrk_aligned+0x22>
 8009950:	1a21      	subs	r1, r4, r0
 8009952:	4628      	mov	r0, r5
 8009954:	f000 fb92 	bl	800a07c <_sbrk_r>
 8009958:	3001      	adds	r0, #1
 800995a:	d1f2      	bne.n	8009942 <sbrk_aligned+0x22>
 800995c:	e7ef      	b.n	800993e <sbrk_aligned+0x1e>
 800995e:	bf00      	nop
 8009960:	2000186c 	.word	0x2000186c

08009964 <_malloc_r>:
 8009964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009968:	1ccd      	adds	r5, r1, #3
 800996a:	f025 0503 	bic.w	r5, r5, #3
 800996e:	3508      	adds	r5, #8
 8009970:	2d0c      	cmp	r5, #12
 8009972:	bf38      	it	cc
 8009974:	250c      	movcc	r5, #12
 8009976:	2d00      	cmp	r5, #0
 8009978:	4606      	mov	r6, r0
 800997a:	db01      	blt.n	8009980 <_malloc_r+0x1c>
 800997c:	42a9      	cmp	r1, r5
 800997e:	d904      	bls.n	800998a <_malloc_r+0x26>
 8009980:	230c      	movs	r3, #12
 8009982:	6033      	str	r3, [r6, #0]
 8009984:	2000      	movs	r0, #0
 8009986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800998a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009a60 <_malloc_r+0xfc>
 800998e:	f000 f869 	bl	8009a64 <__malloc_lock>
 8009992:	f8d8 3000 	ldr.w	r3, [r8]
 8009996:	461c      	mov	r4, r3
 8009998:	bb44      	cbnz	r4, 80099ec <_malloc_r+0x88>
 800999a:	4629      	mov	r1, r5
 800999c:	4630      	mov	r0, r6
 800999e:	f7ff ffbf 	bl	8009920 <sbrk_aligned>
 80099a2:	1c43      	adds	r3, r0, #1
 80099a4:	4604      	mov	r4, r0
 80099a6:	d158      	bne.n	8009a5a <_malloc_r+0xf6>
 80099a8:	f8d8 4000 	ldr.w	r4, [r8]
 80099ac:	4627      	mov	r7, r4
 80099ae:	2f00      	cmp	r7, #0
 80099b0:	d143      	bne.n	8009a3a <_malloc_r+0xd6>
 80099b2:	2c00      	cmp	r4, #0
 80099b4:	d04b      	beq.n	8009a4e <_malloc_r+0xea>
 80099b6:	6823      	ldr	r3, [r4, #0]
 80099b8:	4639      	mov	r1, r7
 80099ba:	4630      	mov	r0, r6
 80099bc:	eb04 0903 	add.w	r9, r4, r3
 80099c0:	f000 fb5c 	bl	800a07c <_sbrk_r>
 80099c4:	4581      	cmp	r9, r0
 80099c6:	d142      	bne.n	8009a4e <_malloc_r+0xea>
 80099c8:	6821      	ldr	r1, [r4, #0]
 80099ca:	1a6d      	subs	r5, r5, r1
 80099cc:	4629      	mov	r1, r5
 80099ce:	4630      	mov	r0, r6
 80099d0:	f7ff ffa6 	bl	8009920 <sbrk_aligned>
 80099d4:	3001      	adds	r0, #1
 80099d6:	d03a      	beq.n	8009a4e <_malloc_r+0xea>
 80099d8:	6823      	ldr	r3, [r4, #0]
 80099da:	442b      	add	r3, r5
 80099dc:	6023      	str	r3, [r4, #0]
 80099de:	f8d8 3000 	ldr.w	r3, [r8]
 80099e2:	685a      	ldr	r2, [r3, #4]
 80099e4:	bb62      	cbnz	r2, 8009a40 <_malloc_r+0xdc>
 80099e6:	f8c8 7000 	str.w	r7, [r8]
 80099ea:	e00f      	b.n	8009a0c <_malloc_r+0xa8>
 80099ec:	6822      	ldr	r2, [r4, #0]
 80099ee:	1b52      	subs	r2, r2, r5
 80099f0:	d420      	bmi.n	8009a34 <_malloc_r+0xd0>
 80099f2:	2a0b      	cmp	r2, #11
 80099f4:	d917      	bls.n	8009a26 <_malloc_r+0xc2>
 80099f6:	1961      	adds	r1, r4, r5
 80099f8:	42a3      	cmp	r3, r4
 80099fa:	6025      	str	r5, [r4, #0]
 80099fc:	bf18      	it	ne
 80099fe:	6059      	strne	r1, [r3, #4]
 8009a00:	6863      	ldr	r3, [r4, #4]
 8009a02:	bf08      	it	eq
 8009a04:	f8c8 1000 	streq.w	r1, [r8]
 8009a08:	5162      	str	r2, [r4, r5]
 8009a0a:	604b      	str	r3, [r1, #4]
 8009a0c:	4630      	mov	r0, r6
 8009a0e:	f000 f82f 	bl	8009a70 <__malloc_unlock>
 8009a12:	f104 000b 	add.w	r0, r4, #11
 8009a16:	1d23      	adds	r3, r4, #4
 8009a18:	f020 0007 	bic.w	r0, r0, #7
 8009a1c:	1ac2      	subs	r2, r0, r3
 8009a1e:	bf1c      	itt	ne
 8009a20:	1a1b      	subne	r3, r3, r0
 8009a22:	50a3      	strne	r3, [r4, r2]
 8009a24:	e7af      	b.n	8009986 <_malloc_r+0x22>
 8009a26:	6862      	ldr	r2, [r4, #4]
 8009a28:	42a3      	cmp	r3, r4
 8009a2a:	bf0c      	ite	eq
 8009a2c:	f8c8 2000 	streq.w	r2, [r8]
 8009a30:	605a      	strne	r2, [r3, #4]
 8009a32:	e7eb      	b.n	8009a0c <_malloc_r+0xa8>
 8009a34:	4623      	mov	r3, r4
 8009a36:	6864      	ldr	r4, [r4, #4]
 8009a38:	e7ae      	b.n	8009998 <_malloc_r+0x34>
 8009a3a:	463c      	mov	r4, r7
 8009a3c:	687f      	ldr	r7, [r7, #4]
 8009a3e:	e7b6      	b.n	80099ae <_malloc_r+0x4a>
 8009a40:	461a      	mov	r2, r3
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	42a3      	cmp	r3, r4
 8009a46:	d1fb      	bne.n	8009a40 <_malloc_r+0xdc>
 8009a48:	2300      	movs	r3, #0
 8009a4a:	6053      	str	r3, [r2, #4]
 8009a4c:	e7de      	b.n	8009a0c <_malloc_r+0xa8>
 8009a4e:	230c      	movs	r3, #12
 8009a50:	6033      	str	r3, [r6, #0]
 8009a52:	4630      	mov	r0, r6
 8009a54:	f000 f80c 	bl	8009a70 <__malloc_unlock>
 8009a58:	e794      	b.n	8009984 <_malloc_r+0x20>
 8009a5a:	6005      	str	r5, [r0, #0]
 8009a5c:	e7d6      	b.n	8009a0c <_malloc_r+0xa8>
 8009a5e:	bf00      	nop
 8009a60:	20001870 	.word	0x20001870

08009a64 <__malloc_lock>:
 8009a64:	4801      	ldr	r0, [pc, #4]	@ (8009a6c <__malloc_lock+0x8>)
 8009a66:	f7ff bf01 	b.w	800986c <__retarget_lock_acquire_recursive>
 8009a6a:	bf00      	nop
 8009a6c:	20001868 	.word	0x20001868

08009a70 <__malloc_unlock>:
 8009a70:	4801      	ldr	r0, [pc, #4]	@ (8009a78 <__malloc_unlock+0x8>)
 8009a72:	f7ff befc 	b.w	800986e <__retarget_lock_release_recursive>
 8009a76:	bf00      	nop
 8009a78:	20001868 	.word	0x20001868

08009a7c <__ssputs_r>:
 8009a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a80:	688e      	ldr	r6, [r1, #8]
 8009a82:	461f      	mov	r7, r3
 8009a84:	42be      	cmp	r6, r7
 8009a86:	680b      	ldr	r3, [r1, #0]
 8009a88:	4682      	mov	sl, r0
 8009a8a:	460c      	mov	r4, r1
 8009a8c:	4690      	mov	r8, r2
 8009a8e:	d82d      	bhi.n	8009aec <__ssputs_r+0x70>
 8009a90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009a98:	d026      	beq.n	8009ae8 <__ssputs_r+0x6c>
 8009a9a:	6965      	ldr	r5, [r4, #20]
 8009a9c:	6909      	ldr	r1, [r1, #16]
 8009a9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009aa2:	eba3 0901 	sub.w	r9, r3, r1
 8009aa6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009aaa:	1c7b      	adds	r3, r7, #1
 8009aac:	444b      	add	r3, r9
 8009aae:	106d      	asrs	r5, r5, #1
 8009ab0:	429d      	cmp	r5, r3
 8009ab2:	bf38      	it	cc
 8009ab4:	461d      	movcc	r5, r3
 8009ab6:	0553      	lsls	r3, r2, #21
 8009ab8:	d527      	bpl.n	8009b0a <__ssputs_r+0x8e>
 8009aba:	4629      	mov	r1, r5
 8009abc:	f7ff ff52 	bl	8009964 <_malloc_r>
 8009ac0:	4606      	mov	r6, r0
 8009ac2:	b360      	cbz	r0, 8009b1e <__ssputs_r+0xa2>
 8009ac4:	6921      	ldr	r1, [r4, #16]
 8009ac6:	464a      	mov	r2, r9
 8009ac8:	f7ff fed2 	bl	8009870 <memcpy>
 8009acc:	89a3      	ldrh	r3, [r4, #12]
 8009ace:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009ad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ad6:	81a3      	strh	r3, [r4, #12]
 8009ad8:	6126      	str	r6, [r4, #16]
 8009ada:	6165      	str	r5, [r4, #20]
 8009adc:	444e      	add	r6, r9
 8009ade:	eba5 0509 	sub.w	r5, r5, r9
 8009ae2:	6026      	str	r6, [r4, #0]
 8009ae4:	60a5      	str	r5, [r4, #8]
 8009ae6:	463e      	mov	r6, r7
 8009ae8:	42be      	cmp	r6, r7
 8009aea:	d900      	bls.n	8009aee <__ssputs_r+0x72>
 8009aec:	463e      	mov	r6, r7
 8009aee:	6820      	ldr	r0, [r4, #0]
 8009af0:	4632      	mov	r2, r6
 8009af2:	4641      	mov	r1, r8
 8009af4:	f000 faa8 	bl	800a048 <memmove>
 8009af8:	68a3      	ldr	r3, [r4, #8]
 8009afa:	1b9b      	subs	r3, r3, r6
 8009afc:	60a3      	str	r3, [r4, #8]
 8009afe:	6823      	ldr	r3, [r4, #0]
 8009b00:	4433      	add	r3, r6
 8009b02:	6023      	str	r3, [r4, #0]
 8009b04:	2000      	movs	r0, #0
 8009b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b0a:	462a      	mov	r2, r5
 8009b0c:	f000 fac6 	bl	800a09c <_realloc_r>
 8009b10:	4606      	mov	r6, r0
 8009b12:	2800      	cmp	r0, #0
 8009b14:	d1e0      	bne.n	8009ad8 <__ssputs_r+0x5c>
 8009b16:	6921      	ldr	r1, [r4, #16]
 8009b18:	4650      	mov	r0, sl
 8009b1a:	f7ff feb7 	bl	800988c <_free_r>
 8009b1e:	230c      	movs	r3, #12
 8009b20:	f8ca 3000 	str.w	r3, [sl]
 8009b24:	89a3      	ldrh	r3, [r4, #12]
 8009b26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b2a:	81a3      	strh	r3, [r4, #12]
 8009b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b30:	e7e9      	b.n	8009b06 <__ssputs_r+0x8a>
	...

08009b34 <_svfiprintf_r>:
 8009b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b38:	4698      	mov	r8, r3
 8009b3a:	898b      	ldrh	r3, [r1, #12]
 8009b3c:	061b      	lsls	r3, r3, #24
 8009b3e:	b09d      	sub	sp, #116	@ 0x74
 8009b40:	4607      	mov	r7, r0
 8009b42:	460d      	mov	r5, r1
 8009b44:	4614      	mov	r4, r2
 8009b46:	d510      	bpl.n	8009b6a <_svfiprintf_r+0x36>
 8009b48:	690b      	ldr	r3, [r1, #16]
 8009b4a:	b973      	cbnz	r3, 8009b6a <_svfiprintf_r+0x36>
 8009b4c:	2140      	movs	r1, #64	@ 0x40
 8009b4e:	f7ff ff09 	bl	8009964 <_malloc_r>
 8009b52:	6028      	str	r0, [r5, #0]
 8009b54:	6128      	str	r0, [r5, #16]
 8009b56:	b930      	cbnz	r0, 8009b66 <_svfiprintf_r+0x32>
 8009b58:	230c      	movs	r3, #12
 8009b5a:	603b      	str	r3, [r7, #0]
 8009b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b60:	b01d      	add	sp, #116	@ 0x74
 8009b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b66:	2340      	movs	r3, #64	@ 0x40
 8009b68:	616b      	str	r3, [r5, #20]
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b6e:	2320      	movs	r3, #32
 8009b70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b74:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b78:	2330      	movs	r3, #48	@ 0x30
 8009b7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009d18 <_svfiprintf_r+0x1e4>
 8009b7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b82:	f04f 0901 	mov.w	r9, #1
 8009b86:	4623      	mov	r3, r4
 8009b88:	469a      	mov	sl, r3
 8009b8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b8e:	b10a      	cbz	r2, 8009b94 <_svfiprintf_r+0x60>
 8009b90:	2a25      	cmp	r2, #37	@ 0x25
 8009b92:	d1f9      	bne.n	8009b88 <_svfiprintf_r+0x54>
 8009b94:	ebba 0b04 	subs.w	fp, sl, r4
 8009b98:	d00b      	beq.n	8009bb2 <_svfiprintf_r+0x7e>
 8009b9a:	465b      	mov	r3, fp
 8009b9c:	4622      	mov	r2, r4
 8009b9e:	4629      	mov	r1, r5
 8009ba0:	4638      	mov	r0, r7
 8009ba2:	f7ff ff6b 	bl	8009a7c <__ssputs_r>
 8009ba6:	3001      	adds	r0, #1
 8009ba8:	f000 80a7 	beq.w	8009cfa <_svfiprintf_r+0x1c6>
 8009bac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bae:	445a      	add	r2, fp
 8009bb0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009bb2:	f89a 3000 	ldrb.w	r3, [sl]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	f000 809f 	beq.w	8009cfa <_svfiprintf_r+0x1c6>
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bc6:	f10a 0a01 	add.w	sl, sl, #1
 8009bca:	9304      	str	r3, [sp, #16]
 8009bcc:	9307      	str	r3, [sp, #28]
 8009bce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009bd2:	931a      	str	r3, [sp, #104]	@ 0x68
 8009bd4:	4654      	mov	r4, sl
 8009bd6:	2205      	movs	r2, #5
 8009bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bdc:	484e      	ldr	r0, [pc, #312]	@ (8009d18 <_svfiprintf_r+0x1e4>)
 8009bde:	f7f6 fb07 	bl	80001f0 <memchr>
 8009be2:	9a04      	ldr	r2, [sp, #16]
 8009be4:	b9d8      	cbnz	r0, 8009c1e <_svfiprintf_r+0xea>
 8009be6:	06d0      	lsls	r0, r2, #27
 8009be8:	bf44      	itt	mi
 8009bea:	2320      	movmi	r3, #32
 8009bec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bf0:	0711      	lsls	r1, r2, #28
 8009bf2:	bf44      	itt	mi
 8009bf4:	232b      	movmi	r3, #43	@ 0x2b
 8009bf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bfa:	f89a 3000 	ldrb.w	r3, [sl]
 8009bfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c00:	d015      	beq.n	8009c2e <_svfiprintf_r+0xfa>
 8009c02:	9a07      	ldr	r2, [sp, #28]
 8009c04:	4654      	mov	r4, sl
 8009c06:	2000      	movs	r0, #0
 8009c08:	f04f 0c0a 	mov.w	ip, #10
 8009c0c:	4621      	mov	r1, r4
 8009c0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c12:	3b30      	subs	r3, #48	@ 0x30
 8009c14:	2b09      	cmp	r3, #9
 8009c16:	d94b      	bls.n	8009cb0 <_svfiprintf_r+0x17c>
 8009c18:	b1b0      	cbz	r0, 8009c48 <_svfiprintf_r+0x114>
 8009c1a:	9207      	str	r2, [sp, #28]
 8009c1c:	e014      	b.n	8009c48 <_svfiprintf_r+0x114>
 8009c1e:	eba0 0308 	sub.w	r3, r0, r8
 8009c22:	fa09 f303 	lsl.w	r3, r9, r3
 8009c26:	4313      	orrs	r3, r2
 8009c28:	9304      	str	r3, [sp, #16]
 8009c2a:	46a2      	mov	sl, r4
 8009c2c:	e7d2      	b.n	8009bd4 <_svfiprintf_r+0xa0>
 8009c2e:	9b03      	ldr	r3, [sp, #12]
 8009c30:	1d19      	adds	r1, r3, #4
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	9103      	str	r1, [sp, #12]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	bfbb      	ittet	lt
 8009c3a:	425b      	neglt	r3, r3
 8009c3c:	f042 0202 	orrlt.w	r2, r2, #2
 8009c40:	9307      	strge	r3, [sp, #28]
 8009c42:	9307      	strlt	r3, [sp, #28]
 8009c44:	bfb8      	it	lt
 8009c46:	9204      	strlt	r2, [sp, #16]
 8009c48:	7823      	ldrb	r3, [r4, #0]
 8009c4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c4c:	d10a      	bne.n	8009c64 <_svfiprintf_r+0x130>
 8009c4e:	7863      	ldrb	r3, [r4, #1]
 8009c50:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c52:	d132      	bne.n	8009cba <_svfiprintf_r+0x186>
 8009c54:	9b03      	ldr	r3, [sp, #12]
 8009c56:	1d1a      	adds	r2, r3, #4
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	9203      	str	r2, [sp, #12]
 8009c5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c60:	3402      	adds	r4, #2
 8009c62:	9305      	str	r3, [sp, #20]
 8009c64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009d28 <_svfiprintf_r+0x1f4>
 8009c68:	7821      	ldrb	r1, [r4, #0]
 8009c6a:	2203      	movs	r2, #3
 8009c6c:	4650      	mov	r0, sl
 8009c6e:	f7f6 fabf 	bl	80001f0 <memchr>
 8009c72:	b138      	cbz	r0, 8009c84 <_svfiprintf_r+0x150>
 8009c74:	9b04      	ldr	r3, [sp, #16]
 8009c76:	eba0 000a 	sub.w	r0, r0, sl
 8009c7a:	2240      	movs	r2, #64	@ 0x40
 8009c7c:	4082      	lsls	r2, r0
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	3401      	adds	r4, #1
 8009c82:	9304      	str	r3, [sp, #16]
 8009c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c88:	4824      	ldr	r0, [pc, #144]	@ (8009d1c <_svfiprintf_r+0x1e8>)
 8009c8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c8e:	2206      	movs	r2, #6
 8009c90:	f7f6 faae 	bl	80001f0 <memchr>
 8009c94:	2800      	cmp	r0, #0
 8009c96:	d036      	beq.n	8009d06 <_svfiprintf_r+0x1d2>
 8009c98:	4b21      	ldr	r3, [pc, #132]	@ (8009d20 <_svfiprintf_r+0x1ec>)
 8009c9a:	bb1b      	cbnz	r3, 8009ce4 <_svfiprintf_r+0x1b0>
 8009c9c:	9b03      	ldr	r3, [sp, #12]
 8009c9e:	3307      	adds	r3, #7
 8009ca0:	f023 0307 	bic.w	r3, r3, #7
 8009ca4:	3308      	adds	r3, #8
 8009ca6:	9303      	str	r3, [sp, #12]
 8009ca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009caa:	4433      	add	r3, r6
 8009cac:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cae:	e76a      	b.n	8009b86 <_svfiprintf_r+0x52>
 8009cb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cb4:	460c      	mov	r4, r1
 8009cb6:	2001      	movs	r0, #1
 8009cb8:	e7a8      	b.n	8009c0c <_svfiprintf_r+0xd8>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	3401      	adds	r4, #1
 8009cbe:	9305      	str	r3, [sp, #20]
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	f04f 0c0a 	mov.w	ip, #10
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ccc:	3a30      	subs	r2, #48	@ 0x30
 8009cce:	2a09      	cmp	r2, #9
 8009cd0:	d903      	bls.n	8009cda <_svfiprintf_r+0x1a6>
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d0c6      	beq.n	8009c64 <_svfiprintf_r+0x130>
 8009cd6:	9105      	str	r1, [sp, #20]
 8009cd8:	e7c4      	b.n	8009c64 <_svfiprintf_r+0x130>
 8009cda:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cde:	4604      	mov	r4, r0
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	e7f0      	b.n	8009cc6 <_svfiprintf_r+0x192>
 8009ce4:	ab03      	add	r3, sp, #12
 8009ce6:	9300      	str	r3, [sp, #0]
 8009ce8:	462a      	mov	r2, r5
 8009cea:	4b0e      	ldr	r3, [pc, #56]	@ (8009d24 <_svfiprintf_r+0x1f0>)
 8009cec:	a904      	add	r1, sp, #16
 8009cee:	4638      	mov	r0, r7
 8009cf0:	f3af 8000 	nop.w
 8009cf4:	1c42      	adds	r2, r0, #1
 8009cf6:	4606      	mov	r6, r0
 8009cf8:	d1d6      	bne.n	8009ca8 <_svfiprintf_r+0x174>
 8009cfa:	89ab      	ldrh	r3, [r5, #12]
 8009cfc:	065b      	lsls	r3, r3, #25
 8009cfe:	f53f af2d 	bmi.w	8009b5c <_svfiprintf_r+0x28>
 8009d02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d04:	e72c      	b.n	8009b60 <_svfiprintf_r+0x2c>
 8009d06:	ab03      	add	r3, sp, #12
 8009d08:	9300      	str	r3, [sp, #0]
 8009d0a:	462a      	mov	r2, r5
 8009d0c:	4b05      	ldr	r3, [pc, #20]	@ (8009d24 <_svfiprintf_r+0x1f0>)
 8009d0e:	a904      	add	r1, sp, #16
 8009d10:	4638      	mov	r0, r7
 8009d12:	f000 f879 	bl	8009e08 <_printf_i>
 8009d16:	e7ed      	b.n	8009cf4 <_svfiprintf_r+0x1c0>
 8009d18:	0800a2dc 	.word	0x0800a2dc
 8009d1c:	0800a2e6 	.word	0x0800a2e6
 8009d20:	00000000 	.word	0x00000000
 8009d24:	08009a7d 	.word	0x08009a7d
 8009d28:	0800a2e2 	.word	0x0800a2e2

08009d2c <_printf_common>:
 8009d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d30:	4616      	mov	r6, r2
 8009d32:	4698      	mov	r8, r3
 8009d34:	688a      	ldr	r2, [r1, #8]
 8009d36:	690b      	ldr	r3, [r1, #16]
 8009d38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	bfb8      	it	lt
 8009d40:	4613      	movlt	r3, r2
 8009d42:	6033      	str	r3, [r6, #0]
 8009d44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009d48:	4607      	mov	r7, r0
 8009d4a:	460c      	mov	r4, r1
 8009d4c:	b10a      	cbz	r2, 8009d52 <_printf_common+0x26>
 8009d4e:	3301      	adds	r3, #1
 8009d50:	6033      	str	r3, [r6, #0]
 8009d52:	6823      	ldr	r3, [r4, #0]
 8009d54:	0699      	lsls	r1, r3, #26
 8009d56:	bf42      	ittt	mi
 8009d58:	6833      	ldrmi	r3, [r6, #0]
 8009d5a:	3302      	addmi	r3, #2
 8009d5c:	6033      	strmi	r3, [r6, #0]
 8009d5e:	6825      	ldr	r5, [r4, #0]
 8009d60:	f015 0506 	ands.w	r5, r5, #6
 8009d64:	d106      	bne.n	8009d74 <_printf_common+0x48>
 8009d66:	f104 0a19 	add.w	sl, r4, #25
 8009d6a:	68e3      	ldr	r3, [r4, #12]
 8009d6c:	6832      	ldr	r2, [r6, #0]
 8009d6e:	1a9b      	subs	r3, r3, r2
 8009d70:	42ab      	cmp	r3, r5
 8009d72:	dc26      	bgt.n	8009dc2 <_printf_common+0x96>
 8009d74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009d78:	6822      	ldr	r2, [r4, #0]
 8009d7a:	3b00      	subs	r3, #0
 8009d7c:	bf18      	it	ne
 8009d7e:	2301      	movne	r3, #1
 8009d80:	0692      	lsls	r2, r2, #26
 8009d82:	d42b      	bmi.n	8009ddc <_printf_common+0xb0>
 8009d84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009d88:	4641      	mov	r1, r8
 8009d8a:	4638      	mov	r0, r7
 8009d8c:	47c8      	blx	r9
 8009d8e:	3001      	adds	r0, #1
 8009d90:	d01e      	beq.n	8009dd0 <_printf_common+0xa4>
 8009d92:	6823      	ldr	r3, [r4, #0]
 8009d94:	6922      	ldr	r2, [r4, #16]
 8009d96:	f003 0306 	and.w	r3, r3, #6
 8009d9a:	2b04      	cmp	r3, #4
 8009d9c:	bf02      	ittt	eq
 8009d9e:	68e5      	ldreq	r5, [r4, #12]
 8009da0:	6833      	ldreq	r3, [r6, #0]
 8009da2:	1aed      	subeq	r5, r5, r3
 8009da4:	68a3      	ldr	r3, [r4, #8]
 8009da6:	bf0c      	ite	eq
 8009da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009dac:	2500      	movne	r5, #0
 8009dae:	4293      	cmp	r3, r2
 8009db0:	bfc4      	itt	gt
 8009db2:	1a9b      	subgt	r3, r3, r2
 8009db4:	18ed      	addgt	r5, r5, r3
 8009db6:	2600      	movs	r6, #0
 8009db8:	341a      	adds	r4, #26
 8009dba:	42b5      	cmp	r5, r6
 8009dbc:	d11a      	bne.n	8009df4 <_printf_common+0xc8>
 8009dbe:	2000      	movs	r0, #0
 8009dc0:	e008      	b.n	8009dd4 <_printf_common+0xa8>
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	4652      	mov	r2, sl
 8009dc6:	4641      	mov	r1, r8
 8009dc8:	4638      	mov	r0, r7
 8009dca:	47c8      	blx	r9
 8009dcc:	3001      	adds	r0, #1
 8009dce:	d103      	bne.n	8009dd8 <_printf_common+0xac>
 8009dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dd8:	3501      	adds	r5, #1
 8009dda:	e7c6      	b.n	8009d6a <_printf_common+0x3e>
 8009ddc:	18e1      	adds	r1, r4, r3
 8009dde:	1c5a      	adds	r2, r3, #1
 8009de0:	2030      	movs	r0, #48	@ 0x30
 8009de2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009de6:	4422      	add	r2, r4
 8009de8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009dec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009df0:	3302      	adds	r3, #2
 8009df2:	e7c7      	b.n	8009d84 <_printf_common+0x58>
 8009df4:	2301      	movs	r3, #1
 8009df6:	4622      	mov	r2, r4
 8009df8:	4641      	mov	r1, r8
 8009dfa:	4638      	mov	r0, r7
 8009dfc:	47c8      	blx	r9
 8009dfe:	3001      	adds	r0, #1
 8009e00:	d0e6      	beq.n	8009dd0 <_printf_common+0xa4>
 8009e02:	3601      	adds	r6, #1
 8009e04:	e7d9      	b.n	8009dba <_printf_common+0x8e>
	...

08009e08 <_printf_i>:
 8009e08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e0c:	7e0f      	ldrb	r7, [r1, #24]
 8009e0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009e10:	2f78      	cmp	r7, #120	@ 0x78
 8009e12:	4691      	mov	r9, r2
 8009e14:	4680      	mov	r8, r0
 8009e16:	460c      	mov	r4, r1
 8009e18:	469a      	mov	sl, r3
 8009e1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009e1e:	d807      	bhi.n	8009e30 <_printf_i+0x28>
 8009e20:	2f62      	cmp	r7, #98	@ 0x62
 8009e22:	d80a      	bhi.n	8009e3a <_printf_i+0x32>
 8009e24:	2f00      	cmp	r7, #0
 8009e26:	f000 80d2 	beq.w	8009fce <_printf_i+0x1c6>
 8009e2a:	2f58      	cmp	r7, #88	@ 0x58
 8009e2c:	f000 80b9 	beq.w	8009fa2 <_printf_i+0x19a>
 8009e30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009e38:	e03a      	b.n	8009eb0 <_printf_i+0xa8>
 8009e3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009e3e:	2b15      	cmp	r3, #21
 8009e40:	d8f6      	bhi.n	8009e30 <_printf_i+0x28>
 8009e42:	a101      	add	r1, pc, #4	@ (adr r1, 8009e48 <_printf_i+0x40>)
 8009e44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e48:	08009ea1 	.word	0x08009ea1
 8009e4c:	08009eb5 	.word	0x08009eb5
 8009e50:	08009e31 	.word	0x08009e31
 8009e54:	08009e31 	.word	0x08009e31
 8009e58:	08009e31 	.word	0x08009e31
 8009e5c:	08009e31 	.word	0x08009e31
 8009e60:	08009eb5 	.word	0x08009eb5
 8009e64:	08009e31 	.word	0x08009e31
 8009e68:	08009e31 	.word	0x08009e31
 8009e6c:	08009e31 	.word	0x08009e31
 8009e70:	08009e31 	.word	0x08009e31
 8009e74:	08009fb5 	.word	0x08009fb5
 8009e78:	08009edf 	.word	0x08009edf
 8009e7c:	08009f6f 	.word	0x08009f6f
 8009e80:	08009e31 	.word	0x08009e31
 8009e84:	08009e31 	.word	0x08009e31
 8009e88:	08009fd7 	.word	0x08009fd7
 8009e8c:	08009e31 	.word	0x08009e31
 8009e90:	08009edf 	.word	0x08009edf
 8009e94:	08009e31 	.word	0x08009e31
 8009e98:	08009e31 	.word	0x08009e31
 8009e9c:	08009f77 	.word	0x08009f77
 8009ea0:	6833      	ldr	r3, [r6, #0]
 8009ea2:	1d1a      	adds	r2, r3, #4
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	6032      	str	r2, [r6, #0]
 8009ea8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009eac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	e09d      	b.n	8009ff0 <_printf_i+0x1e8>
 8009eb4:	6833      	ldr	r3, [r6, #0]
 8009eb6:	6820      	ldr	r0, [r4, #0]
 8009eb8:	1d19      	adds	r1, r3, #4
 8009eba:	6031      	str	r1, [r6, #0]
 8009ebc:	0606      	lsls	r6, r0, #24
 8009ebe:	d501      	bpl.n	8009ec4 <_printf_i+0xbc>
 8009ec0:	681d      	ldr	r5, [r3, #0]
 8009ec2:	e003      	b.n	8009ecc <_printf_i+0xc4>
 8009ec4:	0645      	lsls	r5, r0, #25
 8009ec6:	d5fb      	bpl.n	8009ec0 <_printf_i+0xb8>
 8009ec8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009ecc:	2d00      	cmp	r5, #0
 8009ece:	da03      	bge.n	8009ed8 <_printf_i+0xd0>
 8009ed0:	232d      	movs	r3, #45	@ 0x2d
 8009ed2:	426d      	negs	r5, r5
 8009ed4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ed8:	4859      	ldr	r0, [pc, #356]	@ (800a040 <_printf_i+0x238>)
 8009eda:	230a      	movs	r3, #10
 8009edc:	e011      	b.n	8009f02 <_printf_i+0xfa>
 8009ede:	6821      	ldr	r1, [r4, #0]
 8009ee0:	6833      	ldr	r3, [r6, #0]
 8009ee2:	0608      	lsls	r0, r1, #24
 8009ee4:	f853 5b04 	ldr.w	r5, [r3], #4
 8009ee8:	d402      	bmi.n	8009ef0 <_printf_i+0xe8>
 8009eea:	0649      	lsls	r1, r1, #25
 8009eec:	bf48      	it	mi
 8009eee:	b2ad      	uxthmi	r5, r5
 8009ef0:	2f6f      	cmp	r7, #111	@ 0x6f
 8009ef2:	4853      	ldr	r0, [pc, #332]	@ (800a040 <_printf_i+0x238>)
 8009ef4:	6033      	str	r3, [r6, #0]
 8009ef6:	bf14      	ite	ne
 8009ef8:	230a      	movne	r3, #10
 8009efa:	2308      	moveq	r3, #8
 8009efc:	2100      	movs	r1, #0
 8009efe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009f02:	6866      	ldr	r6, [r4, #4]
 8009f04:	60a6      	str	r6, [r4, #8]
 8009f06:	2e00      	cmp	r6, #0
 8009f08:	bfa2      	ittt	ge
 8009f0a:	6821      	ldrge	r1, [r4, #0]
 8009f0c:	f021 0104 	bicge.w	r1, r1, #4
 8009f10:	6021      	strge	r1, [r4, #0]
 8009f12:	b90d      	cbnz	r5, 8009f18 <_printf_i+0x110>
 8009f14:	2e00      	cmp	r6, #0
 8009f16:	d04b      	beq.n	8009fb0 <_printf_i+0x1a8>
 8009f18:	4616      	mov	r6, r2
 8009f1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f1e:	fb03 5711 	mls	r7, r3, r1, r5
 8009f22:	5dc7      	ldrb	r7, [r0, r7]
 8009f24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f28:	462f      	mov	r7, r5
 8009f2a:	42bb      	cmp	r3, r7
 8009f2c:	460d      	mov	r5, r1
 8009f2e:	d9f4      	bls.n	8009f1a <_printf_i+0x112>
 8009f30:	2b08      	cmp	r3, #8
 8009f32:	d10b      	bne.n	8009f4c <_printf_i+0x144>
 8009f34:	6823      	ldr	r3, [r4, #0]
 8009f36:	07df      	lsls	r7, r3, #31
 8009f38:	d508      	bpl.n	8009f4c <_printf_i+0x144>
 8009f3a:	6923      	ldr	r3, [r4, #16]
 8009f3c:	6861      	ldr	r1, [r4, #4]
 8009f3e:	4299      	cmp	r1, r3
 8009f40:	bfde      	ittt	le
 8009f42:	2330      	movle	r3, #48	@ 0x30
 8009f44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009f48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009f4c:	1b92      	subs	r2, r2, r6
 8009f4e:	6122      	str	r2, [r4, #16]
 8009f50:	f8cd a000 	str.w	sl, [sp]
 8009f54:	464b      	mov	r3, r9
 8009f56:	aa03      	add	r2, sp, #12
 8009f58:	4621      	mov	r1, r4
 8009f5a:	4640      	mov	r0, r8
 8009f5c:	f7ff fee6 	bl	8009d2c <_printf_common>
 8009f60:	3001      	adds	r0, #1
 8009f62:	d14a      	bne.n	8009ffa <_printf_i+0x1f2>
 8009f64:	f04f 30ff 	mov.w	r0, #4294967295
 8009f68:	b004      	add	sp, #16
 8009f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f6e:	6823      	ldr	r3, [r4, #0]
 8009f70:	f043 0320 	orr.w	r3, r3, #32
 8009f74:	6023      	str	r3, [r4, #0]
 8009f76:	4833      	ldr	r0, [pc, #204]	@ (800a044 <_printf_i+0x23c>)
 8009f78:	2778      	movs	r7, #120	@ 0x78
 8009f7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009f7e:	6823      	ldr	r3, [r4, #0]
 8009f80:	6831      	ldr	r1, [r6, #0]
 8009f82:	061f      	lsls	r7, r3, #24
 8009f84:	f851 5b04 	ldr.w	r5, [r1], #4
 8009f88:	d402      	bmi.n	8009f90 <_printf_i+0x188>
 8009f8a:	065f      	lsls	r7, r3, #25
 8009f8c:	bf48      	it	mi
 8009f8e:	b2ad      	uxthmi	r5, r5
 8009f90:	6031      	str	r1, [r6, #0]
 8009f92:	07d9      	lsls	r1, r3, #31
 8009f94:	bf44      	itt	mi
 8009f96:	f043 0320 	orrmi.w	r3, r3, #32
 8009f9a:	6023      	strmi	r3, [r4, #0]
 8009f9c:	b11d      	cbz	r5, 8009fa6 <_printf_i+0x19e>
 8009f9e:	2310      	movs	r3, #16
 8009fa0:	e7ac      	b.n	8009efc <_printf_i+0xf4>
 8009fa2:	4827      	ldr	r0, [pc, #156]	@ (800a040 <_printf_i+0x238>)
 8009fa4:	e7e9      	b.n	8009f7a <_printf_i+0x172>
 8009fa6:	6823      	ldr	r3, [r4, #0]
 8009fa8:	f023 0320 	bic.w	r3, r3, #32
 8009fac:	6023      	str	r3, [r4, #0]
 8009fae:	e7f6      	b.n	8009f9e <_printf_i+0x196>
 8009fb0:	4616      	mov	r6, r2
 8009fb2:	e7bd      	b.n	8009f30 <_printf_i+0x128>
 8009fb4:	6833      	ldr	r3, [r6, #0]
 8009fb6:	6825      	ldr	r5, [r4, #0]
 8009fb8:	6961      	ldr	r1, [r4, #20]
 8009fba:	1d18      	adds	r0, r3, #4
 8009fbc:	6030      	str	r0, [r6, #0]
 8009fbe:	062e      	lsls	r6, r5, #24
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	d501      	bpl.n	8009fc8 <_printf_i+0x1c0>
 8009fc4:	6019      	str	r1, [r3, #0]
 8009fc6:	e002      	b.n	8009fce <_printf_i+0x1c6>
 8009fc8:	0668      	lsls	r0, r5, #25
 8009fca:	d5fb      	bpl.n	8009fc4 <_printf_i+0x1bc>
 8009fcc:	8019      	strh	r1, [r3, #0]
 8009fce:	2300      	movs	r3, #0
 8009fd0:	6123      	str	r3, [r4, #16]
 8009fd2:	4616      	mov	r6, r2
 8009fd4:	e7bc      	b.n	8009f50 <_printf_i+0x148>
 8009fd6:	6833      	ldr	r3, [r6, #0]
 8009fd8:	1d1a      	adds	r2, r3, #4
 8009fda:	6032      	str	r2, [r6, #0]
 8009fdc:	681e      	ldr	r6, [r3, #0]
 8009fde:	6862      	ldr	r2, [r4, #4]
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	f7f6 f904 	bl	80001f0 <memchr>
 8009fe8:	b108      	cbz	r0, 8009fee <_printf_i+0x1e6>
 8009fea:	1b80      	subs	r0, r0, r6
 8009fec:	6060      	str	r0, [r4, #4]
 8009fee:	6863      	ldr	r3, [r4, #4]
 8009ff0:	6123      	str	r3, [r4, #16]
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ff8:	e7aa      	b.n	8009f50 <_printf_i+0x148>
 8009ffa:	6923      	ldr	r3, [r4, #16]
 8009ffc:	4632      	mov	r2, r6
 8009ffe:	4649      	mov	r1, r9
 800a000:	4640      	mov	r0, r8
 800a002:	47d0      	blx	sl
 800a004:	3001      	adds	r0, #1
 800a006:	d0ad      	beq.n	8009f64 <_printf_i+0x15c>
 800a008:	6823      	ldr	r3, [r4, #0]
 800a00a:	079b      	lsls	r3, r3, #30
 800a00c:	d413      	bmi.n	800a036 <_printf_i+0x22e>
 800a00e:	68e0      	ldr	r0, [r4, #12]
 800a010:	9b03      	ldr	r3, [sp, #12]
 800a012:	4298      	cmp	r0, r3
 800a014:	bfb8      	it	lt
 800a016:	4618      	movlt	r0, r3
 800a018:	e7a6      	b.n	8009f68 <_printf_i+0x160>
 800a01a:	2301      	movs	r3, #1
 800a01c:	4632      	mov	r2, r6
 800a01e:	4649      	mov	r1, r9
 800a020:	4640      	mov	r0, r8
 800a022:	47d0      	blx	sl
 800a024:	3001      	adds	r0, #1
 800a026:	d09d      	beq.n	8009f64 <_printf_i+0x15c>
 800a028:	3501      	adds	r5, #1
 800a02a:	68e3      	ldr	r3, [r4, #12]
 800a02c:	9903      	ldr	r1, [sp, #12]
 800a02e:	1a5b      	subs	r3, r3, r1
 800a030:	42ab      	cmp	r3, r5
 800a032:	dcf2      	bgt.n	800a01a <_printf_i+0x212>
 800a034:	e7eb      	b.n	800a00e <_printf_i+0x206>
 800a036:	2500      	movs	r5, #0
 800a038:	f104 0619 	add.w	r6, r4, #25
 800a03c:	e7f5      	b.n	800a02a <_printf_i+0x222>
 800a03e:	bf00      	nop
 800a040:	0800a2ed 	.word	0x0800a2ed
 800a044:	0800a2fe 	.word	0x0800a2fe

0800a048 <memmove>:
 800a048:	4288      	cmp	r0, r1
 800a04a:	b510      	push	{r4, lr}
 800a04c:	eb01 0402 	add.w	r4, r1, r2
 800a050:	d902      	bls.n	800a058 <memmove+0x10>
 800a052:	4284      	cmp	r4, r0
 800a054:	4623      	mov	r3, r4
 800a056:	d807      	bhi.n	800a068 <memmove+0x20>
 800a058:	1e43      	subs	r3, r0, #1
 800a05a:	42a1      	cmp	r1, r4
 800a05c:	d008      	beq.n	800a070 <memmove+0x28>
 800a05e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a062:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a066:	e7f8      	b.n	800a05a <memmove+0x12>
 800a068:	4402      	add	r2, r0
 800a06a:	4601      	mov	r1, r0
 800a06c:	428a      	cmp	r2, r1
 800a06e:	d100      	bne.n	800a072 <memmove+0x2a>
 800a070:	bd10      	pop	{r4, pc}
 800a072:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a076:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a07a:	e7f7      	b.n	800a06c <memmove+0x24>

0800a07c <_sbrk_r>:
 800a07c:	b538      	push	{r3, r4, r5, lr}
 800a07e:	4d06      	ldr	r5, [pc, #24]	@ (800a098 <_sbrk_r+0x1c>)
 800a080:	2300      	movs	r3, #0
 800a082:	4604      	mov	r4, r0
 800a084:	4608      	mov	r0, r1
 800a086:	602b      	str	r3, [r5, #0]
 800a088:	f7f7 ffb2 	bl	8001ff0 <_sbrk>
 800a08c:	1c43      	adds	r3, r0, #1
 800a08e:	d102      	bne.n	800a096 <_sbrk_r+0x1a>
 800a090:	682b      	ldr	r3, [r5, #0]
 800a092:	b103      	cbz	r3, 800a096 <_sbrk_r+0x1a>
 800a094:	6023      	str	r3, [r4, #0]
 800a096:	bd38      	pop	{r3, r4, r5, pc}
 800a098:	20001864 	.word	0x20001864

0800a09c <_realloc_r>:
 800a09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0a0:	4680      	mov	r8, r0
 800a0a2:	4615      	mov	r5, r2
 800a0a4:	460c      	mov	r4, r1
 800a0a6:	b921      	cbnz	r1, 800a0b2 <_realloc_r+0x16>
 800a0a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0ac:	4611      	mov	r1, r2
 800a0ae:	f7ff bc59 	b.w	8009964 <_malloc_r>
 800a0b2:	b92a      	cbnz	r2, 800a0c0 <_realloc_r+0x24>
 800a0b4:	f7ff fbea 	bl	800988c <_free_r>
 800a0b8:	2400      	movs	r4, #0
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0c0:	f000 f81a 	bl	800a0f8 <_malloc_usable_size_r>
 800a0c4:	4285      	cmp	r5, r0
 800a0c6:	4606      	mov	r6, r0
 800a0c8:	d802      	bhi.n	800a0d0 <_realloc_r+0x34>
 800a0ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a0ce:	d8f4      	bhi.n	800a0ba <_realloc_r+0x1e>
 800a0d0:	4629      	mov	r1, r5
 800a0d2:	4640      	mov	r0, r8
 800a0d4:	f7ff fc46 	bl	8009964 <_malloc_r>
 800a0d8:	4607      	mov	r7, r0
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	d0ec      	beq.n	800a0b8 <_realloc_r+0x1c>
 800a0de:	42b5      	cmp	r5, r6
 800a0e0:	462a      	mov	r2, r5
 800a0e2:	4621      	mov	r1, r4
 800a0e4:	bf28      	it	cs
 800a0e6:	4632      	movcs	r2, r6
 800a0e8:	f7ff fbc2 	bl	8009870 <memcpy>
 800a0ec:	4621      	mov	r1, r4
 800a0ee:	4640      	mov	r0, r8
 800a0f0:	f7ff fbcc 	bl	800988c <_free_r>
 800a0f4:	463c      	mov	r4, r7
 800a0f6:	e7e0      	b.n	800a0ba <_realloc_r+0x1e>

0800a0f8 <_malloc_usable_size_r>:
 800a0f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0fc:	1f18      	subs	r0, r3, #4
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	bfbc      	itt	lt
 800a102:	580b      	ldrlt	r3, [r1, r0]
 800a104:	18c0      	addlt	r0, r0, r3
 800a106:	4770      	bx	lr

0800a108 <_init>:
 800a108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a10a:	bf00      	nop
 800a10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a10e:	bc08      	pop	{r3}
 800a110:	469e      	mov	lr, r3
 800a112:	4770      	bx	lr

0800a114 <_fini>:
 800a114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a116:	bf00      	nop
 800a118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a11a:	bc08      	pop	{r3}
 800a11c:	469e      	mov	lr, r3
 800a11e:	4770      	bx	lr
