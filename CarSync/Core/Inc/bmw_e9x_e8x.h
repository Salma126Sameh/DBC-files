/**
 * @file bmw_e9x_e8x.h
 *
 * @brief This header file was generated by cantools version 40.2.0 Thu Mar  6 22:29:24 2025.
 *
 * @copyright Copyright (c) 2018-2019 Erik Moqvist
 *
 * @par License
 * The MIT License (MIT)
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef BMW_E9X_E8X_H
#define BMW_E9X_E8X_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define BMW_E9X_E8X_ACC_PEDAL_FRAME_ID (0xaau)
#define BMW_E9X_E8X_CRUISE_CONTROL_FRAME_ID (0x194u)
#define BMW_E9X_E8X_CRUISE_CONTROL_STATUS_FRAME_ID (0x200u)
#define BMW_E9X_E8X_ENGINE_AND_BRAKE_FRAME_ID (0xa8u)
#define BMW_E9X_E8X_STEERING_BUTTONS_FRAME_ID (0x1d6u)
#define BMW_E9X_E8X_DYNAMIC_CRUISE_CONTROL_STATUS_FRAME_ID (0x193u)
#define BMW_E9X_E8X_STEERING_WHEEL_ANGLE_DSC_FRAME_ID (0xc9u)
#define BMW_E9X_E8X_WHEEL_SPEEDS_FRAME_ID (0xceu)
#define BMW_E9X_E8X_WHEEL_TOLERANCE_ADJUSTMENT_FRAME_ID (0x374u)
#define BMW_E9X_E8X_WIPER_SWITCH_FRAME_ID (0x2a6u)
#define BMW_E9X_E8X_TERMINAL_STATUS_FRAME_ID (0x130u)
#define BMW_E9X_E8X_TORQUE2_FRAME_ID (0xa9u)
#define BMW_E9X_E8X_TORQUE_TRANSMISION_REQUEST_FRAME_ID (0xb8u)
#define BMW_E9X_E8X_STEERING_WHEEL_ANGLE_FRAME_ID (0xc4u)
#define BMW_E9X_E8X_WHEEL_TORQUE_DRIVE_TRAIN1_FRAME_ID (0xb4u)
#define BMW_E9X_E8X_DYNAMIC_CRUISE_CONTROL_TORQUE_DEMAND_FRAME_ID (0xb6u)
#define BMW_E9X_E8X_TRANSMISSION_DATA_FRAME_ID (0xbau)
#define BMW_E9X_E8X_REQUESTED_WHEEL_TORQUE_DRIVE_TRAIN_FRAME_ID (0xbfu)
#define BMW_E9X_E8X_STATUS_DSC_KCAN_FRAME_ID (0x19eu)
#define BMW_E9X_E8X_SPEED_FRAME_ID (0x1a0u)
#define BMW_E9X_E8X_TRANSIMISSION_DATA2_FRAME_ID (0x1a2u)
#define BMW_E9X_E8X_WHEEL_PRESSURE_KCAN_FRAME_ID (0x2b2u)
#define BMW_E9X_E8X_ACCELERATION_DATA_FRAME_ID (0x2b3u)
#define BMW_E9X_E8X_GEAR_SELECTOR_SWITCH_FRAME_ID (0x198u)
#define BMW_E9X_E8X_DISTANCE_ROUTE_FRAME_ID (0x1a6u)
#define BMW_E9X_E8X_INSTRUMENT_CLUSTER_STATUS_KOMBI_FRAME_ID (0x1b4u)
#define BMW_E9X_E8X_ENGINE_DATA_FRAME_ID (0x1d0u)
#define BMW_E9X_E8X_FUEL_LEVEL_FRAME_ID (0x3e8u)
#define BMW_E9X_E8X_TRANSMISSION_DATA3_FRAME_ID (0x3b1u)
#define BMW_E9X_E8X_STEERING_WHEEL_ANGLE_SLOW_FRAME_ID (0xc8u)
#define BMW_E9X_E8X_TRANSMISSION_DATA_DISPLAY_FRAME_ID (0x1d2u)
#define BMW_E9X_E8X_HEAT_FLOW_LOAD_TORQUE_CLIMATE_FRAME_ID (0x1b5u)
#define BMW_E9X_E8X_NETWORK_MANAGMENT1_FRAME_ID (0x480u)
#define BMW_E9X_E8X_NETWORK_MANAGMENT2_FRAME_ID (0x492u)
#define BMW_E9X_E8X_NETWORK_MANAGMENT3_FRAME_ID (0x497u)
#define BMW_E9X_E8X_NETWORK_MANAGMENT4_FRAME_ID (0x498u)
#define BMW_E9X_E8X_NETWORK_MANAGMENT5_FRAME_ID (0x4a9u)
#define BMW_E9X_E8X_GWS_SHIFT_LEVER_HEARTBEAT_FRAME_ID (0x4deu)
#define BMW_E9X_E8X_HEAT_FLOW_ENGINE_FRAME_ID (0x1b6u)
#define BMW_E9X_E8X_AMBIENT_TEMPERATURE_RELATIVE_TIME_FRAME_ID (0x310u)
#define BMW_E9X_E8X_ELECTRIC_FUEL_PUMP_STATUS_FRAME_ID (0x335u)
#define BMW_E9X_E8X_ENGINE_OBD_DATA_FRAME_ID (0x3efu)
#define BMW_E9X_E8X_SERVICES_DKG_FRAME_ID (0x598u)
#define BMW_E9X_E8X_CRASH_DISCONNECT_CONTROL_FRAME_ID (0x135u)
#define BMW_E9X_E8X_TURN_SIGNALS_FRAME_ID (0x1f6u)
#define BMW_E9X_E8X_DIMMING_FRAME_ID (0x202u)
#define BMW_E9X_E8X_LAMP_STATUS_FRAME_ID (0x21au)
#define BMW_E9X_E8X_RAIN_SENSOR_WIPER_SPEED_FRAME_ID (0x226u)
#define BMW_E9X_E8X_CLIMATE_FRONT_STATUS_FRAME_ID (0x242u)
#define BMW_E9X_E8X_LCD_LIGHTING_FRAME_ID (0x2c0u)
#define BMW_E9X_E8X_LIGHT_CONTROL_FRAME_ID (0x2f6u)
#define BMW_E9X_E8X_TIME_DATE_FRAME_ID (0x2f8u)
#define BMW_E9X_E8X_OCCUPANCY_SEAT_BELT_CONTACT_FRAME_ID (0x2fau)
#define BMW_E9X_E8X_TRUNK_STATUS_FRAME_ID (0x2fcu)
#define BMW_E9X_E8X_TIRE_PRESSURE_STATUS_FRAME_ID (0x31du)
#define BMW_E9X_E8X_RANGE_MILEAGE_FRAME_ID (0x330u)
#define BMW_E9X_E8X_STATUS_FUEL_CONTROL_FRAME_ID (0x337u)
#define BMW_E9X_E8X_ENGINE_OIL_LEVEL_FRAME_ID (0x381u)
#define BMW_E9X_E8X_RUN_ON_TIME_TERMINAL30_FRAME_ID (0x3acu)
#define BMW_E9X_E8X_POWER_MANAGMENT_CONSUMPTION_CONTROL_FRAME_ID (0x3b3u)
#define BMW_E9X_E8X_POWER_BATTERY_VOLTAGE_FRAME_ID (0x3b4u)
#define BMW_E9X_E8X_POWER_RUNNING_TIME_FRAME_ID (0x3beu)
#define BMW_E9X_E8X_SERVICES_KGM_FRAME_ID (0x580u)
#define BMW_E9X_E8X_SERVICES_DME_FRAME_ID (0x592u)
#define BMW_E9X_E8X_SERVICES_DSC_FRAME_ID (0x5a9u)
#define BMW_E9X_E8X_SERVICES_KOMBI_FRAME_ID (0x5e0u)
#define BMW_E9X_E8X_SERVICES_KBM_FRAME_ID (0x5f2u)
#define BMW_E9X_E8X_ACCELEROMETER1_FRAME_ID (0xd1u)
#define BMW_E9X_E8X_WHEEL_TORQUE_DRIVETRAIN2_FRAME_ID (0xacu)
#define BMW_E9X_E8X_SYNC_FRAME_ID (0x80u)
#define BMW_E9X_E8X_UNKNOWN140_FRAME_ID (0x140u)
#define BMW_E9X_E8X_UNKNOWN_D4_FRAME_ID (0xd4u)
#define BMW_E9X_E8X_ACCELEROMETER2_FRAME_ID (0xcdu)
#define BMW_E9X_E8X_OPERATION_PUSH_BUTTON_DTC_FRAME_ID (0x316u)
#define BMW_E9X_E8X_UNKNOWN_629_FRAME_ID (0x629u)
#define BMW_E9X_E8X_SYNCHRONIZATION_SC_VDA_FRAME_ID (0x85u)
#define BMW_E9X_E8X_DELAY_REQUEST_ACC_FRAME_ID (0xadu)
#define BMW_E9X_E8X_TORQUE_REQUEST_STEERING_FRAME_ID (0xb1u)
#define BMW_E9X_E8X_TORQUE_REQUEST_EGS_FRAME_ID (0xb5u)
#define BMW_E9X_E8X_TORQUE_REQUEST_ACC_FRAME_ID (0xb7u)
#define BMW_E9X_E8X_TARGET_TORQUE_REQUEST_FRAME_ID (0xbbu)
#define BMW_E9X_E8X_STATUS_TARGET_TORQUE_CONVERSION_FRAME_ID (0xbcu)
#define BMW_E9X_E8X_ALIVE_COUNTER_FRAME_ID (0xbeu)
#define BMW_E9X_E8X_ALIVE_CENTRAL_GATEWAY_FRAME_ID (0xc0u)
#define BMW_E9X_E8X_ALIVE_COUNTER_TELEPHONE_FRAME_ID (0xc1u)
#define BMW_E9X_E8X_REQUEST_WHEEL_TORQUE_BRAKE_FRAME_ID (0xd5u)
#define BMW_E9X_E8X_ALIVE_COUNTER_SECURITY_FRAME_ID (0xd7u)
#define BMW_E9X_E8X_CLU1_VDA_FRAME_ID (0xd8u)
#define BMW_E9X_E8X_WHEEL_TORQUE_BRAKE_FRAME_ID (0xe1u)
#define BMW_E9X_E8X_STATUS_CENTRAL_LOCKING_BFT_FRAME_ID (0xe2u)
#define BMW_E9X_E8X_CLU2_VDA_FRAME_ID (0xe3u)
#define BMW_E9X_E8X_STATUS_CENTRAL_LOCKING_BFTH_FRAME_ID (0xe6u)
#define BMW_E9X_E8X_STATUS_CENTRAL_LOCKING_FAT_FRAME_ID (0xeau)
#define BMW_E9X_E8X_CENTRAL_LOCKING_STATUS_FATH_FRAME_ID (0xeeu)
#define BMW_E9X_E8X_STATUS_CENTRAL_LOCKING_HK_FRAME_ID (0xf2u)
#define BMW_E9X_E8X_CLU3_VDA_FRAME_ID (0xf4u)
#define BMW_E9X_E8X_LATERAL_DYNAMICS_ARS_VDM_FRAME_ID (0xf7u)
#define BMW_E9X_E8X_VERTICAL_DYNAMICS_VDM_ARS_FRAME_ID (0xf9u)
#define BMW_E9X_E8X_CONTROL_WINDOW_LIFTER_FAT_FRAME_ID (0xfau)
#define BMW_E9X_E8X_CONTROL_WINDOW_LIFTER_BFT_FRAME_ID (0xfbu)
#define BMW_E9X_E8X_CONTROL_WINDOW_LIFTER_FATH_FRAME_ID (0xfcu)
#define BMW_E9X_E8X_CONTROL_WINDOW_LIFTER_BFTH_FRAME_ID (0xfdu)
#define BMW_E9X_E8X_VOLTAGE_LEVEL_SENSORS_FRAME_ID (0xfeu)
#define BMW_E9X_E8X_EXCHANGE_AFS_DSC_FRAME_ID (0x118u)
#define BMW_E9X_E8X_CONTROL_INTERVENTIONS_DSC_AFS_FRAME_ID (0x11eu)
#define BMW_E9X_E8X_STATUS_PARTIAL_SETPOINTS_AFS_DSC_2_FRAME_ID (0x120u)
#define BMW_E9X_E8X_SENSOR_DATA_ROSE_FRAME_ID (0x12au)
#define BMW_E9X_E8X_INPUT_DATA_ROSE_FRAME_ID (0x12cu)
#define BMW_E9X_E8X_REQUEST_1_ACC_FRAME_ID (0x150u)
#define BMW_E9X_E8X_REQUEST_2_ACC_FRAME_ID (0x153u)
#define BMW_E9X_E8X_OBJECT_DATA_ACC_FRAME_ID (0x159u)
#define BMW_E9X_E8X_STATUS_ACC_FRAME_ID (0x15cu)
#define BMW_E9X_E8X_REQUIREMENT_ANGLE_FFP_FRAME_ID (0x15fu)
#define BMW_E9X_E8X_CLU_STATUS_VDA_FRAME_ID (0x165u)
#define BMW_E9X_E8X_ACKNOWLEDGMENT_REQUEST_KOMBINATION_FRAME_ID (0x172u)
#define BMW_E9X_E8X_DISPLAY_MOTOR_DATA_FRAME_ID (0x175u)
#define BMW_E9X_E8X_DISPLAY_ACC_FRAME_ID (0x190u)
#define BMW_E9X_E8X_OPERATION_PUSH_BUTTON_MSA_FRAME_ID (0x195u)
#define BMW_E9X_E8X_RAW_DATA_LONGITUDINAL_ACCELERATION_FRAME_ID (0x1a3u)
#define BMW_E9X_E8X_ACTUATION_REQUEST_EMF_FRAME_ID (0x1a7u)
#define BMW_E9X_E8X_EFFECT_ERGO_COMMANDER_FRAME_ID (0x1aau)
#define BMW_E9X_E8X_STATUS_ARS_MODULE_FRAME_ID (0x1acu)
#define BMW_E9X_E8X_OPERATION_ERGO_COMMANDER_FRAME_ID (0x1b8u)
#define BMW_E9X_E8X_DISTANCE_MESSAGE_PDC_FRAME_ID (0x1c2u)
#define BMW_E9X_E8X_DISTANCE_MESSAGE_2_PDC_FRAME_ID (0x1c3u)
#define BMW_E9X_E8X_ACOUSTIC_MESSAGE_PDC_FRAME_ID (0x1c6u)
#define BMW_E9X_E8X_OPERATION_AIR_CONDITIONING_AIR_DISTRIBUTION_FA_FRAME_ID (0x1d8u)
#define BMW_E9X_E8X_OPERATION_PUSHBUTTON_M_DRIVE_FRAME_ID (0x1d9u)
#define BMW_E9X_E8X_CLIMATE_CONTROL_REMOTE_CONTROL_FRAME_ID (0x1dau)
#define BMW_E9X_E8X_OPERATION_STRATIFICATION_SEAT_HEATING_FRAME_ID (0x1dcu)
#define BMW_E9X_E8X_AIR_CONDITIONING_CONTROLS_REAR_FRAME_ID (0x1deu)
#define BMW_E9X_E8X_OPERATION_AIR_CONDITIONING_AIR_DISTRIBUTION_BF_FRAME_ID (0x1e0u)
#define BMW_E9X_E8X_OPERATION_AIR_CONDITIONING_FRONT_FRAME_ID (0x1e2u)
#define BMW_E9X_E8X_OPERATION_PUSHBUTTON_INTERIOR_LIGHTING_FRAME_ID (0x1e3u)
#define BMW_E9X_E8X_OPERATION_SEAT_HEATING_SEAT_CLIMATE_FA_FRAME_ID (0x1e7u)
#define BMW_E9X_E8X_OPERATION_SEAT_HEATING_SEAT_CLIMATE_BF_FRAME_ID (0x1e8u)
#define BMW_E9X_E8X_STEERING_COLUMN_ADJUSTMENT_CONTROL_FRAME_ID (0x1eau)
#define BMW_E9X_E8X_OPERATION_ACTIVE_SEAT_FA_FRAME_ID (0x1ebu)
#define BMW_E9X_E8X_OPERATION_ACTIVE_SEAT_BF_FRAME_ID (0x1ecu)
#define BMW_E9X_E8X_STEERING_COLUMN_SWITCH_OPERATION_FRAME_ID (0x1eeu)
#define BMW_E9X_E8X_OPERATION_SEAT_MEMORY_FA_FRAME_ID (0x1f3u)
#define BMW_E9X_E8X_OPERATION_SHD_MDS_FRAME_ID (0x1f8u)
#define BMW_E9X_E8X_STATUS_EPS_FRAME_ID (0x1fbu)
#define BMW_E9X_E8X_STATUS_AFS_FRAME_ID (0x1fcu)
#define BMW_E9X_E8X_STATUS_REQUEST_EMF_KCAN_FRAME_ID (0x1fdu)
#define BMW_E9X_E8X_CRASH_FRAME_ID (0x1feu)
#define BMW_E9X_E8X_STATUS_EMF_KCAN_FRAME_ID (0x201u)
#define BMW_E9X_E8X_ACOUSTIC_REQUEST_KOMBI_FRAME_ID (0x205u)
#define BMW_E9X_E8X_CONTROL_DISPLAY_SHIFTLIGHTS_FRAME_ID (0x206u)
#define BMW_E9X_E8X_MEMORY_ADJUSTMENT_FRAME_ID (0x20bu)
#define BMW_E9X_E8X_STEERING_COLUMN_CONTROL_FRAME_ID (0x20cu)
#define BMW_E9X_E8X_POSITION_STEERING_COLUMN_FRAME_ID (0x20du)
#define BMW_E9X_E8X_OPERATION_HUD_FRAME_ID (0x210u)
#define BMW_E9X_E8X_STATUS_HUD_FRAME_ID (0x211u)
#define BMW_E9X_E8X_HEIGHT_LEVELS_AIR_SPRING_FRAME_ID (0x212u)
#define BMW_E9X_E8X_OPERATION_NIGHT_VISION_FRAME_ID (0x21cu)
#define BMW_E9X_E8X_STATUS_NIGHT_VISION_FRAME_ID (0x21eu)
#define BMW_E9X_E8X_OPERATION_PUSH_BUTTON_NSW_FRAME_ID (0x224u)
#define BMW_E9X_E8X_OPERATION_SPECIAL_FUNCTION_FRAME_ID (0x228u)
#define BMW_E9X_E8X_STATUS_BFS_FRAME_ID (0x22au)
#define BMW_E9X_E8X_OPERATION_PUSH_BUTTON_NSL_FRAME_ID (0x22cu)
#define BMW_E9X_E8X_STATUS_BFSH_FRAME_ID (0x22eu)
#define BMW_E9X_E8X_STATUS_FAS_FRAME_ID (0x232u)
#define BMW_E9X_E8X_STATUS_FASH_FRAME_ID (0x236u)
#define BMW_E9X_E8X_STATUS_RADIO_KEY_FRAME_ID (0x23au)
#define BMW_E9X_E8X_STATUS_CLIMATE_FRONT_EXTENDED_FRAME_ID (0x23bu)
#define BMW_E9X_E8X_REQUEST_DISPLAY_CLIMATE_FRAME_ID (0x23du)
#define BMW_E9X_E8X_STATUS_KLIMA_FOND_FRAME_ID (0x23eu)
#define BMW_E9X_E8X_STATUS_AIR_CONDITIONING_FRONT_CONTROL_UNIT_FRAME_ID (0x246u)
#define BMW_E9X_E8X_STATUS_REAR_VIEW_CAMERA_FRAME_ID (0x248u)
#define BMW_E9X_E8X_CONTROL_REAR_VIEW_CAMERA_FRAME_ID (0x249u)
#define BMW_E9X_E8X_STATUS_PDC_FRAME_ID (0x24au)
#define BMW_E9X_E8X_STATUS_DOOR_SENSORS_FRAME_ID (0x24bu)
#define BMW_E9X_E8X_WIPER_STATUS_FRAME_ID (0x252u)
#define BMW_E9X_E8X_CHALLENGE_PASSIVE_ACCESS_FRAME_ID (0x256u)
#define BMW_E9X_E8X_STATUS_TRANSMISSION_PASSIVE_ACCESS_FRAME_ID (0x258u)
#define BMW_E9X_E8X_OPERATION_OF_CLIMATE_ADDITIONAL_PROGRAMS_FRAME_ID (0x25cu)
#define BMW_E9X_E8X_OPERATION_BLINDS_MK_FRAME_ID (0x26du)
#define BMW_E9X_E8X_CONTROL_FH_SHD_CENTRAL_COMFORT_FRAME_ID (0x26eu)
#define BMW_E9X_E8X_STATUS_SHIFTLIGHTS_FRAME_ID (0x27bu)
#define BMW_E9X_E8X_STATUS_CONVERTIBLE_TOP_MANUAL_CONVERTIBLE_FRAME_ID (0x27du)
#define BMW_E9X_E8X_STATUS_CONVERTIBLE_TOP_CONVERTIBLE_FRAME_ID (0x27eu)
#define BMW_E9X_E8X_STATUS_CENTRAL_LOCKING_CONVERTIBLE_TOP_FRAME_ID (0x27fu)
#define BMW_E9X_E8X_CONTROL_SECURITY_VEHICLE_2_FRAME_ID (0x282u)
#define BMW_E9X_E8X_CONTROL_REMOTE_START_SAFETY_VEHICLE_FRAME_ID (0x284u)
#define BMW_E9X_E8X_ELECTROCHROMIC_CONTROL_FRAME_ID (0x286u)
#define BMW_E9X_E8X_PUSHBUTTON_VERTICAL_DYNAMICS_FRAME_ID (0x28cu)
#define BMW_E9X_E8X_OPERATION_PUSHBUTTON_SPORT_FRAME_ID (0x28du)
#define BMW_E9X_E8X_CONTROL_RESPONSE_HYDROGEN_VEHICLE_FRAME_ID (0x290u)
#define BMW_E9X_E8X_CONTROL_HIGH_BEAM_ASSISTANT_FRAME_ID (0x292u)
#define BMW_E9X_E8X_CENTRAL_LOCKING_CONTROL_FOR_SECURITY_VEHICLE_FRAME_ID (0x29eu)
#define BMW_E9X_E8X_REMOTE_CONTROL_FOND_COMMANDER_FRAME_ID (0x29fu)
#define BMW_E9X_E8X_CENTRAL_LOCKING_CONTROL_FRAME_ID (0x2a0u)
#define BMW_E9X_E8X_OPERATION_OF_CLIMATE_STAND_FUNCTIONS_FRAME_ID (0x2a2u)
#define BMW_E9X_E8X_OPERATION_PERSONALIZATION_FRAME_ID (0x2a4u)
#define BMW_E9X_E8X_DWA_ALARM_FRAME_ID (0x2b4u)
#define BMW_E9X_E8X_CONTROL_HORN_DWA_FRAME_ID (0x2b6u)
#define BMW_E9X_E8X_OPERATION_ONBOARD_COMPUTER_FRAME_ID (0x2b8u)
#define BMW_E9X_E8X_OPERATION_RSE_FRAME_ID (0x2b9u)
#define BMW_E9X_E8X_STOPWATCH_FRAME_ID (0x2bau)
#define BMW_E9X_E8X_REQUEST_SWITCHING_DISPLAY_FRAME_ID (0x2bdu)
#define BMW_E9X_E8X_SWITCH_STATUS_DISPLAY_FRAME_ID (0x2beu)
#define BMW_E9X_E8X_WATER_VALVE_CONTROL_FRAME_ID (0x2bfu)
#define BMW_E9X_E8X_TEMPERATUR_IST_FOND_FRAME_ID (0x2c2u)
#define BMW_E9X_E8X_DISPLAY_KOMBINATION_EXTENDED_FRAME_ID (0x2c7u)
#define BMW_E9X_E8X_OUTSIDE_TEMPERATURE_FRAME_ID (0x2cau)
#define BMW_E9X_E8X_CONTROL_MONITOR_REAR_FRAME_ID (0x2ccu)
#define BMW_E9X_E8X_CONTROL_MONITOR_FRAME_ID (0x2ceu)
#define BMW_E9X_E8X_STATUS_OF_AUXILIARY_WATER_PUMP_FRAME_ID (0x2cfu)
#define BMW_E9X_E8X_STATUS_SENSOR_AUC_FRAME_ID (0x2d0u)
#define BMW_E9X_E8X_STATUS_FITTING_WINDOW_V_FRAME_ID (0x2d1u)
#define BMW_E9X_E8X_STATUS_PRESSURE_REFRIGERATION_CIRCUIT_FRAME_ID (0x2d2u)
#define BMW_E9X_E8X_STATUS_STRATIFICATION_REAR_FRAME_ID (0x2d3u)
#define BMW_E9X_E8X_STATUS_HEATING_REAR_WINDOW_FRAME_ID (0x2d5u)
#define BMW_E9X_E8X_STATUS_VALVE_AIR_CONDITIONING_COMPRESSOR_FRAME_ID (0x2d6u)
#define BMW_E9X_E8X_STATUS_TAILGATE_LIFT_FRAME_ID (0x2dau)
#define BMW_E9X_E8X_SWITCH_CONTROL_DISPLAY_FRAME_ID (0x2deu)
#define BMW_E9X_E8X_STATUS_SETTING_VIDEO_NIGHT_VISION_FRAME_ID (0x2e2u)
#define BMW_E9X_E8X_STATUS_SETTING_VIDEO_REAR_VIEW_CAMERA_FRAME_ID (0x2e3u)
#define BMW_E9X_E8X_STATUS_TRAILER_FRAME_ID (0x2e4u)
#define BMW_E9X_E8X_STATUS_OF_AIR_DISTRIBUTION_FA_FRAME_ID (0x2e6u)
#define BMW_E9X_E8X_STATUS_AIR_DISTRIBUTION_BF_FRAME_ID (0x2eau)
#define BMW_E9X_E8X_STATUS_CLIMATE_ADDITIONAL_PROGRAMS_FRAME_ID (0x2eeu)
#define BMW_E9X_E8X_STATUS_AIR_CONDITION_FUNCTIONS_FRAME_ID (0x2f0u)
#define BMW_E9X_E8X_STATUS_DRIVER_DETECTION_FRAME_ID (0x2f1u)
#define BMW_E9X_E8X_DISPLAY_SWITCHING_INSTRUCTION_FRAME_ID (0x2f3u)
#define BMW_E9X_E8X_AIR_CONDITIONING_CONTROL_SH_ZH_AUXILIARY_WATER_PUMP_FRAME_ID (0x2f4u)
#define BMW_E9X_E8X_UNITS_FRAME_ID (0x2f7u)
#define BMW_E9X_E8X_STATUS_RSE_FRAME_ID (0x300u)
#define BMW_E9X_E8X_STATUS_GANG_FRAME_ID (0x304u)
#define BMW_E9X_E8X_OPERATION_BUTTON_CONVERTIBLE_TOP_FRAME_ID (0x305u)
#define BMW_E9X_E8X_VEHICLE_TILT_FRAME_ID (0x306u)
#define BMW_E9X_E8X_OPERATION_BUTTON_FLAP_CONVERTIBLE_TOP_FRAME_ID (0x307u)
#define BMW_E9X_E8X_STATUS_MSA_FRAME_ID (0x308u)
#define BMW_E9X_E8X_REFILL_QUANTITY_FRAME_ID (0x311u)
#define BMW_E9X_E8X_SERVICE_CALL_TELESERVICE_FRAME_ID (0x312u)
#define BMW_E9X_E8X_STATUS_SERVICE_CALL_TELESERVICE_FRAME_ID (0x313u)
#define BMW_E9X_E8X_STATUS_DRIVING_LIGHT_FRAME_ID (0x314u)
#define BMW_E9X_E8X_VEHICLE_MODE_FRAME_ID (0x315u)
#define BMW_E9X_E8X_OPERATION_BUTTON_PARKING_AIDS_FRAME_ID (0x317u)
#define BMW_E9X_E8X_STATUS_ANTENNAS_PASSIVE_ACCESS_FRAME_ID (0x318u)
#define BMW_E9X_E8X_OPERATION_PUSH_BUTTON_RDC_FRAME_ID (0x319u)
#define BMW_E9X_E8X_OPERATION_BUTTON_HDC_FRAME_ID (0x31au)
#define BMW_E9X_E8X_OPERATION_OF_TAILGATE_INTERIOR_BUTTON_FRAME_ID (0x31bu)
#define BMW_E9X_E8X_STATUS_TIRE_PRESSURE_FRAME_ID (0x31cu)
#define BMW_E9X_E8X_OPERATION_BUTTON_CAMERA_BF_FRAME_ID (0x321u)
#define BMW_E9X_E8X_DAMPER_CURRENT_FRAME_ID (0x322u)
#define BMW_E9X_E8X_STATUS_DAMPER_PROGRAM_FRAME_ID (0x326u)
#define BMW_E9X_E8X_RELATIVZEIT_FRAME_ID (0x328u)
#define BMW_E9X_E8X_DISPLAY_HDC_FRAME_ID (0x32du)
#define BMW_E9X_E8X_STATUS_CLIMATE_INTERNAL_CONTROL_INFO_FRAME_ID (0x32eu)
#define BMW_E9X_E8X_PROGRAMMING_OF_STEP_CRUISE_CONTROL_FRAME_ID (0x331u)
#define BMW_E9X_E8X_DRIVER_DISPLAY_SPEED_RANGE_FRAME_ID (0x332u)
#define BMW_E9X_E8X_DISPLAY_CHECK_CONTROL_MESSAGE_ROLE_FRAME_ID (0x336u)
#define BMW_E9X_E8X_CONTROL_DISPLAY_CHECK_CONTROL_MESSAGE_FRAME_ID (0x338u)
#define BMW_E9X_E8X_STATUS_DISPLAY_CLIMATE_FRAME_ID (0x339u)
#define BMW_E9X_E8X_STATUS_MONITOR_FRONT_FRAME_ID (0x33au)
#define BMW_E9X_E8X_STATUS_MONITOR_FOND_1_FRAME_ID (0x33cu)
#define BMW_E9X_E8X_STATUS_MONITOR_FOND_2_FRAME_ID (0x33eu)
#define BMW_E9X_E8X_RAW_DATA_LEVEL_TANK_FRAME_ID (0x349u)
#define BMW_E9X_E8X_SEAT_BACK_LOCK_STATUS_FA_FRAME_ID (0x34bu)
#define BMW_E9X_E8X_STATUS_SEAT_BACK_LOCK_BF_FRAME_ID (0x34du)
#define BMW_E9X_E8X_STATUS_CONTACT_HANDBRAKE_FRAME_ID (0x34fu)
#define BMW_E9X_E8X_APPOINTMENT_CONDITION_BASED_SERVICE_FRAME_ID (0x35au)
#define BMW_E9X_E8X_STATUS_ONBOARD_COMPUTER_FRAME_ID (0x35cu)
#define BMW_E9X_E8X_ONBOARD_COMPUTER_DATA_TRIP_DATA_FRAME_ID (0x35eu)
#define BMW_E9X_E8X_DATA_ONBOARD_COMPUTER_START_OF_JOURNEY_FRAME_ID (0x360u)
#define BMW_E9X_E8X_DATA_ONBOARD_COMPUTER_AVERAGE_VALUES_FRAME_ID (0x362u)
#define BMW_E9X_E8X_DATA_ONBOARD_COMPUTER_ARRIVAL_FRAME_ID (0x364u)
#define BMW_E9X_E8X_STATUS_TERMINAL_REQUEST_FRAME_ID (0x365u)
#define BMW_E9X_E8X_DISPLAY_KOMBINATION_EXTERNAL_DISPLAY_FRAME_ID (0x366u)
#define BMW_E9X_E8X_CONTROL_DISPLAY_OF_DEMAND_ORIENTED_SERVICE_FRAME_ID (0x367u)
#define BMW_E9X_E8X_SETTING_THE_DRIVING_DYNAMICS_SWITCH_FRAME_ID (0x36du)
#define BMW_E9X_E8X_STATUS_WEAR_LAMELLA_FRAME_ID (0x376u)
#define BMW_E9X_E8X_STATUS_DKG_FRAME_ID (0x37du)
#define BMW_E9X_E8X_TEMPERATUR_BREMSE_FRAME_ID (0x37eu)
#define BMW_E9X_E8X_RANGE_OF_DIESEL_EXHAUST_GAS_ADDITIVE_FRAME_ID (0x37fu)
#define BMW_E9X_E8X_CHASSIS_NUMBER_FRAME_ID (0x380u)
#define BMW_E9X_E8X_ELECTRONIC_ENGINE_OIL_DIPSTICK_M_FRAME_ID (0x382u)
#define BMW_E9X_E8X_MOTOR_DATA_2_FRAME_ID (0x383u)
#define BMW_E9X_E8X_VEHICLE_TYPE_FRAME_ID (0x388u)
#define BMW_E9X_E8X_STATUS_BATTERY_FRAME_ID (0x38bu)
#define BMW_E9X_E8X_START_SPEED_FRAME_ID (0x38eu)
#define BMW_E9X_E8X_STATUS_SYSTEM_AFS_FRAME_ID (0x392u)
#define BMW_E9X_E8X_RDA_REQUEST_DATA_STORAGE_FRAME_ID (0x394u)
#define BMW_E9X_E8X_CODING_POWER_MANAGEMENT_FRAME_ID (0x395u)
#define BMW_E9X_E8X_OPERATION_CHASSIS_FRAME_ID (0x398u)
#define BMW_E9X_E8X_STATUS_M_DRIVE_FRAME_ID (0x399u)
#define BMW_E9X_E8X_OPERATION_TIME_DATE_FRAME_ID (0x39eu)
#define BMW_E9X_E8X_VEHICLE_STATE_FRAME_ID (0x3a0u)
#define BMW_E9X_E8X_REQUEST_REMOTE_SERVICES_FRAME_ID (0x3a3u)
#define BMW_E9X_E8X_STATUS_MOTOR_CONTROL_CKM_FRAME_ID (0x3a9u)
#define BMW_E9X_E8X_STATUS_SHIFTLIGHTS_CKM_FRAME_ID (0x3abu)
#define BMW_E9X_E8X_STATUS_GEAR_REVERSE_FRAME_ID (0x3b0u)
#define BMW_E9X_E8X_STATUS_WATER_VALVE_FRAME_ID (0x3b5u)
#define BMW_E9X_E8X_POSITION_WINDOW_LIFTER_FAT_FRAME_ID (0x3b6u)
#define BMW_E9X_E8X_POSITION_WINDOW_LIFTER_FATH_FRAME_ID (0x3b7u)
#define BMW_E9X_E8X_POSITION_WINDOW_REGULATOR_BFT_FRAME_ID (0x3b8u)
#define BMW_E9X_E8X_POSITION_WINDOW_REGULATOR_BFTH_FRAME_ID (0x3b9u)
#define BMW_E9X_E8X_POSITION_SHD_FRAME_ID (0x3bau)
#define BMW_E9X_E8X_POSITION_WINDOW_LIFTER_SECURITY_VEHICLE_FRAME_ID (0x3bcu)
#define BMW_E9X_E8X_STATUS_CONSUMER_SHUTDOWN_FRAME_ID (0x3bdu)
#define BMW_E9X_E8X_POSITION_WINDOW_REAR_WINDOW_FRAME_ID (0x3bfu)
#define BMW_E9X_E8X_CONFIGURATION_FAS_FRAME_ID (0x3c0u)
#define BMW_E9X_E8X_CONFIGURATION_BFS_FRAME_ID (0x3c1u)
#define BMW_E9X_E8X_STATUS_EDCK_CKM_FRAME_ID (0x3c4u)
#define BMW_E9X_E8X_ACCESS_RADIO_FRAME_ID (0x3c7u)
#define BMW_E9X_E8X_OPERATION_PUSH_BUTTON_RADIO_FRAME_ID (0x3c8u)
#define BMW_E9X_E8X_RADIO_AUDIO_CONTROL_INTERFACE_DISPLAY_FRAME_ID (0x3ceu)
#define BMW_E9X_E8X_ACKNOWLEDGMENT_ACCESS_RADIO_AUDIO_CONTROL_INTERFACE_FRAME_ID (0x3cfu)
#define BMW_E9X_E8X_STATUS_SOLAR_SENSOR_FRAME_ID (0x3d3u)
#define BMW_E9X_E8X_CONFIGURATION_OF_CENTRAL_LOCKING_CKM_FRAME_ID (0x3d4u)
#define BMW_E9X_E8X_STATUS_CENTRAL_LOCKING_CKM_FRAME_ID (0x3d5u)
#define BMW_E9X_E8X_CONFIGURATION_DWA_CKM_FRAME_ID (0x3d6u)
#define BMW_E9X_E8X_STATUS_DWA_CKM_FRAME_ID (0x3d7u)
#define BMW_E9X_E8X_CONFIGURATION_RLS_CKM_FRAME_ID (0x3d8u)
#define BMW_E9X_E8X_STATUS_RLS_CKM_FRAME_ID (0x3d9u)
#define BMW_E9X_E8X_CONFIGURATION_OF_MEMORY_POSITIONS_CKM_FRAME_ID (0x3dau)
#define BMW_E9X_E8X_STATUS_MEMORY_POSITIONS_CKM_FRAME_ID (0x3dbu)
#define BMW_E9X_E8X_CONFIGURATION_LIGHT_CKM_FRAME_ID (0x3dcu)
#define BMW_E9X_E8X_STATUS_LIGHT_CKM_FRAME_ID (0x3ddu)
#define BMW_E9X_E8X_CONFIGURATION_CLIMATE_CKM_FRAME_ID (0x3deu)
#define BMW_E9X_E8X_STATUS_KLIMA_CKM_FRAME_ID (0x3dfu)
#define BMW_E9X_E8X_CONFIGURATION_OF_TAILGATE_CKM_FRAME_ID (0x3e2u)
#define BMW_E9X_E8X_STATUS_TAILGATE_CKM_FRAME_ID (0x3e3u)
#define BMW_E9X_E8X_CONFIGURATION_REAR_VIEW_CAMERA_CKM_FRAME_ID (0x3e4u)

/* Frame lengths in bytes. */
#define BMW_E9X_E8X_ACC_PEDAL_LENGTH (8u)
#define BMW_E9X_E8X_CRUISE_CONTROL_LENGTH (4u)
#define BMW_E9X_E8X_CRUISE_CONTROL_STATUS_LENGTH (8u)
#define BMW_E9X_E8X_ENGINE_AND_BRAKE_LENGTH (8u)
#define BMW_E9X_E8X_STEERING_BUTTONS_LENGTH (2u)
#define BMW_E9X_E8X_DYNAMIC_CRUISE_CONTROL_STATUS_LENGTH (8u)
#define BMW_E9X_E8X_STEERING_WHEEL_ANGLE_DSC_LENGTH (8u)
#define BMW_E9X_E8X_WHEEL_SPEEDS_LENGTH (8u)
#define BMW_E9X_E8X_WHEEL_TOLERANCE_ADJUSTMENT_LENGTH (8u)
#define BMW_E9X_E8X_WIPER_SWITCH_LENGTH (8u)
#define BMW_E9X_E8X_TERMINAL_STATUS_LENGTH (8u)
#define BMW_E9X_E8X_TORQUE2_LENGTH (8u)
#define BMW_E9X_E8X_TORQUE_TRANSMISION_REQUEST_LENGTH (8u)
#define BMW_E9X_E8X_STEERING_WHEEL_ANGLE_LENGTH (7u)
#define BMW_E9X_E8X_WHEEL_TORQUE_DRIVE_TRAIN1_LENGTH (8u)
#define BMW_E9X_E8X_DYNAMIC_CRUISE_CONTROL_TORQUE_DEMAND_LENGTH (8u)
#define BMW_E9X_E8X_TRANSMISSION_DATA_LENGTH (8u)
#define BMW_E9X_E8X_REQUESTED_WHEEL_TORQUE_DRIVE_TRAIN_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_DSC_KCAN_LENGTH (8u)
#define BMW_E9X_E8X_SPEED_LENGTH (8u)
#define BMW_E9X_E8X_TRANSIMISSION_DATA2_LENGTH (8u)
#define BMW_E9X_E8X_WHEEL_PRESSURE_KCAN_LENGTH (8u)
#define BMW_E9X_E8X_ACCELERATION_DATA_LENGTH (8u)
#define BMW_E9X_E8X_GEAR_SELECTOR_SWITCH_LENGTH (8u)
#define BMW_E9X_E8X_DISTANCE_ROUTE_LENGTH (8u)
#define BMW_E9X_E8X_INSTRUMENT_CLUSTER_STATUS_KOMBI_LENGTH (8u)
#define BMW_E9X_E8X_ENGINE_DATA_LENGTH (8u)
#define BMW_E9X_E8X_FUEL_LEVEL_LENGTH (8u)
#define BMW_E9X_E8X_TRANSMISSION_DATA3_LENGTH (8u)
#define BMW_E9X_E8X_STEERING_WHEEL_ANGLE_SLOW_LENGTH (6u)
#define BMW_E9X_E8X_TRANSMISSION_DATA_DISPLAY_LENGTH (8u)
#define BMW_E9X_E8X_HEAT_FLOW_LOAD_TORQUE_CLIMATE_LENGTH (8u)
#define BMW_E9X_E8X_NETWORK_MANAGMENT1_LENGTH (8u)
#define BMW_E9X_E8X_NETWORK_MANAGMENT2_LENGTH (8u)
#define BMW_E9X_E8X_NETWORK_MANAGMENT3_LENGTH (8u)
#define BMW_E9X_E8X_NETWORK_MANAGMENT4_LENGTH (8u)
#define BMW_E9X_E8X_NETWORK_MANAGMENT5_LENGTH (8u)
#define BMW_E9X_E8X_GWS_SHIFT_LEVER_HEARTBEAT_LENGTH (8u)
#define BMW_E9X_E8X_HEAT_FLOW_ENGINE_LENGTH (8u)
#define BMW_E9X_E8X_AMBIENT_TEMPERATURE_RELATIVE_TIME_LENGTH (8u)
#define BMW_E9X_E8X_ELECTRIC_FUEL_PUMP_STATUS_LENGTH (8u)
#define BMW_E9X_E8X_ENGINE_OBD_DATA_LENGTH (8u)
#define BMW_E9X_E8X_SERVICES_DKG_LENGTH (8u)
#define BMW_E9X_E8X_CRASH_DISCONNECT_CONTROL_LENGTH (8u)
#define BMW_E9X_E8X_TURN_SIGNALS_LENGTH (2u)
#define BMW_E9X_E8X_DIMMING_LENGTH (8u)
#define BMW_E9X_E8X_LAMP_STATUS_LENGTH (8u)
#define BMW_E9X_E8X_RAIN_SENSOR_WIPER_SPEED_LENGTH (8u)
#define BMW_E9X_E8X_CLIMATE_FRONT_STATUS_LENGTH (8u)
#define BMW_E9X_E8X_LCD_LIGHTING_LENGTH (8u)
#define BMW_E9X_E8X_LIGHT_CONTROL_LENGTH (8u)
#define BMW_E9X_E8X_TIME_DATE_LENGTH (8u)
#define BMW_E9X_E8X_OCCUPANCY_SEAT_BELT_CONTACT_LENGTH (8u)
#define BMW_E9X_E8X_TRUNK_STATUS_LENGTH (8u)
#define BMW_E9X_E8X_TIRE_PRESSURE_STATUS_LENGTH (8u)
#define BMW_E9X_E8X_RANGE_MILEAGE_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_FUEL_CONTROL_LENGTH (8u)
#define BMW_E9X_E8X_ENGINE_OIL_LEVEL_LENGTH (8u)
#define BMW_E9X_E8X_RUN_ON_TIME_TERMINAL30_LENGTH (8u)
#define BMW_E9X_E8X_POWER_MANAGMENT_CONSUMPTION_CONTROL_LENGTH (8u)
#define BMW_E9X_E8X_POWER_BATTERY_VOLTAGE_LENGTH (8u)
#define BMW_E9X_E8X_POWER_RUNNING_TIME_LENGTH (8u)
#define BMW_E9X_E8X_SERVICES_KGM_LENGTH (8u)
#define BMW_E9X_E8X_SERVICES_DME_LENGTH (8u)
#define BMW_E9X_E8X_SERVICES_DSC_LENGTH (8u)
#define BMW_E9X_E8X_SERVICES_KOMBI_LENGTH (8u)
#define BMW_E9X_E8X_SERVICES_KBM_LENGTH (8u)
#define BMW_E9X_E8X_ACCELEROMETER1_LENGTH (8u)
#define BMW_E9X_E8X_WHEEL_TORQUE_DRIVETRAIN2_LENGTH (8u)
#define BMW_E9X_E8X_SYNC_LENGTH (5u)
#define BMW_E9X_E8X_UNKNOWN140_LENGTH (2u)
#define BMW_E9X_E8X_UNKNOWN_D4_LENGTH (8u)
#define BMW_E9X_E8X_ACCELEROMETER2_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_PUSH_BUTTON_DTC_LENGTH (2u)
#define BMW_E9X_E8X_UNKNOWN_629_LENGTH (8u)
#define BMW_E9X_E8X_SYNCHRONIZATION_SC_VDA_LENGTH (8u)
#define BMW_E9X_E8X_DELAY_REQUEST_ACC_LENGTH (8u)
#define BMW_E9X_E8X_TORQUE_REQUEST_STEERING_LENGTH (8u)
#define BMW_E9X_E8X_TORQUE_REQUEST_EGS_LENGTH (8u)
#define BMW_E9X_E8X_TORQUE_REQUEST_ACC_LENGTH (8u)
#define BMW_E9X_E8X_TARGET_TORQUE_REQUEST_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_TARGET_TORQUE_CONVERSION_LENGTH (8u)
#define BMW_E9X_E8X_ALIVE_COUNTER_LENGTH (8u)
#define BMW_E9X_E8X_ALIVE_CENTRAL_GATEWAY_LENGTH (8u)
#define BMW_E9X_E8X_ALIVE_COUNTER_TELEPHONE_LENGTH (8u)
#define BMW_E9X_E8X_REQUEST_WHEEL_TORQUE_BRAKE_LENGTH (8u)
#define BMW_E9X_E8X_ALIVE_COUNTER_SECURITY_LENGTH (8u)
#define BMW_E9X_E8X_CLU1_VDA_LENGTH (8u)
#define BMW_E9X_E8X_WHEEL_TORQUE_BRAKE_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_CENTRAL_LOCKING_BFT_LENGTH (8u)
#define BMW_E9X_E8X_CLU2_VDA_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_CENTRAL_LOCKING_BFTH_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_CENTRAL_LOCKING_FAT_LENGTH (8u)
#define BMW_E9X_E8X_CENTRAL_LOCKING_STATUS_FATH_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_CENTRAL_LOCKING_HK_LENGTH (8u)
#define BMW_E9X_E8X_CLU3_VDA_LENGTH (8u)
#define BMW_E9X_E8X_LATERAL_DYNAMICS_ARS_VDM_LENGTH (8u)
#define BMW_E9X_E8X_VERTICAL_DYNAMICS_VDM_ARS_LENGTH (8u)
#define BMW_E9X_E8X_CONTROL_WINDOW_LIFTER_FAT_LENGTH (8u)
#define BMW_E9X_E8X_CONTROL_WINDOW_LIFTER_BFT_LENGTH (8u)
#define BMW_E9X_E8X_CONTROL_WINDOW_LIFTER_FATH_LENGTH (8u)
#define BMW_E9X_E8X_CONTROL_WINDOW_LIFTER_BFTH_LENGTH (8u)
#define BMW_E9X_E8X_VOLTAGE_LEVEL_SENSORS_LENGTH (8u)
#define BMW_E9X_E8X_EXCHANGE_AFS_DSC_LENGTH (8u)
#define BMW_E9X_E8X_CONTROL_INTERVENTIONS_DSC_AFS_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_PARTIAL_SETPOINTS_AFS_DSC_2_LENGTH (8u)
#define BMW_E9X_E8X_SENSOR_DATA_ROSE_LENGTH (8u)
#define BMW_E9X_E8X_INPUT_DATA_ROSE_LENGTH (8u)
#define BMW_E9X_E8X_REQUEST_1_ACC_LENGTH (8u)
#define BMW_E9X_E8X_REQUEST_2_ACC_LENGTH (8u)
#define BMW_E9X_E8X_OBJECT_DATA_ACC_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_ACC_LENGTH (8u)
#define BMW_E9X_E8X_REQUIREMENT_ANGLE_FFP_LENGTH (8u)
#define BMW_E9X_E8X_CLU_STATUS_VDA_LENGTH (8u)
#define BMW_E9X_E8X_ACKNOWLEDGMENT_REQUEST_KOMBINATION_LENGTH (8u)
#define BMW_E9X_E8X_DISPLAY_MOTOR_DATA_LENGTH (8u)
#define BMW_E9X_E8X_DISPLAY_ACC_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_PUSH_BUTTON_MSA_LENGTH (8u)
#define BMW_E9X_E8X_RAW_DATA_LONGITUDINAL_ACCELERATION_LENGTH (8u)
#define BMW_E9X_E8X_ACTUATION_REQUEST_EMF_LENGTH (8u)
#define BMW_E9X_E8X_EFFECT_ERGO_COMMANDER_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_ARS_MODULE_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_ERGO_COMMANDER_LENGTH (8u)
#define BMW_E9X_E8X_DISTANCE_MESSAGE_PDC_LENGTH (8u)
#define BMW_E9X_E8X_DISTANCE_MESSAGE_2_PDC_LENGTH (8u)
#define BMW_E9X_E8X_ACOUSTIC_MESSAGE_PDC_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_AIR_CONDITIONING_AIR_DISTRIBUTION_FA_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_PUSHBUTTON_M_DRIVE_LENGTH (8u)
#define BMW_E9X_E8X_CLIMATE_CONTROL_REMOTE_CONTROL_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_STRATIFICATION_SEAT_HEATING_LENGTH (8u)
#define BMW_E9X_E8X_AIR_CONDITIONING_CONTROLS_REAR_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_AIR_CONDITIONING_AIR_DISTRIBUTION_BF_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_AIR_CONDITIONING_FRONT_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_PUSHBUTTON_INTERIOR_LIGHTING_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_SEAT_HEATING_SEAT_CLIMATE_FA_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_SEAT_HEATING_SEAT_CLIMATE_BF_LENGTH (8u)
#define BMW_E9X_E8X_STEERING_COLUMN_ADJUSTMENT_CONTROL_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_ACTIVE_SEAT_FA_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_ACTIVE_SEAT_BF_LENGTH (8u)
#define BMW_E9X_E8X_STEERING_COLUMN_SWITCH_OPERATION_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_SEAT_MEMORY_FA_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_SHD_MDS_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_EPS_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_AFS_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_REQUEST_EMF_KCAN_LENGTH (8u)
#define BMW_E9X_E8X_CRASH_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_EMF_KCAN_LENGTH (8u)
#define BMW_E9X_E8X_ACOUSTIC_REQUEST_KOMBI_LENGTH (8u)
#define BMW_E9X_E8X_CONTROL_DISPLAY_SHIFTLIGHTS_LENGTH (8u)
#define BMW_E9X_E8X_MEMORY_ADJUSTMENT_LENGTH (8u)
#define BMW_E9X_E8X_STEERING_COLUMN_CONTROL_LENGTH (8u)
#define BMW_E9X_E8X_POSITION_STEERING_COLUMN_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_HUD_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_HUD_LENGTH (8u)
#define BMW_E9X_E8X_HEIGHT_LEVELS_AIR_SPRING_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_NIGHT_VISION_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_NIGHT_VISION_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_PUSH_BUTTON_NSW_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_SPECIAL_FUNCTION_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_BFS_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_PUSH_BUTTON_NSL_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_BFSH_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_FAS_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_FASH_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_RADIO_KEY_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_CLIMATE_FRONT_EXTENDED_LENGTH (8u)
#define BMW_E9X_E8X_REQUEST_DISPLAY_CLIMATE_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_KLIMA_FOND_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_AIR_CONDITIONING_FRONT_CONTROL_UNIT_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_REAR_VIEW_CAMERA_LENGTH (8u)
#define BMW_E9X_E8X_CONTROL_REAR_VIEW_CAMERA_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_PDC_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_DOOR_SENSORS_LENGTH (8u)
#define BMW_E9X_E8X_WIPER_STATUS_LENGTH (8u)
#define BMW_E9X_E8X_CHALLENGE_PASSIVE_ACCESS_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_TRANSMISSION_PASSIVE_ACCESS_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_OF_CLIMATE_ADDITIONAL_PROGRAMS_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_BLINDS_MK_LENGTH (8u)
#define BMW_E9X_E8X_CONTROL_FH_SHD_CENTRAL_COMFORT_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_SHIFTLIGHTS_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_CONVERTIBLE_TOP_MANUAL_CONVERTIBLE_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_CONVERTIBLE_TOP_CONVERTIBLE_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_CENTRAL_LOCKING_CONVERTIBLE_TOP_LENGTH (8u)
#define BMW_E9X_E8X_CONTROL_SECURITY_VEHICLE_2_LENGTH (8u)
#define BMW_E9X_E8X_CONTROL_REMOTE_START_SAFETY_VEHICLE_LENGTH (8u)
#define BMW_E9X_E8X_ELECTROCHROMIC_CONTROL_LENGTH (8u)
#define BMW_E9X_E8X_PUSHBUTTON_VERTICAL_DYNAMICS_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_PUSHBUTTON_SPORT_LENGTH (8u)
#define BMW_E9X_E8X_CONTROL_RESPONSE_HYDROGEN_VEHICLE_LENGTH (8u)
#define BMW_E9X_E8X_CONTROL_HIGH_BEAM_ASSISTANT_LENGTH (8u)
#define BMW_E9X_E8X_CENTRAL_LOCKING_CONTROL_FOR_SECURITY_VEHICLE_LENGTH (8u)
#define BMW_E9X_E8X_REMOTE_CONTROL_FOND_COMMANDER_LENGTH (8u)
#define BMW_E9X_E8X_CENTRAL_LOCKING_CONTROL_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_OF_CLIMATE_STAND_FUNCTIONS_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_PERSONALIZATION_LENGTH (8u)
#define BMW_E9X_E8X_DWA_ALARM_LENGTH (8u)
#define BMW_E9X_E8X_CONTROL_HORN_DWA_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_ONBOARD_COMPUTER_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_RSE_LENGTH (8u)
#define BMW_E9X_E8X_STOPWATCH_LENGTH (8u)
#define BMW_E9X_E8X_REQUEST_SWITCHING_DISPLAY_LENGTH (8u)
#define BMW_E9X_E8X_SWITCH_STATUS_DISPLAY_LENGTH (8u)
#define BMW_E9X_E8X_WATER_VALVE_CONTROL_LENGTH (8u)
#define BMW_E9X_E8X_TEMPERATUR_IST_FOND_LENGTH (8u)
#define BMW_E9X_E8X_DISPLAY_KOMBINATION_EXTENDED_LENGTH (8u)
#define BMW_E9X_E8X_OUTSIDE_TEMPERATURE_LENGTH (8u)
#define BMW_E9X_E8X_CONTROL_MONITOR_REAR_LENGTH (8u)
#define BMW_E9X_E8X_CONTROL_MONITOR_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_OF_AUXILIARY_WATER_PUMP_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_SENSOR_AUC_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_FITTING_WINDOW_V_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_PRESSURE_REFRIGERATION_CIRCUIT_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_STRATIFICATION_REAR_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_HEATING_REAR_WINDOW_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_VALVE_AIR_CONDITIONING_COMPRESSOR_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_TAILGATE_LIFT_LENGTH (8u)
#define BMW_E9X_E8X_SWITCH_CONTROL_DISPLAY_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_SETTING_VIDEO_NIGHT_VISION_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_SETTING_VIDEO_REAR_VIEW_CAMERA_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_TRAILER_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_OF_AIR_DISTRIBUTION_FA_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_AIR_DISTRIBUTION_BF_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_CLIMATE_ADDITIONAL_PROGRAMS_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_AIR_CONDITION_FUNCTIONS_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_DRIVER_DETECTION_LENGTH (8u)
#define BMW_E9X_E8X_DISPLAY_SWITCHING_INSTRUCTION_LENGTH (8u)
#define BMW_E9X_E8X_AIR_CONDITIONING_CONTROL_SH_ZH_AUXILIARY_WATER_PUMP_LENGTH (8u)
#define BMW_E9X_E8X_UNITS_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_RSE_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_GANG_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_BUTTON_CONVERTIBLE_TOP_LENGTH (8u)
#define BMW_E9X_E8X_VEHICLE_TILT_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_BUTTON_FLAP_CONVERTIBLE_TOP_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_MSA_LENGTH (8u)
#define BMW_E9X_E8X_REFILL_QUANTITY_LENGTH (8u)
#define BMW_E9X_E8X_SERVICE_CALL_TELESERVICE_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_SERVICE_CALL_TELESERVICE_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_DRIVING_LIGHT_LENGTH (8u)
#define BMW_E9X_E8X_VEHICLE_MODE_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_BUTTON_PARKING_AIDS_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_ANTENNAS_PASSIVE_ACCESS_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_PUSH_BUTTON_RDC_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_BUTTON_HDC_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_OF_TAILGATE_INTERIOR_BUTTON_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_TIRE_PRESSURE_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_BUTTON_CAMERA_BF_LENGTH (8u)
#define BMW_E9X_E8X_DAMPER_CURRENT_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_DAMPER_PROGRAM_LENGTH (8u)
#define BMW_E9X_E8X_RELATIVZEIT_LENGTH (8u)
#define BMW_E9X_E8X_DISPLAY_HDC_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_CLIMATE_INTERNAL_CONTROL_INFO_LENGTH (8u)
#define BMW_E9X_E8X_PROGRAMMING_OF_STEP_CRUISE_CONTROL_LENGTH (8u)
#define BMW_E9X_E8X_DRIVER_DISPLAY_SPEED_RANGE_LENGTH (8u)
#define BMW_E9X_E8X_DISPLAY_CHECK_CONTROL_MESSAGE_ROLE_LENGTH (8u)
#define BMW_E9X_E8X_CONTROL_DISPLAY_CHECK_CONTROL_MESSAGE_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_DISPLAY_CLIMATE_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_MONITOR_FRONT_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_MONITOR_FOND_1_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_MONITOR_FOND_2_LENGTH (8u)
#define BMW_E9X_E8X_RAW_DATA_LEVEL_TANK_LENGTH (8u)
#define BMW_E9X_E8X_SEAT_BACK_LOCK_STATUS_FA_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_SEAT_BACK_LOCK_BF_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_CONTACT_HANDBRAKE_LENGTH (8u)
#define BMW_E9X_E8X_APPOINTMENT_CONDITION_BASED_SERVICE_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_ONBOARD_COMPUTER_LENGTH (8u)
#define BMW_E9X_E8X_ONBOARD_COMPUTER_DATA_TRIP_DATA_LENGTH (8u)
#define BMW_E9X_E8X_DATA_ONBOARD_COMPUTER_START_OF_JOURNEY_LENGTH (8u)
#define BMW_E9X_E8X_DATA_ONBOARD_COMPUTER_AVERAGE_VALUES_LENGTH (8u)
#define BMW_E9X_E8X_DATA_ONBOARD_COMPUTER_ARRIVAL_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_TERMINAL_REQUEST_LENGTH (8u)
#define BMW_E9X_E8X_DISPLAY_KOMBINATION_EXTERNAL_DISPLAY_LENGTH (8u)
#define BMW_E9X_E8X_CONTROL_DISPLAY_OF_DEMAND_ORIENTED_SERVICE_LENGTH (8u)
#define BMW_E9X_E8X_SETTING_THE_DRIVING_DYNAMICS_SWITCH_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_WEAR_LAMELLA_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_DKG_LENGTH (8u)
#define BMW_E9X_E8X_TEMPERATUR_BREMSE_LENGTH (8u)
#define BMW_E9X_E8X_RANGE_OF_DIESEL_EXHAUST_GAS_ADDITIVE_LENGTH (8u)
#define BMW_E9X_E8X_CHASSIS_NUMBER_LENGTH (8u)
#define BMW_E9X_E8X_ELECTRONIC_ENGINE_OIL_DIPSTICK_M_LENGTH (8u)
#define BMW_E9X_E8X_MOTOR_DATA_2_LENGTH (8u)
#define BMW_E9X_E8X_VEHICLE_TYPE_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_BATTERY_LENGTH (8u)
#define BMW_E9X_E8X_START_SPEED_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_SYSTEM_AFS_LENGTH (8u)
#define BMW_E9X_E8X_RDA_REQUEST_DATA_STORAGE_LENGTH (8u)
#define BMW_E9X_E8X_CODING_POWER_MANAGEMENT_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_CHASSIS_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_M_DRIVE_LENGTH (6u)
#define BMW_E9X_E8X_OPERATION_TIME_DATE_LENGTH (8u)
#define BMW_E9X_E8X_VEHICLE_STATE_LENGTH (8u)
#define BMW_E9X_E8X_REQUEST_REMOTE_SERVICES_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_MOTOR_CONTROL_CKM_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_SHIFTLIGHTS_CKM_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_GEAR_REVERSE_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_WATER_VALVE_LENGTH (8u)
#define BMW_E9X_E8X_POSITION_WINDOW_LIFTER_FAT_LENGTH (8u)
#define BMW_E9X_E8X_POSITION_WINDOW_LIFTER_FATH_LENGTH (8u)
#define BMW_E9X_E8X_POSITION_WINDOW_REGULATOR_BFT_LENGTH (8u)
#define BMW_E9X_E8X_POSITION_WINDOW_REGULATOR_BFTH_LENGTH (8u)
#define BMW_E9X_E8X_POSITION_SHD_LENGTH (8u)
#define BMW_E9X_E8X_POSITION_WINDOW_LIFTER_SECURITY_VEHICLE_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_CONSUMER_SHUTDOWN_LENGTH (8u)
#define BMW_E9X_E8X_POSITION_WINDOW_REAR_WINDOW_LENGTH (8u)
#define BMW_E9X_E8X_CONFIGURATION_FAS_LENGTH (8u)
#define BMW_E9X_E8X_CONFIGURATION_BFS_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_EDCK_CKM_LENGTH (8u)
#define BMW_E9X_E8X_ACCESS_RADIO_LENGTH (8u)
#define BMW_E9X_E8X_OPERATION_PUSH_BUTTON_RADIO_LENGTH (8u)
#define BMW_E9X_E8X_RADIO_AUDIO_CONTROL_INTERFACE_DISPLAY_LENGTH (8u)
#define BMW_E9X_E8X_ACKNOWLEDGMENT_ACCESS_RADIO_AUDIO_CONTROL_INTERFACE_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_SOLAR_SENSOR_LENGTH (8u)
#define BMW_E9X_E8X_CONFIGURATION_OF_CENTRAL_LOCKING_CKM_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_CENTRAL_LOCKING_CKM_LENGTH (8u)
#define BMW_E9X_E8X_CONFIGURATION_DWA_CKM_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_DWA_CKM_LENGTH (8u)
#define BMW_E9X_E8X_CONFIGURATION_RLS_CKM_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_RLS_CKM_LENGTH (8u)
#define BMW_E9X_E8X_CONFIGURATION_OF_MEMORY_POSITIONS_CKM_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_MEMORY_POSITIONS_CKM_LENGTH (8u)
#define BMW_E9X_E8X_CONFIGURATION_LIGHT_CKM_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_LIGHT_CKM_LENGTH (8u)
#define BMW_E9X_E8X_CONFIGURATION_CLIMATE_CKM_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_KLIMA_CKM_LENGTH (8u)
#define BMW_E9X_E8X_CONFIGURATION_OF_TAILGATE_CKM_LENGTH (8u)
#define BMW_E9X_E8X_STATUS_TAILGATE_CKM_LENGTH (8u)
#define BMW_E9X_E8X_CONFIGURATION_REAR_VIEW_CAMERA_CKM_LENGTH (8u)

/* Extended or standard frame types. */
#define BMW_E9X_E8X_ACC_PEDAL_IS_EXTENDED (0)
#define BMW_E9X_E8X_CRUISE_CONTROL_IS_EXTENDED (0)
#define BMW_E9X_E8X_CRUISE_CONTROL_STATUS_IS_EXTENDED (0)
#define BMW_E9X_E8X_ENGINE_AND_BRAKE_IS_EXTENDED (0)
#define BMW_E9X_E8X_STEERING_BUTTONS_IS_EXTENDED (0)
#define BMW_E9X_E8X_DYNAMIC_CRUISE_CONTROL_STATUS_IS_EXTENDED (0)
#define BMW_E9X_E8X_STEERING_WHEEL_ANGLE_DSC_IS_EXTENDED (0)
#define BMW_E9X_E8X_WHEEL_SPEEDS_IS_EXTENDED (0)
#define BMW_E9X_E8X_WHEEL_TOLERANCE_ADJUSTMENT_IS_EXTENDED (0)
#define BMW_E9X_E8X_WIPER_SWITCH_IS_EXTENDED (0)
#define BMW_E9X_E8X_TERMINAL_STATUS_IS_EXTENDED (0)
#define BMW_E9X_E8X_TORQUE2_IS_EXTENDED (0)
#define BMW_E9X_E8X_TORQUE_TRANSMISION_REQUEST_IS_EXTENDED (0)
#define BMW_E9X_E8X_STEERING_WHEEL_ANGLE_IS_EXTENDED (0)
#define BMW_E9X_E8X_WHEEL_TORQUE_DRIVE_TRAIN1_IS_EXTENDED (0)
#define BMW_E9X_E8X_DYNAMIC_CRUISE_CONTROL_TORQUE_DEMAND_IS_EXTENDED (0)
#define BMW_E9X_E8X_TRANSMISSION_DATA_IS_EXTENDED (0)
#define BMW_E9X_E8X_REQUESTED_WHEEL_TORQUE_DRIVE_TRAIN_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_DSC_KCAN_IS_EXTENDED (0)
#define BMW_E9X_E8X_SPEED_IS_EXTENDED (0)
#define BMW_E9X_E8X_TRANSIMISSION_DATA2_IS_EXTENDED (0)
#define BMW_E9X_E8X_WHEEL_PRESSURE_KCAN_IS_EXTENDED (0)
#define BMW_E9X_E8X_ACCELERATION_DATA_IS_EXTENDED (0)
#define BMW_E9X_E8X_GEAR_SELECTOR_SWITCH_IS_EXTENDED (0)
#define BMW_E9X_E8X_DISTANCE_ROUTE_IS_EXTENDED (0)
#define BMW_E9X_E8X_INSTRUMENT_CLUSTER_STATUS_KOMBI_IS_EXTENDED (0)
#define BMW_E9X_E8X_ENGINE_DATA_IS_EXTENDED (0)
#define BMW_E9X_E8X_FUEL_LEVEL_IS_EXTENDED (0)
#define BMW_E9X_E8X_TRANSMISSION_DATA3_IS_EXTENDED (0)
#define BMW_E9X_E8X_STEERING_WHEEL_ANGLE_SLOW_IS_EXTENDED (0)
#define BMW_E9X_E8X_TRANSMISSION_DATA_DISPLAY_IS_EXTENDED (0)
#define BMW_E9X_E8X_HEAT_FLOW_LOAD_TORQUE_CLIMATE_IS_EXTENDED (0)
#define BMW_E9X_E8X_NETWORK_MANAGMENT1_IS_EXTENDED (0)
#define BMW_E9X_E8X_NETWORK_MANAGMENT2_IS_EXTENDED (0)
#define BMW_E9X_E8X_NETWORK_MANAGMENT3_IS_EXTENDED (0)
#define BMW_E9X_E8X_NETWORK_MANAGMENT4_IS_EXTENDED (0)
#define BMW_E9X_E8X_NETWORK_MANAGMENT5_IS_EXTENDED (0)
#define BMW_E9X_E8X_GWS_SHIFT_LEVER_HEARTBEAT_IS_EXTENDED (0)
#define BMW_E9X_E8X_HEAT_FLOW_ENGINE_IS_EXTENDED (0)
#define BMW_E9X_E8X_AMBIENT_TEMPERATURE_RELATIVE_TIME_IS_EXTENDED (0)
#define BMW_E9X_E8X_ELECTRIC_FUEL_PUMP_STATUS_IS_EXTENDED (0)
#define BMW_E9X_E8X_ENGINE_OBD_DATA_IS_EXTENDED (0)
#define BMW_E9X_E8X_SERVICES_DKG_IS_EXTENDED (0)
#define BMW_E9X_E8X_CRASH_DISCONNECT_CONTROL_IS_EXTENDED (0)
#define BMW_E9X_E8X_TURN_SIGNALS_IS_EXTENDED (0)
#define BMW_E9X_E8X_DIMMING_IS_EXTENDED (0)
#define BMW_E9X_E8X_LAMP_STATUS_IS_EXTENDED (0)
#define BMW_E9X_E8X_RAIN_SENSOR_WIPER_SPEED_IS_EXTENDED (0)
#define BMW_E9X_E8X_CLIMATE_FRONT_STATUS_IS_EXTENDED (0)
#define BMW_E9X_E8X_LCD_LIGHTING_IS_EXTENDED (0)
#define BMW_E9X_E8X_LIGHT_CONTROL_IS_EXTENDED (0)
#define BMW_E9X_E8X_TIME_DATE_IS_EXTENDED (0)
#define BMW_E9X_E8X_OCCUPANCY_SEAT_BELT_CONTACT_IS_EXTENDED (0)
#define BMW_E9X_E8X_TRUNK_STATUS_IS_EXTENDED (0)
#define BMW_E9X_E8X_TIRE_PRESSURE_STATUS_IS_EXTENDED (0)
#define BMW_E9X_E8X_RANGE_MILEAGE_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_FUEL_CONTROL_IS_EXTENDED (0)
#define BMW_E9X_E8X_ENGINE_OIL_LEVEL_IS_EXTENDED (0)
#define BMW_E9X_E8X_RUN_ON_TIME_TERMINAL30_IS_EXTENDED (0)
#define BMW_E9X_E8X_POWER_MANAGMENT_CONSUMPTION_CONTROL_IS_EXTENDED (0)
#define BMW_E9X_E8X_POWER_BATTERY_VOLTAGE_IS_EXTENDED (0)
#define BMW_E9X_E8X_POWER_RUNNING_TIME_IS_EXTENDED (0)
#define BMW_E9X_E8X_SERVICES_KGM_IS_EXTENDED (0)
#define BMW_E9X_E8X_SERVICES_DME_IS_EXTENDED (0)
#define BMW_E9X_E8X_SERVICES_DSC_IS_EXTENDED (0)
#define BMW_E9X_E8X_SERVICES_KOMBI_IS_EXTENDED (0)
#define BMW_E9X_E8X_SERVICES_KBM_IS_EXTENDED (0)
#define BMW_E9X_E8X_ACCELEROMETER1_IS_EXTENDED (0)
#define BMW_E9X_E8X_WHEEL_TORQUE_DRIVETRAIN2_IS_EXTENDED (0)
#define BMW_E9X_E8X_SYNC_IS_EXTENDED (0)
#define BMW_E9X_E8X_UNKNOWN140_IS_EXTENDED (0)
#define BMW_E9X_E8X_UNKNOWN_D4_IS_EXTENDED (0)
#define BMW_E9X_E8X_ACCELEROMETER2_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_PUSH_BUTTON_DTC_IS_EXTENDED (0)
#define BMW_E9X_E8X_UNKNOWN_629_IS_EXTENDED (0)
#define BMW_E9X_E8X_SYNCHRONIZATION_SC_VDA_IS_EXTENDED (0)
#define BMW_E9X_E8X_DELAY_REQUEST_ACC_IS_EXTENDED (0)
#define BMW_E9X_E8X_TORQUE_REQUEST_STEERING_IS_EXTENDED (0)
#define BMW_E9X_E8X_TORQUE_REQUEST_EGS_IS_EXTENDED (0)
#define BMW_E9X_E8X_TORQUE_REQUEST_ACC_IS_EXTENDED (0)
#define BMW_E9X_E8X_TARGET_TORQUE_REQUEST_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_TARGET_TORQUE_CONVERSION_IS_EXTENDED (0)
#define BMW_E9X_E8X_ALIVE_COUNTER_IS_EXTENDED (0)
#define BMW_E9X_E8X_ALIVE_CENTRAL_GATEWAY_IS_EXTENDED (0)
#define BMW_E9X_E8X_ALIVE_COUNTER_TELEPHONE_IS_EXTENDED (0)
#define BMW_E9X_E8X_REQUEST_WHEEL_TORQUE_BRAKE_IS_EXTENDED (0)
#define BMW_E9X_E8X_ALIVE_COUNTER_SECURITY_IS_EXTENDED (0)
#define BMW_E9X_E8X_CLU1_VDA_IS_EXTENDED (0)
#define BMW_E9X_E8X_WHEEL_TORQUE_BRAKE_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_CENTRAL_LOCKING_BFT_IS_EXTENDED (0)
#define BMW_E9X_E8X_CLU2_VDA_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_CENTRAL_LOCKING_BFTH_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_CENTRAL_LOCKING_FAT_IS_EXTENDED (0)
#define BMW_E9X_E8X_CENTRAL_LOCKING_STATUS_FATH_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_CENTRAL_LOCKING_HK_IS_EXTENDED (0)
#define BMW_E9X_E8X_CLU3_VDA_IS_EXTENDED (0)
#define BMW_E9X_E8X_LATERAL_DYNAMICS_ARS_VDM_IS_EXTENDED (0)
#define BMW_E9X_E8X_VERTICAL_DYNAMICS_VDM_ARS_IS_EXTENDED (0)
#define BMW_E9X_E8X_CONTROL_WINDOW_LIFTER_FAT_IS_EXTENDED (0)
#define BMW_E9X_E8X_CONTROL_WINDOW_LIFTER_BFT_IS_EXTENDED (0)
#define BMW_E9X_E8X_CONTROL_WINDOW_LIFTER_FATH_IS_EXTENDED (0)
#define BMW_E9X_E8X_CONTROL_WINDOW_LIFTER_BFTH_IS_EXTENDED (0)
#define BMW_E9X_E8X_VOLTAGE_LEVEL_SENSORS_IS_EXTENDED (0)
#define BMW_E9X_E8X_EXCHANGE_AFS_DSC_IS_EXTENDED (0)
#define BMW_E9X_E8X_CONTROL_INTERVENTIONS_DSC_AFS_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_PARTIAL_SETPOINTS_AFS_DSC_2_IS_EXTENDED (0)
#define BMW_E9X_E8X_SENSOR_DATA_ROSE_IS_EXTENDED (0)
#define BMW_E9X_E8X_INPUT_DATA_ROSE_IS_EXTENDED (0)
#define BMW_E9X_E8X_REQUEST_1_ACC_IS_EXTENDED (0)
#define BMW_E9X_E8X_REQUEST_2_ACC_IS_EXTENDED (0)
#define BMW_E9X_E8X_OBJECT_DATA_ACC_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_ACC_IS_EXTENDED (0)
#define BMW_E9X_E8X_REQUIREMENT_ANGLE_FFP_IS_EXTENDED (0)
#define BMW_E9X_E8X_CLU_STATUS_VDA_IS_EXTENDED (0)
#define BMW_E9X_E8X_ACKNOWLEDGMENT_REQUEST_KOMBINATION_IS_EXTENDED (0)
#define BMW_E9X_E8X_DISPLAY_MOTOR_DATA_IS_EXTENDED (0)
#define BMW_E9X_E8X_DISPLAY_ACC_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_PUSH_BUTTON_MSA_IS_EXTENDED (0)
#define BMW_E9X_E8X_RAW_DATA_LONGITUDINAL_ACCELERATION_IS_EXTENDED (0)
#define BMW_E9X_E8X_ACTUATION_REQUEST_EMF_IS_EXTENDED (0)
#define BMW_E9X_E8X_EFFECT_ERGO_COMMANDER_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_ARS_MODULE_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_ERGO_COMMANDER_IS_EXTENDED (0)
#define BMW_E9X_E8X_DISTANCE_MESSAGE_PDC_IS_EXTENDED (0)
#define BMW_E9X_E8X_DISTANCE_MESSAGE_2_PDC_IS_EXTENDED (0)
#define BMW_E9X_E8X_ACOUSTIC_MESSAGE_PDC_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_AIR_CONDITIONING_AIR_DISTRIBUTION_FA_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_PUSHBUTTON_M_DRIVE_IS_EXTENDED (0)
#define BMW_E9X_E8X_CLIMATE_CONTROL_REMOTE_CONTROL_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_STRATIFICATION_SEAT_HEATING_IS_EXTENDED (0)
#define BMW_E9X_E8X_AIR_CONDITIONING_CONTROLS_REAR_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_AIR_CONDITIONING_AIR_DISTRIBUTION_BF_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_AIR_CONDITIONING_FRONT_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_PUSHBUTTON_INTERIOR_LIGHTING_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_SEAT_HEATING_SEAT_CLIMATE_FA_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_SEAT_HEATING_SEAT_CLIMATE_BF_IS_EXTENDED (0)
#define BMW_E9X_E8X_STEERING_COLUMN_ADJUSTMENT_CONTROL_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_ACTIVE_SEAT_FA_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_ACTIVE_SEAT_BF_IS_EXTENDED (0)
#define BMW_E9X_E8X_STEERING_COLUMN_SWITCH_OPERATION_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_SEAT_MEMORY_FA_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_SHD_MDS_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_EPS_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_AFS_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_REQUEST_EMF_KCAN_IS_EXTENDED (0)
#define BMW_E9X_E8X_CRASH_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_EMF_KCAN_IS_EXTENDED (0)
#define BMW_E9X_E8X_ACOUSTIC_REQUEST_KOMBI_IS_EXTENDED (0)
#define BMW_E9X_E8X_CONTROL_DISPLAY_SHIFTLIGHTS_IS_EXTENDED (0)
#define BMW_E9X_E8X_MEMORY_ADJUSTMENT_IS_EXTENDED (0)
#define BMW_E9X_E8X_STEERING_COLUMN_CONTROL_IS_EXTENDED (0)
#define BMW_E9X_E8X_POSITION_STEERING_COLUMN_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_HUD_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_HUD_IS_EXTENDED (0)
#define BMW_E9X_E8X_HEIGHT_LEVELS_AIR_SPRING_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_NIGHT_VISION_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_NIGHT_VISION_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_PUSH_BUTTON_NSW_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_SPECIAL_FUNCTION_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_BFS_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_PUSH_BUTTON_NSL_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_BFSH_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_FAS_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_FASH_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_RADIO_KEY_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_CLIMATE_FRONT_EXTENDED_IS_EXTENDED (0)
#define BMW_E9X_E8X_REQUEST_DISPLAY_CLIMATE_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_KLIMA_FOND_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_AIR_CONDITIONING_FRONT_CONTROL_UNIT_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_REAR_VIEW_CAMERA_IS_EXTENDED (0)
#define BMW_E9X_E8X_CONTROL_REAR_VIEW_CAMERA_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_PDC_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_DOOR_SENSORS_IS_EXTENDED (0)
#define BMW_E9X_E8X_WIPER_STATUS_IS_EXTENDED (0)
#define BMW_E9X_E8X_CHALLENGE_PASSIVE_ACCESS_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_TRANSMISSION_PASSIVE_ACCESS_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_OF_CLIMATE_ADDITIONAL_PROGRAMS_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_BLINDS_MK_IS_EXTENDED (0)
#define BMW_E9X_E8X_CONTROL_FH_SHD_CENTRAL_COMFORT_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_SHIFTLIGHTS_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_CONVERTIBLE_TOP_MANUAL_CONVERTIBLE_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_CONVERTIBLE_TOP_CONVERTIBLE_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_CENTRAL_LOCKING_CONVERTIBLE_TOP_IS_EXTENDED (0)
#define BMW_E9X_E8X_CONTROL_SECURITY_VEHICLE_2_IS_EXTENDED (0)
#define BMW_E9X_E8X_CONTROL_REMOTE_START_SAFETY_VEHICLE_IS_EXTENDED (0)
#define BMW_E9X_E8X_ELECTROCHROMIC_CONTROL_IS_EXTENDED (0)
#define BMW_E9X_E8X_PUSHBUTTON_VERTICAL_DYNAMICS_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_PUSHBUTTON_SPORT_IS_EXTENDED (0)
#define BMW_E9X_E8X_CONTROL_RESPONSE_HYDROGEN_VEHICLE_IS_EXTENDED (0)
#define BMW_E9X_E8X_CONTROL_HIGH_BEAM_ASSISTANT_IS_EXTENDED (0)
#define BMW_E9X_E8X_CENTRAL_LOCKING_CONTROL_FOR_SECURITY_VEHICLE_IS_EXTENDED (0)
#define BMW_E9X_E8X_REMOTE_CONTROL_FOND_COMMANDER_IS_EXTENDED (0)
#define BMW_E9X_E8X_CENTRAL_LOCKING_CONTROL_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_OF_CLIMATE_STAND_FUNCTIONS_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_PERSONALIZATION_IS_EXTENDED (0)
#define BMW_E9X_E8X_DWA_ALARM_IS_EXTENDED (0)
#define BMW_E9X_E8X_CONTROL_HORN_DWA_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_ONBOARD_COMPUTER_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_RSE_IS_EXTENDED (0)
#define BMW_E9X_E8X_STOPWATCH_IS_EXTENDED (0)
#define BMW_E9X_E8X_REQUEST_SWITCHING_DISPLAY_IS_EXTENDED (0)
#define BMW_E9X_E8X_SWITCH_STATUS_DISPLAY_IS_EXTENDED (0)
#define BMW_E9X_E8X_WATER_VALVE_CONTROL_IS_EXTENDED (0)
#define BMW_E9X_E8X_TEMPERATUR_IST_FOND_IS_EXTENDED (0)
#define BMW_E9X_E8X_DISPLAY_KOMBINATION_EXTENDED_IS_EXTENDED (0)
#define BMW_E9X_E8X_OUTSIDE_TEMPERATURE_IS_EXTENDED (0)
#define BMW_E9X_E8X_CONTROL_MONITOR_REAR_IS_EXTENDED (0)
#define BMW_E9X_E8X_CONTROL_MONITOR_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_OF_AUXILIARY_WATER_PUMP_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_SENSOR_AUC_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_FITTING_WINDOW_V_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_PRESSURE_REFRIGERATION_CIRCUIT_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_STRATIFICATION_REAR_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_HEATING_REAR_WINDOW_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_VALVE_AIR_CONDITIONING_COMPRESSOR_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_TAILGATE_LIFT_IS_EXTENDED (0)
#define BMW_E9X_E8X_SWITCH_CONTROL_DISPLAY_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_SETTING_VIDEO_NIGHT_VISION_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_SETTING_VIDEO_REAR_VIEW_CAMERA_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_TRAILER_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_OF_AIR_DISTRIBUTION_FA_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_AIR_DISTRIBUTION_BF_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_CLIMATE_ADDITIONAL_PROGRAMS_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_AIR_CONDITION_FUNCTIONS_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_DRIVER_DETECTION_IS_EXTENDED (0)
#define BMW_E9X_E8X_DISPLAY_SWITCHING_INSTRUCTION_IS_EXTENDED (0)
#define BMW_E9X_E8X_AIR_CONDITIONING_CONTROL_SH_ZH_AUXILIARY_WATER_PUMP_IS_EXTENDED (0)
#define BMW_E9X_E8X_UNITS_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_RSE_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_GANG_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_BUTTON_CONVERTIBLE_TOP_IS_EXTENDED (0)
#define BMW_E9X_E8X_VEHICLE_TILT_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_BUTTON_FLAP_CONVERTIBLE_TOP_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_MSA_IS_EXTENDED (0)
#define BMW_E9X_E8X_REFILL_QUANTITY_IS_EXTENDED (0)
#define BMW_E9X_E8X_SERVICE_CALL_TELESERVICE_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_SERVICE_CALL_TELESERVICE_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_DRIVING_LIGHT_IS_EXTENDED (0)
#define BMW_E9X_E8X_VEHICLE_MODE_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_BUTTON_PARKING_AIDS_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_ANTENNAS_PASSIVE_ACCESS_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_PUSH_BUTTON_RDC_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_BUTTON_HDC_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_OF_TAILGATE_INTERIOR_BUTTON_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_TIRE_PRESSURE_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_BUTTON_CAMERA_BF_IS_EXTENDED (0)
#define BMW_E9X_E8X_DAMPER_CURRENT_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_DAMPER_PROGRAM_IS_EXTENDED (0)
#define BMW_E9X_E8X_RELATIVZEIT_IS_EXTENDED (0)
#define BMW_E9X_E8X_DISPLAY_HDC_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_CLIMATE_INTERNAL_CONTROL_INFO_IS_EXTENDED (0)
#define BMW_E9X_E8X_PROGRAMMING_OF_STEP_CRUISE_CONTROL_IS_EXTENDED (0)
#define BMW_E9X_E8X_DRIVER_DISPLAY_SPEED_RANGE_IS_EXTENDED (0)
#define BMW_E9X_E8X_DISPLAY_CHECK_CONTROL_MESSAGE_ROLE_IS_EXTENDED (0)
#define BMW_E9X_E8X_CONTROL_DISPLAY_CHECK_CONTROL_MESSAGE_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_DISPLAY_CLIMATE_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_MONITOR_FRONT_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_MONITOR_FOND_1_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_MONITOR_FOND_2_IS_EXTENDED (0)
#define BMW_E9X_E8X_RAW_DATA_LEVEL_TANK_IS_EXTENDED (0)
#define BMW_E9X_E8X_SEAT_BACK_LOCK_STATUS_FA_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_SEAT_BACK_LOCK_BF_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_CONTACT_HANDBRAKE_IS_EXTENDED (0)
#define BMW_E9X_E8X_APPOINTMENT_CONDITION_BASED_SERVICE_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_ONBOARD_COMPUTER_IS_EXTENDED (0)
#define BMW_E9X_E8X_ONBOARD_COMPUTER_DATA_TRIP_DATA_IS_EXTENDED (0)
#define BMW_E9X_E8X_DATA_ONBOARD_COMPUTER_START_OF_JOURNEY_IS_EXTENDED (0)
#define BMW_E9X_E8X_DATA_ONBOARD_COMPUTER_AVERAGE_VALUES_IS_EXTENDED (0)
#define BMW_E9X_E8X_DATA_ONBOARD_COMPUTER_ARRIVAL_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_TERMINAL_REQUEST_IS_EXTENDED (0)
#define BMW_E9X_E8X_DISPLAY_KOMBINATION_EXTERNAL_DISPLAY_IS_EXTENDED (0)
#define BMW_E9X_E8X_CONTROL_DISPLAY_OF_DEMAND_ORIENTED_SERVICE_IS_EXTENDED (0)
#define BMW_E9X_E8X_SETTING_THE_DRIVING_DYNAMICS_SWITCH_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_WEAR_LAMELLA_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_DKG_IS_EXTENDED (0)
#define BMW_E9X_E8X_TEMPERATUR_BREMSE_IS_EXTENDED (0)
#define BMW_E9X_E8X_RANGE_OF_DIESEL_EXHAUST_GAS_ADDITIVE_IS_EXTENDED (0)
#define BMW_E9X_E8X_CHASSIS_NUMBER_IS_EXTENDED (0)
#define BMW_E9X_E8X_ELECTRONIC_ENGINE_OIL_DIPSTICK_M_IS_EXTENDED (0)
#define BMW_E9X_E8X_MOTOR_DATA_2_IS_EXTENDED (0)
#define BMW_E9X_E8X_VEHICLE_TYPE_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_BATTERY_IS_EXTENDED (0)
#define BMW_E9X_E8X_START_SPEED_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_SYSTEM_AFS_IS_EXTENDED (0)
#define BMW_E9X_E8X_RDA_REQUEST_DATA_STORAGE_IS_EXTENDED (0)
#define BMW_E9X_E8X_CODING_POWER_MANAGEMENT_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_CHASSIS_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_M_DRIVE_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_TIME_DATE_IS_EXTENDED (0)
#define BMW_E9X_E8X_VEHICLE_STATE_IS_EXTENDED (0)
#define BMW_E9X_E8X_REQUEST_REMOTE_SERVICES_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_MOTOR_CONTROL_CKM_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_SHIFTLIGHTS_CKM_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_GEAR_REVERSE_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_WATER_VALVE_IS_EXTENDED (0)
#define BMW_E9X_E8X_POSITION_WINDOW_LIFTER_FAT_IS_EXTENDED (0)
#define BMW_E9X_E8X_POSITION_WINDOW_LIFTER_FATH_IS_EXTENDED (0)
#define BMW_E9X_E8X_POSITION_WINDOW_REGULATOR_BFT_IS_EXTENDED (0)
#define BMW_E9X_E8X_POSITION_WINDOW_REGULATOR_BFTH_IS_EXTENDED (0)
#define BMW_E9X_E8X_POSITION_SHD_IS_EXTENDED (0)
#define BMW_E9X_E8X_POSITION_WINDOW_LIFTER_SECURITY_VEHICLE_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_CONSUMER_SHUTDOWN_IS_EXTENDED (0)
#define BMW_E9X_E8X_POSITION_WINDOW_REAR_WINDOW_IS_EXTENDED (0)
#define BMW_E9X_E8X_CONFIGURATION_FAS_IS_EXTENDED (0)
#define BMW_E9X_E8X_CONFIGURATION_BFS_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_EDCK_CKM_IS_EXTENDED (0)
#define BMW_E9X_E8X_ACCESS_RADIO_IS_EXTENDED (0)
#define BMW_E9X_E8X_OPERATION_PUSH_BUTTON_RADIO_IS_EXTENDED (0)
#define BMW_E9X_E8X_RADIO_AUDIO_CONTROL_INTERFACE_DISPLAY_IS_EXTENDED (0)
#define BMW_E9X_E8X_ACKNOWLEDGMENT_ACCESS_RADIO_AUDIO_CONTROL_INTERFACE_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_SOLAR_SENSOR_IS_EXTENDED (0)
#define BMW_E9X_E8X_CONFIGURATION_OF_CENTRAL_LOCKING_CKM_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_CENTRAL_LOCKING_CKM_IS_EXTENDED (0)
#define BMW_E9X_E8X_CONFIGURATION_DWA_CKM_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_DWA_CKM_IS_EXTENDED (0)
#define BMW_E9X_E8X_CONFIGURATION_RLS_CKM_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_RLS_CKM_IS_EXTENDED (0)
#define BMW_E9X_E8X_CONFIGURATION_OF_MEMORY_POSITIONS_CKM_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_MEMORY_POSITIONS_CKM_IS_EXTENDED (0)
#define BMW_E9X_E8X_CONFIGURATION_LIGHT_CKM_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_LIGHT_CKM_IS_EXTENDED (0)
#define BMW_E9X_E8X_CONFIGURATION_CLIMATE_CKM_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_KLIMA_CKM_IS_EXTENDED (0)
#define BMW_E9X_E8X_CONFIGURATION_OF_TAILGATE_CKM_IS_EXTENDED (0)
#define BMW_E9X_E8X_STATUS_TAILGATE_CKM_IS_EXTENDED (0)
#define BMW_E9X_E8X_CONFIGURATION_REAR_VIEW_CAMERA_CKM_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */
#define BMW_E9X_E8X_GEAR_SELECTOR_SWITCH_SHIFTER_POSITION_D_CHOICE (1u)
#define BMW_E9X_E8X_GEAR_SELECTOR_SWITCH_SHIFTER_POSITION_S_CHOICE (2u)
#define BMW_E9X_E8X_GEAR_SELECTOR_SWITCH_SHIFTER_POSITION_N_CHOICE (3u)
#define BMW_E9X_E8X_GEAR_SELECTOR_SWITCH_SHIFTER_POSITION_R_CHOICE (4u)
#define BMW_E9X_E8X_GEAR_SELECTOR_SWITCH_SHIFTER_POSITION_P_CHOICE (5u)

#define BMW_E9X_E8X_TRANSMISSION_DATA_DISPLAY_SHIFT_LEVER_POSITION_OFF_CHOICE (0u)
#define BMW_E9X_E8X_TRANSMISSION_DATA_DISPLAY_SHIFT_LEVER_POSITION_P_CHOICE (1u)
#define BMW_E9X_E8X_TRANSMISSION_DATA_DISPLAY_SHIFT_LEVER_POSITION_R_CHOICE (2u)
#define BMW_E9X_E8X_TRANSMISSION_DATA_DISPLAY_SHIFT_LEVER_POSITION_N_CHOICE (4u)
#define BMW_E9X_E8X_TRANSMISSION_DATA_DISPLAY_SHIFT_LEVER_POSITION_D_CHOICE (8u)

#define BMW_E9X_E8X_TRANSMISSION_DATA_DISPLAY_SHIFT_LEVER_MODE_NORMAL_CHOICE (0u)
#define BMW_E9X_E8X_TRANSMISSION_DATA_DISPLAY_SHIFT_LEVER_MODE_SPORT_CHOICE (1u)
#define BMW_E9X_E8X_TRANSMISSION_DATA_DISPLAY_SHIFT_LEVER_MODE_MANUAL_CHOICE (2u)

/* Frame Names. */
#define BMW_E9X_E8X_ACC_PEDAL_NAME "AccPedal"
#define BMW_E9X_E8X_CRUISE_CONTROL_NAME "CruiseControl"
#define BMW_E9X_E8X_CRUISE_CONTROL_STATUS_NAME "CruiseControlStatus"
#define BMW_E9X_E8X_ENGINE_AND_BRAKE_NAME "EngineAndBrake"
#define BMW_E9X_E8X_STEERING_BUTTONS_NAME "SteeringButtons"
#define BMW_E9X_E8X_DYNAMIC_CRUISE_CONTROL_STATUS_NAME "DynamicCruiseControlStatus"
#define BMW_E9X_E8X_STEERING_WHEEL_ANGLE_DSC_NAME "SteeringWheelAngle_DSC"
#define BMW_E9X_E8X_WHEEL_SPEEDS_NAME "WheelSpeeds"
#define BMW_E9X_E8X_WHEEL_TOLERANCE_ADJUSTMENT_NAME "WheelToleranceAdjustment"
#define BMW_E9X_E8X_WIPER_SWITCH_NAME "WiperSwitch"
#define BMW_E9X_E8X_TERMINAL_STATUS_NAME "TerminalStatus"
#define BMW_E9X_E8X_TORQUE2_NAME "Torque2"
#define BMW_E9X_E8X_TORQUE_TRANSMISION_REQUEST_NAME "TorqueTransmisionRequest"
#define BMW_E9X_E8X_STEERING_WHEEL_ANGLE_NAME "SteeringWheelAngle"
#define BMW_E9X_E8X_WHEEL_TORQUE_DRIVE_TRAIN1_NAME "WheelTorqueDriveTrain1"
#define BMW_E9X_E8X_DYNAMIC_CRUISE_CONTROL_TORQUE_DEMAND_NAME "DynamicCruiseControlTorqueDemand"
#define BMW_E9X_E8X_TRANSMISSION_DATA_NAME "TransmissionData"
#define BMW_E9X_E8X_REQUESTED_WHEEL_TORQUE_DRIVE_TRAIN_NAME "RequestedWheelTorqueDriveTrain"
#define BMW_E9X_E8X_STATUS_DSC_KCAN_NAME "StatusDSC_KCAN"
#define BMW_E9X_E8X_SPEED_NAME "Speed"
#define BMW_E9X_E8X_TRANSIMISSION_DATA2_NAME "TransimissionData2"
#define BMW_E9X_E8X_WHEEL_PRESSURE_KCAN_NAME "WheelPressure_KCAN"
#define BMW_E9X_E8X_ACCELERATION_DATA_NAME "AccelerationData"
#define BMW_E9X_E8X_GEAR_SELECTOR_SWITCH_NAME "GearSelectorSwitch"
#define BMW_E9X_E8X_DISTANCE_ROUTE_NAME "DistanceRoute"
#define BMW_E9X_E8X_INSTRUMENT_CLUSTER_STATUS_KOMBI_NAME "InstrumentClusterStatus_KOMBI"
#define BMW_E9X_E8X_ENGINE_DATA_NAME "EngineData"
#define BMW_E9X_E8X_FUEL_LEVEL_NAME "FuelLevel"
#define BMW_E9X_E8X_TRANSMISSION_DATA3_NAME "TransmissionData3"
#define BMW_E9X_E8X_STEERING_WHEEL_ANGLE_SLOW_NAME "SteeringWheelAngle_slow"
#define BMW_E9X_E8X_TRANSMISSION_DATA_DISPLAY_NAME "TransmissionDataDisplay"
#define BMW_E9X_E8X_HEAT_FLOW_LOAD_TORQUE_CLIMATE_NAME "HeatFlow_LoadTorqueClimate"
#define BMW_E9X_E8X_NETWORK_MANAGMENT1_NAME "NetworkManagment1"
#define BMW_E9X_E8X_NETWORK_MANAGMENT2_NAME "NetworkManagment2"
#define BMW_E9X_E8X_NETWORK_MANAGMENT3_NAME "NetworkManagment3"
#define BMW_E9X_E8X_NETWORK_MANAGMENT4_NAME "NetworkManagment4"
#define BMW_E9X_E8X_NETWORK_MANAGMENT5_NAME "NetworkManagment5"
#define BMW_E9X_E8X_GWS_SHIFT_LEVER_HEARTBEAT_NAME "GWS_ShiftLeverHeartbeat"
#define BMW_E9X_E8X_HEAT_FLOW_ENGINE_NAME "HeatFlowEngine"
#define BMW_E9X_E8X_AMBIENT_TEMPERATURE_RELATIVE_TIME_NAME "AmbientTemperature_RelativeTime"
#define BMW_E9X_E8X_ELECTRIC_FUEL_PUMP_STATUS_NAME "ElectricFuelPumpStatus"
#define BMW_E9X_E8X_ENGINE_OBD_DATA_NAME "EngineOBD_data"
#define BMW_E9X_E8X_SERVICES_DKG_NAME "ServicesDKG"
#define BMW_E9X_E8X_CRASH_DISCONNECT_CONTROL_NAME "CrashDisconnectControl"
#define BMW_E9X_E8X_TURN_SIGNALS_NAME "TurnSignals"
#define BMW_E9X_E8X_DIMMING_NAME "Dimming"
#define BMW_E9X_E8X_LAMP_STATUS_NAME "LampStatus"
#define BMW_E9X_E8X_RAIN_SENSOR_WIPER_SPEED_NAME "RainSensorWiperSpeed"
#define BMW_E9X_E8X_CLIMATE_FRONT_STATUS_NAME "ClimateFrontStatus"
#define BMW_E9X_E8X_LCD_LIGHTING_NAME "LCD_lighting"
#define BMW_E9X_E8X_LIGHT_CONTROL_NAME "LightControl"
#define BMW_E9X_E8X_TIME_DATE_NAME "Time_Date"
#define BMW_E9X_E8X_OCCUPANCY_SEAT_BELT_CONTACT_NAME "OccupancySeatBeltContact"
#define BMW_E9X_E8X_TRUNK_STATUS_NAME "TrunkStatus"
#define BMW_E9X_E8X_TIRE_PRESSURE_STATUS_NAME "TirePressureStatus"
#define BMW_E9X_E8X_RANGE_MILEAGE_NAME "Range_Mileage"
#define BMW_E9X_E8X_STATUS_FUEL_CONTROL_NAME "StatusFuelControl"
#define BMW_E9X_E8X_ENGINE_OIL_LEVEL_NAME "EngineOilLevel"
#define BMW_E9X_E8X_RUN_ON_TIME_TERMINAL30_NAME "RunOnTimeTerminal30"
#define BMW_E9X_E8X_POWER_MANAGMENT_CONSUMPTION_CONTROL_NAME "PowerManagmentConsumptionControl"
#define BMW_E9X_E8X_POWER_BATTERY_VOLTAGE_NAME "PowerBatteryVoltage"
#define BMW_E9X_E8X_POWER_RUNNING_TIME_NAME "PowerRunningTime"
#define BMW_E9X_E8X_SERVICES_KGM_NAME "ServicesKGM"
#define BMW_E9X_E8X_SERVICES_DME_NAME "ServicesDME"
#define BMW_E9X_E8X_SERVICES_DSC_NAME "ServicesDSC"
#define BMW_E9X_E8X_SERVICES_KOMBI_NAME "ServicesKOMBI"
#define BMW_E9X_E8X_SERVICES_KBM_NAME "ServicesKBM"
#define BMW_E9X_E8X_ACCELEROMETER1_NAME "Accelerometer1"
#define BMW_E9X_E8X_WHEEL_TORQUE_DRIVETRAIN2_NAME "WheelTorqueDrivetrain2"
#define BMW_E9X_E8X_SYNC_NAME "SYNC"
#define BMW_E9X_E8X_UNKNOWN140_NAME "Unknown140"
#define BMW_E9X_E8X_UNKNOWN_D4_NAME "Unknown_d4"
#define BMW_E9X_E8X_ACCELEROMETER2_NAME "Accelerometer2"
#define BMW_E9X_E8X_OPERATION_PUSH_BUTTON_DTC_NAME "OperationPushButtonDTC"
#define BMW_E9X_E8X_UNKNOWN_629_NAME "Unknown_629"
#define BMW_E9X_E8X_SYNCHRONIZATION_SC_VDA_NAME "Synchronization_SC_VDA"
#define BMW_E9X_E8X_DELAY_REQUEST_ACC_NAME "Delay_request_ACC"
#define BMW_E9X_E8X_TORQUE_REQUEST_STEERING_NAME "Torque_request_steering"
#define BMW_E9X_E8X_TORQUE_REQUEST_EGS_NAME "Torque_request_EGS"
#define BMW_E9X_E8X_TORQUE_REQUEST_ACC_NAME "Torque_request_ACC"
#define BMW_E9X_E8X_TARGET_TORQUE_REQUEST_NAME "Target_torque_request"
#define BMW_E9X_E8X_STATUS_TARGET_TORQUE_CONVERSION_NAME "Status_target_torque_conversion"
#define BMW_E9X_E8X_ALIVE_COUNTER_NAME "Alive_Counter"
#define BMW_E9X_E8X_ALIVE_CENTRAL_GATEWAY_NAME "Alive_Central_Gateway"
#define BMW_E9X_E8X_ALIVE_COUNTER_TELEPHONE_NAME "Alive_counter_telephone"
#define BMW_E9X_E8X_REQUEST_WHEEL_TORQUE_BRAKE_NAME "Request_wheel_torque_brake"
#define BMW_E9X_E8X_ALIVE_COUNTER_SECURITY_NAME "Alive_Counter_Security"
#define BMW_E9X_E8X_CLU1_VDA_NAME "CLU1_VDA"
#define BMW_E9X_E8X_WHEEL_TORQUE_BRAKE_NAME "Wheel_torque_brake"
#define BMW_E9X_E8X_STATUS_CENTRAL_LOCKING_BFT_NAME "Status_central_locking_BFT"
#define BMW_E9X_E8X_CLU2_VDA_NAME "CLU2_VDA"
#define BMW_E9X_E8X_STATUS_CENTRAL_LOCKING_BFTH_NAME "Status_central_locking_BFTH"
#define BMW_E9X_E8X_STATUS_CENTRAL_LOCKING_FAT_NAME "Status_central_locking_FAT"
#define BMW_E9X_E8X_CENTRAL_LOCKING_STATUS_FATH_NAME "Central_locking_status_FATH"
#define BMW_E9X_E8X_STATUS_CENTRAL_LOCKING_HK_NAME "Status_central_locking_HK"
#define BMW_E9X_E8X_CLU3_VDA_NAME "CLU3_VDA"
#define BMW_E9X_E8X_LATERAL_DYNAMICS_ARS_VDM_NAME "lateral_dynamics_ARS_VDM"
#define BMW_E9X_E8X_VERTICAL_DYNAMICS_VDM_ARS_NAME "Vertical_dynamics_VDM_ARS"
#define BMW_E9X_E8X_CONTROL_WINDOW_LIFTER_FAT_NAME "Control_window_lifter_FAT"
#define BMW_E9X_E8X_CONTROL_WINDOW_LIFTER_BFT_NAME "Control_window_lifter_BFT"
#define BMW_E9X_E8X_CONTROL_WINDOW_LIFTER_FATH_NAME "Control_window_lifter_FATH"
#define BMW_E9X_E8X_CONTROL_WINDOW_LIFTER_BFTH_NAME "Control_window_lifter_BFTH"
#define BMW_E9X_E8X_VOLTAGE_LEVEL_SENSORS_NAME "Voltage_level_sensors"
#define BMW_E9X_E8X_EXCHANGE_AFS_DSC_NAME "Exchange_AFS_DSC"
#define BMW_E9X_E8X_CONTROL_INTERVENTIONS_DSC_AFS_NAME "Control_interventions_DSC_AFS"
#define BMW_E9X_E8X_STATUS_PARTIAL_SETPOINTS_AFS_DSC_2_NAME "Status_partial_setpoints_AFS_DSC_2"
#define BMW_E9X_E8X_SENSOR_DATA_ROSE_NAME "Sensor_data_ROSE"
#define BMW_E9X_E8X_INPUT_DATA_ROSE_NAME "input_data_ROSE"
#define BMW_E9X_E8X_REQUEST_1_ACC_NAME "Request_1_ACC"
#define BMW_E9X_E8X_REQUEST_2_ACC_NAME "Request_2_ACC"
#define BMW_E9X_E8X_OBJECT_DATA_ACC_NAME "Object_data_ACC"
#define BMW_E9X_E8X_STATUS_ACC_NAME "Status_ACC"
#define BMW_E9X_E8X_REQUIREMENT_ANGLE_FFP_NAME "Requirement_angle_FFP"
#define BMW_E9X_E8X_CLU_STATUS_VDA_NAME "CLU_Status_VDA"
#define BMW_E9X_E8X_ACKNOWLEDGMENT_REQUEST_KOMBINATION_NAME "Acknowledgment_request_Kombination"
#define BMW_E9X_E8X_DISPLAY_MOTOR_DATA_NAME "Display_motor_data"
#define BMW_E9X_E8X_DISPLAY_ACC_NAME "display_ACC"
#define BMW_E9X_E8X_OPERATION_PUSH_BUTTON_MSA_NAME "Operation_push_button_MSA"
#define BMW_E9X_E8X_RAW_DATA_LONGITUDINAL_ACCELERATION_NAME "Raw_data_longitudinal_acceleration"
#define BMW_E9X_E8X_ACTUATION_REQUEST_EMF_NAME "actuation_request_EMF"
#define BMW_E9X_E8X_EFFECT_ERGO_COMMANDER_NAME "Effect_ErgoCommander"
#define BMW_E9X_E8X_STATUS_ARS_MODULE_NAME "Status_ARS_module"
#define BMW_E9X_E8X_OPERATION_ERGO_COMMANDER_NAME "Operation_ErgoCommander"
#define BMW_E9X_E8X_DISTANCE_MESSAGE_PDC_NAME "Distance_message_PDC"
#define BMW_E9X_E8X_DISTANCE_MESSAGE_2_PDC_NAME "Distance_message_2_PDC"
#define BMW_E9X_E8X_ACOUSTIC_MESSAGE_PDC_NAME "Acoustic_message_PDC"
#define BMW_E9X_E8X_OPERATION_AIR_CONDITIONING_AIR_DISTRIBUTION_FA_NAME "Operation_air_conditioning_air_distribution_FA"
#define BMW_E9X_E8X_OPERATION_PUSHBUTTON_M_DRIVE_NAME "Operation_pushbutton_MDrive"
#define BMW_E9X_E8X_CLIMATE_CONTROL_REMOTE_CONTROL_NAME "Climate_control_remote_control"
#define BMW_E9X_E8X_OPERATION_STRATIFICATION_SEAT_HEATING_NAME "Operation_stratification_seat_heating"
#define BMW_E9X_E8X_AIR_CONDITIONING_CONTROLS_REAR_NAME "Air_conditioning_controls_rear"
#define BMW_E9X_E8X_OPERATION_AIR_CONDITIONING_AIR_DISTRIBUTION_BF_NAME "Operation_air_conditioning_air_distribution_BF"
#define BMW_E9X_E8X_OPERATION_AIR_CONDITIONING_FRONT_NAME "Operation_air_conditioning_front"
#define BMW_E9X_E8X_OPERATION_PUSHBUTTON_INTERIOR_LIGHTING_NAME "Operation_pushbutton_interior_lighting"
#define BMW_E9X_E8X_OPERATION_SEAT_HEATING_SEAT_CLIMATE_FA_NAME "Operation_seat_heating_seat_climate_FA"
#define BMW_E9X_E8X_OPERATION_SEAT_HEATING_SEAT_CLIMATE_BF_NAME "Operation_seat_heating_seat_climate_BF"
#define BMW_E9X_E8X_STEERING_COLUMN_ADJUSTMENT_CONTROL_NAME "Steering_column_adjustment_control"
#define BMW_E9X_E8X_OPERATION_ACTIVE_SEAT_FA_NAME "Operation_active_seat_FA"
#define BMW_E9X_E8X_OPERATION_ACTIVE_SEAT_BF_NAME "Operation_active_seat_BF"
#define BMW_E9X_E8X_STEERING_COLUMN_SWITCH_OPERATION_NAME "Steering_column_switch_operation"
#define BMW_E9X_E8X_OPERATION_SEAT_MEMORY_FA_NAME "Operation_seat_memory_FA"
#define BMW_E9X_E8X_OPERATION_SHD_MDS_NAME "Operation_SHD_MDS"
#define BMW_E9X_E8X_STATUS_EPS_NAME "Status_EPS"
#define BMW_E9X_E8X_STATUS_AFS_NAME "Status_AFS"
#define BMW_E9X_E8X_STATUS_REQUEST_EMF_KCAN_NAME "Status_request_EMF_KCAN"
#define BMW_E9X_E8X_CRASH_NAME "Crash"
#define BMW_E9X_E8X_STATUS_EMF_KCAN_NAME "Status_EMF_KCAN"
#define BMW_E9X_E8X_ACOUSTIC_REQUEST_KOMBI_NAME "Acoustic_request_Kombi"
#define BMW_E9X_E8X_CONTROL_DISPLAY_SHIFTLIGHTS_NAME "Control_Display_Shiftlights"
#define BMW_E9X_E8X_MEMORY_ADJUSTMENT_NAME "Memory_adjustment"
#define BMW_E9X_E8X_STEERING_COLUMN_CONTROL_NAME "Steering_column_control"
#define BMW_E9X_E8X_POSITION_STEERING_COLUMN_NAME "Position_steering_column"
#define BMW_E9X_E8X_OPERATION_HUD_NAME "Operation_HUD"
#define BMW_E9X_E8X_STATUS_HUD_NAME "Status_HUD"
#define BMW_E9X_E8X_HEIGHT_LEVELS_AIR_SPRING_NAME "Height_levels_air_spring"
#define BMW_E9X_E8X_OPERATION_NIGHT_VISION_NAME "Operation_NightVision"
#define BMW_E9X_E8X_STATUS_NIGHT_VISION_NAME "Status_NightVision"
#define BMW_E9X_E8X_OPERATION_PUSH_BUTTON_NSW_NAME "Operation_push_button_NSW"
#define BMW_E9X_E8X_OPERATION_SPECIAL_FUNCTION_NAME "Operation_special_function"
#define BMW_E9X_E8X_STATUS_BFS_NAME "Status_BFS"
#define BMW_E9X_E8X_OPERATION_PUSH_BUTTON_NSL_NAME "Operation_push_button_NSL"
#define BMW_E9X_E8X_STATUS_BFSH_NAME "Status_BFSH"
#define BMW_E9X_E8X_STATUS_FAS_NAME "Status_FAS"
#define BMW_E9X_E8X_STATUS_FASH_NAME "Status_FASH"
#define BMW_E9X_E8X_STATUS_RADIO_KEY_NAME "Status_radio_key"
#define BMW_E9X_E8X_STATUS_CLIMATE_FRONT_EXTENDED_NAME "Status_climate_front_extended"
#define BMW_E9X_E8X_REQUEST_DISPLAY_CLIMATE_NAME "Request_display_climate"
#define BMW_E9X_E8X_STATUS_KLIMA_FOND_NAME "Status_Klima_Fond"
#define BMW_E9X_E8X_STATUS_AIR_CONDITIONING_FRONT_CONTROL_UNIT_NAME "Status_air_conditioning_front_control_unit"
#define BMW_E9X_E8X_STATUS_REAR_VIEW_CAMERA_NAME "Status_rear_view_camera"
#define BMW_E9X_E8X_CONTROL_REAR_VIEW_CAMERA_NAME "Control_rear_view_camera"
#define BMW_E9X_E8X_STATUS_PDC_NAME "Status_PDC"
#define BMW_E9X_E8X_STATUS_DOOR_SENSORS_NAME "Status_door_sensors"
#define BMW_E9X_E8X_WIPER_STATUS_NAME "Wiper_status"
#define BMW_E9X_E8X_CHALLENGE_PASSIVE_ACCESS_NAME "Challenge_Passive_Access"
#define BMW_E9X_E8X_STATUS_TRANSMISSION_PASSIVE_ACCESS_NAME "Status_Transmission_Passive_Access"
#define BMW_E9X_E8X_OPERATION_OF_CLIMATE_ADDITIONAL_PROGRAMS_NAME "Operation_of_climate_additional_programs"
#define BMW_E9X_E8X_OPERATION_BLINDS_MK_NAME "Operation_blinds_MK"
#define BMW_E9X_E8X_CONTROL_FH_SHD_CENTRAL_COMFORT_NAME "Control_FH_SHD_central_comfort"
#define BMW_E9X_E8X_STATUS_SHIFTLIGHTS_NAME "Status_Shiftlights"
#define BMW_E9X_E8X_STATUS_CONVERTIBLE_TOP_MANUAL_CONVERTIBLE_NAME "Status_convertible_top_manual_convertible"
#define BMW_E9X_E8X_STATUS_CONVERTIBLE_TOP_CONVERTIBLE_NAME "Status_convertible_top_convertible"
#define BMW_E9X_E8X_STATUS_CENTRAL_LOCKING_CONVERTIBLE_TOP_NAME "Status_central_locking_convertible_top"
#define BMW_E9X_E8X_CONTROL_SECURITY_VEHICLE_2_NAME "Control_security_vehicle_2"
#define BMW_E9X_E8X_CONTROL_REMOTE_START_SAFETY_VEHICLE_NAME "Control_remote_start_safety_vehicle"
#define BMW_E9X_E8X_ELECTROCHROMIC_CONTROL_NAME "Electrochromic_control"
#define BMW_E9X_E8X_PUSHBUTTON_VERTICAL_DYNAMICS_NAME "Pushbutton_vertical_dynamics"
#define BMW_E9X_E8X_OPERATION_PUSHBUTTON_SPORT_NAME "Operation_pushbutton_sport"
#define BMW_E9X_E8X_CONTROL_RESPONSE_HYDROGEN_VEHICLE_NAME "Control_response_hydrogen_vehicle"
#define BMW_E9X_E8X_CONTROL_HIGH_BEAM_ASSISTANT_NAME "Control_high_beam_assistant"
#define BMW_E9X_E8X_CENTRAL_LOCKING_CONTROL_FOR_SECURITY_VEHICLE_NAME "Central_locking_control_for_security_vehicle"
#define BMW_E9X_E8X_REMOTE_CONTROL_FOND_COMMANDER_NAME "Remote_control_FondCommander"
#define BMW_E9X_E8X_CENTRAL_LOCKING_CONTROL_NAME "Central_locking_control"
#define BMW_E9X_E8X_OPERATION_OF_CLIMATE_STAND_FUNCTIONS_NAME "Operation_of_climate_stand_functions"
#define BMW_E9X_E8X_OPERATION_PERSONALIZATION_NAME "Operation_personalization"
#define BMW_E9X_E8X_DWA_ALARM_NAME "DWA_Alarm"
#define BMW_E9X_E8X_CONTROL_HORN_DWA_NAME "Control_horn_DWA"
#define BMW_E9X_E8X_OPERATION_ONBOARD_COMPUTER_NAME "Operation_onboard_computer"
#define BMW_E9X_E8X_OPERATION_RSE_NAME "Operation_RSE"
#define BMW_E9X_E8X_STOPWATCH_NAME "Stopwatch"
#define BMW_E9X_E8X_REQUEST_SWITCHING_DISPLAY_NAME "Request_switching_display"
#define BMW_E9X_E8X_SWITCH_STATUS_DISPLAY_NAME "Switch_status_display"
#define BMW_E9X_E8X_WATER_VALVE_CONTROL_NAME "Water_valve_control"
#define BMW_E9X_E8X_TEMPERATUR_IST_FOND_NAME "Temperatur_Ist_Fond"
#define BMW_E9X_E8X_DISPLAY_KOMBINATION_EXTENDED_NAME "Display_Kombination_extended"
#define BMW_E9X_E8X_OUTSIDE_TEMPERATURE_NAME "Outside_temperature"
#define BMW_E9X_E8X_CONTROL_MONITOR_REAR_NAME "Control_monitor_rear"
#define BMW_E9X_E8X_CONTROL_MONITOR_NAME "Control_monitor"
#define BMW_E9X_E8X_STATUS_OF_AUXILIARY_WATER_PUMP_NAME "Status_of_auxiliary_water_pump"
#define BMW_E9X_E8X_STATUS_SENSOR_AUC_NAME "Status_Sensor_AUC"
#define BMW_E9X_E8X_STATUS_FITTING_WINDOW_V_NAME "Status_fitting_window_V"
#define BMW_E9X_E8X_STATUS_PRESSURE_REFRIGERATION_CIRCUIT_NAME "Status_pressure_refrigeration_circuit"
#define BMW_E9X_E8X_STATUS_STRATIFICATION_REAR_NAME "Status_stratification_rear"
#define BMW_E9X_E8X_STATUS_HEATING_REAR_WINDOW_NAME "Status_heating_rear_window"
#define BMW_E9X_E8X_STATUS_VALVE_AIR_CONDITIONING_COMPRESSOR_NAME "Status_valve_air_conditioning_compressor"
#define BMW_E9X_E8X_STATUS_TAILGATE_LIFT_NAME "Status_tailgate_lift"
#define BMW_E9X_E8X_SWITCH_CONTROL_DISPLAY_NAME "Switch_control_display"
#define BMW_E9X_E8X_STATUS_SETTING_VIDEO_NIGHT_VISION_NAME "Status_setting_video_night_vision"
#define BMW_E9X_E8X_STATUS_SETTING_VIDEO_REAR_VIEW_CAMERA_NAME "Status_setting_video_rear_view_camera"
#define BMW_E9X_E8X_STATUS_TRAILER_NAME "Status_trailer"
#define BMW_E9X_E8X_STATUS_OF_AIR_DISTRIBUTION_FA_NAME "Status_of_air_distribution_FA"
#define BMW_E9X_E8X_STATUS_AIR_DISTRIBUTION_BF_NAME "Status_air_distribution_BF"
#define BMW_E9X_E8X_STATUS_CLIMATE_ADDITIONAL_PROGRAMS_NAME "Status_climate_additional_programs"
#define BMW_E9X_E8X_STATUS_AIR_CONDITION_FUNCTIONS_NAME "Status_air_condition_functions"
#define BMW_E9X_E8X_STATUS_DRIVER_DETECTION_NAME "Status_driver_detection"
#define BMW_E9X_E8X_DISPLAY_SWITCHING_INSTRUCTION_NAME "Display_switching_instruction"
#define BMW_E9X_E8X_AIR_CONDITIONING_CONTROL_SH_ZH_AUXILIARY_WATER_PUMP_NAME "Air_conditioning_control_SH_ZH_auxiliary_water_pump"
#define BMW_E9X_E8X_UNITS_NAME "Units"
#define BMW_E9X_E8X_STATUS_RSE_NAME "Status_RSE"
#define BMW_E9X_E8X_STATUS_GANG_NAME "Status_Gang"
#define BMW_E9X_E8X_OPERATION_BUTTON_CONVERTIBLE_TOP_NAME "Operation_button_convertible_top"
#define BMW_E9X_E8X_VEHICLE_TILT_NAME "Vehicle_tilt"
#define BMW_E9X_E8X_OPERATION_BUTTON_FLAP_CONVERTIBLE_TOP_NAME "Operation_button_flap_convertible_top"
#define BMW_E9X_E8X_STATUS_MSA_NAME "Status_MSA"
#define BMW_E9X_E8X_REFILL_QUANTITY_NAME "Refill_quantity"
#define BMW_E9X_E8X_SERVICE_CALL_TELESERVICE_NAME "Service_Call_Teleservice"
#define BMW_E9X_E8X_STATUS_SERVICE_CALL_TELESERVICE_NAME "Status_Service_Call_Teleservice"
#define BMW_E9X_E8X_STATUS_DRIVING_LIGHT_NAME "Status_driving_light"
#define BMW_E9X_E8X_VEHICLE_MODE_NAME "Vehicle_mode"
#define BMW_E9X_E8X_OPERATION_BUTTON_PARKING_AIDS_NAME "Operation_button_parking_aids"
#define BMW_E9X_E8X_STATUS_ANTENNAS_PASSIVE_ACCESS_NAME "Status_antennas_Passive_Access"
#define BMW_E9X_E8X_OPERATION_PUSH_BUTTON_RDC_NAME "Operation_push_button_RDC"
#define BMW_E9X_E8X_OPERATION_BUTTON_HDC_NAME "Operation_button_HDC"
#define BMW_E9X_E8X_OPERATION_OF_TAILGATE_INTERIOR_BUTTON_NAME "Operation_of_tailgate_interior_button"
#define BMW_E9X_E8X_STATUS_TIRE_PRESSURE_NAME "Status_tire_pressure"
#define BMW_E9X_E8X_OPERATION_BUTTON_CAMERA_BF_NAME "Operation_button_camera_BF"
#define BMW_E9X_E8X_DAMPER_CURRENT_NAME "Damper_current"
#define BMW_E9X_E8X_STATUS_DAMPER_PROGRAM_NAME "Status_damper_program"
#define BMW_E9X_E8X_RELATIVZEIT_NAME "Relativzeit"
#define BMW_E9X_E8X_DISPLAY_HDC_NAME "Display_HDC"
#define BMW_E9X_E8X_STATUS_CLIMATE_INTERNAL_CONTROL_INFO_NAME "Status_climate_internal_control_info"
#define BMW_E9X_E8X_PROGRAMMING_OF_STEP_CRUISE_CONTROL_NAME "Programming_of_step_cruise_control"
#define BMW_E9X_E8X_DRIVER_DISPLAY_SPEED_RANGE_NAME "Driver_display_speed_range"
#define BMW_E9X_E8X_DISPLAY_CHECK_CONTROL_MESSAGE_ROLE_NAME "Display_check_control_message_role"
#define BMW_E9X_E8X_CONTROL_DISPLAY_CHECK_CONTROL_MESSAGE_NAME "Control_display_check_control_message"
#define BMW_E9X_E8X_STATUS_DISPLAY_CLIMATE_NAME "Status_display_climate"
#define BMW_E9X_E8X_STATUS_MONITOR_FRONT_NAME "Status_Monitor_Front"
#define BMW_E9X_E8X_STATUS_MONITOR_FOND_1_NAME "Status_Monitor_Fond_1"
#define BMW_E9X_E8X_STATUS_MONITOR_FOND_2_NAME "Status_Monitor_Fond_2"
#define BMW_E9X_E8X_RAW_DATA_LEVEL_TANK_NAME "Raw_data_level_tank"
#define BMW_E9X_E8X_SEAT_BACK_LOCK_STATUS_FA_NAME "Seat_back_lock_status_FA"
#define BMW_E9X_E8X_STATUS_SEAT_BACK_LOCK_BF_NAME "Status_seat_back_lock_BF"
#define BMW_E9X_E8X_STATUS_CONTACT_HANDBRAKE_NAME "Status_contact_handbrake"
#define BMW_E9X_E8X_APPOINTMENT_CONDITION_BASED_SERVICE_NAME "Appointment_Condition_Based_Service"
#define BMW_E9X_E8X_STATUS_ONBOARD_COMPUTER_NAME "Status_onboard_computer"
#define BMW_E9X_E8X_ONBOARD_COMPUTER_DATA_TRIP_DATA_NAME "Onboard_computer_data_trip_data"
#define BMW_E9X_E8X_DATA_ONBOARD_COMPUTER_START_OF_JOURNEY_NAME "Data_onboard_computer_start_of_journey"
#define BMW_E9X_E8X_DATA_ONBOARD_COMPUTER_AVERAGE_VALUES_NAME "Data_onboard_computer_average_values"
#define BMW_E9X_E8X_DATA_ONBOARD_COMPUTER_ARRIVAL_NAME "Data_onboard_computer_arrival"
#define BMW_E9X_E8X_STATUS_TERMINAL_REQUEST_NAME "Status_terminal_request"
#define BMW_E9X_E8X_DISPLAY_KOMBINATION_EXTERNAL_DISPLAY_NAME "Display_Kombination_external_display"
#define BMW_E9X_E8X_CONTROL_DISPLAY_OF_DEMAND_ORIENTED_SERVICE_NAME "Control_display_of_demand_oriented_service"
#define BMW_E9X_E8X_SETTING_THE_DRIVING_DYNAMICS_SWITCH_NAME "Setting_the_driving_dynamics_switch"
#define BMW_E9X_E8X_STATUS_WEAR_LAMELLA_NAME "Status_wear_lamella"
#define BMW_E9X_E8X_STATUS_DKG_NAME "Status_DKG"
#define BMW_E9X_E8X_TEMPERATUR_BREMSE_NAME "Temperatur_Bremse"
#define BMW_E9X_E8X_RANGE_OF_DIESEL_EXHAUST_GAS_ADDITIVE_NAME "Range_of_diesel_exhaust_gas_additive"
#define BMW_E9X_E8X_CHASSIS_NUMBER_NAME "chassis_number"
#define BMW_E9X_E8X_ELECTRONIC_ENGINE_OIL_DIPSTICK_M_NAME "Electronic_engine_oil_dipstick_M"
#define BMW_E9X_E8X_MOTOR_DATA_2_NAME "Motor_data_2"
#define BMW_E9X_E8X_VEHICLE_TYPE_NAME "Vehicle_type"
#define BMW_E9X_E8X_STATUS_BATTERY_NAME "Status_battery"
#define BMW_E9X_E8X_START_SPEED_NAME "Start_speed"
#define BMW_E9X_E8X_STATUS_SYSTEM_AFS_NAME "Status_System_AFS"
#define BMW_E9X_E8X_RDA_REQUEST_DATA_STORAGE_NAME "RDA_request_data_storage"
#define BMW_E9X_E8X_CODING_POWER_MANAGEMENT_NAME "Coding_power_management"
#define BMW_E9X_E8X_OPERATION_CHASSIS_NAME "Operation_chassis"
#define BMW_E9X_E8X_STATUS_M_DRIVE_NAME "Status_MDrive"
#define BMW_E9X_E8X_OPERATION_TIME_DATE_NAME "Operation_time_date"
#define BMW_E9X_E8X_VEHICLE_STATE_NAME "Vehicle_state"
#define BMW_E9X_E8X_REQUEST_REMOTE_SERVICES_NAME "Request_Remote_Services"
#define BMW_E9X_E8X_STATUS_MOTOR_CONTROL_CKM_NAME "Status_motor_control_CKM"
#define BMW_E9X_E8X_STATUS_SHIFTLIGHTS_CKM_NAME "Status_Shiftlights_CKM"
#define BMW_E9X_E8X_STATUS_GEAR_REVERSE_NAME "Status_gear_reverse"
#define BMW_E9X_E8X_STATUS_WATER_VALVE_NAME "Status_water_valve"
#define BMW_E9X_E8X_POSITION_WINDOW_LIFTER_FAT_NAME "Position_window_lifter_FAT"
#define BMW_E9X_E8X_POSITION_WINDOW_LIFTER_FATH_NAME "Position_window_lifter_FATH"
#define BMW_E9X_E8X_POSITION_WINDOW_REGULATOR_BFT_NAME "Position_window_regulator_BFT"
#define BMW_E9X_E8X_POSITION_WINDOW_REGULATOR_BFTH_NAME "Position_window_regulator_BFTH"
#define BMW_E9X_E8X_POSITION_SHD_NAME "Position_SHD"
#define BMW_E9X_E8X_POSITION_WINDOW_LIFTER_SECURITY_VEHICLE_NAME "Position_window_lifter_security_vehicle"
#define BMW_E9X_E8X_STATUS_CONSUMER_SHUTDOWN_NAME "Status_consumer_shutdown"
#define BMW_E9X_E8X_POSITION_WINDOW_REAR_WINDOW_NAME "Position_window_rear_window"
#define BMW_E9X_E8X_CONFIGURATION_FAS_NAME "Configuration_FAS"
#define BMW_E9X_E8X_CONFIGURATION_BFS_NAME "Configuration_BFS"
#define BMW_E9X_E8X_STATUS_EDCK_CKM_NAME "Status_EDCK_CKM"
#define BMW_E9X_E8X_ACCESS_RADIO_NAME "Access_radio"
#define BMW_E9X_E8X_OPERATION_PUSH_BUTTON_RADIO_NAME "Operation_push_button_radio"
#define BMW_E9X_E8X_RADIO_AUDIO_CONTROL_INTERFACE_DISPLAY_NAME "Radio_audio_control_interface_display"
#define BMW_E9X_E8X_ACKNOWLEDGMENT_ACCESS_RADIO_AUDIO_CONTROL_INTERFACE_NAME "Acknowledgment_access_radio_audio_control_interface"
#define BMW_E9X_E8X_STATUS_SOLAR_SENSOR_NAME "Status_solar_sensor"
#define BMW_E9X_E8X_CONFIGURATION_OF_CENTRAL_LOCKING_CKM_NAME "Configuration_of_central_locking_CKM"
#define BMW_E9X_E8X_STATUS_CENTRAL_LOCKING_CKM_NAME "Status_central_locking_CKM"
#define BMW_E9X_E8X_CONFIGURATION_DWA_CKM_NAME "Configuration_DWA_CKM"
#define BMW_E9X_E8X_STATUS_DWA_CKM_NAME "Status_DWA_CKM"
#define BMW_E9X_E8X_CONFIGURATION_RLS_CKM_NAME "Configuration_RLS_CKM"
#define BMW_E9X_E8X_STATUS_RLS_CKM_NAME "Status_RLS_CKM"
#define BMW_E9X_E8X_CONFIGURATION_OF_MEMORY_POSITIONS_CKM_NAME "Configuration_of_memory_positions_CKM"
#define BMW_E9X_E8X_STATUS_MEMORY_POSITIONS_CKM_NAME "Status_memory_positions_CKM"
#define BMW_E9X_E8X_CONFIGURATION_LIGHT_CKM_NAME "Configuration_light_CKM"
#define BMW_E9X_E8X_STATUS_LIGHT_CKM_NAME "Status_light_CKM"
#define BMW_E9X_E8X_CONFIGURATION_CLIMATE_CKM_NAME "Configuration_Climate_CKM"
#define BMW_E9X_E8X_STATUS_KLIMA_CKM_NAME "Status_Klima_CKM"
#define BMW_E9X_E8X_CONFIGURATION_OF_TAILGATE_CKM_NAME "Configuration_of_tailgate_CKM"
#define BMW_E9X_E8X_STATUS_TAILGATE_CKM_NAME "Status_tailgate_CKM"
#define BMW_E9X_E8X_CONFIGURATION_REAR_VIEW_CAMERA_CKM_NAME "Configuration_rear_view_camera_CKM"

/* Signal Names. */
#define BMW_E9X_E8X_ACC_PEDAL_CHECKSUM_170_NAME "Checksum_170"
#define BMW_E9X_E8X_ACC_PEDAL_COUNTER_170_NAME "Counter_170"
#define BMW_E9X_E8X_ACC_PEDAL_ACCELERATOR_PEDAL_PERCENTAGE_NAME "AcceleratorPedalPercentage"
#define BMW_E9X_E8X_ACC_PEDAL_ENGINE_SPEED_NAME "EngineSpeed"
#define BMW_E9X_E8X_ACC_PEDAL_CRUISE_PEDAL_INACTIVE_NAME "CruisePedalInactive"
#define BMW_E9X_E8X_ACC_PEDAL_CRUISE_PEDAL_ACTIVE_NAME "CruisePedalActive"
#define BMW_E9X_E8X_ACC_PEDAL_KICK_DOWN_PRESSED_NAME "KickDownPressed"
#define BMW_E9X_E8X_ACC_PEDAL_ACCELERATOR_PEDAL_PRESSED_NAME "AcceleratorPedalPressed"
#define BMW_E9X_E8X_ACC_PEDAL_THROTTLEL_PRESSED_NAME "ThrottlelPressed"
#define BMW_E9X_E8X_CRUISE_CONTROL_CHECKSUM_404_NAME "Checksum_404"
#define BMW_E9X_E8X_CRUISE_CONTROL_REQUESTS_0X_F_NAME "requests_0xF"
#define BMW_E9X_E8X_CRUISE_CONTROL_COUNTER_404_NAME "Counter_404"
#define BMW_E9X_E8X_CRUISE_CONTROL_CANCEL_REQUEST_UP_STALK_NAME "Cancel_request_up_stalk"
#define BMW_E9X_E8X_CRUISE_CONTROL_RESUME_REQUEST_NAME "Resume_request"
#define BMW_E9X_E8X_CRUISE_CONTROL_CANCEL_REQUEST_UP_OR_DOWN_STALK_NAME "Cancel_request_up_or_down_stalk"
#define BMW_E9X_E8X_CRUISE_CONTROL_MINUS5MPH_REQUEST_NAME "minus5mph_request"
#define BMW_E9X_E8X_CRUISE_CONTROL_MINUS1MPH_REQUEST_NAME "minus1mph_request"
#define BMW_E9X_E8X_CRUISE_CONTROL_PLUS5MPH_REQUEST_NAME "plus5mph_request"
#define BMW_E9X_E8X_CRUISE_CONTROL_PLUS1MPH_REQUEST_NAME "plus1mph_request"
#define BMW_E9X_E8X_CRUISE_CONTROL_SET_ME_0X_FC_NAME "setMe_0xFC"
#define BMW_E9X_E8X_CRUISE_CONTROL_STATUS_CRUISE_CONTROL_SETPOINT_SPEED_NAME "CruiseControlSetpointSpeed"
#define BMW_E9X_E8X_CRUISE_CONTROL_STATUS_CRUISE_COONTROL_ACTIVE_FLAG_NAME "CruiseCoontrolActiveFlag"
#define BMW_E9X_E8X_CRUISE_CONTROL_STATUS_CRUISE_CONTROL_INACTIVE_FLAG_NAME "CruiseControlInactiveFlag"
#define BMW_E9X_E8X_ENGINE_AND_BRAKE_ENGINE_TORQUE_NAME "EngineTorque"
#define BMW_E9X_E8X_ENGINE_AND_BRAKE_ENGINE_TORQUE_WO_INTERV_NAME "EngineTorqueWoInterv"
#define BMW_E9X_E8X_ENGINE_AND_BRAKE_BRAKE_ACTIVE2_NAME "Brake_active2"
#define BMW_E9X_E8X_ENGINE_AND_BRAKE_BRAKE_PRESSED_NAME "BrakePressed"
#define BMW_E9X_E8X_STEERING_BUTTONS_NEXT_UP_NAME "Next_up"
#define BMW_E9X_E8X_STEERING_BUTTONS_PREVIOUS_DOWN_NAME "Previous_down"
#define BMW_E9X_E8X_STEERING_BUTTONS_VOLUME_UP_NAME "Volume_UP"
#define BMW_E9X_E8X_STEERING_BUTTONS_VOLUME_DOWN_NAME "Volume_DOWN"
#define BMW_E9X_E8X_STEERING_BUTTONS_TELEPHONE_NAME "Telephone"
#define BMW_E9X_E8X_STEERING_BUTTONS_VOICE_CONTROL_NAME "VoiceControl"
#define BMW_E9X_E8X_DYNAMIC_CRUISE_CONTROL_STATUS_COUNTER_403_NAME "Counter_403"
#define BMW_E9X_E8X_DYNAMIC_CRUISE_CONTROL_STATUS_CRUISE_CONTROL_SETPOINT_SPEED_NAME "CruiseControlSetpointSpeed"
#define BMW_E9X_E8X_DYNAMIC_CRUISE_CONTROL_STATUS_CRUISE_ACTIVE_NAME "CruiseActive"
#define BMW_E9X_E8X_DYNAMIC_CRUISE_CONTROL_STATUS_CRUISE_SPEED_CHANGE_REQUEST_NAME "CruiseSpeedChangeRequest"
#define BMW_E9X_E8X_STEERING_WHEEL_ANGLE_DSC_STEERING_POSITION_NAME "SteeringPosition"
#define BMW_E9X_E8X_STEERING_WHEEL_ANGLE_DSC_COUNTER_201_NAME "Counter_201"
#define BMW_E9X_E8X_STEERING_WHEEL_ANGLE_DSC_STEERING_POSITION_COMPLEMENT_LOW_NAME "SteeringPositionComplementLow"
#define BMW_E9X_E8X_WHEEL_SPEEDS_WHEEL1_NAME "Wheel1"
#define BMW_E9X_E8X_WHEEL_SPEEDS_WHEEL2_NAME "Wheel2"
#define BMW_E9X_E8X_WHEEL_SPEEDS_WHEEL3_NAME "Wheel3"
#define BMW_E9X_E8X_WHEEL_SPEEDS_WHEEL4_NAME "Wheel4"
#define BMW_E9X_E8X_WIPER_SWITCH_AUTO_WIPERS_ON_NAME "AutoWipersOn"
#define BMW_E9X_E8X_TERMINAL_STATUS_IGNITION_OFF_NAME "IgnitionOff"
#define BMW_E9X_E8X_TERMINAL_STATUS_ACC_ON_NAME "AccOn"
#define BMW_E9X_E8X_TERMINAL_STATUS_COUNTER_304_NAME "Counter_304"
#define BMW_E9X_E8X_TERMINAL_STATUS_CHECKSUM_304_NAME "Checksum_304"
#define BMW_E9X_E8X_TORQUE_TRANSMISION_REQUEST_CHECKSUM_184_NAME "Checksum_184"
#define BMW_E9X_E8X_TORQUE_TRANSMISION_REQUEST_COUNTER_184_NAME "Counter_184"
#define BMW_E9X_E8X_STEERING_WHEEL_ANGLE_STEERING_POSITION_NAME "SteeringPosition"
#define BMW_E9X_E8X_STEERING_WHEEL_ANGLE_STEERING_SPEED_NAME "SteeringSpeed"
#define BMW_E9X_E8X_TRANSMISSION_DATA_CHECKSUM_186_NAME "Checksum_186"
#define BMW_E9X_E8X_TRANSMISSION_DATA_COUNTER_186_NAME "Counter_186"
#define BMW_E9X_E8X_REQUESTED_WHEEL_TORQUE_DRIVE_TRAIN_CHECKSUM_191_NAME "Checksum_191"
#define BMW_E9X_E8X_REQUESTED_WHEEL_TORQUE_DRIVE_TRAIN_COUNTER_191_NAME "Counter_191"
#define BMW_E9X_E8X_REQUESTED_WHEEL_TORQUE_DRIVE_TRAIN_TORQUE_REQ_NAME "TorqueReq"
#define BMW_E9X_E8X_STATUS_DSC_KCAN_DSC_FULL_OFF_NAME "DSC_full_off"
#define BMW_E9X_E8X_STATUS_DSC_KCAN_DTC_ON_NAME "DTC_on"
#define BMW_E9X_E8X_STATUS_DSC_KCAN_COUNTER_414_NAME "Counter_414"
#define BMW_E9X_E8X_STATUS_DSC_KCAN_BRAKE_STATES_NAME "BrakeStates"
#define BMW_E9X_E8X_STATUS_DSC_KCAN_BRAKE_PRESSURE_NAME "BrakePressure"
#define BMW_E9X_E8X_STATUS_DSC_KCAN_CHECKSUM_414_NAME "Checksum_414"
#define BMW_E9X_E8X_SPEED_VEHICLE_SPEED_NAME "VehicleSpeed"
#define BMW_E9X_E8X_SPEED_MOVING_FORWARD_NAME "MovingForward"
#define BMW_E9X_E8X_SPEED_MOVING_REVERSE_NAME "MovingReverse"
#define BMW_E9X_E8X_SPEED_ACC_Y_NAME "AccY"
#define BMW_E9X_E8X_SPEED_ACC_X_NAME "AccX"
#define BMW_E9X_E8X_SPEED_YAW_RATE_NAME "YawRate"
#define BMW_E9X_E8X_SPEED_COUNTER_416_NAME "Counter_416"
#define BMW_E9X_E8X_SPEED_CHECKSUM_416_NAME "Checksum_416"
#define BMW_E9X_E8X_TRANSIMISSION_DATA2_COUNTER_418_NAME "Counter_418"
#define BMW_E9X_E8X_TRANSIMISSION_DATA2_MANUAL_MODE_NAME "ManualMode"
#define BMW_E9X_E8X_TRANSIMISSION_DATA2_CHECKSUM_418_NAME "Checksum_418"
#define BMW_E9X_E8X_GEAR_SELECTOR_SWITCH_COUNTER_408_NAME "Counter_408"
#define BMW_E9X_E8X_GEAR_SELECTOR_SWITCH_M3_SHIFTER_POSITION_NAME "m3ShifterPosition"
#define BMW_E9X_E8X_GEAR_SELECTOR_SWITCH_M3_SHIFTER_POSITION_XOR1111_NAME "m3ShifterPositionXOR1111"
#define BMW_E9X_E8X_GEAR_SELECTOR_SWITCH_SHIFTER_POSITION_NAME "ShifterPosition"
#define BMW_E9X_E8X_GEAR_SELECTOR_SWITCH_SHIFTER_POSITION_XOR1111_NAME "ShifterPositionXOR1111"
#define BMW_E9X_E8X_GEAR_SELECTOR_SWITCH_PARAM1_NAME "param1"
#define BMW_E9X_E8X_GEAR_SELECTOR_SWITCH_PARAM1_XOR11_NAME "param1XOR11"
#define BMW_E9X_E8X_GEAR_SELECTOR_SWITCH_PARK_BUTTON_FIRST_NAME "ParkButtonFirst"
#define BMW_E9X_E8X_GEAR_SELECTOR_SWITCH_PARK_BUTTON_SECOND_NAME "ParkButtonSecond"
#define BMW_E9X_E8X_GEAR_SELECTOR_SWITCH_SIDE_BUTTON_NAME "SideButton"
#define BMW_E9X_E8X_GEAR_SELECTOR_SWITCH_SIDE_BUTTON_XOR11_NAME "SideButtonXOR11"
#define BMW_E9X_E8X_GEAR_SELECTOR_SWITCH_PARAM5_NAME "param5"
#define BMW_E9X_E8X_GEAR_SELECTOR_SWITCH_SPORT_BUTTON_PRESSED_NAME "SportButtonPressed"
#define BMW_E9X_E8X_GEAR_SELECTOR_SWITCH_M3_BUTTON_NAME "M3_button"
#define BMW_E9X_E8X_GEAR_SELECTOR_SWITCH_ALWAYS11_NAME "always11"
#define BMW_E9X_E8X_ENGINE_DATA_ENGINE_TEMPERATURE_NAME "engine_temperature"
#define BMW_E9X_E8X_ENGINE_DATA_COUNTER_464_NAME "Counter_464"
#define BMW_E9X_E8X_FUEL_LEVEL_FUEL_PERCENTAGE_NAME "FuelPercentage"
#define BMW_E9X_E8X_TRANSMISSION_DATA3_CHECKSUM_946_NAME "Checksum_946"
#define BMW_E9X_E8X_TRANSMISSION_DATA3_COUNTER_945_NAME "Counter_945"
#define BMW_E9X_E8X_STEERING_WHEEL_ANGLE_SLOW_STEERING_POSITION_NAME "SteeringPosition"
#define BMW_E9X_E8X_STEERING_WHEEL_ANGLE_SLOW_COUNTER_200_NAME "Counter_200"
#define BMW_E9X_E8X_STEERING_WHEEL_ANGLE_SLOW_STEERING_SPEED_NAME "SteeringSpeed"
#define BMW_E9X_E8X_TRANSMISSION_DATA_DISPLAY_SHIFT_LEVER_POSITION_NAME "ShiftLeverPosition"
#define BMW_E9X_E8X_TRANSMISSION_DATA_DISPLAY_SHIFT_LEVER_POSITION_XOR_NAME "ShiftLeverPositionXOR"
#define BMW_E9X_E8X_TRANSMISSION_DATA_DISPLAY_GEAR_RELATED_TBD_NAME "GearRelated_TBD"
#define BMW_E9X_E8X_TRANSMISSION_DATA_DISPLAY_SPORT_BUTTON_STATE_NAME "SportButtonState"
#define BMW_E9X_E8X_TRANSMISSION_DATA_DISPLAY_COUNTER_466_NAME "Counter_466"
#define BMW_E9X_E8X_TRANSMISSION_DATA_DISPLAY_SHIFT_LEVER_MODE_NAME "ShiftLeverMode"
#define BMW_E9X_E8X_TRANSMISSION_DATA_DISPLAY_X_FF_NAME "xFF"
#define BMW_E9X_E8X_GWS_SHIFT_LEVER_HEARTBEAT_IGN_OFF_NAME "IgnOff"
#define BMW_E9X_E8X_TURN_SIGNALS_HOLD_ACTIVATED_NAME "HoldActivated"
#define BMW_E9X_E8X_TURN_SIGNALS_RIGHT_TURN_NAME "RightTurn"
#define BMW_E9X_E8X_TURN_SIGNALS_LEFT_TURN_NAME "LeftTurn"
#define BMW_E9X_E8X_TURN_SIGNALS_TURN_SIGNAL_IDLE_NAME "TurnSignalIdle"
#define BMW_E9X_E8X_TURN_SIGNALS_TURN_SIGNAL_ACTIVE_NAME "TurnSignalActive"
#define BMW_E9X_E8X_OCCUPANCY_SEAT_BELT_CONTACT_NEW_SIGNAL_2_NAME "NEW_SIGNAL_2"
#define BMW_E9X_E8X_OCCUPANCY_SEAT_BELT_CONTACT_NEW_SIGNAL_1_NAME "NEW_SIGNAL_1"
#define BMW_E9X_E8X_POWER_BATTERY_VOLTAGE_BATTERY_VOLTAGE_NAME "BatteryVoltage"
#define BMW_E9X_E8X_ACCELEROMETER1_YAW_RATE_NAME "YawRate"
#define BMW_E9X_E8X_ACCELEROMETER1_UNKNOWN_NAME "Unknown"
#define BMW_E9X_E8X_ACCELEROMETER1_PITCH_RATE_NAME "PitchRate"
#define BMW_E9X_E8X_ACCELEROMETER1_COUNTER_209_NAME "Counter_209"
#define BMW_E9X_E8X_ACCELEROMETER1_CRC8_209_NAME "CRC8_209"
#define BMW_E9X_E8X_SYNC_STATE1_NAME "State1"
#define BMW_E9X_E8X_SYNC_STATE2_NAME "State2"
#define BMW_E9X_E8X_SYNC_COUNTER_128_NAME "Counter_128"
#define BMW_E9X_E8X_UNKNOWN140_STATE_NAME "State"
#define BMW_E9X_E8X_UNKNOWN_D4_STATE1_NAME "State1"
#define BMW_E9X_E8X_UNKNOWN_D4_COUNTER_212_NAME "Counter_212"
#define BMW_E9X_E8X_UNKNOWN_D4_CHECKSUM_212_NAME "Checksum_212"
#define BMW_E9X_E8X_ACCELEROMETER2_YAW_RATE_NAME "YawRate"
#define BMW_E9X_E8X_ACCELEROMETER2_CRC8_205_NAME "CRC8_205"
#define BMW_E9X_E8X_ACCELEROMETER2_LATERAL_ACCELERATION_NAME "LateralAcceleration"
#define BMW_E9X_E8X_ACCELEROMETER2_COUNTER_205_NAME "Counter_205"
#define BMW_E9X_E8X_OPERATION_PUSH_BUTTON_DTC_DTC_PRESSED_NAME "DTC_pressed"
#define BMW_E9X_E8X_OPERATION_PUSH_BUTTON_DTC_SET_ME_0X3_FFF_NAME "setMe_0x3FFF"

/**
 * Signals in message AccPedal.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_acc_pedal_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t checksum_170;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t counter_170;

    /**
     * ToDo Factor to be adjusted
     *
     * Range: 0..10000 (0..100 -)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t accelerator_pedal_percentage;

    /**
     * It's hard to say that is even a rate
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t engine_speed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cruise_pedal_inactive;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cruise_pedal_active;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t kick_down_pressed;

    /**
     * Active only when driver actually presses the pedal
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t accelerator_pedal_pressed;

    /**
     * Active when accelerator pedal pressed or cruise control: drives
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t throttlel_pressed;
};

/**
 * Signals in message CruiseControl.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_cruise_control_t {
    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t checksum_404;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t requests_0x_f;

    /**
     * Message is sent at higher rate when cruise stalk is pressed
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t counter_404;

    /**
     * Appears when cancel stalk (up) is depressed
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cancel_request_up_stalk;

    /**
     * It appears when resume stalk button is depressed
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t resume_request;

    /**
     * Appears when cancel stalk (up or down) is depressed
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cancel_request_up_or_down_stalk;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t minus5mph_request;

    /**
     * Appears when -1mph/kph stalk is depressed
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t minus1mph_request;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t plus5mph_request;

    /**
     * Appears when +1mph/kph stalk is depressed
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t plus1mph_request;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t set_me_0x_fc;
};

/**
 * Signals in message CruiseControlStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_cruise_control_status_t {
    /**
     * Range: 0..1020 (0..255 mph)
     * Scale: 0.25
     * Offset: 0
     */
    uint8_t cruise_control_setpoint_speed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cruise_coontrol_active_flag;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cruise_control_inactive_flag;
};

/**
 * Signals in message EngineAndBrake.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_engine_and_brake_t {
    /**
     * Engine torque without inertia - combustion torque
     *
     * Range: -32768..32736 (-1024..1023 -)
     * Scale: 0.03125
     * Offset: 0
     */
    int16_t engine_torque;

    /**
     * Engine torque without inertia and without shift intervention
     *
     * Range: -32768..32767 (-1024..1023.96875 -)
     * Scale: 0.03125
     * Offset: 0
     */
    int16_t engine_torque_wo_interv;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_active2;

    /**
     * Brake when driver presses the brake or hill hold
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_pressed;
};

/**
 * Signals in message SteeringButtons.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_steering_buttons_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t next_up;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t previous_down;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t volume_up;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t volume_down;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t telephone;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t voice_control;
};

/**
 * Signals in message DynamicCruiseControlStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_dynamic_cruise_control_status_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t counter_403;

    /**
     * Speed target - unit depends on locale
     *
     * Range: 2..257 (0..255 kph/mph)
     * Scale: 1
     * Offset: -2
     */
    uint8_t cruise_control_setpoint_speed;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cruise_active;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cruise_speed_change_request;
};

/**
 * Signals in message SteeringWheelAngle_DSC.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_steering_wheel_angle_dsc_t {
    /**
     * Range: -14008..14008 (-600..600 deg)
     * Scale: 0.0428316886
     * Offset: 0
     */
    int16_t steering_position;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t counter_201;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t steering_position_complement_low;
};

/**
 * Signals in message WheelSpeeds.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_wheel_speeds_t {
    /**
     * Range: 0..3961 (0..255 kph)
     * Scale: 0.0643699
     * Offset: 0
     */
    int16_t wheel1;

    /**
     * Range: 0..3961 (0..255 kph)
     * Scale: 0.0643699
     * Offset: 0
     */
    int16_t wheel2;

    /**
     * Range: 0..3961 (0..255 kph)
     * Scale: 0.0643699
     * Offset: 0
     */
    int16_t wheel3;

    /**
     * Range: 0..3961 (0..255 kph)
     * Scale: 0.0643699
     * Offset: 0
     */
    int16_t wheel4;
};

/**
 * Signals in message WheelToleranceAdjustment.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_wheel_tolerance_adjustment_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message WiperSwitch.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_wiper_switch_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t auto_wipers_on;
};

/**
 * Signals in message TerminalStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_terminal_status_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ignition_off;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_on;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t counter_304;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t checksum_304;
};

/**
 * Signals in message Torque2.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_torque2_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message TorqueTransmisionRequest.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_torque_transmision_request_t {
    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t checksum_184;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t counter_184;
};

/**
 * Signals in message SteeringWheelAngle.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_steering_wheel_angle_t {
    /**
     * Range: -14008..14008 (-600..600 degree)
     * Scale: 0.0428316886
     * Offset: 0
     */
    int16_t steering_position;

    /**
     * Range: 0..5954 (0..255 degree/s)
     * Scale: 0.0428316886
     * Offset: 0
     */
    int16_t steering_speed;
};

/**
 * Signals in message WheelTorqueDriveTrain1.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_wheel_torque_drive_train1_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message DynamicCruiseControlTorqueDemand.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_dynamic_cruise_control_torque_demand_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message TransmissionData.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_transmission_data_t {
    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t checksum_186;

    /**
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t counter_186;
};

/**
 * Signals in message RequestedWheelTorqueDriveTrain.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_requested_wheel_torque_drive_train_t {
    /**
     * Range: 0..19 (0..19 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t checksum_191;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t counter_191;

    /**
     * Range: -2748..1348 (-1024..1023.96875 -)
     * Scale: 0.5
     * Offset: 350
     */
    int16_t torque_req;
};

/**
 * Signals in message StatusDSC_KCAN.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_dsc_kcan_t {
    /**
     * 0x4 enabling, 0xA enabled. TBD
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dsc_full_off;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dtc_on;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t counter_414;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_states;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    int8_t brake_pressure;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t checksum_414;
};

/**
 * Signals in message Speed.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_speed_t {
    /**
     * Range: 0..2476 (0..255 kph)
     * Scale: 0.103
     * Offset: 0
     */
    int16_t vehicle_speed;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t moving_forward;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t moving_reverse;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t acc_y;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t acc_x;

    /**
     * Lateral Acceleration
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t yaw_rate;

    /**
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t counter_416;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t checksum_416;
};

/**
 * Signals in message TransimissionData2.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_transimission_data2_t {
    /**
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t counter_418;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t manual_mode;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t checksum_418;
};

/**
 * Signals in message WheelPressure_KCAN.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_wheel_pressure_kcan_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message AccelerationData.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_acceleration_data_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message GearSelectorSwitch.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_gear_selector_switch_t {
    /**
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t counter_408;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t m3_shifter_position;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t m3_shifter_position_xor1111;

    /**
     * 0001 = N|R, 0010 = R, 0011 = N|D, 0100 = D, 0101 = -1, 0110 = +1, 0111 = ManualMode, 1000 = inBetween,
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t shifter_position;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t shifter_position_xor1111;

    /**
     * can not be 0x03. Always 0 in 135i.
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t param1;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t param1_xor11;

    /**
     * 0x1 = pressed
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t park_button_first;

    /**
     * Redundant buton. 0x1 = pressed;
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t park_button_second;

    /**
     * 0x1 = pressed;
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t side_button;

    /**
     * Complement value
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t side_button_xor11;

    /**
     * Always 0 in 135i.
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t param5;

    /**
     * 0x1 = pressed;
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sport_button_pressed;

    /**
     * M3 POWER (?)
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t m3_button;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t always11;
};

/**
 * Signals in message DistanceRoute.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_distance_route_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message InstrumentClusterStatus_KOMBI.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_instrument_cluster_status_kombi_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message EngineData.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_engine_data_t {
    /**
     * Range: 0..600 (-40..260 °C)
     * Scale: 0.5
     * Offset: -40
     */
    uint16_t engine_temperature;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t counter_464;
};

/**
 * Signals in message FuelLevel.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_fuel_level_t {
    /**
     * Fuel level percentage (0-100%).
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fuel_percentage;
};

/**
 * Signals in message TransmissionData3.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_transmission_data3_t {
    /**
     * Range: 0..19 (0..19 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t checksum_946;

    /**
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t counter_945;
};

/**
 * Signals in message SteeringWheelAngle_slow.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_steering_wheel_angle_slow_t {
    /**
     * Range: -14008..14008 (-600..600 degree)
     * Scale: 0.0428316886
     * Offset: 0
     */
    int16_t steering_position;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t counter_200;

    /**
     * Range: -1530059..1530059 (-65535..65535 degree/s)
     * Scale: 0.0428316886
     * Offset: 0
     */
    int16_t steering_speed;
};

/**
 * Signals in message TransmissionDataDisplay.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_transmission_data_display_t {
    /**
     * Range: 0..8 (0..8 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t shift_lever_position;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t shift_lever_position_xor;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gear_related_tbd;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sport_button_state;

    /**
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t counter_466;

    /**
     * On the dashboard, there are displayed:  D1...D7 in Normal. S1...S6 in Sport.  M1..M7 in Manual
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t shift_lever_mode;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t x_ff;
};

/**
 * Signals in message HeatFlow_LoadTorqueClimate.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_heat_flow_load_torque_climate_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message NetworkManagment1.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_network_managment1_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message NetworkManagment2.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_network_managment2_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message NetworkManagment3.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_network_managment3_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message NetworkManagment4.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_network_managment4_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message NetworkManagment5.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_network_managment5_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message GWS_ShiftLeverHeartbeat.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_gws_shift_lever_heartbeat_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ign_off;
};

/**
 * Signals in message HeatFlowEngine.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_heat_flow_engine_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message AmbientTemperature_RelativeTime.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_ambient_temperature_relative_time_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message ElectricFuelPumpStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_electric_fuel_pump_status_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message EngineOBD_data.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_engine_obd_data_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message ServicesDKG.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_services_dkg_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message CrashDisconnectControl.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_crash_disconnect_control_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message TurnSignals.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_turn_signals_t {
    /**
     * Spikes down if blinker cleared with timeout or turn. Stays off if blinker cleared with stalk
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t hold_activated;

    /**
     * Indicates right blinker or when steering returning right clears left blinker
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t right_turn;

    /**
     * Indicates left blinker or when steering returning left clears right blinker
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t left_turn;

    /**
     * Turn signal off
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t turn_signal_idle;

    /**
     * Turn signal on or transitioning
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t turn_signal_active;
};

/**
 * Signals in message Dimming.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_dimming_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message LampStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_lamp_status_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message RainSensorWiperSpeed.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_rain_sensor_wiper_speed_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message ClimateFrontStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_climate_front_status_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message LCD_lighting.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_lcd_lighting_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message LightControl.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_light_control_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Time_Date.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_time_date_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message OccupancySeatBeltContact.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_occupancy_seat_belt_contact_t {
    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t new_signal_2;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t new_signal_1;
};

/**
 * Signals in message TrunkStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_trunk_status_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message TirePressureStatus.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_tire_pressure_status_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Range_Mileage.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_range_mileage_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message StatusFuelControl.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_fuel_control_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message EngineOilLevel.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_engine_oil_level_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message RunOnTimeTerminal30.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_run_on_time_terminal30_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message PowerManagmentConsumptionControl.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_power_managment_consumption_control_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message PowerBatteryVoltage.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_power_battery_voltage_t {
    /**
     * Range: 0..65535000 (0..65535 -)
     * Scale: 0.001
     * Offset: 0
     */
    uint32_t battery_voltage;
};

/**
 * Signals in message PowerRunningTime.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_power_running_time_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message ServicesKGM.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_services_kgm_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message ServicesDME.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_services_dme_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message ServicesDSC.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_services_dsc_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message ServicesKOMBI.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_services_kombi_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message ServicesKBM.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_services_kbm_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Accelerometer1.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_accelerometer1_t {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t yaw_rate;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t unknown;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t pitch_rate;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t counter_209;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc8_209;
};

/**
 * Signals in message WheelTorqueDrivetrain2.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_wheel_torque_drivetrain2_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message SYNC.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_sync_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t state1;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t state2;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t counter_128;
};

/**
 * Signals in message Unknown140.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_unknown140_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t state;
};

/**
 * Signals in message Unknown_d4.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_unknown_d4_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t state1;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t counter_212;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t checksum_212;
};

/**
 * Signals in message Accelerometer2.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_accelerometer2_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t yaw_rate;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t crc8_205;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    int16_t lateral_acceleration;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t counter_205;
};

/**
 * Signals in message OperationPushButtonDTC.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_push_button_dtc_t {
    /**
     * Traction control off. Message transmitted when pressed. Few presses may be required followed by off.
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dtc_pressed;

    /**
     * All ones
     *
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t set_me_0x3_fff;
};

/**
 * Signals in message Unknown_629.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_unknown_629_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Synchronization_SC_VDA.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_synchronization_sc_vda_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Delay_request_ACC.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_delay_request_acc_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Torque_request_steering.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_torque_request_steering_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Torque_request_EGS.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_torque_request_egs_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Torque_request_ACC.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_torque_request_acc_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Target_torque_request.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_target_torque_request_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_target_torque_conversion.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_target_torque_conversion_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Alive_Counter.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_alive_counter_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Alive_Central_Gateway.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_alive_central_gateway_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Alive_counter_telephone.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_alive_counter_telephone_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Request_wheel_torque_brake.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_request_wheel_torque_brake_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Alive_Counter_Security.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_alive_counter_security_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message CLU1_VDA.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_clu1_vda_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Wheel_torque_brake.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_wheel_torque_brake_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_central_locking_BFT.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_central_locking_bft_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message CLU2_VDA.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_clu2_vda_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_central_locking_BFTH.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_central_locking_bfth_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_central_locking_FAT.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_central_locking_fat_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Central_locking_status_FATH.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_central_locking_status_fath_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_central_locking_HK.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_central_locking_hk_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message CLU3_VDA.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_clu3_vda_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message lateral_dynamics_ARS_VDM.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_lateral_dynamics_ars_vdm_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Vertical_dynamics_VDM_ARS.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_vertical_dynamics_vdm_ars_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Control_window_lifter_FAT.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_control_window_lifter_fat_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Control_window_lifter_BFT.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_control_window_lifter_bft_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Control_window_lifter_FATH.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_control_window_lifter_fath_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Control_window_lifter_BFTH.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_control_window_lifter_bfth_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Voltage_level_sensors.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_voltage_level_sensors_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Exchange_AFS_DSC.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_exchange_afs_dsc_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Control_interventions_DSC_AFS.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_control_interventions_dsc_afs_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_partial_setpoints_AFS_DSC_2.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_partial_setpoints_afs_dsc_2_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Sensor_data_ROSE.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_sensor_data_rose_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message input_data_ROSE.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_input_data_rose_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Request_1_ACC.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_request_1_acc_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Request_2_ACC.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_request_2_acc_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Object_data_ACC.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_object_data_acc_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_ACC.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_acc_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Requirement_angle_FFP.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_requirement_angle_ffp_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message CLU_Status_VDA.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_clu_status_vda_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Acknowledgment_request_Kombination.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_acknowledgment_request_kombination_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Display_motor_data.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_display_motor_data_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message display_ACC.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_display_acc_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_push_button_MSA.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_push_button_msa_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Raw_data_longitudinal_acceleration.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_raw_data_longitudinal_acceleration_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message actuation_request_EMF.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_actuation_request_emf_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Effect_ErgoCommander.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_effect_ergo_commander_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_ARS_module.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_ars_module_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_ErgoCommander.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_ergo_commander_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Distance_message_PDC.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_distance_message_pdc_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Distance_message_2_PDC.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_distance_message_2_pdc_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Acoustic_message_PDC.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_acoustic_message_pdc_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_air_conditioning_air_distribution_FA.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_air_conditioning_air_distribution_fa_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_pushbutton_MDrive.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_pushbutton_m_drive_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Climate_control_remote_control.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_climate_control_remote_control_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_stratification_seat_heating.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_stratification_seat_heating_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Air_conditioning_controls_rear.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_air_conditioning_controls_rear_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_air_conditioning_air_distribution_BF.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_air_conditioning_air_distribution_bf_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_air_conditioning_front.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_air_conditioning_front_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_pushbutton_interior_lighting.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_pushbutton_interior_lighting_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_seat_heating_seat_climate_FA.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_seat_heating_seat_climate_fa_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_seat_heating_seat_climate_BF.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_seat_heating_seat_climate_bf_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Steering_column_adjustment_control.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_steering_column_adjustment_control_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_active_seat_FA.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_active_seat_fa_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_active_seat_BF.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_active_seat_bf_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Steering_column_switch_operation.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_steering_column_switch_operation_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_seat_memory_FA.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_seat_memory_fa_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_SHD_MDS.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_shd_mds_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_EPS.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_eps_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_AFS.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_afs_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_request_EMF_KCAN.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_request_emf_kcan_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Crash.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_crash_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_EMF_KCAN.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_emf_kcan_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Acoustic_request_Kombi.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_acoustic_request_kombi_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Control_Display_Shiftlights.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_control_display_shiftlights_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Memory_adjustment.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_memory_adjustment_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Steering_column_control.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_steering_column_control_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Position_steering_column.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_position_steering_column_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_HUD.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_hud_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_HUD.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_hud_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Height_levels_air_spring.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_height_levels_air_spring_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_NightVision.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_night_vision_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_NightVision.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_night_vision_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_push_button_NSW.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_push_button_nsw_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_special_function.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_special_function_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_BFS.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_bfs_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_push_button_NSL.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_push_button_nsl_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_BFSH.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_bfsh_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_FAS.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_fas_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_FASH.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_fash_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_radio_key.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_radio_key_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_climate_front_extended.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_climate_front_extended_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Request_display_climate.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_request_display_climate_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_Klima_Fond.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_klima_fond_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_air_conditioning_front_control_unit.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_air_conditioning_front_control_unit_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_rear_view_camera.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_rear_view_camera_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Control_rear_view_camera.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_control_rear_view_camera_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_PDC.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_pdc_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_door_sensors.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_door_sensors_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Wiper_status.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_wiper_status_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Challenge_Passive_Access.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_challenge_passive_access_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_Transmission_Passive_Access.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_transmission_passive_access_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_of_climate_additional_programs.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_of_climate_additional_programs_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_blinds_MK.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_blinds_mk_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Control_FH_SHD_central_comfort.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_control_fh_shd_central_comfort_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_Shiftlights.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_shiftlights_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_convertible_top_manual_convertible.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_convertible_top_manual_convertible_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_convertible_top_convertible.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_convertible_top_convertible_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_central_locking_convertible_top.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_central_locking_convertible_top_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Control_security_vehicle_2.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_control_security_vehicle_2_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Control_remote_start_safety_vehicle.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_control_remote_start_safety_vehicle_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Electrochromic_control.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_electrochromic_control_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Pushbutton_vertical_dynamics.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_pushbutton_vertical_dynamics_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_pushbutton_sport.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_pushbutton_sport_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Control_response_hydrogen_vehicle.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_control_response_hydrogen_vehicle_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Control_high_beam_assistant.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_control_high_beam_assistant_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Central_locking_control_for_security_vehicle.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_central_locking_control_for_security_vehicle_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Remote_control_FondCommander.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_remote_control_fond_commander_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Central_locking_control.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_central_locking_control_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_of_climate_stand_functions.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_of_climate_stand_functions_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_personalization.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_personalization_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message DWA_Alarm.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_dwa_alarm_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Control_horn_DWA.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_control_horn_dwa_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_onboard_computer.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_onboard_computer_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_RSE.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_rse_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Stopwatch.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_stopwatch_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Request_switching_display.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_request_switching_display_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Switch_status_display.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_switch_status_display_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Water_valve_control.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_water_valve_control_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Temperatur_Ist_Fond.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_temperatur_ist_fond_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Display_Kombination_extended.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_display_kombination_extended_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Outside_temperature.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_outside_temperature_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Control_monitor_rear.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_control_monitor_rear_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Control_monitor.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_control_monitor_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_of_auxiliary_water_pump.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_of_auxiliary_water_pump_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_Sensor_AUC.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_sensor_auc_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_fitting_window_V.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_fitting_window_v_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_pressure_refrigeration_circuit.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_pressure_refrigeration_circuit_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_stratification_rear.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_stratification_rear_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_heating_rear_window.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_heating_rear_window_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_valve_air_conditioning_compressor.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_valve_air_conditioning_compressor_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_tailgate_lift.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_tailgate_lift_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Switch_control_display.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_switch_control_display_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_setting_video_night_vision.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_setting_video_night_vision_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_setting_video_rear_view_camera.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_setting_video_rear_view_camera_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_trailer.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_trailer_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_of_air_distribution_FA.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_of_air_distribution_fa_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_air_distribution_BF.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_air_distribution_bf_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_climate_additional_programs.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_climate_additional_programs_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_air_condition_functions.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_air_condition_functions_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_driver_detection.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_driver_detection_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Display_switching_instruction.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_display_switching_instruction_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Air_conditioning_control_SH_ZH_auxiliary_water_pump.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_air_conditioning_control_sh_zh_auxiliary_water_pump_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Units.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_units_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_RSE.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_rse_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_Gang.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_gang_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_button_convertible_top.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_button_convertible_top_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Vehicle_tilt.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_vehicle_tilt_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_button_flap_convertible_top.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_button_flap_convertible_top_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_MSA.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_msa_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Refill_quantity.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_refill_quantity_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Service_Call_Teleservice.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_service_call_teleservice_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_Service_Call_Teleservice.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_service_call_teleservice_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_driving_light.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_driving_light_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Vehicle_mode.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_vehicle_mode_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_button_parking_aids.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_button_parking_aids_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_antennas_Passive_Access.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_antennas_passive_access_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_push_button_RDC.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_push_button_rdc_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_button_HDC.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_button_hdc_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_of_tailgate_interior_button.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_of_tailgate_interior_button_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_tire_pressure.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_tire_pressure_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_button_camera_BF.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_button_camera_bf_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Damper_current.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_damper_current_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_damper_program.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_damper_program_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Relativzeit.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_relativzeit_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Display_HDC.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_display_hdc_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_climate_internal_control_info.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_climate_internal_control_info_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Programming_of_step_cruise_control.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_programming_of_step_cruise_control_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Driver_display_speed_range.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_driver_display_speed_range_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Display_check_control_message_role.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_display_check_control_message_role_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Control_display_check_control_message.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_control_display_check_control_message_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_display_climate.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_display_climate_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_Monitor_Front.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_monitor_front_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_Monitor_Fond_1.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_monitor_fond_1_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_Monitor_Fond_2.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_monitor_fond_2_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Raw_data_level_tank.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_raw_data_level_tank_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Seat_back_lock_status_FA.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_seat_back_lock_status_fa_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_seat_back_lock_BF.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_seat_back_lock_bf_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_contact_handbrake.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_contact_handbrake_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Appointment_Condition_Based_Service.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_appointment_condition_based_service_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_onboard_computer.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_onboard_computer_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Onboard_computer_data_trip_data.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_onboard_computer_data_trip_data_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Data_onboard_computer_start_of_journey.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_data_onboard_computer_start_of_journey_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Data_onboard_computer_average_values.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_data_onboard_computer_average_values_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Data_onboard_computer_arrival.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_data_onboard_computer_arrival_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_terminal_request.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_terminal_request_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Display_Kombination_external_display.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_display_kombination_external_display_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Control_display_of_demand_oriented_service.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_control_display_of_demand_oriented_service_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Setting_the_driving_dynamics_switch.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_setting_the_driving_dynamics_switch_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_wear_lamella.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_wear_lamella_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_DKG.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_dkg_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Temperatur_Bremse.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_temperatur_bremse_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Range_of_diesel_exhaust_gas_additive.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_range_of_diesel_exhaust_gas_additive_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message chassis_number.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_chassis_number_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Electronic_engine_oil_dipstick_M.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_electronic_engine_oil_dipstick_m_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Motor_data_2.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_motor_data_2_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Vehicle_type.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_vehicle_type_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_battery.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_battery_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Start_speed.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_start_speed_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_System_AFS.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_system_afs_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message RDA_request_data_storage.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_rda_request_data_storage_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Coding_power_management.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_coding_power_management_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_chassis.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_chassis_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_MDrive.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_m_drive_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_time_date.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_time_date_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Vehicle_state.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_vehicle_state_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Request_Remote_Services.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_request_remote_services_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_motor_control_CKM.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_motor_control_ckm_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_Shiftlights_CKM.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_shiftlights_ckm_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_gear_reverse.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_gear_reverse_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_water_valve.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_water_valve_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Position_window_lifter_FAT.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_position_window_lifter_fat_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Position_window_lifter_FATH.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_position_window_lifter_fath_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Position_window_regulator_BFT.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_position_window_regulator_bft_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Position_window_regulator_BFTH.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_position_window_regulator_bfth_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Position_SHD.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_position_shd_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Position_window_lifter_security_vehicle.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_position_window_lifter_security_vehicle_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_consumer_shutdown.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_consumer_shutdown_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Position_window_rear_window.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_position_window_rear_window_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Configuration_FAS.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_configuration_fas_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Configuration_BFS.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_configuration_bfs_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_EDCK_CKM.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_edck_ckm_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Access_radio.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_access_radio_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Operation_push_button_radio.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_operation_push_button_radio_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Radio_audio_control_interface_display.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_radio_audio_control_interface_display_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Acknowledgment_access_radio_audio_control_interface.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_acknowledgment_access_radio_audio_control_interface_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_solar_sensor.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_solar_sensor_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Configuration_of_central_locking_CKM.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_configuration_of_central_locking_ckm_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_central_locking_CKM.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_central_locking_ckm_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Configuration_DWA_CKM.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_configuration_dwa_ckm_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_DWA_CKM.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_dwa_ckm_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Configuration_RLS_CKM.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_configuration_rls_ckm_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_RLS_CKM.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_rls_ckm_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Configuration_of_memory_positions_CKM.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_configuration_of_memory_positions_ckm_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_memory_positions_CKM.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_memory_positions_ckm_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Configuration_light_CKM.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_configuration_light_ckm_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_light_CKM.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_light_ckm_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Configuration_Climate_CKM.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_configuration_climate_ckm_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_Klima_CKM.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_klima_ckm_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Configuration_of_tailgate_CKM.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_configuration_of_tailgate_ckm_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Status_tailgate_CKM.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_status_tailgate_ckm_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message Configuration_rear_view_camera_CKM.
 *
 * All signal values are as on the CAN bus.
 */
struct bmw_e9x_e8x_configuration_rear_view_camera_ckm_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Pack message AccPedal.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_acc_pedal_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_acc_pedal_t *src_p,
    size_t size);

/**
 * Unpack message AccPedal.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_acc_pedal_unpack(
    struct bmw_e9x_e8x_acc_pedal_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AccPedal.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_acc_pedal_init(struct bmw_e9x_e8x_acc_pedal_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t bmw_e9x_e8x_acc_pedal_checksum_170_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_acc_pedal_checksum_170_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_acc_pedal_checksum_170_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_acc_pedal_counter_170_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_acc_pedal_counter_170_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_acc_pedal_counter_170_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bmw_e9x_e8x_acc_pedal_accelerator_pedal_percentage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_acc_pedal_accelerator_pedal_percentage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_acc_pedal_accelerator_pedal_percentage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bmw_e9x_e8x_acc_pedal_engine_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_acc_pedal_engine_speed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_acc_pedal_engine_speed_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_acc_pedal_cruise_pedal_inactive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_acc_pedal_cruise_pedal_inactive_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_acc_pedal_cruise_pedal_inactive_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_acc_pedal_cruise_pedal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_acc_pedal_cruise_pedal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_acc_pedal_cruise_pedal_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_acc_pedal_kick_down_pressed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_acc_pedal_kick_down_pressed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_acc_pedal_kick_down_pressed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_acc_pedal_accelerator_pedal_pressed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_acc_pedal_accelerator_pedal_pressed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_acc_pedal_accelerator_pedal_pressed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_acc_pedal_throttlel_pressed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_acc_pedal_throttlel_pressed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_acc_pedal_throttlel_pressed_is_in_range(uint8_t value);

/**
 * Pack message CruiseControl.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_cruise_control_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_cruise_control_t *src_p,
    size_t size);

/**
 * Unpack message CruiseControl.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_cruise_control_unpack(
    struct bmw_e9x_e8x_cruise_control_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CruiseControl.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_cruise_control_init(struct bmw_e9x_e8x_cruise_control_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_cruise_control_checksum_404_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_cruise_control_checksum_404_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_cruise_control_checksum_404_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_cruise_control_requests_0x_f_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_cruise_control_requests_0x_f_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_cruise_control_requests_0x_f_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_cruise_control_counter_404_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_cruise_control_counter_404_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_cruise_control_counter_404_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_cruise_control_cancel_request_up_stalk_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_cruise_control_cancel_request_up_stalk_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_cruise_control_cancel_request_up_stalk_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_cruise_control_resume_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_cruise_control_resume_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_cruise_control_resume_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_cruise_control_cancel_request_up_or_down_stalk_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_cruise_control_cancel_request_up_or_down_stalk_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_cruise_control_cancel_request_up_or_down_stalk_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_cruise_control_minus5mph_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_cruise_control_minus5mph_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_cruise_control_minus5mph_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_cruise_control_minus1mph_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_cruise_control_minus1mph_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_cruise_control_minus1mph_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_cruise_control_plus5mph_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_cruise_control_plus5mph_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_cruise_control_plus5mph_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_cruise_control_plus1mph_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_cruise_control_plus1mph_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_cruise_control_plus1mph_request_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_cruise_control_set_me_0x_fc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_cruise_control_set_me_0x_fc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_cruise_control_set_me_0x_fc_is_in_range(uint8_t value);

/**
 * Pack message CruiseControlStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_cruise_control_status_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_cruise_control_status_t *src_p,
    size_t size);

/**
 * Unpack message CruiseControlStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_cruise_control_status_unpack(
    struct bmw_e9x_e8x_cruise_control_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CruiseControlStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_cruise_control_status_init(struct bmw_e9x_e8x_cruise_control_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_cruise_control_status_cruise_control_setpoint_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_cruise_control_status_cruise_control_setpoint_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_cruise_control_status_cruise_control_setpoint_speed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_cruise_control_status_cruise_coontrol_active_flag_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_cruise_control_status_cruise_coontrol_active_flag_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_cruise_control_status_cruise_coontrol_active_flag_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_cruise_control_status_cruise_control_inactive_flag_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_cruise_control_status_cruise_control_inactive_flag_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_cruise_control_status_cruise_control_inactive_flag_is_in_range(uint8_t value);

/**
 * Pack message EngineAndBrake.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_engine_and_brake_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_engine_and_brake_t *src_p,
    size_t size);

/**
 * Unpack message EngineAndBrake.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_engine_and_brake_unpack(
    struct bmw_e9x_e8x_engine_and_brake_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from EngineAndBrake.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_engine_and_brake_init(struct bmw_e9x_e8x_engine_and_brake_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bmw_e9x_e8x_engine_and_brake_engine_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_engine_and_brake_engine_torque_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_engine_and_brake_engine_torque_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bmw_e9x_e8x_engine_and_brake_engine_torque_wo_interv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_engine_and_brake_engine_torque_wo_interv_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_engine_and_brake_engine_torque_wo_interv_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_engine_and_brake_brake_active2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_engine_and_brake_brake_active2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_engine_and_brake_brake_active2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_engine_and_brake_brake_pressed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_engine_and_brake_brake_pressed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_engine_and_brake_brake_pressed_is_in_range(uint8_t value);

/**
 * Pack message SteeringButtons.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_steering_buttons_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_steering_buttons_t *src_p,
    size_t size);

/**
 * Unpack message SteeringButtons.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_steering_buttons_unpack(
    struct bmw_e9x_e8x_steering_buttons_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SteeringButtons.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_steering_buttons_init(struct bmw_e9x_e8x_steering_buttons_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_steering_buttons_next_up_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_steering_buttons_next_up_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_steering_buttons_next_up_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_steering_buttons_previous_down_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_steering_buttons_previous_down_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_steering_buttons_previous_down_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_steering_buttons_volume_up_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_steering_buttons_volume_up_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_steering_buttons_volume_up_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_steering_buttons_volume_down_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_steering_buttons_volume_down_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_steering_buttons_volume_down_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_steering_buttons_telephone_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_steering_buttons_telephone_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_steering_buttons_telephone_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_steering_buttons_voice_control_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_steering_buttons_voice_control_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_steering_buttons_voice_control_is_in_range(uint8_t value);

/**
 * Pack message DynamicCruiseControlStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_dynamic_cruise_control_status_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_dynamic_cruise_control_status_t *src_p,
    size_t size);

/**
 * Unpack message DynamicCruiseControlStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_dynamic_cruise_control_status_unpack(
    struct bmw_e9x_e8x_dynamic_cruise_control_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from DynamicCruiseControlStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_dynamic_cruise_control_status_init(struct bmw_e9x_e8x_dynamic_cruise_control_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_dynamic_cruise_control_status_counter_403_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_dynamic_cruise_control_status_counter_403_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_dynamic_cruise_control_status_counter_403_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_dynamic_cruise_control_status_cruise_control_setpoint_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_dynamic_cruise_control_status_cruise_control_setpoint_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_dynamic_cruise_control_status_cruise_control_setpoint_speed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_dynamic_cruise_control_status_cruise_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_dynamic_cruise_control_status_cruise_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_dynamic_cruise_control_status_cruise_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_dynamic_cruise_control_status_cruise_speed_change_request_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_dynamic_cruise_control_status_cruise_speed_change_request_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_dynamic_cruise_control_status_cruise_speed_change_request_is_in_range(uint8_t value);

/**
 * Pack message SteeringWheelAngle_DSC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_steering_wheel_angle_dsc_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_steering_wheel_angle_dsc_t *src_p,
    size_t size);

/**
 * Unpack message SteeringWheelAngle_DSC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_steering_wheel_angle_dsc_unpack(
    struct bmw_e9x_e8x_steering_wheel_angle_dsc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SteeringWheelAngle_DSC.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_steering_wheel_angle_dsc_init(struct bmw_e9x_e8x_steering_wheel_angle_dsc_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bmw_e9x_e8x_steering_wheel_angle_dsc_steering_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_steering_wheel_angle_dsc_steering_position_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_steering_wheel_angle_dsc_steering_position_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_steering_wheel_angle_dsc_counter_201_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_steering_wheel_angle_dsc_counter_201_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_steering_wheel_angle_dsc_counter_201_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bmw_e9x_e8x_steering_wheel_angle_dsc_steering_position_complement_low_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_steering_wheel_angle_dsc_steering_position_complement_low_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_steering_wheel_angle_dsc_steering_position_complement_low_is_in_range(int16_t value);

/**
 * Pack message WheelSpeeds.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_wheel_speeds_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_wheel_speeds_t *src_p,
    size_t size);

/**
 * Unpack message WheelSpeeds.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_wheel_speeds_unpack(
    struct bmw_e9x_e8x_wheel_speeds_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WheelSpeeds.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_wheel_speeds_init(struct bmw_e9x_e8x_wheel_speeds_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bmw_e9x_e8x_wheel_speeds_wheel1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_wheel_speeds_wheel1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_wheel_speeds_wheel1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bmw_e9x_e8x_wheel_speeds_wheel2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_wheel_speeds_wheel2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_wheel_speeds_wheel2_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bmw_e9x_e8x_wheel_speeds_wheel3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_wheel_speeds_wheel3_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_wheel_speeds_wheel3_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bmw_e9x_e8x_wheel_speeds_wheel4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_wheel_speeds_wheel4_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_wheel_speeds_wheel4_is_in_range(int16_t value);

/**
 * Pack message WheelToleranceAdjustment.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_wheel_tolerance_adjustment_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_wheel_tolerance_adjustment_t *src_p,
    size_t size);

/**
 * Unpack message WheelToleranceAdjustment.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_wheel_tolerance_adjustment_unpack(
    struct bmw_e9x_e8x_wheel_tolerance_adjustment_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WheelToleranceAdjustment.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_wheel_tolerance_adjustment_init(struct bmw_e9x_e8x_wheel_tolerance_adjustment_t *msg_p);

/**
 * Pack message WiperSwitch.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_wiper_switch_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_wiper_switch_t *src_p,
    size_t size);

/**
 * Unpack message WiperSwitch.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_wiper_switch_unpack(
    struct bmw_e9x_e8x_wiper_switch_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WiperSwitch.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_wiper_switch_init(struct bmw_e9x_e8x_wiper_switch_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_wiper_switch_auto_wipers_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_wiper_switch_auto_wipers_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_wiper_switch_auto_wipers_on_is_in_range(uint8_t value);

/**
 * Pack message TerminalStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_terminal_status_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_terminal_status_t *src_p,
    size_t size);

/**
 * Unpack message TerminalStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_terminal_status_unpack(
    struct bmw_e9x_e8x_terminal_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TerminalStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_terminal_status_init(struct bmw_e9x_e8x_terminal_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_terminal_status_ignition_off_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_terminal_status_ignition_off_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_terminal_status_ignition_off_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_terminal_status_acc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_terminal_status_acc_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_terminal_status_acc_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_terminal_status_counter_304_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_terminal_status_counter_304_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_terminal_status_counter_304_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_terminal_status_checksum_304_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_terminal_status_checksum_304_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_terminal_status_checksum_304_is_in_range(uint8_t value);

/**
 * Pack message Torque2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_torque2_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_torque2_t *src_p,
    size_t size);

/**
 * Unpack message Torque2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_torque2_unpack(
    struct bmw_e9x_e8x_torque2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Torque2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_torque2_init(struct bmw_e9x_e8x_torque2_t *msg_p);

/**
 * Pack message TorqueTransmisionRequest.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_torque_transmision_request_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_torque_transmision_request_t *src_p,
    size_t size);

/**
 * Unpack message TorqueTransmisionRequest.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_torque_transmision_request_unpack(
    struct bmw_e9x_e8x_torque_transmision_request_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TorqueTransmisionRequest.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_torque_transmision_request_init(struct bmw_e9x_e8x_torque_transmision_request_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_torque_transmision_request_checksum_184_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_torque_transmision_request_checksum_184_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_torque_transmision_request_checksum_184_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_torque_transmision_request_counter_184_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_torque_transmision_request_counter_184_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_torque_transmision_request_counter_184_is_in_range(uint8_t value);

/**
 * Pack message SteeringWheelAngle.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_steering_wheel_angle_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_steering_wheel_angle_t *src_p,
    size_t size);

/**
 * Unpack message SteeringWheelAngle.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_steering_wheel_angle_unpack(
    struct bmw_e9x_e8x_steering_wheel_angle_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SteeringWheelAngle.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_steering_wheel_angle_init(struct bmw_e9x_e8x_steering_wheel_angle_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bmw_e9x_e8x_steering_wheel_angle_steering_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_steering_wheel_angle_steering_position_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_steering_wheel_angle_steering_position_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bmw_e9x_e8x_steering_wheel_angle_steering_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_steering_wheel_angle_steering_speed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_steering_wheel_angle_steering_speed_is_in_range(int16_t value);

/**
 * Pack message WheelTorqueDriveTrain1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_wheel_torque_drive_train1_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_wheel_torque_drive_train1_t *src_p,
    size_t size);

/**
 * Unpack message WheelTorqueDriveTrain1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_wheel_torque_drive_train1_unpack(
    struct bmw_e9x_e8x_wheel_torque_drive_train1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WheelTorqueDriveTrain1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_wheel_torque_drive_train1_init(struct bmw_e9x_e8x_wheel_torque_drive_train1_t *msg_p);

/**
 * Pack message DynamicCruiseControlTorqueDemand.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_dynamic_cruise_control_torque_demand_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_dynamic_cruise_control_torque_demand_t *src_p,
    size_t size);

/**
 * Unpack message DynamicCruiseControlTorqueDemand.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_dynamic_cruise_control_torque_demand_unpack(
    struct bmw_e9x_e8x_dynamic_cruise_control_torque_demand_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from DynamicCruiseControlTorqueDemand.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_dynamic_cruise_control_torque_demand_init(struct bmw_e9x_e8x_dynamic_cruise_control_torque_demand_t *msg_p);

/**
 * Pack message TransmissionData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_transmission_data_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_transmission_data_t *src_p,
    size_t size);

/**
 * Unpack message TransmissionData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_transmission_data_unpack(
    struct bmw_e9x_e8x_transmission_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TransmissionData.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_transmission_data_init(struct bmw_e9x_e8x_transmission_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_transmission_data_checksum_186_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_transmission_data_checksum_186_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_transmission_data_checksum_186_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_transmission_data_counter_186_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_transmission_data_counter_186_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_transmission_data_counter_186_is_in_range(uint8_t value);

/**
 * Pack message RequestedWheelTorqueDriveTrain.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_requested_wheel_torque_drive_train_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_requested_wheel_torque_drive_train_t *src_p,
    size_t size);

/**
 * Unpack message RequestedWheelTorqueDriveTrain.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_requested_wheel_torque_drive_train_unpack(
    struct bmw_e9x_e8x_requested_wheel_torque_drive_train_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RequestedWheelTorqueDriveTrain.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_requested_wheel_torque_drive_train_init(struct bmw_e9x_e8x_requested_wheel_torque_drive_train_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_requested_wheel_torque_drive_train_checksum_191_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_requested_wheel_torque_drive_train_checksum_191_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_requested_wheel_torque_drive_train_checksum_191_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t bmw_e9x_e8x_requested_wheel_torque_drive_train_counter_191_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_requested_wheel_torque_drive_train_counter_191_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_requested_wheel_torque_drive_train_counter_191_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bmw_e9x_e8x_requested_wheel_torque_drive_train_torque_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_requested_wheel_torque_drive_train_torque_req_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_requested_wheel_torque_drive_train_torque_req_is_in_range(int16_t value);

/**
 * Pack message StatusDSC_KCAN.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_dsc_kcan_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_dsc_kcan_t *src_p,
    size_t size);

/**
 * Unpack message StatusDSC_KCAN.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_dsc_kcan_unpack(
    struct bmw_e9x_e8x_status_dsc_kcan_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from StatusDSC_KCAN.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_dsc_kcan_init(struct bmw_e9x_e8x_status_dsc_kcan_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_status_dsc_kcan_dsc_full_off_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_status_dsc_kcan_dsc_full_off_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_status_dsc_kcan_dsc_full_off_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_status_dsc_kcan_dtc_on_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_status_dsc_kcan_dtc_on_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_status_dsc_kcan_dtc_on_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_status_dsc_kcan_counter_414_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_status_dsc_kcan_counter_414_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_status_dsc_kcan_counter_414_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_status_dsc_kcan_brake_states_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_status_dsc_kcan_brake_states_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_status_dsc_kcan_brake_states_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t bmw_e9x_e8x_status_dsc_kcan_brake_pressure_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_status_dsc_kcan_brake_pressure_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_status_dsc_kcan_brake_pressure_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_status_dsc_kcan_checksum_414_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_status_dsc_kcan_checksum_414_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_status_dsc_kcan_checksum_414_is_in_range(uint8_t value);

/**
 * Pack message Speed.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_speed_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_speed_t *src_p,
    size_t size);

/**
 * Unpack message Speed.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_speed_unpack(
    struct bmw_e9x_e8x_speed_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Speed.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_speed_init(struct bmw_e9x_e8x_speed_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bmw_e9x_e8x_speed_vehicle_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_speed_vehicle_speed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_speed_vehicle_speed_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_speed_moving_forward_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_speed_moving_forward_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_speed_moving_forward_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_speed_moving_reverse_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_speed_moving_reverse_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_speed_moving_reverse_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bmw_e9x_e8x_speed_acc_y_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_speed_acc_y_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_speed_acc_y_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bmw_e9x_e8x_speed_acc_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_speed_acc_x_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_speed_acc_x_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bmw_e9x_e8x_speed_yaw_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_speed_yaw_rate_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_speed_yaw_rate_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_speed_counter_416_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_speed_counter_416_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_speed_counter_416_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_speed_checksum_416_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_speed_checksum_416_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_speed_checksum_416_is_in_range(uint8_t value);

/**
 * Pack message TransimissionData2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_transimission_data2_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_transimission_data2_t *src_p,
    size_t size);

/**
 * Unpack message TransimissionData2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_transimission_data2_unpack(
    struct bmw_e9x_e8x_transimission_data2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TransimissionData2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_transimission_data2_init(struct bmw_e9x_e8x_transimission_data2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_transimission_data2_counter_418_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_transimission_data2_counter_418_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_transimission_data2_counter_418_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_transimission_data2_manual_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_transimission_data2_manual_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_transimission_data2_manual_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_transimission_data2_checksum_418_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_transimission_data2_checksum_418_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_transimission_data2_checksum_418_is_in_range(uint8_t value);

/**
 * Pack message WheelPressure_KCAN.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_wheel_pressure_kcan_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_wheel_pressure_kcan_t *src_p,
    size_t size);

/**
 * Unpack message WheelPressure_KCAN.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_wheel_pressure_kcan_unpack(
    struct bmw_e9x_e8x_wheel_pressure_kcan_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WheelPressure_KCAN.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_wheel_pressure_kcan_init(struct bmw_e9x_e8x_wheel_pressure_kcan_t *msg_p);

/**
 * Pack message AccelerationData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_acceleration_data_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_acceleration_data_t *src_p,
    size_t size);

/**
 * Unpack message AccelerationData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_acceleration_data_unpack(
    struct bmw_e9x_e8x_acceleration_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AccelerationData.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_acceleration_data_init(struct bmw_e9x_e8x_acceleration_data_t *msg_p);

/**
 * Pack message GearSelectorSwitch.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_gear_selector_switch_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_gear_selector_switch_t *src_p,
    size_t size);

/**
 * Unpack message GearSelectorSwitch.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_gear_selector_switch_unpack(
    struct bmw_e9x_e8x_gear_selector_switch_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GearSelectorSwitch.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_gear_selector_switch_init(struct bmw_e9x_e8x_gear_selector_switch_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_gear_selector_switch_counter_408_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_gear_selector_switch_counter_408_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_gear_selector_switch_counter_408_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_gear_selector_switch_m3_shifter_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_gear_selector_switch_m3_shifter_position_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_gear_selector_switch_m3_shifter_position_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_gear_selector_switch_m3_shifter_position_xor1111_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_gear_selector_switch_m3_shifter_position_xor1111_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_gear_selector_switch_m3_shifter_position_xor1111_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_gear_selector_switch_shifter_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_gear_selector_switch_shifter_position_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_gear_selector_switch_shifter_position_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_gear_selector_switch_shifter_position_xor1111_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_gear_selector_switch_shifter_position_xor1111_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_gear_selector_switch_shifter_position_xor1111_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_gear_selector_switch_param1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_gear_selector_switch_param1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_gear_selector_switch_param1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_gear_selector_switch_param1_xor11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_gear_selector_switch_param1_xor11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_gear_selector_switch_param1_xor11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_gear_selector_switch_park_button_first_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_gear_selector_switch_park_button_first_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_gear_selector_switch_park_button_first_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_gear_selector_switch_park_button_second_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_gear_selector_switch_park_button_second_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_gear_selector_switch_park_button_second_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_gear_selector_switch_side_button_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_gear_selector_switch_side_button_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_gear_selector_switch_side_button_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_gear_selector_switch_side_button_xor11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_gear_selector_switch_side_button_xor11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_gear_selector_switch_side_button_xor11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_gear_selector_switch_param5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_gear_selector_switch_param5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_gear_selector_switch_param5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_gear_selector_switch_sport_button_pressed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_gear_selector_switch_sport_button_pressed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_gear_selector_switch_sport_button_pressed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_gear_selector_switch_m3_button_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_gear_selector_switch_m3_button_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_gear_selector_switch_m3_button_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_gear_selector_switch_always11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_gear_selector_switch_always11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_gear_selector_switch_always11_is_in_range(uint8_t value);

/**
 * Pack message DistanceRoute.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_distance_route_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_distance_route_t *src_p,
    size_t size);

/**
 * Unpack message DistanceRoute.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_distance_route_unpack(
    struct bmw_e9x_e8x_distance_route_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from DistanceRoute.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_distance_route_init(struct bmw_e9x_e8x_distance_route_t *msg_p);

/**
 * Pack message InstrumentClusterStatus_KOMBI.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_instrument_cluster_status_kombi_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_instrument_cluster_status_kombi_t *src_p,
    size_t size);

/**
 * Unpack message InstrumentClusterStatus_KOMBI.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_instrument_cluster_status_kombi_unpack(
    struct bmw_e9x_e8x_instrument_cluster_status_kombi_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from InstrumentClusterStatus_KOMBI.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_instrument_cluster_status_kombi_init(struct bmw_e9x_e8x_instrument_cluster_status_kombi_t *msg_p);

/**
 * Pack message EngineData.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_engine_data_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_engine_data_t *src_p,
    size_t size);

/**
 * Unpack message EngineData.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_engine_data_unpack(
    struct bmw_e9x_e8x_engine_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from EngineData.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_engine_data_init(struct bmw_e9x_e8x_engine_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bmw_e9x_e8x_engine_data_engine_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_engine_data_engine_temperature_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_engine_data_engine_temperature_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_engine_data_counter_464_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_engine_data_counter_464_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_engine_data_counter_464_is_in_range(uint8_t value);

/**
 * Pack message FuelLevel.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_fuel_level_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_fuel_level_t *src_p,
    size_t size);

/**
 * Unpack message FuelLevel.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_fuel_level_unpack(
    struct bmw_e9x_e8x_fuel_level_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from FuelLevel.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_fuel_level_init(struct bmw_e9x_e8x_fuel_level_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_fuel_level_fuel_percentage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_fuel_level_fuel_percentage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_fuel_level_fuel_percentage_is_in_range(uint8_t value);

/**
 * Pack message TransmissionData3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_transmission_data3_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_transmission_data3_t *src_p,
    size_t size);

/**
 * Unpack message TransmissionData3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_transmission_data3_unpack(
    struct bmw_e9x_e8x_transmission_data3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TransmissionData3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_transmission_data3_init(struct bmw_e9x_e8x_transmission_data3_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_transmission_data3_checksum_946_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_transmission_data3_checksum_946_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_transmission_data3_checksum_946_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_transmission_data3_counter_945_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_transmission_data3_counter_945_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_transmission_data3_counter_945_is_in_range(uint8_t value);

/**
 * Pack message SteeringWheelAngle_slow.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_steering_wheel_angle_slow_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_steering_wheel_angle_slow_t *src_p,
    size_t size);

/**
 * Unpack message SteeringWheelAngle_slow.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_steering_wheel_angle_slow_unpack(
    struct bmw_e9x_e8x_steering_wheel_angle_slow_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SteeringWheelAngle_slow.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_steering_wheel_angle_slow_init(struct bmw_e9x_e8x_steering_wheel_angle_slow_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bmw_e9x_e8x_steering_wheel_angle_slow_steering_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_steering_wheel_angle_slow_steering_position_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_steering_wheel_angle_slow_steering_position_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_steering_wheel_angle_slow_counter_200_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_steering_wheel_angle_slow_counter_200_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_steering_wheel_angle_slow_counter_200_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bmw_e9x_e8x_steering_wheel_angle_slow_steering_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_steering_wheel_angle_slow_steering_speed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_steering_wheel_angle_slow_steering_speed_is_in_range(int16_t value);

/**
 * Pack message TransmissionDataDisplay.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_transmission_data_display_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_transmission_data_display_t *src_p,
    size_t size);

/**
 * Unpack message TransmissionDataDisplay.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_transmission_data_display_unpack(
    struct bmw_e9x_e8x_transmission_data_display_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TransmissionDataDisplay.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_transmission_data_display_init(struct bmw_e9x_e8x_transmission_data_display_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_transmission_data_display_shift_lever_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_transmission_data_display_shift_lever_position_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_transmission_data_display_shift_lever_position_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_transmission_data_display_shift_lever_position_xor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_transmission_data_display_shift_lever_position_xor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_transmission_data_display_shift_lever_position_xor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_transmission_data_display_gear_related_tbd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_transmission_data_display_gear_related_tbd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_transmission_data_display_gear_related_tbd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_transmission_data_display_sport_button_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_transmission_data_display_sport_button_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_transmission_data_display_sport_button_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_transmission_data_display_counter_466_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_transmission_data_display_counter_466_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_transmission_data_display_counter_466_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_transmission_data_display_shift_lever_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_transmission_data_display_shift_lever_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_transmission_data_display_shift_lever_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_transmission_data_display_x_ff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_transmission_data_display_x_ff_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_transmission_data_display_x_ff_is_in_range(uint8_t value);

/**
 * Pack message HeatFlow_LoadTorqueClimate.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_heat_flow_load_torque_climate_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_heat_flow_load_torque_climate_t *src_p,
    size_t size);

/**
 * Unpack message HeatFlow_LoadTorqueClimate.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_heat_flow_load_torque_climate_unpack(
    struct bmw_e9x_e8x_heat_flow_load_torque_climate_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from HeatFlow_LoadTorqueClimate.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_heat_flow_load_torque_climate_init(struct bmw_e9x_e8x_heat_flow_load_torque_climate_t *msg_p);

/**
 * Pack message NetworkManagment1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_network_managment1_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_network_managment1_t *src_p,
    size_t size);

/**
 * Unpack message NetworkManagment1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_network_managment1_unpack(
    struct bmw_e9x_e8x_network_managment1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from NetworkManagment1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_network_managment1_init(struct bmw_e9x_e8x_network_managment1_t *msg_p);

/**
 * Pack message NetworkManagment2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_network_managment2_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_network_managment2_t *src_p,
    size_t size);

/**
 * Unpack message NetworkManagment2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_network_managment2_unpack(
    struct bmw_e9x_e8x_network_managment2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from NetworkManagment2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_network_managment2_init(struct bmw_e9x_e8x_network_managment2_t *msg_p);

/**
 * Pack message NetworkManagment3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_network_managment3_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_network_managment3_t *src_p,
    size_t size);

/**
 * Unpack message NetworkManagment3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_network_managment3_unpack(
    struct bmw_e9x_e8x_network_managment3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from NetworkManagment3.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_network_managment3_init(struct bmw_e9x_e8x_network_managment3_t *msg_p);

/**
 * Pack message NetworkManagment4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_network_managment4_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_network_managment4_t *src_p,
    size_t size);

/**
 * Unpack message NetworkManagment4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_network_managment4_unpack(
    struct bmw_e9x_e8x_network_managment4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from NetworkManagment4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_network_managment4_init(struct bmw_e9x_e8x_network_managment4_t *msg_p);

/**
 * Pack message NetworkManagment5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_network_managment5_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_network_managment5_t *src_p,
    size_t size);

/**
 * Unpack message NetworkManagment5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_network_managment5_unpack(
    struct bmw_e9x_e8x_network_managment5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from NetworkManagment5.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_network_managment5_init(struct bmw_e9x_e8x_network_managment5_t *msg_p);

/**
 * Pack message GWS_ShiftLeverHeartbeat.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_gws_shift_lever_heartbeat_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_gws_shift_lever_heartbeat_t *src_p,
    size_t size);

/**
 * Unpack message GWS_ShiftLeverHeartbeat.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_gws_shift_lever_heartbeat_unpack(
    struct bmw_e9x_e8x_gws_shift_lever_heartbeat_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from GWS_ShiftLeverHeartbeat.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_gws_shift_lever_heartbeat_init(struct bmw_e9x_e8x_gws_shift_lever_heartbeat_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_gws_shift_lever_heartbeat_ign_off_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_gws_shift_lever_heartbeat_ign_off_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_gws_shift_lever_heartbeat_ign_off_is_in_range(uint8_t value);

/**
 * Pack message HeatFlowEngine.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_heat_flow_engine_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_heat_flow_engine_t *src_p,
    size_t size);

/**
 * Unpack message HeatFlowEngine.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_heat_flow_engine_unpack(
    struct bmw_e9x_e8x_heat_flow_engine_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from HeatFlowEngine.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_heat_flow_engine_init(struct bmw_e9x_e8x_heat_flow_engine_t *msg_p);

/**
 * Pack message AmbientTemperature_RelativeTime.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_ambient_temperature_relative_time_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_ambient_temperature_relative_time_t *src_p,
    size_t size);

/**
 * Unpack message AmbientTemperature_RelativeTime.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_ambient_temperature_relative_time_unpack(
    struct bmw_e9x_e8x_ambient_temperature_relative_time_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from AmbientTemperature_RelativeTime.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_ambient_temperature_relative_time_init(struct bmw_e9x_e8x_ambient_temperature_relative_time_t *msg_p);

/**
 * Pack message ElectricFuelPumpStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_electric_fuel_pump_status_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_electric_fuel_pump_status_t *src_p,
    size_t size);

/**
 * Unpack message ElectricFuelPumpStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_electric_fuel_pump_status_unpack(
    struct bmw_e9x_e8x_electric_fuel_pump_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ElectricFuelPumpStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_electric_fuel_pump_status_init(struct bmw_e9x_e8x_electric_fuel_pump_status_t *msg_p);

/**
 * Pack message EngineOBD_data.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_engine_obd_data_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_engine_obd_data_t *src_p,
    size_t size);

/**
 * Unpack message EngineOBD_data.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_engine_obd_data_unpack(
    struct bmw_e9x_e8x_engine_obd_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from EngineOBD_data.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_engine_obd_data_init(struct bmw_e9x_e8x_engine_obd_data_t *msg_p);

/**
 * Pack message ServicesDKG.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_services_dkg_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_services_dkg_t *src_p,
    size_t size);

/**
 * Unpack message ServicesDKG.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_services_dkg_unpack(
    struct bmw_e9x_e8x_services_dkg_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ServicesDKG.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_services_dkg_init(struct bmw_e9x_e8x_services_dkg_t *msg_p);

/**
 * Pack message CrashDisconnectControl.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_crash_disconnect_control_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_crash_disconnect_control_t *src_p,
    size_t size);

/**
 * Unpack message CrashDisconnectControl.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_crash_disconnect_control_unpack(
    struct bmw_e9x_e8x_crash_disconnect_control_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CrashDisconnectControl.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_crash_disconnect_control_init(struct bmw_e9x_e8x_crash_disconnect_control_t *msg_p);

/**
 * Pack message TurnSignals.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_turn_signals_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_turn_signals_t *src_p,
    size_t size);

/**
 * Unpack message TurnSignals.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_turn_signals_unpack(
    struct bmw_e9x_e8x_turn_signals_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TurnSignals.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_turn_signals_init(struct bmw_e9x_e8x_turn_signals_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_turn_signals_hold_activated_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_turn_signals_hold_activated_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_turn_signals_hold_activated_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_turn_signals_right_turn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_turn_signals_right_turn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_turn_signals_right_turn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_turn_signals_left_turn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_turn_signals_left_turn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_turn_signals_left_turn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_turn_signals_turn_signal_idle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_turn_signals_turn_signal_idle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_turn_signals_turn_signal_idle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_turn_signals_turn_signal_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_turn_signals_turn_signal_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_turn_signals_turn_signal_active_is_in_range(uint8_t value);

/**
 * Pack message Dimming.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_dimming_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_dimming_t *src_p,
    size_t size);

/**
 * Unpack message Dimming.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_dimming_unpack(
    struct bmw_e9x_e8x_dimming_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Dimming.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_dimming_init(struct bmw_e9x_e8x_dimming_t *msg_p);

/**
 * Pack message LampStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_lamp_status_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_lamp_status_t *src_p,
    size_t size);

/**
 * Unpack message LampStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_lamp_status_unpack(
    struct bmw_e9x_e8x_lamp_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from LampStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_lamp_status_init(struct bmw_e9x_e8x_lamp_status_t *msg_p);

/**
 * Pack message RainSensorWiperSpeed.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_rain_sensor_wiper_speed_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_rain_sensor_wiper_speed_t *src_p,
    size_t size);

/**
 * Unpack message RainSensorWiperSpeed.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_rain_sensor_wiper_speed_unpack(
    struct bmw_e9x_e8x_rain_sensor_wiper_speed_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RainSensorWiperSpeed.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_rain_sensor_wiper_speed_init(struct bmw_e9x_e8x_rain_sensor_wiper_speed_t *msg_p);

/**
 * Pack message ClimateFrontStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_climate_front_status_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_climate_front_status_t *src_p,
    size_t size);

/**
 * Unpack message ClimateFrontStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_climate_front_status_unpack(
    struct bmw_e9x_e8x_climate_front_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ClimateFrontStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_climate_front_status_init(struct bmw_e9x_e8x_climate_front_status_t *msg_p);

/**
 * Pack message LCD_lighting.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_lcd_lighting_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_lcd_lighting_t *src_p,
    size_t size);

/**
 * Unpack message LCD_lighting.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_lcd_lighting_unpack(
    struct bmw_e9x_e8x_lcd_lighting_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from LCD_lighting.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_lcd_lighting_init(struct bmw_e9x_e8x_lcd_lighting_t *msg_p);

/**
 * Pack message LightControl.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_light_control_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_light_control_t *src_p,
    size_t size);

/**
 * Unpack message LightControl.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_light_control_unpack(
    struct bmw_e9x_e8x_light_control_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from LightControl.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_light_control_init(struct bmw_e9x_e8x_light_control_t *msg_p);

/**
 * Pack message Time_Date.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_time_date_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_time_date_t *src_p,
    size_t size);

/**
 * Unpack message Time_Date.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_time_date_unpack(
    struct bmw_e9x_e8x_time_date_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Time_Date.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_time_date_init(struct bmw_e9x_e8x_time_date_t *msg_p);

/**
 * Pack message OccupancySeatBeltContact.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_occupancy_seat_belt_contact_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_occupancy_seat_belt_contact_t *src_p,
    size_t size);

/**
 * Unpack message OccupancySeatBeltContact.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_occupancy_seat_belt_contact_unpack(
    struct bmw_e9x_e8x_occupancy_seat_belt_contact_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from OccupancySeatBeltContact.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_occupancy_seat_belt_contact_init(struct bmw_e9x_e8x_occupancy_seat_belt_contact_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_occupancy_seat_belt_contact_new_signal_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_occupancy_seat_belt_contact_new_signal_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_occupancy_seat_belt_contact_new_signal_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_occupancy_seat_belt_contact_new_signal_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_occupancy_seat_belt_contact_new_signal_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_occupancy_seat_belt_contact_new_signal_1_is_in_range(uint8_t value);

/**
 * Pack message TrunkStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_trunk_status_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_trunk_status_t *src_p,
    size_t size);

/**
 * Unpack message TrunkStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_trunk_status_unpack(
    struct bmw_e9x_e8x_trunk_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TrunkStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_trunk_status_init(struct bmw_e9x_e8x_trunk_status_t *msg_p);

/**
 * Pack message TirePressureStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_tire_pressure_status_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_tire_pressure_status_t *src_p,
    size_t size);

/**
 * Unpack message TirePressureStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_tire_pressure_status_unpack(
    struct bmw_e9x_e8x_tire_pressure_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TirePressureStatus.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_tire_pressure_status_init(struct bmw_e9x_e8x_tire_pressure_status_t *msg_p);

/**
 * Pack message Range_Mileage.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_range_mileage_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_range_mileage_t *src_p,
    size_t size);

/**
 * Unpack message Range_Mileage.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_range_mileage_unpack(
    struct bmw_e9x_e8x_range_mileage_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Range_Mileage.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_range_mileage_init(struct bmw_e9x_e8x_range_mileage_t *msg_p);

/**
 * Pack message StatusFuelControl.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_fuel_control_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_fuel_control_t *src_p,
    size_t size);

/**
 * Unpack message StatusFuelControl.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_fuel_control_unpack(
    struct bmw_e9x_e8x_status_fuel_control_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from StatusFuelControl.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_fuel_control_init(struct bmw_e9x_e8x_status_fuel_control_t *msg_p);

/**
 * Pack message EngineOilLevel.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_engine_oil_level_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_engine_oil_level_t *src_p,
    size_t size);

/**
 * Unpack message EngineOilLevel.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_engine_oil_level_unpack(
    struct bmw_e9x_e8x_engine_oil_level_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from EngineOilLevel.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_engine_oil_level_init(struct bmw_e9x_e8x_engine_oil_level_t *msg_p);

/**
 * Pack message RunOnTimeTerminal30.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_run_on_time_terminal30_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_run_on_time_terminal30_t *src_p,
    size_t size);

/**
 * Unpack message RunOnTimeTerminal30.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_run_on_time_terminal30_unpack(
    struct bmw_e9x_e8x_run_on_time_terminal30_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RunOnTimeTerminal30.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_run_on_time_terminal30_init(struct bmw_e9x_e8x_run_on_time_terminal30_t *msg_p);

/**
 * Pack message PowerManagmentConsumptionControl.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_power_managment_consumption_control_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_power_managment_consumption_control_t *src_p,
    size_t size);

/**
 * Unpack message PowerManagmentConsumptionControl.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_power_managment_consumption_control_unpack(
    struct bmw_e9x_e8x_power_managment_consumption_control_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PowerManagmentConsumptionControl.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_power_managment_consumption_control_init(struct bmw_e9x_e8x_power_managment_consumption_control_t *msg_p);

/**
 * Pack message PowerBatteryVoltage.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_power_battery_voltage_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_power_battery_voltage_t *src_p,
    size_t size);

/**
 * Unpack message PowerBatteryVoltage.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_power_battery_voltage_unpack(
    struct bmw_e9x_e8x_power_battery_voltage_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PowerBatteryVoltage.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_power_battery_voltage_init(struct bmw_e9x_e8x_power_battery_voltage_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t bmw_e9x_e8x_power_battery_voltage_battery_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_power_battery_voltage_battery_voltage_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_power_battery_voltage_battery_voltage_is_in_range(uint32_t value);

/**
 * Pack message PowerRunningTime.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_power_running_time_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_power_running_time_t *src_p,
    size_t size);

/**
 * Unpack message PowerRunningTime.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_power_running_time_unpack(
    struct bmw_e9x_e8x_power_running_time_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from PowerRunningTime.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_power_running_time_init(struct bmw_e9x_e8x_power_running_time_t *msg_p);

/**
 * Pack message ServicesKGM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_services_kgm_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_services_kgm_t *src_p,
    size_t size);

/**
 * Unpack message ServicesKGM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_services_kgm_unpack(
    struct bmw_e9x_e8x_services_kgm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ServicesKGM.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_services_kgm_init(struct bmw_e9x_e8x_services_kgm_t *msg_p);

/**
 * Pack message ServicesDME.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_services_dme_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_services_dme_t *src_p,
    size_t size);

/**
 * Unpack message ServicesDME.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_services_dme_unpack(
    struct bmw_e9x_e8x_services_dme_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ServicesDME.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_services_dme_init(struct bmw_e9x_e8x_services_dme_t *msg_p);

/**
 * Pack message ServicesDSC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_services_dsc_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_services_dsc_t *src_p,
    size_t size);

/**
 * Unpack message ServicesDSC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_services_dsc_unpack(
    struct bmw_e9x_e8x_services_dsc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ServicesDSC.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_services_dsc_init(struct bmw_e9x_e8x_services_dsc_t *msg_p);

/**
 * Pack message ServicesKOMBI.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_services_kombi_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_services_kombi_t *src_p,
    size_t size);

/**
 * Unpack message ServicesKOMBI.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_services_kombi_unpack(
    struct bmw_e9x_e8x_services_kombi_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ServicesKOMBI.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_services_kombi_init(struct bmw_e9x_e8x_services_kombi_t *msg_p);

/**
 * Pack message ServicesKBM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_services_kbm_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_services_kbm_t *src_p,
    size_t size);

/**
 * Unpack message ServicesKBM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_services_kbm_unpack(
    struct bmw_e9x_e8x_services_kbm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from ServicesKBM.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_services_kbm_init(struct bmw_e9x_e8x_services_kbm_t *msg_p);

/**
 * Pack message Accelerometer1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_accelerometer1_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_accelerometer1_t *src_p,
    size_t size);

/**
 * Unpack message Accelerometer1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_accelerometer1_unpack(
    struct bmw_e9x_e8x_accelerometer1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Accelerometer1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_accelerometer1_init(struct bmw_e9x_e8x_accelerometer1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bmw_e9x_e8x_accelerometer1_yaw_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_accelerometer1_yaw_rate_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_accelerometer1_yaw_rate_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bmw_e9x_e8x_accelerometer1_unknown_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_accelerometer1_unknown_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_accelerometer1_unknown_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bmw_e9x_e8x_accelerometer1_pitch_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_accelerometer1_pitch_rate_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_accelerometer1_pitch_rate_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_accelerometer1_counter_209_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_accelerometer1_counter_209_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_accelerometer1_counter_209_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_accelerometer1_crc8_209_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_accelerometer1_crc8_209_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_accelerometer1_crc8_209_is_in_range(uint8_t value);

/**
 * Pack message WheelTorqueDrivetrain2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_wheel_torque_drivetrain2_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_wheel_torque_drivetrain2_t *src_p,
    size_t size);

/**
 * Unpack message WheelTorqueDrivetrain2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_wheel_torque_drivetrain2_unpack(
    struct bmw_e9x_e8x_wheel_torque_drivetrain2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from WheelTorqueDrivetrain2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_wheel_torque_drivetrain2_init(struct bmw_e9x_e8x_wheel_torque_drivetrain2_t *msg_p);

/**
 * Pack message SYNC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_sync_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_sync_t *src_p,
    size_t size);

/**
 * Unpack message SYNC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_sync_unpack(
    struct bmw_e9x_e8x_sync_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SYNC.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_sync_init(struct bmw_e9x_e8x_sync_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_sync_state1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_sync_state1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_sync_state1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_sync_state2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_sync_state2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_sync_state2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_sync_counter_128_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_sync_counter_128_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_sync_counter_128_is_in_range(uint8_t value);

/**
 * Pack message Unknown140.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_unknown140_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_unknown140_t *src_p,
    size_t size);

/**
 * Unpack message Unknown140.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_unknown140_unpack(
    struct bmw_e9x_e8x_unknown140_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Unknown140.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_unknown140_init(struct bmw_e9x_e8x_unknown140_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_unknown140_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_unknown140_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_unknown140_state_is_in_range(uint8_t value);

/**
 * Pack message Unknown_d4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_unknown_d4_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_unknown_d4_t *src_p,
    size_t size);

/**
 * Unpack message Unknown_d4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_unknown_d4_unpack(
    struct bmw_e9x_e8x_unknown_d4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Unknown_d4.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_unknown_d4_init(struct bmw_e9x_e8x_unknown_d4_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_unknown_d4_state1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_unknown_d4_state1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_unknown_d4_state1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_unknown_d4_counter_212_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_unknown_d4_counter_212_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_unknown_d4_counter_212_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_unknown_d4_checksum_212_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_unknown_d4_checksum_212_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_unknown_d4_checksum_212_is_in_range(uint8_t value);

/**
 * Pack message Accelerometer2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_accelerometer2_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_accelerometer2_t *src_p,
    size_t size);

/**
 * Unpack message Accelerometer2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_accelerometer2_unpack(
    struct bmw_e9x_e8x_accelerometer2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Accelerometer2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_accelerometer2_init(struct bmw_e9x_e8x_accelerometer2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bmw_e9x_e8x_accelerometer2_yaw_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_accelerometer2_yaw_rate_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_accelerometer2_yaw_rate_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bmw_e9x_e8x_accelerometer2_crc8_205_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_accelerometer2_crc8_205_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_accelerometer2_crc8_205_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t bmw_e9x_e8x_accelerometer2_lateral_acceleration_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_accelerometer2_lateral_acceleration_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_accelerometer2_lateral_acceleration_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_accelerometer2_counter_205_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_accelerometer2_counter_205_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_accelerometer2_counter_205_is_in_range(uint8_t value);

/**
 * Pack message OperationPushButtonDTC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_push_button_dtc_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_push_button_dtc_t *src_p,
    size_t size);

/**
 * Unpack message OperationPushButtonDTC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_push_button_dtc_unpack(
    struct bmw_e9x_e8x_operation_push_button_dtc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from OperationPushButtonDTC.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_push_button_dtc_init(struct bmw_e9x_e8x_operation_push_button_dtc_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t bmw_e9x_e8x_operation_push_button_dtc_dtc_pressed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_operation_push_button_dtc_dtc_pressed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_operation_push_button_dtc_dtc_pressed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t bmw_e9x_e8x_operation_push_button_dtc_set_me_0x3_fff_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double bmw_e9x_e8x_operation_push_button_dtc_set_me_0x3_fff_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool bmw_e9x_e8x_operation_push_button_dtc_set_me_0x3_fff_is_in_range(uint16_t value);

/**
 * Pack message Unknown_629.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_unknown_629_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_unknown_629_t *src_p,
    size_t size);

/**
 * Unpack message Unknown_629.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_unknown_629_unpack(
    struct bmw_e9x_e8x_unknown_629_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Unknown_629.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_unknown_629_init(struct bmw_e9x_e8x_unknown_629_t *msg_p);

/**
 * Pack message Synchronization_SC_VDA.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_synchronization_sc_vda_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_synchronization_sc_vda_t *src_p,
    size_t size);

/**
 * Unpack message Synchronization_SC_VDA.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_synchronization_sc_vda_unpack(
    struct bmw_e9x_e8x_synchronization_sc_vda_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Synchronization_SC_VDA.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_synchronization_sc_vda_init(struct bmw_e9x_e8x_synchronization_sc_vda_t *msg_p);

/**
 * Pack message Delay_request_ACC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_delay_request_acc_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_delay_request_acc_t *src_p,
    size_t size);

/**
 * Unpack message Delay_request_ACC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_delay_request_acc_unpack(
    struct bmw_e9x_e8x_delay_request_acc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Delay_request_ACC.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_delay_request_acc_init(struct bmw_e9x_e8x_delay_request_acc_t *msg_p);

/**
 * Pack message Torque_request_steering.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_torque_request_steering_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_torque_request_steering_t *src_p,
    size_t size);

/**
 * Unpack message Torque_request_steering.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_torque_request_steering_unpack(
    struct bmw_e9x_e8x_torque_request_steering_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Torque_request_steering.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_torque_request_steering_init(struct bmw_e9x_e8x_torque_request_steering_t *msg_p);

/**
 * Pack message Torque_request_EGS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_torque_request_egs_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_torque_request_egs_t *src_p,
    size_t size);

/**
 * Unpack message Torque_request_EGS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_torque_request_egs_unpack(
    struct bmw_e9x_e8x_torque_request_egs_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Torque_request_EGS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_torque_request_egs_init(struct bmw_e9x_e8x_torque_request_egs_t *msg_p);

/**
 * Pack message Torque_request_ACC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_torque_request_acc_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_torque_request_acc_t *src_p,
    size_t size);

/**
 * Unpack message Torque_request_ACC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_torque_request_acc_unpack(
    struct bmw_e9x_e8x_torque_request_acc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Torque_request_ACC.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_torque_request_acc_init(struct bmw_e9x_e8x_torque_request_acc_t *msg_p);

/**
 * Pack message Target_torque_request.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_target_torque_request_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_target_torque_request_t *src_p,
    size_t size);

/**
 * Unpack message Target_torque_request.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_target_torque_request_unpack(
    struct bmw_e9x_e8x_target_torque_request_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Target_torque_request.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_target_torque_request_init(struct bmw_e9x_e8x_target_torque_request_t *msg_p);

/**
 * Pack message Status_target_torque_conversion.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_target_torque_conversion_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_target_torque_conversion_t *src_p,
    size_t size);

/**
 * Unpack message Status_target_torque_conversion.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_target_torque_conversion_unpack(
    struct bmw_e9x_e8x_status_target_torque_conversion_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_target_torque_conversion.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_target_torque_conversion_init(struct bmw_e9x_e8x_status_target_torque_conversion_t *msg_p);

/**
 * Pack message Alive_Counter.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_alive_counter_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_alive_counter_t *src_p,
    size_t size);

/**
 * Unpack message Alive_Counter.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_alive_counter_unpack(
    struct bmw_e9x_e8x_alive_counter_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Alive_Counter.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_alive_counter_init(struct bmw_e9x_e8x_alive_counter_t *msg_p);

/**
 * Pack message Alive_Central_Gateway.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_alive_central_gateway_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_alive_central_gateway_t *src_p,
    size_t size);

/**
 * Unpack message Alive_Central_Gateway.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_alive_central_gateway_unpack(
    struct bmw_e9x_e8x_alive_central_gateway_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Alive_Central_Gateway.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_alive_central_gateway_init(struct bmw_e9x_e8x_alive_central_gateway_t *msg_p);

/**
 * Pack message Alive_counter_telephone.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_alive_counter_telephone_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_alive_counter_telephone_t *src_p,
    size_t size);

/**
 * Unpack message Alive_counter_telephone.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_alive_counter_telephone_unpack(
    struct bmw_e9x_e8x_alive_counter_telephone_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Alive_counter_telephone.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_alive_counter_telephone_init(struct bmw_e9x_e8x_alive_counter_telephone_t *msg_p);

/**
 * Pack message Request_wheel_torque_brake.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_request_wheel_torque_brake_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_request_wheel_torque_brake_t *src_p,
    size_t size);

/**
 * Unpack message Request_wheel_torque_brake.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_request_wheel_torque_brake_unpack(
    struct bmw_e9x_e8x_request_wheel_torque_brake_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Request_wheel_torque_brake.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_request_wheel_torque_brake_init(struct bmw_e9x_e8x_request_wheel_torque_brake_t *msg_p);

/**
 * Pack message Alive_Counter_Security.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_alive_counter_security_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_alive_counter_security_t *src_p,
    size_t size);

/**
 * Unpack message Alive_Counter_Security.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_alive_counter_security_unpack(
    struct bmw_e9x_e8x_alive_counter_security_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Alive_Counter_Security.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_alive_counter_security_init(struct bmw_e9x_e8x_alive_counter_security_t *msg_p);

/**
 * Pack message CLU1_VDA.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_clu1_vda_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_clu1_vda_t *src_p,
    size_t size);

/**
 * Unpack message CLU1_VDA.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_clu1_vda_unpack(
    struct bmw_e9x_e8x_clu1_vda_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CLU1_VDA.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_clu1_vda_init(struct bmw_e9x_e8x_clu1_vda_t *msg_p);

/**
 * Pack message Wheel_torque_brake.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_wheel_torque_brake_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_wheel_torque_brake_t *src_p,
    size_t size);

/**
 * Unpack message Wheel_torque_brake.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_wheel_torque_brake_unpack(
    struct bmw_e9x_e8x_wheel_torque_brake_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Wheel_torque_brake.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_wheel_torque_brake_init(struct bmw_e9x_e8x_wheel_torque_brake_t *msg_p);

/**
 * Pack message Status_central_locking_BFT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_central_locking_bft_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_central_locking_bft_t *src_p,
    size_t size);

/**
 * Unpack message Status_central_locking_BFT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_central_locking_bft_unpack(
    struct bmw_e9x_e8x_status_central_locking_bft_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_central_locking_BFT.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_central_locking_bft_init(struct bmw_e9x_e8x_status_central_locking_bft_t *msg_p);

/**
 * Pack message CLU2_VDA.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_clu2_vda_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_clu2_vda_t *src_p,
    size_t size);

/**
 * Unpack message CLU2_VDA.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_clu2_vda_unpack(
    struct bmw_e9x_e8x_clu2_vda_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CLU2_VDA.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_clu2_vda_init(struct bmw_e9x_e8x_clu2_vda_t *msg_p);

/**
 * Pack message Status_central_locking_BFTH.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_central_locking_bfth_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_central_locking_bfth_t *src_p,
    size_t size);

/**
 * Unpack message Status_central_locking_BFTH.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_central_locking_bfth_unpack(
    struct bmw_e9x_e8x_status_central_locking_bfth_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_central_locking_BFTH.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_central_locking_bfth_init(struct bmw_e9x_e8x_status_central_locking_bfth_t *msg_p);

/**
 * Pack message Status_central_locking_FAT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_central_locking_fat_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_central_locking_fat_t *src_p,
    size_t size);

/**
 * Unpack message Status_central_locking_FAT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_central_locking_fat_unpack(
    struct bmw_e9x_e8x_status_central_locking_fat_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_central_locking_FAT.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_central_locking_fat_init(struct bmw_e9x_e8x_status_central_locking_fat_t *msg_p);

/**
 * Pack message Central_locking_status_FATH.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_central_locking_status_fath_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_central_locking_status_fath_t *src_p,
    size_t size);

/**
 * Unpack message Central_locking_status_FATH.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_central_locking_status_fath_unpack(
    struct bmw_e9x_e8x_central_locking_status_fath_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Central_locking_status_FATH.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_central_locking_status_fath_init(struct bmw_e9x_e8x_central_locking_status_fath_t *msg_p);

/**
 * Pack message Status_central_locking_HK.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_central_locking_hk_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_central_locking_hk_t *src_p,
    size_t size);

/**
 * Unpack message Status_central_locking_HK.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_central_locking_hk_unpack(
    struct bmw_e9x_e8x_status_central_locking_hk_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_central_locking_HK.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_central_locking_hk_init(struct bmw_e9x_e8x_status_central_locking_hk_t *msg_p);

/**
 * Pack message CLU3_VDA.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_clu3_vda_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_clu3_vda_t *src_p,
    size_t size);

/**
 * Unpack message CLU3_VDA.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_clu3_vda_unpack(
    struct bmw_e9x_e8x_clu3_vda_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CLU3_VDA.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_clu3_vda_init(struct bmw_e9x_e8x_clu3_vda_t *msg_p);

/**
 * Pack message lateral_dynamics_ARS_VDM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_lateral_dynamics_ars_vdm_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_lateral_dynamics_ars_vdm_t *src_p,
    size_t size);

/**
 * Unpack message lateral_dynamics_ARS_VDM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_lateral_dynamics_ars_vdm_unpack(
    struct bmw_e9x_e8x_lateral_dynamics_ars_vdm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from lateral_dynamics_ARS_VDM.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_lateral_dynamics_ars_vdm_init(struct bmw_e9x_e8x_lateral_dynamics_ars_vdm_t *msg_p);

/**
 * Pack message Vertical_dynamics_VDM_ARS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_vertical_dynamics_vdm_ars_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_vertical_dynamics_vdm_ars_t *src_p,
    size_t size);

/**
 * Unpack message Vertical_dynamics_VDM_ARS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_vertical_dynamics_vdm_ars_unpack(
    struct bmw_e9x_e8x_vertical_dynamics_vdm_ars_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Vertical_dynamics_VDM_ARS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_vertical_dynamics_vdm_ars_init(struct bmw_e9x_e8x_vertical_dynamics_vdm_ars_t *msg_p);

/**
 * Pack message Control_window_lifter_FAT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_control_window_lifter_fat_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_control_window_lifter_fat_t *src_p,
    size_t size);

/**
 * Unpack message Control_window_lifter_FAT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_control_window_lifter_fat_unpack(
    struct bmw_e9x_e8x_control_window_lifter_fat_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Control_window_lifter_FAT.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_control_window_lifter_fat_init(struct bmw_e9x_e8x_control_window_lifter_fat_t *msg_p);

/**
 * Pack message Control_window_lifter_BFT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_control_window_lifter_bft_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_control_window_lifter_bft_t *src_p,
    size_t size);

/**
 * Unpack message Control_window_lifter_BFT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_control_window_lifter_bft_unpack(
    struct bmw_e9x_e8x_control_window_lifter_bft_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Control_window_lifter_BFT.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_control_window_lifter_bft_init(struct bmw_e9x_e8x_control_window_lifter_bft_t *msg_p);

/**
 * Pack message Control_window_lifter_FATH.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_control_window_lifter_fath_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_control_window_lifter_fath_t *src_p,
    size_t size);

/**
 * Unpack message Control_window_lifter_FATH.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_control_window_lifter_fath_unpack(
    struct bmw_e9x_e8x_control_window_lifter_fath_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Control_window_lifter_FATH.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_control_window_lifter_fath_init(struct bmw_e9x_e8x_control_window_lifter_fath_t *msg_p);

/**
 * Pack message Control_window_lifter_BFTH.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_control_window_lifter_bfth_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_control_window_lifter_bfth_t *src_p,
    size_t size);

/**
 * Unpack message Control_window_lifter_BFTH.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_control_window_lifter_bfth_unpack(
    struct bmw_e9x_e8x_control_window_lifter_bfth_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Control_window_lifter_BFTH.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_control_window_lifter_bfth_init(struct bmw_e9x_e8x_control_window_lifter_bfth_t *msg_p);

/**
 * Pack message Voltage_level_sensors.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_voltage_level_sensors_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_voltage_level_sensors_t *src_p,
    size_t size);

/**
 * Unpack message Voltage_level_sensors.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_voltage_level_sensors_unpack(
    struct bmw_e9x_e8x_voltage_level_sensors_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Voltage_level_sensors.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_voltage_level_sensors_init(struct bmw_e9x_e8x_voltage_level_sensors_t *msg_p);

/**
 * Pack message Exchange_AFS_DSC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_exchange_afs_dsc_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_exchange_afs_dsc_t *src_p,
    size_t size);

/**
 * Unpack message Exchange_AFS_DSC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_exchange_afs_dsc_unpack(
    struct bmw_e9x_e8x_exchange_afs_dsc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Exchange_AFS_DSC.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_exchange_afs_dsc_init(struct bmw_e9x_e8x_exchange_afs_dsc_t *msg_p);

/**
 * Pack message Control_interventions_DSC_AFS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_control_interventions_dsc_afs_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_control_interventions_dsc_afs_t *src_p,
    size_t size);

/**
 * Unpack message Control_interventions_DSC_AFS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_control_interventions_dsc_afs_unpack(
    struct bmw_e9x_e8x_control_interventions_dsc_afs_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Control_interventions_DSC_AFS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_control_interventions_dsc_afs_init(struct bmw_e9x_e8x_control_interventions_dsc_afs_t *msg_p);

/**
 * Pack message Status_partial_setpoints_AFS_DSC_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_partial_setpoints_afs_dsc_2_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_partial_setpoints_afs_dsc_2_t *src_p,
    size_t size);

/**
 * Unpack message Status_partial_setpoints_AFS_DSC_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_partial_setpoints_afs_dsc_2_unpack(
    struct bmw_e9x_e8x_status_partial_setpoints_afs_dsc_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_partial_setpoints_AFS_DSC_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_partial_setpoints_afs_dsc_2_init(struct bmw_e9x_e8x_status_partial_setpoints_afs_dsc_2_t *msg_p);

/**
 * Pack message Sensor_data_ROSE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_sensor_data_rose_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_sensor_data_rose_t *src_p,
    size_t size);

/**
 * Unpack message Sensor_data_ROSE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_sensor_data_rose_unpack(
    struct bmw_e9x_e8x_sensor_data_rose_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Sensor_data_ROSE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_sensor_data_rose_init(struct bmw_e9x_e8x_sensor_data_rose_t *msg_p);

/**
 * Pack message input_data_ROSE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_input_data_rose_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_input_data_rose_t *src_p,
    size_t size);

/**
 * Unpack message input_data_ROSE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_input_data_rose_unpack(
    struct bmw_e9x_e8x_input_data_rose_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from input_data_ROSE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_input_data_rose_init(struct bmw_e9x_e8x_input_data_rose_t *msg_p);

/**
 * Pack message Request_1_ACC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_request_1_acc_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_request_1_acc_t *src_p,
    size_t size);

/**
 * Unpack message Request_1_ACC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_request_1_acc_unpack(
    struct bmw_e9x_e8x_request_1_acc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Request_1_ACC.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_request_1_acc_init(struct bmw_e9x_e8x_request_1_acc_t *msg_p);

/**
 * Pack message Request_2_ACC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_request_2_acc_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_request_2_acc_t *src_p,
    size_t size);

/**
 * Unpack message Request_2_ACC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_request_2_acc_unpack(
    struct bmw_e9x_e8x_request_2_acc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Request_2_ACC.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_request_2_acc_init(struct bmw_e9x_e8x_request_2_acc_t *msg_p);

/**
 * Pack message Object_data_ACC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_object_data_acc_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_object_data_acc_t *src_p,
    size_t size);

/**
 * Unpack message Object_data_ACC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_object_data_acc_unpack(
    struct bmw_e9x_e8x_object_data_acc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Object_data_ACC.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_object_data_acc_init(struct bmw_e9x_e8x_object_data_acc_t *msg_p);

/**
 * Pack message Status_ACC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_acc_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_acc_t *src_p,
    size_t size);

/**
 * Unpack message Status_ACC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_acc_unpack(
    struct bmw_e9x_e8x_status_acc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_ACC.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_acc_init(struct bmw_e9x_e8x_status_acc_t *msg_p);

/**
 * Pack message Requirement_angle_FFP.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_requirement_angle_ffp_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_requirement_angle_ffp_t *src_p,
    size_t size);

/**
 * Unpack message Requirement_angle_FFP.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_requirement_angle_ffp_unpack(
    struct bmw_e9x_e8x_requirement_angle_ffp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Requirement_angle_FFP.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_requirement_angle_ffp_init(struct bmw_e9x_e8x_requirement_angle_ffp_t *msg_p);

/**
 * Pack message CLU_Status_VDA.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_clu_status_vda_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_clu_status_vda_t *src_p,
    size_t size);

/**
 * Unpack message CLU_Status_VDA.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_clu_status_vda_unpack(
    struct bmw_e9x_e8x_clu_status_vda_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from CLU_Status_VDA.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_clu_status_vda_init(struct bmw_e9x_e8x_clu_status_vda_t *msg_p);

/**
 * Pack message Acknowledgment_request_Kombination.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_acknowledgment_request_kombination_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_acknowledgment_request_kombination_t *src_p,
    size_t size);

/**
 * Unpack message Acknowledgment_request_Kombination.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_acknowledgment_request_kombination_unpack(
    struct bmw_e9x_e8x_acknowledgment_request_kombination_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Acknowledgment_request_Kombination.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_acknowledgment_request_kombination_init(struct bmw_e9x_e8x_acknowledgment_request_kombination_t *msg_p);

/**
 * Pack message Display_motor_data.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_display_motor_data_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_display_motor_data_t *src_p,
    size_t size);

/**
 * Unpack message Display_motor_data.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_display_motor_data_unpack(
    struct bmw_e9x_e8x_display_motor_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Display_motor_data.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_display_motor_data_init(struct bmw_e9x_e8x_display_motor_data_t *msg_p);

/**
 * Pack message display_ACC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_display_acc_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_display_acc_t *src_p,
    size_t size);

/**
 * Unpack message display_ACC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_display_acc_unpack(
    struct bmw_e9x_e8x_display_acc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from display_ACC.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_display_acc_init(struct bmw_e9x_e8x_display_acc_t *msg_p);

/**
 * Pack message Operation_push_button_MSA.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_push_button_msa_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_push_button_msa_t *src_p,
    size_t size);

/**
 * Unpack message Operation_push_button_MSA.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_push_button_msa_unpack(
    struct bmw_e9x_e8x_operation_push_button_msa_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_push_button_MSA.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_push_button_msa_init(struct bmw_e9x_e8x_operation_push_button_msa_t *msg_p);

/**
 * Pack message Raw_data_longitudinal_acceleration.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_raw_data_longitudinal_acceleration_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_raw_data_longitudinal_acceleration_t *src_p,
    size_t size);

/**
 * Unpack message Raw_data_longitudinal_acceleration.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_raw_data_longitudinal_acceleration_unpack(
    struct bmw_e9x_e8x_raw_data_longitudinal_acceleration_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Raw_data_longitudinal_acceleration.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_raw_data_longitudinal_acceleration_init(struct bmw_e9x_e8x_raw_data_longitudinal_acceleration_t *msg_p);

/**
 * Pack message actuation_request_EMF.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_actuation_request_emf_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_actuation_request_emf_t *src_p,
    size_t size);

/**
 * Unpack message actuation_request_EMF.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_actuation_request_emf_unpack(
    struct bmw_e9x_e8x_actuation_request_emf_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from actuation_request_EMF.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_actuation_request_emf_init(struct bmw_e9x_e8x_actuation_request_emf_t *msg_p);

/**
 * Pack message Effect_ErgoCommander.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_effect_ergo_commander_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_effect_ergo_commander_t *src_p,
    size_t size);

/**
 * Unpack message Effect_ErgoCommander.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_effect_ergo_commander_unpack(
    struct bmw_e9x_e8x_effect_ergo_commander_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Effect_ErgoCommander.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_effect_ergo_commander_init(struct bmw_e9x_e8x_effect_ergo_commander_t *msg_p);

/**
 * Pack message Status_ARS_module.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_ars_module_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_ars_module_t *src_p,
    size_t size);

/**
 * Unpack message Status_ARS_module.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_ars_module_unpack(
    struct bmw_e9x_e8x_status_ars_module_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_ARS_module.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_ars_module_init(struct bmw_e9x_e8x_status_ars_module_t *msg_p);

/**
 * Pack message Operation_ErgoCommander.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_ergo_commander_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_ergo_commander_t *src_p,
    size_t size);

/**
 * Unpack message Operation_ErgoCommander.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_ergo_commander_unpack(
    struct bmw_e9x_e8x_operation_ergo_commander_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_ErgoCommander.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_ergo_commander_init(struct bmw_e9x_e8x_operation_ergo_commander_t *msg_p);

/**
 * Pack message Distance_message_PDC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_distance_message_pdc_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_distance_message_pdc_t *src_p,
    size_t size);

/**
 * Unpack message Distance_message_PDC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_distance_message_pdc_unpack(
    struct bmw_e9x_e8x_distance_message_pdc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Distance_message_PDC.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_distance_message_pdc_init(struct bmw_e9x_e8x_distance_message_pdc_t *msg_p);

/**
 * Pack message Distance_message_2_PDC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_distance_message_2_pdc_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_distance_message_2_pdc_t *src_p,
    size_t size);

/**
 * Unpack message Distance_message_2_PDC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_distance_message_2_pdc_unpack(
    struct bmw_e9x_e8x_distance_message_2_pdc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Distance_message_2_PDC.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_distance_message_2_pdc_init(struct bmw_e9x_e8x_distance_message_2_pdc_t *msg_p);

/**
 * Pack message Acoustic_message_PDC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_acoustic_message_pdc_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_acoustic_message_pdc_t *src_p,
    size_t size);

/**
 * Unpack message Acoustic_message_PDC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_acoustic_message_pdc_unpack(
    struct bmw_e9x_e8x_acoustic_message_pdc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Acoustic_message_PDC.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_acoustic_message_pdc_init(struct bmw_e9x_e8x_acoustic_message_pdc_t *msg_p);

/**
 * Pack message Operation_air_conditioning_air_distribution_FA.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_air_conditioning_air_distribution_fa_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_air_conditioning_air_distribution_fa_t *src_p,
    size_t size);

/**
 * Unpack message Operation_air_conditioning_air_distribution_FA.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_air_conditioning_air_distribution_fa_unpack(
    struct bmw_e9x_e8x_operation_air_conditioning_air_distribution_fa_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_air_conditioning_air_distribution_FA.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_air_conditioning_air_distribution_fa_init(struct bmw_e9x_e8x_operation_air_conditioning_air_distribution_fa_t *msg_p);

/**
 * Pack message Operation_pushbutton_MDrive.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_pushbutton_m_drive_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_pushbutton_m_drive_t *src_p,
    size_t size);

/**
 * Unpack message Operation_pushbutton_MDrive.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_pushbutton_m_drive_unpack(
    struct bmw_e9x_e8x_operation_pushbutton_m_drive_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_pushbutton_MDrive.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_pushbutton_m_drive_init(struct bmw_e9x_e8x_operation_pushbutton_m_drive_t *msg_p);

/**
 * Pack message Climate_control_remote_control.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_climate_control_remote_control_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_climate_control_remote_control_t *src_p,
    size_t size);

/**
 * Unpack message Climate_control_remote_control.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_climate_control_remote_control_unpack(
    struct bmw_e9x_e8x_climate_control_remote_control_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Climate_control_remote_control.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_climate_control_remote_control_init(struct bmw_e9x_e8x_climate_control_remote_control_t *msg_p);

/**
 * Pack message Operation_stratification_seat_heating.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_stratification_seat_heating_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_stratification_seat_heating_t *src_p,
    size_t size);

/**
 * Unpack message Operation_stratification_seat_heating.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_stratification_seat_heating_unpack(
    struct bmw_e9x_e8x_operation_stratification_seat_heating_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_stratification_seat_heating.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_stratification_seat_heating_init(struct bmw_e9x_e8x_operation_stratification_seat_heating_t *msg_p);

/**
 * Pack message Air_conditioning_controls_rear.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_air_conditioning_controls_rear_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_air_conditioning_controls_rear_t *src_p,
    size_t size);

/**
 * Unpack message Air_conditioning_controls_rear.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_air_conditioning_controls_rear_unpack(
    struct bmw_e9x_e8x_air_conditioning_controls_rear_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Air_conditioning_controls_rear.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_air_conditioning_controls_rear_init(struct bmw_e9x_e8x_air_conditioning_controls_rear_t *msg_p);

/**
 * Pack message Operation_air_conditioning_air_distribution_BF.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_air_conditioning_air_distribution_bf_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_air_conditioning_air_distribution_bf_t *src_p,
    size_t size);

/**
 * Unpack message Operation_air_conditioning_air_distribution_BF.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_air_conditioning_air_distribution_bf_unpack(
    struct bmw_e9x_e8x_operation_air_conditioning_air_distribution_bf_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_air_conditioning_air_distribution_BF.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_air_conditioning_air_distribution_bf_init(struct bmw_e9x_e8x_operation_air_conditioning_air_distribution_bf_t *msg_p);

/**
 * Pack message Operation_air_conditioning_front.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_air_conditioning_front_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_air_conditioning_front_t *src_p,
    size_t size);

/**
 * Unpack message Operation_air_conditioning_front.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_air_conditioning_front_unpack(
    struct bmw_e9x_e8x_operation_air_conditioning_front_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_air_conditioning_front.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_air_conditioning_front_init(struct bmw_e9x_e8x_operation_air_conditioning_front_t *msg_p);

/**
 * Pack message Operation_pushbutton_interior_lighting.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_pushbutton_interior_lighting_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_pushbutton_interior_lighting_t *src_p,
    size_t size);

/**
 * Unpack message Operation_pushbutton_interior_lighting.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_pushbutton_interior_lighting_unpack(
    struct bmw_e9x_e8x_operation_pushbutton_interior_lighting_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_pushbutton_interior_lighting.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_pushbutton_interior_lighting_init(struct bmw_e9x_e8x_operation_pushbutton_interior_lighting_t *msg_p);

/**
 * Pack message Operation_seat_heating_seat_climate_FA.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_seat_heating_seat_climate_fa_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_seat_heating_seat_climate_fa_t *src_p,
    size_t size);

/**
 * Unpack message Operation_seat_heating_seat_climate_FA.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_seat_heating_seat_climate_fa_unpack(
    struct bmw_e9x_e8x_operation_seat_heating_seat_climate_fa_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_seat_heating_seat_climate_FA.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_seat_heating_seat_climate_fa_init(struct bmw_e9x_e8x_operation_seat_heating_seat_climate_fa_t *msg_p);

/**
 * Pack message Operation_seat_heating_seat_climate_BF.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_seat_heating_seat_climate_bf_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_seat_heating_seat_climate_bf_t *src_p,
    size_t size);

/**
 * Unpack message Operation_seat_heating_seat_climate_BF.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_seat_heating_seat_climate_bf_unpack(
    struct bmw_e9x_e8x_operation_seat_heating_seat_climate_bf_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_seat_heating_seat_climate_BF.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_seat_heating_seat_climate_bf_init(struct bmw_e9x_e8x_operation_seat_heating_seat_climate_bf_t *msg_p);

/**
 * Pack message Steering_column_adjustment_control.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_steering_column_adjustment_control_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_steering_column_adjustment_control_t *src_p,
    size_t size);

/**
 * Unpack message Steering_column_adjustment_control.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_steering_column_adjustment_control_unpack(
    struct bmw_e9x_e8x_steering_column_adjustment_control_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Steering_column_adjustment_control.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_steering_column_adjustment_control_init(struct bmw_e9x_e8x_steering_column_adjustment_control_t *msg_p);

/**
 * Pack message Operation_active_seat_FA.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_active_seat_fa_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_active_seat_fa_t *src_p,
    size_t size);

/**
 * Unpack message Operation_active_seat_FA.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_active_seat_fa_unpack(
    struct bmw_e9x_e8x_operation_active_seat_fa_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_active_seat_FA.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_active_seat_fa_init(struct bmw_e9x_e8x_operation_active_seat_fa_t *msg_p);

/**
 * Pack message Operation_active_seat_BF.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_active_seat_bf_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_active_seat_bf_t *src_p,
    size_t size);

/**
 * Unpack message Operation_active_seat_BF.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_active_seat_bf_unpack(
    struct bmw_e9x_e8x_operation_active_seat_bf_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_active_seat_BF.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_active_seat_bf_init(struct bmw_e9x_e8x_operation_active_seat_bf_t *msg_p);

/**
 * Pack message Steering_column_switch_operation.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_steering_column_switch_operation_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_steering_column_switch_operation_t *src_p,
    size_t size);

/**
 * Unpack message Steering_column_switch_operation.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_steering_column_switch_operation_unpack(
    struct bmw_e9x_e8x_steering_column_switch_operation_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Steering_column_switch_operation.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_steering_column_switch_operation_init(struct bmw_e9x_e8x_steering_column_switch_operation_t *msg_p);

/**
 * Pack message Operation_seat_memory_FA.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_seat_memory_fa_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_seat_memory_fa_t *src_p,
    size_t size);

/**
 * Unpack message Operation_seat_memory_FA.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_seat_memory_fa_unpack(
    struct bmw_e9x_e8x_operation_seat_memory_fa_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_seat_memory_FA.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_seat_memory_fa_init(struct bmw_e9x_e8x_operation_seat_memory_fa_t *msg_p);

/**
 * Pack message Operation_SHD_MDS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_shd_mds_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_shd_mds_t *src_p,
    size_t size);

/**
 * Unpack message Operation_SHD_MDS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_shd_mds_unpack(
    struct bmw_e9x_e8x_operation_shd_mds_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_SHD_MDS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_shd_mds_init(struct bmw_e9x_e8x_operation_shd_mds_t *msg_p);

/**
 * Pack message Status_EPS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_eps_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_eps_t *src_p,
    size_t size);

/**
 * Unpack message Status_EPS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_eps_unpack(
    struct bmw_e9x_e8x_status_eps_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_EPS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_eps_init(struct bmw_e9x_e8x_status_eps_t *msg_p);

/**
 * Pack message Status_AFS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_afs_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_afs_t *src_p,
    size_t size);

/**
 * Unpack message Status_AFS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_afs_unpack(
    struct bmw_e9x_e8x_status_afs_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_AFS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_afs_init(struct bmw_e9x_e8x_status_afs_t *msg_p);

/**
 * Pack message Status_request_EMF_KCAN.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_request_emf_kcan_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_request_emf_kcan_t *src_p,
    size_t size);

/**
 * Unpack message Status_request_EMF_KCAN.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_request_emf_kcan_unpack(
    struct bmw_e9x_e8x_status_request_emf_kcan_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_request_EMF_KCAN.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_request_emf_kcan_init(struct bmw_e9x_e8x_status_request_emf_kcan_t *msg_p);

/**
 * Pack message Crash.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_crash_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_crash_t *src_p,
    size_t size);

/**
 * Unpack message Crash.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_crash_unpack(
    struct bmw_e9x_e8x_crash_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Crash.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_crash_init(struct bmw_e9x_e8x_crash_t *msg_p);

/**
 * Pack message Status_EMF_KCAN.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_emf_kcan_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_emf_kcan_t *src_p,
    size_t size);

/**
 * Unpack message Status_EMF_KCAN.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_emf_kcan_unpack(
    struct bmw_e9x_e8x_status_emf_kcan_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_EMF_KCAN.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_emf_kcan_init(struct bmw_e9x_e8x_status_emf_kcan_t *msg_p);

/**
 * Pack message Acoustic_request_Kombi.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_acoustic_request_kombi_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_acoustic_request_kombi_t *src_p,
    size_t size);

/**
 * Unpack message Acoustic_request_Kombi.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_acoustic_request_kombi_unpack(
    struct bmw_e9x_e8x_acoustic_request_kombi_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Acoustic_request_Kombi.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_acoustic_request_kombi_init(struct bmw_e9x_e8x_acoustic_request_kombi_t *msg_p);

/**
 * Pack message Control_Display_Shiftlights.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_control_display_shiftlights_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_control_display_shiftlights_t *src_p,
    size_t size);

/**
 * Unpack message Control_Display_Shiftlights.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_control_display_shiftlights_unpack(
    struct bmw_e9x_e8x_control_display_shiftlights_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Control_Display_Shiftlights.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_control_display_shiftlights_init(struct bmw_e9x_e8x_control_display_shiftlights_t *msg_p);

/**
 * Pack message Memory_adjustment.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_memory_adjustment_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_memory_adjustment_t *src_p,
    size_t size);

/**
 * Unpack message Memory_adjustment.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_memory_adjustment_unpack(
    struct bmw_e9x_e8x_memory_adjustment_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Memory_adjustment.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_memory_adjustment_init(struct bmw_e9x_e8x_memory_adjustment_t *msg_p);

/**
 * Pack message Steering_column_control.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_steering_column_control_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_steering_column_control_t *src_p,
    size_t size);

/**
 * Unpack message Steering_column_control.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_steering_column_control_unpack(
    struct bmw_e9x_e8x_steering_column_control_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Steering_column_control.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_steering_column_control_init(struct bmw_e9x_e8x_steering_column_control_t *msg_p);

/**
 * Pack message Position_steering_column.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_position_steering_column_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_position_steering_column_t *src_p,
    size_t size);

/**
 * Unpack message Position_steering_column.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_position_steering_column_unpack(
    struct bmw_e9x_e8x_position_steering_column_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Position_steering_column.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_position_steering_column_init(struct bmw_e9x_e8x_position_steering_column_t *msg_p);

/**
 * Pack message Operation_HUD.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_hud_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_hud_t *src_p,
    size_t size);

/**
 * Unpack message Operation_HUD.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_hud_unpack(
    struct bmw_e9x_e8x_operation_hud_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_HUD.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_hud_init(struct bmw_e9x_e8x_operation_hud_t *msg_p);

/**
 * Pack message Status_HUD.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_hud_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_hud_t *src_p,
    size_t size);

/**
 * Unpack message Status_HUD.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_hud_unpack(
    struct bmw_e9x_e8x_status_hud_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_HUD.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_hud_init(struct bmw_e9x_e8x_status_hud_t *msg_p);

/**
 * Pack message Height_levels_air_spring.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_height_levels_air_spring_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_height_levels_air_spring_t *src_p,
    size_t size);

/**
 * Unpack message Height_levels_air_spring.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_height_levels_air_spring_unpack(
    struct bmw_e9x_e8x_height_levels_air_spring_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Height_levels_air_spring.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_height_levels_air_spring_init(struct bmw_e9x_e8x_height_levels_air_spring_t *msg_p);

/**
 * Pack message Operation_NightVision.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_night_vision_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_night_vision_t *src_p,
    size_t size);

/**
 * Unpack message Operation_NightVision.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_night_vision_unpack(
    struct bmw_e9x_e8x_operation_night_vision_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_NightVision.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_night_vision_init(struct bmw_e9x_e8x_operation_night_vision_t *msg_p);

/**
 * Pack message Status_NightVision.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_night_vision_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_night_vision_t *src_p,
    size_t size);

/**
 * Unpack message Status_NightVision.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_night_vision_unpack(
    struct bmw_e9x_e8x_status_night_vision_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_NightVision.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_night_vision_init(struct bmw_e9x_e8x_status_night_vision_t *msg_p);

/**
 * Pack message Operation_push_button_NSW.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_push_button_nsw_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_push_button_nsw_t *src_p,
    size_t size);

/**
 * Unpack message Operation_push_button_NSW.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_push_button_nsw_unpack(
    struct bmw_e9x_e8x_operation_push_button_nsw_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_push_button_NSW.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_push_button_nsw_init(struct bmw_e9x_e8x_operation_push_button_nsw_t *msg_p);

/**
 * Pack message Operation_special_function.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_special_function_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_special_function_t *src_p,
    size_t size);

/**
 * Unpack message Operation_special_function.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_special_function_unpack(
    struct bmw_e9x_e8x_operation_special_function_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_special_function.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_special_function_init(struct bmw_e9x_e8x_operation_special_function_t *msg_p);

/**
 * Pack message Status_BFS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_bfs_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_bfs_t *src_p,
    size_t size);

/**
 * Unpack message Status_BFS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_bfs_unpack(
    struct bmw_e9x_e8x_status_bfs_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_BFS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_bfs_init(struct bmw_e9x_e8x_status_bfs_t *msg_p);

/**
 * Pack message Operation_push_button_NSL.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_push_button_nsl_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_push_button_nsl_t *src_p,
    size_t size);

/**
 * Unpack message Operation_push_button_NSL.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_push_button_nsl_unpack(
    struct bmw_e9x_e8x_operation_push_button_nsl_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_push_button_NSL.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_push_button_nsl_init(struct bmw_e9x_e8x_operation_push_button_nsl_t *msg_p);

/**
 * Pack message Status_BFSH.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_bfsh_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_bfsh_t *src_p,
    size_t size);

/**
 * Unpack message Status_BFSH.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_bfsh_unpack(
    struct bmw_e9x_e8x_status_bfsh_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_BFSH.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_bfsh_init(struct bmw_e9x_e8x_status_bfsh_t *msg_p);

/**
 * Pack message Status_FAS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_fas_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_fas_t *src_p,
    size_t size);

/**
 * Unpack message Status_FAS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_fas_unpack(
    struct bmw_e9x_e8x_status_fas_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_FAS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_fas_init(struct bmw_e9x_e8x_status_fas_t *msg_p);

/**
 * Pack message Status_FASH.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_fash_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_fash_t *src_p,
    size_t size);

/**
 * Unpack message Status_FASH.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_fash_unpack(
    struct bmw_e9x_e8x_status_fash_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_FASH.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_fash_init(struct bmw_e9x_e8x_status_fash_t *msg_p);

/**
 * Pack message Status_radio_key.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_radio_key_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_radio_key_t *src_p,
    size_t size);

/**
 * Unpack message Status_radio_key.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_radio_key_unpack(
    struct bmw_e9x_e8x_status_radio_key_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_radio_key.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_radio_key_init(struct bmw_e9x_e8x_status_radio_key_t *msg_p);

/**
 * Pack message Status_climate_front_extended.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_climate_front_extended_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_climate_front_extended_t *src_p,
    size_t size);

/**
 * Unpack message Status_climate_front_extended.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_climate_front_extended_unpack(
    struct bmw_e9x_e8x_status_climate_front_extended_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_climate_front_extended.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_climate_front_extended_init(struct bmw_e9x_e8x_status_climate_front_extended_t *msg_p);

/**
 * Pack message Request_display_climate.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_request_display_climate_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_request_display_climate_t *src_p,
    size_t size);

/**
 * Unpack message Request_display_climate.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_request_display_climate_unpack(
    struct bmw_e9x_e8x_request_display_climate_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Request_display_climate.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_request_display_climate_init(struct bmw_e9x_e8x_request_display_climate_t *msg_p);

/**
 * Pack message Status_Klima_Fond.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_klima_fond_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_klima_fond_t *src_p,
    size_t size);

/**
 * Unpack message Status_Klima_Fond.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_klima_fond_unpack(
    struct bmw_e9x_e8x_status_klima_fond_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_Klima_Fond.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_klima_fond_init(struct bmw_e9x_e8x_status_klima_fond_t *msg_p);

/**
 * Pack message Status_air_conditioning_front_control_unit.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_air_conditioning_front_control_unit_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_air_conditioning_front_control_unit_t *src_p,
    size_t size);

/**
 * Unpack message Status_air_conditioning_front_control_unit.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_air_conditioning_front_control_unit_unpack(
    struct bmw_e9x_e8x_status_air_conditioning_front_control_unit_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_air_conditioning_front_control_unit.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_air_conditioning_front_control_unit_init(struct bmw_e9x_e8x_status_air_conditioning_front_control_unit_t *msg_p);

/**
 * Pack message Status_rear_view_camera.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_rear_view_camera_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_rear_view_camera_t *src_p,
    size_t size);

/**
 * Unpack message Status_rear_view_camera.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_rear_view_camera_unpack(
    struct bmw_e9x_e8x_status_rear_view_camera_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_rear_view_camera.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_rear_view_camera_init(struct bmw_e9x_e8x_status_rear_view_camera_t *msg_p);

/**
 * Pack message Control_rear_view_camera.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_control_rear_view_camera_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_control_rear_view_camera_t *src_p,
    size_t size);

/**
 * Unpack message Control_rear_view_camera.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_control_rear_view_camera_unpack(
    struct bmw_e9x_e8x_control_rear_view_camera_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Control_rear_view_camera.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_control_rear_view_camera_init(struct bmw_e9x_e8x_control_rear_view_camera_t *msg_p);

/**
 * Pack message Status_PDC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_pdc_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_pdc_t *src_p,
    size_t size);

/**
 * Unpack message Status_PDC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_pdc_unpack(
    struct bmw_e9x_e8x_status_pdc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_PDC.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_pdc_init(struct bmw_e9x_e8x_status_pdc_t *msg_p);

/**
 * Pack message Status_door_sensors.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_door_sensors_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_door_sensors_t *src_p,
    size_t size);

/**
 * Unpack message Status_door_sensors.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_door_sensors_unpack(
    struct bmw_e9x_e8x_status_door_sensors_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_door_sensors.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_door_sensors_init(struct bmw_e9x_e8x_status_door_sensors_t *msg_p);

/**
 * Pack message Wiper_status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_wiper_status_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_wiper_status_t *src_p,
    size_t size);

/**
 * Unpack message Wiper_status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_wiper_status_unpack(
    struct bmw_e9x_e8x_wiper_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Wiper_status.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_wiper_status_init(struct bmw_e9x_e8x_wiper_status_t *msg_p);

/**
 * Pack message Challenge_Passive_Access.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_challenge_passive_access_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_challenge_passive_access_t *src_p,
    size_t size);

/**
 * Unpack message Challenge_Passive_Access.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_challenge_passive_access_unpack(
    struct bmw_e9x_e8x_challenge_passive_access_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Challenge_Passive_Access.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_challenge_passive_access_init(struct bmw_e9x_e8x_challenge_passive_access_t *msg_p);

/**
 * Pack message Status_Transmission_Passive_Access.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_transmission_passive_access_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_transmission_passive_access_t *src_p,
    size_t size);

/**
 * Unpack message Status_Transmission_Passive_Access.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_transmission_passive_access_unpack(
    struct bmw_e9x_e8x_status_transmission_passive_access_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_Transmission_Passive_Access.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_transmission_passive_access_init(struct bmw_e9x_e8x_status_transmission_passive_access_t *msg_p);

/**
 * Pack message Operation_of_climate_additional_programs.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_of_climate_additional_programs_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_of_climate_additional_programs_t *src_p,
    size_t size);

/**
 * Unpack message Operation_of_climate_additional_programs.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_of_climate_additional_programs_unpack(
    struct bmw_e9x_e8x_operation_of_climate_additional_programs_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_of_climate_additional_programs.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_of_climate_additional_programs_init(struct bmw_e9x_e8x_operation_of_climate_additional_programs_t *msg_p);

/**
 * Pack message Operation_blinds_MK.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_blinds_mk_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_blinds_mk_t *src_p,
    size_t size);

/**
 * Unpack message Operation_blinds_MK.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_blinds_mk_unpack(
    struct bmw_e9x_e8x_operation_blinds_mk_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_blinds_MK.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_blinds_mk_init(struct bmw_e9x_e8x_operation_blinds_mk_t *msg_p);

/**
 * Pack message Control_FH_SHD_central_comfort.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_control_fh_shd_central_comfort_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_control_fh_shd_central_comfort_t *src_p,
    size_t size);

/**
 * Unpack message Control_FH_SHD_central_comfort.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_control_fh_shd_central_comfort_unpack(
    struct bmw_e9x_e8x_control_fh_shd_central_comfort_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Control_FH_SHD_central_comfort.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_control_fh_shd_central_comfort_init(struct bmw_e9x_e8x_control_fh_shd_central_comfort_t *msg_p);

/**
 * Pack message Status_Shiftlights.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_shiftlights_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_shiftlights_t *src_p,
    size_t size);

/**
 * Unpack message Status_Shiftlights.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_shiftlights_unpack(
    struct bmw_e9x_e8x_status_shiftlights_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_Shiftlights.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_shiftlights_init(struct bmw_e9x_e8x_status_shiftlights_t *msg_p);

/**
 * Pack message Status_convertible_top_manual_convertible.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_convertible_top_manual_convertible_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_convertible_top_manual_convertible_t *src_p,
    size_t size);

/**
 * Unpack message Status_convertible_top_manual_convertible.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_convertible_top_manual_convertible_unpack(
    struct bmw_e9x_e8x_status_convertible_top_manual_convertible_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_convertible_top_manual_convertible.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_convertible_top_manual_convertible_init(struct bmw_e9x_e8x_status_convertible_top_manual_convertible_t *msg_p);

/**
 * Pack message Status_convertible_top_convertible.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_convertible_top_convertible_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_convertible_top_convertible_t *src_p,
    size_t size);

/**
 * Unpack message Status_convertible_top_convertible.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_convertible_top_convertible_unpack(
    struct bmw_e9x_e8x_status_convertible_top_convertible_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_convertible_top_convertible.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_convertible_top_convertible_init(struct bmw_e9x_e8x_status_convertible_top_convertible_t *msg_p);

/**
 * Pack message Status_central_locking_convertible_top.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_central_locking_convertible_top_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_central_locking_convertible_top_t *src_p,
    size_t size);

/**
 * Unpack message Status_central_locking_convertible_top.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_central_locking_convertible_top_unpack(
    struct bmw_e9x_e8x_status_central_locking_convertible_top_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_central_locking_convertible_top.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_central_locking_convertible_top_init(struct bmw_e9x_e8x_status_central_locking_convertible_top_t *msg_p);

/**
 * Pack message Control_security_vehicle_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_control_security_vehicle_2_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_control_security_vehicle_2_t *src_p,
    size_t size);

/**
 * Unpack message Control_security_vehicle_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_control_security_vehicle_2_unpack(
    struct bmw_e9x_e8x_control_security_vehicle_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Control_security_vehicle_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_control_security_vehicle_2_init(struct bmw_e9x_e8x_control_security_vehicle_2_t *msg_p);

/**
 * Pack message Control_remote_start_safety_vehicle.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_control_remote_start_safety_vehicle_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_control_remote_start_safety_vehicle_t *src_p,
    size_t size);

/**
 * Unpack message Control_remote_start_safety_vehicle.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_control_remote_start_safety_vehicle_unpack(
    struct bmw_e9x_e8x_control_remote_start_safety_vehicle_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Control_remote_start_safety_vehicle.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_control_remote_start_safety_vehicle_init(struct bmw_e9x_e8x_control_remote_start_safety_vehicle_t *msg_p);

/**
 * Pack message Electrochromic_control.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_electrochromic_control_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_electrochromic_control_t *src_p,
    size_t size);

/**
 * Unpack message Electrochromic_control.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_electrochromic_control_unpack(
    struct bmw_e9x_e8x_electrochromic_control_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Electrochromic_control.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_electrochromic_control_init(struct bmw_e9x_e8x_electrochromic_control_t *msg_p);

/**
 * Pack message Pushbutton_vertical_dynamics.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_pushbutton_vertical_dynamics_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_pushbutton_vertical_dynamics_t *src_p,
    size_t size);

/**
 * Unpack message Pushbutton_vertical_dynamics.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_pushbutton_vertical_dynamics_unpack(
    struct bmw_e9x_e8x_pushbutton_vertical_dynamics_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Pushbutton_vertical_dynamics.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_pushbutton_vertical_dynamics_init(struct bmw_e9x_e8x_pushbutton_vertical_dynamics_t *msg_p);

/**
 * Pack message Operation_pushbutton_sport.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_pushbutton_sport_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_pushbutton_sport_t *src_p,
    size_t size);

/**
 * Unpack message Operation_pushbutton_sport.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_pushbutton_sport_unpack(
    struct bmw_e9x_e8x_operation_pushbutton_sport_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_pushbutton_sport.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_pushbutton_sport_init(struct bmw_e9x_e8x_operation_pushbutton_sport_t *msg_p);

/**
 * Pack message Control_response_hydrogen_vehicle.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_control_response_hydrogen_vehicle_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_control_response_hydrogen_vehicle_t *src_p,
    size_t size);

/**
 * Unpack message Control_response_hydrogen_vehicle.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_control_response_hydrogen_vehicle_unpack(
    struct bmw_e9x_e8x_control_response_hydrogen_vehicle_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Control_response_hydrogen_vehicle.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_control_response_hydrogen_vehicle_init(struct bmw_e9x_e8x_control_response_hydrogen_vehicle_t *msg_p);

/**
 * Pack message Control_high_beam_assistant.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_control_high_beam_assistant_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_control_high_beam_assistant_t *src_p,
    size_t size);

/**
 * Unpack message Control_high_beam_assistant.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_control_high_beam_assistant_unpack(
    struct bmw_e9x_e8x_control_high_beam_assistant_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Control_high_beam_assistant.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_control_high_beam_assistant_init(struct bmw_e9x_e8x_control_high_beam_assistant_t *msg_p);

/**
 * Pack message Central_locking_control_for_security_vehicle.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_central_locking_control_for_security_vehicle_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_central_locking_control_for_security_vehicle_t *src_p,
    size_t size);

/**
 * Unpack message Central_locking_control_for_security_vehicle.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_central_locking_control_for_security_vehicle_unpack(
    struct bmw_e9x_e8x_central_locking_control_for_security_vehicle_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Central_locking_control_for_security_vehicle.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_central_locking_control_for_security_vehicle_init(struct bmw_e9x_e8x_central_locking_control_for_security_vehicle_t *msg_p);

/**
 * Pack message Remote_control_FondCommander.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_remote_control_fond_commander_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_remote_control_fond_commander_t *src_p,
    size_t size);

/**
 * Unpack message Remote_control_FondCommander.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_remote_control_fond_commander_unpack(
    struct bmw_e9x_e8x_remote_control_fond_commander_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Remote_control_FondCommander.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_remote_control_fond_commander_init(struct bmw_e9x_e8x_remote_control_fond_commander_t *msg_p);

/**
 * Pack message Central_locking_control.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_central_locking_control_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_central_locking_control_t *src_p,
    size_t size);

/**
 * Unpack message Central_locking_control.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_central_locking_control_unpack(
    struct bmw_e9x_e8x_central_locking_control_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Central_locking_control.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_central_locking_control_init(struct bmw_e9x_e8x_central_locking_control_t *msg_p);

/**
 * Pack message Operation_of_climate_stand_functions.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_of_climate_stand_functions_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_of_climate_stand_functions_t *src_p,
    size_t size);

/**
 * Unpack message Operation_of_climate_stand_functions.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_of_climate_stand_functions_unpack(
    struct bmw_e9x_e8x_operation_of_climate_stand_functions_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_of_climate_stand_functions.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_of_climate_stand_functions_init(struct bmw_e9x_e8x_operation_of_climate_stand_functions_t *msg_p);

/**
 * Pack message Operation_personalization.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_personalization_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_personalization_t *src_p,
    size_t size);

/**
 * Unpack message Operation_personalization.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_personalization_unpack(
    struct bmw_e9x_e8x_operation_personalization_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_personalization.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_personalization_init(struct bmw_e9x_e8x_operation_personalization_t *msg_p);

/**
 * Pack message DWA_Alarm.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_dwa_alarm_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_dwa_alarm_t *src_p,
    size_t size);

/**
 * Unpack message DWA_Alarm.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_dwa_alarm_unpack(
    struct bmw_e9x_e8x_dwa_alarm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from DWA_Alarm.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_dwa_alarm_init(struct bmw_e9x_e8x_dwa_alarm_t *msg_p);

/**
 * Pack message Control_horn_DWA.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_control_horn_dwa_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_control_horn_dwa_t *src_p,
    size_t size);

/**
 * Unpack message Control_horn_DWA.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_control_horn_dwa_unpack(
    struct bmw_e9x_e8x_control_horn_dwa_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Control_horn_DWA.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_control_horn_dwa_init(struct bmw_e9x_e8x_control_horn_dwa_t *msg_p);

/**
 * Pack message Operation_onboard_computer.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_onboard_computer_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_onboard_computer_t *src_p,
    size_t size);

/**
 * Unpack message Operation_onboard_computer.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_onboard_computer_unpack(
    struct bmw_e9x_e8x_operation_onboard_computer_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_onboard_computer.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_onboard_computer_init(struct bmw_e9x_e8x_operation_onboard_computer_t *msg_p);

/**
 * Pack message Operation_RSE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_rse_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_rse_t *src_p,
    size_t size);

/**
 * Unpack message Operation_RSE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_rse_unpack(
    struct bmw_e9x_e8x_operation_rse_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_RSE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_rse_init(struct bmw_e9x_e8x_operation_rse_t *msg_p);

/**
 * Pack message Stopwatch.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_stopwatch_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_stopwatch_t *src_p,
    size_t size);

/**
 * Unpack message Stopwatch.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_stopwatch_unpack(
    struct bmw_e9x_e8x_stopwatch_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Stopwatch.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_stopwatch_init(struct bmw_e9x_e8x_stopwatch_t *msg_p);

/**
 * Pack message Request_switching_display.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_request_switching_display_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_request_switching_display_t *src_p,
    size_t size);

/**
 * Unpack message Request_switching_display.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_request_switching_display_unpack(
    struct bmw_e9x_e8x_request_switching_display_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Request_switching_display.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_request_switching_display_init(struct bmw_e9x_e8x_request_switching_display_t *msg_p);

/**
 * Pack message Switch_status_display.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_switch_status_display_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_switch_status_display_t *src_p,
    size_t size);

/**
 * Unpack message Switch_status_display.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_switch_status_display_unpack(
    struct bmw_e9x_e8x_switch_status_display_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Switch_status_display.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_switch_status_display_init(struct bmw_e9x_e8x_switch_status_display_t *msg_p);

/**
 * Pack message Water_valve_control.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_water_valve_control_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_water_valve_control_t *src_p,
    size_t size);

/**
 * Unpack message Water_valve_control.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_water_valve_control_unpack(
    struct bmw_e9x_e8x_water_valve_control_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Water_valve_control.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_water_valve_control_init(struct bmw_e9x_e8x_water_valve_control_t *msg_p);

/**
 * Pack message Temperatur_Ist_Fond.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_temperatur_ist_fond_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_temperatur_ist_fond_t *src_p,
    size_t size);

/**
 * Unpack message Temperatur_Ist_Fond.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_temperatur_ist_fond_unpack(
    struct bmw_e9x_e8x_temperatur_ist_fond_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Temperatur_Ist_Fond.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_temperatur_ist_fond_init(struct bmw_e9x_e8x_temperatur_ist_fond_t *msg_p);

/**
 * Pack message Display_Kombination_extended.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_display_kombination_extended_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_display_kombination_extended_t *src_p,
    size_t size);

/**
 * Unpack message Display_Kombination_extended.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_display_kombination_extended_unpack(
    struct bmw_e9x_e8x_display_kombination_extended_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Display_Kombination_extended.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_display_kombination_extended_init(struct bmw_e9x_e8x_display_kombination_extended_t *msg_p);

/**
 * Pack message Outside_temperature.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_outside_temperature_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_outside_temperature_t *src_p,
    size_t size);

/**
 * Unpack message Outside_temperature.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_outside_temperature_unpack(
    struct bmw_e9x_e8x_outside_temperature_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Outside_temperature.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_outside_temperature_init(struct bmw_e9x_e8x_outside_temperature_t *msg_p);

/**
 * Pack message Control_monitor_rear.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_control_monitor_rear_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_control_monitor_rear_t *src_p,
    size_t size);

/**
 * Unpack message Control_monitor_rear.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_control_monitor_rear_unpack(
    struct bmw_e9x_e8x_control_monitor_rear_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Control_monitor_rear.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_control_monitor_rear_init(struct bmw_e9x_e8x_control_monitor_rear_t *msg_p);

/**
 * Pack message Control_monitor.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_control_monitor_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_control_monitor_t *src_p,
    size_t size);

/**
 * Unpack message Control_monitor.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_control_monitor_unpack(
    struct bmw_e9x_e8x_control_monitor_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Control_monitor.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_control_monitor_init(struct bmw_e9x_e8x_control_monitor_t *msg_p);

/**
 * Pack message Status_of_auxiliary_water_pump.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_of_auxiliary_water_pump_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_of_auxiliary_water_pump_t *src_p,
    size_t size);

/**
 * Unpack message Status_of_auxiliary_water_pump.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_of_auxiliary_water_pump_unpack(
    struct bmw_e9x_e8x_status_of_auxiliary_water_pump_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_of_auxiliary_water_pump.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_of_auxiliary_water_pump_init(struct bmw_e9x_e8x_status_of_auxiliary_water_pump_t *msg_p);

/**
 * Pack message Status_Sensor_AUC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_sensor_auc_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_sensor_auc_t *src_p,
    size_t size);

/**
 * Unpack message Status_Sensor_AUC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_sensor_auc_unpack(
    struct bmw_e9x_e8x_status_sensor_auc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_Sensor_AUC.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_sensor_auc_init(struct bmw_e9x_e8x_status_sensor_auc_t *msg_p);

/**
 * Pack message Status_fitting_window_V.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_fitting_window_v_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_fitting_window_v_t *src_p,
    size_t size);

/**
 * Unpack message Status_fitting_window_V.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_fitting_window_v_unpack(
    struct bmw_e9x_e8x_status_fitting_window_v_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_fitting_window_V.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_fitting_window_v_init(struct bmw_e9x_e8x_status_fitting_window_v_t *msg_p);

/**
 * Pack message Status_pressure_refrigeration_circuit.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_pressure_refrigeration_circuit_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_pressure_refrigeration_circuit_t *src_p,
    size_t size);

/**
 * Unpack message Status_pressure_refrigeration_circuit.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_pressure_refrigeration_circuit_unpack(
    struct bmw_e9x_e8x_status_pressure_refrigeration_circuit_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_pressure_refrigeration_circuit.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_pressure_refrigeration_circuit_init(struct bmw_e9x_e8x_status_pressure_refrigeration_circuit_t *msg_p);

/**
 * Pack message Status_stratification_rear.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_stratification_rear_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_stratification_rear_t *src_p,
    size_t size);

/**
 * Unpack message Status_stratification_rear.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_stratification_rear_unpack(
    struct bmw_e9x_e8x_status_stratification_rear_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_stratification_rear.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_stratification_rear_init(struct bmw_e9x_e8x_status_stratification_rear_t *msg_p);

/**
 * Pack message Status_heating_rear_window.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_heating_rear_window_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_heating_rear_window_t *src_p,
    size_t size);

/**
 * Unpack message Status_heating_rear_window.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_heating_rear_window_unpack(
    struct bmw_e9x_e8x_status_heating_rear_window_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_heating_rear_window.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_heating_rear_window_init(struct bmw_e9x_e8x_status_heating_rear_window_t *msg_p);

/**
 * Pack message Status_valve_air_conditioning_compressor.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_valve_air_conditioning_compressor_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_valve_air_conditioning_compressor_t *src_p,
    size_t size);

/**
 * Unpack message Status_valve_air_conditioning_compressor.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_valve_air_conditioning_compressor_unpack(
    struct bmw_e9x_e8x_status_valve_air_conditioning_compressor_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_valve_air_conditioning_compressor.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_valve_air_conditioning_compressor_init(struct bmw_e9x_e8x_status_valve_air_conditioning_compressor_t *msg_p);

/**
 * Pack message Status_tailgate_lift.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_tailgate_lift_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_tailgate_lift_t *src_p,
    size_t size);

/**
 * Unpack message Status_tailgate_lift.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_tailgate_lift_unpack(
    struct bmw_e9x_e8x_status_tailgate_lift_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_tailgate_lift.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_tailgate_lift_init(struct bmw_e9x_e8x_status_tailgate_lift_t *msg_p);

/**
 * Pack message Switch_control_display.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_switch_control_display_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_switch_control_display_t *src_p,
    size_t size);

/**
 * Unpack message Switch_control_display.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_switch_control_display_unpack(
    struct bmw_e9x_e8x_switch_control_display_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Switch_control_display.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_switch_control_display_init(struct bmw_e9x_e8x_switch_control_display_t *msg_p);

/**
 * Pack message Status_setting_video_night_vision.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_setting_video_night_vision_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_setting_video_night_vision_t *src_p,
    size_t size);

/**
 * Unpack message Status_setting_video_night_vision.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_setting_video_night_vision_unpack(
    struct bmw_e9x_e8x_status_setting_video_night_vision_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_setting_video_night_vision.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_setting_video_night_vision_init(struct bmw_e9x_e8x_status_setting_video_night_vision_t *msg_p);

/**
 * Pack message Status_setting_video_rear_view_camera.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_setting_video_rear_view_camera_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_setting_video_rear_view_camera_t *src_p,
    size_t size);

/**
 * Unpack message Status_setting_video_rear_view_camera.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_setting_video_rear_view_camera_unpack(
    struct bmw_e9x_e8x_status_setting_video_rear_view_camera_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_setting_video_rear_view_camera.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_setting_video_rear_view_camera_init(struct bmw_e9x_e8x_status_setting_video_rear_view_camera_t *msg_p);

/**
 * Pack message Status_trailer.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_trailer_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_trailer_t *src_p,
    size_t size);

/**
 * Unpack message Status_trailer.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_trailer_unpack(
    struct bmw_e9x_e8x_status_trailer_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_trailer.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_trailer_init(struct bmw_e9x_e8x_status_trailer_t *msg_p);

/**
 * Pack message Status_of_air_distribution_FA.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_of_air_distribution_fa_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_of_air_distribution_fa_t *src_p,
    size_t size);

/**
 * Unpack message Status_of_air_distribution_FA.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_of_air_distribution_fa_unpack(
    struct bmw_e9x_e8x_status_of_air_distribution_fa_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_of_air_distribution_FA.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_of_air_distribution_fa_init(struct bmw_e9x_e8x_status_of_air_distribution_fa_t *msg_p);

/**
 * Pack message Status_air_distribution_BF.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_air_distribution_bf_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_air_distribution_bf_t *src_p,
    size_t size);

/**
 * Unpack message Status_air_distribution_BF.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_air_distribution_bf_unpack(
    struct bmw_e9x_e8x_status_air_distribution_bf_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_air_distribution_BF.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_air_distribution_bf_init(struct bmw_e9x_e8x_status_air_distribution_bf_t *msg_p);

/**
 * Pack message Status_climate_additional_programs.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_climate_additional_programs_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_climate_additional_programs_t *src_p,
    size_t size);

/**
 * Unpack message Status_climate_additional_programs.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_climate_additional_programs_unpack(
    struct bmw_e9x_e8x_status_climate_additional_programs_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_climate_additional_programs.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_climate_additional_programs_init(struct bmw_e9x_e8x_status_climate_additional_programs_t *msg_p);

/**
 * Pack message Status_air_condition_functions.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_air_condition_functions_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_air_condition_functions_t *src_p,
    size_t size);

/**
 * Unpack message Status_air_condition_functions.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_air_condition_functions_unpack(
    struct bmw_e9x_e8x_status_air_condition_functions_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_air_condition_functions.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_air_condition_functions_init(struct bmw_e9x_e8x_status_air_condition_functions_t *msg_p);

/**
 * Pack message Status_driver_detection.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_driver_detection_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_driver_detection_t *src_p,
    size_t size);

/**
 * Unpack message Status_driver_detection.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_driver_detection_unpack(
    struct bmw_e9x_e8x_status_driver_detection_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_driver_detection.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_driver_detection_init(struct bmw_e9x_e8x_status_driver_detection_t *msg_p);

/**
 * Pack message Display_switching_instruction.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_display_switching_instruction_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_display_switching_instruction_t *src_p,
    size_t size);

/**
 * Unpack message Display_switching_instruction.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_display_switching_instruction_unpack(
    struct bmw_e9x_e8x_display_switching_instruction_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Display_switching_instruction.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_display_switching_instruction_init(struct bmw_e9x_e8x_display_switching_instruction_t *msg_p);

/**
 * Pack message Air_conditioning_control_SH_ZH_auxiliary_water_pump.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_air_conditioning_control_sh_zh_auxiliary_water_pump_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_air_conditioning_control_sh_zh_auxiliary_water_pump_t *src_p,
    size_t size);

/**
 * Unpack message Air_conditioning_control_SH_ZH_auxiliary_water_pump.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_air_conditioning_control_sh_zh_auxiliary_water_pump_unpack(
    struct bmw_e9x_e8x_air_conditioning_control_sh_zh_auxiliary_water_pump_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Air_conditioning_control_SH_ZH_auxiliary_water_pump.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_air_conditioning_control_sh_zh_auxiliary_water_pump_init(struct bmw_e9x_e8x_air_conditioning_control_sh_zh_auxiliary_water_pump_t *msg_p);

/**
 * Pack message Units.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_units_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_units_t *src_p,
    size_t size);

/**
 * Unpack message Units.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_units_unpack(
    struct bmw_e9x_e8x_units_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Units.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_units_init(struct bmw_e9x_e8x_units_t *msg_p);

/**
 * Pack message Status_RSE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_rse_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_rse_t *src_p,
    size_t size);

/**
 * Unpack message Status_RSE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_rse_unpack(
    struct bmw_e9x_e8x_status_rse_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_RSE.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_rse_init(struct bmw_e9x_e8x_status_rse_t *msg_p);

/**
 * Pack message Status_Gang.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_gang_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_gang_t *src_p,
    size_t size);

/**
 * Unpack message Status_Gang.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_gang_unpack(
    struct bmw_e9x_e8x_status_gang_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_Gang.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_gang_init(struct bmw_e9x_e8x_status_gang_t *msg_p);

/**
 * Pack message Operation_button_convertible_top.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_button_convertible_top_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_button_convertible_top_t *src_p,
    size_t size);

/**
 * Unpack message Operation_button_convertible_top.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_button_convertible_top_unpack(
    struct bmw_e9x_e8x_operation_button_convertible_top_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_button_convertible_top.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_button_convertible_top_init(struct bmw_e9x_e8x_operation_button_convertible_top_t *msg_p);

/**
 * Pack message Vehicle_tilt.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_vehicle_tilt_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_vehicle_tilt_t *src_p,
    size_t size);

/**
 * Unpack message Vehicle_tilt.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_vehicle_tilt_unpack(
    struct bmw_e9x_e8x_vehicle_tilt_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Vehicle_tilt.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_vehicle_tilt_init(struct bmw_e9x_e8x_vehicle_tilt_t *msg_p);

/**
 * Pack message Operation_button_flap_convertible_top.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_button_flap_convertible_top_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_button_flap_convertible_top_t *src_p,
    size_t size);

/**
 * Unpack message Operation_button_flap_convertible_top.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_button_flap_convertible_top_unpack(
    struct bmw_e9x_e8x_operation_button_flap_convertible_top_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_button_flap_convertible_top.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_button_flap_convertible_top_init(struct bmw_e9x_e8x_operation_button_flap_convertible_top_t *msg_p);

/**
 * Pack message Status_MSA.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_msa_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_msa_t *src_p,
    size_t size);

/**
 * Unpack message Status_MSA.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_msa_unpack(
    struct bmw_e9x_e8x_status_msa_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_MSA.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_msa_init(struct bmw_e9x_e8x_status_msa_t *msg_p);

/**
 * Pack message Refill_quantity.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_refill_quantity_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_refill_quantity_t *src_p,
    size_t size);

/**
 * Unpack message Refill_quantity.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_refill_quantity_unpack(
    struct bmw_e9x_e8x_refill_quantity_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Refill_quantity.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_refill_quantity_init(struct bmw_e9x_e8x_refill_quantity_t *msg_p);

/**
 * Pack message Service_Call_Teleservice.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_service_call_teleservice_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_service_call_teleservice_t *src_p,
    size_t size);

/**
 * Unpack message Service_Call_Teleservice.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_service_call_teleservice_unpack(
    struct bmw_e9x_e8x_service_call_teleservice_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Service_Call_Teleservice.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_service_call_teleservice_init(struct bmw_e9x_e8x_service_call_teleservice_t *msg_p);

/**
 * Pack message Status_Service_Call_Teleservice.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_service_call_teleservice_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_service_call_teleservice_t *src_p,
    size_t size);

/**
 * Unpack message Status_Service_Call_Teleservice.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_service_call_teleservice_unpack(
    struct bmw_e9x_e8x_status_service_call_teleservice_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_Service_Call_Teleservice.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_service_call_teleservice_init(struct bmw_e9x_e8x_status_service_call_teleservice_t *msg_p);

/**
 * Pack message Status_driving_light.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_driving_light_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_driving_light_t *src_p,
    size_t size);

/**
 * Unpack message Status_driving_light.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_driving_light_unpack(
    struct bmw_e9x_e8x_status_driving_light_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_driving_light.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_driving_light_init(struct bmw_e9x_e8x_status_driving_light_t *msg_p);

/**
 * Pack message Vehicle_mode.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_vehicle_mode_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_vehicle_mode_t *src_p,
    size_t size);

/**
 * Unpack message Vehicle_mode.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_vehicle_mode_unpack(
    struct bmw_e9x_e8x_vehicle_mode_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Vehicle_mode.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_vehicle_mode_init(struct bmw_e9x_e8x_vehicle_mode_t *msg_p);

/**
 * Pack message Operation_button_parking_aids.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_button_parking_aids_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_button_parking_aids_t *src_p,
    size_t size);

/**
 * Unpack message Operation_button_parking_aids.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_button_parking_aids_unpack(
    struct bmw_e9x_e8x_operation_button_parking_aids_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_button_parking_aids.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_button_parking_aids_init(struct bmw_e9x_e8x_operation_button_parking_aids_t *msg_p);

/**
 * Pack message Status_antennas_Passive_Access.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_antennas_passive_access_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_antennas_passive_access_t *src_p,
    size_t size);

/**
 * Unpack message Status_antennas_Passive_Access.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_antennas_passive_access_unpack(
    struct bmw_e9x_e8x_status_antennas_passive_access_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_antennas_Passive_Access.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_antennas_passive_access_init(struct bmw_e9x_e8x_status_antennas_passive_access_t *msg_p);

/**
 * Pack message Operation_push_button_RDC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_push_button_rdc_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_push_button_rdc_t *src_p,
    size_t size);

/**
 * Unpack message Operation_push_button_RDC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_push_button_rdc_unpack(
    struct bmw_e9x_e8x_operation_push_button_rdc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_push_button_RDC.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_push_button_rdc_init(struct bmw_e9x_e8x_operation_push_button_rdc_t *msg_p);

/**
 * Pack message Operation_button_HDC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_button_hdc_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_button_hdc_t *src_p,
    size_t size);

/**
 * Unpack message Operation_button_HDC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_button_hdc_unpack(
    struct bmw_e9x_e8x_operation_button_hdc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_button_HDC.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_button_hdc_init(struct bmw_e9x_e8x_operation_button_hdc_t *msg_p);

/**
 * Pack message Operation_of_tailgate_interior_button.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_of_tailgate_interior_button_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_of_tailgate_interior_button_t *src_p,
    size_t size);

/**
 * Unpack message Operation_of_tailgate_interior_button.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_of_tailgate_interior_button_unpack(
    struct bmw_e9x_e8x_operation_of_tailgate_interior_button_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_of_tailgate_interior_button.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_of_tailgate_interior_button_init(struct bmw_e9x_e8x_operation_of_tailgate_interior_button_t *msg_p);

/**
 * Pack message Status_tire_pressure.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_tire_pressure_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_tire_pressure_t *src_p,
    size_t size);

/**
 * Unpack message Status_tire_pressure.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_tire_pressure_unpack(
    struct bmw_e9x_e8x_status_tire_pressure_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_tire_pressure.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_tire_pressure_init(struct bmw_e9x_e8x_status_tire_pressure_t *msg_p);

/**
 * Pack message Operation_button_camera_BF.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_button_camera_bf_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_button_camera_bf_t *src_p,
    size_t size);

/**
 * Unpack message Operation_button_camera_BF.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_button_camera_bf_unpack(
    struct bmw_e9x_e8x_operation_button_camera_bf_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_button_camera_BF.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_button_camera_bf_init(struct bmw_e9x_e8x_operation_button_camera_bf_t *msg_p);

/**
 * Pack message Damper_current.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_damper_current_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_damper_current_t *src_p,
    size_t size);

/**
 * Unpack message Damper_current.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_damper_current_unpack(
    struct bmw_e9x_e8x_damper_current_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Damper_current.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_damper_current_init(struct bmw_e9x_e8x_damper_current_t *msg_p);

/**
 * Pack message Status_damper_program.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_damper_program_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_damper_program_t *src_p,
    size_t size);

/**
 * Unpack message Status_damper_program.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_damper_program_unpack(
    struct bmw_e9x_e8x_status_damper_program_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_damper_program.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_damper_program_init(struct bmw_e9x_e8x_status_damper_program_t *msg_p);

/**
 * Pack message Relativzeit.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_relativzeit_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_relativzeit_t *src_p,
    size_t size);

/**
 * Unpack message Relativzeit.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_relativzeit_unpack(
    struct bmw_e9x_e8x_relativzeit_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Relativzeit.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_relativzeit_init(struct bmw_e9x_e8x_relativzeit_t *msg_p);

/**
 * Pack message Display_HDC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_display_hdc_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_display_hdc_t *src_p,
    size_t size);

/**
 * Unpack message Display_HDC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_display_hdc_unpack(
    struct bmw_e9x_e8x_display_hdc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Display_HDC.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_display_hdc_init(struct bmw_e9x_e8x_display_hdc_t *msg_p);

/**
 * Pack message Status_climate_internal_control_info.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_climate_internal_control_info_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_climate_internal_control_info_t *src_p,
    size_t size);

/**
 * Unpack message Status_climate_internal_control_info.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_climate_internal_control_info_unpack(
    struct bmw_e9x_e8x_status_climate_internal_control_info_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_climate_internal_control_info.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_climate_internal_control_info_init(struct bmw_e9x_e8x_status_climate_internal_control_info_t *msg_p);

/**
 * Pack message Programming_of_step_cruise_control.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_programming_of_step_cruise_control_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_programming_of_step_cruise_control_t *src_p,
    size_t size);

/**
 * Unpack message Programming_of_step_cruise_control.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_programming_of_step_cruise_control_unpack(
    struct bmw_e9x_e8x_programming_of_step_cruise_control_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Programming_of_step_cruise_control.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_programming_of_step_cruise_control_init(struct bmw_e9x_e8x_programming_of_step_cruise_control_t *msg_p);

/**
 * Pack message Driver_display_speed_range.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_driver_display_speed_range_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_driver_display_speed_range_t *src_p,
    size_t size);

/**
 * Unpack message Driver_display_speed_range.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_driver_display_speed_range_unpack(
    struct bmw_e9x_e8x_driver_display_speed_range_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Driver_display_speed_range.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_driver_display_speed_range_init(struct bmw_e9x_e8x_driver_display_speed_range_t *msg_p);

/**
 * Pack message Display_check_control_message_role.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_display_check_control_message_role_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_display_check_control_message_role_t *src_p,
    size_t size);

/**
 * Unpack message Display_check_control_message_role.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_display_check_control_message_role_unpack(
    struct bmw_e9x_e8x_display_check_control_message_role_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Display_check_control_message_role.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_display_check_control_message_role_init(struct bmw_e9x_e8x_display_check_control_message_role_t *msg_p);

/**
 * Pack message Control_display_check_control_message.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_control_display_check_control_message_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_control_display_check_control_message_t *src_p,
    size_t size);

/**
 * Unpack message Control_display_check_control_message.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_control_display_check_control_message_unpack(
    struct bmw_e9x_e8x_control_display_check_control_message_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Control_display_check_control_message.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_control_display_check_control_message_init(struct bmw_e9x_e8x_control_display_check_control_message_t *msg_p);

/**
 * Pack message Status_display_climate.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_display_climate_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_display_climate_t *src_p,
    size_t size);

/**
 * Unpack message Status_display_climate.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_display_climate_unpack(
    struct bmw_e9x_e8x_status_display_climate_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_display_climate.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_display_climate_init(struct bmw_e9x_e8x_status_display_climate_t *msg_p);

/**
 * Pack message Status_Monitor_Front.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_monitor_front_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_monitor_front_t *src_p,
    size_t size);

/**
 * Unpack message Status_Monitor_Front.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_monitor_front_unpack(
    struct bmw_e9x_e8x_status_monitor_front_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_Monitor_Front.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_monitor_front_init(struct bmw_e9x_e8x_status_monitor_front_t *msg_p);

/**
 * Pack message Status_Monitor_Fond_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_monitor_fond_1_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_monitor_fond_1_t *src_p,
    size_t size);

/**
 * Unpack message Status_Monitor_Fond_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_monitor_fond_1_unpack(
    struct bmw_e9x_e8x_status_monitor_fond_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_Monitor_Fond_1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_monitor_fond_1_init(struct bmw_e9x_e8x_status_monitor_fond_1_t *msg_p);

/**
 * Pack message Status_Monitor_Fond_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_monitor_fond_2_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_monitor_fond_2_t *src_p,
    size_t size);

/**
 * Unpack message Status_Monitor_Fond_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_monitor_fond_2_unpack(
    struct bmw_e9x_e8x_status_monitor_fond_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_Monitor_Fond_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_monitor_fond_2_init(struct bmw_e9x_e8x_status_monitor_fond_2_t *msg_p);

/**
 * Pack message Raw_data_level_tank.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_raw_data_level_tank_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_raw_data_level_tank_t *src_p,
    size_t size);

/**
 * Unpack message Raw_data_level_tank.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_raw_data_level_tank_unpack(
    struct bmw_e9x_e8x_raw_data_level_tank_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Raw_data_level_tank.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_raw_data_level_tank_init(struct bmw_e9x_e8x_raw_data_level_tank_t *msg_p);

/**
 * Pack message Seat_back_lock_status_FA.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_seat_back_lock_status_fa_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_seat_back_lock_status_fa_t *src_p,
    size_t size);

/**
 * Unpack message Seat_back_lock_status_FA.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_seat_back_lock_status_fa_unpack(
    struct bmw_e9x_e8x_seat_back_lock_status_fa_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Seat_back_lock_status_FA.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_seat_back_lock_status_fa_init(struct bmw_e9x_e8x_seat_back_lock_status_fa_t *msg_p);

/**
 * Pack message Status_seat_back_lock_BF.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_seat_back_lock_bf_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_seat_back_lock_bf_t *src_p,
    size_t size);

/**
 * Unpack message Status_seat_back_lock_BF.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_seat_back_lock_bf_unpack(
    struct bmw_e9x_e8x_status_seat_back_lock_bf_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_seat_back_lock_BF.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_seat_back_lock_bf_init(struct bmw_e9x_e8x_status_seat_back_lock_bf_t *msg_p);

/**
 * Pack message Status_contact_handbrake.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_contact_handbrake_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_contact_handbrake_t *src_p,
    size_t size);

/**
 * Unpack message Status_contact_handbrake.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_contact_handbrake_unpack(
    struct bmw_e9x_e8x_status_contact_handbrake_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_contact_handbrake.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_contact_handbrake_init(struct bmw_e9x_e8x_status_contact_handbrake_t *msg_p);

/**
 * Pack message Appointment_Condition_Based_Service.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_appointment_condition_based_service_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_appointment_condition_based_service_t *src_p,
    size_t size);

/**
 * Unpack message Appointment_Condition_Based_Service.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_appointment_condition_based_service_unpack(
    struct bmw_e9x_e8x_appointment_condition_based_service_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Appointment_Condition_Based_Service.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_appointment_condition_based_service_init(struct bmw_e9x_e8x_appointment_condition_based_service_t *msg_p);

/**
 * Pack message Status_onboard_computer.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_onboard_computer_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_onboard_computer_t *src_p,
    size_t size);

/**
 * Unpack message Status_onboard_computer.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_onboard_computer_unpack(
    struct bmw_e9x_e8x_status_onboard_computer_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_onboard_computer.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_onboard_computer_init(struct bmw_e9x_e8x_status_onboard_computer_t *msg_p);

/**
 * Pack message Onboard_computer_data_trip_data.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_onboard_computer_data_trip_data_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_onboard_computer_data_trip_data_t *src_p,
    size_t size);

/**
 * Unpack message Onboard_computer_data_trip_data.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_onboard_computer_data_trip_data_unpack(
    struct bmw_e9x_e8x_onboard_computer_data_trip_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Onboard_computer_data_trip_data.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_onboard_computer_data_trip_data_init(struct bmw_e9x_e8x_onboard_computer_data_trip_data_t *msg_p);

/**
 * Pack message Data_onboard_computer_start_of_journey.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_data_onboard_computer_start_of_journey_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_data_onboard_computer_start_of_journey_t *src_p,
    size_t size);

/**
 * Unpack message Data_onboard_computer_start_of_journey.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_data_onboard_computer_start_of_journey_unpack(
    struct bmw_e9x_e8x_data_onboard_computer_start_of_journey_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Data_onboard_computer_start_of_journey.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_data_onboard_computer_start_of_journey_init(struct bmw_e9x_e8x_data_onboard_computer_start_of_journey_t *msg_p);

/**
 * Pack message Data_onboard_computer_average_values.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_data_onboard_computer_average_values_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_data_onboard_computer_average_values_t *src_p,
    size_t size);

/**
 * Unpack message Data_onboard_computer_average_values.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_data_onboard_computer_average_values_unpack(
    struct bmw_e9x_e8x_data_onboard_computer_average_values_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Data_onboard_computer_average_values.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_data_onboard_computer_average_values_init(struct bmw_e9x_e8x_data_onboard_computer_average_values_t *msg_p);

/**
 * Pack message Data_onboard_computer_arrival.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_data_onboard_computer_arrival_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_data_onboard_computer_arrival_t *src_p,
    size_t size);

/**
 * Unpack message Data_onboard_computer_arrival.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_data_onboard_computer_arrival_unpack(
    struct bmw_e9x_e8x_data_onboard_computer_arrival_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Data_onboard_computer_arrival.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_data_onboard_computer_arrival_init(struct bmw_e9x_e8x_data_onboard_computer_arrival_t *msg_p);

/**
 * Pack message Status_terminal_request.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_terminal_request_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_terminal_request_t *src_p,
    size_t size);

/**
 * Unpack message Status_terminal_request.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_terminal_request_unpack(
    struct bmw_e9x_e8x_status_terminal_request_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_terminal_request.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_terminal_request_init(struct bmw_e9x_e8x_status_terminal_request_t *msg_p);

/**
 * Pack message Display_Kombination_external_display.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_display_kombination_external_display_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_display_kombination_external_display_t *src_p,
    size_t size);

/**
 * Unpack message Display_Kombination_external_display.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_display_kombination_external_display_unpack(
    struct bmw_e9x_e8x_display_kombination_external_display_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Display_Kombination_external_display.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_display_kombination_external_display_init(struct bmw_e9x_e8x_display_kombination_external_display_t *msg_p);

/**
 * Pack message Control_display_of_demand_oriented_service.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_control_display_of_demand_oriented_service_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_control_display_of_demand_oriented_service_t *src_p,
    size_t size);

/**
 * Unpack message Control_display_of_demand_oriented_service.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_control_display_of_demand_oriented_service_unpack(
    struct bmw_e9x_e8x_control_display_of_demand_oriented_service_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Control_display_of_demand_oriented_service.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_control_display_of_demand_oriented_service_init(struct bmw_e9x_e8x_control_display_of_demand_oriented_service_t *msg_p);

/**
 * Pack message Setting_the_driving_dynamics_switch.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_setting_the_driving_dynamics_switch_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_setting_the_driving_dynamics_switch_t *src_p,
    size_t size);

/**
 * Unpack message Setting_the_driving_dynamics_switch.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_setting_the_driving_dynamics_switch_unpack(
    struct bmw_e9x_e8x_setting_the_driving_dynamics_switch_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Setting_the_driving_dynamics_switch.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_setting_the_driving_dynamics_switch_init(struct bmw_e9x_e8x_setting_the_driving_dynamics_switch_t *msg_p);

/**
 * Pack message Status_wear_lamella.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_wear_lamella_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_wear_lamella_t *src_p,
    size_t size);

/**
 * Unpack message Status_wear_lamella.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_wear_lamella_unpack(
    struct bmw_e9x_e8x_status_wear_lamella_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_wear_lamella.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_wear_lamella_init(struct bmw_e9x_e8x_status_wear_lamella_t *msg_p);

/**
 * Pack message Status_DKG.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_dkg_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_dkg_t *src_p,
    size_t size);

/**
 * Unpack message Status_DKG.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_dkg_unpack(
    struct bmw_e9x_e8x_status_dkg_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_DKG.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_dkg_init(struct bmw_e9x_e8x_status_dkg_t *msg_p);

/**
 * Pack message Temperatur_Bremse.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_temperatur_bremse_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_temperatur_bremse_t *src_p,
    size_t size);

/**
 * Unpack message Temperatur_Bremse.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_temperatur_bremse_unpack(
    struct bmw_e9x_e8x_temperatur_bremse_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Temperatur_Bremse.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_temperatur_bremse_init(struct bmw_e9x_e8x_temperatur_bremse_t *msg_p);

/**
 * Pack message Range_of_diesel_exhaust_gas_additive.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_range_of_diesel_exhaust_gas_additive_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_range_of_diesel_exhaust_gas_additive_t *src_p,
    size_t size);

/**
 * Unpack message Range_of_diesel_exhaust_gas_additive.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_range_of_diesel_exhaust_gas_additive_unpack(
    struct bmw_e9x_e8x_range_of_diesel_exhaust_gas_additive_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Range_of_diesel_exhaust_gas_additive.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_range_of_diesel_exhaust_gas_additive_init(struct bmw_e9x_e8x_range_of_diesel_exhaust_gas_additive_t *msg_p);

/**
 * Pack message chassis_number.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_chassis_number_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_chassis_number_t *src_p,
    size_t size);

/**
 * Unpack message chassis_number.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_chassis_number_unpack(
    struct bmw_e9x_e8x_chassis_number_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from chassis_number.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_chassis_number_init(struct bmw_e9x_e8x_chassis_number_t *msg_p);

/**
 * Pack message Electronic_engine_oil_dipstick_M.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_electronic_engine_oil_dipstick_m_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_electronic_engine_oil_dipstick_m_t *src_p,
    size_t size);

/**
 * Unpack message Electronic_engine_oil_dipstick_M.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_electronic_engine_oil_dipstick_m_unpack(
    struct bmw_e9x_e8x_electronic_engine_oil_dipstick_m_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Electronic_engine_oil_dipstick_M.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_electronic_engine_oil_dipstick_m_init(struct bmw_e9x_e8x_electronic_engine_oil_dipstick_m_t *msg_p);

/**
 * Pack message Motor_data_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_motor_data_2_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_motor_data_2_t *src_p,
    size_t size);

/**
 * Unpack message Motor_data_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_motor_data_2_unpack(
    struct bmw_e9x_e8x_motor_data_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Motor_data_2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_motor_data_2_init(struct bmw_e9x_e8x_motor_data_2_t *msg_p);

/**
 * Pack message Vehicle_type.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_vehicle_type_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_vehicle_type_t *src_p,
    size_t size);

/**
 * Unpack message Vehicle_type.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_vehicle_type_unpack(
    struct bmw_e9x_e8x_vehicle_type_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Vehicle_type.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_vehicle_type_init(struct bmw_e9x_e8x_vehicle_type_t *msg_p);

/**
 * Pack message Status_battery.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_battery_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_battery_t *src_p,
    size_t size);

/**
 * Unpack message Status_battery.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_battery_unpack(
    struct bmw_e9x_e8x_status_battery_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_battery.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_battery_init(struct bmw_e9x_e8x_status_battery_t *msg_p);

/**
 * Pack message Start_speed.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_start_speed_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_start_speed_t *src_p,
    size_t size);

/**
 * Unpack message Start_speed.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_start_speed_unpack(
    struct bmw_e9x_e8x_start_speed_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Start_speed.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_start_speed_init(struct bmw_e9x_e8x_start_speed_t *msg_p);

/**
 * Pack message Status_System_AFS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_system_afs_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_system_afs_t *src_p,
    size_t size);

/**
 * Unpack message Status_System_AFS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_system_afs_unpack(
    struct bmw_e9x_e8x_status_system_afs_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_System_AFS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_system_afs_init(struct bmw_e9x_e8x_status_system_afs_t *msg_p);

/**
 * Pack message RDA_request_data_storage.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_rda_request_data_storage_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_rda_request_data_storage_t *src_p,
    size_t size);

/**
 * Unpack message RDA_request_data_storage.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_rda_request_data_storage_unpack(
    struct bmw_e9x_e8x_rda_request_data_storage_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RDA_request_data_storage.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_rda_request_data_storage_init(struct bmw_e9x_e8x_rda_request_data_storage_t *msg_p);

/**
 * Pack message Coding_power_management.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_coding_power_management_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_coding_power_management_t *src_p,
    size_t size);

/**
 * Unpack message Coding_power_management.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_coding_power_management_unpack(
    struct bmw_e9x_e8x_coding_power_management_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Coding_power_management.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_coding_power_management_init(struct bmw_e9x_e8x_coding_power_management_t *msg_p);

/**
 * Pack message Operation_chassis.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_chassis_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_chassis_t *src_p,
    size_t size);

/**
 * Unpack message Operation_chassis.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_chassis_unpack(
    struct bmw_e9x_e8x_operation_chassis_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_chassis.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_chassis_init(struct bmw_e9x_e8x_operation_chassis_t *msg_p);

/**
 * Pack message Status_MDrive.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_m_drive_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_m_drive_t *src_p,
    size_t size);

/**
 * Unpack message Status_MDrive.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_m_drive_unpack(
    struct bmw_e9x_e8x_status_m_drive_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_MDrive.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_m_drive_init(struct bmw_e9x_e8x_status_m_drive_t *msg_p);

/**
 * Pack message Operation_time_date.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_time_date_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_time_date_t *src_p,
    size_t size);

/**
 * Unpack message Operation_time_date.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_time_date_unpack(
    struct bmw_e9x_e8x_operation_time_date_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_time_date.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_time_date_init(struct bmw_e9x_e8x_operation_time_date_t *msg_p);

/**
 * Pack message Vehicle_state.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_vehicle_state_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_vehicle_state_t *src_p,
    size_t size);

/**
 * Unpack message Vehicle_state.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_vehicle_state_unpack(
    struct bmw_e9x_e8x_vehicle_state_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Vehicle_state.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_vehicle_state_init(struct bmw_e9x_e8x_vehicle_state_t *msg_p);

/**
 * Pack message Request_Remote_Services.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_request_remote_services_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_request_remote_services_t *src_p,
    size_t size);

/**
 * Unpack message Request_Remote_Services.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_request_remote_services_unpack(
    struct bmw_e9x_e8x_request_remote_services_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Request_Remote_Services.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_request_remote_services_init(struct bmw_e9x_e8x_request_remote_services_t *msg_p);

/**
 * Pack message Status_motor_control_CKM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_motor_control_ckm_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_motor_control_ckm_t *src_p,
    size_t size);

/**
 * Unpack message Status_motor_control_CKM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_motor_control_ckm_unpack(
    struct bmw_e9x_e8x_status_motor_control_ckm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_motor_control_CKM.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_motor_control_ckm_init(struct bmw_e9x_e8x_status_motor_control_ckm_t *msg_p);

/**
 * Pack message Status_Shiftlights_CKM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_shiftlights_ckm_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_shiftlights_ckm_t *src_p,
    size_t size);

/**
 * Unpack message Status_Shiftlights_CKM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_shiftlights_ckm_unpack(
    struct bmw_e9x_e8x_status_shiftlights_ckm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_Shiftlights_CKM.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_shiftlights_ckm_init(struct bmw_e9x_e8x_status_shiftlights_ckm_t *msg_p);

/**
 * Pack message Status_gear_reverse.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_gear_reverse_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_gear_reverse_t *src_p,
    size_t size);

/**
 * Unpack message Status_gear_reverse.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_gear_reverse_unpack(
    struct bmw_e9x_e8x_status_gear_reverse_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_gear_reverse.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_gear_reverse_init(struct bmw_e9x_e8x_status_gear_reverse_t *msg_p);

/**
 * Pack message Status_water_valve.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_water_valve_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_water_valve_t *src_p,
    size_t size);

/**
 * Unpack message Status_water_valve.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_water_valve_unpack(
    struct bmw_e9x_e8x_status_water_valve_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_water_valve.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_water_valve_init(struct bmw_e9x_e8x_status_water_valve_t *msg_p);

/**
 * Pack message Position_window_lifter_FAT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_position_window_lifter_fat_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_position_window_lifter_fat_t *src_p,
    size_t size);

/**
 * Unpack message Position_window_lifter_FAT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_position_window_lifter_fat_unpack(
    struct bmw_e9x_e8x_position_window_lifter_fat_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Position_window_lifter_FAT.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_position_window_lifter_fat_init(struct bmw_e9x_e8x_position_window_lifter_fat_t *msg_p);

/**
 * Pack message Position_window_lifter_FATH.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_position_window_lifter_fath_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_position_window_lifter_fath_t *src_p,
    size_t size);

/**
 * Unpack message Position_window_lifter_FATH.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_position_window_lifter_fath_unpack(
    struct bmw_e9x_e8x_position_window_lifter_fath_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Position_window_lifter_FATH.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_position_window_lifter_fath_init(struct bmw_e9x_e8x_position_window_lifter_fath_t *msg_p);

/**
 * Pack message Position_window_regulator_BFT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_position_window_regulator_bft_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_position_window_regulator_bft_t *src_p,
    size_t size);

/**
 * Unpack message Position_window_regulator_BFT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_position_window_regulator_bft_unpack(
    struct bmw_e9x_e8x_position_window_regulator_bft_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Position_window_regulator_BFT.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_position_window_regulator_bft_init(struct bmw_e9x_e8x_position_window_regulator_bft_t *msg_p);

/**
 * Pack message Position_window_regulator_BFTH.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_position_window_regulator_bfth_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_position_window_regulator_bfth_t *src_p,
    size_t size);

/**
 * Unpack message Position_window_regulator_BFTH.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_position_window_regulator_bfth_unpack(
    struct bmw_e9x_e8x_position_window_regulator_bfth_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Position_window_regulator_BFTH.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_position_window_regulator_bfth_init(struct bmw_e9x_e8x_position_window_regulator_bfth_t *msg_p);

/**
 * Pack message Position_SHD.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_position_shd_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_position_shd_t *src_p,
    size_t size);

/**
 * Unpack message Position_SHD.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_position_shd_unpack(
    struct bmw_e9x_e8x_position_shd_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Position_SHD.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_position_shd_init(struct bmw_e9x_e8x_position_shd_t *msg_p);

/**
 * Pack message Position_window_lifter_security_vehicle.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_position_window_lifter_security_vehicle_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_position_window_lifter_security_vehicle_t *src_p,
    size_t size);

/**
 * Unpack message Position_window_lifter_security_vehicle.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_position_window_lifter_security_vehicle_unpack(
    struct bmw_e9x_e8x_position_window_lifter_security_vehicle_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Position_window_lifter_security_vehicle.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_position_window_lifter_security_vehicle_init(struct bmw_e9x_e8x_position_window_lifter_security_vehicle_t *msg_p);

/**
 * Pack message Status_consumer_shutdown.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_consumer_shutdown_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_consumer_shutdown_t *src_p,
    size_t size);

/**
 * Unpack message Status_consumer_shutdown.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_consumer_shutdown_unpack(
    struct bmw_e9x_e8x_status_consumer_shutdown_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_consumer_shutdown.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_consumer_shutdown_init(struct bmw_e9x_e8x_status_consumer_shutdown_t *msg_p);

/**
 * Pack message Position_window_rear_window.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_position_window_rear_window_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_position_window_rear_window_t *src_p,
    size_t size);

/**
 * Unpack message Position_window_rear_window.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_position_window_rear_window_unpack(
    struct bmw_e9x_e8x_position_window_rear_window_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Position_window_rear_window.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_position_window_rear_window_init(struct bmw_e9x_e8x_position_window_rear_window_t *msg_p);

/**
 * Pack message Configuration_FAS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_configuration_fas_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_configuration_fas_t *src_p,
    size_t size);

/**
 * Unpack message Configuration_FAS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_configuration_fas_unpack(
    struct bmw_e9x_e8x_configuration_fas_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Configuration_FAS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_configuration_fas_init(struct bmw_e9x_e8x_configuration_fas_t *msg_p);

/**
 * Pack message Configuration_BFS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_configuration_bfs_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_configuration_bfs_t *src_p,
    size_t size);

/**
 * Unpack message Configuration_BFS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_configuration_bfs_unpack(
    struct bmw_e9x_e8x_configuration_bfs_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Configuration_BFS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_configuration_bfs_init(struct bmw_e9x_e8x_configuration_bfs_t *msg_p);

/**
 * Pack message Status_EDCK_CKM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_edck_ckm_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_edck_ckm_t *src_p,
    size_t size);

/**
 * Unpack message Status_EDCK_CKM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_edck_ckm_unpack(
    struct bmw_e9x_e8x_status_edck_ckm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_EDCK_CKM.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_edck_ckm_init(struct bmw_e9x_e8x_status_edck_ckm_t *msg_p);

/**
 * Pack message Access_radio.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_access_radio_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_access_radio_t *src_p,
    size_t size);

/**
 * Unpack message Access_radio.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_access_radio_unpack(
    struct bmw_e9x_e8x_access_radio_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Access_radio.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_access_radio_init(struct bmw_e9x_e8x_access_radio_t *msg_p);

/**
 * Pack message Operation_push_button_radio.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_operation_push_button_radio_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_operation_push_button_radio_t *src_p,
    size_t size);

/**
 * Unpack message Operation_push_button_radio.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_operation_push_button_radio_unpack(
    struct bmw_e9x_e8x_operation_push_button_radio_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Operation_push_button_radio.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_operation_push_button_radio_init(struct bmw_e9x_e8x_operation_push_button_radio_t *msg_p);

/**
 * Pack message Radio_audio_control_interface_display.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_radio_audio_control_interface_display_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_radio_audio_control_interface_display_t *src_p,
    size_t size);

/**
 * Unpack message Radio_audio_control_interface_display.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_radio_audio_control_interface_display_unpack(
    struct bmw_e9x_e8x_radio_audio_control_interface_display_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Radio_audio_control_interface_display.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_radio_audio_control_interface_display_init(struct bmw_e9x_e8x_radio_audio_control_interface_display_t *msg_p);

/**
 * Pack message Acknowledgment_access_radio_audio_control_interface.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_acknowledgment_access_radio_audio_control_interface_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_acknowledgment_access_radio_audio_control_interface_t *src_p,
    size_t size);

/**
 * Unpack message Acknowledgment_access_radio_audio_control_interface.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_acknowledgment_access_radio_audio_control_interface_unpack(
    struct bmw_e9x_e8x_acknowledgment_access_radio_audio_control_interface_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Acknowledgment_access_radio_audio_control_interface.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_acknowledgment_access_radio_audio_control_interface_init(struct bmw_e9x_e8x_acknowledgment_access_radio_audio_control_interface_t *msg_p);

/**
 * Pack message Status_solar_sensor.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_solar_sensor_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_solar_sensor_t *src_p,
    size_t size);

/**
 * Unpack message Status_solar_sensor.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_solar_sensor_unpack(
    struct bmw_e9x_e8x_status_solar_sensor_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_solar_sensor.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_solar_sensor_init(struct bmw_e9x_e8x_status_solar_sensor_t *msg_p);

/**
 * Pack message Configuration_of_central_locking_CKM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_configuration_of_central_locking_ckm_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_configuration_of_central_locking_ckm_t *src_p,
    size_t size);

/**
 * Unpack message Configuration_of_central_locking_CKM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_configuration_of_central_locking_ckm_unpack(
    struct bmw_e9x_e8x_configuration_of_central_locking_ckm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Configuration_of_central_locking_CKM.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_configuration_of_central_locking_ckm_init(struct bmw_e9x_e8x_configuration_of_central_locking_ckm_t *msg_p);

/**
 * Pack message Status_central_locking_CKM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_central_locking_ckm_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_central_locking_ckm_t *src_p,
    size_t size);

/**
 * Unpack message Status_central_locking_CKM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_central_locking_ckm_unpack(
    struct bmw_e9x_e8x_status_central_locking_ckm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_central_locking_CKM.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_central_locking_ckm_init(struct bmw_e9x_e8x_status_central_locking_ckm_t *msg_p);

/**
 * Pack message Configuration_DWA_CKM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_configuration_dwa_ckm_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_configuration_dwa_ckm_t *src_p,
    size_t size);

/**
 * Unpack message Configuration_DWA_CKM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_configuration_dwa_ckm_unpack(
    struct bmw_e9x_e8x_configuration_dwa_ckm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Configuration_DWA_CKM.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_configuration_dwa_ckm_init(struct bmw_e9x_e8x_configuration_dwa_ckm_t *msg_p);

/**
 * Pack message Status_DWA_CKM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_dwa_ckm_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_dwa_ckm_t *src_p,
    size_t size);

/**
 * Unpack message Status_DWA_CKM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_dwa_ckm_unpack(
    struct bmw_e9x_e8x_status_dwa_ckm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_DWA_CKM.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_dwa_ckm_init(struct bmw_e9x_e8x_status_dwa_ckm_t *msg_p);

/**
 * Pack message Configuration_RLS_CKM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_configuration_rls_ckm_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_configuration_rls_ckm_t *src_p,
    size_t size);

/**
 * Unpack message Configuration_RLS_CKM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_configuration_rls_ckm_unpack(
    struct bmw_e9x_e8x_configuration_rls_ckm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Configuration_RLS_CKM.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_configuration_rls_ckm_init(struct bmw_e9x_e8x_configuration_rls_ckm_t *msg_p);

/**
 * Pack message Status_RLS_CKM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_rls_ckm_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_rls_ckm_t *src_p,
    size_t size);

/**
 * Unpack message Status_RLS_CKM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_rls_ckm_unpack(
    struct bmw_e9x_e8x_status_rls_ckm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_RLS_CKM.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_rls_ckm_init(struct bmw_e9x_e8x_status_rls_ckm_t *msg_p);

/**
 * Pack message Configuration_of_memory_positions_CKM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_configuration_of_memory_positions_ckm_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_configuration_of_memory_positions_ckm_t *src_p,
    size_t size);

/**
 * Unpack message Configuration_of_memory_positions_CKM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_configuration_of_memory_positions_ckm_unpack(
    struct bmw_e9x_e8x_configuration_of_memory_positions_ckm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Configuration_of_memory_positions_CKM.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_configuration_of_memory_positions_ckm_init(struct bmw_e9x_e8x_configuration_of_memory_positions_ckm_t *msg_p);

/**
 * Pack message Status_memory_positions_CKM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_memory_positions_ckm_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_memory_positions_ckm_t *src_p,
    size_t size);

/**
 * Unpack message Status_memory_positions_CKM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_memory_positions_ckm_unpack(
    struct bmw_e9x_e8x_status_memory_positions_ckm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_memory_positions_CKM.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_memory_positions_ckm_init(struct bmw_e9x_e8x_status_memory_positions_ckm_t *msg_p);

/**
 * Pack message Configuration_light_CKM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_configuration_light_ckm_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_configuration_light_ckm_t *src_p,
    size_t size);

/**
 * Unpack message Configuration_light_CKM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_configuration_light_ckm_unpack(
    struct bmw_e9x_e8x_configuration_light_ckm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Configuration_light_CKM.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_configuration_light_ckm_init(struct bmw_e9x_e8x_configuration_light_ckm_t *msg_p);

/**
 * Pack message Status_light_CKM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_light_ckm_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_light_ckm_t *src_p,
    size_t size);

/**
 * Unpack message Status_light_CKM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_light_ckm_unpack(
    struct bmw_e9x_e8x_status_light_ckm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_light_CKM.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_light_ckm_init(struct bmw_e9x_e8x_status_light_ckm_t *msg_p);

/**
 * Pack message Configuration_Climate_CKM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_configuration_climate_ckm_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_configuration_climate_ckm_t *src_p,
    size_t size);

/**
 * Unpack message Configuration_Climate_CKM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_configuration_climate_ckm_unpack(
    struct bmw_e9x_e8x_configuration_climate_ckm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Configuration_Climate_CKM.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_configuration_climate_ckm_init(struct bmw_e9x_e8x_configuration_climate_ckm_t *msg_p);

/**
 * Pack message Status_Klima_CKM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_klima_ckm_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_klima_ckm_t *src_p,
    size_t size);

/**
 * Unpack message Status_Klima_CKM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_klima_ckm_unpack(
    struct bmw_e9x_e8x_status_klima_ckm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_Klima_CKM.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_klima_ckm_init(struct bmw_e9x_e8x_status_klima_ckm_t *msg_p);

/**
 * Pack message Configuration_of_tailgate_CKM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_configuration_of_tailgate_ckm_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_configuration_of_tailgate_ckm_t *src_p,
    size_t size);

/**
 * Unpack message Configuration_of_tailgate_CKM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_configuration_of_tailgate_ckm_unpack(
    struct bmw_e9x_e8x_configuration_of_tailgate_ckm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Configuration_of_tailgate_CKM.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_configuration_of_tailgate_ckm_init(struct bmw_e9x_e8x_configuration_of_tailgate_ckm_t *msg_p);

/**
 * Pack message Status_tailgate_CKM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_status_tailgate_ckm_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_status_tailgate_ckm_t *src_p,
    size_t size);

/**
 * Unpack message Status_tailgate_CKM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_status_tailgate_ckm_unpack(
    struct bmw_e9x_e8x_status_tailgate_ckm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Status_tailgate_CKM.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_status_tailgate_ckm_init(struct bmw_e9x_e8x_status_tailgate_ckm_t *msg_p);

/**
 * Pack message Configuration_rear_view_camera_CKM.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int bmw_e9x_e8x_configuration_rear_view_camera_ckm_pack(
    uint8_t *dst_p,
    const struct bmw_e9x_e8x_configuration_rear_view_camera_ckm_t *src_p,
    size_t size);

/**
 * Unpack message Configuration_rear_view_camera_CKM.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int bmw_e9x_e8x_configuration_rear_view_camera_ckm_unpack(
    struct bmw_e9x_e8x_configuration_rear_view_camera_ckm_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Configuration_rear_view_camera_CKM.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int bmw_e9x_e8x_configuration_rear_view_camera_ckm_init(struct bmw_e9x_e8x_configuration_rear_view_camera_ckm_t *msg_p);


#ifdef __cplusplus
}
#endif

#endif
