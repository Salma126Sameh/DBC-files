
CarSync.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad0c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d08  0800ae20  0800ae20  0000be20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb28  0800bb28  0000d27c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bb28  0800bb28  0000cb28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb30  0800bb30  0000d27c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb30  0800bb30  0000cb30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bb34  0800bb34  0000cb34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000027c  20000000  0800bb38  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000280  0800bdb4  0000d280  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000078c  0800bdb4  0000d78c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d27c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000299c7  00000000  00000000  0000d2a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003372  00000000  00000000  00036c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003b10  00000000  00000000  00039fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002cca  00000000  00000000  0003daf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cfb9  00000000  00000000  000407ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000213f8  00000000  00000000  0005d773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2545  00000000  00000000  0007eb6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001310b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00011fac  00000000  00000000  001310f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  001430a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000280 	.word	0x20000280
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ae04 	.word	0x0800ae04

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000284 	.word	0x20000284
 800014c:	0800ae04 	.word	0x0800ae04

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <sendATCommand>:
uint8_t mqtt_connect_packet[] = { 0x10, 0x12, 0x00, 0x04, 0x4D, 0x51, 0x54,
		0x54, 0x04, 0X02, 0x00, 0x3C, 0x00, 0x06, 0x41, 0x42, 0x43, 0x44, 0x45,
		0x46, 0x1A // <- This is the CTRL+Z (0x1A) to mark end of transmission
		};
SIM868_Status_t sendATCommand(UART_HandleTypeDef *huart, const char *command,
		char *response, uint16_t timeout) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
 8000f50:	807b      	strh	r3, [r7, #2]

	// Clear only when necessary
	memset(rxBuffer, 0, MAX_RESPONSE_LEN);
 8000f52:	2280      	movs	r2, #128	@ 0x80
 8000f54:	2100      	movs	r1, #0
 8000f56:	4821      	ldr	r0, [pc, #132]	@ (8000fdc <sendATCommand+0x98>)
 8000f58:	f007 fb26 	bl	80085a8 <memset>
	memset(response, 0, MAX_RESPONSE_LEN);
 8000f5c:	2280      	movs	r2, #128	@ 0x80
 8000f5e:	2100      	movs	r1, #0
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f007 fb21 	bl	80085a8 <memset>

	// Send the AT command
	if (HAL_UART_Transmit(huart, (uint8_t*) command, strlen(command), timeout)
 8000f66:	68b8      	ldr	r0, [r7, #8]
 8000f68:	f7ff f8f2 	bl	8000150 <strlen>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	887b      	ldrh	r3, [r7, #2]
 8000f72:	68b9      	ldr	r1, [r7, #8]
 8000f74:	68f8      	ldr	r0, [r7, #12]
 8000f76:	f006 f8f0 	bl	800715a <HAL_UART_Transmit>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d004      	beq.n	8000f8a <sendATCommand+0x46>
			!= HAL_OK) {
		DEBUG_PRINT("#RED#Failed to transmit command\n");
 8000f80:	4817      	ldr	r0, [pc, #92]	@ (8000fe0 <sendATCommand+0x9c>)
 8000f82:	f007 f9d9 	bl	8008338 <puts>
		return SIM868_ERROR;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e023      	b.n	8000fd2 <sendATCommand+0x8e>
	}
	if (HAL_UART_Transmit(huart, (uint8_t*) "\r\n", strlen("\r\n"), timeout)
 8000f8a:	887b      	ldrh	r3, [r7, #2]
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	4915      	ldr	r1, [pc, #84]	@ (8000fe4 <sendATCommand+0xa0>)
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	f006 f8e2 	bl	800715a <HAL_UART_Transmit>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d004      	beq.n	8000fa6 <sendATCommand+0x62>
			!= HAL_OK) {
		DEBUG_PRINT("#RED#Failed to transmit command\n");
 8000f9c:	4810      	ldr	r0, [pc, #64]	@ (8000fe0 <sendATCommand+0x9c>)
 8000f9e:	f007 f9cb 	bl	8008338 <puts>
		return SIM868_ERROR;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e015      	b.n	8000fd2 <sendATCommand+0x8e>
	}

	// Receive the response
	HAL_UART_Receive(huart, rxBuffer, MAX_RESPONSE_LEN - 1, timeout);
 8000fa6:	887b      	ldrh	r3, [r7, #2]
 8000fa8:	227f      	movs	r2, #127	@ 0x7f
 8000faa:	490c      	ldr	r1, [pc, #48]	@ (8000fdc <sendATCommand+0x98>)
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	f006 f95f 	bl	8007270 <HAL_UART_Receive>

	// Copy and null-terminate the response
	memcpy(response, (char*) rxBuffer + 2, MAX_RESPONSE_LEN - 2);
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe8 <sendATCommand+0xa4>)
 8000fb4:	227e      	movs	r2, #126	@ 0x7e
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f007 fc0c 	bl	80087d6 <memcpy>
	response[MAX_RESPONSE_LEN - 2] = '\0';
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	337e      	adds	r3, #126	@ 0x7e
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
	DEBUG_PRINT("#GRN#SendAtCommand = %s\nRespond = %s\n", command, response);
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	68b9      	ldr	r1, [r7, #8]
 8000fca:	4808      	ldr	r0, [pc, #32]	@ (8000fec <sendATCommand+0xa8>)
 8000fcc:	f007 f94c 	bl	8008268 <iprintf>
	return SIM868_SUCCESS;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2000029c 	.word	0x2000029c
 8000fe0:	0800ae20 	.word	0x0800ae20
 8000fe4:	0800ae40 	.word	0x0800ae40
 8000fe8:	2000029e 	.word	0x2000029e
 8000fec:	0800ae44 	.word	0x0800ae44

08000ff0 <SIM868_Init>:

SIM868_Status_t SIM868_Init(UART_HandleTypeDef *huart) {
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b0b2      	sub	sp, #200	@ 0xc8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	char response[MAX_RESPONSE_LEN];

	// Check basic communication
	if (sendATCommand(huart, "AT", response, UART_TIMEOUT) != SIM868_SUCCESS) {
 8000ff8:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8000ffc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001000:	4935      	ldr	r1, [pc, #212]	@ (80010d8 <SIM868_Init+0xe8>)
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ff9e 	bl	8000f44 <sendATCommand>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d004      	beq.n	8001018 <SIM868_Init+0x28>
		DEBUG_PRINT("#RED#Didn't send AT command\n");
 800100e:	4833      	ldr	r0, [pc, #204]	@ (80010dc <SIM868_Init+0xec>)
 8001010:	f007 f992 	bl	8008338 <puts>
		return SIM868_ERROR;
 8001014:	2303      	movs	r3, #3
 8001016:	e05a      	b.n	80010ce <SIM868_Init+0xde>
	}

	// Check for OK response
	if (strstr(response, "OK") == NULL) {
 8001018:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800101c:	4930      	ldr	r1, [pc, #192]	@ (80010e0 <SIM868_Init+0xf0>)
 800101e:	4618      	mov	r0, r3
 8001020:	f007 fb3d 	bl	800869e <strstr>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d104      	bne.n	8001034 <SIM868_Init+0x44>
		DEBUG_PRINT("Didn't get OK from AT\n");
 800102a:	482e      	ldr	r0, [pc, #184]	@ (80010e4 <SIM868_Init+0xf4>)
 800102c:	f007 f984 	bl	8008338 <puts>
		return SIM868_ERROR;
 8001030:	2303      	movs	r3, #3
 8001032:	e04c      	b.n	80010ce <SIM868_Init+0xde>
	}

	// Continue with the rest of initialization
	const char *init_commands[] = {
 8001034:	4b2c      	ldr	r3, [pc, #176]	@ (80010e8 <SIM868_Init+0xf8>)
 8001036:	f107 040c 	add.w	r4, r7, #12
 800103a:	461d      	mov	r5, r3
 800103c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800103e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001048:	e895 0003 	ldmia.w	r5, {r0, r1}
 800104c:	e884 0003 	stmia.w	r4, {r0, r1}
			"AT+CIICR",                // Activate context
			"AT+CIFSR", 		  	   // Get the IP
			"AT+CIPSPRT=0", "AT+CIPSTART=\"TCP\",\"broker.hivemq.com\",\"1883\"" // Connect to broker
			};

	for (int i = 0; i < sizeof(init_commands) / sizeof(init_commands[0]); ++i) {
 8001050:	2300      	movs	r3, #0
 8001052:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001056:	e022      	b.n	800109e <SIM868_Init+0xae>
		if (sendATCommand(huart, init_commands[i], response, UART_TIMEOUT)
 8001058:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	33c8      	adds	r3, #200	@ 0xc8
 8001060:	443b      	add	r3, r7
 8001062:	f853 1cbc 	ldr.w	r1, [r3, #-188]
 8001066:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800106a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff ff68 	bl	8000f44 <sendATCommand>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d00c      	beq.n	8001094 <SIM868_Init+0xa4>
				!= SIM868_SUCCESS) {
			DEBUG_PRINT("#RED#Failed command: %s\n", init_commands[i]);
 800107a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	33c8      	adds	r3, #200	@ 0xc8
 8001082:	443b      	add	r3, r7
 8001084:	f853 3cbc 	ldr.w	r3, [r3, #-188]
 8001088:	4619      	mov	r1, r3
 800108a:	4818      	ldr	r0, [pc, #96]	@ (80010ec <SIM868_Init+0xfc>)
 800108c:	f007 f8ec 	bl	8008268 <iprintf>
			return SIM868_ERROR;
 8001090:	2303      	movs	r3, #3
 8001092:	e01c      	b.n	80010ce <SIM868_Init+0xde>
	for (int i = 0; i < sizeof(init_commands) / sizeof(init_commands[0]); ++i) {
 8001094:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001098:	3301      	adds	r3, #1
 800109a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800109e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80010a2:	2b0d      	cmp	r3, #13
 80010a4:	d9d8      	bls.n	8001058 <SIM868_Init+0x68>
	 ====================================================================================================================== */

	//	10 12 00 04 4D 51 54 54 04 02 00 3C 00 06 41 42 43 44 45 46 1A # connect packet
	//	10 2C 00 06 4D 51 49 73 64 70 03 C2 00 3C 00 06 41 42 43 44 45 46 00 07 43 61 72 53 79 6E 63 00 0C 71 41 55 5A 42 64 61 53 49 55 4C 78 1A
	// send MQTT connection packet
	HAL_Delay(1000);
 80010a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010aa:	f002 ff91 	bl	8003fd0 <HAL_Delay>
	sendATCommand(huart, "AT+CIPSEND", response, UART_TIMEOUT);
 80010ae:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80010b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b6:	490e      	ldr	r1, [pc, #56]	@ (80010f0 <SIM868_Init+0x100>)
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff ff43 	bl	8000f44 <sendATCommand>
	sendMQTTPacket(huart, mqtt_connect_packet, sizeof(mqtt_connect_packet),
 80010be:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80010c2:	2215      	movs	r2, #21
 80010c4:	490b      	ldr	r1, [pc, #44]	@ (80010f4 <SIM868_Init+0x104>)
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f000 f9b0 	bl	800142c <sendMQTTPacket>
			4000);

	return SIM868_SUCCESS;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	37c8      	adds	r7, #200	@ 0xc8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bdb0      	pop	{r4, r5, r7, pc}
 80010d6:	bf00      	nop
 80010d8:	0800ae6c 	.word	0x0800ae6c
 80010dc:	0800ae70 	.word	0x0800ae70
 80010e0:	0800ae8c 	.word	0x0800ae8c
 80010e4:	0800ae90 	.word	0x0800ae90
 80010e8:	0800afbc 	.word	0x0800afbc
 80010ec:	0800aea8 	.word	0x0800aea8
 80010f0:	0800aec4 	.word	0x0800aec4
 80010f4:	20000000 	.word	0x20000000

080010f8 <SIM868_check_signal>:
SIM868_Status_t SIM868_check_signal(UART_HandleTypeDef *huart) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b0a6      	sub	sp, #152	@ 0x98
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
    char *data;
    char *token;
    uint8_t rssi, ber;

    while (1) {
        sendATCommand(huart, "AT+CSQ", response, UART_TIMEOUT);
 8001100:	f107 020c 	add.w	r2, r7, #12
 8001104:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001108:	4930      	ldr	r1, [pc, #192]	@ (80011cc <SIM868_check_signal+0xd4>)
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ff1a 	bl	8000f44 <sendATCommand>

        // Ensure the response is null-terminated
        response[127] = '\0';
 8001110:	2300      	movs	r3, #0
 8001112:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b

        // Locate the start of the signal quality data
        data = strstr(response, "+CSQ: ");
 8001116:	f107 030c 	add.w	r3, r7, #12
 800111a:	492d      	ldr	r1, [pc, #180]	@ (80011d0 <SIM868_check_signal+0xd8>)
 800111c:	4618      	mov	r0, r3
 800111e:	f007 fabe 	bl	800869e <strstr>
 8001122:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
        if (data != NULL) {
 8001126:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800112a:	2b00      	cmp	r3, #0
 800112c:	d046      	beq.n	80011bc <SIM868_check_signal+0xc4>
            // Skip the "+CSQ: " part
            data += 6;
 800112e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001132:	3306      	adds	r3, #6
 8001134:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

            // Tokenize the response to extract RSSI and BER
            token = strtok(data, ",");
 8001138:	4926      	ldr	r1, [pc, #152]	@ (80011d4 <SIM868_check_signal+0xdc>)
 800113a:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800113e:	f007 fa4f 	bl	80085e0 <strtok>
 8001142:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
            if (token != NULL) {
 8001146:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800114a:	2b00      	cmp	r3, #0
 800114c:	d036      	beq.n	80011bc <SIM868_check_signal+0xc4>
                rssi = (uint8_t)atoi(token);
 800114e:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8001152:	f006 fa6d 	bl	8007630 <atoi>
 8001156:	4603      	mov	r3, r0
 8001158:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                DEBUG_PRINT("RSSI: %d\n", rssi);
 800115c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001160:	4619      	mov	r1, r3
 8001162:	481d      	ldr	r0, [pc, #116]	@ (80011d8 <SIM868_check_signal+0xe0>)
 8001164:	f007 f880 	bl	8008268 <iprintf>

                // Check if RSSI is above threshold
                if (rssi > 10) {
 8001168:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800116c:	2b0a      	cmp	r3, #10
 800116e:	d925      	bls.n	80011bc <SIM868_check_signal+0xc4>
                    token = strtok(NULL, ",");
 8001170:	4918      	ldr	r1, [pc, #96]	@ (80011d4 <SIM868_check_signal+0xdc>)
 8001172:	2000      	movs	r0, #0
 8001174:	f007 fa34 	bl	80085e0 <strtok>
 8001178:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
                    if (token != NULL) {
 800117c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001180:	2b00      	cmp	r3, #0
 8001182:	d01b      	beq.n	80011bc <SIM868_check_signal+0xc4>
                        ber = (uint8_t)atoi(token);
 8001184:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8001188:	f006 fa52 	bl	8007630 <atoi>
 800118c:	4603      	mov	r3, r0
 800118e:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
                        DEBUG_PRINT("BER: %d\n", ber);
 8001192:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8001196:	4619      	mov	r1, r3
 8001198:	4810      	ldr	r0, [pc, #64]	@ (80011dc <SIM868_check_signal+0xe4>)
 800119a:	f007 f865 	bl	8008268 <iprintf>

                        // Check if BER is acceptable
                        if (ber == 0) {
 800119e:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10a      	bne.n	80011bc <SIM868_check_signal+0xc4>
                            DEBUG_PRINT("---------------------------------\n");
 80011a6:	480e      	ldr	r0, [pc, #56]	@ (80011e0 <SIM868_check_signal+0xe8>)
 80011a8:	f007 f8c6 	bl	8008338 <puts>
                            DEBUG_PRINT("-------------- Done -------------\n");
 80011ac:	480d      	ldr	r0, [pc, #52]	@ (80011e4 <SIM868_check_signal+0xec>)
 80011ae:	f007 f8c3 	bl	8008338 <puts>
                            DEBUG_PRINT("---------------------------------\n");
 80011b2:	480b      	ldr	r0, [pc, #44]	@ (80011e0 <SIM868_check_signal+0xe8>)
 80011b4:	f007 f8c0 	bl	8008338 <puts>
                            return SIM868_SUCCESS;
 80011b8:	2300      	movs	r3, #0
 80011ba:	e003      	b.n	80011c4 <SIM868_check_signal+0xcc>
                }
            }
        }

        // If we reach here, the signal quality is not acceptable, retry
        DEBUG_PRINT("Signal quality not acceptable, retrying...\n");
 80011bc:	480a      	ldr	r0, [pc, #40]	@ (80011e8 <SIM868_check_signal+0xf0>)
 80011be:	f007 f8bb 	bl	8008338 <puts>
        sendATCommand(huart, "AT+CSQ", response, UART_TIMEOUT);
 80011c2:	e79d      	b.n	8001100 <SIM868_check_signal+0x8>
    }

    // If the loop exits without returning, there was an error
    DEBUG_PRINT("Failed to parse input.\n");
    return SIM868_ERROR;
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3798      	adds	r7, #152	@ 0x98
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	0800af34 	.word	0x0800af34
 80011d0:	0800aff4 	.word	0x0800aff4
 80011d4:	0800affc 	.word	0x0800affc
 80011d8:	0800b000 	.word	0x0800b000
 80011dc:	0800b00c 	.word	0x0800b00c
 80011e0:	0800b018 	.word	0x0800b018
 80011e4:	0800b03c 	.word	0x0800b03c
 80011e8:	0800b060 	.word	0x0800b060

080011ec <SIM868_GetGPSLocation>:
}
void SIM868_PowerOFF(GPIO_TypeDef *port, uint16_t pin) {
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
}
SIM868_Status_t SIM868_GetGPSLocation(UART_HandleTypeDef *huart,
		GPS_Location_t *location) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
	static char response[128]; // Static buffer to save memory

	// Initialize location to default values
	memset(location, 0, sizeof(GPS_Location_t));
 80011f6:	223d      	movs	r2, #61	@ 0x3d
 80011f8:	2100      	movs	r1, #0
 80011fa:	6838      	ldr	r0, [r7, #0]
 80011fc:	f007 f9d4 	bl	80085a8 <memset>
	location->valid = 0;  // Mark as invalid
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	7813      	ldrb	r3, [r2, #0]
 8001204:	f023 0301 	bic.w	r3, r3, #1
 8001208:	7013      	strb	r3, [r2, #0]

	// Request GPS information
	sendATCommand(huart, "AT+CGNSINF", response, UART_TIMEOUT);
 800120a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800120e:	4a7f      	ldr	r2, [pc, #508]	@ (800140c <SIM868_GetGPSLocation+0x220>)
 8001210:	497f      	ldr	r1, [pc, #508]	@ (8001410 <SIM868_GetGPSLocation+0x224>)
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff fe96 	bl	8000f44 <sendATCommand>

	// Extract GPS data
	char *data_start = strstr(response, "+CGNSINF:");
 8001218:	497e      	ldr	r1, [pc, #504]	@ (8001414 <SIM868_GetGPSLocation+0x228>)
 800121a:	487c      	ldr	r0, [pc, #496]	@ (800140c <SIM868_GetGPSLocation+0x220>)
 800121c:	f007 fa3f 	bl	800869e <strstr>
 8001220:	60f8      	str	r0, [r7, #12]
	if (data_start == NULL) {
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d104      	bne.n	8001232 <SIM868_GetGPSLocation+0x46>
		DEBUG_PRINT("Failed to find +CGNSINF: in response\n");
 8001228:	487b      	ldr	r0, [pc, #492]	@ (8001418 <SIM868_GetGPSLocation+0x22c>)
 800122a:	f007 f885 	bl	8008338 <puts>
		return SIM868_INVALID_RESPONSE;
 800122e:	2302      	movs	r3, #2
 8001230:	e0e7      	b.n	8001402 <SIM868_GetGPSLocation+0x216>
	}

	// Parse using tokenization
	char *saveptr = NULL;
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
	char *token = strtok_r(data_start + 10, ",", &saveptr); // Skip "+CGNSINF: "
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	330a      	adds	r3, #10
 800123a:	f107 0208 	add.w	r2, r7, #8
 800123e:	4977      	ldr	r1, [pc, #476]	@ (800141c <SIM868_GetGPSLocation+0x230>)
 8001240:	4618      	mov	r0, r3
 8001242:	f007 fa29 	bl	8008698 <strtok_r>
 8001246:	6178      	str	r0, [r7, #20]
	int field_index = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	613b      	str	r3, [r7, #16]

	// Process each token
	while (token != NULL && field_index <= 7) { // Only process up to course field
 800124c:	e0ad      	b.n	80013aa <SIM868_GetGPSLocation+0x1be>
		switch (field_index) {
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	2b07      	cmp	r3, #7
 8001252:	f200 809f 	bhi.w	8001394 <SIM868_GetGPSLocation+0x1a8>
 8001256:	a201      	add	r2, pc, #4	@ (adr r2, 800125c <SIM868_GetGPSLocation+0x70>)
 8001258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800125c:	0800127d 	.word	0x0800127d
 8001260:	08001291 	.word	0x08001291
 8001264:	080012a3 	.word	0x080012a3
 8001268:	08001331 	.word	0x08001331
 800126c:	08001347 	.word	0x08001347
 8001270:	08001395 	.word	0x08001395
 8001274:	0800135f 	.word	0x0800135f
 8001278:	08001375 	.word	0x08001375
		case 0: // Run status
			if (*token != '1') {
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b31      	cmp	r3, #49	@ 0x31
 8001282:	f000 8082 	beq.w	800138a <SIM868_GetGPSLocation+0x19e>
				DEBUG_PRINT("GNSS not running\n");
 8001286:	4866      	ldr	r0, [pc, #408]	@ (8001420 <SIM868_GetGPSLocation+0x234>)
 8001288:	f007 f856 	bl	8008338 <puts>
				return SIM868_NO_FIX;
 800128c:	2301      	movs	r3, #1
 800128e:	e0b8      	b.n	8001402 <SIM868_GetGPSLocation+0x216>
			}
			break;

		case 1: // Fix status
			if (*token != '1') {
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b31      	cmp	r3, #49	@ 0x31
 8001296:	d07a      	beq.n	800138e <SIM868_GetGPSLocation+0x1a2>
				DEBUG_PRINT("No GPS fix\n");
 8001298:	4862      	ldr	r0, [pc, #392]	@ (8001424 <SIM868_GetGPSLocation+0x238>)
 800129a:	f007 f84d 	bl	8008338 <puts>
				return SIM868_NO_FIX;
 800129e:	2301      	movs	r3, #1
 80012a0:	e0af      	b.n	8001402 <SIM868_GetGPSLocation+0x216>
			}
			break;

		case 2: // UTC time
			if (strlen(token) >= 14) {
 80012a2:	6978      	ldr	r0, [r7, #20]
 80012a4:	f7fe ff54 	bl	8000150 <strlen>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b0d      	cmp	r3, #13
 80012ac:	d971      	bls.n	8001392 <SIM868_GetGPSLocation+0x1a6>
				// Extract time components
				memcpy(location->time_str.year, token, 4);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	3329      	adds	r3, #41	@ 0x29
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	6812      	ldr	r2, [r2, #0]
 80012b6:	601a      	str	r2, [r3, #0]
				location->time_str.year[4] = 0;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

				memcpy(location->time_str.month, token + 4, 2);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	332e      	adds	r3, #46	@ 0x2e
 80012c4:	697a      	ldr	r2, [r7, #20]
 80012c6:	3204      	adds	r2, #4
 80012c8:	8812      	ldrh	r2, [r2, #0]
 80012ca:	b292      	uxth	r2, r2
 80012cc:	801a      	strh	r2, [r3, #0]
				location->time_str.month[2] = 0;
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

				memcpy(location->time_str.day, token + 6, 2);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	3331      	adds	r3, #49	@ 0x31
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	3206      	adds	r2, #6
 80012de:	8812      	ldrh	r2, [r2, #0]
 80012e0:	b292      	uxth	r2, r2
 80012e2:	801a      	strh	r2, [r3, #0]
				location->time_str.day[2] = 0;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

				memcpy(location->time_str.hour, token + 8, 2);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	3334      	adds	r3, #52	@ 0x34
 80012f0:	697a      	ldr	r2, [r7, #20]
 80012f2:	3208      	adds	r2, #8
 80012f4:	8812      	ldrh	r2, [r2, #0]
 80012f6:	b292      	uxth	r2, r2
 80012f8:	801a      	strh	r2, [r3, #0]
				location->time_str.hour[2] = 0;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

				memcpy(location->time_str.minute, token + 10, 2);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	3337      	adds	r3, #55	@ 0x37
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	320a      	adds	r2, #10
 800130a:	8812      	ldrh	r2, [r2, #0]
 800130c:	b292      	uxth	r2, r2
 800130e:	801a      	strh	r2, [r3, #0]
				location->time_str.minute[2] = 0;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

				memcpy(location->time_str.second, token + 12, 2);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	333a      	adds	r3, #58	@ 0x3a
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	320c      	adds	r2, #12
 8001320:	8812      	ldrh	r2, [r2, #0]
 8001322:	b292      	uxth	r2, r2
 8001324:	801a      	strh	r2, [r3, #0]
				location->time_str.second[2] = 0;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
			}
			break;
 800132e:	e030      	b.n	8001392 <SIM868_GetGPSLocation+0x1a6>

		case 3: // Latitude
			strncpy(location->lat_str, token, sizeof(location->lat_str) - 1);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	3301      	adds	r3, #1
 8001334:	220b      	movs	r2, #11
 8001336:	6979      	ldr	r1, [r7, #20]
 8001338:	4618      	mov	r0, r3
 800133a:	f007 f93d 	bl	80085b8 <strncpy>
			location->lat_str[sizeof(location->lat_str) - 1] = 0; // Ensure null termination
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	2200      	movs	r2, #0
 8001342:	731a      	strb	r2, [r3, #12]
			break;
 8001344:	e026      	b.n	8001394 <SIM868_GetGPSLocation+0x1a8>

		case 4: // Longitude
			strncpy(location->lon_str, token, sizeof(location->lon_str) - 1);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	331d      	adds	r3, #29
 800134a:	220b      	movs	r2, #11
 800134c:	6979      	ldr	r1, [r7, #20]
 800134e:	4618      	mov	r0, r3
 8001350:	f007 f932 	bl	80085b8 <strncpy>
			location->lon_str[sizeof(location->lon_str) - 1] = 0; // Ensure null termination
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			break;
 800135c:	e01a      	b.n	8001394 <SIM868_GetGPSLocation+0x1a8>

		case 5: // Altitude (skip)
			break;

		case 6: // Speed
			strncpy(location->speed_str, token,
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	330d      	adds	r3, #13
 8001362:	2207      	movs	r2, #7
 8001364:	6979      	ldr	r1, [r7, #20]
 8001366:	4618      	mov	r0, r3
 8001368:	f007 f926 	bl	80085b8 <strncpy>
					sizeof(location->speed_str) - 1);
			location->speed_str[sizeof(location->speed_str) - 1] = 0; // Ensure null termination
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	2200      	movs	r2, #0
 8001370:	751a      	strb	r2, [r3, #20]
			break;
 8001372:	e00f      	b.n	8001394 <SIM868_GetGPSLocation+0x1a8>

		case 7: // Course
			strncpy(location->course_str, token,
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	3315      	adds	r3, #21
 8001378:	2207      	movs	r2, #7
 800137a:	6979      	ldr	r1, [r7, #20]
 800137c:	4618      	mov	r0, r3
 800137e:	f007 f91b 	bl	80085b8 <strncpy>
					sizeof(location->course_str) - 1);
			location->course_str[sizeof(location->course_str) - 1] = 0; // Ensure null termination
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	2200      	movs	r2, #0
 8001386:	771a      	strb	r2, [r3, #28]
			break;
 8001388:	e004      	b.n	8001394 <SIM868_GetGPSLocation+0x1a8>
			break;
 800138a:	bf00      	nop
 800138c:	e002      	b.n	8001394 <SIM868_GetGPSLocation+0x1a8>
			break;
 800138e:	bf00      	nop
 8001390:	e000      	b.n	8001394 <SIM868_GetGPSLocation+0x1a8>
			break;
 8001392:	bf00      	nop
		}

		// Get next token
		token = strtok_r(NULL, ",", &saveptr);
 8001394:	f107 0308 	add.w	r3, r7, #8
 8001398:	461a      	mov	r2, r3
 800139a:	4920      	ldr	r1, [pc, #128]	@ (800141c <SIM868_GetGPSLocation+0x230>)
 800139c:	2000      	movs	r0, #0
 800139e:	f007 f97b 	bl	8008698 <strtok_r>
 80013a2:	6178      	str	r0, [r7, #20]
		field_index++;
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	3301      	adds	r3, #1
 80013a8:	613b      	str	r3, [r7, #16]
	while (token != NULL && field_index <= 7) { // Only process up to course field
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <SIM868_GetGPSLocation+0x1cc>
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	2b07      	cmp	r3, #7
 80013b4:	f77f af4b 	ble.w	800124e <SIM868_GetGPSLocation+0x62>
	}

	// Set validity flag based on having latitude and longitude
	location->valid =
			(location->lat_str[0] != '\0' && location->lon_str[0] != '\0') ?
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	785b      	ldrb	r3, [r3, #1]
					1 : 0;
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d005      	beq.n	80013cc <SIM868_GetGPSLocation+0x1e0>
			(location->lat_str[0] != '\0' && location->lon_str[0] != '\0') ?
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	7f5b      	ldrb	r3, [r3, #29]
					1 : 0;
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <SIM868_GetGPSLocation+0x1e0>
 80013c8:	2301      	movs	r3, #1
 80013ca:	e000      	b.n	80013ce <SIM868_GetGPSLocation+0x1e2>
 80013cc:	2300      	movs	r3, #0
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	b2d9      	uxtb	r1, r3
	location->valid =
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	7813      	ldrb	r3, [r2, #0]
 80013d8:	f361 0300 	bfi	r3, r1, #0, #1
 80013dc:	7013      	strb	r3, [r2, #0]

	DEBUG_PRINT("Parsed location: lat=%s, lon=%s\n", location->lat_str,
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	1c59      	adds	r1, r3, #1
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	331d      	adds	r3, #29
 80013e6:	461a      	mov	r2, r3
 80013e8:	480f      	ldr	r0, [pc, #60]	@ (8001428 <SIM868_GetGPSLocation+0x23c>)
 80013ea:	f006 ff3d 	bl	8008268 <iprintf>
			location->lon_str);

	return (location->valid) ? SIM868_SUCCESS : SIM868_NO_FIX;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	bf0c      	ite	eq
 80013fc:	2301      	moveq	r3, #1
 80013fe:	2300      	movne	r3, #0
 8001400:	b2db      	uxtb	r3, r3
}
 8001402:	4618      	mov	r0, r3
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2000031c 	.word	0x2000031c
 8001410:	0800b08c 	.word	0x0800b08c
 8001414:	0800b098 	.word	0x0800b098
 8001418:	0800b0a4 	.word	0x0800b0a4
 800141c:	0800affc 	.word	0x0800affc
 8001420:	0800b0cc 	.word	0x0800b0cc
 8001424:	0800b0e0 	.word	0x0800b0e0
 8001428:	0800b0ec 	.word	0x0800b0ec

0800142c <sendMQTTPacket>:
		}
	}
}

SIM868_Status_t sendMQTTPacket(UART_HandleTypeDef *huart, uint8_t *data,
		uint16_t len, uint16_t timeout) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	4611      	mov	r1, r2
 8001438:	461a      	mov	r2, r3
 800143a:	460b      	mov	r3, r1
 800143c:	80fb      	strh	r3, [r7, #6]
 800143e:	4613      	mov	r3, r2
 8001440:	80bb      	strh	r3, [r7, #4]

	DEBUG_PRINT(">> Sending MQTT Packet...\n");
 8001442:	4815      	ldr	r0, [pc, #84]	@ (8001498 <sendMQTTPacket+0x6c>)
 8001444:	f006 ff78 	bl	8008338 <puts>

	// Transmit raw binary data
	if (HAL_UART_Transmit(huart, data, len, timeout) != HAL_OK) {
 8001448:	88bb      	ldrh	r3, [r7, #4]
 800144a:	88fa      	ldrh	r2, [r7, #6]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f005 fe83 	bl	800715a <HAL_UART_Transmit>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d004      	beq.n	8001464 <sendMQTTPacket+0x38>
		DEBUG_PRINT("#RED#Failed to transmit raw data\n");
 800145a:	4810      	ldr	r0, [pc, #64]	@ (800149c <sendMQTTPacket+0x70>)
 800145c:	f006 ff6c 	bl	8008338 <puts>
		return SIM868_ERROR;
 8001460:	2303      	movs	r3, #3
 8001462:	e014      	b.n	800148e <sendMQTTPacket+0x62>
	}

//	 Wait for a response from SIM868 after raw data (e.g. "SEND OK" or "ERROR") (debug)
	memset(rxBuffer, 0, MAX_RESPONSE_LEN);
 8001464:	2280      	movs	r2, #128	@ 0x80
 8001466:	2100      	movs	r1, #0
 8001468:	480d      	ldr	r0, [pc, #52]	@ (80014a0 <sendMQTTPacket+0x74>)
 800146a:	f007 f89d 	bl	80085a8 <memset>
//
	HAL_UART_Receive(huart, rxBuffer, MAX_RESPONSE_LEN - 1, HAL_TIMEOUT);
 800146e:	2303      	movs	r3, #3
 8001470:	227f      	movs	r2, #127	@ 0x7f
 8001472:	490b      	ldr	r1, [pc, #44]	@ (80014a0 <sendMQTTPacket+0x74>)
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	f005 fefb 	bl	8007270 <HAL_UART_Receive>
//	 Copy response and add null terminator
//	char response[MAX_RESPONSE_LEN];
//	memcpy(response, (char*) rxBuffer + 2, MAX_RESPONSE_LEN - 1);

// Always null-terminate the received buffer
	rxBuffer[sizeof(rxBuffer) - 1] = '\0';
 800147a:	4b09      	ldr	r3, [pc, #36]	@ (80014a0 <sendMQTTPacket+0x74>)
 800147c:	2200      	movs	r2, #0
 800147e:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
	DEBUG_PRINT("#ORG#SendAtCommand = %s\n", (char* ) rxBuffer + 2);
 8001482:	4b08      	ldr	r3, [pc, #32]	@ (80014a4 <sendMQTTPacket+0x78>)
 8001484:	4619      	mov	r1, r3
 8001486:	4808      	ldr	r0, [pc, #32]	@ (80014a8 <sendMQTTPacket+0x7c>)
 8001488:	f006 feee 	bl	8008268 <iprintf>
//	DEBUG_PRINT("#ORG#Raw data transmitted (%d bytes)\n", len);
//	DEBUG_PRINT(">> Done!\n");
	return SIM868_SUCCESS;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	0800b37c 	.word	0x0800b37c
 800149c:	0800b398 	.word	0x0800b398
 80014a0:	2000029c 	.word	0x2000029c
 80014a4:	2000029e 	.word	0x2000029e
 80014a8:	0800b3bc 	.word	0x0800b3bc

080014ac <mqtt_publish_packet>:
void mqtt_publish_packet(UART_HandleTypeDef *huart, const char *topic,
		const char *payload) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b0ee      	sub	sp, #440	@ 0x1b8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80014b6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80014ba:	6018      	str	r0, [r3, #0]
 80014bc:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80014c0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80014c4:	6019      	str	r1, [r3, #0]
 80014c6:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80014ca:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80014ce:	601a      	str	r2, [r3, #0]
	uint8_t mqtt_packet[MAX_PACKET_SIZE];
	// Calculate lengths of topic and payload
	size_t topic_length = strlen(topic);
 80014d0:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80014d4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80014d8:	6818      	ldr	r0, [r3, #0]
 80014da:	f7fe fe39 	bl	8000150 <strlen>
 80014de:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
	size_t payload_length = strlen(payload);
 80014e2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80014e6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80014ea:	6818      	ldr	r0, [r3, #0]
 80014ec:	f7fe fe30 	bl	8000150 <strlen>
 80014f0:	f8c7 01b0 	str.w	r0, [r7, #432]	@ 0x1b0

	// Remaining length: topic length (2 bytes) + topic + payload
	size_t remaining_length = 2 + topic_length + payload_length;
 80014f4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80014f8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80014fc:	4413      	add	r3, r2
 80014fe:	3302      	adds	r3, #2
 8001500:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac

	// Fixed header: PUBLISH (0x30), Remaining Length (calculated)
	mqtt_packet[0] = 0x30;                     // PUBLISH packet type
 8001504:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001508:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800150c:	2230      	movs	r2, #48	@ 0x30
 800150e:	701a      	strb	r2, [r3, #0]
	mqtt_packet[1] = (uint8_t) remaining_length; // Remaining Length
 8001510:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001514:	b2da      	uxtb	r2, r3
 8001516:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800151a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800151e:	705a      	strb	r2, [r3, #1]

	// Topic length: 2 bytes (high byte, low byte)
	mqtt_packet[2] = (uint8_t) (topic_length >> 8);   // High byte
 8001520:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001524:	0a1b      	lsrs	r3, r3, #8
 8001526:	b2da      	uxtb	r2, r3
 8001528:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800152c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001530:	709a      	strb	r2, [r3, #2]
	mqtt_packet[3] = (uint8_t) (topic_length & 0xFF); // Low byte
 8001532:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001536:	b2da      	uxtb	r2, r3
 8001538:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800153c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001540:	70da      	strb	r2, [r3, #3]

	// Topic: Copy the topic string into the packet
	memcpy(&mqtt_packet[4], topic, topic_length);
 8001542:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001546:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800154a:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 800154e:	1d10      	adds	r0, r2, #4
 8001550:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001554:	6819      	ldr	r1, [r3, #0]
 8001556:	f007 f93e 	bl	80087d6 <memcpy>

	// Payload: Copy the payload string into the packetC
	memcpy(&mqtt_packet[4 + topic_length], payload, payload_length);
 800155a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800155e:	3304      	adds	r3, #4
 8001560:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8001564:	18d0      	adds	r0, r2, r3
 8001566:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 800156a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800156e:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8001572:	6819      	ldr	r1, [r3, #0]
 8001574:	f007 f92f 	bl	80087d6 <memcpy>

	// Add 0x1A at the end of the payload
	mqtt_packet[4 + topic_length + payload_length] = 0x1A;
 8001578:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800157c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001580:	4413      	add	r3, r2
 8001582:	3304      	adds	r3, #4
 8001584:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 8001588:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 800158c:	211a      	movs	r1, #26
 800158e:	54d1      	strb	r1, [r2, r3]
	/**********************************************************************/
	char response[MAX_RESPONSE_LEN];
	// send MQTT data packet
//	HAL_Delay(1000);
//	sendATCommand(huart, "AT+CSQ", response, UART_TIMEOUT);
	sendATCommand(huart, "AT+CIPSEND", response, UART_TIMEOUT);
 8001590:	f107 0214 	add.w	r2, r7, #20
 8001594:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001598:	f5a3 70d6 	sub.w	r0, r3, #428	@ 0x1ac
 800159c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015a0:	490a      	ldr	r1, [pc, #40]	@ (80015cc <mqtt_publish_packet+0x120>)
 80015a2:	6800      	ldr	r0, [r0, #0]
 80015a4:	f7ff fcce 	bl	8000f44 <sendATCommand>
	sendMQTTPacket(huart, mqtt_packet, sizeof(mqtt_packet), 2000);
 80015a8:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 80015ac:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80015b0:	f5a3 70d6 	sub.w	r0, r3, #428	@ 0x1ac
 80015b4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80015b8:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80015bc:	6800      	ldr	r0, [r0, #0]
 80015be:	f7ff ff35 	bl	800142c <sendMQTTPacket>
//	HAL_Delay(500);
}
 80015c2:	bf00      	nop
 80015c4:	f507 77dc 	add.w	r7, r7, #440	@ 0x1b8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	0800aec4 	.word	0x0800aec4

080015d0 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 80015da:	2101      	movs	r1, #1
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 f9fe 	bl	80019de <LoRa_read>
 80015e2:	4603      	mov	r3, r0
 80015e4:	73bb      	strb	r3, [r7, #14]
	data = read;
 80015e6:	7bbb      	ldrb	r3, [r7, #14]
 80015e8:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d107      	bne.n	8001600 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 80015f0:	7bbb      	ldrb	r3, [r7, #14]
 80015f2:	f023 0307 	bic.w	r3, r3, #7
 80015f6:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	61da      	str	r2, [r3, #28]
 80015fe:	e03e      	b.n	800167e <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d10c      	bne.n	8001620 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8001606:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800160a:	f023 0307 	bic.w	r3, r3, #7
 800160e:	b25b      	sxtb	r3, r3
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	b25b      	sxtb	r3, r3
 8001616:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	61da      	str	r2, [r3, #28]
 800161e:	e02e      	b.n	800167e <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	2b03      	cmp	r3, #3
 8001624:	d10c      	bne.n	8001640 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8001626:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800162a:	f023 0307 	bic.w	r3, r3, #7
 800162e:	b25b      	sxtb	r3, r3
 8001630:	f043 0303 	orr.w	r3, r3, #3
 8001634:	b25b      	sxtb	r3, r3
 8001636:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2203      	movs	r2, #3
 800163c:	61da      	str	r2, [r3, #28]
 800163e:	e01e      	b.n	800167e <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	2b05      	cmp	r3, #5
 8001644:	d10c      	bne.n	8001660 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8001646:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800164a:	f023 0307 	bic.w	r3, r3, #7
 800164e:	b25b      	sxtb	r3, r3
 8001650:	f043 0305 	orr.w	r3, r3, #5
 8001654:	b25b      	sxtb	r3, r3
 8001656:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2205      	movs	r2, #5
 800165c:	61da      	str	r2, [r3, #28]
 800165e:	e00e      	b.n	800167e <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	2b06      	cmp	r3, #6
 8001664:	d10b      	bne.n	800167e <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8001666:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800166a:	f023 0307 	bic.w	r3, r3, #7
 800166e:	b25b      	sxtb	r3, r3
 8001670:	f043 0306 	orr.w	r3, r3, #6
 8001674:	b25b      	sxtb	r3, r3
 8001676:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2206      	movs	r2, #6
 800167c:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 800167e:	7bfb      	ldrb	r3, [r7, #15]
 8001680:	461a      	mov	r2, r3
 8001682:	2101      	movs	r1, #1
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 f9c4 	bl	8001a12 <LoRa_write>
	//HAL_Delay(10);
}
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8001692:	b580      	push	{r7, lr}
 8001694:	b084      	sub	sp, #16
 8001696:	af00      	add	r7, sp, #0
 8001698:	60f8      	str	r0, [r7, #12]
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	603b      	str	r3, [r7, #0]
 800169e:	4613      	mov	r3, r2
 80016a0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6818      	ldr	r0, [r3, #0]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	889b      	ldrh	r3, [r3, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	4619      	mov	r1, r3
 80016ae:	f003 fabb 	bl	8004c28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6998      	ldr	r0, [r3, #24]
 80016b6:	88fa      	ldrh	r2, [r7, #6]
 80016b8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	f004 ffdd 	bl	800667c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80016c2:	bf00      	nop
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f005 fbdd 	bl	8006e88 <HAL_SPI_GetState>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d1f7      	bne.n	80016c4 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6998      	ldr	r0, [r3, #24]
 80016d8:	8b3a      	ldrh	r2, [r7, #24]
 80016da:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80016de:	6839      	ldr	r1, [r7, #0]
 80016e0:	f005 f910 	bl	8006904 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80016e4:	bf00      	nop
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f005 fbcc 	bl	8006e88 <HAL_SPI_GetState>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d1f7      	bne.n	80016e6 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6818      	ldr	r0, [r3, #0]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	889b      	ldrh	r3, [r3, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	4619      	mov	r1, r3
 8001702:	f003 fa91 	bl	8004c28 <HAL_GPIO_WritePin>
}
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 800170e:	b580      	push	{r7, lr}
 8001710:	b084      	sub	sp, #16
 8001712:	af00      	add	r7, sp, #0
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	603b      	str	r3, [r7, #0]
 800171a:	4613      	mov	r3, r2
 800171c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6818      	ldr	r0, [r3, #0]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	889b      	ldrh	r3, [r3, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	4619      	mov	r1, r3
 800172a:	f003 fa7d 	bl	8004c28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6998      	ldr	r0, [r3, #24]
 8001732:	88fa      	ldrh	r2, [r7, #6]
 8001734:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001738:	68b9      	ldr	r1, [r7, #8]
 800173a:	f004 ff9f 	bl	800667c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800173e:	bf00      	nop
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	4618      	mov	r0, r3
 8001746:	f005 fb9f 	bl	8006e88 <HAL_SPI_GetState>
 800174a:	4603      	mov	r3, r0
 800174c:	2b01      	cmp	r3, #1
 800174e:	d1f7      	bne.n	8001740 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6998      	ldr	r0, [r3, #24]
 8001754:	8b3a      	ldrh	r2, [r7, #24]
 8001756:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800175a:	6839      	ldr	r1, [r7, #0]
 800175c:	f004 ff8e 	bl	800667c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001760:	bf00      	nop
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	4618      	mov	r0, r3
 8001768:	f005 fb8e 	bl	8006e88 <HAL_SPI_GetState>
 800176c:	4603      	mov	r3, r0
 800176e:	2b01      	cmp	r3, #1
 8001770:	d1f7      	bne.n	8001762 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6818      	ldr	r0, [r3, #0]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	889b      	ldrh	r3, [r3, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	4619      	mov	r1, r3
 800177e:	f003 fa53 	bl	8004c28 <HAL_GPIO_WritePin>
}
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 800178a:	b580      	push	{r7, lr}
 800178c:	b084      	sub	sp, #16
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	460b      	mov	r3, r1
 8001794:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8001796:	2126      	movs	r1, #38	@ 0x26
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 f920 	bl	80019de <LoRa_read>
 800179e:	4603      	mov	r3, r0
 80017a0:	73bb      	strb	r3, [r7, #14]

	if(value)
 80017a2:	78fb      	ldrb	r3, [r7, #3]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d004      	beq.n	80017b2 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 80017a8:	7bbb      	ldrb	r3, [r7, #14]
 80017aa:	f043 0308 	orr.w	r3, r3, #8
 80017ae:	73fb      	strb	r3, [r7, #15]
 80017b0:	e003      	b.n	80017ba <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 80017b2:	7bbb      	ldrb	r3, [r7, #14]
 80017b4:	f023 0308 	bic.w	r3, r3, #8
 80017b8:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
 80017bc:	461a      	mov	r2, r3
 80017be:	2126      	movs	r1, #38	@ 0x26
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 f926 	bl	8001a12 <LoRa_write>
	HAL_Delay(10);
 80017c6:	200a      	movs	r0, #10
 80017c8:	f002 fc02 	bl	8003fd0 <HAL_Delay>
}
 80017cc:	bf00      	nop
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b096      	sub	sp, #88	@ 0x58
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 80017dc:	4a17      	ldr	r2, [pc, #92]	@ (800183c <LoRa_setAutoLDO+0x68>)
 80017de:	f107 0308 	add.w	r3, r7, #8
 80017e2:	4611      	mov	r1, r2
 80017e4:	2250      	movs	r2, #80	@ 0x50
 80017e6:	4618      	mov	r0, r3
 80017e8:	f006 fff5 	bl	80087d6 <memcpy>

	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017f2:	461a      	mov	r2, r3
 80017f4:	2301      	movs	r3, #1
 80017f6:	4093      	lsls	r3, r2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fe03 	bl	8000404 <__aeabi_i2d>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	3358      	adds	r3, #88	@ 0x58
 8001808:	443b      	add	r3, r7
 800180a:	3b50      	subs	r3, #80	@ 0x50
 800180c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001810:	f7fe ff8c 	bl	800072c <__aeabi_ddiv>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	f7ff f90c 	bl	8000a38 <__aeabi_d2iz>
 8001820:	4603      	mov	r3, r0
 8001822:	2b10      	cmp	r3, #16
 8001824:	bfcc      	ite	gt
 8001826:	2301      	movgt	r3, #1
 8001828:	2300      	movle	r3, #0
 800182a:	b2db      	uxtb	r3, r3
 800182c:	4619      	mov	r1, r3
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ffab 	bl	800178a <LoRa_setLowDaraRateOptimization>
}
 8001834:	bf00      	nop
 8001836:	3758      	adds	r7, #88	@ 0x58
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	0800b3d8 	.word	0x0800b3d8

08001840 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	04db      	lsls	r3, r3, #19
 800184e:	115b      	asrs	r3, r3, #5
 8001850:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	0c1b      	lsrs	r3, r3, #16
 8001856:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8001858:	7afb      	ldrb	r3, [r7, #11]
 800185a:	461a      	mov	r2, r3
 800185c:	2106      	movs	r1, #6
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 f8d7 	bl	8001a12 <LoRa_write>
	HAL_Delay(5);
 8001864:	2005      	movs	r0, #5
 8001866:	f002 fbb3 	bl	8003fd0 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001870:	7afb      	ldrb	r3, [r7, #11]
 8001872:	461a      	mov	r2, r3
 8001874:	2107      	movs	r1, #7
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f8cb 	bl	8001a12 <LoRa_write>
	HAL_Delay(5);
 800187c:	2005      	movs	r0, #5
 800187e:	f002 fba7 	bl	8003fd0 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8001886:	7afb      	ldrb	r3, [r7, #11]
 8001888:	461a      	mov	r2, r3
 800188a:	2108      	movs	r1, #8
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 f8c0 	bl	8001a12 <LoRa_write>
	HAL_Delay(5);
 8001892:	2005      	movs	r0, #5
 8001894:	f002 fb9c 	bl	8003fd0 <HAL_Delay>
}
 8001898:	bf00      	nop
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	2b0c      	cmp	r3, #12
 80018ae:	dd01      	ble.n	80018b4 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80018b0:	230c      	movs	r3, #12
 80018b2:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	2b06      	cmp	r3, #6
 80018b8:	dc01      	bgt.n	80018be <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80018ba:	2307      	movs	r3, #7
 80018bc:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80018be:	211e      	movs	r1, #30
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 f88c 	bl	80019de <LoRa_read>
 80018c6:	4603      	mov	r3, r0
 80018c8:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80018ca:	200a      	movs	r0, #10
 80018cc:	f002 fb80 	bl	8003fd0 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	011b      	lsls	r3, r3, #4
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	4413      	add	r3, r2
 80018e2:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80018e4:	7bbb      	ldrb	r3, [r7, #14]
 80018e6:	461a      	mov	r2, r3
 80018e8:	211e      	movs	r1, #30
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f891 	bl	8001a12 <LoRa_write>
	HAL_Delay(10);
 80018f0:	200a      	movs	r0, #10
 80018f2:	f002 fb6d 	bl	8003fd0 <HAL_Delay>

	LoRa_setAutoLDO(_LoRa);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ff6c 	bl	80017d4 <LoRa_setAutoLDO>
}
 80018fc:	bf00      	nop
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8001910:	78fb      	ldrb	r3, [r7, #3]
 8001912:	461a      	mov	r2, r3
 8001914:	2109      	movs	r1, #9
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 f87b 	bl	8001a12 <LoRa_write>
	HAL_Delay(10);
 800191c:	200a      	movs	r0, #10
 800191e:	f002 fb57 	bl	8003fd0 <HAL_Delay>
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001940:	d801      	bhi.n	8001946 <LoRa_setOCP+0x1a>
		current = 45;
 8001942:	232d      	movs	r3, #45	@ 0x2d
 8001944:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8001946:	78fb      	ldrb	r3, [r7, #3]
 8001948:	2bf0      	cmp	r3, #240	@ 0xf0
 800194a:	d901      	bls.n	8001950 <LoRa_setOCP+0x24>
		current = 240;
 800194c:	23f0      	movs	r3, #240	@ 0xf0
 800194e:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001950:	78fb      	ldrb	r3, [r7, #3]
 8001952:	2b78      	cmp	r3, #120	@ 0x78
 8001954:	d809      	bhi.n	800196a <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8001956:	78fb      	ldrb	r3, [r7, #3]
 8001958:	3b2d      	subs	r3, #45	@ 0x2d
 800195a:	4a12      	ldr	r2, [pc, #72]	@ (80019a4 <LoRa_setOCP+0x78>)
 800195c:	fb82 1203 	smull	r1, r2, r2, r3
 8001960:	1052      	asrs	r2, r2, #1
 8001962:	17db      	asrs	r3, r3, #31
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	73fb      	strb	r3, [r7, #15]
 8001968:	e00b      	b.n	8001982 <LoRa_setOCP+0x56>
	else if(current <= 240)
 800196a:	78fb      	ldrb	r3, [r7, #3]
 800196c:	2bf0      	cmp	r3, #240	@ 0xf0
 800196e:	d808      	bhi.n	8001982 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001970:	78fb      	ldrb	r3, [r7, #3]
 8001972:	331e      	adds	r3, #30
 8001974:	4a0b      	ldr	r2, [pc, #44]	@ (80019a4 <LoRa_setOCP+0x78>)
 8001976:	fb82 1203 	smull	r1, r2, r2, r3
 800197a:	1092      	asrs	r2, r2, #2
 800197c:	17db      	asrs	r3, r3, #31
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	3320      	adds	r3, #32
 8001986:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	461a      	mov	r2, r3
 800198c:	210b      	movs	r1, #11
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 f83f 	bl	8001a12 <LoRa_write>
	HAL_Delay(10);
 8001994:	200a      	movs	r0, #10
 8001996:	f002 fb1b 	bl	8003fd0 <HAL_Delay>
}
 800199a:	bf00      	nop
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	66666667 	.word	0x66666667

080019a8 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 80019b0:	211e      	movs	r1, #30
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f813 	bl	80019de <LoRa_read>
 80019b8:	4603      	mov	r3, r0
 80019ba:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	f043 0307 	orr.w	r3, r3, #7
 80019c2:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80019c4:	7bbb      	ldrb	r3, [r7, #14]
 80019c6:	461a      	mov	r2, r3
 80019c8:	211e      	movs	r1, #30
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f821 	bl	8001a12 <LoRa_write>
	HAL_Delay(10);
 80019d0:	200a      	movs	r0, #10
 80019d2:	f002 fafd 	bl	8003fd0 <HAL_Delay>
}
 80019d6:	bf00      	nop
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80019de:	b580      	push	{r7, lr}
 80019e0:	b086      	sub	sp, #24
 80019e2:	af02      	add	r7, sp, #8
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	460b      	mov	r3, r1
 80019e8:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80019ea:	78fb      	ldrb	r3, [r7, #3]
 80019ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80019f4:	f107 030f 	add.w	r3, r7, #15
 80019f8:	f107 010e 	add.w	r1, r7, #14
 80019fc:	2201      	movs	r2, #1
 80019fe:	9200      	str	r2, [sp, #0]
 8001a00:	2201      	movs	r2, #1
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff fe45 	bl	8001692 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b086      	sub	sp, #24
 8001a16:	af02      	add	r7, sp, #8
 8001a18:	6078      	str	r0, [r7, #4]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	70fb      	strb	r3, [r7, #3]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8001a22:	78fb      	ldrb	r3, [r7, #3]
 8001a24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001a2c:	78bb      	ldrb	r3, [r7, #2]
 8001a2e:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001a30:	f107 030f 	add.w	r3, r7, #15
 8001a34:	f107 010e 	add.w	r1, r7, #14
 8001a38:	2201      	movs	r2, #1
 8001a3a:	9200      	str	r2, [sp, #0]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff fe65 	bl	800170e <LoRa_writeReg>
	//HAL_Delay(5);
}
 8001a44:	bf00      	nop
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	607a      	str	r2, [r7, #4]
 8001a56:	461a      	mov	r2, r3
 8001a58:	460b      	mov	r3, r1
 8001a5a:	72fb      	strb	r3, [r7, #11]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8001a60:	7afb      	ldrb	r3, [r7, #11]
 8001a62:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6818      	ldr	r0, [r3, #0]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	889b      	ldrh	r3, [r3, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	4619      	mov	r1, r3
 8001a76:	f003 f8d7 	bl	8004c28 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6998      	ldr	r0, [r3, #24]
 8001a7e:	f107 0117 	add.w	r1, r7, #23
 8001a82:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001a86:	2201      	movs	r2, #1
 8001a88:	f004 fdf8 	bl	800667c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001a8c:	bf00      	nop
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f005 f9f8 	bl	8006e88 <HAL_SPI_GetState>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d1f7      	bne.n	8001a8e <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6998      	ldr	r0, [r3, #24]
 8001aa2:	7abb      	ldrb	r3, [r7, #10]
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	f004 fde6 	bl	800667c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001ab0:	bf00      	nop
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f005 f9e6 	bl	8006e88 <HAL_SPI_GetState>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d1f7      	bne.n	8001ab2 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6818      	ldr	r0, [r3, #0]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	889b      	ldrh	r3, [r3, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	4619      	mov	r1, r3
 8001ace:	f003 f8ab 	bl	8004c28 <HAL_GPIO_WritePin>
}
 8001ad2:	bf00      	nop
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]

	return 1;
 8001ae2:	2301      	movs	r3, #1
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr

08001aee <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b086      	sub	sp, #24
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	60f8      	str	r0, [r7, #12]
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	4611      	mov	r1, r2
 8001afa:	461a      	mov	r2, r3
 8001afc:	460b      	mov	r3, r1
 8001afe:	71fb      	strb	r3, [r7, #7]
 8001b00:	4613      	mov	r3, r2
 8001b02:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f7ff fd5f 	bl	80015d0 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8001b12:	210e      	movs	r1, #14
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f7ff ff62 	bl	80019de <LoRa_read>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001b1e:	7cfb      	ldrb	r3, [r7, #19]
 8001b20:	461a      	mov	r2, r3
 8001b22:	210d      	movs	r1, #13
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f7ff ff74 	bl	8001a12 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	2122      	movs	r1, #34	@ 0x22
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f7ff ff6e 	bl	8001a12 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	68ba      	ldr	r2, [r7, #8]
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f7ff ff85 	bl	8001a4c <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8001b42:	2103      	movs	r1, #3
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f7ff fd43 	bl	80015d0 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001b4a:	2112      	movs	r1, #18
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f7ff ff46 	bl	80019de <LoRa_read>
 8001b52:	4603      	mov	r3, r0
 8001b54:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8001b56:	7cfb      	ldrb	r3, [r7, #19]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00a      	beq.n	8001b76 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001b60:	22ff      	movs	r2, #255	@ 0xff
 8001b62:	2112      	movs	r1, #18
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f7ff ff54 	bl	8001a12 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001b6a:	6979      	ldr	r1, [r7, #20]
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f7ff fd2f 	bl	80015d0 <LoRa_gotoMode>
			return 1;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00f      	b.n	8001b96 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8001b76:	88bb      	ldrh	r3, [r7, #4]
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	80bb      	strh	r3, [r7, #4]
 8001b7c:	88bb      	ldrh	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d105      	bne.n	8001b8e <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8001b82:	6979      	ldr	r1, [r7, #20]
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	f7ff fd23 	bl	80015d0 <LoRa_gotoMode>
				return 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e003      	b.n	8001b96 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f002 fa1e 	bl	8003fd0 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001b94:	e7d9      	b.n	8001b4a <LoRa_transmit+0x5c>
	}
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001ba6:	2105      	movs	r1, #5
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff fd11 	bl	80015d0 <LoRa_gotoMode>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8001bb6:	b590      	push	{r4, r7, lr}
 8001bb8:	b089      	sub	sp, #36	@ 0x24
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	60f8      	str	r0, [r7, #12]
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61bb      	str	r3, [r7, #24]
 8001bcc:	e007      	b.n	8001bde <LoRa_receive+0x28>
		data[i]=0;
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	61bb      	str	r3, [r7, #24]
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	dbf3      	blt.n	8001bce <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001be6:	2101      	movs	r1, #1
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f7ff fcf1 	bl	80015d0 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8001bee:	2112      	movs	r1, #18
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	f7ff fef4 	bl	80019de <LoRa_read>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8001bfa:	7cfb      	ldrb	r3, [r7, #19]
 8001bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d02f      	beq.n	8001c64 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001c04:	22ff      	movs	r2, #255	@ 0xff
 8001c06:	2112      	movs	r1, #18
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f7ff ff02 	bl	8001a12 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8001c0e:	2113      	movs	r1, #19
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f7ff fee4 	bl	80019de <LoRa_read>
 8001c16:	4603      	mov	r3, r0
 8001c18:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8001c1a:	2110      	movs	r1, #16
 8001c1c:	68f8      	ldr	r0, [r7, #12]
 8001c1e:	f7ff fede 	bl	80019de <LoRa_read>
 8001c22:	4603      	mov	r3, r0
 8001c24:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001c26:	7cfb      	ldrb	r3, [r7, #19]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	210d      	movs	r1, #13
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f7ff fef0 	bl	8001a12 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8001c32:	7cba      	ldrb	r2, [r7, #18]
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	4293      	cmp	r3, r2
 8001c38:	bf28      	it	cs
 8001c3a:	4613      	movcs	r3, r2
 8001c3c:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	e00b      	b.n	8001c5c <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	18d4      	adds	r4, r2, r3
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f7ff fec6 	bl	80019de <LoRa_read>
 8001c52:	4603      	mov	r3, r0
 8001c54:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	617b      	str	r3, [r7, #20]
 8001c5c:	7ffb      	ldrb	r3, [r7, #31]
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	dbef      	blt.n	8001c44 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001c64:	2105      	movs	r1, #5
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f7ff fcb2 	bl	80015d0 <LoRa_gotoMode>
    return min;
 8001c6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3724      	adds	r7, #36	@ 0x24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd90      	pop	{r4, r7, pc}

08001c76 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b084      	sub	sp, #16
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff ff2b 	bl	8001ada <LoRa_isvalid>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 8096 	beq.w	8001db8 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff fc9e 	bl	80015d0 <LoRa_gotoMode>
			HAL_Delay(10);
 8001c94:	200a      	movs	r0, #10
 8001c96:	f002 f99b 	bl	8003fd0 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff fe9e 	bl	80019de <LoRa_read>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8001ca6:	200a      	movs	r0, #10
 8001ca8:	f002 f992 	bl	8003fd0 <HAL_Delay>
			data = read | 0x80;
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001cb2:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8001cb4:	7bbb      	ldrb	r3, [r7, #14]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	2101      	movs	r1, #1
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff fea9 	bl	8001a12 <LoRa_write>
			HAL_Delay(100);
 8001cc0:	2064      	movs	r0, #100	@ 0x64
 8001cc2:	f002 f985 	bl	8003fd0 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	4619      	mov	r1, r3
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff fdb7 	bl	8001840 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001cd8:	4619      	mov	r1, r3
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff fe12 	bl	8001904 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff fe1f 	bl	800192c <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8001cee:	2223      	movs	r2, #35	@ 0x23
 8001cf0:	210c      	movs	r1, #12
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff fe8d 	bl	8001a12 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff fe55 	bl	80019a8 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d04:	4619      	mov	r1, r3
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff fdca 	bl	80018a0 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001d0c:	22ff      	movs	r2, #255	@ 0xff
 8001d0e:	211f      	movs	r1, #31
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff fe7e 	bl	8001a12 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001d20:	011b      	lsls	r3, r3, #4
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	4413      	add	r3, r2
 8001d30:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8001d32:	7bbb      	ldrb	r3, [r7, #14]
 8001d34:	461a      	mov	r2, r3
 8001d36:	211d      	movs	r1, #29
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff fe6a 	bl	8001a12 <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff fd48 	bl	80017d4 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d48:	0a1b      	lsrs	r3, r3, #8
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	461a      	mov	r2, r3
 8001d50:	2120      	movs	r1, #32
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff fe5d 	bl	8001a12 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	461a      	mov	r2, r3
 8001d60:	2121      	movs	r1, #33	@ 0x21
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff fe55 	bl	8001a12 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8001d68:	2140      	movs	r1, #64	@ 0x40
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff fe37 	bl	80019de <LoRa_read>
 8001d70:	4603      	mov	r3, r0
 8001d72:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
 8001d76:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8001d7a:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001d7c:	7bbb      	ldrb	r3, [r7, #14]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	2140      	movs	r1, #64	@ 0x40
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff fe45 	bl	8001a12 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001d88:	2101      	movs	r1, #1
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff fc20 	bl	80015d0 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8001d96:	200a      	movs	r0, #10
 8001d98:	f002 f91a 	bl	8003fd0 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8001d9c:	2142      	movs	r1, #66	@ 0x42
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff fe1d 	bl	80019de <LoRa_read>
 8001da4:	4603      	mov	r3, r0
 8001da6:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	2b12      	cmp	r3, #18
 8001dac:	d101      	bne.n	8001db2 <LoRa_init+0x13c>
				return LORA_OK;
 8001dae:	23c8      	movs	r3, #200	@ 0xc8
 8001db0:	e004      	b.n	8001dbc <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8001db2:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8001db6:	e001      	b.n	8001dbc <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8001db8:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <LoRa_Init>:
uint8_t loraRxBuffer[128];
extern LoRa myLoRa;
extern SPI_HandleTypeDef hspi1;
char buffer[256];

void LoRa_Init(void) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
    myLoRa.CS_port = GPIOA;
 8001dc8:	4b21      	ldr	r3, [pc, #132]	@ (8001e50 <LoRa_Init+0x8c>)
 8001dca:	4a22      	ldr	r2, [pc, #136]	@ (8001e54 <LoRa_Init+0x90>)
 8001dcc:	601a      	str	r2, [r3, #0]
    myLoRa.CS_pin = GPIO_PIN_4;
 8001dce:	4b20      	ldr	r3, [pc, #128]	@ (8001e50 <LoRa_Init+0x8c>)
 8001dd0:	2210      	movs	r2, #16
 8001dd2:	809a      	strh	r2, [r3, #4]
    myLoRa.reset_port = GPIOA;
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e50 <LoRa_Init+0x8c>)
 8001dd6:	4a1f      	ldr	r2, [pc, #124]	@ (8001e54 <LoRa_Init+0x90>)
 8001dd8:	609a      	str	r2, [r3, #8]
    myLoRa.reset_pin = GPIO_PIN_3;
 8001dda:	4b1d      	ldr	r3, [pc, #116]	@ (8001e50 <LoRa_Init+0x8c>)
 8001ddc:	2208      	movs	r2, #8
 8001dde:	819a      	strh	r2, [r3, #12]
    myLoRa.DIO0_port = GPIOB;
 8001de0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e50 <LoRa_Init+0x8c>)
 8001de2:	4a1d      	ldr	r2, [pc, #116]	@ (8001e58 <LoRa_Init+0x94>)
 8001de4:	611a      	str	r2, [r3, #16]
    myLoRa.DIO0_pin = GPIO_PIN_0;
 8001de6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e50 <LoRa_Init+0x8c>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	829a      	strh	r2, [r3, #20]
    myLoRa.hSPIx = &hspi1;
 8001dec:	4b18      	ldr	r3, [pc, #96]	@ (8001e50 <LoRa_Init+0x8c>)
 8001dee:	4a1b      	ldr	r2, [pc, #108]	@ (8001e5c <LoRa_Init+0x98>)
 8001df0:	619a      	str	r2, [r3, #24]

    myLoRa.frequency = 433;
 8001df2:	4b17      	ldr	r3, [pc, #92]	@ (8001e50 <LoRa_Init+0x8c>)
 8001df4:	f240 12b1 	movw	r2, #433	@ 0x1b1
 8001df8:	621a      	str	r2, [r3, #32]
    myLoRa.spredingFactor = SF_7;
 8001dfa:	4b15      	ldr	r3, [pc, #84]	@ (8001e50 <LoRa_Init+0x8c>)
 8001dfc:	2207      	movs	r2, #7
 8001dfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    myLoRa.bandWidth = BW_125KHz;
 8001e02:	4b13      	ldr	r3, [pc, #76]	@ (8001e50 <LoRa_Init+0x8c>)
 8001e04:	2207      	movs	r2, #7
 8001e06:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    myLoRa.crcRate = CR_4_5;
 8001e0a:	4b11      	ldr	r3, [pc, #68]	@ (8001e50 <LoRa_Init+0x8c>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    myLoRa.power = POWER_20db;
 8001e12:	4b0f      	ldr	r3, [pc, #60]	@ (8001e50 <LoRa_Init+0x8c>)
 8001e14:	22ff      	movs	r2, #255	@ 0xff
 8001e16:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    myLoRa.overCurrentProtection = 130;
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e50 <LoRa_Init+0x8c>)
 8001e1c:	2282      	movs	r2, #130	@ 0x82
 8001e1e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    myLoRa.preamble = 8;
 8001e22:	4b0b      	ldr	r3, [pc, #44]	@ (8001e50 <LoRa_Init+0x8c>)
 8001e24:	2208      	movs	r2, #8
 8001e26:	851a      	strh	r2, [r3, #40]	@ 0x28


    // Initialize LoRa
    if (LoRa_init(&myLoRa) != LORA_OK) {
 8001e28:	4809      	ldr	r0, [pc, #36]	@ (8001e50 <LoRa_Init+0x8c>)
 8001e2a:	f7ff ff24 	bl	8001c76 <LoRa_init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2bc8      	cmp	r3, #200	@ 0xc8
 8001e32:	d004      	beq.n	8001e3e <LoRa_Init+0x7a>
    	DEBUG_PRINT("LoRa Init Failed\r\n");
 8001e34:	480a      	ldr	r0, [pc, #40]	@ (8001e60 <LoRa_Init+0x9c>)
 8001e36:	f006 fa7f 	bl	8008338 <puts>
        while (1);
 8001e3a:	bf00      	nop
 8001e3c:	e7fd      	b.n	8001e3a <LoRa_Init+0x76>
    }
    // Send initialization message
    DEBUG_PRINT("LoRa Transmitter & Receiver initialized\r\n");
 8001e3e:	4809      	ldr	r0, [pc, #36]	@ (8001e64 <LoRa_Init+0xa0>)
 8001e40:	f006 fa7a 	bl	8008338 <puts>
       DEBUG_PRINT("CarSYNC_1\r\n");
 8001e44:	4808      	ldr	r0, [pc, #32]	@ (8001e68 <LoRa_Init+0xa4>)
 8001e46:	f006 fa77 	bl	8008338 <puts>



}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200005f0 	.word	0x200005f0
 8001e54:	40010800 	.word	0x40010800
 8001e58:	40010c00 	.word	0x40010c00
 8001e5c:	200004ac 	.word	0x200004ac
 8001e60:	0800b428 	.word	0x0800b428
 8001e64:	0800b43c 	.word	0x0800b43c
 8001e68:	0800b468 	.word	0x0800b468

08001e6c <receive_ack_TX>:

bool receive_ack_TX(void) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b094      	sub	sp, #80	@ 0x50
 8001e70:	af00      	add	r7, sp, #0
	uint8_t ackByte = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	char buffer[64];
	bool responseReceived = false;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	DEBUG_PRINT("Waiting for ACK...\r\n");
 8001e7e:	4829      	ldr	r0, [pc, #164]	@ (8001f24 <receive_ack_TX+0xb8>)
 8001e80:	f006 fa5a 	bl	8008338 <puts>

	uint32_t startTime = HAL_GetTick();
 8001e84:	f002 f89a 	bl	8003fbc <HAL_GetTick>
 8001e88:	64b8      	str	r0, [r7, #72]	@ 0x48
	while (HAL_GetTick() - startTime < 2000) { // Wait up to 2 seconds
 8001e8a:	e028      	b.n	8001ede <receive_ack_TX+0x72>
		int receivedLen = LoRa_receive(&myLoRa, &ackByte, 1);
 8001e8c:	f107 0343 	add.w	r3, r7, #67	@ 0x43
 8001e90:	2201      	movs	r2, #1
 8001e92:	4619      	mov	r1, r3
 8001e94:	4824      	ldr	r0, [pc, #144]	@ (8001f28 <receive_ack_TX+0xbc>)
 8001e96:	f7ff fe8e 	bl	8001bb6 <LoRa_receive>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	647b      	str	r3, [r7, #68]	@ 0x44

		if (receivedLen == 1) {
 8001e9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d116      	bne.n	8001ed2 <receive_ack_TX+0x66>
			snprintf(buffer, sizeof(buffer), "ACK byte received: %d\r\n", ackByte);
 8001ea4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001ea8:	4638      	mov	r0, r7
 8001eaa:	4a20      	ldr	r2, [pc, #128]	@ (8001f2c <receive_ack_TX+0xc0>)
 8001eac:	2140      	movs	r1, #64	@ 0x40
 8001eae:	f006 fa4b 	bl	8008348 <sniprintf>
			  DEBUG_PRINT(buffer);
 8001eb2:	463b      	mov	r3, r7
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f006 f9d7 	bl	8008268 <iprintf>

			if (ackByte == 1) {
 8001eba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d103      	bne.n	8001eca <receive_ack_TX+0x5e>
				responseReceived = true;  // ACK
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			} else {
				responseReceived = false; // NACK
			}
			break;
 8001ec8:	e011      	b.n	8001eee <receive_ack_TX+0x82>
				responseReceived = false; // NACK
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			break;
 8001ed0:	e00d      	b.n	8001eee <receive_ack_TX+0x82>
		} else {
			DEBUG_PRINT("No data received yet...\r\n");
 8001ed2:	4817      	ldr	r0, [pc, #92]	@ (8001f30 <receive_ack_TX+0xc4>)
 8001ed4:	f006 fa30 	bl	8008338 <puts>

			HAL_Delay(100);
 8001ed8:	2064      	movs	r0, #100	@ 0x64
 8001eda:	f002 f879 	bl	8003fd0 <HAL_Delay>
	while (HAL_GetTick() - startTime < 2000) { // Wait up to 2 seconds
 8001ede:	f002 f86d 	bl	8003fbc <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001eec:	d3ce      	bcc.n	8001e8c <receive_ack_TX+0x20>
		}
	}

	if (!responseReceived) {
 8001eee:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001ef2:	f083 0301 	eor.w	r3, r3, #1
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00a      	beq.n	8001f12 <receive_ack_TX+0xa6>
		snprintf(buffer, sizeof(buffer), "No ACK received (timeout or NACK)\r\n");
 8001efc:	463b      	mov	r3, r7
 8001efe:	4a0d      	ldr	r2, [pc, #52]	@ (8001f34 <receive_ack_TX+0xc8>)
 8001f00:	2140      	movs	r1, #64	@ 0x40
 8001f02:	4618      	mov	r0, r3
 8001f04:	f006 fa20 	bl	8008348 <sniprintf>
		        DEBUG_PRINT(buffer);
 8001f08:	463b      	mov	r3, r7
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f006 f9ac 	bl	8008268 <iprintf>
 8001f10:	e002      	b.n	8001f18 <receive_ack_TX+0xac>
	} else {
		DEBUG_PRINT("ACK confirmed!\r\n");
 8001f12:	4809      	ldr	r0, [pc, #36]	@ (8001f38 <receive_ack_TX+0xcc>)
 8001f14:	f006 fa10 	bl	8008338 <puts>
	}

	return responseReceived;
 8001f18:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3750      	adds	r7, #80	@ 0x50
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	0800b474 	.word	0x0800b474
 8001f28:	200005f0 	.word	0x200005f0
 8001f2c:	0800b488 	.word	0x0800b488
 8001f30:	0800b4a0 	.word	0x0800b4a0
 8001f34:	0800b4bc 	.word	0x0800b4bc
 8001f38:	0800b4e0 	.word	0x0800b4e0

08001f3c <sendMessageAndWaitForAck_TX>:
//void sendMessageAndWaitForAck(LoRa *lora, uint8_t *messageBuffer) {

void sendMessageAndWaitForAck_TX(LoRa *lora, const uint8_t *messageBuffer) {
 8001f3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f40:	b0cd      	sub	sp, #308	@ 0x134
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001f48:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001f4c:	6018      	str	r0, [r3, #0]
 8001f4e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001f52:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001f56:	6019      	str	r1, [r3, #0]
 8001f58:	466b      	mov	r3, sp
 8001f5a:	461e      	mov	r6, r3

	//uint8_t msgLen = strlen(messageBuffer); // Cast to char* to fix warning
	uint8_t msgLen = strlen((const char*)messageBuffer); // Cast to char* to fix warning
 8001f5c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001f60:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001f64:	6818      	ldr	r0, [r3, #0]
 8001f66:	f7fe f8f3 	bl	8000150 <strlen>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

	// Calculate CRC for the original message
	uint32_t crc = Calculate_CRC((uint8_t*) messageBuffer, msgLen); // 0xf65adea6
 8001f70:	f897 212f 	ldrb.w	r2, [r7, #303]	@ 0x12f
 8001f74:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001f78:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	f000 fdc0 	bl	8002b04 <Calculate_CRC>
 8001f84:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

	// Delay for 200ms (maybe for LoRa to settle, or other reasons)
	HAL_Delay(500);
 8001f88:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f8c:	f002 f820 	bl	8003fd0 <HAL_Delay>

	// Transmit "CRC: " via CDC
	    DEBUG_PRINT("CRC: ");
 8001f90:	485c      	ldr	r0, [pc, #368]	@ (8002104 <sendMessageAndWaitForAck_TX+0x1c8>)
 8001f92:	f006 f969 	bl	8008268 <iprintf>

	// Format the CRC as a string
	char crcString[11]; // Enough space for "0xXXXXXXXX" + null terminator

	snprintf(crcString, sizeof(crcString), "0x%08lX", crc); // Format CRC as an 8-digit hex number
 8001f96:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8001f9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001f9e:	4a5a      	ldr	r2, [pc, #360]	@ (8002108 <sendMessageAndWaitForAck_TX+0x1cc>)
 8001fa0:	210b      	movs	r1, #11
 8001fa2:	f006 f9d1 	bl	8008348 <sniprintf>

	// Transmit the formatted CRC string via CDC
	DEBUG_PRINT(crcString);
 8001fa6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001faa:	4618      	mov	r0, r3
 8001fac:	f006 f95c 	bl	8008268 <iprintf>
	 DEBUG_PRINT("\r\n");
 8001fb0:	4856      	ldr	r0, [pc, #344]	@ (800210c <sendMessageAndWaitForAck_TX+0x1d0>)
 8001fb2:	f006 f9c1 	bl	8008338 <puts>


	// Buffer to hold the CRC in hexadecimal string format
	snprintf(crcString, sizeof(crcString), "0x%08lX", crc); // Convert CRC to "0xXXXXXXXX"
 8001fb6:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8001fba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001fbe:	4a52      	ldr	r2, [pc, #328]	@ (8002108 <sendMessageAndWaitForAck_TX+0x1cc>)
 8001fc0:	210b      	movs	r1, #11
 8001fc2:	f006 f9c1 	bl	8008348 <sniprintf>


	// Total length of the packet: message + CRC string
	uint8_t packetLen = msgLen + strlen(crcString);
 8001fc6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe f8c0 	bl	8000150 <strlen>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8001fd8:	4413      	add	r3, r2
 8001fda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
	char packet[packetLen + 1]; // +1 for null terminator
 8001fde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8001fe2:	1c59      	adds	r1, r3, #1
 8001fe4:	1e4b      	subs	r3, r1, #1
 8001fe6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001fea:	460a      	mov	r2, r1
 8001fec:	2300      	movs	r3, #0
 8001fee:	4690      	mov	r8, r2
 8001ff0:	4699      	mov	r9, r3
 8001ff2:	f04f 0200 	mov.w	r2, #0
 8001ff6:	f04f 0300 	mov.w	r3, #0
 8001ffa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ffe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002002:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002006:	460a      	mov	r2, r1
 8002008:	2300      	movs	r3, #0
 800200a:	4614      	mov	r4, r2
 800200c:	461d      	mov	r5, r3
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	f04f 0300 	mov.w	r3, #0
 8002016:	00eb      	lsls	r3, r5, #3
 8002018:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800201c:	00e2      	lsls	r2, r4, #3
 800201e:	460b      	mov	r3, r1
 8002020:	3307      	adds	r3, #7
 8002022:	08db      	lsrs	r3, r3, #3
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	ebad 0d03 	sub.w	sp, sp, r3
 800202a:	466b      	mov	r3, sp
 800202c:	3300      	adds	r3, #0
 800202e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	// Copy the message into the packet
	memcpy(packet, messageBuffer, msgLen);
 8002032:	f897 212f 	ldrb.w	r2, [r7, #303]	@ 0x12f
 8002036:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800203a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800203e:	6819      	ldr	r1, [r3, #0]
 8002040:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8002044:	f006 fbc7 	bl	80087d6 <memcpy>
	// Append the CRC string to the packet
	memcpy(packet + msgLen, crcString, strlen(crcString) + 1); // Include null terminator
 8002048:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800204c:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8002050:	18d4      	adds	r4, r2, r3
 8002052:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe f87a 	bl	8000150 <strlen>
 800205c:	4603      	mov	r3, r0
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002064:	4619      	mov	r1, r3
 8002066:	4620      	mov	r0, r4
 8002068:	f006 fbb5 	bl	80087d6 <memcpy>


	// Transmit the combined packet via LoRa
	uint8_t result = LoRa_transmit(lora, (uint8_t*) packet, packetLen, 1000);
 800206c:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 8002070:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002074:	f5a3 7096 	sub.w	r0, r3, #300	@ 0x12c
 8002078:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800207c:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 8002080:	6800      	ldr	r0, [r0, #0]
 8002082:	f7ff fd34 	bl	8001aee <LoRa_transmit>
 8002086:	4603      	mov	r3, r0
 8002088:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b

	// Check for acknowledgment
	if (result) {
 800208c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8002090:	2b00      	cmp	r3, #0
 8002092:	d030      	beq.n	80020f6 <sendMessageAndWaitForAck_TX+0x1ba>
		bool ackReceived = receive_ack_TX();
 8002094:	f7ff feea 	bl	8001e6c <receive_ack_TX>
 8002098:	4603      	mov	r3, r0
 800209a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
		char buffer[256];
		sprintf(buffer, "ACK raw value: %s\r\n",
 800209e:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <sendMessageAndWaitForAck_TX+0x16e>
 80020a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002110 <sendMessageAndWaitForAck_TX+0x1d4>)
 80020a8:	e000      	b.n	80020ac <sendMessageAndWaitForAck_TX+0x170>
 80020aa:	4a1a      	ldr	r2, [pc, #104]	@ (8002114 <sendMessageAndWaitForAck_TX+0x1d8>)
 80020ac:	f107 030c 	add.w	r3, r7, #12
 80020b0:	4919      	ldr	r1, [pc, #100]	@ (8002118 <sendMessageAndWaitForAck_TX+0x1dc>)
 80020b2:	4618      	mov	r0, r3
 80020b4:	f006 f97e 	bl	80083b4 <siprintf>
				ackReceived ? "true" : "false");
		DEBUG_PRINT(buffer);
 80020b8:	f107 030c 	add.w	r3, r7, #12
 80020bc:	4618      	mov	r0, r3
 80020be:	f006 f8d3 	bl	8008268 <iprintf>

		HAL_GPIO_WritePin(Run_GPIO_Port, Run_Pin, GPIO_PIN_SET);
 80020c2:	2201      	movs	r2, #1
 80020c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020c8:	4814      	ldr	r0, [pc, #80]	@ (800211c <sendMessageAndWaitForAck_TX+0x1e0>)
 80020ca:	f002 fdad 	bl	8004c28 <HAL_GPIO_WritePin>
		if (ackReceived) {
 80020ce:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d006      	beq.n	80020e4 <sendMessageAndWaitForAck_TX+0x1a8>
			sprintf(buffer, "ACK received successfully.\r\n");
 80020d6:	f107 030c 	add.w	r3, r7, #12
 80020da:	4911      	ldr	r1, [pc, #68]	@ (8002120 <sendMessageAndWaitForAck_TX+0x1e4>)
 80020dc:	4618      	mov	r0, r3
 80020de:	f006 f969 	bl	80083b4 <siprintf>
 80020e2:	e005      	b.n	80020f0 <sendMessageAndWaitForAck_TX+0x1b4>

		} else {
			sprintf(buffer, "No ACK received.\r\n");
 80020e4:	f107 030c 	add.w	r3, r7, #12
 80020e8:	490e      	ldr	r1, [pc, #56]	@ (8002124 <sendMessageAndWaitForAck_TX+0x1e8>)
 80020ea:	4618      	mov	r0, r3
 80020ec:	f006 f962 	bl	80083b4 <siprintf>
		}
		DEBUG_PRINT("No ACK received.\r\n");
 80020f0:	480d      	ldr	r0, [pc, #52]	@ (8002128 <sendMessageAndWaitForAck_TX+0x1ec>)
 80020f2:	f006 f921 	bl	8008338 <puts>
 80020f6:	46b5      	mov	sp, r6

	}

}
 80020f8:	bf00      	nop
 80020fa:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80020fe:	46bd      	mov	sp, r7
 8002100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002104:	0800b4f0 	.word	0x0800b4f0
 8002108:	0800b4f8 	.word	0x0800b4f8
 800210c:	0800b500 	.word	0x0800b500
 8002110:	0800b504 	.word	0x0800b504
 8002114:	0800b50c 	.word	0x0800b50c
 8002118:	0800b514 	.word	0x0800b514
 800211c:	40011000 	.word	0x40011000
 8002120:	0800b528 	.word	0x0800b528
 8002124:	0800b548 	.word	0x0800b548
 8002128:	0800b55c 	.word	0x0800b55c

0800212c <send_ack_RX>:


void send_ack_RX(bool isAck) {
 800212c:	b580      	push	{r7, lr}
 800212e:	b094      	sub	sp, #80	@ 0x50
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
	// Debug message via USB
	char ackinfo[64];
	snprintf(ackinfo, sizeof(ackinfo), "ACK_INFO: %s\r\n", isAck ? "true" : "false");
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <send_ack_RX+0x14>
 800213c:	4b0d      	ldr	r3, [pc, #52]	@ (8002174 <send_ack_RX+0x48>)
 800213e:	e000      	b.n	8002142 <send_ack_RX+0x16>
 8002140:	4b0d      	ldr	r3, [pc, #52]	@ (8002178 <send_ack_RX+0x4c>)
 8002142:	f107 0010 	add.w	r0, r7, #16
 8002146:	4a0d      	ldr	r2, [pc, #52]	@ (800217c <send_ack_RX+0x50>)
 8002148:	2140      	movs	r1, #64	@ 0x40
 800214a:	f006 f8fd 	bl	8008348 <sniprintf>
	DEBUG_PRINT(ackinfo);
 800214e:	f107 0310 	add.w	r3, r7, #16
 8002152:	4618      	mov	r0, r3
 8002154:	f006 f888 	bl	8008268 <iprintf>

	// Send 1-byte boolean value over LoRa
	uint8_t response = isAck ? 1 : 0;
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	73fb      	strb	r3, [r7, #15]
	LoRa_transmit(&myLoRa, &response, 1, 1000);
 800215c:	f107 010f 	add.w	r1, r7, #15
 8002160:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002164:	2201      	movs	r2, #1
 8002166:	4806      	ldr	r0, [pc, #24]	@ (8002180 <send_ack_RX+0x54>)
 8002168:	f7ff fcc1 	bl	8001aee <LoRa_transmit>
}
 800216c:	bf00      	nop
 800216e:	3750      	adds	r7, #80	@ 0x50
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	0800b504 	.word	0x0800b504
 8002178:	0800b50c 	.word	0x0800b50c
 800217c:	0800b570 	.word	0x0800b570
 8002180:	200005f0 	.word	0x200005f0

08002184 <receiveAndsendACK_RX>:


uint8_t receiveAndsendACK_RX(LoRa *_LoRa) {
 8002184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002188:	f2ad 5d34 	subw	sp, sp, #1332	@ 0x534
 800218c:	af00      	add	r7, sp, #0
 800218e:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8002192:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 8002196:	6018      	str	r0, [r3, #0]

	uint8_t rxSize = LoRa_receive(&myLoRa, loraRxBuffer,sizeof(loraRxBuffer));
 8002198:	2280      	movs	r2, #128	@ 0x80
 800219a:	496a      	ldr	r1, [pc, #424]	@ (8002344 <receiveAndsendACK_RX+0x1c0>)
 800219c:	486a      	ldr	r0, [pc, #424]	@ (8002348 <receiveAndsendACK_RX+0x1c4>)
 800219e:	f7ff fd0a 	bl	8001bb6 <LoRa_receive>
 80021a2:	4603      	mov	r3, r0
 80021a4:	f887 352b 	strb.w	r3, [r7, #1323]	@ 0x52b
	if (rxSize > 0) {
 80021a8:	f897 352b 	ldrb.w	r3, [r7, #1323]	@ 0x52b
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 80c1 	beq.w	8002334 <receiveAndsendACK_RX+0x1b0>
 80021b2:	466b      	mov	r3, sp
 80021b4:	461e      	mov	r6, r3
	uint8_t dataLength = rxSize - 10;
 80021b6:	f897 352b 	ldrb.w	r3, [r7, #1323]	@ 0x52b
 80021ba:	3b0a      	subs	r3, #10
 80021bc:	f887 352a 	strb.w	r3, [r7, #1322]	@ 0x52a
	if (dataLength <= 0) {
 80021c0:	f897 352a 	ldrb.w	r3, [r7, #1322]	@ 0x52a
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d104      	bne.n	80021d2 <receiveAndsendACK_RX+0x4e>
	 send_ack_RX(false);
 80021c8:	2000      	movs	r0, #0
 80021ca:	f7ff ffaf 	bl	800212c <send_ack_RX>
	  return 0;
 80021ce:	2300      	movs	r3, #0
 80021d0:	e0ae      	b.n	8002330 <receiveAndsendACK_RX+0x1ac>
	}

	// Extract the main message
	uint8_t mainMessage[dataLength];
 80021d2:	f897 152a 	ldrb.w	r1, [r7, #1322]	@ 0x52a
 80021d6:	460b      	mov	r3, r1
 80021d8:	3b01      	subs	r3, #1
 80021da:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
 80021de:	b2cb      	uxtb	r3, r1
 80021e0:	2200      	movs	r2, #0
 80021e2:	4698      	mov	r8, r3
 80021e4:	4691      	mov	r9, r2
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	f04f 0300 	mov.w	r3, #0
 80021ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021fa:	b2cb      	uxtb	r3, r1
 80021fc:	2200      	movs	r2, #0
 80021fe:	461c      	mov	r4, r3
 8002200:	4615      	mov	r5, r2
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	f04f 0300 	mov.w	r3, #0
 800220a:	00eb      	lsls	r3, r5, #3
 800220c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002210:	00e2      	lsls	r2, r4, #3
 8002212:	460b      	mov	r3, r1
 8002214:	3307      	adds	r3, #7
 8002216:	08db      	lsrs	r3, r3, #3
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	ebad 0d03 	sub.w	sp, sp, r3
 800221e:	466b      	mov	r3, sp
 8002220:	3300      	adds	r3, #0
 8002222:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    memcpy(mainMessage, loraRxBuffer, dataLength);
 8002226:	f897 352a 	ldrb.w	r3, [r7, #1322]	@ 0x52a
 800222a:	461a      	mov	r2, r3
 800222c:	4945      	ldr	r1, [pc, #276]	@ (8002344 <receiveAndsendACK_RX+0x1c0>)
 800222e:	f8d7 0520 	ldr.w	r0, [r7, #1312]	@ 0x520
 8002232:	f006 fad0 	bl	80087d6 <memcpy>

    // Extract CRC string
    char crcStr[11];
    memcpy(crcStr, &loraRxBuffer[dataLength], 10);
 8002236:	f897 352a 	ldrb.w	r3, [r7, #1322]	@ 0x52a
 800223a:	4a42      	ldr	r2, [pc, #264]	@ (8002344 <receiveAndsendACK_RX+0x1c0>)
 800223c:	1899      	adds	r1, r3, r2
 800223e:	f207 530c 	addw	r3, r7, #1292	@ 0x50c
 8002242:	220a      	movs	r2, #10
 8002244:	4618      	mov	r0, r3
 8002246:	f006 fac6 	bl	80087d6 <memcpy>
	crcStr[10] = '\0';
 800224a:	2300      	movs	r3, #0
 800224c:	f887 3516 	strb.w	r3, [r7, #1302]	@ 0x516

	// Convert CRC string to actual number
	uint32_t receivedCrc = (uint32_t) strtoul(crcStr, NULL, 16);
 8002250:	f207 530c 	addw	r3, r7, #1292	@ 0x50c
 8002254:	2210      	movs	r2, #16
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f005 fadf 	bl	800781c <strtoul>
 800225e:	4603      	mov	r3, r0
 8002260:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
	// Calculate expected CRC using only the main message
	uint32_t expectedCrc = Calculate_CRC(mainMessage,dataLength);
 8002264:	f897 352a 	ldrb.w	r3, [r7, #1322]	@ 0x52a
 8002268:	4619      	mov	r1, r3
 800226a:	f8d7 0520 	ldr.w	r0, [r7, #1312]	@ 0x520
 800226e:	f000 fc49 	bl	8002b04 <Calculate_CRC>
 8002272:	f8c7 0518 	str.w	r0, [r7, #1304]	@ 0x518

	// Compare CRCs
	if (receivedCrc == expectedCrc) {
 8002276:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 800227a:	f8d7 3518 	ldr.w	r3, [r7, #1304]	@ 0x518
 800227e:	429a      	cmp	r2, r3
 8002280:	d10d      	bne.n	800229e <receiveAndsendACK_RX+0x11a>
		DEBUG_PRINT("matched\r\n");
 8002282:	4832      	ldr	r0, [pc, #200]	@ (800234c <receiveAndsendACK_RX+0x1c8>)
 8002284:	f006 f858 	bl	8008338 <puts>
	HAL_Delay(500);
 8002288:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800228c:	f001 fea0 	bl	8003fd0 <HAL_Delay>
	send_ack_RX(true);
 8002290:	2001      	movs	r0, #1
 8002292:	f7ff ff4b 	bl	800212c <send_ack_RX>
    return 0;
	}

	// Print the main message
	char tempBuffer[256];
	for (int i = 0; i < dataLength; i++) {
 8002296:	2300      	movs	r3, #0
 8002298:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
 800229c:	e02a      	b.n	80022f4 <receiveAndsendACK_RX+0x170>
	send_ack_RX(false);
 800229e:	2000      	movs	r0, #0
 80022a0:	f7ff ff44 	bl	800212c <send_ack_RX>
    return 0;
 80022a4:	2300      	movs	r3, #0
 80022a6:	e043      	b.n	8002330 <receiveAndsendACK_RX+0x1ac>
        tempBuffer[i] = (mainMessage[i] >= 32 && mainMessage[i] <= 126) ? mainMessage[i] : '.';
 80022a8:	f8d7 2520 	ldr.w	r2, [r7, #1312]	@ 0x520
 80022ac:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 80022b0:	4413      	add	r3, r2
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b1f      	cmp	r3, #31
 80022b6:	d90e      	bls.n	80022d6 <receiveAndsendACK_RX+0x152>
 80022b8:	f8d7 2520 	ldr.w	r2, [r7, #1312]	@ 0x520
 80022bc:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 80022c0:	4413      	add	r3, r2
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b7e      	cmp	r3, #126	@ 0x7e
 80022c6:	d806      	bhi.n	80022d6 <receiveAndsendACK_RX+0x152>
 80022c8:	f8d7 2520 	ldr.w	r2, [r7, #1312]	@ 0x520
 80022cc:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 80022d0:	4413      	add	r3, r2
 80022d2:	7819      	ldrb	r1, [r3, #0]
 80022d4:	e000      	b.n	80022d8 <receiveAndsendACK_RX+0x154>
 80022d6:	212e      	movs	r1, #46	@ 0x2e
 80022d8:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 80022dc:	f2a3 5224 	subw	r2, r3, #1316	@ 0x524
 80022e0:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 80022e4:	4413      	add	r3, r2
 80022e6:	460a      	mov	r2, r1
 80022e8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < dataLength; i++) {
 80022ea:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 80022ee:	3301      	adds	r3, #1
 80022f0:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
 80022f4:	f897 352a 	ldrb.w	r3, [r7, #1322]	@ 0x52a
 80022f8:	f8d7 252c 	ldr.w	r2, [r7, #1324]	@ 0x52c
 80022fc:	429a      	cmp	r2, r3
 80022fe:	dbd3      	blt.n	80022a8 <receiveAndsendACK_RX+0x124>
	}
        tempBuffer[dataLength] = '\0';
 8002300:	f897 352a 	ldrb.w	r3, [r7, #1322]	@ 0x52a
 8002304:	f507 62a6 	add.w	r2, r7, #1328	@ 0x530
 8002308:	f2a2 5224 	subw	r2, r2, #1316	@ 0x524
 800230c:	2100      	movs	r1, #0
 800230e:	54d1      	strb	r1, [r2, r3]


        char formattedMessage[1024];
        snprintf(formattedMessage, sizeof(formattedMessage), "Received message: %s\r\n", tempBuffer);
 8002310:	f107 030c 	add.w	r3, r7, #12
 8002314:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8002318:	4a0d      	ldr	r2, [pc, #52]	@ (8002350 <receiveAndsendACK_RX+0x1cc>)
 800231a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800231e:	f006 f813 	bl	8008348 <sniprintf>
        DEBUG_PRINT(formattedMessage);
 8002322:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002326:	4618      	mov	r0, r3
 8002328:	f005 ff9e 	bl	8008268 <iprintf>
 800232c:	46b5      	mov	sp, r6
 800232e:	e001      	b.n	8002334 <receiveAndsendACK_RX+0x1b0>
	  return 0;
 8002330:	46b5      	mov	sp, r6
 8002332:	e000      	b.n	8002336 <receiveAndsendACK_RX+0x1b2>
    }

    return 1;
 8002334:	2301      	movs	r3, #1

}
 8002336:	4618      	mov	r0, r3
 8002338:	f207 5734 	addw	r7, r7, #1332	@ 0x534
 800233c:	46bd      	mov	sp, r7
 800233e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002342:	bf00      	nop
 8002344:	2000039c 	.word	0x2000039c
 8002348:	200005f0 	.word	0x200005f0
 800234c:	0800b580 	.word	0x0800b580
 8002350:	0800b58c 	.word	0x0800b58c

08002354 <unpack_left_shift_u16>:

static inline uint16_t unpack_left_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	71fb      	strb	r3, [r7, #7]
 800235e:	460b      	mov	r3, r1
 8002360:	71bb      	strb	r3, [r7, #6]
 8002362:	4613      	mov	r3, r2
 8002364:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) << shift);
 8002366:	79fa      	ldrb	r2, [r7, #7]
 8002368:	797b      	ldrb	r3, [r7, #5]
 800236a:	4013      	ands	r3, r2
 800236c:	b2db      	uxtb	r3, r3
 800236e:	461a      	mov	r2, r3
 8002370:	79bb      	ldrb	r3, [r7, #6]
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	b29b      	uxth	r3, r3
}
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr

08002382 <unpack_right_shift_u8>:

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	71fb      	strb	r3, [r7, #7]
 800238c:	460b      	mov	r3, r1
 800238e:	71bb      	strb	r3, [r7, #6]
 8002390:	4613      	mov	r3, r2
 8002392:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value & mask) >> shift);
 8002394:	79fa      	ldrb	r2, [r7, #7]
 8002396:	797b      	ldrb	r3, [r7, #5]
 8002398:	4013      	ands	r3, r2
 800239a:	b2db      	uxtb	r3, r3
 800239c:	461a      	mov	r2, r3
 800239e:	79bb      	ldrb	r3, [r7, #6]
 80023a0:	fa42 f303 	asr.w	r3, r2, r3
 80023a4:	b2db      	uxtb	r3, r3
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr

080023b0 <unpack_right_shift_u16>:

static inline uint16_t unpack_right_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	71fb      	strb	r3, [r7, #7]
 80023ba:	460b      	mov	r3, r1
 80023bc:	71bb      	strb	r3, [r7, #6]
 80023be:	4613      	mov	r3, r2
 80023c0:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) >> shift);
 80023c2:	79fa      	ldrb	r2, [r7, #7]
 80023c4:	797b      	ldrb	r3, [r7, #5]
 80023c6:	4013      	ands	r3, r2
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	461a      	mov	r2, r3
 80023cc:	79bb      	ldrb	r3, [r7, #6]
 80023ce:	fa42 f303 	asr.w	r3, r2, r3
 80023d2:	b29b      	uxth	r3, r3
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr

080023de <bmw_e9x_e8x_speed_unpack>:

int bmw_e9x_e8x_speed_unpack(
    struct bmw_e9x_e8x_speed_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b086      	sub	sp, #24
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	60f8      	str	r0, [r7, #12]
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	607a      	str	r2, [r7, #4]
    uint16_t acc_x;
    uint16_t acc_y;
    uint16_t vehicle_speed;
    uint16_t yaw_rate;

    if (size < 8u) {
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b07      	cmp	r3, #7
 80023ee:	d802      	bhi.n	80023f6 <bmw_e9x_e8x_speed_unpack+0x18>
        return (-EINVAL);
 80023f0:	f06f 0315 	mvn.w	r3, #21
 80023f4:	e0c7      	b.n	8002586 <bmw_e9x_e8x_speed_unpack+0x1a8>
    }

    vehicle_speed = unpack_right_shift_u16(src_p[0], 0u, 0xffu);
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	22ff      	movs	r2, #255	@ 0xff
 80023fc:	2100      	movs	r1, #0
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff ffd6 	bl	80023b0 <unpack_right_shift_u16>
 8002404:	4603      	mov	r3, r0
 8002406:	827b      	strh	r3, [r7, #18]
    vehicle_speed |= unpack_left_shift_u16(src_p[1], 8u, 0x0fu);
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	3301      	adds	r3, #1
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	220f      	movs	r2, #15
 8002410:	2108      	movs	r1, #8
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff ff9e 	bl	8002354 <unpack_left_shift_u16>
 8002418:	4603      	mov	r3, r0
 800241a:	461a      	mov	r2, r3
 800241c:	8a7b      	ldrh	r3, [r7, #18]
 800241e:	4313      	orrs	r3, r2
 8002420:	827b      	strh	r3, [r7, #18]

    if ((vehicle_speed & (1u << 11)) != 0u) {
 8002422:	8a7b      	ldrh	r3, [r7, #18]
 8002424:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <bmw_e9x_e8x_speed_unpack+0x5a>
        vehicle_speed |= 0xf000u;
 800242c:	8a7b      	ldrh	r3, [r7, #18]
 800242e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8002432:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8002436:	827b      	strh	r3, [r7, #18]
    }

    dst_p->vehicle_speed = (int16_t)vehicle_speed;
 8002438:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	801a      	strh	r2, [r3, #0]
    dst_p->moving_forward = unpack_right_shift_u8(src_p[1], 4u, 0x10u);
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	3301      	adds	r3, #1
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2210      	movs	r2, #16
 8002448:	2104      	movs	r1, #4
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff ff99 	bl	8002382 <unpack_right_shift_u8>
 8002450:	4603      	mov	r3, r0
 8002452:	461a      	mov	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	709a      	strb	r2, [r3, #2]
    dst_p->moving_reverse = unpack_right_shift_u8(src_p[1], 5u, 0x20u);
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	3301      	adds	r3, #1
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2220      	movs	r2, #32
 8002460:	2105      	movs	r1, #5
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff ff8d 	bl	8002382 <unpack_right_shift_u8>
 8002468:	4603      	mov	r3, r0
 800246a:	461a      	mov	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	70da      	strb	r2, [r3, #3]
    acc_y = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	3302      	adds	r3, #2
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	22ff      	movs	r2, #255	@ 0xff
 8002478:	2100      	movs	r1, #0
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff ff98 	bl	80023b0 <unpack_right_shift_u16>
 8002480:	4603      	mov	r3, r0
 8002482:	82bb      	strh	r3, [r7, #20]
    acc_y |= unpack_left_shift_u16(src_p[3], 8u, 0x0fu);
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	3303      	adds	r3, #3
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	220f      	movs	r2, #15
 800248c:	2108      	movs	r1, #8
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff ff60 	bl	8002354 <unpack_left_shift_u16>
 8002494:	4603      	mov	r3, r0
 8002496:	461a      	mov	r2, r3
 8002498:	8abb      	ldrh	r3, [r7, #20]
 800249a:	4313      	orrs	r3, r2
 800249c:	82bb      	strh	r3, [r7, #20]

    if ((acc_y & (1u << 11)) != 0u) {
 800249e:	8abb      	ldrh	r3, [r7, #20]
 80024a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <bmw_e9x_e8x_speed_unpack+0xd6>
        acc_y |= 0xf000u;
 80024a8:	8abb      	ldrh	r3, [r7, #20]
 80024aa:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80024ae:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80024b2:	82bb      	strh	r3, [r7, #20]
    }

    dst_p->acc_y = (int16_t)acc_y;
 80024b4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	809a      	strh	r2, [r3, #4]
    acc_x = unpack_right_shift_u16(src_p[3], 4u, 0xf0u);
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	3303      	adds	r3, #3
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	22f0      	movs	r2, #240	@ 0xf0
 80024c4:	2104      	movs	r1, #4
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff ff72 	bl	80023b0 <unpack_right_shift_u16>
 80024cc:	4603      	mov	r3, r0
 80024ce:	82fb      	strh	r3, [r7, #22]
    acc_x |= unpack_left_shift_u16(src_p[4], 4u, 0xffu);
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	3304      	adds	r3, #4
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	22ff      	movs	r2, #255	@ 0xff
 80024d8:	2104      	movs	r1, #4
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff ff3a 	bl	8002354 <unpack_left_shift_u16>
 80024e0:	4603      	mov	r3, r0
 80024e2:	461a      	mov	r2, r3
 80024e4:	8afb      	ldrh	r3, [r7, #22]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	82fb      	strh	r3, [r7, #22]

    if ((acc_x & (1u << 11)) != 0u) {
 80024ea:	8afb      	ldrh	r3, [r7, #22]
 80024ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d005      	beq.n	8002500 <bmw_e9x_e8x_speed_unpack+0x122>
        acc_x |= 0xf000u;
 80024f4:	8afb      	ldrh	r3, [r7, #22]
 80024f6:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80024fa:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80024fe:	82fb      	strh	r3, [r7, #22]
    }

    dst_p->acc_x = (int16_t)acc_x;
 8002500:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	80da      	strh	r2, [r3, #6]
    yaw_rate = unpack_right_shift_u16(src_p[5], 0u, 0xffu);
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	3305      	adds	r3, #5
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	22ff      	movs	r2, #255	@ 0xff
 8002510:	2100      	movs	r1, #0
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff ff4c 	bl	80023b0 <unpack_right_shift_u16>
 8002518:	4603      	mov	r3, r0
 800251a:	823b      	strh	r3, [r7, #16]
    yaw_rate |= unpack_left_shift_u16(src_p[6], 8u, 0x0fu);
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	3306      	adds	r3, #6
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	220f      	movs	r2, #15
 8002524:	2108      	movs	r1, #8
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff ff14 	bl	8002354 <unpack_left_shift_u16>
 800252c:	4603      	mov	r3, r0
 800252e:	461a      	mov	r2, r3
 8002530:	8a3b      	ldrh	r3, [r7, #16]
 8002532:	4313      	orrs	r3, r2
 8002534:	823b      	strh	r3, [r7, #16]

    if ((yaw_rate & (1u << 11)) != 0u) {
 8002536:	8a3b      	ldrh	r3, [r7, #16]
 8002538:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <bmw_e9x_e8x_speed_unpack+0x16e>
        yaw_rate |= 0xf000u;
 8002540:	8a3b      	ldrh	r3, [r7, #16]
 8002542:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8002546:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800254a:	823b      	strh	r3, [r7, #16]
    }

    dst_p->yaw_rate = (int16_t)yaw_rate;
 800254c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	811a      	strh	r2, [r3, #8]
    dst_p->counter_416 = unpack_right_shift_u8(src_p[6], 4u, 0xf0u);
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	3306      	adds	r3, #6
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	22f0      	movs	r2, #240	@ 0xf0
 800255c:	2104      	movs	r1, #4
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff ff0f 	bl	8002382 <unpack_right_shift_u8>
 8002564:	4603      	mov	r3, r0
 8002566:	461a      	mov	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	729a      	strb	r2, [r3, #10]
    dst_p->checksum_416 = unpack_right_shift_u8(src_p[7], 0u, 0xffu);
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	3307      	adds	r3, #7
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	22ff      	movs	r2, #255	@ 0xff
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff ff03 	bl	8002382 <unpack_right_shift_u8>
 800257c:	4603      	mov	r3, r0
 800257e:	461a      	mov	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	72da      	strb	r2, [r3, #11]

    return (0);
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <bmw_e9x_e8x_speed_vehicle_speed_decode>:
{
    return (int16_t)(value / 0.103);
}

double bmw_e9x_e8x_speed_vehicle_speed_decode(int16_t value)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	80fb      	strh	r3, [r7, #6]
    return ((double)value * 0.103);
 800259a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fd ff30 	bl	8000404 <__aeabi_i2d>
 80025a4:	a306      	add	r3, pc, #24	@ (adr r3, 80025c0 <bmw_e9x_e8x_speed_vehicle_speed_decode+0x30>)
 80025a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025aa:	f7fd ff95 	bl	80004d8 <__aeabi_dmul>
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
}
 80025b2:	4610      	mov	r0, r2
 80025b4:	4619      	mov	r1, r3
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	f3af 8000 	nop.w
 80025c0:	3f7ced91 	.word	0x3f7ced91
 80025c4:	3fba5e35 	.word	0x3fba5e35

080025c8 <bmw_e9x_e8x_engine_data_unpack>:

int bmw_e9x_e8x_engine_data_unpack(
    struct bmw_e9x_e8x_engine_data_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
    if (size < 8u) {
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b07      	cmp	r3, #7
 80025d8:	d802      	bhi.n	80025e0 <bmw_e9x_e8x_engine_data_unpack+0x18>
        return (-EINVAL);
 80025da:	f06f 0315 	mvn.w	r3, #21
 80025de:	e027      	b.n	8002630 <bmw_e9x_e8x_engine_data_unpack+0x68>
    }

    dst_p->engine_temperature = unpack_right_shift_u16(src_p[0], 0u, 0xffu);
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	22ff      	movs	r2, #255	@ 0xff
 80025e6:	2100      	movs	r1, #0
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fee1 	bl	80023b0 <unpack_right_shift_u16>
 80025ee:	4603      	mov	r3, r0
 80025f0:	461a      	mov	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	801a      	strh	r2, [r3, #0]
    dst_p->engine_temperature |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	3301      	adds	r3, #1
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	22ff      	movs	r2, #255	@ 0xff
 80025fe:	2108      	movs	r1, #8
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fea7 	bl	8002354 <unpack_left_shift_u16>
 8002606:	4603      	mov	r3, r0
 8002608:	461a      	mov	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	4313      	orrs	r3, r2
 8002610:	b29a      	uxth	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	801a      	strh	r2, [r3, #0]
    dst_p->counter_464 = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	3302      	adds	r3, #2
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	22ff      	movs	r2, #255	@ 0xff
 800261e:	2100      	movs	r1, #0
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff feae 	bl	8002382 <unpack_right_shift_u8>
 8002626:	4603      	mov	r3, r0
 8002628:	461a      	mov	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	709a      	strb	r2, [r3, #2]

    return (0);
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <bmw_e9x_e8x_engine_data_engine_temperature_decode>:
{
    return (uint16_t)((value - -40.0) / 0.5);
}

double bmw_e9x_e8x_engine_data_engine_temperature_decode(uint16_t value)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	80fb      	strh	r3, [r7, #6]
    return (((double)value * 0.5) + -40.0);
 8002642:	88fb      	ldrh	r3, [r7, #6]
 8002644:	4618      	mov	r0, r3
 8002646:	f7fd fecd 	bl	80003e4 <__aeabi_ui2d>
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	4b09      	ldr	r3, [pc, #36]	@ (8002674 <bmw_e9x_e8x_engine_data_engine_temperature_decode+0x3c>)
 8002650:	f7fd ff42 	bl	80004d8 <__aeabi_dmul>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	f04f 0200 	mov.w	r2, #0
 8002660:	4b05      	ldr	r3, [pc, #20]	@ (8002678 <bmw_e9x_e8x_engine_data_engine_temperature_decode+0x40>)
 8002662:	f7fd fd81 	bl	8000168 <__aeabi_dsub>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
}
 800266a:	4610      	mov	r0, r2
 800266c:	4619      	mov	r1, r3
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	3fe00000 	.word	0x3fe00000
 8002678:	40440000 	.word	0x40440000

0800267c <bmw_e9x_e8x_fuel_level_unpack>:

int bmw_e9x_e8x_fuel_level_unpack(
    struct bmw_e9x_e8x_fuel_level_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
    if (size < 8u) {
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b07      	cmp	r3, #7
 800268c:	d802      	bhi.n	8002694 <bmw_e9x_e8x_fuel_level_unpack+0x18>
        return (-EINVAL);
 800268e:	f06f 0315 	mvn.w	r3, #21
 8002692:	e00b      	b.n	80026ac <bmw_e9x_e8x_fuel_level_unpack+0x30>
    }

    dst_p->fuel_percentage = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	22ff      	movs	r2, #255	@ 0xff
 800269a:	2100      	movs	r1, #0
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff fe70 	bl	8002382 <unpack_right_shift_u8>
 80026a2:	4603      	mov	r3, r0
 80026a4:	461a      	mov	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	701a      	strb	r2, [r3, #0]

    return (0);
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <bmw_e9x_e8x_fuel_level_fuel_percentage_decode>:
{
    return (uint8_t)(value);
}

double bmw_e9x_e8x_fuel_level_fuel_percentage_decode(uint8_t value)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	71fb      	strb	r3, [r7, #7]
    return ((double)value);
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fd fe8f 	bl	80003e4 <__aeabi_ui2d>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
}
 80026ca:	4610      	mov	r0, r2
 80026cc:	4619      	mov	r1, r3
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <CAN_Decode>:
#define FUEL_THRESHOLD      70.0
//double decoded_speed = 0.0;
//uint8_t charToTransmit[24];
extern UART_HandleTypeDef huart1;
void CAN_Decode(uint8_t* rawData, uint8_t length)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b0a2      	sub	sp, #136	@ 0x88
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	70fb      	strb	r3, [r7, #3]
    if (length < 12) return;
 80026e0:	78fb      	ldrb	r3, [r7, #3]
 80026e2:	2b0b      	cmp	r3, #11
 80026e4:	f240 8111 	bls.w	800290a <CAN_Decode+0x236>

    uint32_t messageId = (rawData[0] << 24) | (rawData[1] << 16) |
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	061a      	lsls	r2, r3, #24
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3301      	adds	r3, #1
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	041b      	lsls	r3, r3, #16
 80026f6:	431a      	orrs	r2, r3
                         (rawData[2] << 8) | rawData[3];
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3302      	adds	r3, #2
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	021b      	lsls	r3, r3, #8
    uint32_t messageId = (rawData[0] << 24) | (rawData[1] << 16) |
 8002700:	4313      	orrs	r3, r2
                         (rawData[2] << 8) | rawData[3];
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	3203      	adds	r2, #3
 8002706:	7812      	ldrb	r2, [r2, #0]
 8002708:	4313      	orrs	r3, r2
    uint32_t messageId = (rawData[0] << 24) | (rawData[1] << 16) |
 800270a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    uint8_t payload[8];
    for (int i = 0; i < 8; ++i)
 800270e:	2300      	movs	r3, #0
 8002710:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002714:	e012      	b.n	800273c <CAN_Decode+0x68>
        payload[i] = rawData[4 + i];
 8002716:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800271a:	3304      	adds	r3, #4
 800271c:	461a      	mov	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4413      	add	r3, r2
 8002722:	7819      	ldrb	r1, [r3, #0]
 8002724:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002728:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800272c:	4413      	add	r3, r2
 800272e:	460a      	mov	r2, r1
 8002730:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; ++i)
 8002732:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002736:	3301      	adds	r3, #1
 8002738:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800273c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002740:	2b07      	cmp	r3, #7
 8002742:	dde8      	ble.n	8002716 <CAN_Decode+0x42>

    if (messageId == BMW_E9X_E8X_SPEED_FRAME_ID)
 8002744:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002748:	f5b3 7fd0 	cmp.w	r3, #416	@ 0x1a0
 800274c:	d148      	bne.n	80027e0 <CAN_Decode+0x10c>
    {
        struct bmw_e9x_e8x_speed_t speedMsg;
        if (bmw_e9x_e8x_speed_unpack(&speedMsg, payload, sizeof(payload)) == 0)
 800274e:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8002752:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002756:	2208      	movs	r2, #8
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff fe40 	bl	80023de <bmw_e9x_e8x_speed_unpack>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	f040 80d3 	bne.w	800290c <CAN_Decode+0x238>
        {
            double speed = bmw_e9x_e8x_speed_vehicle_speed_decode(speedMsg.vehicle_speed);
 8002766:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff ff10 	bl	8002590 <bmw_e9x_e8x_speed_vehicle_speed_decode>
 8002770:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
            decoded_speed = (int)speed;
 8002774:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8002778:	f7fe f95e 	bl	8000a38 <__aeabi_d2iz>
 800277c:	4603      	mov	r3, r0
 800277e:	4a65      	ldr	r2, [pc, #404]	@ (8002914 <CAN_Decode+0x240>)
 8002780:	6013      	str	r3, [r2, #0]

            if (speed > SPEED_THRESHOLD)
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	4b64      	ldr	r3, [pc, #400]	@ (8002918 <CAN_Decode+0x244>)
 8002788:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800278c:	f7fe f934 	bl	80009f8 <__aeabi_dcmpgt>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d006      	beq.n	80027a4 <CAN_Decode+0xd0>
            {
                HAL_GPIO_WritePin(Run_GPIO_Port, Run_Pin, GPIO_PIN_SET);
 8002796:	2201      	movs	r2, #1
 8002798:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800279c:	485f      	ldr	r0, [pc, #380]	@ (800291c <CAN_Decode+0x248>)
 800279e:	f002 fa43 	bl	8004c28 <HAL_GPIO_WritePin>
 80027a2:	e005      	b.n	80027b0 <CAN_Decode+0xdc>
            }
            else
            {
                HAL_GPIO_WritePin(Run_GPIO_Port, Run_Pin, GPIO_PIN_RESET);
 80027a4:	2200      	movs	r2, #0
 80027a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80027aa:	485c      	ldr	r0, [pc, #368]	@ (800291c <CAN_Decode+0x248>)
 80027ac:	f002 fa3c 	bl	8004c28 <HAL_GPIO_WritePin>
            }


//          HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&speed, sizeof(speed));
            int int_speed = (int)speed;
 80027b0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80027b4:	f7fe f940 	bl	8000a38 <__aeabi_d2iz>
 80027b8:	4603      	mov	r3, r0
 80027ba:	657b      	str	r3, [r7, #84]	@ 0x54
            char speedStr[8];
            int len = sprintf(speedStr, "%d\n", int_speed);
 80027bc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80027c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80027c2:	4957      	ldr	r1, [pc, #348]	@ (8002920 <CAN_Decode+0x24c>)
 80027c4:	4618      	mov	r0, r3
 80027c6:	f005 fdf5 	bl	80083b4 <siprintf>
 80027ca:	6538      	str	r0, [r7, #80]	@ 0x50
            HAL_UART_Transmit(&huart1, (uint8_t*)speedStr, len, HAL_MAX_DELAY);
 80027cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80027d4:	f04f 33ff 	mov.w	r3, #4294967295
 80027d8:	4852      	ldr	r0, [pc, #328]	@ (8002924 <CAN_Decode+0x250>)
 80027da:	f004 fcbe 	bl	800715a <HAL_UART_Transmit>
 80027de:	e095      	b.n	800290c <CAN_Decode+0x238>
        }


    }

    else if (messageId == BMW_E9X_E8X_ENGINE_DATA_FRAME_ID)
 80027e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027e4:	f5b3 7fe8 	cmp.w	r3, #464	@ 0x1d0
 80027e8:	d145      	bne.n	8002876 <CAN_Decode+0x1a2>
        {
            struct bmw_e9x_e8x_engine_data_t engineData;
            if (bmw_e9x_e8x_engine_data_unpack(&engineData, payload, sizeof(payload)) == 0)
 80027ea:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80027ee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80027f2:	2208      	movs	r2, #8
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff fee7 	bl	80025c8 <bmw_e9x_e8x_engine_data_unpack>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f040 8085 	bne.w	800290c <CAN_Decode+0x238>
            {
                double temp = bmw_e9x_e8x_engine_data_engine_temperature_decode(engineData.engine_temperature);
 8002802:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff ff17 	bl	8002638 <bmw_e9x_e8x_engine_data_engine_temperature_decode>
 800280a:	e9c7 011a 	strd	r0, r1, [r7, #104]	@ 0x68
                decoded_temp = (int)temp;
 800280e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002812:	f7fe f911 	bl	8000a38 <__aeabi_d2iz>
 8002816:	4603      	mov	r3, r0
 8002818:	4a43      	ldr	r2, [pc, #268]	@ (8002928 <CAN_Decode+0x254>)
 800281a:	6013      	str	r3, [r2, #0]

                if (temp > TEMP_THRESHOLD)
 800281c:	f04f 0200 	mov.w	r2, #0
 8002820:	4b42      	ldr	r3, [pc, #264]	@ (800292c <CAN_Decode+0x258>)
 8002822:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002826:	f7fe f8e7 	bl	80009f8 <__aeabi_dcmpgt>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <CAN_Decode+0x168>
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);  // Temp LED ON
 8002830:	2201      	movs	r2, #1
 8002832:	2140      	movs	r1, #64	@ 0x40
 8002834:	483e      	ldr	r0, [pc, #248]	@ (8002930 <CAN_Decode+0x25c>)
 8002836:	f002 f9f7 	bl	8004c28 <HAL_GPIO_WritePin>
 800283a:	e004      	b.n	8002846 <CAN_Decode+0x172>
                else
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // Temp LED OFF
 800283c:	2200      	movs	r2, #0
 800283e:	2140      	movs	r1, #64	@ 0x40
 8002840:	483b      	ldr	r0, [pc, #236]	@ (8002930 <CAN_Decode+0x25c>)
 8002842:	f002 f9f1 	bl	8004c28 <HAL_GPIO_WritePin>

                int int_temp = (int)temp;
 8002846:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800284a:	f7fe f8f5 	bl	8000a38 <__aeabi_d2iz>
 800284e:	4603      	mov	r3, r0
 8002850:	667b      	str	r3, [r7, #100]	@ 0x64
                char tempStr[16];
                int len = snprintf(tempStr, sizeof(tempStr), "TMP:%d\n", int_temp);
 8002852:	f107 0020 	add.w	r0, r7, #32
 8002856:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002858:	4a36      	ldr	r2, [pc, #216]	@ (8002934 <CAN_Decode+0x260>)
 800285a:	2110      	movs	r1, #16
 800285c:	f005 fd74 	bl	8008348 <sniprintf>
 8002860:	6638      	str	r0, [r7, #96]	@ 0x60
                HAL_UART_Transmit(&huart1, (uint8_t*)tempStr, len, HAL_MAX_DELAY);
 8002862:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002864:	b29a      	uxth	r2, r3
 8002866:	f107 0120 	add.w	r1, r7, #32
 800286a:	f04f 33ff 	mov.w	r3, #4294967295
 800286e:	482d      	ldr	r0, [pc, #180]	@ (8002924 <CAN_Decode+0x250>)
 8002870:	f004 fc73 	bl	800715a <HAL_UART_Transmit>
 8002874:	e04a      	b.n	800290c <CAN_Decode+0x238>
            }
        }

    else if (messageId == BMW_E9X_E8X_FUEL_LEVEL_FRAME_ID)
 8002876:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800287a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800287e:	d145      	bne.n	800290c <CAN_Decode+0x238>
        {
            struct bmw_e9x_e8x_fuel_level_t fuelMsg;
            if (bmw_e9x_e8x_fuel_level_unpack(&fuelMsg, payload, sizeof(payload)) == 0)
 8002880:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8002884:	f107 031c 	add.w	r3, r7, #28
 8002888:	2208      	movs	r2, #8
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff fef6 	bl	800267c <bmw_e9x_e8x_fuel_level_unpack>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d13a      	bne.n	800290c <CAN_Decode+0x238>
            {
                double fuel = bmw_e9x_e8x_fuel_level_fuel_percentage_decode(fuelMsg.fuel_percentage);
 8002896:	7f3b      	ldrb	r3, [r7, #28]
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff ff0b 	bl	80026b4 <bmw_e9x_e8x_fuel_level_fuel_percentage_decode>
 800289e:	e9c7 011e 	strd	r0, r1, [r7, #120]	@ 0x78
                decoded_fuel = (int)fuel;
 80028a2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80028a6:	f7fe f8c7 	bl	8000a38 <__aeabi_d2iz>
 80028aa:	4603      	mov	r3, r0
 80028ac:	4a22      	ldr	r2, [pc, #136]	@ (8002938 <CAN_Decode+0x264>)
 80028ae:	6013      	str	r3, [r2, #0]

                if (fuel < FUEL_THRESHOLD)
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	4b21      	ldr	r3, [pc, #132]	@ (800293c <CAN_Decode+0x268>)
 80028b6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80028ba:	f7fe f87f 	bl	80009bc <__aeabi_dcmplt>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <CAN_Decode+0x1fc>
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);  // Fuel LED ON
 80028c4:	2201      	movs	r2, #1
 80028c6:	2180      	movs	r1, #128	@ 0x80
 80028c8:	4819      	ldr	r0, [pc, #100]	@ (8002930 <CAN_Decode+0x25c>)
 80028ca:	f002 f9ad 	bl	8004c28 <HAL_GPIO_WritePin>
 80028ce:	e004      	b.n	80028da <CAN_Decode+0x206>
                else
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET); // Fuel LED OFF
 80028d0:	2200      	movs	r2, #0
 80028d2:	2180      	movs	r1, #128	@ 0x80
 80028d4:	4816      	ldr	r0, [pc, #88]	@ (8002930 <CAN_Decode+0x25c>)
 80028d6:	f002 f9a7 	bl	8004c28 <HAL_GPIO_WritePin>

                int int_fuel = (int)fuel;
 80028da:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80028de:	f7fe f8ab 	bl	8000a38 <__aeabi_d2iz>
 80028e2:	4603      	mov	r3, r0
 80028e4:	677b      	str	r3, [r7, #116]	@ 0x74
                char fuelStr[16];
                int len = snprintf(fuelStr, sizeof(fuelStr), "FUL:%d\n", int_fuel);
 80028e6:	f107 000c 	add.w	r0, r7, #12
 80028ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028ec:	4a14      	ldr	r2, [pc, #80]	@ (8002940 <CAN_Decode+0x26c>)
 80028ee:	2110      	movs	r1, #16
 80028f0:	f005 fd2a 	bl	8008348 <sniprintf>
 80028f4:	6738      	str	r0, [r7, #112]	@ 0x70
                HAL_UART_Transmit(&huart1, (uint8_t*)fuelStr, len, HAL_MAX_DELAY);
 80028f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	f107 010c 	add.w	r1, r7, #12
 80028fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002902:	4808      	ldr	r0, [pc, #32]	@ (8002924 <CAN_Decode+0x250>)
 8002904:	f004 fc29 	bl	800715a <HAL_UART_Transmit>
 8002908:	e000      	b.n	800290c <CAN_Decode+0x238>
    if (length < 12) return;
 800290a:	bf00      	nop

            }
        }
}
 800290c:	3788      	adds	r7, #136	@ 0x88
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	2000041c 	.word	0x2000041c
 8002918:	40490000 	.word	0x40490000
 800291c:	40011000 	.word	0x40011000
 8002920:	0800b5a4 	.word	0x0800b5a4
 8002924:	20000504 	.word	0x20000504
 8002928:	20000420 	.word	0x20000420
 800292c:	40540000 	.word	0x40540000
 8002930:	40010800 	.word	0x40010800
 8002934:	0800b5a8 	.word	0x0800b5a8
 8002938:	20000424 	.word	0x20000424
 800293c:	40518000 	.word	0x40518000
 8002940:	0800b5b0 	.word	0x0800b5b0

08002944 <CheckSignalAndSwitchCommunication>:
#include "SIM868.h"
#include "main.h"
#include "can_decoder.h"

void CheckSignalAndSwitchCommunication(UART_HandleTypeDef *huart, bool *useLoRa)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
    SIM868_Status_t signalStatus = SIM868_check_signal(huart);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7fe fbd2 	bl	80010f8 <SIM868_check_signal>
 8002954:	4603      	mov	r3, r0
 8002956:	73fb      	strb	r3, [r7, #15]
    if (signalStatus == SIM868_SUCCESS)
 8002958:	7bfb      	ldrb	r3, [r7, #15]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d103      	bne.n	8002966 <CheckSignalAndSwitchCommunication+0x22>
    {
        *useLoRa = false;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        *useLoRa = true;
    }
}
 8002964:	e002      	b.n	800296c <CheckSignalAndSwitchCommunication+0x28>
        *useLoRa = true;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2201      	movs	r2, #1
 800296a:	701a      	strb	r2, [r3, #0]
}
 800296c:	bf00      	nop
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <SendGPSDataViaMQTT>:

void SendGPSDataViaMQTT(UART_HandleTypeDef *huart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b0b6      	sub	sp, #216	@ 0xd8
 8002978:	af02      	add	r7, sp, #8
 800297a:	6078      	str	r0, [r7, #4]
    GPS_Location_t location;
    SIM868_GetGPSLocation(huart, &location);
 800297c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002980:	4619      	mov	r1, r3
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7fe fc32 	bl	80011ec <SIM868_GetGPSLocation>
    if (location.valid)
 8002988:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d019      	beq.n	80029ca <SendGPSDataViaMQTT+0x56>
    {
        char gpsMessage[128];
        // Include predefined carID in the message
        const char *carID = "CAR12345";
 8002996:	4b0f      	ldr	r3, [pc, #60]	@ (80029d4 <SendGPSDataViaMQTT+0x60>)
 8002998:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        snprintf(gpsMessage, sizeof(gpsMessage), "GPS Data: CarID=%s, Lat=%s, Lon=%s", carID, location.lat_str, location.lon_str);
 800299c:	f107 000c 	add.w	r0, r7, #12
 80029a0:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80029a4:	331d      	adds	r3, #29
 80029a6:	9301      	str	r3, [sp, #4]
 80029a8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80029ac:	3301      	adds	r3, #1
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80029b4:	4a08      	ldr	r2, [pc, #32]	@ (80029d8 <SendGPSDataViaMQTT+0x64>)
 80029b6:	2180      	movs	r1, #128	@ 0x80
 80029b8:	f005 fcc6 	bl	8008348 <sniprintf>
        mqtt_publish_packet(huart, "gps_topic", gpsMessage);
 80029bc:	f107 030c 	add.w	r3, r7, #12
 80029c0:	461a      	mov	r2, r3
 80029c2:	4906      	ldr	r1, [pc, #24]	@ (80029dc <SendGPSDataViaMQTT+0x68>)
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7fe fd71 	bl	80014ac <mqtt_publish_packet>
    }
}
 80029ca:	bf00      	nop
 80029cc:	37d0      	adds	r7, #208	@ 0xd0
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	0800b5b8 	.word	0x0800b5b8
 80029d8:	0800b5c4 	.word	0x0800b5c4
 80029dc:	0800b5e8 	.word	0x0800b5e8

080029e0 <SendMPU6050DataViaMQTT>:
void SendMPU6050DataViaMQTT(UART_HandleTypeDef *huart, MPU6050_t *MPU6050, bool useLoRa)
{
 80029e0:	b590      	push	{r4, r7, lr}
 80029e2:	b0a9      	sub	sp, #164	@ 0xa4
 80029e4:	af04      	add	r7, sp, #16
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	4613      	mov	r3, r2
 80029ec:	71fb      	strb	r3, [r7, #7]
    if (!useLoRa)
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	f083 0301 	eor.w	r3, r3, #1
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d017      	beq.n	8002a2a <SendMPU6050DataViaMQTT+0x4a>
    {
        char mqttMessage[128];
        // Send Kalman-filtered angles instead of raw accelerometer data
         snprintf(mqttMessage, sizeof(mqttMessage), "MPU6050 Data: AngleX=%f, AngleY=%f", MPU6050->KalmanAngleX, MPU6050->KalmanAngleY);
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8002a00:	68b9      	ldr	r1, [r7, #8]
 8002a02:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	@ 0x50
 8002a06:	f107 0410 	add.w	r4, r7, #16
 8002a0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002a0e:	e9cd 2300 	strd	r2, r3, [sp]
 8002a12:	4a08      	ldr	r2, [pc, #32]	@ (8002a34 <SendMPU6050DataViaMQTT+0x54>)
 8002a14:	2180      	movs	r1, #128	@ 0x80
 8002a16:	4620      	mov	r0, r4
 8002a18:	f005 fc96 	bl	8008348 <sniprintf>
        mqtt_publish_packet(huart, "mpu6050_topic", mqttMessage);
 8002a1c:	f107 0310 	add.w	r3, r7, #16
 8002a20:	461a      	mov	r2, r3
 8002a22:	4905      	ldr	r1, [pc, #20]	@ (8002a38 <SendMPU6050DataViaMQTT+0x58>)
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f7fe fd41 	bl	80014ac <mqtt_publish_packet>
    }
}
 8002a2a:	bf00      	nop
 8002a2c:	3794      	adds	r7, #148	@ 0x94
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd90      	pop	{r4, r7, pc}
 8002a32:	bf00      	nop
 8002a34:	0800b5f4 	.word	0x0800b5f4
 8002a38:	0800b618 	.word	0x0800b618

08002a3c <SendCANDataViaMQTT>:

void SendCANDataViaMQTT(UART_HandleTypeDef *huart, bool useLoRa)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b0a8      	sub	sp, #160	@ 0xa0
 8002a40:	af02      	add	r7, sp, #8
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	70fb      	strb	r3, [r7, #3]
    uint8_t canData[16];
    CAN_Decode(canData, sizeof(canData));
 8002a48:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002a4c:	2110      	movs	r1, #16
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff fe40 	bl	80026d4 <CAN_Decode>

    if (!useLoRa)
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	f083 0301 	eor.w	r3, r3, #1
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d015      	beq.n	8002a8c <SendCANDataViaMQTT+0x50>
    {
        char canMessage[128];
        snprintf(canMessage, sizeof(canMessage), "Speed: %d, Temp: %d, Fuel: %d", decoded_speed, decoded_temp, decoded_fuel);
 8002a60:	4b0c      	ldr	r3, [pc, #48]	@ (8002a94 <SendCANDataViaMQTT+0x58>)
 8002a62:	6819      	ldr	r1, [r3, #0]
 8002a64:	4b0c      	ldr	r3, [pc, #48]	@ (8002a98 <SendCANDataViaMQTT+0x5c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a0c      	ldr	r2, [pc, #48]	@ (8002a9c <SendCANDataViaMQTT+0x60>)
 8002a6a:	6812      	ldr	r2, [r2, #0]
 8002a6c:	f107 0008 	add.w	r0, r7, #8
 8002a70:	9201      	str	r2, [sp, #4]
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	460b      	mov	r3, r1
 8002a76:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa0 <SendCANDataViaMQTT+0x64>)
 8002a78:	2180      	movs	r1, #128	@ 0x80
 8002a7a:	f005 fc65 	bl	8008348 <sniprintf>
        mqtt_publish_packet(huart, "can_topic", canMessage);
 8002a7e:	f107 0308 	add.w	r3, r7, #8
 8002a82:	461a      	mov	r2, r3
 8002a84:	4907      	ldr	r1, [pc, #28]	@ (8002aa4 <SendCANDataViaMQTT+0x68>)
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7fe fd10 	bl	80014ac <mqtt_publish_packet>
    }
}
 8002a8c:	bf00      	nop
 8002a8e:	3798      	adds	r7, #152	@ 0x98
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	2000041c 	.word	0x2000041c
 8002a98:	20000420 	.word	0x20000420
 8002a9c:	20000424 	.word	0x20000424
 8002aa0:	0800b628 	.word	0x0800b628
 8002aa4:	0800b648 	.word	0x0800b648

08002aa8 <SendAccidentDataViaLoRa>:

void SendAccidentDataViaLoRa(LoRa *lora)
{
 8002aa8:	b5b0      	push	{r4, r5, r7, lr}
 8002aaa:	b08c      	sub	sp, #48	@ 0x30
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
	const uint8_t loraMessage[] = "Vehicle flipped! Alert received.";
 8002ab0:	4b09      	ldr	r3, [pc, #36]	@ (8002ad8 <SendAccidentDataViaLoRa+0x30>)
 8002ab2:	f107 040c 	add.w	r4, r7, #12
 8002ab6:	461d      	mov	r5, r3
 8002ab8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002aba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002abc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002abe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ac0:	682b      	ldr	r3, [r5, #0]
 8002ac2:	7023      	strb	r3, [r4, #0]
    sendMessageAndWaitForAck_TX(lora, loraMessage);
 8002ac4:	f107 030c 	add.w	r3, r7, #12
 8002ac8:	4619      	mov	r1, r3
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff fa36 	bl	8001f3c <sendMessageAndWaitForAck_TX>
}
 8002ad0:	bf00      	nop
 8002ad2:	3730      	adds	r7, #48	@ 0x30
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ad8:	0800b654 	.word	0x0800b654

08002adc <HandleLoRaCommunication>:


void HandleLoRaCommunication(LoRa *lora, uint8_t *receivedFlag)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
    if (*receivedFlag)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d005      	beq.n	8002afa <HandleLoRaCommunication+0x1e>
    {
        *receivedFlag = 0; // Clear the flag
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
        receiveAndsendACK_RX(lora); // Process the received message
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7ff fb45 	bl	8002184 <receiveAndsendACK_RX>
    }
}
 8002afa:	bf00      	nop
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <Calculate_CRC>:

#include "crc_calculator.h"
#include "main.h"


uint32_t Calculate_CRC(const uint8_t *data, uint8_t length) {
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b0c6      	sub	sp, #280	@ 0x118
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002b0e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002b12:	6018      	str	r0, [r3, #0]
 8002b14:	460a      	mov	r2, r1
 8002b16:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002b1a:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8002b1e:	701a      	strb	r2, [r3, #0]
    uint32_t crc = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    uint32_t buffer32[(256 + 3) / 4]; // Pre-allocate buffer for max data size
    uint32_t wordCount = (length + 3) / 4;
 8002b26:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002b2a:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	3303      	adds	r3, #3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	da00      	bge.n	8002b38 <Calculate_CRC+0x34>
 8002b36:	3303      	adds	r3, #3
 8002b38:	109b      	asrs	r3, r3, #2
 8002b3a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    uint8_t i, j;

    // Pack bytes into 32-bit words (little-endian)
    for (i = 0; i < wordCount; i++) {
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8002b44:	e044      	b.n	8002bd0 <Calculate_CRC+0xcc>
        uint32_t word = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
        for (j = 0; j < 4 && (i * 4 + j) < length; j++) {
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8002b52:	e01d      	b.n	8002b90 <Calculate_CRC+0x8c>
            word |= (uint32_t)data[i * 4 + j] << (j * 8);
 8002b54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002b58:	009a      	lsls	r2, r3, #2
 8002b5a:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8002b5e:	4413      	add	r3, r2
 8002b60:	461a      	mov	r2, r3
 8002b62:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002b66:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	461a      	mov	r2, r3
 8002b72:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
        for (j = 0; j < 4 && (i * 4 + j) < length; j++) {
 8002b86:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8002b90:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d80c      	bhi.n	8002bb2 <Calculate_CRC+0xae>
 8002b98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002b9c:	009a      	lsls	r2, r3, #2
 8002b9e:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8002ba2:	441a      	add	r2, r3
 8002ba4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002ba8:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	dbd0      	blt.n	8002b54 <Calculate_CRC+0x50>
        }
        buffer32[i] = word;
 8002bb2:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 8002bb6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002bba:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002bbe:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 8002bc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < wordCount; i++) {
 8002bc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002bca:	3301      	adds	r3, #1
 8002bcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8002bd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002bd4:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d8b4      	bhi.n	8002b46 <Calculate_CRC+0x42>
    }

    // Compute CRC using HAL function
    crc = HAL_CRC_Calculate(&hcrc, buffer32, wordCount);
 8002bdc:	f107 0308 	add.w	r3, r7, #8
 8002be0:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8002be4:	4619      	mov	r1, r3
 8002be6:	4806      	ldr	r0, [pc, #24]	@ (8002c00 <Calculate_CRC+0xfc>)
 8002be8:	f001 fe67 	bl	80048ba <HAL_CRC_Calculate>
 8002bec:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c

    // Apply final XOR
    return crc ^ 0xFFFFFFFF;
 8002bf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002bf4:	43db      	mvns	r3, r3
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	20000450 	.word	0x20000450

08002c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c08:	f001 f980 	bl	8003f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c0c:	f000 f85e 	bl	8002ccc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c10:	f000 f9a2 	bl	8002f58 <MX_GPIO_Init>
  MX_CRC_Init();
 8002c14:	f000 f8d4 	bl	8002dc0 <MX_CRC_Init>
  MX_I2C1_Init();
 8002c18:	f000 f8e6 	bl	8002de8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002c1c:	f000 f912 	bl	8002e44 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002c20:	f000 f946 	bl	8002eb0 <MX_USART1_UART_Init>
  MX_CAN_Init();
 8002c24:	f000 f898 	bl	8002d58 <MX_CAN_Init>
  MX_USART3_UART_Init();
 8002c28:	f000 f96c 	bl	8002f04 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize sensors and modules
   if (MPU6050_Init(&hi2c1) != 0) {
 8002c2c:	4820      	ldr	r0, [pc, #128]	@ (8002cb0 <main+0xac>)
 8002c2e:	f000 fa63 	bl	80030f8 <MPU6050_Init>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <main+0x38>
       while (1); // Halt on error
 8002c38:	bf00      	nop
 8002c3a:	e7fd      	b.n	8002c38 <main+0x34>
      }
  SIM868_Init(&huart1);
 8002c3c:	481d      	ldr	r0, [pc, #116]	@ (8002cb4 <main+0xb0>)
 8002c3e:	f7fe f9d7 	bl	8000ff0 <SIM868_Init>
     LoRa_Init();
 8002c42:	f7ff f8bf 	bl	8001dc4 <LoRa_Init>

 	 // Start LoRa receiving
 	  LoRa_startReceiving(&myLoRa);
 8002c46:	481c      	ldr	r0, [pc, #112]	@ (8002cb8 <main+0xb4>)
 8002c48:	f7fe ffa9 	bl	8001b9e <LoRa_startReceiving>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  CheckSignalAndSwitchCommunication(&huart1, &useLoRa);
 8002c4c:	491b      	ldr	r1, [pc, #108]	@ (8002cbc <main+0xb8>)
 8002c4e:	4819      	ldr	r0, [pc, #100]	@ (8002cb4 <main+0xb0>)
 8002c50:	f7ff fe78 	bl	8002944 <CheckSignalAndSwitchCommunication>
	      MPU6050_Data(&hi2c1, &MPU6050, &vehicleFlipped);
 8002c54:	4a1a      	ldr	r2, [pc, #104]	@ (8002cc0 <main+0xbc>)
 8002c56:	491b      	ldr	r1, [pc, #108]	@ (8002cc4 <main+0xc0>)
 8002c58:	4815      	ldr	r0, [pc, #84]	@ (8002cb0 <main+0xac>)
 8002c5a:	f000 fdfd 	bl	8003858 <MPU6050_Data>
	      SendMPU6050DataViaMQTT(&huart1, &MPU6050, useLoRa);
 8002c5e:	4b17      	ldr	r3, [pc, #92]	@ (8002cbc <main+0xb8>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	461a      	mov	r2, r3
 8002c64:	4917      	ldr	r1, [pc, #92]	@ (8002cc4 <main+0xc0>)
 8002c66:	4813      	ldr	r0, [pc, #76]	@ (8002cb4 <main+0xb0>)
 8002c68:	f7ff feba 	bl	80029e0 <SendMPU6050DataViaMQTT>
	      SendCANDataViaMQTT(&huart1, useLoRa);
 8002c6c:	4b13      	ldr	r3, [pc, #76]	@ (8002cbc <main+0xb8>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	4619      	mov	r1, r3
 8002c72:	4810      	ldr	r0, [pc, #64]	@ (8002cb4 <main+0xb0>)
 8002c74:	f7ff fee2 	bl	8002a3c <SendCANDataViaMQTT>
	      if (vehicleFlipped)
 8002c78:	4b11      	ldr	r3, [pc, #68]	@ (8002cc0 <main+0xbc>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00d      	beq.n	8002c9c <main+0x98>
	      {
	          if (!useLoRa)
 8002c80:	4b0e      	ldr	r3, [pc, #56]	@ (8002cbc <main+0xb8>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	f083 0301 	eor.w	r3, r3, #1
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <main+0x92>
	          {
	        	  SendGPSDataViaMQTT(&huart1);
 8002c8e:	4809      	ldr	r0, [pc, #36]	@ (8002cb4 <main+0xb0>)
 8002c90:	f7ff fe70 	bl	8002974 <SendGPSDataViaMQTT>
 8002c94:	e002      	b.n	8002c9c <main+0x98>
	          }
	          else
	          {
	        	  SendAccidentDataViaLoRa(&myLoRa);
 8002c96:	4808      	ldr	r0, [pc, #32]	@ (8002cb8 <main+0xb4>)
 8002c98:	f7ff ff06 	bl	8002aa8 <SendAccidentDataViaLoRa>
	          }
	      }

	      HandleLoRaCommunication(&myLoRa, &receivedFlag);
 8002c9c:	490a      	ldr	r1, [pc, #40]	@ (8002cc8 <main+0xc4>)
 8002c9e:	4806      	ldr	r0, [pc, #24]	@ (8002cb8 <main+0xb4>)
 8002ca0:	f7ff ff1c 	bl	8002adc <HandleLoRaCommunication>
	      HAL_Delay(1000); // Adjust delay as needed
 8002ca4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ca8:	f001 f992 	bl	8003fd0 <HAL_Delay>
	  CheckSignalAndSwitchCommunication(&huart1, &useLoRa);
 8002cac:	e7ce      	b.n	8002c4c <main+0x48>
 8002cae:	bf00      	nop
 8002cb0:	20000458 	.word	0x20000458
 8002cb4:	20000504 	.word	0x20000504
 8002cb8:	200005f0 	.word	0x200005f0
 8002cbc:	2000061c 	.word	0x2000061c
 8002cc0:	2000061d 	.word	0x2000061d
 8002cc4:	20000598 	.word	0x20000598
 8002cc8:	20000594 	.word	0x20000594

08002ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b090      	sub	sp, #64	@ 0x40
 8002cd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cd2:	f107 0318 	add.w	r3, r7, #24
 8002cd6:	2228      	movs	r2, #40	@ 0x28
 8002cd8:	2100      	movs	r1, #0
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f005 fc64 	bl	80085a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ce0:	1d3b      	adds	r3, r7, #4
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	605a      	str	r2, [r3, #4]
 8002ce8:	609a      	str	r2, [r3, #8]
 8002cea:	60da      	str	r2, [r3, #12]
 8002cec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002cf2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002cf6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d00:	2302      	movs	r3, #2
 8002d02:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d08:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002d0a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d10:	f107 0318 	add.w	r3, r7, #24
 8002d14:	4618      	mov	r0, r3
 8002d16:	f003 f81d 	bl	8005d54 <HAL_RCC_OscConfig>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002d20:	f000 f9e4 	bl	80030ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d24:	230f      	movs	r3, #15
 8002d26:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d36:	2300      	movs	r3, #0
 8002d38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d3a:	1d3b      	adds	r3, r7, #4
 8002d3c:	2102      	movs	r1, #2
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f003 fa8a 	bl	8006258 <HAL_RCC_ClockConfig>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002d4a:	f000 f9cf 	bl	80030ec <Error_Handler>
  }
}
 8002d4e:	bf00      	nop
 8002d50:	3740      	adds	r7, #64	@ 0x40
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
	...

08002d58 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8002d5c:	4b16      	ldr	r3, [pc, #88]	@ (8002db8 <MX_CAN_Init+0x60>)
 8002d5e:	4a17      	ldr	r2, [pc, #92]	@ (8002dbc <MX_CAN_Init+0x64>)
 8002d60:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8002d62:	4b15      	ldr	r3, [pc, #84]	@ (8002db8 <MX_CAN_Init+0x60>)
 8002d64:	2210      	movs	r2, #16
 8002d66:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002d68:	4b13      	ldr	r3, [pc, #76]	@ (8002db8 <MX_CAN_Init+0x60>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002d6e:	4b12      	ldr	r3, [pc, #72]	@ (8002db8 <MX_CAN_Init+0x60>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8002d74:	4b10      	ldr	r3, [pc, #64]	@ (8002db8 <MX_CAN_Init+0x60>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8002db8 <MX_CAN_Init+0x60>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002d80:	4b0d      	ldr	r3, [pc, #52]	@ (8002db8 <MX_CAN_Init+0x60>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002d86:	4b0c      	ldr	r3, [pc, #48]	@ (8002db8 <MX_CAN_Init+0x60>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002db8 <MX_CAN_Init+0x60>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002d92:	4b09      	ldr	r3, [pc, #36]	@ (8002db8 <MX_CAN_Init+0x60>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002d98:	4b07      	ldr	r3, [pc, #28]	@ (8002db8 <MX_CAN_Init+0x60>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002d9e:	4b06      	ldr	r3, [pc, #24]	@ (8002db8 <MX_CAN_Init+0x60>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002da4:	4804      	ldr	r0, [pc, #16]	@ (8002db8 <MX_CAN_Init+0x60>)
 8002da6:	f001 f937 	bl	8004018 <HAL_CAN_Init>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8002db0:	f000 f99c 	bl	80030ec <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8002db4:	bf00      	nop
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	20000428 	.word	0x20000428
 8002dbc:	40006400 	.word	0x40006400

08002dc0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002dc4:	4b06      	ldr	r3, [pc, #24]	@ (8002de0 <MX_CRC_Init+0x20>)
 8002dc6:	4a07      	ldr	r2, [pc, #28]	@ (8002de4 <MX_CRC_Init+0x24>)
 8002dc8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002dca:	4805      	ldr	r0, [pc, #20]	@ (8002de0 <MX_CRC_Init+0x20>)
 8002dcc:	f001 fd59 	bl	8004882 <HAL_CRC_Init>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002dd6:	f000 f989 	bl	80030ec <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002dda:	bf00      	nop
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20000450 	.word	0x20000450
 8002de4:	40023000 	.word	0x40023000

08002de8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002dec:	4b12      	ldr	r3, [pc, #72]	@ (8002e38 <MX_I2C1_Init+0x50>)
 8002dee:	4a13      	ldr	r2, [pc, #76]	@ (8002e3c <MX_I2C1_Init+0x54>)
 8002df0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002df2:	4b11      	ldr	r3, [pc, #68]	@ (8002e38 <MX_I2C1_Init+0x50>)
 8002df4:	4a12      	ldr	r2, [pc, #72]	@ (8002e40 <MX_I2C1_Init+0x58>)
 8002df6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002df8:	4b0f      	ldr	r3, [pc, #60]	@ (8002e38 <MX_I2C1_Init+0x50>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8002e38 <MX_I2C1_Init+0x50>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e04:	4b0c      	ldr	r3, [pc, #48]	@ (8002e38 <MX_I2C1_Init+0x50>)
 8002e06:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e38 <MX_I2C1_Init+0x50>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e12:	4b09      	ldr	r3, [pc, #36]	@ (8002e38 <MX_I2C1_Init+0x50>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e18:	4b07      	ldr	r3, [pc, #28]	@ (8002e38 <MX_I2C1_Init+0x50>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e1e:	4b06      	ldr	r3, [pc, #24]	@ (8002e38 <MX_I2C1_Init+0x50>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e24:	4804      	ldr	r0, [pc, #16]	@ (8002e38 <MX_I2C1_Init+0x50>)
 8002e26:	f001 ff2f 	bl	8004c88 <HAL_I2C_Init>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002e30:	f000 f95c 	bl	80030ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e34:	bf00      	nop
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	20000458 	.word	0x20000458
 8002e3c:	40005400 	.word	0x40005400
 8002e40:	000186a0 	.word	0x000186a0

08002e44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002e48:	4b17      	ldr	r3, [pc, #92]	@ (8002ea8 <MX_SPI1_Init+0x64>)
 8002e4a:	4a18      	ldr	r2, [pc, #96]	@ (8002eac <MX_SPI1_Init+0x68>)
 8002e4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e4e:	4b16      	ldr	r3, [pc, #88]	@ (8002ea8 <MX_SPI1_Init+0x64>)
 8002e50:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002e54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e56:	4b14      	ldr	r3, [pc, #80]	@ (8002ea8 <MX_SPI1_Init+0x64>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e5c:	4b12      	ldr	r3, [pc, #72]	@ (8002ea8 <MX_SPI1_Init+0x64>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e62:	4b11      	ldr	r3, [pc, #68]	@ (8002ea8 <MX_SPI1_Init+0x64>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e68:	4b0f      	ldr	r3, [pc, #60]	@ (8002ea8 <MX_SPI1_Init+0x64>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea8 <MX_SPI1_Init+0x64>)
 8002e70:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002e74:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002e76:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea8 <MX_SPI1_Init+0x64>)
 8002e78:	2218      	movs	r2, #24
 8002e7a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea8 <MX_SPI1_Init+0x64>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e82:	4b09      	ldr	r3, [pc, #36]	@ (8002ea8 <MX_SPI1_Init+0x64>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e88:	4b07      	ldr	r3, [pc, #28]	@ (8002ea8 <MX_SPI1_Init+0x64>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002e8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ea8 <MX_SPI1_Init+0x64>)
 8002e90:	220a      	movs	r2, #10
 8002e92:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e94:	4804      	ldr	r0, [pc, #16]	@ (8002ea8 <MX_SPI1_Init+0x64>)
 8002e96:	f003 fb6d 	bl	8006574 <HAL_SPI_Init>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002ea0:	f000 f924 	bl	80030ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ea4:	bf00      	nop
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	200004ac 	.word	0x200004ac
 8002eac:	40013000 	.word	0x40013000

08002eb0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002eb4:	4b11      	ldr	r3, [pc, #68]	@ (8002efc <MX_USART1_UART_Init+0x4c>)
 8002eb6:	4a12      	ldr	r2, [pc, #72]	@ (8002f00 <MX_USART1_UART_Init+0x50>)
 8002eb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002eba:	4b10      	ldr	r3, [pc, #64]	@ (8002efc <MX_USART1_UART_Init+0x4c>)
 8002ebc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ec0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8002efc <MX_USART1_UART_Init+0x4c>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8002efc <MX_USART1_UART_Init+0x4c>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ece:	4b0b      	ldr	r3, [pc, #44]	@ (8002efc <MX_USART1_UART_Init+0x4c>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ed4:	4b09      	ldr	r3, [pc, #36]	@ (8002efc <MX_USART1_UART_Init+0x4c>)
 8002ed6:	220c      	movs	r2, #12
 8002ed8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002eda:	4b08      	ldr	r3, [pc, #32]	@ (8002efc <MX_USART1_UART_Init+0x4c>)
 8002edc:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002ee0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ee2:	4b06      	ldr	r3, [pc, #24]	@ (8002efc <MX_USART1_UART_Init+0x4c>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ee8:	4804      	ldr	r0, [pc, #16]	@ (8002efc <MX_USART1_UART_Init+0x4c>)
 8002eea:	f004 f8e6 	bl	80070ba <HAL_UART_Init>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8002ef4:	f000 f8fa 	bl	80030ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ef8:	bf00      	nop
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	20000504 	.word	0x20000504
 8002f00:	40013800 	.word	0x40013800

08002f04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f08:	4b11      	ldr	r3, [pc, #68]	@ (8002f50 <MX_USART3_UART_Init+0x4c>)
 8002f0a:	4a12      	ldr	r2, [pc, #72]	@ (8002f54 <MX_USART3_UART_Init+0x50>)
 8002f0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002f0e:	4b10      	ldr	r3, [pc, #64]	@ (8002f50 <MX_USART3_UART_Init+0x4c>)
 8002f10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f16:	4b0e      	ldr	r3, [pc, #56]	@ (8002f50 <MX_USART3_UART_Init+0x4c>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f50 <MX_USART3_UART_Init+0x4c>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f22:	4b0b      	ldr	r3, [pc, #44]	@ (8002f50 <MX_USART3_UART_Init+0x4c>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f28:	4b09      	ldr	r3, [pc, #36]	@ (8002f50 <MX_USART3_UART_Init+0x4c>)
 8002f2a:	220c      	movs	r2, #12
 8002f2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f2e:	4b08      	ldr	r3, [pc, #32]	@ (8002f50 <MX_USART3_UART_Init+0x4c>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f34:	4b06      	ldr	r3, [pc, #24]	@ (8002f50 <MX_USART3_UART_Init+0x4c>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f3a:	4805      	ldr	r0, [pc, #20]	@ (8002f50 <MX_USART3_UART_Init+0x4c>)
 8002f3c:	f004 f8bd 	bl	80070ba <HAL_UART_Init>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002f46:	f000 f8d1 	bl	80030ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f4a:	bf00      	nop
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	2000054c 	.word	0x2000054c
 8002f54:	40004800 	.word	0x40004800

08002f58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b088      	sub	sp, #32
 8002f5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f5e:	f107 0310 	add.w	r3, r7, #16
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	605a      	str	r2, [r3, #4]
 8002f68:	609a      	str	r2, [r3, #8]
 8002f6a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f6c:	4b4f      	ldr	r3, [pc, #316]	@ (80030ac <MX_GPIO_Init+0x154>)
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	4a4e      	ldr	r2, [pc, #312]	@ (80030ac <MX_GPIO_Init+0x154>)
 8002f72:	f043 0310 	orr.w	r3, r3, #16
 8002f76:	6193      	str	r3, [r2, #24]
 8002f78:	4b4c      	ldr	r3, [pc, #304]	@ (80030ac <MX_GPIO_Init+0x154>)
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	f003 0310 	and.w	r3, r3, #16
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f84:	4b49      	ldr	r3, [pc, #292]	@ (80030ac <MX_GPIO_Init+0x154>)
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	4a48      	ldr	r2, [pc, #288]	@ (80030ac <MX_GPIO_Init+0x154>)
 8002f8a:	f043 0320 	orr.w	r3, r3, #32
 8002f8e:	6193      	str	r3, [r2, #24]
 8002f90:	4b46      	ldr	r3, [pc, #280]	@ (80030ac <MX_GPIO_Init+0x154>)
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	f003 0320 	and.w	r3, r3, #32
 8002f98:	60bb      	str	r3, [r7, #8]
 8002f9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9c:	4b43      	ldr	r3, [pc, #268]	@ (80030ac <MX_GPIO_Init+0x154>)
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	4a42      	ldr	r2, [pc, #264]	@ (80030ac <MX_GPIO_Init+0x154>)
 8002fa2:	f043 0304 	orr.w	r3, r3, #4
 8002fa6:	6193      	str	r3, [r2, #24]
 8002fa8:	4b40      	ldr	r3, [pc, #256]	@ (80030ac <MX_GPIO_Init+0x154>)
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	607b      	str	r3, [r7, #4]
 8002fb2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fb4:	4b3d      	ldr	r3, [pc, #244]	@ (80030ac <MX_GPIO_Init+0x154>)
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	4a3c      	ldr	r2, [pc, #240]	@ (80030ac <MX_GPIO_Init+0x154>)
 8002fba:	f043 0308 	orr.w	r3, r3, #8
 8002fbe:	6193      	str	r3, [r2, #24]
 8002fc0:	4b3a      	ldr	r3, [pc, #232]	@ (80030ac <MX_GPIO_Init+0x154>)
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	f003 0308 	and.w	r3, r3, #8
 8002fc8:	603b      	str	r3, [r7, #0]
 8002fca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Run_Pin|Error_Pin|Flash_Pin, GPIO_PIN_RESET);
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8002fd2:	4837      	ldr	r0, [pc, #220]	@ (80030b0 <MX_GPIO_Init+0x158>)
 8002fd4:	f001 fe28 	bl	8004c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_Pin|LORA_RST_Pin, GPIO_PIN_RESET);
 8002fd8:	2200      	movs	r2, #0
 8002fda:	2109      	movs	r1, #9
 8002fdc:	4835      	ldr	r0, [pc, #212]	@ (80030b4 <MX_GPIO_Init+0x15c>)
 8002fde:	f001 fe23 	bl	8004c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIM_PWRKEY_Pin|GPS_EN_Pin|USART1_DTR_Pin, GPIO_PIN_RESET);
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8002fe8:	4833      	ldr	r0, [pc, #204]	@ (80030b8 <MX_GPIO_Init+0x160>)
 8002fea:	f001 fe1d 	bl	8004c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Run_Pin Error_Pin Flash_Pin */
  GPIO_InitStruct.Pin = Run_Pin|Error_Pin|Flash_Pin;
 8002fee:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002ff2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003000:	f107 0310 	add.w	r3, r7, #16
 8003004:	4619      	mov	r1, r3
 8003006:	482a      	ldr	r0, [pc, #168]	@ (80030b0 <MX_GPIO_Init+0x158>)
 8003008:	f001 fc8a 	bl	8004920 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Pin LORA_RST_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin|LORA_RST_Pin;
 800300c:	2309      	movs	r3, #9
 800300e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003010:	2301      	movs	r3, #1
 8003012:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003014:	2300      	movs	r3, #0
 8003016:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003018:	2302      	movs	r3, #2
 800301a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800301c:	f107 0310 	add.w	r3, r7, #16
 8003020:	4619      	mov	r1, r3
 8003022:	4824      	ldr	r0, [pc, #144]	@ (80030b4 <MX_GPIO_Init+0x15c>)
 8003024:	f001 fc7c 	bl	8004920 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_Blu_Pin BUTTON_Pin USART1_DCD_Pin */
  GPIO_InitStruct.Pin = SW_Blu_Pin|BUTTON_Pin|USART1_DCD_Pin;
 8003028:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800302c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800302e:	2300      	movs	r3, #0
 8003030:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003032:	2300      	movs	r3, #0
 8003034:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003036:	f107 0310 	add.w	r3, r7, #16
 800303a:	4619      	mov	r1, r3
 800303c:	481d      	ldr	r0, [pc, #116]	@ (80030b4 <MX_GPIO_Init+0x15c>)
 800303e:	f001 fc6f 	bl	8004920 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_INT_Pin */
  GPIO_InitStruct.Pin = LORA_INT_Pin;
 8003042:	2301      	movs	r3, #1
 8003044:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003046:	4b1d      	ldr	r3, [pc, #116]	@ (80030bc <MX_GPIO_Init+0x164>)
 8003048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304a:	2300      	movs	r3, #0
 800304c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LORA_INT_GPIO_Port, &GPIO_InitStruct);
 800304e:	f107 0310 	add.w	r3, r7, #16
 8003052:	4619      	mov	r1, r3
 8003054:	4818      	ldr	r0, [pc, #96]	@ (80030b8 <MX_GPIO_Init+0x160>)
 8003056:	f001 fc63 	bl	8004920 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin BOOT1_Pin USART1_RI_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|BOOT1_Pin|USART1_RI_Pin;
 800305a:	f248 0306 	movw	r3, #32774	@ 0x8006
 800305e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003060:	2300      	movs	r3, #0
 8003062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003064:	2300      	movs	r3, #0
 8003066:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003068:	f107 0310 	add.w	r3, r7, #16
 800306c:	4619      	mov	r1, r3
 800306e:	4812      	ldr	r0, [pc, #72]	@ (80030b8 <MX_GPIO_Init+0x160>)
 8003070:	f001 fc56 	bl	8004920 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_PWRKEY_Pin GPS_EN_Pin USART1_DTR_Pin */
  GPIO_InitStruct.Pin = SIM_PWRKEY_Pin|GPS_EN_Pin|USART1_DTR_Pin;
 8003074:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8003078:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800307a:	2301      	movs	r3, #1
 800307c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307e:	2300      	movs	r3, #0
 8003080:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003082:	2302      	movs	r3, #2
 8003084:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003086:	f107 0310 	add.w	r3, r7, #16
 800308a:	4619      	mov	r1, r3
 800308c:	480a      	ldr	r0, [pc, #40]	@ (80030b8 <MX_GPIO_Init+0x160>)
 800308e:	f001 fc47 	bl	8004920 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003092:	2200      	movs	r2, #0
 8003094:	2100      	movs	r1, #0
 8003096:	2006      	movs	r0, #6
 8003098:	f001 fbbd 	bl	8004816 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800309c:	2006      	movs	r0, #6
 800309e:	f001 fbd6 	bl	800484e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80030a2:	bf00      	nop
 80030a4:	3720      	adds	r7, #32
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40021000 	.word	0x40021000
 80030b0:	40011000 	.word	0x40011000
 80030b4:	40010800 	.word	0x40010800
 80030b8:	40010c00 	.word	0x40010c00
 80030bc:	10110000 	.word	0x10110000

080030c0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == myLoRa.DIO0_pin)
 80030ca:	4b06      	ldr	r3, [pc, #24]	@ (80030e4 <HAL_GPIO_EXTI_Callback+0x24>)
 80030cc:	8a9b      	ldrh	r3, [r3, #20]
 80030ce:	88fa      	ldrh	r2, [r7, #6]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d102      	bne.n	80030da <HAL_GPIO_EXTI_Callback+0x1a>
    {
        // This indicates a packet has been received
        receivedFlag = 1;
 80030d4:	4b04      	ldr	r3, [pc, #16]	@ (80030e8 <HAL_GPIO_EXTI_Callback+0x28>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	701a      	strb	r2, [r3, #0]
    }
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr
 80030e4:	200005f0 	.word	0x200005f0
 80030e8:	20000594 	.word	0x20000594

080030ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030f0:	b672      	cpsid	i
}
 80030f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030f4:	bf00      	nop
 80030f6:	e7fd      	b.n	80030f4 <Error_Handler+0x8>

080030f8 <MPU6050_Init>:
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

// Initialize MPU6050
uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b088      	sub	sp, #32
 80030fc:	af04      	add	r7, sp, #16
 80030fe:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8003100:	2364      	movs	r3, #100	@ 0x64
 8003102:	9302      	str	r3, [sp, #8]
 8003104:	2301      	movs	r3, #1
 8003106:	9301      	str	r3, [sp, #4]
 8003108:	f107 030f 	add.w	r3, r7, #15
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	2301      	movs	r3, #1
 8003110:	2275      	movs	r2, #117	@ 0x75
 8003112:	21d0      	movs	r1, #208	@ 0xd0
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f001 fff5 	bl	8005104 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 is the expected response
 800311a:	7bfb      	ldrb	r3, [r7, #15]
 800311c:	2b68      	cmp	r3, #104	@ 0x68
 800311e:	d13d      	bne.n	800319c <MPU6050_Init+0xa4>
    {
        // Wake up the sensor by writing 0 to PWR_MGMT_1 register
        Data = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8003124:	2364      	movs	r3, #100	@ 0x64
 8003126:	9302      	str	r3, [sp, #8]
 8003128:	2301      	movs	r3, #1
 800312a:	9301      	str	r3, [sp, #4]
 800312c:	f107 030e 	add.w	r3, r7, #14
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	2301      	movs	r3, #1
 8003134:	226b      	movs	r2, #107	@ 0x6b
 8003136:	21d0      	movs	r1, #208	@ 0xd0
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f001 fee9 	bl	8004f10 <HAL_I2C_Mem_Write>

        // Set sample rate to 1 kHz
        Data = 0x07;
 800313e:	2307      	movs	r3, #7
 8003140:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8003142:	2364      	movs	r3, #100	@ 0x64
 8003144:	9302      	str	r3, [sp, #8]
 8003146:	2301      	movs	r3, #1
 8003148:	9301      	str	r3, [sp, #4]
 800314a:	f107 030e 	add.w	r3, r7, #14
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	2301      	movs	r3, #1
 8003152:	2219      	movs	r2, #25
 8003154:	21d0      	movs	r1, #208	@ 0xd0
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f001 feda 	bl	8004f10 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ±2g range
        Data = 0x00;
 800315c:	2300      	movs	r3, #0
 800315e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8003160:	2364      	movs	r3, #100	@ 0x64
 8003162:	9302      	str	r3, [sp, #8]
 8003164:	2301      	movs	r3, #1
 8003166:	9301      	str	r3, [sp, #4]
 8003168:	f107 030e 	add.w	r3, r7, #14
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	2301      	movs	r3, #1
 8003170:	221c      	movs	r2, #28
 8003172:	21d0      	movs	r1, #208	@ 0xd0
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f001 fecb 	bl	8004f10 <HAL_I2C_Mem_Write>

        // Set Gyro configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ±250 deg/sec range
        Data = 0x00;
 800317a:	2300      	movs	r3, #0
 800317c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800317e:	2364      	movs	r3, #100	@ 0x64
 8003180:	9302      	str	r3, [sp, #8]
 8003182:	2301      	movs	r3, #1
 8003184:	9301      	str	r3, [sp, #4]
 8003186:	f107 030e 	add.w	r3, r7, #14
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	2301      	movs	r3, #1
 800318e:	221b      	movs	r2, #27
 8003190:	21d0      	movs	r1, #208	@ 0xd0
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f001 febc 	bl	8004f10 <HAL_I2C_Mem_Write>
        return 0;  // Initialization successful
 8003198:	2300      	movs	r3, #0
 800319a:	e000      	b.n	800319e <MPU6050_Init+0xa6>
    }
    return 1;  // Initialization failed
 800319c:	2301      	movs	r3, #1
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <MPU6050_Read_All>:
    // Convert raw data to temperature in Celsius
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

// Read all sensor data
void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80031a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031ac:	b094      	sub	sp, #80	@ 0x50
 80031ae:	af04      	add	r7, sp, #16
 80031b0:	6078      	str	r0, [r7, #4]
 80031b2:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];  // Buffer for raw data
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80031b4:	2364      	movs	r3, #100	@ 0x64
 80031b6:	9302      	str	r3, [sp, #8]
 80031b8:	230e      	movs	r3, #14
 80031ba:	9301      	str	r3, [sp, #4]
 80031bc:	f107 0308 	add.w	r3, r7, #8
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	2301      	movs	r3, #1
 80031c4:	223b      	movs	r2, #59	@ 0x3b
 80031c6:	21d0      	movs	r1, #208	@ 0xd0
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f001 ff9b 	bl	8005104 <HAL_I2C_Mem_Read>

    // Parse accelerometer data
    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80031ce:	7a3b      	ldrb	r3, [r7, #8]
 80031d0:	b21b      	sxth	r3, r3
 80031d2:	021b      	lsls	r3, r3, #8
 80031d4:	b21a      	sxth	r2, r3
 80031d6:	7a7b      	ldrb	r3, [r7, #9]
 80031d8:	b21b      	sxth	r3, r3
 80031da:	4313      	orrs	r3, r2
 80031dc:	b21a      	sxth	r2, r3
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80031e2:	7abb      	ldrb	r3, [r7, #10]
 80031e4:	b21b      	sxth	r3, r3
 80031e6:	021b      	lsls	r3, r3, #8
 80031e8:	b21a      	sxth	r2, r3
 80031ea:	7afb      	ldrb	r3, [r7, #11]
 80031ec:	b21b      	sxth	r3, r3
 80031ee:	4313      	orrs	r3, r2
 80031f0:	b21a      	sxth	r2, r3
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80031f6:	7b3b      	ldrb	r3, [r7, #12]
 80031f8:	b21b      	sxth	r3, r3
 80031fa:	021b      	lsls	r3, r3, #8
 80031fc:	b21a      	sxth	r2, r3
 80031fe:	7b7b      	ldrb	r3, [r7, #13]
 8003200:	b21b      	sxth	r3, r3
 8003202:	4313      	orrs	r3, r2
 8003204:	b21a      	sxth	r2, r3
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	809a      	strh	r2, [r3, #4]

    // Parse temperature data
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 800320a:	7bbb      	ldrb	r3, [r7, #14]
 800320c:	b21b      	sxth	r3, r3
 800320e:	021b      	lsls	r3, r3, #8
 8003210:	b21a      	sxth	r2, r3
 8003212:	7bfb      	ldrb	r3, [r7, #15]
 8003214:	b21b      	sxth	r3, r3
 8003216:	4313      	orrs	r3, r2
 8003218:	86fb      	strh	r3, [r7, #54]	@ 0x36

    // Parse gyroscope data
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 800321a:	7c3b      	ldrb	r3, [r7, #16]
 800321c:	b21b      	sxth	r3, r3
 800321e:	021b      	lsls	r3, r3, #8
 8003220:	b21a      	sxth	r2, r3
 8003222:	7c7b      	ldrb	r3, [r7, #17]
 8003224:	b21b      	sxth	r3, r3
 8003226:	4313      	orrs	r3, r2
 8003228:	b21a      	sxth	r2, r3
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 800322e:	7cbb      	ldrb	r3, [r7, #18]
 8003230:	b21b      	sxth	r3, r3
 8003232:	021b      	lsls	r3, r3, #8
 8003234:	b21a      	sxth	r2, r3
 8003236:	7cfb      	ldrb	r3, [r7, #19]
 8003238:	b21b      	sxth	r3, r3
 800323a:	4313      	orrs	r3, r2
 800323c:	b21a      	sxth	r2, r3
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8003242:	7d3b      	ldrb	r3, [r7, #20]
 8003244:	b21b      	sxth	r3, r3
 8003246:	021b      	lsls	r3, r3, #8
 8003248:	b21a      	sxth	r2, r3
 800324a:	7d7b      	ldrb	r3, [r7, #21]
 800324c:	b21b      	sxth	r3, r3
 800324e:	4313      	orrs	r3, r2
 8003250:	b21a      	sxth	r2, r3
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	849a      	strh	r2, [r3, #36]	@ 0x24

    // Convert to proper units
    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	f9b3 3000 	ldrsh.w	r3, [r3]
 800325c:	4618      	mov	r0, r3
 800325e:	f7fd f8d1 	bl	8000404 <__aeabi_i2d>
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	4b96      	ldr	r3, [pc, #600]	@ (80034c0 <MPU6050_Read_All+0x318>)
 8003268:	f7fd fa60 	bl	800072c <__aeabi_ddiv>
 800326c:	4602      	mov	r2, r0
 800326e:	460b      	mov	r3, r1
 8003270:	6839      	ldr	r1, [r7, #0]
 8003272:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800327c:	4618      	mov	r0, r3
 800327e:	f7fd f8c1 	bl	8000404 <__aeabi_i2d>
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	4b8e      	ldr	r3, [pc, #568]	@ (80034c0 <MPU6050_Read_All+0x318>)
 8003288:	f7fd fa50 	bl	800072c <__aeabi_ddiv>
 800328c:	4602      	mov	r2, r0
 800328e:	460b      	mov	r3, r1
 8003290:	6839      	ldr	r1, [r7, #0]
 8003292:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800329c:	4618      	mov	r0, r3
 800329e:	f7fd f8b1 	bl	8000404 <__aeabi_i2d>
 80032a2:	a381      	add	r3, pc, #516	@ (adr r3, 80034a8 <MPU6050_Read_All+0x300>)
 80032a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a8:	f7fd fa40 	bl	800072c <__aeabi_ddiv>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	6839      	ldr	r1, [r7, #0]
 80032b2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 80032b6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fd fc9e 	bl	8000bfc <__aeabi_i2f>
 80032c0:	4603      	mov	r3, r0
 80032c2:	4980      	ldr	r1, [pc, #512]	@ (80034c4 <MPU6050_Read_All+0x31c>)
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fd fda1 	bl	8000e0c <__aeabi_fdiv>
 80032ca:	4603      	mov	r3, r0
 80032cc:	497e      	ldr	r1, [pc, #504]	@ (80034c8 <MPU6050_Read_All+0x320>)
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fd fbe0 	bl	8000a94 <__addsf3>
 80032d4:	4603      	mov	r3, r0
 80032d6:	461a      	mov	r2, r3
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	641a      	str	r2, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fd f88e 	bl	8000404 <__aeabi_i2d>
 80032e8:	a371      	add	r3, pc, #452	@ (adr r3, 80034b0 <MPU6050_Read_All+0x308>)
 80032ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ee:	f7fd fa1d 	bl	800072c <__aeabi_ddiv>
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	6839      	ldr	r1, [r7, #0]
 80032f8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8003302:	4618      	mov	r0, r3
 8003304:	f7fd f87e 	bl	8000404 <__aeabi_i2d>
 8003308:	a369      	add	r3, pc, #420	@ (adr r3, 80034b0 <MPU6050_Read_All+0x308>)
 800330a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330e:	f7fd fa0d 	bl	800072c <__aeabi_ddiv>
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	6839      	ldr	r1, [r7, #0]
 8003318:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8003322:	4618      	mov	r0, r3
 8003324:	f7fd f86e 	bl	8000404 <__aeabi_i2d>
 8003328:	a361      	add	r3, pc, #388	@ (adr r3, 80034b0 <MPU6050_Read_All+0x308>)
 800332a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332e:	f7fd f9fd 	bl	800072c <__aeabi_ddiv>
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	6839      	ldr	r1, [r7, #0]
 8003338:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman filter calculations
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 800333c:	f000 fe3e 	bl	8003fbc <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	4b62      	ldr	r3, [pc, #392]	@ (80034cc <MPU6050_Read_All+0x324>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	4618      	mov	r0, r3
 800334a:	f7fd f84b 	bl	80003e4 <__aeabi_ui2d>
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	4b5f      	ldr	r3, [pc, #380]	@ (80034d0 <MPU6050_Read_All+0x328>)
 8003354:	f7fd f9ea 	bl	800072c <__aeabi_ddiv>
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 8003360:	f000 fe2c 	bl	8003fbc <HAL_GetTick>
 8003364:	4603      	mov	r3, r0
 8003366:	4a59      	ldr	r2, [pc, #356]	@ (80034cc <MPU6050_Read_All+0x324>)
 8003368:	6013      	str	r3, [r2, #0]
    double roll;

    // Calculate roll and pitch
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003370:	461a      	mov	r2, r3
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003378:	fb03 f202 	mul.w	r2, r3, r2
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003382:	4619      	mov	r1, r3
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800338a:	fb01 f303 	mul.w	r3, r1, r3
 800338e:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8003390:	4618      	mov	r0, r3
 8003392:	f7fd f837 	bl	8000404 <__aeabi_i2d>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	4610      	mov	r0, r2
 800339c:	4619      	mov	r1, r3
 800339e:	f007 f9d1 	bl	800a744 <sqrt>
 80033a2:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0) {
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	f04f 0300 	mov.w	r3, #0
 80033ae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80033b2:	f7fd faf9 	bl	80009a8 <__aeabi_dcmpeq>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d119      	bne.n	80033f0 <MPU6050_Read_All+0x248>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fd f81e 	bl	8000404 <__aeabi_i2d>
 80033c8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033cc:	f7fd f9ae 	bl	800072c <__aeabi_ddiv>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4610      	mov	r0, r2
 80033d6:	4619      	mov	r1, r3
 80033d8:	f007 f9da 	bl	800a790 <atan>
 80033dc:	a336      	add	r3, pc, #216	@ (adr r3, 80034b8 <MPU6050_Read_All+0x310>)
 80033de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e2:	f7fd f879 	bl	80004d8 <__aeabi_dmul>
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 80033ee:	e005      	b.n	80033fc <MPU6050_Read_All+0x254>
    } else {
        roll = 0.0;
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003402:	425b      	negs	r3, r3
 8003404:	4618      	mov	r0, r3
 8003406:	f7fc fffd 	bl	8000404 <__aeabi_i2d>
 800340a:	4682      	mov	sl, r0
 800340c:	468b      	mov	fp, r1
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003414:	4618      	mov	r0, r3
 8003416:	f7fc fff5 	bl	8000404 <__aeabi_i2d>
 800341a:	4602      	mov	r2, r0
 800341c:	460b      	mov	r3, r1
 800341e:	4650      	mov	r0, sl
 8003420:	4659      	mov	r1, fp
 8003422:	f007 f98d 	bl	800a740 <atan2>
 8003426:	a324      	add	r3, pc, #144	@ (adr r3, 80034b8 <MPU6050_Read_All+0x310>)
 8003428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342c:	f7fd f854 	bl	80004d8 <__aeabi_dmul>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	e9c7 2306 	strd	r2, r3, [r7, #24]
    // Handle pitch discontinuity
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	4b25      	ldr	r3, [pc, #148]	@ (80034d4 <MPU6050_Read_All+0x32c>)
 800343e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003442:	f7fd fabb 	bl	80009bc <__aeabi_dcmplt>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00a      	beq.n	8003462 <MPU6050_Read_All+0x2ba>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	4b20      	ldr	r3, [pc, #128]	@ (80034d8 <MPU6050_Read_All+0x330>)
 8003458:	f7fd face 	bl	80009f8 <__aeabi_dcmpgt>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d114      	bne.n	800348c <MPU6050_Read_All+0x2e4>
 8003462:	f04f 0200 	mov.w	r2, #0
 8003466:	4b1c      	ldr	r3, [pc, #112]	@ (80034d8 <MPU6050_Read_All+0x330>)
 8003468:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800346c:	f7fd fac4 	bl	80009f8 <__aeabi_dcmpgt>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d034      	beq.n	80034e0 <MPU6050_Read_All+0x338>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	4b14      	ldr	r3, [pc, #80]	@ (80034d4 <MPU6050_Read_All+0x32c>)
 8003482:	f7fd fa9b 	bl	80009bc <__aeabi_dcmplt>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d029      	beq.n	80034e0 <MPU6050_Read_All+0x338>
        KalmanY.angle = pitch;
 800348c:	4913      	ldr	r1, [pc, #76]	@ (80034dc <MPU6050_Read_All+0x334>)
 800348e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003492:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8003496:	6839      	ldr	r1, [r7, #0]
 8003498:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800349c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 80034a0:	e031      	b.n	8003506 <MPU6050_Read_All+0x35e>
 80034a2:	bf00      	nop
 80034a4:	f3af 8000 	nop.w
 80034a8:	00000000 	.word	0x00000000
 80034ac:	40cc2900 	.word	0x40cc2900
 80034b0:	00000000 	.word	0x00000000
 80034b4:	40606000 	.word	0x40606000
 80034b8:	1a63c1f8 	.word	0x1a63c1f8
 80034bc:	404ca5dc 	.word	0x404ca5dc
 80034c0:	40d00000 	.word	0x40d00000
 80034c4:	43aa0000 	.word	0x43aa0000
 80034c8:	42121eb8 	.word	0x42121eb8
 80034cc:	20000620 	.word	0x20000620
 80034d0:	408f4000 	.word	0x408f4000
 80034d4:	c0568000 	.word	0xc0568000
 80034d8:	40568000 	.word	0x40568000
 80034dc:	20000060 	.word	0x20000060
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80034e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80034ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80034ee:	e9cd 2300 	strd	r2, r3, [sp]
 80034f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034f6:	481c      	ldr	r0, [pc, #112]	@ (8003568 <MPU6050_Read_All+0x3c0>)
 80034f8:	f000 f83c 	bl	8003574 <Kalman_getAngle>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	6839      	ldr	r1, [r7, #0]
 8003502:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    }

    // Correct roll direction based on pitch
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800350c:	4690      	mov	r8, r2
 800350e:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	4b15      	ldr	r3, [pc, #84]	@ (800356c <MPU6050_Read_All+0x3c4>)
 8003518:	4640      	mov	r0, r8
 800351a:	4649      	mov	r1, r9
 800351c:	f7fd fa6c 	bl	80009f8 <__aeabi_dcmpgt>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d008      	beq.n	8003538 <MPU6050_Read_All+0x390>
        DataStruct->Gx = -DataStruct->Gx;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800352c:	4614      	mov	r4, r2
 800352e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800353e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003542:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003546:	e9cd 2300 	strd	r2, r3, [sp]
 800354a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800354e:	4808      	ldr	r0, [pc, #32]	@ (8003570 <MPU6050_Read_All+0x3c8>)
 8003550:	f000 f810 	bl	8003574 <Kalman_getAngle>
 8003554:	4602      	mov	r2, r0
 8003556:	460b      	mov	r3, r1
 8003558:	6839      	ldr	r1, [r7, #0]
 800355a:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

}
 800355e:	bf00      	nop
 8003560:	3740      	adds	r7, #64	@ 0x40
 8003562:	46bd      	mov	sp, r7
 8003564:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003568:	20000060 	.word	0x20000060
 800356c:	40568000 	.word	0x40568000
 8003570:	20000018 	.word	0x20000018

08003574 <Kalman_getAngle>:
// Kalman filter implementation
double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8003574:	b5b0      	push	{r4, r5, r7, lr}
 8003576:	b092      	sub	sp, #72	@ 0x48
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	e9c7 2300 	strd	r2, r3, [r7]
    // Predict step
    double rate = newRate - Kalman->bias;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003586:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800358a:	f7fc fded 	bl	8000168 <__aeabi_dsub>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += dt * rate;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800359c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80035a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80035a4:	f7fc ff98 	bl	80004d8 <__aeabi_dmul>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4620      	mov	r0, r4
 80035ae:	4629      	mov	r1, r5
 80035b0:	f7fc fddc 	bl	800016c <__adddf3>
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	68f9      	ldr	r1, [r7, #12]
 80035ba:	e9c1 2306 	strd	r2, r3, [r1, #24]

    // Update error covariance matrix
    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80035ca:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80035ce:	f7fc ff83 	bl	80004d8 <__aeabi_dmul>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4610      	mov	r0, r2
 80035d8:	4619      	mov	r1, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80035e0:	f7fc fdc2 	bl	8000168 <__aeabi_dsub>
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	4610      	mov	r0, r2
 80035ea:	4619      	mov	r1, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80035f2:	f7fc fdb9 	bl	8000168 <__aeabi_dsub>
 80035f6:	4602      	mov	r2, r0
 80035f8:	460b      	mov	r3, r1
 80035fa:	4610      	mov	r0, r2
 80035fc:	4619      	mov	r1, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003604:	f7fc fdb2 	bl	800016c <__adddf3>
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	4610      	mov	r0, r2
 800360e:	4619      	mov	r1, r3
 8003610:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8003614:	f7fc ff60 	bl	80004d8 <__aeabi_dmul>
 8003618:	4602      	mov	r2, r0
 800361a:	460b      	mov	r3, r1
 800361c:	4620      	mov	r0, r4
 800361e:	4629      	mov	r1, r5
 8003620:	f7fc fda4 	bl	800016c <__adddf3>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	68f9      	ldr	r1, [r7, #12]
 800362a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800363a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800363e:	f7fc ff4b 	bl	80004d8 <__aeabi_dmul>
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	4620      	mov	r0, r4
 8003648:	4629      	mov	r1, r5
 800364a:	f7fc fd8d 	bl	8000168 <__aeabi_dsub>
 800364e:	4602      	mov	r2, r0
 8003650:	460b      	mov	r3, r1
 8003652:	68f9      	ldr	r1, [r7, #12]
 8003654:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8003664:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8003668:	f7fc ff36 	bl	80004d8 <__aeabi_dmul>
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	4620      	mov	r0, r4
 8003672:	4629      	mov	r1, r5
 8003674:	f7fc fd78 	bl	8000168 <__aeabi_dsub>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	68f9      	ldr	r1, [r7, #12]
 800367e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800368e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8003692:	f7fc ff21 	bl	80004d8 <__aeabi_dmul>
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	4620      	mov	r0, r4
 800369c:	4629      	mov	r1, r5
 800369e:	f7fc fd65 	bl	800016c <__adddf3>
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	68f9      	ldr	r1, [r7, #12]
 80036a8:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    // Calculate Kalman gain
    double S = Kalman->P[0][0] + Kalman->R_measure;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80036b8:	f7fc fd58 	bl	800016c <__adddf3>
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80036ca:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80036ce:	f7fd f82d 	bl	800072c <__aeabi_ddiv>
 80036d2:	4602      	mov	r2, r0
 80036d4:	460b      	mov	r3, r1
 80036d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80036e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80036e4:	f7fd f822 	bl	800072c <__aeabi_ddiv>
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	e9c7 2306 	strd	r2, r3, [r7, #24]

    // Update step
    double y = newAngle - Kalman->angle;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80036f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036fa:	f7fc fd35 	bl	8000168 <__aeabi_dsub>
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    Kalman->angle += K[0] * y;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800370c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003710:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003714:	f7fc fee0 	bl	80004d8 <__aeabi_dmul>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	4620      	mov	r0, r4
 800371e:	4629      	mov	r1, r5
 8003720:	f7fc fd24 	bl	800016c <__adddf3>
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	68f9      	ldr	r1, [r7, #12]
 800372a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8003734:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003738:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800373c:	f7fc fecc 	bl	80004d8 <__aeabi_dmul>
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	4620      	mov	r0, r4
 8003746:	4629      	mov	r1, r5
 8003748:	f7fc fd10 	bl	800016c <__adddf3>
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	68f9      	ldr	r1, [r7, #12]
 8003752:	e9c1 2308 	strd	r2, r3, [r1, #32]

    // Update error covariance matrix
    double P00_temp = Kalman->P[0][0];
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800375c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double P01_temp = Kalman->P[0][1];
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8003766:	e9c7 2308 	strd	r2, r3, [r7, #32]
    Kalman->P[0][0] -= K[0] * P00_temp;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8003770:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003774:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003778:	f7fc feae 	bl	80004d8 <__aeabi_dmul>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	4620      	mov	r0, r4
 8003782:	4629      	mov	r1, r5
 8003784:	f7fc fcf0 	bl	8000168 <__aeabi_dsub>
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	68f9      	ldr	r1, [r7, #12]
 800378e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8003798:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800379c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037a0:	f7fc fe9a 	bl	80004d8 <__aeabi_dmul>
 80037a4:	4602      	mov	r2, r0
 80037a6:	460b      	mov	r3, r1
 80037a8:	4620      	mov	r0, r4
 80037aa:	4629      	mov	r1, r5
 80037ac:	f7fc fcdc 	bl	8000168 <__aeabi_dsub>
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	68f9      	ldr	r1, [r7, #12]
 80037b6:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80037c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80037c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80037c8:	f7fc fe86 	bl	80004d8 <__aeabi_dmul>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4620      	mov	r0, r4
 80037d2:	4629      	mov	r1, r5
 80037d4:	f7fc fcc8 	bl	8000168 <__aeabi_dsub>
 80037d8:	4602      	mov	r2, r0
 80037da:	460b      	mov	r3, r1
 80037dc:	68f9      	ldr	r1, [r7, #12]
 80037de:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80037e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80037ec:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037f0:	f7fc fe72 	bl	80004d8 <__aeabi_dmul>
 80037f4:	4602      	mov	r2, r0
 80037f6:	460b      	mov	r3, r1
 80037f8:	4620      	mov	r0, r4
 80037fa:	4629      	mov	r1, r5
 80037fc:	f7fc fcb4 	bl	8000168 <__aeabi_dsub>
 8003800:	4602      	mov	r2, r0
 8003802:	460b      	mov	r3, r1
 8003804:	68f9      	ldr	r1, [r7, #12]
 8003806:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8003810:	4610      	mov	r0, r2
 8003812:	4619      	mov	r1, r3
 8003814:	3748      	adds	r7, #72	@ 0x48
 8003816:	46bd      	mov	sp, r7
 8003818:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800381c <set_last_read_angle_data>:
unsigned long last_read_time = 0;
double last_x_angle = 0.0;
double last_y_angle = 0.0;

/* Function to update the last read angles */
void set_last_read_angle_data(unsigned long time, double x, double y, double z) {
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	e9c7 2300 	strd	r2, r3, [r7]
    last_read_time = time;
 8003828:	4a08      	ldr	r2, [pc, #32]	@ (800384c <set_last_read_angle_data+0x30>)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6013      	str	r3, [r2, #0]
    last_x_angle = x;
 800382e:	4908      	ldr	r1, [pc, #32]	@ (8003850 <set_last_read_angle_data+0x34>)
 8003830:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003834:	e9c1 2300 	strd	r2, r3, [r1]
    last_y_angle = y;
 8003838:	4906      	ldr	r1, [pc, #24]	@ (8003854 <set_last_read_angle_data+0x38>)
 800383a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800383e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003842:	bf00      	nop
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr
 800384c:	20000624 	.word	0x20000624
 8003850:	20000628 	.word	0x20000628
 8003854:	20000630 	.word	0x20000630

08003858 <MPU6050_Data>:
    return last_y_angle;
}


/* Function to handle MPU6050 sensor readings and processing */
void MPU6050_Data(I2C_HandleTypeDef *I2Cx, MPU6050_t *MPU6050, bool *vehicleFlipped) {
 8003858:	b5b0      	push	{r4, r5, r7, lr}
 800385a:	b08e      	sub	sp, #56	@ 0x38
 800385c:	af04      	add	r7, sp, #16
 800385e:	6178      	str	r0, [r7, #20]
 8003860:	6139      	str	r1, [r7, #16]
 8003862:	60fa      	str	r2, [r7, #12]
    MPU6050_Read_All(I2Cx, MPU6050);
 8003864:	6939      	ldr	r1, [r7, #16]
 8003866:	6978      	ldr	r0, [r7, #20]
 8003868:	f7ff fc9e 	bl	80031a8 <MPU6050_Read_All>
    double angle_x = MPU6050->KalmanAngleX;
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8003872:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double angle_y = MPU6050->KalmanAngleY;
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800387c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    // Update the last read angles
    set_last_read_angle_data(HAL_GetTick(), angle_x, angle_y, 0.0);
 8003880:	f000 fb9c 	bl	8003fbc <HAL_GetTick>
 8003884:	4601      	mov	r1, r0
 8003886:	f04f 0200 	mov.w	r2, #0
 800388a:	f04f 0300 	mov.w	r3, #0
 800388e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003892:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003896:	e9cd 2300 	strd	r2, r3, [sp]
 800389a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800389e:	4608      	mov	r0, r1
 80038a0:	f7ff ffbc 	bl	800381c <set_last_read_angle_data>

    // Print angle values using DEBUG_PRINT
         DEBUG_PRINT("\nAngle values\n"
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fc fdbd 	bl	8000428 <__aeabi_f2d>
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80038b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038ba:	e9cd 2300 	strd	r2, r3, [sp]
 80038be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038c2:	4816      	ldr	r0, [pc, #88]	@ (800391c <MPU6050_Data+0xc4>)
 80038c4:	f004 fcd0 	bl	8008268 <iprintf>
                     angle_x,
                     angle_y,
                     MPU6050->Temperature);

         // Detect if the vehicle has flipped (e.g., tilt > 45 degrees)
             if (fabs(angle_x) > 45.0 || fabs(angle_y) > 45.0) {
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	603b      	str	r3, [r7, #0]
 80038cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80038d2:	607b      	str	r3, [r7, #4]
 80038d4:	f04f 0200 	mov.w	r2, #0
 80038d8:	4b11      	ldr	r3, [pc, #68]	@ (8003920 <MPU6050_Data+0xc8>)
 80038da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038de:	f7fd f88b 	bl	80009f8 <__aeabi_dcmpgt>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10d      	bne.n	8003904 <MPU6050_Data+0xac>
 80038e8:	69bc      	ldr	r4, [r7, #24]
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003920 <MPU6050_Data+0xc8>)
 80038f6:	4620      	mov	r0, r4
 80038f8:	4629      	mov	r1, r5
 80038fa:	f7fd f87d 	bl	80009f8 <__aeabi_dcmpgt>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <MPU6050_Data+0xb4>
                 *vehicleFlipped = true;  // Set the global accident flag
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2201      	movs	r2, #1
 8003908:	701a      	strb	r2, [r3, #0]
 800390a:	e003      	b.n	8003914 <MPU6050_Data+0xbc>
             } else {
                 *vehicleFlipped = false;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	701a      	strb	r2, [r3, #0]
             }

   }
 8003912:	bf00      	nop
 8003914:	bf00      	nop
 8003916:	3728      	adds	r7, #40	@ 0x28
 8003918:	46bd      	mov	sp, r7
 800391a:	bdb0      	pop	{r4, r5, r7, pc}
 800391c:	0800b678 	.word	0x0800b678
 8003920:	40468000 	.word	0x40468000

08003924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800392a:	4b15      	ldr	r3, [pc, #84]	@ (8003980 <HAL_MspInit+0x5c>)
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	4a14      	ldr	r2, [pc, #80]	@ (8003980 <HAL_MspInit+0x5c>)
 8003930:	f043 0301 	orr.w	r3, r3, #1
 8003934:	6193      	str	r3, [r2, #24]
 8003936:	4b12      	ldr	r3, [pc, #72]	@ (8003980 <HAL_MspInit+0x5c>)
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	60bb      	str	r3, [r7, #8]
 8003940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003942:	4b0f      	ldr	r3, [pc, #60]	@ (8003980 <HAL_MspInit+0x5c>)
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	4a0e      	ldr	r2, [pc, #56]	@ (8003980 <HAL_MspInit+0x5c>)
 8003948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800394c:	61d3      	str	r3, [r2, #28]
 800394e:	4b0c      	ldr	r3, [pc, #48]	@ (8003980 <HAL_MspInit+0x5c>)
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003956:	607b      	str	r3, [r7, #4]
 8003958:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800395a:	4b0a      	ldr	r3, [pc, #40]	@ (8003984 <HAL_MspInit+0x60>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	4a04      	ldr	r2, [pc, #16]	@ (8003984 <HAL_MspInit+0x60>)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003976:	bf00      	nop
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	bc80      	pop	{r7}
 800397e:	4770      	bx	lr
 8003980:	40021000 	.word	0x40021000
 8003984:	40010000 	.word	0x40010000

08003988 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08a      	sub	sp, #40	@ 0x28
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003990:	f107 0314 	add.w	r3, r7, #20
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	605a      	str	r2, [r3, #4]
 800399a:	609a      	str	r2, [r3, #8]
 800399c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a29      	ldr	r2, [pc, #164]	@ (8003a48 <HAL_CAN_MspInit+0xc0>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d14b      	bne.n	8003a40 <HAL_CAN_MspInit+0xb8>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80039a8:	4b28      	ldr	r3, [pc, #160]	@ (8003a4c <HAL_CAN_MspInit+0xc4>)
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	4a27      	ldr	r2, [pc, #156]	@ (8003a4c <HAL_CAN_MspInit+0xc4>)
 80039ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80039b2:	61d3      	str	r3, [r2, #28]
 80039b4:	4b25      	ldr	r3, [pc, #148]	@ (8003a4c <HAL_CAN_MspInit+0xc4>)
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039bc:	613b      	str	r3, [r7, #16]
 80039be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039c0:	4b22      	ldr	r3, [pc, #136]	@ (8003a4c <HAL_CAN_MspInit+0xc4>)
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	4a21      	ldr	r2, [pc, #132]	@ (8003a4c <HAL_CAN_MspInit+0xc4>)
 80039c6:	f043 0308 	orr.w	r3, r3, #8
 80039ca:	6193      	str	r3, [r2, #24]
 80039cc:	4b1f      	ldr	r3, [pc, #124]	@ (8003a4c <HAL_CAN_MspInit+0xc4>)
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80039d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80039dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039de:	2300      	movs	r3, #0
 80039e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039e6:	f107 0314 	add.w	r3, r7, #20
 80039ea:	4619      	mov	r1, r3
 80039ec:	4818      	ldr	r0, [pc, #96]	@ (8003a50 <HAL_CAN_MspInit+0xc8>)
 80039ee:	f000 ff97 	bl	8004920 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80039f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80039f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f8:	2302      	movs	r3, #2
 80039fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039fc:	2303      	movs	r3, #3
 80039fe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a00:	f107 0314 	add.w	r3, r7, #20
 8003a04:	4619      	mov	r1, r3
 8003a06:	4812      	ldr	r0, [pc, #72]	@ (8003a50 <HAL_CAN_MspInit+0xc8>)
 8003a08:	f000 ff8a 	bl	8004920 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8003a0c:	4b11      	ldr	r3, [pc, #68]	@ (8003a54 <HAL_CAN_MspInit+0xcc>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a14:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8003a18:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003a20:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a28:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a54 <HAL_CAN_MspInit+0xcc>)
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003a30:	2200      	movs	r2, #0
 8003a32:	2100      	movs	r1, #0
 8003a34:	2014      	movs	r0, #20
 8003a36:	f000 feee 	bl	8004816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003a3a:	2014      	movs	r0, #20
 8003a3c:	f000 ff07 	bl	800484e <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8003a40:	bf00      	nop
 8003a42:	3728      	adds	r7, #40	@ 0x28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40006400 	.word	0x40006400
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	40010c00 	.word	0x40010c00
 8003a54:	40010000 	.word	0x40010000

08003a58 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a09      	ldr	r2, [pc, #36]	@ (8003a8c <HAL_CRC_MspInit+0x34>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d10b      	bne.n	8003a82 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003a6a:	4b09      	ldr	r3, [pc, #36]	@ (8003a90 <HAL_CRC_MspInit+0x38>)
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	4a08      	ldr	r2, [pc, #32]	@ (8003a90 <HAL_CRC_MspInit+0x38>)
 8003a70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a74:	6153      	str	r3, [r2, #20]
 8003a76:	4b06      	ldr	r3, [pc, #24]	@ (8003a90 <HAL_CRC_MspInit+0x38>)
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8003a82:	bf00      	nop
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bc80      	pop	{r7}
 8003a8a:	4770      	bx	lr
 8003a8c:	40023000 	.word	0x40023000
 8003a90:	40021000 	.word	0x40021000

08003a94 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b088      	sub	sp, #32
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a9c:	f107 0310 	add.w	r3, r7, #16
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	605a      	str	r2, [r3, #4]
 8003aa6:	609a      	str	r2, [r3, #8]
 8003aa8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a15      	ldr	r2, [pc, #84]	@ (8003b04 <HAL_I2C_MspInit+0x70>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d123      	bne.n	8003afc <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ab4:	4b14      	ldr	r3, [pc, #80]	@ (8003b08 <HAL_I2C_MspInit+0x74>)
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	4a13      	ldr	r2, [pc, #76]	@ (8003b08 <HAL_I2C_MspInit+0x74>)
 8003aba:	f043 0308 	orr.w	r3, r3, #8
 8003abe:	6193      	str	r3, [r2, #24]
 8003ac0:	4b11      	ldr	r3, [pc, #68]	@ (8003b08 <HAL_I2C_MspInit+0x74>)
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003acc:	23c0      	movs	r3, #192	@ 0xc0
 8003ace:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ad0:	2312      	movs	r3, #18
 8003ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ad8:	f107 0310 	add.w	r3, r7, #16
 8003adc:	4619      	mov	r1, r3
 8003ade:	480b      	ldr	r0, [pc, #44]	@ (8003b0c <HAL_I2C_MspInit+0x78>)
 8003ae0:	f000 ff1e 	bl	8004920 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ae4:	4b08      	ldr	r3, [pc, #32]	@ (8003b08 <HAL_I2C_MspInit+0x74>)
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	4a07      	ldr	r2, [pc, #28]	@ (8003b08 <HAL_I2C_MspInit+0x74>)
 8003aea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003aee:	61d3      	str	r3, [r2, #28]
 8003af0:	4b05      	ldr	r3, [pc, #20]	@ (8003b08 <HAL_I2C_MspInit+0x74>)
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003af8:	60bb      	str	r3, [r7, #8]
 8003afa:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003afc:	bf00      	nop
 8003afe:	3720      	adds	r7, #32
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40005400 	.word	0x40005400
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	40010c00 	.word	0x40010c00

08003b10 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b088      	sub	sp, #32
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b18:	f107 0310 	add.w	r3, r7, #16
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	605a      	str	r2, [r3, #4]
 8003b22:	609a      	str	r2, [r3, #8]
 8003b24:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a1b      	ldr	r2, [pc, #108]	@ (8003b98 <HAL_SPI_MspInit+0x88>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d12f      	bne.n	8003b90 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b30:	4b1a      	ldr	r3, [pc, #104]	@ (8003b9c <HAL_SPI_MspInit+0x8c>)
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	4a19      	ldr	r2, [pc, #100]	@ (8003b9c <HAL_SPI_MspInit+0x8c>)
 8003b36:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b3a:	6193      	str	r3, [r2, #24]
 8003b3c:	4b17      	ldr	r3, [pc, #92]	@ (8003b9c <HAL_SPI_MspInit+0x8c>)
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b44:	60fb      	str	r3, [r7, #12]
 8003b46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b48:	4b14      	ldr	r3, [pc, #80]	@ (8003b9c <HAL_SPI_MspInit+0x8c>)
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	4a13      	ldr	r2, [pc, #76]	@ (8003b9c <HAL_SPI_MspInit+0x8c>)
 8003b4e:	f043 0304 	orr.w	r3, r3, #4
 8003b52:	6193      	str	r3, [r2, #24]
 8003b54:	4b11      	ldr	r3, [pc, #68]	@ (8003b9c <HAL_SPI_MspInit+0x8c>)
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	60bb      	str	r3, [r7, #8]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LORA_NSS_Pin|LORA_SCK_Pin|LORA_MOSI_Pin;
 8003b60:	23b0      	movs	r3, #176	@ 0xb0
 8003b62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b64:	2302      	movs	r3, #2
 8003b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b6c:	f107 0310 	add.w	r3, r7, #16
 8003b70:	4619      	mov	r1, r3
 8003b72:	480b      	ldr	r0, [pc, #44]	@ (8003ba0 <HAL_SPI_MspInit+0x90>)
 8003b74:	f000 fed4 	bl	8004920 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LORA_MISO_Pin;
 8003b78:	2340      	movs	r3, #64	@ 0x40
 8003b7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b80:	2300      	movs	r3, #0
 8003b82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LORA_MISO_GPIO_Port, &GPIO_InitStruct);
 8003b84:	f107 0310 	add.w	r3, r7, #16
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4805      	ldr	r0, [pc, #20]	@ (8003ba0 <HAL_SPI_MspInit+0x90>)
 8003b8c:	f000 fec8 	bl	8004920 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003b90:	bf00      	nop
 8003b92:	3720      	adds	r7, #32
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40013000 	.word	0x40013000
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	40010800 	.word	0x40010800

08003ba4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08a      	sub	sp, #40	@ 0x28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bac:	f107 0318 	add.w	r3, r7, #24
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	605a      	str	r2, [r3, #4]
 8003bb6:	609a      	str	r2, [r3, #8]
 8003bb8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a38      	ldr	r2, [pc, #224]	@ (8003ca0 <HAL_UART_MspInit+0xfc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d132      	bne.n	8003c2a <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bc4:	4b37      	ldr	r3, [pc, #220]	@ (8003ca4 <HAL_UART_MspInit+0x100>)
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	4a36      	ldr	r2, [pc, #216]	@ (8003ca4 <HAL_UART_MspInit+0x100>)
 8003bca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bce:	6193      	str	r3, [r2, #24]
 8003bd0:	4b34      	ldr	r3, [pc, #208]	@ (8003ca4 <HAL_UART_MspInit+0x100>)
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bd8:	617b      	str	r3, [r7, #20]
 8003bda:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bdc:	4b31      	ldr	r3, [pc, #196]	@ (8003ca4 <HAL_UART_MspInit+0x100>)
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	4a30      	ldr	r2, [pc, #192]	@ (8003ca4 <HAL_UART_MspInit+0x100>)
 8003be2:	f043 0304 	orr.w	r3, r3, #4
 8003be6:	6193      	str	r3, [r2, #24]
 8003be8:	4b2e      	ldr	r3, [pc, #184]	@ (8003ca4 <HAL_UART_MspInit+0x100>)
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	613b      	str	r3, [r7, #16]
 8003bf2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_12;
 8003bf4:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8003bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c02:	f107 0318 	add.w	r3, r7, #24
 8003c06:	4619      	mov	r1, r3
 8003c08:	4827      	ldr	r0, [pc, #156]	@ (8003ca8 <HAL_UART_MspInit+0x104>)
 8003c0a:	f000 fe89 	bl	8004920 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003c0e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c14:	2300      	movs	r3, #0
 8003c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c1c:	f107 0318 	add.w	r3, r7, #24
 8003c20:	4619      	mov	r1, r3
 8003c22:	4821      	ldr	r0, [pc, #132]	@ (8003ca8 <HAL_UART_MspInit+0x104>)
 8003c24:	f000 fe7c 	bl	8004920 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8003c28:	e036      	b.n	8003c98 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a1f      	ldr	r2, [pc, #124]	@ (8003cac <HAL_UART_MspInit+0x108>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d131      	bne.n	8003c98 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003c34:	4b1b      	ldr	r3, [pc, #108]	@ (8003ca4 <HAL_UART_MspInit+0x100>)
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	4a1a      	ldr	r2, [pc, #104]	@ (8003ca4 <HAL_UART_MspInit+0x100>)
 8003c3a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c3e:	61d3      	str	r3, [r2, #28]
 8003c40:	4b18      	ldr	r3, [pc, #96]	@ (8003ca4 <HAL_UART_MspInit+0x100>)
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c4c:	4b15      	ldr	r3, [pc, #84]	@ (8003ca4 <HAL_UART_MspInit+0x100>)
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	4a14      	ldr	r2, [pc, #80]	@ (8003ca4 <HAL_UART_MspInit+0x100>)
 8003c52:	f043 0308 	orr.w	r3, r3, #8
 8003c56:	6193      	str	r3, [r2, #24]
 8003c58:	4b12      	ldr	r3, [pc, #72]	@ (8003ca4 <HAL_UART_MspInit+0x100>)
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	f003 0308 	and.w	r3, r3, #8
 8003c60:	60bb      	str	r3, [r7, #8]
 8003c62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LCD_TX_Pin;
 8003c64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(LCD_TX_GPIO_Port, &GPIO_InitStruct);
 8003c72:	f107 0318 	add.w	r3, r7, #24
 8003c76:	4619      	mov	r1, r3
 8003c78:	480d      	ldr	r0, [pc, #52]	@ (8003cb0 <HAL_UART_MspInit+0x10c>)
 8003c7a:	f000 fe51 	bl	8004920 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_RX_Pin;
 8003c7e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003c82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c84:	2300      	movs	r3, #0
 8003c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LCD_RX_GPIO_Port, &GPIO_InitStruct);
 8003c8c:	f107 0318 	add.w	r3, r7, #24
 8003c90:	4619      	mov	r1, r3
 8003c92:	4807      	ldr	r0, [pc, #28]	@ (8003cb0 <HAL_UART_MspInit+0x10c>)
 8003c94:	f000 fe44 	bl	8004920 <HAL_GPIO_Init>
}
 8003c98:	bf00      	nop
 8003c9a:	3728      	adds	r7, #40	@ 0x28
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40013800 	.word	0x40013800
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	40010800 	.word	0x40010800
 8003cac:	40004800 	.word	0x40004800
 8003cb0:	40010c00 	.word	0x40010c00

08003cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003cb8:	bf00      	nop
 8003cba:	e7fd      	b.n	8003cb8 <NMI_Handler+0x4>

08003cbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cc0:	bf00      	nop
 8003cc2:	e7fd      	b.n	8003cc0 <HardFault_Handler+0x4>

08003cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cc8:	bf00      	nop
 8003cca:	e7fd      	b.n	8003cc8 <MemManage_Handler+0x4>

08003ccc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cd0:	bf00      	nop
 8003cd2:	e7fd      	b.n	8003cd0 <BusFault_Handler+0x4>

08003cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cd8:	bf00      	nop
 8003cda:	e7fd      	b.n	8003cd8 <UsageFault_Handler+0x4>

08003cdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ce0:	bf00      	nop
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	4770      	bx	lr

08003ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cec:	bf00      	nop
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bc80      	pop	{r7}
 8003cf2:	4770      	bx	lr

08003cf4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cf8:	bf00      	nop
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr

08003d00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d04:	f000 f948 	bl	8003f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d08:	bf00      	nop
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LORA_INT_Pin);
 8003d10:	2001      	movs	r0, #1
 8003d12:	f000 ffa1 	bl	8004c58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003d16:	bf00      	nop
 8003d18:	bd80      	pop	{r7, pc}
	...

08003d1c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003d20:	4802      	ldr	r0, [pc, #8]	@ (8003d2c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003d22:	f000 fa74 	bl	800420e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003d26:	bf00      	nop
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	20000428 	.word	0x20000428

08003d30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  return 1;
 8003d34:	2301      	movs	r3, #1
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bc80      	pop	{r7}
 8003d3c:	4770      	bx	lr

08003d3e <_kill>:

int _kill(int pid, int sig)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b082      	sub	sp, #8
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
 8003d46:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d48:	f004 fd0a 	bl	8008760 <__errno>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2216      	movs	r2, #22
 8003d50:	601a      	str	r2, [r3, #0]
  return -1;
 8003d52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <_exit>:

void _exit (int status)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b082      	sub	sp, #8
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d66:	f04f 31ff 	mov.w	r1, #4294967295
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7ff ffe7 	bl	8003d3e <_kill>
  while (1) {}    /* Make sure we hang here */
 8003d70:	bf00      	nop
 8003d72:	e7fd      	b.n	8003d70 <_exit+0x12>

08003d74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d80:	2300      	movs	r3, #0
 8003d82:	617b      	str	r3, [r7, #20]
 8003d84:	e00a      	b.n	8003d9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d86:	f3af 8000 	nop.w
 8003d8a:	4601      	mov	r1, r0
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	60ba      	str	r2, [r7, #8]
 8003d92:	b2ca      	uxtb	r2, r1
 8003d94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	dbf0      	blt.n	8003d86 <_read+0x12>
  }

  return len;
 8003da4:	687b      	ldr	r3, [r7, #4]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b086      	sub	sp, #24
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	60f8      	str	r0, [r7, #12]
 8003db6:	60b9      	str	r1, [r7, #8]
 8003db8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]
 8003dbe:	e009      	b.n	8003dd4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	60ba      	str	r2, [r7, #8]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	dbf1      	blt.n	8003dc0 <_write+0x12>
  }
  return len;
 8003ddc:	687b      	ldr	r3, [r7, #4]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <_close>:

int _close(int file)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003dee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bc80      	pop	{r7}
 8003dfa:	4770      	bx	lr

08003dfc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e0c:	605a      	str	r2, [r3, #4]
  return 0;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bc80      	pop	{r7}
 8003e18:	4770      	bx	lr

08003e1a <_isatty>:

int _isatty(int file)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e22:	2301      	movs	r3, #1
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bc80      	pop	{r7}
 8003e2c:	4770      	bx	lr

08003e2e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b085      	sub	sp, #20
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	60f8      	str	r0, [r7, #12]
 8003e36:	60b9      	str	r1, [r7, #8]
 8003e38:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3714      	adds	r7, #20
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr
	...

08003e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e50:	4a14      	ldr	r2, [pc, #80]	@ (8003ea4 <_sbrk+0x5c>)
 8003e52:	4b15      	ldr	r3, [pc, #84]	@ (8003ea8 <_sbrk+0x60>)
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e5c:	4b13      	ldr	r3, [pc, #76]	@ (8003eac <_sbrk+0x64>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d102      	bne.n	8003e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e64:	4b11      	ldr	r3, [pc, #68]	@ (8003eac <_sbrk+0x64>)
 8003e66:	4a12      	ldr	r2, [pc, #72]	@ (8003eb0 <_sbrk+0x68>)
 8003e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e6a:	4b10      	ldr	r3, [pc, #64]	@ (8003eac <_sbrk+0x64>)
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4413      	add	r3, r2
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d207      	bcs.n	8003e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e78:	f004 fc72 	bl	8008760 <__errno>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	220c      	movs	r2, #12
 8003e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e82:	f04f 33ff 	mov.w	r3, #4294967295
 8003e86:	e009      	b.n	8003e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e88:	4b08      	ldr	r3, [pc, #32]	@ (8003eac <_sbrk+0x64>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e8e:	4b07      	ldr	r3, [pc, #28]	@ (8003eac <_sbrk+0x64>)
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4413      	add	r3, r2
 8003e96:	4a05      	ldr	r2, [pc, #20]	@ (8003eac <_sbrk+0x64>)
 8003e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3718      	adds	r7, #24
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	20005000 	.word	0x20005000
 8003ea8:	00000400 	.word	0x00000400
 8003eac:	20000638 	.word	0x20000638
 8003eb0:	20000790 	.word	0x20000790

08003eb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003eb8:	bf00      	nop
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bc80      	pop	{r7}
 8003ebe:	4770      	bx	lr

08003ec0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003ec0:	f7ff fff8 	bl	8003eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ec4:	480b      	ldr	r0, [pc, #44]	@ (8003ef4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003ec6:	490c      	ldr	r1, [pc, #48]	@ (8003ef8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003ec8:	4a0c      	ldr	r2, [pc, #48]	@ (8003efc <LoopFillZerobss+0x16>)
  movs r3, #0
 8003eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ecc:	e002      	b.n	8003ed4 <LoopCopyDataInit>

08003ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ed2:	3304      	adds	r3, #4

08003ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ed8:	d3f9      	bcc.n	8003ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003eda:	4a09      	ldr	r2, [pc, #36]	@ (8003f00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003edc:	4c09      	ldr	r4, [pc, #36]	@ (8003f04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ee0:	e001      	b.n	8003ee6 <LoopFillZerobss>

08003ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ee4:	3204      	adds	r2, #4

08003ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ee8:	d3fb      	bcc.n	8003ee2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003eea:	f004 fc3f 	bl	800876c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003eee:	f7fe fe89 	bl	8002c04 <main>
  bx lr
 8003ef2:	4770      	bx	lr
  ldr r0, =_sdata
 8003ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ef8:	2000027c 	.word	0x2000027c
  ldr r2, =_sidata
 8003efc:	0800bb38 	.word	0x0800bb38
  ldr r2, =_sbss
 8003f00:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 8003f04:	2000078c 	.word	0x2000078c

08003f08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003f08:	e7fe      	b.n	8003f08 <ADC1_2_IRQHandler>
	...

08003f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f10:	4b08      	ldr	r3, [pc, #32]	@ (8003f34 <HAL_Init+0x28>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a07      	ldr	r2, [pc, #28]	@ (8003f34 <HAL_Init+0x28>)
 8003f16:	f043 0310 	orr.w	r3, r3, #16
 8003f1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f1c:	2003      	movs	r0, #3
 8003f1e:	f000 fc6f 	bl	8004800 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f22:	200f      	movs	r0, #15
 8003f24:	f000 f808 	bl	8003f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f28:	f7ff fcfc 	bl	8003924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40022000 	.word	0x40022000

08003f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f40:	4b12      	ldr	r3, [pc, #72]	@ (8003f8c <HAL_InitTick+0x54>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4b12      	ldr	r3, [pc, #72]	@ (8003f90 <HAL_InitTick+0x58>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	4619      	mov	r1, r3
 8003f4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 fc87 	bl	800486a <HAL_SYSTICK_Config>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e00e      	b.n	8003f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b0f      	cmp	r3, #15
 8003f6a:	d80a      	bhi.n	8003f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	f04f 30ff 	mov.w	r0, #4294967295
 8003f74:	f000 fc4f 	bl	8004816 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f78:	4a06      	ldr	r2, [pc, #24]	@ (8003f94 <HAL_InitTick+0x5c>)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	e000      	b.n	8003f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	200000a8 	.word	0x200000a8
 8003f90:	200000b0 	.word	0x200000b0
 8003f94:	200000ac 	.word	0x200000ac

08003f98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f9c:	4b05      	ldr	r3, [pc, #20]	@ (8003fb4 <HAL_IncTick+0x1c>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	4b05      	ldr	r3, [pc, #20]	@ (8003fb8 <HAL_IncTick+0x20>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	4a03      	ldr	r2, [pc, #12]	@ (8003fb8 <HAL_IncTick+0x20>)
 8003faa:	6013      	str	r3, [r2, #0]
}
 8003fac:	bf00      	nop
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr
 8003fb4:	200000b0 	.word	0x200000b0
 8003fb8:	2000063c 	.word	0x2000063c

08003fbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8003fc0:	4b02      	ldr	r3, [pc, #8]	@ (8003fcc <HAL_GetTick+0x10>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bc80      	pop	{r7}
 8003fca:	4770      	bx	lr
 8003fcc:	2000063c 	.word	0x2000063c

08003fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fd8:	f7ff fff0 	bl	8003fbc <HAL_GetTick>
 8003fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe8:	d005      	beq.n	8003ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fea:	4b0a      	ldr	r3, [pc, #40]	@ (8004014 <HAL_Delay+0x44>)
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ff6:	bf00      	nop
 8003ff8:	f7ff ffe0 	bl	8003fbc <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	429a      	cmp	r2, r3
 8004006:	d8f7      	bhi.n	8003ff8 <HAL_Delay+0x28>
  {
  }
}
 8004008:	bf00      	nop
 800400a:	bf00      	nop
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	200000b0 	.word	0x200000b0

08004018 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e0ed      	b.n	8004206 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d102      	bne.n	800403c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7ff fca6 	bl	8003988 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0201 	orr.w	r2, r2, #1
 800404a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800404c:	f7ff ffb6 	bl	8003fbc <HAL_GetTick>
 8004050:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004052:	e012      	b.n	800407a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004054:	f7ff ffb2 	bl	8003fbc <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b0a      	cmp	r3, #10
 8004060:	d90b      	bls.n	800407a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004066:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2205      	movs	r2, #5
 8004072:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e0c5      	b.n	8004206 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0e5      	beq.n	8004054 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0202 	bic.w	r2, r2, #2
 8004096:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004098:	f7ff ff90 	bl	8003fbc <HAL_GetTick>
 800409c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800409e:	e012      	b.n	80040c6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80040a0:	f7ff ff8c 	bl	8003fbc <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b0a      	cmp	r3, #10
 80040ac:	d90b      	bls.n	80040c6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2205      	movs	r2, #5
 80040be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e09f      	b.n	8004206 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e5      	bne.n	80040a0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	7e1b      	ldrb	r3, [r3, #24]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d108      	bne.n	80040ee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	e007      	b.n	80040fe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	7e5b      	ldrb	r3, [r3, #25]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d108      	bne.n	8004118 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	e007      	b.n	8004128 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004126:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	7e9b      	ldrb	r3, [r3, #26]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d108      	bne.n	8004142 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f042 0220 	orr.w	r2, r2, #32
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	e007      	b.n	8004152 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0220 	bic.w	r2, r2, #32
 8004150:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	7edb      	ldrb	r3, [r3, #27]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d108      	bne.n	800416c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0210 	bic.w	r2, r2, #16
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	e007      	b.n	800417c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0210 	orr.w	r2, r2, #16
 800417a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	7f1b      	ldrb	r3, [r3, #28]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d108      	bne.n	8004196 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0208 	orr.w	r2, r2, #8
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	e007      	b.n	80041a6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0208 	bic.w	r2, r2, #8
 80041a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	7f5b      	ldrb	r3, [r3, #29]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d108      	bne.n	80041c0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f042 0204 	orr.w	r2, r2, #4
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	e007      	b.n	80041d0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0204 	bic.w	r2, r2, #4
 80041ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	ea42 0103 	orr.w	r1, r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	1e5a      	subs	r2, r3, #1
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b08a      	sub	sp, #40	@ 0x28
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004216:	2300      	movs	r3, #0
 8004218:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800424a:	6a3b      	ldr	r3, [r7, #32]
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	d07c      	beq.n	800434e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d023      	beq.n	80042a6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2201      	movs	r2, #1
 8004264:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f983 	bl	800457c <HAL_CAN_TxMailbox0CompleteCallback>
 8004276:	e016      	b.n	80042a6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	2b00      	cmp	r3, #0
 8004280:	d004      	beq.n	800428c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004284:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004288:	627b      	str	r3, [r7, #36]	@ 0x24
 800428a:	e00c      	b.n	80042a6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d004      	beq.n	80042a0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004298:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800429c:	627b      	str	r3, [r7, #36]	@ 0x24
 800429e:	e002      	b.n	80042a6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f986 	bl	80045b2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d024      	beq.n	80042fa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80042b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d003      	beq.n	80042cc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 f962 	bl	800458e <HAL_CAN_TxMailbox1CompleteCallback>
 80042ca:	e016      	b.n	80042fa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d004      	beq.n	80042e0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80042d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80042dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80042de:	e00c      	b.n	80042fa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d004      	beq.n	80042f4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80042ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80042f2:	e002      	b.n	80042fa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 f965 	bl	80045c4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d024      	beq.n	800434e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800430c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d003      	beq.n	8004320 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 f941 	bl	80045a0 <HAL_CAN_TxMailbox2CompleteCallback>
 800431e:	e016      	b.n	800434e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d004      	beq.n	8004334 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800432a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004330:	627b      	str	r3, [r7, #36]	@ 0x24
 8004332:	e00c      	b.n	800434e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d004      	beq.n	8004348 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800433e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004340:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004344:	627b      	str	r3, [r7, #36]	@ 0x24
 8004346:	e002      	b.n	800434e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f944 	bl	80045d6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	f003 0308 	and.w	r3, r3, #8
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00c      	beq.n	8004372 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	f003 0310 	and.w	r3, r3, #16
 800435e:	2b00      	cmp	r3, #0
 8004360:	d007      	beq.n	8004372 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004364:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004368:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2210      	movs	r2, #16
 8004370:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00b      	beq.n	8004394 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b00      	cmp	r3, #0
 8004384:	d006      	beq.n	8004394 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2208      	movs	r2, #8
 800438c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f933 	bl	80045fa <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d009      	beq.n	80043b2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f003 0303 	and.w	r3, r3, #3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f91b 	bl	80045e8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00c      	beq.n	80043d6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f003 0310 	and.w	r3, r3, #16
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d007      	beq.n	80043d6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80043c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80043cc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2210      	movs	r2, #16
 80043d4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80043d6:	6a3b      	ldr	r3, [r7, #32]
 80043d8:	f003 0320 	and.w	r3, r3, #32
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00b      	beq.n	80043f8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f003 0308 	and.w	r3, r3, #8
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d006      	beq.n	80043f8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2208      	movs	r2, #8
 80043f0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f913 	bl	800461e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	f003 0310 	and.w	r3, r3, #16
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d009      	beq.n	8004416 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	f003 0303 	and.w	r3, r3, #3
 800440c:	2b00      	cmp	r3, #0
 800440e:	d002      	beq.n	8004416 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f8fb 	bl	800460c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00b      	beq.n	8004438 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f003 0310 	and.w	r3, r3, #16
 8004426:	2b00      	cmp	r3, #0
 8004428:	d006      	beq.n	8004438 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2210      	movs	r2, #16
 8004430:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f8fc 	bl	8004630 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00b      	beq.n	800445a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	f003 0308 	and.w	r3, r3, #8
 8004448:	2b00      	cmp	r3, #0
 800444a:	d006      	beq.n	800445a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2208      	movs	r2, #8
 8004452:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 f8f4 	bl	8004642 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d07b      	beq.n	800455c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	f003 0304 	and.w	r3, r3, #4
 800446a:	2b00      	cmp	r3, #0
 800446c:	d072      	beq.n	8004554 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004474:	2b00      	cmp	r3, #0
 8004476:	d008      	beq.n	800448a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004484:	f043 0301 	orr.w	r3, r3, #1
 8004488:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800448a:	6a3b      	ldr	r3, [r7, #32]
 800448c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004490:	2b00      	cmp	r3, #0
 8004492:	d008      	beq.n	80044a6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800449e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a0:	f043 0302 	orr.w	r3, r3, #2
 80044a4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80044a6:	6a3b      	ldr	r3, [r7, #32]
 80044a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d008      	beq.n	80044c2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80044ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044bc:	f043 0304 	orr.w	r3, r3, #4
 80044c0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80044c2:	6a3b      	ldr	r3, [r7, #32]
 80044c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d043      	beq.n	8004554 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d03e      	beq.n	8004554 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044dc:	2b60      	cmp	r3, #96	@ 0x60
 80044de:	d02b      	beq.n	8004538 <HAL_CAN_IRQHandler+0x32a>
 80044e0:	2b60      	cmp	r3, #96	@ 0x60
 80044e2:	d82e      	bhi.n	8004542 <HAL_CAN_IRQHandler+0x334>
 80044e4:	2b50      	cmp	r3, #80	@ 0x50
 80044e6:	d022      	beq.n	800452e <HAL_CAN_IRQHandler+0x320>
 80044e8:	2b50      	cmp	r3, #80	@ 0x50
 80044ea:	d82a      	bhi.n	8004542 <HAL_CAN_IRQHandler+0x334>
 80044ec:	2b40      	cmp	r3, #64	@ 0x40
 80044ee:	d019      	beq.n	8004524 <HAL_CAN_IRQHandler+0x316>
 80044f0:	2b40      	cmp	r3, #64	@ 0x40
 80044f2:	d826      	bhi.n	8004542 <HAL_CAN_IRQHandler+0x334>
 80044f4:	2b30      	cmp	r3, #48	@ 0x30
 80044f6:	d010      	beq.n	800451a <HAL_CAN_IRQHandler+0x30c>
 80044f8:	2b30      	cmp	r3, #48	@ 0x30
 80044fa:	d822      	bhi.n	8004542 <HAL_CAN_IRQHandler+0x334>
 80044fc:	2b10      	cmp	r3, #16
 80044fe:	d002      	beq.n	8004506 <HAL_CAN_IRQHandler+0x2f8>
 8004500:	2b20      	cmp	r3, #32
 8004502:	d005      	beq.n	8004510 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004504:	e01d      	b.n	8004542 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004508:	f043 0308 	orr.w	r3, r3, #8
 800450c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800450e:	e019      	b.n	8004544 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004512:	f043 0310 	orr.w	r3, r3, #16
 8004516:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004518:	e014      	b.n	8004544 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800451a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451c:	f043 0320 	orr.w	r3, r3, #32
 8004520:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004522:	e00f      	b.n	8004544 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004526:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800452a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800452c:	e00a      	b.n	8004544 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800452e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004534:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004536:	e005      	b.n	8004544 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800453e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004540:	e000      	b.n	8004544 <HAL_CAN_IRQHandler+0x336>
            break;
 8004542:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	699a      	ldr	r2, [r3, #24]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004552:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2204      	movs	r2, #4
 800455a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800455c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455e:	2b00      	cmp	r3, #0
 8004560:	d008      	beq.n	8004574 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f870 	bl	8004654 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004574:	bf00      	nop
 8004576:	3728      	adds	r7, #40	@ 0x28
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	bc80      	pop	{r7}
 800458c:	4770      	bx	lr

0800458e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800458e:	b480      	push	{r7}
 8004590:	b083      	sub	sp, #12
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004596:	bf00      	nop
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	bc80      	pop	{r7}
 800459e:	4770      	bx	lr

080045a0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bc80      	pop	{r7}
 80045b0:	4770      	bx	lr

080045b2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b083      	sub	sp, #12
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	bc80      	pop	{r7}
 80045c2:	4770      	bx	lr

080045c4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bc80      	pop	{r7}
 80045d4:	4770      	bx	lr

080045d6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b083      	sub	sp, #12
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bc80      	pop	{r7}
 80045e6:	4770      	bx	lr

080045e8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bc80      	pop	{r7}
 80045f8:	4770      	bx	lr

080045fa <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b083      	sub	sp, #12
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr

0800460c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	bc80      	pop	{r7}
 800461c:	4770      	bx	lr

0800461e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800461e:	b480      	push	{r7}
 8004620:	b083      	sub	sp, #12
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	bc80      	pop	{r7}
 800462e:	4770      	bx	lr

08004630 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	bc80      	pop	{r7}
 8004640:	4770      	bx	lr

08004642 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004642:	b480      	push	{r7}
 8004644:	b083      	sub	sp, #12
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800464a:	bf00      	nop
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr

08004654 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	bc80      	pop	{r7}
 8004664:	4770      	bx	lr
	...

08004668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004678:	4b0c      	ldr	r3, [pc, #48]	@ (80046ac <__NVIC_SetPriorityGrouping+0x44>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004684:	4013      	ands	r3, r2
 8004686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004690:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004694:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800469a:	4a04      	ldr	r2, [pc, #16]	@ (80046ac <__NVIC_SetPriorityGrouping+0x44>)
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	60d3      	str	r3, [r2, #12]
}
 80046a0:	bf00      	nop
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	e000ed00 	.word	0xe000ed00

080046b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046b4:	4b04      	ldr	r3, [pc, #16]	@ (80046c8 <__NVIC_GetPriorityGrouping+0x18>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	0a1b      	lsrs	r3, r3, #8
 80046ba:	f003 0307 	and.w	r3, r3, #7
}
 80046be:	4618      	mov	r0, r3
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bc80      	pop	{r7}
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	e000ed00 	.word	0xe000ed00

080046cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	4603      	mov	r3, r0
 80046d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	db0b      	blt.n	80046f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046de:	79fb      	ldrb	r3, [r7, #7]
 80046e0:	f003 021f 	and.w	r2, r3, #31
 80046e4:	4906      	ldr	r1, [pc, #24]	@ (8004700 <__NVIC_EnableIRQ+0x34>)
 80046e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	2001      	movs	r0, #1
 80046ee:	fa00 f202 	lsl.w	r2, r0, r2
 80046f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bc80      	pop	{r7}
 80046fe:	4770      	bx	lr
 8004700:	e000e100 	.word	0xe000e100

08004704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	4603      	mov	r3, r0
 800470c:	6039      	str	r1, [r7, #0]
 800470e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004714:	2b00      	cmp	r3, #0
 8004716:	db0a      	blt.n	800472e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	b2da      	uxtb	r2, r3
 800471c:	490c      	ldr	r1, [pc, #48]	@ (8004750 <__NVIC_SetPriority+0x4c>)
 800471e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004722:	0112      	lsls	r2, r2, #4
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	440b      	add	r3, r1
 8004728:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800472c:	e00a      	b.n	8004744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	b2da      	uxtb	r2, r3
 8004732:	4908      	ldr	r1, [pc, #32]	@ (8004754 <__NVIC_SetPriority+0x50>)
 8004734:	79fb      	ldrb	r3, [r7, #7]
 8004736:	f003 030f 	and.w	r3, r3, #15
 800473a:	3b04      	subs	r3, #4
 800473c:	0112      	lsls	r2, r2, #4
 800473e:	b2d2      	uxtb	r2, r2
 8004740:	440b      	add	r3, r1
 8004742:	761a      	strb	r2, [r3, #24]
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	bc80      	pop	{r7}
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	e000e100 	.word	0xe000e100
 8004754:	e000ed00 	.word	0xe000ed00

08004758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004758:	b480      	push	{r7}
 800475a:	b089      	sub	sp, #36	@ 0x24
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	f1c3 0307 	rsb	r3, r3, #7
 8004772:	2b04      	cmp	r3, #4
 8004774:	bf28      	it	cs
 8004776:	2304      	movcs	r3, #4
 8004778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	3304      	adds	r3, #4
 800477e:	2b06      	cmp	r3, #6
 8004780:	d902      	bls.n	8004788 <NVIC_EncodePriority+0x30>
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	3b03      	subs	r3, #3
 8004786:	e000      	b.n	800478a <NVIC_EncodePriority+0x32>
 8004788:	2300      	movs	r3, #0
 800478a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800478c:	f04f 32ff 	mov.w	r2, #4294967295
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	43da      	mvns	r2, r3
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	401a      	ands	r2, r3
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047a0:	f04f 31ff 	mov.w	r1, #4294967295
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	fa01 f303 	lsl.w	r3, r1, r3
 80047aa:	43d9      	mvns	r1, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047b0:	4313      	orrs	r3, r2
         );
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3724      	adds	r7, #36	@ 0x24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bc80      	pop	{r7}
 80047ba:	4770      	bx	lr

080047bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3b01      	subs	r3, #1
 80047c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047cc:	d301      	bcc.n	80047d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047ce:	2301      	movs	r3, #1
 80047d0:	e00f      	b.n	80047f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047d2:	4a0a      	ldr	r2, [pc, #40]	@ (80047fc <SysTick_Config+0x40>)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047da:	210f      	movs	r1, #15
 80047dc:	f04f 30ff 	mov.w	r0, #4294967295
 80047e0:	f7ff ff90 	bl	8004704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047e4:	4b05      	ldr	r3, [pc, #20]	@ (80047fc <SysTick_Config+0x40>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047ea:	4b04      	ldr	r3, [pc, #16]	@ (80047fc <SysTick_Config+0x40>)
 80047ec:	2207      	movs	r2, #7
 80047ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	e000e010 	.word	0xe000e010

08004800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f7ff ff2d 	bl	8004668 <__NVIC_SetPriorityGrouping>
}
 800480e:	bf00      	nop
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004816:	b580      	push	{r7, lr}
 8004818:	b086      	sub	sp, #24
 800481a:	af00      	add	r7, sp, #0
 800481c:	4603      	mov	r3, r0
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	607a      	str	r2, [r7, #4]
 8004822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004824:	2300      	movs	r3, #0
 8004826:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004828:	f7ff ff42 	bl	80046b0 <__NVIC_GetPriorityGrouping>
 800482c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	68b9      	ldr	r1, [r7, #8]
 8004832:	6978      	ldr	r0, [r7, #20]
 8004834:	f7ff ff90 	bl	8004758 <NVIC_EncodePriority>
 8004838:	4602      	mov	r2, r0
 800483a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800483e:	4611      	mov	r1, r2
 8004840:	4618      	mov	r0, r3
 8004842:	f7ff ff5f 	bl	8004704 <__NVIC_SetPriority>
}
 8004846:	bf00      	nop
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b082      	sub	sp, #8
 8004852:	af00      	add	r7, sp, #0
 8004854:	4603      	mov	r3, r0
 8004856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800485c:	4618      	mov	r0, r3
 800485e:	f7ff ff35 	bl	80046cc <__NVIC_EnableIRQ>
}
 8004862:	bf00      	nop
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b082      	sub	sp, #8
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7ff ffa2 	bl	80047bc <SysTick_Config>
 8004878:	4603      	mov	r3, r0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b082      	sub	sp, #8
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e00e      	b.n	80048b2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	795b      	ldrb	r3, [r3, #5]
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d105      	bne.n	80048aa <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7ff f8d7 	bl	8003a58 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b087      	sub	sp, #28
 80048be:	af00      	add	r7, sp, #0
 80048c0:	60f8      	str	r0, [r7, #12]
 80048c2:	60b9      	str	r1, [r7, #8]
 80048c4:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80048c6:	2300      	movs	r3, #0
 80048c8:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2202      	movs	r2, #2
 80048ce:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0201 	orr.w	r2, r2, #1
 80048de:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80048e0:	2300      	movs	r3, #0
 80048e2:	617b      	str	r3, [r7, #20]
 80048e4:	e00a      	b.n	80048fc <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	441a      	add	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6812      	ldr	r2, [r2, #0]
 80048f4:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	3301      	adds	r3, #1
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	429a      	cmp	r2, r3
 8004902:	d3f0      	bcc.n	80048e6 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2201      	movs	r2, #1
 8004910:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8004912:	693b      	ldr	r3, [r7, #16]
}
 8004914:	4618      	mov	r0, r3
 8004916:	371c      	adds	r7, #28
 8004918:	46bd      	mov	sp, r7
 800491a:	bc80      	pop	{r7}
 800491c:	4770      	bx	lr
	...

08004920 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004920:	b480      	push	{r7}
 8004922:	b08b      	sub	sp, #44	@ 0x2c
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800492a:	2300      	movs	r3, #0
 800492c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800492e:	2300      	movs	r3, #0
 8004930:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004932:	e169      	b.n	8004c08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004934:	2201      	movs	r2, #1
 8004936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004938:	fa02 f303 	lsl.w	r3, r2, r3
 800493c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	69fa      	ldr	r2, [r7, #28]
 8004944:	4013      	ands	r3, r2
 8004946:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	429a      	cmp	r2, r3
 800494e:	f040 8158 	bne.w	8004c02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	4a9a      	ldr	r2, [pc, #616]	@ (8004bc0 <HAL_GPIO_Init+0x2a0>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d05e      	beq.n	8004a1a <HAL_GPIO_Init+0xfa>
 800495c:	4a98      	ldr	r2, [pc, #608]	@ (8004bc0 <HAL_GPIO_Init+0x2a0>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d875      	bhi.n	8004a4e <HAL_GPIO_Init+0x12e>
 8004962:	4a98      	ldr	r2, [pc, #608]	@ (8004bc4 <HAL_GPIO_Init+0x2a4>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d058      	beq.n	8004a1a <HAL_GPIO_Init+0xfa>
 8004968:	4a96      	ldr	r2, [pc, #600]	@ (8004bc4 <HAL_GPIO_Init+0x2a4>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d86f      	bhi.n	8004a4e <HAL_GPIO_Init+0x12e>
 800496e:	4a96      	ldr	r2, [pc, #600]	@ (8004bc8 <HAL_GPIO_Init+0x2a8>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d052      	beq.n	8004a1a <HAL_GPIO_Init+0xfa>
 8004974:	4a94      	ldr	r2, [pc, #592]	@ (8004bc8 <HAL_GPIO_Init+0x2a8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d869      	bhi.n	8004a4e <HAL_GPIO_Init+0x12e>
 800497a:	4a94      	ldr	r2, [pc, #592]	@ (8004bcc <HAL_GPIO_Init+0x2ac>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d04c      	beq.n	8004a1a <HAL_GPIO_Init+0xfa>
 8004980:	4a92      	ldr	r2, [pc, #584]	@ (8004bcc <HAL_GPIO_Init+0x2ac>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d863      	bhi.n	8004a4e <HAL_GPIO_Init+0x12e>
 8004986:	4a92      	ldr	r2, [pc, #584]	@ (8004bd0 <HAL_GPIO_Init+0x2b0>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d046      	beq.n	8004a1a <HAL_GPIO_Init+0xfa>
 800498c:	4a90      	ldr	r2, [pc, #576]	@ (8004bd0 <HAL_GPIO_Init+0x2b0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d85d      	bhi.n	8004a4e <HAL_GPIO_Init+0x12e>
 8004992:	2b12      	cmp	r3, #18
 8004994:	d82a      	bhi.n	80049ec <HAL_GPIO_Init+0xcc>
 8004996:	2b12      	cmp	r3, #18
 8004998:	d859      	bhi.n	8004a4e <HAL_GPIO_Init+0x12e>
 800499a:	a201      	add	r2, pc, #4	@ (adr r2, 80049a0 <HAL_GPIO_Init+0x80>)
 800499c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a0:	08004a1b 	.word	0x08004a1b
 80049a4:	080049f5 	.word	0x080049f5
 80049a8:	08004a07 	.word	0x08004a07
 80049ac:	08004a49 	.word	0x08004a49
 80049b0:	08004a4f 	.word	0x08004a4f
 80049b4:	08004a4f 	.word	0x08004a4f
 80049b8:	08004a4f 	.word	0x08004a4f
 80049bc:	08004a4f 	.word	0x08004a4f
 80049c0:	08004a4f 	.word	0x08004a4f
 80049c4:	08004a4f 	.word	0x08004a4f
 80049c8:	08004a4f 	.word	0x08004a4f
 80049cc:	08004a4f 	.word	0x08004a4f
 80049d0:	08004a4f 	.word	0x08004a4f
 80049d4:	08004a4f 	.word	0x08004a4f
 80049d8:	08004a4f 	.word	0x08004a4f
 80049dc:	08004a4f 	.word	0x08004a4f
 80049e0:	08004a4f 	.word	0x08004a4f
 80049e4:	080049fd 	.word	0x080049fd
 80049e8:	08004a11 	.word	0x08004a11
 80049ec:	4a79      	ldr	r2, [pc, #484]	@ (8004bd4 <HAL_GPIO_Init+0x2b4>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d013      	beq.n	8004a1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80049f2:	e02c      	b.n	8004a4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	623b      	str	r3, [r7, #32]
          break;
 80049fa:	e029      	b.n	8004a50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	3304      	adds	r3, #4
 8004a02:	623b      	str	r3, [r7, #32]
          break;
 8004a04:	e024      	b.n	8004a50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	3308      	adds	r3, #8
 8004a0c:	623b      	str	r3, [r7, #32]
          break;
 8004a0e:	e01f      	b.n	8004a50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	330c      	adds	r3, #12
 8004a16:	623b      	str	r3, [r7, #32]
          break;
 8004a18:	e01a      	b.n	8004a50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d102      	bne.n	8004a28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004a22:	2304      	movs	r3, #4
 8004a24:	623b      	str	r3, [r7, #32]
          break;
 8004a26:	e013      	b.n	8004a50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d105      	bne.n	8004a3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a30:	2308      	movs	r3, #8
 8004a32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	69fa      	ldr	r2, [r7, #28]
 8004a38:	611a      	str	r2, [r3, #16]
          break;
 8004a3a:	e009      	b.n	8004a50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a3c:	2308      	movs	r3, #8
 8004a3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	69fa      	ldr	r2, [r7, #28]
 8004a44:	615a      	str	r2, [r3, #20]
          break;
 8004a46:	e003      	b.n	8004a50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	623b      	str	r3, [r7, #32]
          break;
 8004a4c:	e000      	b.n	8004a50 <HAL_GPIO_Init+0x130>
          break;
 8004a4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	2bff      	cmp	r3, #255	@ 0xff
 8004a54:	d801      	bhi.n	8004a5a <HAL_GPIO_Init+0x13a>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	e001      	b.n	8004a5e <HAL_GPIO_Init+0x13e>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	2bff      	cmp	r3, #255	@ 0xff
 8004a64:	d802      	bhi.n	8004a6c <HAL_GPIO_Init+0x14c>
 8004a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	e002      	b.n	8004a72 <HAL_GPIO_Init+0x152>
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6e:	3b08      	subs	r3, #8
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	210f      	movs	r1, #15
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a80:	43db      	mvns	r3, r3
 8004a82:	401a      	ands	r2, r3
 8004a84:	6a39      	ldr	r1, [r7, #32]
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	fa01 f303 	lsl.w	r3, r1, r3
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f000 80b1 	beq.w	8004c02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004aa0:	4b4d      	ldr	r3, [pc, #308]	@ (8004bd8 <HAL_GPIO_Init+0x2b8>)
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	4a4c      	ldr	r2, [pc, #304]	@ (8004bd8 <HAL_GPIO_Init+0x2b8>)
 8004aa6:	f043 0301 	orr.w	r3, r3, #1
 8004aaa:	6193      	str	r3, [r2, #24]
 8004aac:	4b4a      	ldr	r3, [pc, #296]	@ (8004bd8 <HAL_GPIO_Init+0x2b8>)
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	60bb      	str	r3, [r7, #8]
 8004ab6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004ab8:	4a48      	ldr	r2, [pc, #288]	@ (8004bdc <HAL_GPIO_Init+0x2bc>)
 8004aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abc:	089b      	lsrs	r3, r3, #2
 8004abe:	3302      	adds	r3, #2
 8004ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ac4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac8:	f003 0303 	and.w	r3, r3, #3
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	220f      	movs	r2, #15
 8004ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad4:	43db      	mvns	r3, r3
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a40      	ldr	r2, [pc, #256]	@ (8004be0 <HAL_GPIO_Init+0x2c0>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d013      	beq.n	8004b0c <HAL_GPIO_Init+0x1ec>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a3f      	ldr	r2, [pc, #252]	@ (8004be4 <HAL_GPIO_Init+0x2c4>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d00d      	beq.n	8004b08 <HAL_GPIO_Init+0x1e8>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a3e      	ldr	r2, [pc, #248]	@ (8004be8 <HAL_GPIO_Init+0x2c8>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d007      	beq.n	8004b04 <HAL_GPIO_Init+0x1e4>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a3d      	ldr	r2, [pc, #244]	@ (8004bec <HAL_GPIO_Init+0x2cc>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d101      	bne.n	8004b00 <HAL_GPIO_Init+0x1e0>
 8004afc:	2303      	movs	r3, #3
 8004afe:	e006      	b.n	8004b0e <HAL_GPIO_Init+0x1ee>
 8004b00:	2304      	movs	r3, #4
 8004b02:	e004      	b.n	8004b0e <HAL_GPIO_Init+0x1ee>
 8004b04:	2302      	movs	r3, #2
 8004b06:	e002      	b.n	8004b0e <HAL_GPIO_Init+0x1ee>
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e000      	b.n	8004b0e <HAL_GPIO_Init+0x1ee>
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b10:	f002 0203 	and.w	r2, r2, #3
 8004b14:	0092      	lsls	r2, r2, #2
 8004b16:	4093      	lsls	r3, r2
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004b1e:	492f      	ldr	r1, [pc, #188]	@ (8004bdc <HAL_GPIO_Init+0x2bc>)
 8004b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b22:	089b      	lsrs	r3, r3, #2
 8004b24:	3302      	adds	r3, #2
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d006      	beq.n	8004b46 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004b38:	4b2d      	ldr	r3, [pc, #180]	@ (8004bf0 <HAL_GPIO_Init+0x2d0>)
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	492c      	ldr	r1, [pc, #176]	@ (8004bf0 <HAL_GPIO_Init+0x2d0>)
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	608b      	str	r3, [r1, #8]
 8004b44:	e006      	b.n	8004b54 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004b46:	4b2a      	ldr	r3, [pc, #168]	@ (8004bf0 <HAL_GPIO_Init+0x2d0>)
 8004b48:	689a      	ldr	r2, [r3, #8]
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	43db      	mvns	r3, r3
 8004b4e:	4928      	ldr	r1, [pc, #160]	@ (8004bf0 <HAL_GPIO_Init+0x2d0>)
 8004b50:	4013      	ands	r3, r2
 8004b52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d006      	beq.n	8004b6e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004b60:	4b23      	ldr	r3, [pc, #140]	@ (8004bf0 <HAL_GPIO_Init+0x2d0>)
 8004b62:	68da      	ldr	r2, [r3, #12]
 8004b64:	4922      	ldr	r1, [pc, #136]	@ (8004bf0 <HAL_GPIO_Init+0x2d0>)
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60cb      	str	r3, [r1, #12]
 8004b6c:	e006      	b.n	8004b7c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004b6e:	4b20      	ldr	r3, [pc, #128]	@ (8004bf0 <HAL_GPIO_Init+0x2d0>)
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	43db      	mvns	r3, r3
 8004b76:	491e      	ldr	r1, [pc, #120]	@ (8004bf0 <HAL_GPIO_Init+0x2d0>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d006      	beq.n	8004b96 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004b88:	4b19      	ldr	r3, [pc, #100]	@ (8004bf0 <HAL_GPIO_Init+0x2d0>)
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	4918      	ldr	r1, [pc, #96]	@ (8004bf0 <HAL_GPIO_Init+0x2d0>)
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	604b      	str	r3, [r1, #4]
 8004b94:	e006      	b.n	8004ba4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004b96:	4b16      	ldr	r3, [pc, #88]	@ (8004bf0 <HAL_GPIO_Init+0x2d0>)
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	43db      	mvns	r3, r3
 8004b9e:	4914      	ldr	r1, [pc, #80]	@ (8004bf0 <HAL_GPIO_Init+0x2d0>)
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d021      	beq.n	8004bf4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8004bf0 <HAL_GPIO_Init+0x2d0>)
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	490e      	ldr	r1, [pc, #56]	@ (8004bf0 <HAL_GPIO_Init+0x2d0>)
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	600b      	str	r3, [r1, #0]
 8004bbc:	e021      	b.n	8004c02 <HAL_GPIO_Init+0x2e2>
 8004bbe:	bf00      	nop
 8004bc0:	10320000 	.word	0x10320000
 8004bc4:	10310000 	.word	0x10310000
 8004bc8:	10220000 	.word	0x10220000
 8004bcc:	10210000 	.word	0x10210000
 8004bd0:	10120000 	.word	0x10120000
 8004bd4:	10110000 	.word	0x10110000
 8004bd8:	40021000 	.word	0x40021000
 8004bdc:	40010000 	.word	0x40010000
 8004be0:	40010800 	.word	0x40010800
 8004be4:	40010c00 	.word	0x40010c00
 8004be8:	40011000 	.word	0x40011000
 8004bec:	40011400 	.word	0x40011400
 8004bf0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8004c24 <HAL_GPIO_Init+0x304>)
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	43db      	mvns	r3, r3
 8004bfc:	4909      	ldr	r1, [pc, #36]	@ (8004c24 <HAL_GPIO_Init+0x304>)
 8004bfe:	4013      	ands	r3, r2
 8004c00:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c04:	3301      	adds	r3, #1
 8004c06:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f47f ae8e 	bne.w	8004934 <HAL_GPIO_Init+0x14>
  }
}
 8004c18:	bf00      	nop
 8004c1a:	bf00      	nop
 8004c1c:	372c      	adds	r7, #44	@ 0x2c
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bc80      	pop	{r7}
 8004c22:	4770      	bx	lr
 8004c24:	40010400 	.word	0x40010400

08004c28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	460b      	mov	r3, r1
 8004c32:	807b      	strh	r3, [r7, #2]
 8004c34:	4613      	mov	r3, r2
 8004c36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c38:	787b      	ldrb	r3, [r7, #1]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c3e:	887a      	ldrh	r2, [r7, #2]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004c44:	e003      	b.n	8004c4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c46:	887b      	ldrh	r3, [r7, #2]
 8004c48:	041a      	lsls	r2, r3, #16
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	611a      	str	r2, [r3, #16]
}
 8004c4e:	bf00      	nop
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bc80      	pop	{r7}
 8004c56:	4770      	bx	lr

08004c58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	4603      	mov	r3, r0
 8004c60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004c62:	4b08      	ldr	r3, [pc, #32]	@ (8004c84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c64:	695a      	ldr	r2, [r3, #20]
 8004c66:	88fb      	ldrh	r3, [r7, #6]
 8004c68:	4013      	ands	r3, r2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d006      	beq.n	8004c7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c6e:	4a05      	ldr	r2, [pc, #20]	@ (8004c84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c70:	88fb      	ldrh	r3, [r7, #6]
 8004c72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c74:	88fb      	ldrh	r3, [r7, #6]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fe fa22 	bl	80030c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c7c:	bf00      	nop
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	40010400 	.word	0x40010400

08004c88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e12b      	b.n	8004ef2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d106      	bne.n	8004cb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7fe fef0 	bl	8003a94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2224      	movs	r2, #36	@ 0x24
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f022 0201 	bic.w	r2, r2, #1
 8004cca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004cea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004cec:	f001 fbfc 	bl	80064e8 <HAL_RCC_GetPCLK1Freq>
 8004cf0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	4a81      	ldr	r2, [pc, #516]	@ (8004efc <HAL_I2C_Init+0x274>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d807      	bhi.n	8004d0c <HAL_I2C_Init+0x84>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4a80      	ldr	r2, [pc, #512]	@ (8004f00 <HAL_I2C_Init+0x278>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	bf94      	ite	ls
 8004d04:	2301      	movls	r3, #1
 8004d06:	2300      	movhi	r3, #0
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	e006      	b.n	8004d1a <HAL_I2C_Init+0x92>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4a7d      	ldr	r2, [pc, #500]	@ (8004f04 <HAL_I2C_Init+0x27c>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	bf94      	ite	ls
 8004d14:	2301      	movls	r3, #1
 8004d16:	2300      	movhi	r3, #0
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e0e7      	b.n	8004ef2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	4a78      	ldr	r2, [pc, #480]	@ (8004f08 <HAL_I2C_Init+0x280>)
 8004d26:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2a:	0c9b      	lsrs	r3, r3, #18
 8004d2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	4a6a      	ldr	r2, [pc, #424]	@ (8004efc <HAL_I2C_Init+0x274>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d802      	bhi.n	8004d5c <HAL_I2C_Init+0xd4>
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	e009      	b.n	8004d70 <HAL_I2C_Init+0xe8>
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004d62:	fb02 f303 	mul.w	r3, r2, r3
 8004d66:	4a69      	ldr	r2, [pc, #420]	@ (8004f0c <HAL_I2C_Init+0x284>)
 8004d68:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6c:	099b      	lsrs	r3, r3, #6
 8004d6e:	3301      	adds	r3, #1
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6812      	ldr	r2, [r2, #0]
 8004d74:	430b      	orrs	r3, r1
 8004d76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004d82:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	495c      	ldr	r1, [pc, #368]	@ (8004efc <HAL_I2C_Init+0x274>)
 8004d8c:	428b      	cmp	r3, r1
 8004d8e:	d819      	bhi.n	8004dc4 <HAL_I2C_Init+0x13c>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	1e59      	subs	r1, r3, #1
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d9e:	1c59      	adds	r1, r3, #1
 8004da0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004da4:	400b      	ands	r3, r1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00a      	beq.n	8004dc0 <HAL_I2C_Init+0x138>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	1e59      	subs	r1, r3, #1
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004db8:	3301      	adds	r3, #1
 8004dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dbe:	e051      	b.n	8004e64 <HAL_I2C_Init+0x1dc>
 8004dc0:	2304      	movs	r3, #4
 8004dc2:	e04f      	b.n	8004e64 <HAL_I2C_Init+0x1dc>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d111      	bne.n	8004df0 <HAL_I2C_Init+0x168>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	1e58      	subs	r0, r3, #1
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6859      	ldr	r1, [r3, #4]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	440b      	add	r3, r1
 8004dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dde:	3301      	adds	r3, #1
 8004de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	bf0c      	ite	eq
 8004de8:	2301      	moveq	r3, #1
 8004dea:	2300      	movne	r3, #0
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	e012      	b.n	8004e16 <HAL_I2C_Init+0x18e>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	1e58      	subs	r0, r3, #1
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6859      	ldr	r1, [r3, #4]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	440b      	add	r3, r1
 8004dfe:	0099      	lsls	r1, r3, #2
 8004e00:	440b      	add	r3, r1
 8004e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e06:	3301      	adds	r3, #1
 8004e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	bf0c      	ite	eq
 8004e10:	2301      	moveq	r3, #1
 8004e12:	2300      	movne	r3, #0
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <HAL_I2C_Init+0x196>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e022      	b.n	8004e64 <HAL_I2C_Init+0x1dc>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10e      	bne.n	8004e44 <HAL_I2C_Init+0x1bc>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	1e58      	subs	r0, r3, #1
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6859      	ldr	r1, [r3, #4]
 8004e2e:	460b      	mov	r3, r1
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	440b      	add	r3, r1
 8004e34:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e38:	3301      	adds	r3, #1
 8004e3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e42:	e00f      	b.n	8004e64 <HAL_I2C_Init+0x1dc>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	1e58      	subs	r0, r3, #1
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6859      	ldr	r1, [r3, #4]
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	440b      	add	r3, r1
 8004e52:	0099      	lsls	r1, r3, #2
 8004e54:	440b      	add	r3, r1
 8004e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e64:	6879      	ldr	r1, [r7, #4]
 8004e66:	6809      	ldr	r1, [r1, #0]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	69da      	ldr	r2, [r3, #28]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	430a      	orrs	r2, r1
 8004e86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004e92:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	6911      	ldr	r1, [r2, #16]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	68d2      	ldr	r2, [r2, #12]
 8004e9e:	4311      	orrs	r1, r2
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6812      	ldr	r2, [r2, #0]
 8004ea4:	430b      	orrs	r3, r1
 8004ea6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	695a      	ldr	r2, [r3, #20]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f042 0201 	orr.w	r2, r2, #1
 8004ed2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2220      	movs	r2, #32
 8004ede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	000186a0 	.word	0x000186a0
 8004f00:	001e847f 	.word	0x001e847f
 8004f04:	003d08ff 	.word	0x003d08ff
 8004f08:	431bde83 	.word	0x431bde83
 8004f0c:	10624dd3 	.word	0x10624dd3

08004f10 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b088      	sub	sp, #32
 8004f14:	af02      	add	r7, sp, #8
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	4608      	mov	r0, r1
 8004f1a:	4611      	mov	r1, r2
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	4603      	mov	r3, r0
 8004f20:	817b      	strh	r3, [r7, #10]
 8004f22:	460b      	mov	r3, r1
 8004f24:	813b      	strh	r3, [r7, #8]
 8004f26:	4613      	mov	r3, r2
 8004f28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f2a:	f7ff f847 	bl	8003fbc <HAL_GetTick>
 8004f2e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b20      	cmp	r3, #32
 8004f3a:	f040 80d9 	bne.w	80050f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	2319      	movs	r3, #25
 8004f44:	2201      	movs	r2, #1
 8004f46:	496d      	ldr	r1, [pc, #436]	@ (80050fc <HAL_I2C_Mem_Write+0x1ec>)
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 fccd 	bl	80058e8 <I2C_WaitOnFlagUntilTimeout>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004f54:	2302      	movs	r3, #2
 8004f56:	e0cc      	b.n	80050f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <HAL_I2C_Mem_Write+0x56>
 8004f62:	2302      	movs	r3, #2
 8004f64:	e0c5      	b.n	80050f2 <HAL_I2C_Mem_Write+0x1e2>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d007      	beq.n	8004f8c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0201 	orr.w	r2, r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2221      	movs	r2, #33	@ 0x21
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2240      	movs	r2, #64	@ 0x40
 8004fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a3a      	ldr	r2, [r7, #32]
 8004fb6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004fbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4a4d      	ldr	r2, [pc, #308]	@ (8005100 <HAL_I2C_Mem_Write+0x1f0>)
 8004fcc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fce:	88f8      	ldrh	r0, [r7, #6]
 8004fd0:	893a      	ldrh	r2, [r7, #8]
 8004fd2:	8979      	ldrh	r1, [r7, #10]
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	9301      	str	r3, [sp, #4]
 8004fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	4603      	mov	r3, r0
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f000 fb04 	bl	80055ec <I2C_RequestMemoryWrite>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d052      	beq.n	8005090 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e081      	b.n	80050f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 fd92 	bl	8005b1c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00d      	beq.n	800501a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005002:	2b04      	cmp	r3, #4
 8005004:	d107      	bne.n	8005016 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005014:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e06b      	b.n	80050f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501e:	781a      	ldrb	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005034:	3b01      	subs	r3, #1
 8005036:	b29a      	uxth	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005040:	b29b      	uxth	r3, r3
 8005042:	3b01      	subs	r3, #1
 8005044:	b29a      	uxth	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	2b04      	cmp	r3, #4
 8005056:	d11b      	bne.n	8005090 <HAL_I2C_Mem_Write+0x180>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800505c:	2b00      	cmp	r3, #0
 800505e:	d017      	beq.n	8005090 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005064:	781a      	ldrb	r2, [r3, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005070:	1c5a      	adds	r2, r3, #1
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800507a:	3b01      	subs	r3, #1
 800507c:	b29a      	uxth	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005086:	b29b      	uxth	r3, r3
 8005088:	3b01      	subs	r3, #1
 800508a:	b29a      	uxth	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1aa      	bne.n	8004fee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 fd85 	bl	8005bac <I2C_WaitOnBTFFlagUntilTimeout>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00d      	beq.n	80050c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ac:	2b04      	cmp	r3, #4
 80050ae:	d107      	bne.n	80050c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e016      	b.n	80050f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2220      	movs	r2, #32
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80050ec:	2300      	movs	r3, #0
 80050ee:	e000      	b.n	80050f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80050f0:	2302      	movs	r3, #2
  }
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3718      	adds	r7, #24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	00100002 	.word	0x00100002
 8005100:	ffff0000 	.word	0xffff0000

08005104 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b08c      	sub	sp, #48	@ 0x30
 8005108:	af02      	add	r7, sp, #8
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	4608      	mov	r0, r1
 800510e:	4611      	mov	r1, r2
 8005110:	461a      	mov	r2, r3
 8005112:	4603      	mov	r3, r0
 8005114:	817b      	strh	r3, [r7, #10]
 8005116:	460b      	mov	r3, r1
 8005118:	813b      	strh	r3, [r7, #8]
 800511a:	4613      	mov	r3, r2
 800511c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800511e:	2300      	movs	r3, #0
 8005120:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005122:	f7fe ff4b 	bl	8003fbc <HAL_GetTick>
 8005126:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b20      	cmp	r3, #32
 8005132:	f040 8250 	bne.w	80055d6 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	2319      	movs	r3, #25
 800513c:	2201      	movs	r2, #1
 800513e:	4982      	ldr	r1, [pc, #520]	@ (8005348 <HAL_I2C_Mem_Read+0x244>)
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f000 fbd1 	bl	80058e8 <I2C_WaitOnFlagUntilTimeout>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800514c:	2302      	movs	r3, #2
 800514e:	e243      	b.n	80055d8 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005156:	2b01      	cmp	r3, #1
 8005158:	d101      	bne.n	800515e <HAL_I2C_Mem_Read+0x5a>
 800515a:	2302      	movs	r3, #2
 800515c:	e23c      	b.n	80055d8 <HAL_I2C_Mem_Read+0x4d4>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b01      	cmp	r3, #1
 8005172:	d007      	beq.n	8005184 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0201 	orr.w	r2, r2, #1
 8005182:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005192:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2222      	movs	r2, #34	@ 0x22
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2240      	movs	r2, #64	@ 0x40
 80051a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80051b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4a62      	ldr	r2, [pc, #392]	@ (800534c <HAL_I2C_Mem_Read+0x248>)
 80051c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051c6:	88f8      	ldrh	r0, [r7, #6]
 80051c8:	893a      	ldrh	r2, [r7, #8]
 80051ca:	8979      	ldrh	r1, [r7, #10]
 80051cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ce:	9301      	str	r3, [sp, #4]
 80051d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	4603      	mov	r3, r0
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f000 fa9e 	bl	8005718 <I2C_RequestMemoryRead>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e1f8      	b.n	80055d8 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d113      	bne.n	8005216 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ee:	2300      	movs	r3, #0
 80051f0:	61fb      	str	r3, [r7, #28]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	61fb      	str	r3, [r7, #28]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	61fb      	str	r3, [r7, #28]
 8005202:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	e1cc      	b.n	80055b0 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800521a:	2b01      	cmp	r3, #1
 800521c:	d11e      	bne.n	800525c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800522c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800522e:	b672      	cpsid	i
}
 8005230:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005232:	2300      	movs	r3, #0
 8005234:	61bb      	str	r3, [r7, #24]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	61bb      	str	r3, [r7, #24]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	61bb      	str	r3, [r7, #24]
 8005246:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005256:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005258:	b662      	cpsie	i
}
 800525a:	e035      	b.n	80052c8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005260:	2b02      	cmp	r3, #2
 8005262:	d11e      	bne.n	80052a2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005272:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005274:	b672      	cpsid	i
}
 8005276:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005278:	2300      	movs	r3, #0
 800527a:	617b      	str	r3, [r7, #20]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	617b      	str	r3, [r7, #20]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	617b      	str	r3, [r7, #20]
 800528c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800529c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800529e:	b662      	cpsie	i
}
 80052a0:	e012      	b.n	80052c8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80052b0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052b2:	2300      	movs	r3, #0
 80052b4:	613b      	str	r3, [r7, #16]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	613b      	str	r3, [r7, #16]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	613b      	str	r3, [r7, #16]
 80052c6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80052c8:	e172      	b.n	80055b0 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ce:	2b03      	cmp	r3, #3
 80052d0:	f200 811f 	bhi.w	8005512 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d123      	bne.n	8005324 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052de:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 fcab 	bl	8005c3c <I2C_WaitOnRXNEFlagUntilTimeout>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d001      	beq.n	80052f0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e173      	b.n	80055d8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691a      	ldr	r2, [r3, #16]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fa:	b2d2      	uxtb	r2, r2
 80052fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005302:	1c5a      	adds	r2, r3, #1
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800530c:	3b01      	subs	r3, #1
 800530e:	b29a      	uxth	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005318:	b29b      	uxth	r3, r3
 800531a:	3b01      	subs	r3, #1
 800531c:	b29a      	uxth	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005322:	e145      	b.n	80055b0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005328:	2b02      	cmp	r3, #2
 800532a:	d152      	bne.n	80053d2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800532c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005332:	2200      	movs	r2, #0
 8005334:	4906      	ldr	r1, [pc, #24]	@ (8005350 <HAL_I2C_Mem_Read+0x24c>)
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f000 fad6 	bl	80058e8 <I2C_WaitOnFlagUntilTimeout>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d008      	beq.n	8005354 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e148      	b.n	80055d8 <HAL_I2C_Mem_Read+0x4d4>
 8005346:	bf00      	nop
 8005348:	00100002 	.word	0x00100002
 800534c:	ffff0000 	.word	0xffff0000
 8005350:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005354:	b672      	cpsid	i
}
 8005356:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005366:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	691a      	ldr	r2, [r3, #16]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005372:	b2d2      	uxtb	r2, r2
 8005374:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005384:	3b01      	subs	r3, #1
 8005386:	b29a      	uxth	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005390:	b29b      	uxth	r3, r3
 8005392:	3b01      	subs	r3, #1
 8005394:	b29a      	uxth	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800539a:	b662      	cpsie	i
}
 800539c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	691a      	ldr	r2, [r3, #16]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a8:	b2d2      	uxtb	r2, r2
 80053aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b0:	1c5a      	adds	r2, r3, #1
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ba:	3b01      	subs	r3, #1
 80053bc:	b29a      	uxth	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80053d0:	e0ee      	b.n	80055b0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d8:	2200      	movs	r2, #0
 80053da:	4981      	ldr	r1, [pc, #516]	@ (80055e0 <HAL_I2C_Mem_Read+0x4dc>)
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f000 fa83 	bl	80058e8 <I2C_WaitOnFlagUntilTimeout>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d001      	beq.n	80053ec <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e0f5      	b.n	80055d8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80053fc:	b672      	cpsid	i
}
 80053fe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	691a      	ldr	r2, [r3, #16]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005412:	1c5a      	adds	r2, r3, #1
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800541c:	3b01      	subs	r3, #1
 800541e:	b29a      	uxth	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005428:	b29b      	uxth	r3, r3
 800542a:	3b01      	subs	r3, #1
 800542c:	b29a      	uxth	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005432:	4b6c      	ldr	r3, [pc, #432]	@ (80055e4 <HAL_I2C_Mem_Read+0x4e0>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	08db      	lsrs	r3, r3, #3
 8005438:	4a6b      	ldr	r2, [pc, #428]	@ (80055e8 <HAL_I2C_Mem_Read+0x4e4>)
 800543a:	fba2 2303 	umull	r2, r3, r2, r3
 800543e:	0a1a      	lsrs	r2, r3, #8
 8005440:	4613      	mov	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4413      	add	r3, r2
 8005446:	00da      	lsls	r2, r3, #3
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	3b01      	subs	r3, #1
 8005450:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d118      	bne.n	800548a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2220      	movs	r2, #32
 8005462:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005472:	f043 0220 	orr.w	r2, r3, #32
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800547a:	b662      	cpsie	i
}
 800547c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e0a6      	b.n	80055d8 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	f003 0304 	and.w	r3, r3, #4
 8005494:	2b04      	cmp	r3, #4
 8005496:	d1d9      	bne.n	800544c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	691a      	ldr	r2, [r3, #16]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b2:	b2d2      	uxtb	r2, r2
 80054b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ba:	1c5a      	adds	r2, r3, #1
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054c4:	3b01      	subs	r3, #1
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	3b01      	subs	r3, #1
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80054da:	b662      	cpsie	i
}
 80054dc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	691a      	ldr	r2, [r3, #16]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f0:	1c5a      	adds	r2, r3, #1
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054fa:	3b01      	subs	r3, #1
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005506:	b29b      	uxth	r3, r3
 8005508:	3b01      	subs	r3, #1
 800550a:	b29a      	uxth	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005510:	e04e      	b.n	80055b0 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005512:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005514:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f000 fb90 	bl	8005c3c <I2C_WaitOnRXNEFlagUntilTimeout>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e058      	b.n	80055d8 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	691a      	ldr	r2, [r3, #16]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005530:	b2d2      	uxtb	r2, r2
 8005532:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005538:	1c5a      	adds	r2, r3, #1
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005542:	3b01      	subs	r3, #1
 8005544:	b29a      	uxth	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800554e:	b29b      	uxth	r3, r3
 8005550:	3b01      	subs	r3, #1
 8005552:	b29a      	uxth	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	f003 0304 	and.w	r3, r3, #4
 8005562:	2b04      	cmp	r3, #4
 8005564:	d124      	bne.n	80055b0 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800556a:	2b03      	cmp	r3, #3
 800556c:	d107      	bne.n	800557e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800557c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	691a      	ldr	r2, [r3, #16]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005588:	b2d2      	uxtb	r2, r2
 800558a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005590:	1c5a      	adds	r2, r3, #1
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800559a:	3b01      	subs	r3, #1
 800559c:	b29a      	uxth	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	3b01      	subs	r3, #1
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f47f ae88 	bne.w	80052ca <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2220      	movs	r2, #32
 80055be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80055d2:	2300      	movs	r3, #0
 80055d4:	e000      	b.n	80055d8 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80055d6:	2302      	movs	r3, #2
  }
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3728      	adds	r7, #40	@ 0x28
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	00010004 	.word	0x00010004
 80055e4:	200000a8 	.word	0x200000a8
 80055e8:	14f8b589 	.word	0x14f8b589

080055ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b088      	sub	sp, #32
 80055f0:	af02      	add	r7, sp, #8
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	4608      	mov	r0, r1
 80055f6:	4611      	mov	r1, r2
 80055f8:	461a      	mov	r2, r3
 80055fa:	4603      	mov	r3, r0
 80055fc:	817b      	strh	r3, [r7, #10]
 80055fe:	460b      	mov	r3, r1
 8005600:	813b      	strh	r3, [r7, #8]
 8005602:	4613      	mov	r3, r2
 8005604:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005614:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	2200      	movs	r2, #0
 800561e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f000 f960 	bl	80058e8 <I2C_WaitOnFlagUntilTimeout>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00d      	beq.n	800564a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005638:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800563c:	d103      	bne.n	8005646 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005644:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e05f      	b.n	800570a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800564a:	897b      	ldrh	r3, [r7, #10]
 800564c:	b2db      	uxtb	r3, r3
 800564e:	461a      	mov	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005658:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800565a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565c:	6a3a      	ldr	r2, [r7, #32]
 800565e:	492d      	ldr	r1, [pc, #180]	@ (8005714 <I2C_RequestMemoryWrite+0x128>)
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f000 f9bb 	bl	80059dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d001      	beq.n	8005670 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e04c      	b.n	800570a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005670:	2300      	movs	r3, #0
 8005672:	617b      	str	r3, [r7, #20]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	617b      	str	r3, [r7, #20]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	617b      	str	r3, [r7, #20]
 8005684:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005688:	6a39      	ldr	r1, [r7, #32]
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f000 fa46 	bl	8005b1c <I2C_WaitOnTXEFlagUntilTimeout>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00d      	beq.n	80056b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800569a:	2b04      	cmp	r3, #4
 800569c:	d107      	bne.n	80056ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e02b      	b.n	800570a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056b2:	88fb      	ldrh	r3, [r7, #6]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d105      	bne.n	80056c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056b8:	893b      	ldrh	r3, [r7, #8]
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	611a      	str	r2, [r3, #16]
 80056c2:	e021      	b.n	8005708 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80056c4:	893b      	ldrh	r3, [r7, #8]
 80056c6:	0a1b      	lsrs	r3, r3, #8
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056d4:	6a39      	ldr	r1, [r7, #32]
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f000 fa20 	bl	8005b1c <I2C_WaitOnTXEFlagUntilTimeout>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00d      	beq.n	80056fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	d107      	bne.n	80056fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e005      	b.n	800570a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056fe:	893b      	ldrh	r3, [r7, #8]
 8005700:	b2da      	uxtb	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3718      	adds	r7, #24
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	00010002 	.word	0x00010002

08005718 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b088      	sub	sp, #32
 800571c:	af02      	add	r7, sp, #8
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	4608      	mov	r0, r1
 8005722:	4611      	mov	r1, r2
 8005724:	461a      	mov	r2, r3
 8005726:	4603      	mov	r3, r0
 8005728:	817b      	strh	r3, [r7, #10]
 800572a:	460b      	mov	r3, r1
 800572c:	813b      	strh	r3, [r7, #8]
 800572e:	4613      	mov	r3, r2
 8005730:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005740:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005750:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	6a3b      	ldr	r3, [r7, #32]
 8005758:	2200      	movs	r2, #0
 800575a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f000 f8c2 	bl	80058e8 <I2C_WaitOnFlagUntilTimeout>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00d      	beq.n	8005786 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005774:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005778:	d103      	bne.n	8005782 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005780:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e0aa      	b.n	80058dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005786:	897b      	ldrh	r3, [r7, #10]
 8005788:	b2db      	uxtb	r3, r3
 800578a:	461a      	mov	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005794:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005798:	6a3a      	ldr	r2, [r7, #32]
 800579a:	4952      	ldr	r1, [pc, #328]	@ (80058e4 <I2C_RequestMemoryRead+0x1cc>)
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 f91d 	bl	80059dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d001      	beq.n	80057ac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e097      	b.n	80058dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057ac:	2300      	movs	r3, #0
 80057ae:	617b      	str	r3, [r7, #20]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	617b      	str	r3, [r7, #20]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057c4:	6a39      	ldr	r1, [r7, #32]
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f000 f9a8 	bl	8005b1c <I2C_WaitOnTXEFlagUntilTimeout>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00d      	beq.n	80057ee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d107      	bne.n	80057ea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e076      	b.n	80058dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057ee:	88fb      	ldrh	r3, [r7, #6]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d105      	bne.n	8005800 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057f4:	893b      	ldrh	r3, [r7, #8]
 80057f6:	b2da      	uxtb	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	611a      	str	r2, [r3, #16]
 80057fe:	e021      	b.n	8005844 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005800:	893b      	ldrh	r3, [r7, #8]
 8005802:	0a1b      	lsrs	r3, r3, #8
 8005804:	b29b      	uxth	r3, r3
 8005806:	b2da      	uxtb	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800580e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005810:	6a39      	ldr	r1, [r7, #32]
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f000 f982 	bl	8005b1c <I2C_WaitOnTXEFlagUntilTimeout>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00d      	beq.n	800583a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005822:	2b04      	cmp	r3, #4
 8005824:	d107      	bne.n	8005836 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005834:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e050      	b.n	80058dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800583a:	893b      	ldrh	r3, [r7, #8]
 800583c:	b2da      	uxtb	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005844:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005846:	6a39      	ldr	r1, [r7, #32]
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 f967 	bl	8005b1c <I2C_WaitOnTXEFlagUntilTimeout>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00d      	beq.n	8005870 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005858:	2b04      	cmp	r3, #4
 800585a:	d107      	bne.n	800586c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800586a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e035      	b.n	80058dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800587e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	2200      	movs	r2, #0
 8005888:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f000 f82b 	bl	80058e8 <I2C_WaitOnFlagUntilTimeout>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00d      	beq.n	80058b4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058a6:	d103      	bne.n	80058b0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e013      	b.n	80058dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80058b4:	897b      	ldrh	r3, [r7, #10]
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	f043 0301 	orr.w	r3, r3, #1
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c6:	6a3a      	ldr	r2, [r7, #32]
 80058c8:	4906      	ldr	r1, [pc, #24]	@ (80058e4 <I2C_RequestMemoryRead+0x1cc>)
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 f886 	bl	80059dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e000      	b.n	80058dc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3718      	adds	r7, #24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	00010002 	.word	0x00010002

080058e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	603b      	str	r3, [r7, #0]
 80058f4:	4613      	mov	r3, r2
 80058f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058f8:	e048      	b.n	800598c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005900:	d044      	beq.n	800598c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005902:	f7fe fb5b 	bl	8003fbc <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	429a      	cmp	r2, r3
 8005910:	d302      	bcc.n	8005918 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d139      	bne.n	800598c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	0c1b      	lsrs	r3, r3, #16
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b01      	cmp	r3, #1
 8005920:	d10d      	bne.n	800593e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	43da      	mvns	r2, r3
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	4013      	ands	r3, r2
 800592e:	b29b      	uxth	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	bf0c      	ite	eq
 8005934:	2301      	moveq	r3, #1
 8005936:	2300      	movne	r3, #0
 8005938:	b2db      	uxtb	r3, r3
 800593a:	461a      	mov	r2, r3
 800593c:	e00c      	b.n	8005958 <I2C_WaitOnFlagUntilTimeout+0x70>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	43da      	mvns	r2, r3
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	4013      	ands	r3, r2
 800594a:	b29b      	uxth	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	bf0c      	ite	eq
 8005950:	2301      	moveq	r3, #1
 8005952:	2300      	movne	r3, #0
 8005954:	b2db      	uxtb	r3, r3
 8005956:	461a      	mov	r2, r3
 8005958:	79fb      	ldrb	r3, [r7, #7]
 800595a:	429a      	cmp	r2, r3
 800595c:	d116      	bne.n	800598c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2220      	movs	r2, #32
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005978:	f043 0220 	orr.w	r2, r3, #32
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e023      	b.n	80059d4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	0c1b      	lsrs	r3, r3, #16
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b01      	cmp	r3, #1
 8005994:	d10d      	bne.n	80059b2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	43da      	mvns	r2, r3
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	4013      	ands	r3, r2
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	bf0c      	ite	eq
 80059a8:	2301      	moveq	r3, #1
 80059aa:	2300      	movne	r3, #0
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	461a      	mov	r2, r3
 80059b0:	e00c      	b.n	80059cc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	43da      	mvns	r2, r3
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	4013      	ands	r3, r2
 80059be:	b29b      	uxth	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	bf0c      	ite	eq
 80059c4:	2301      	moveq	r3, #1
 80059c6:	2300      	movne	r3, #0
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	461a      	mov	r2, r3
 80059cc:	79fb      	ldrb	r3, [r7, #7]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d093      	beq.n	80058fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
 80059e8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059ea:	e071      	b.n	8005ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059fa:	d123      	bne.n	8005a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a0a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a30:	f043 0204 	orr.w	r2, r3, #4
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e067      	b.n	8005b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4a:	d041      	beq.n	8005ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a4c:	f7fe fab6 	bl	8003fbc <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d302      	bcc.n	8005a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d136      	bne.n	8005ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	0c1b      	lsrs	r3, r3, #16
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d10c      	bne.n	8005a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	43da      	mvns	r2, r3
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	4013      	ands	r3, r2
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	bf14      	ite	ne
 8005a7e:	2301      	movne	r3, #1
 8005a80:	2300      	moveq	r3, #0
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	e00b      	b.n	8005a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	43da      	mvns	r2, r3
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	4013      	ands	r3, r2
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	bf14      	ite	ne
 8005a98:	2301      	movne	r3, #1
 8005a9a:	2300      	moveq	r3, #0
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d016      	beq.n	8005ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005abc:	f043 0220 	orr.w	r2, r3, #32
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e021      	b.n	8005b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	0c1b      	lsrs	r3, r3, #16
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d10c      	bne.n	8005af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	43da      	mvns	r2, r3
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	bf14      	ite	ne
 8005aec:	2301      	movne	r3, #1
 8005aee:	2300      	moveq	r3, #0
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	e00b      	b.n	8005b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	43da      	mvns	r2, r3
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	4013      	ands	r3, r2
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	bf14      	ite	ne
 8005b06:	2301      	movne	r3, #1
 8005b08:	2300      	moveq	r3, #0
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f47f af6d 	bne.w	80059ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b28:	e034      	b.n	8005b94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f000 f8e3 	bl	8005cf6 <I2C_IsAcknowledgeFailed>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e034      	b.n	8005ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b40:	d028      	beq.n	8005b94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b42:	f7fe fa3b 	bl	8003fbc <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d302      	bcc.n	8005b58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d11d      	bne.n	8005b94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b62:	2b80      	cmp	r3, #128	@ 0x80
 8005b64:	d016      	beq.n	8005b94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b80:	f043 0220 	orr.w	r2, r3, #32
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e007      	b.n	8005ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b9e:	2b80      	cmp	r3, #128	@ 0x80
 8005ba0:	d1c3      	bne.n	8005b2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bb8:	e034      	b.n	8005c24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f000 f89b 	bl	8005cf6 <I2C_IsAcknowledgeFailed>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e034      	b.n	8005c34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd0:	d028      	beq.n	8005c24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bd2:	f7fe f9f3 	bl	8003fbc <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d302      	bcc.n	8005be8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d11d      	bne.n	8005c24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	f003 0304 	and.w	r3, r3, #4
 8005bf2:	2b04      	cmp	r3, #4
 8005bf4:	d016      	beq.n	8005c24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c10:	f043 0220 	orr.w	r2, r3, #32
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e007      	b.n	8005c34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	f003 0304 	and.w	r3, r3, #4
 8005c2e:	2b04      	cmp	r3, #4
 8005c30:	d1c3      	bne.n	8005bba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c48:	e049      	b.n	8005cde <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	f003 0310 	and.w	r3, r3, #16
 8005c54:	2b10      	cmp	r3, #16
 8005c56:	d119      	bne.n	8005c8c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f06f 0210 	mvn.w	r2, #16
 8005c60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2220      	movs	r2, #32
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e030      	b.n	8005cee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c8c:	f7fe f996 	bl	8003fbc <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d302      	bcc.n	8005ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d11d      	bne.n	8005cde <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cac:	2b40      	cmp	r3, #64	@ 0x40
 8005cae:	d016      	beq.n	8005cde <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cca:	f043 0220 	orr.w	r2, r3, #32
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e007      	b.n	8005cee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ce8:	2b40      	cmp	r3, #64	@ 0x40
 8005cea:	d1ae      	bne.n	8005c4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b083      	sub	sp, #12
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d0c:	d11b      	bne.n	8005d46 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005d16:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2220      	movs	r2, #32
 8005d22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d32:	f043 0204 	orr.w	r2, r3, #4
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e000      	b.n	8005d48 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bc80      	pop	{r7}
 8005d50:	4770      	bx	lr
	...

08005d54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e272      	b.n	800624c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f000 8087 	beq.w	8005e82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d74:	4b92      	ldr	r3, [pc, #584]	@ (8005fc0 <HAL_RCC_OscConfig+0x26c>)
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f003 030c 	and.w	r3, r3, #12
 8005d7c:	2b04      	cmp	r3, #4
 8005d7e:	d00c      	beq.n	8005d9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005d80:	4b8f      	ldr	r3, [pc, #572]	@ (8005fc0 <HAL_RCC_OscConfig+0x26c>)
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f003 030c 	and.w	r3, r3, #12
 8005d88:	2b08      	cmp	r3, #8
 8005d8a:	d112      	bne.n	8005db2 <HAL_RCC_OscConfig+0x5e>
 8005d8c:	4b8c      	ldr	r3, [pc, #560]	@ (8005fc0 <HAL_RCC_OscConfig+0x26c>)
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d98:	d10b      	bne.n	8005db2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d9a:	4b89      	ldr	r3, [pc, #548]	@ (8005fc0 <HAL_RCC_OscConfig+0x26c>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d06c      	beq.n	8005e80 <HAL_RCC_OscConfig+0x12c>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d168      	bne.n	8005e80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e24c      	b.n	800624c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dba:	d106      	bne.n	8005dca <HAL_RCC_OscConfig+0x76>
 8005dbc:	4b80      	ldr	r3, [pc, #512]	@ (8005fc0 <HAL_RCC_OscConfig+0x26c>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a7f      	ldr	r2, [pc, #508]	@ (8005fc0 <HAL_RCC_OscConfig+0x26c>)
 8005dc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dc6:	6013      	str	r3, [r2, #0]
 8005dc8:	e02e      	b.n	8005e28 <HAL_RCC_OscConfig+0xd4>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10c      	bne.n	8005dec <HAL_RCC_OscConfig+0x98>
 8005dd2:	4b7b      	ldr	r3, [pc, #492]	@ (8005fc0 <HAL_RCC_OscConfig+0x26c>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a7a      	ldr	r2, [pc, #488]	@ (8005fc0 <HAL_RCC_OscConfig+0x26c>)
 8005dd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ddc:	6013      	str	r3, [r2, #0]
 8005dde:	4b78      	ldr	r3, [pc, #480]	@ (8005fc0 <HAL_RCC_OscConfig+0x26c>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a77      	ldr	r2, [pc, #476]	@ (8005fc0 <HAL_RCC_OscConfig+0x26c>)
 8005de4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005de8:	6013      	str	r3, [r2, #0]
 8005dea:	e01d      	b.n	8005e28 <HAL_RCC_OscConfig+0xd4>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005df4:	d10c      	bne.n	8005e10 <HAL_RCC_OscConfig+0xbc>
 8005df6:	4b72      	ldr	r3, [pc, #456]	@ (8005fc0 <HAL_RCC_OscConfig+0x26c>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a71      	ldr	r2, [pc, #452]	@ (8005fc0 <HAL_RCC_OscConfig+0x26c>)
 8005dfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e00:	6013      	str	r3, [r2, #0]
 8005e02:	4b6f      	ldr	r3, [pc, #444]	@ (8005fc0 <HAL_RCC_OscConfig+0x26c>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a6e      	ldr	r2, [pc, #440]	@ (8005fc0 <HAL_RCC_OscConfig+0x26c>)
 8005e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e0c:	6013      	str	r3, [r2, #0]
 8005e0e:	e00b      	b.n	8005e28 <HAL_RCC_OscConfig+0xd4>
 8005e10:	4b6b      	ldr	r3, [pc, #428]	@ (8005fc0 <HAL_RCC_OscConfig+0x26c>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a6a      	ldr	r2, [pc, #424]	@ (8005fc0 <HAL_RCC_OscConfig+0x26c>)
 8005e16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e1a:	6013      	str	r3, [r2, #0]
 8005e1c:	4b68      	ldr	r3, [pc, #416]	@ (8005fc0 <HAL_RCC_OscConfig+0x26c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a67      	ldr	r2, [pc, #412]	@ (8005fc0 <HAL_RCC_OscConfig+0x26c>)
 8005e22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d013      	beq.n	8005e58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e30:	f7fe f8c4 	bl	8003fbc <HAL_GetTick>
 8005e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e36:	e008      	b.n	8005e4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e38:	f7fe f8c0 	bl	8003fbc <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b64      	cmp	r3, #100	@ 0x64
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e200      	b.n	800624c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e4a:	4b5d      	ldr	r3, [pc, #372]	@ (8005fc0 <HAL_RCC_OscConfig+0x26c>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d0f0      	beq.n	8005e38 <HAL_RCC_OscConfig+0xe4>
 8005e56:	e014      	b.n	8005e82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e58:	f7fe f8b0 	bl	8003fbc <HAL_GetTick>
 8005e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e5e:	e008      	b.n	8005e72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e60:	f7fe f8ac 	bl	8003fbc <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b64      	cmp	r3, #100	@ 0x64
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e1ec      	b.n	800624c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e72:	4b53      	ldr	r3, [pc, #332]	@ (8005fc0 <HAL_RCC_OscConfig+0x26c>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1f0      	bne.n	8005e60 <HAL_RCC_OscConfig+0x10c>
 8005e7e:	e000      	b.n	8005e82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d063      	beq.n	8005f56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e8e:	4b4c      	ldr	r3, [pc, #304]	@ (8005fc0 <HAL_RCC_OscConfig+0x26c>)
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f003 030c 	and.w	r3, r3, #12
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00b      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005e9a:	4b49      	ldr	r3, [pc, #292]	@ (8005fc0 <HAL_RCC_OscConfig+0x26c>)
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f003 030c 	and.w	r3, r3, #12
 8005ea2:	2b08      	cmp	r3, #8
 8005ea4:	d11c      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x18c>
 8005ea6:	4b46      	ldr	r3, [pc, #280]	@ (8005fc0 <HAL_RCC_OscConfig+0x26c>)
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d116      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eb2:	4b43      	ldr	r3, [pc, #268]	@ (8005fc0 <HAL_RCC_OscConfig+0x26c>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d005      	beq.n	8005eca <HAL_RCC_OscConfig+0x176>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d001      	beq.n	8005eca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e1c0      	b.n	800624c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eca:	4b3d      	ldr	r3, [pc, #244]	@ (8005fc0 <HAL_RCC_OscConfig+0x26c>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	00db      	lsls	r3, r3, #3
 8005ed8:	4939      	ldr	r1, [pc, #228]	@ (8005fc0 <HAL_RCC_OscConfig+0x26c>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ede:	e03a      	b.n	8005f56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d020      	beq.n	8005f2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ee8:	4b36      	ldr	r3, [pc, #216]	@ (8005fc4 <HAL_RCC_OscConfig+0x270>)
 8005eea:	2201      	movs	r2, #1
 8005eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eee:	f7fe f865 	bl	8003fbc <HAL_GetTick>
 8005ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ef4:	e008      	b.n	8005f08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ef6:	f7fe f861 	bl	8003fbc <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d901      	bls.n	8005f08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e1a1      	b.n	800624c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f08:	4b2d      	ldr	r3, [pc, #180]	@ (8005fc0 <HAL_RCC_OscConfig+0x26c>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d0f0      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f14:	4b2a      	ldr	r3, [pc, #168]	@ (8005fc0 <HAL_RCC_OscConfig+0x26c>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	00db      	lsls	r3, r3, #3
 8005f22:	4927      	ldr	r1, [pc, #156]	@ (8005fc0 <HAL_RCC_OscConfig+0x26c>)
 8005f24:	4313      	orrs	r3, r2
 8005f26:	600b      	str	r3, [r1, #0]
 8005f28:	e015      	b.n	8005f56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f2a:	4b26      	ldr	r3, [pc, #152]	@ (8005fc4 <HAL_RCC_OscConfig+0x270>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f30:	f7fe f844 	bl	8003fbc <HAL_GetTick>
 8005f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f36:	e008      	b.n	8005f4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f38:	f7fe f840 	bl	8003fbc <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d901      	bls.n	8005f4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e180      	b.n	800624c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8005fc0 <HAL_RCC_OscConfig+0x26c>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0302 	and.w	r3, r3, #2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1f0      	bne.n	8005f38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0308 	and.w	r3, r3, #8
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d03a      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d019      	beq.n	8005f9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f6a:	4b17      	ldr	r3, [pc, #92]	@ (8005fc8 <HAL_RCC_OscConfig+0x274>)
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f70:	f7fe f824 	bl	8003fbc <HAL_GetTick>
 8005f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f76:	e008      	b.n	8005f8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f78:	f7fe f820 	bl	8003fbc <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e160      	b.n	800624c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005fc0 <HAL_RCC_OscConfig+0x26c>)
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d0f0      	beq.n	8005f78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005f96:	2001      	movs	r0, #1
 8005f98:	f000 face 	bl	8006538 <RCC_Delay>
 8005f9c:	e01c      	b.n	8005fd8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8005fc8 <HAL_RCC_OscConfig+0x274>)
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fa4:	f7fe f80a 	bl	8003fbc <HAL_GetTick>
 8005fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005faa:	e00f      	b.n	8005fcc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fac:	f7fe f806 	bl	8003fbc <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d908      	bls.n	8005fcc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e146      	b.n	800624c <HAL_RCC_OscConfig+0x4f8>
 8005fbe:	bf00      	nop
 8005fc0:	40021000 	.word	0x40021000
 8005fc4:	42420000 	.word	0x42420000
 8005fc8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fcc:	4b92      	ldr	r3, [pc, #584]	@ (8006218 <HAL_RCC_OscConfig+0x4c4>)
 8005fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd0:	f003 0302 	and.w	r3, r3, #2
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1e9      	bne.n	8005fac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0304 	and.w	r3, r3, #4
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 80a6 	beq.w	8006132 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fea:	4b8b      	ldr	r3, [pc, #556]	@ (8006218 <HAL_RCC_OscConfig+0x4c4>)
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10d      	bne.n	8006012 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ff6:	4b88      	ldr	r3, [pc, #544]	@ (8006218 <HAL_RCC_OscConfig+0x4c4>)
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	4a87      	ldr	r2, [pc, #540]	@ (8006218 <HAL_RCC_OscConfig+0x4c4>)
 8005ffc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006000:	61d3      	str	r3, [r2, #28]
 8006002:	4b85      	ldr	r3, [pc, #532]	@ (8006218 <HAL_RCC_OscConfig+0x4c4>)
 8006004:	69db      	ldr	r3, [r3, #28]
 8006006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800600a:	60bb      	str	r3, [r7, #8]
 800600c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800600e:	2301      	movs	r3, #1
 8006010:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006012:	4b82      	ldr	r3, [pc, #520]	@ (800621c <HAL_RCC_OscConfig+0x4c8>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800601a:	2b00      	cmp	r3, #0
 800601c:	d118      	bne.n	8006050 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800601e:	4b7f      	ldr	r3, [pc, #508]	@ (800621c <HAL_RCC_OscConfig+0x4c8>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a7e      	ldr	r2, [pc, #504]	@ (800621c <HAL_RCC_OscConfig+0x4c8>)
 8006024:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006028:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800602a:	f7fd ffc7 	bl	8003fbc <HAL_GetTick>
 800602e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006030:	e008      	b.n	8006044 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006032:	f7fd ffc3 	bl	8003fbc <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	2b64      	cmp	r3, #100	@ 0x64
 800603e:	d901      	bls.n	8006044 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e103      	b.n	800624c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006044:	4b75      	ldr	r3, [pc, #468]	@ (800621c <HAL_RCC_OscConfig+0x4c8>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800604c:	2b00      	cmp	r3, #0
 800604e:	d0f0      	beq.n	8006032 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d106      	bne.n	8006066 <HAL_RCC_OscConfig+0x312>
 8006058:	4b6f      	ldr	r3, [pc, #444]	@ (8006218 <HAL_RCC_OscConfig+0x4c4>)
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	4a6e      	ldr	r2, [pc, #440]	@ (8006218 <HAL_RCC_OscConfig+0x4c4>)
 800605e:	f043 0301 	orr.w	r3, r3, #1
 8006062:	6213      	str	r3, [r2, #32]
 8006064:	e02d      	b.n	80060c2 <HAL_RCC_OscConfig+0x36e>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10c      	bne.n	8006088 <HAL_RCC_OscConfig+0x334>
 800606e:	4b6a      	ldr	r3, [pc, #424]	@ (8006218 <HAL_RCC_OscConfig+0x4c4>)
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	4a69      	ldr	r2, [pc, #420]	@ (8006218 <HAL_RCC_OscConfig+0x4c4>)
 8006074:	f023 0301 	bic.w	r3, r3, #1
 8006078:	6213      	str	r3, [r2, #32]
 800607a:	4b67      	ldr	r3, [pc, #412]	@ (8006218 <HAL_RCC_OscConfig+0x4c4>)
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	4a66      	ldr	r2, [pc, #408]	@ (8006218 <HAL_RCC_OscConfig+0x4c4>)
 8006080:	f023 0304 	bic.w	r3, r3, #4
 8006084:	6213      	str	r3, [r2, #32]
 8006086:	e01c      	b.n	80060c2 <HAL_RCC_OscConfig+0x36e>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	2b05      	cmp	r3, #5
 800608e:	d10c      	bne.n	80060aa <HAL_RCC_OscConfig+0x356>
 8006090:	4b61      	ldr	r3, [pc, #388]	@ (8006218 <HAL_RCC_OscConfig+0x4c4>)
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	4a60      	ldr	r2, [pc, #384]	@ (8006218 <HAL_RCC_OscConfig+0x4c4>)
 8006096:	f043 0304 	orr.w	r3, r3, #4
 800609a:	6213      	str	r3, [r2, #32]
 800609c:	4b5e      	ldr	r3, [pc, #376]	@ (8006218 <HAL_RCC_OscConfig+0x4c4>)
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	4a5d      	ldr	r2, [pc, #372]	@ (8006218 <HAL_RCC_OscConfig+0x4c4>)
 80060a2:	f043 0301 	orr.w	r3, r3, #1
 80060a6:	6213      	str	r3, [r2, #32]
 80060a8:	e00b      	b.n	80060c2 <HAL_RCC_OscConfig+0x36e>
 80060aa:	4b5b      	ldr	r3, [pc, #364]	@ (8006218 <HAL_RCC_OscConfig+0x4c4>)
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	4a5a      	ldr	r2, [pc, #360]	@ (8006218 <HAL_RCC_OscConfig+0x4c4>)
 80060b0:	f023 0301 	bic.w	r3, r3, #1
 80060b4:	6213      	str	r3, [r2, #32]
 80060b6:	4b58      	ldr	r3, [pc, #352]	@ (8006218 <HAL_RCC_OscConfig+0x4c4>)
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	4a57      	ldr	r2, [pc, #348]	@ (8006218 <HAL_RCC_OscConfig+0x4c4>)
 80060bc:	f023 0304 	bic.w	r3, r3, #4
 80060c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d015      	beq.n	80060f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060ca:	f7fd ff77 	bl	8003fbc <HAL_GetTick>
 80060ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060d0:	e00a      	b.n	80060e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060d2:	f7fd ff73 	bl	8003fbc <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d901      	bls.n	80060e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e0b1      	b.n	800624c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060e8:	4b4b      	ldr	r3, [pc, #300]	@ (8006218 <HAL_RCC_OscConfig+0x4c4>)
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	f003 0302 	and.w	r3, r3, #2
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d0ee      	beq.n	80060d2 <HAL_RCC_OscConfig+0x37e>
 80060f4:	e014      	b.n	8006120 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060f6:	f7fd ff61 	bl	8003fbc <HAL_GetTick>
 80060fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060fc:	e00a      	b.n	8006114 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060fe:	f7fd ff5d 	bl	8003fbc <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	f241 3288 	movw	r2, #5000	@ 0x1388
 800610c:	4293      	cmp	r3, r2
 800610e:	d901      	bls.n	8006114 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e09b      	b.n	800624c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006114:	4b40      	ldr	r3, [pc, #256]	@ (8006218 <HAL_RCC_OscConfig+0x4c4>)
 8006116:	6a1b      	ldr	r3, [r3, #32]
 8006118:	f003 0302 	and.w	r3, r3, #2
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1ee      	bne.n	80060fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006120:	7dfb      	ldrb	r3, [r7, #23]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d105      	bne.n	8006132 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006126:	4b3c      	ldr	r3, [pc, #240]	@ (8006218 <HAL_RCC_OscConfig+0x4c4>)
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	4a3b      	ldr	r2, [pc, #236]	@ (8006218 <HAL_RCC_OscConfig+0x4c4>)
 800612c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006130:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	2b00      	cmp	r3, #0
 8006138:	f000 8087 	beq.w	800624a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800613c:	4b36      	ldr	r3, [pc, #216]	@ (8006218 <HAL_RCC_OscConfig+0x4c4>)
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	f003 030c 	and.w	r3, r3, #12
 8006144:	2b08      	cmp	r3, #8
 8006146:	d061      	beq.n	800620c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	69db      	ldr	r3, [r3, #28]
 800614c:	2b02      	cmp	r3, #2
 800614e:	d146      	bne.n	80061de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006150:	4b33      	ldr	r3, [pc, #204]	@ (8006220 <HAL_RCC_OscConfig+0x4cc>)
 8006152:	2200      	movs	r2, #0
 8006154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006156:	f7fd ff31 	bl	8003fbc <HAL_GetTick>
 800615a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800615c:	e008      	b.n	8006170 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800615e:	f7fd ff2d 	bl	8003fbc <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	2b02      	cmp	r3, #2
 800616a:	d901      	bls.n	8006170 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e06d      	b.n	800624c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006170:	4b29      	ldr	r3, [pc, #164]	@ (8006218 <HAL_RCC_OscConfig+0x4c4>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1f0      	bne.n	800615e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a1b      	ldr	r3, [r3, #32]
 8006180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006184:	d108      	bne.n	8006198 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006186:	4b24      	ldr	r3, [pc, #144]	@ (8006218 <HAL_RCC_OscConfig+0x4c4>)
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	4921      	ldr	r1, [pc, #132]	@ (8006218 <HAL_RCC_OscConfig+0x4c4>)
 8006194:	4313      	orrs	r3, r2
 8006196:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006198:	4b1f      	ldr	r3, [pc, #124]	@ (8006218 <HAL_RCC_OscConfig+0x4c4>)
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a19      	ldr	r1, [r3, #32]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a8:	430b      	orrs	r3, r1
 80061aa:	491b      	ldr	r1, [pc, #108]	@ (8006218 <HAL_RCC_OscConfig+0x4c4>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061b0:	4b1b      	ldr	r3, [pc, #108]	@ (8006220 <HAL_RCC_OscConfig+0x4cc>)
 80061b2:	2201      	movs	r2, #1
 80061b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061b6:	f7fd ff01 	bl	8003fbc <HAL_GetTick>
 80061ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80061bc:	e008      	b.n	80061d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061be:	f7fd fefd 	bl	8003fbc <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d901      	bls.n	80061d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e03d      	b.n	800624c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80061d0:	4b11      	ldr	r3, [pc, #68]	@ (8006218 <HAL_RCC_OscConfig+0x4c4>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d0f0      	beq.n	80061be <HAL_RCC_OscConfig+0x46a>
 80061dc:	e035      	b.n	800624a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061de:	4b10      	ldr	r3, [pc, #64]	@ (8006220 <HAL_RCC_OscConfig+0x4cc>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061e4:	f7fd feea 	bl	8003fbc <HAL_GetTick>
 80061e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061ea:	e008      	b.n	80061fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061ec:	f7fd fee6 	bl	8003fbc <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d901      	bls.n	80061fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e026      	b.n	800624c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061fe:	4b06      	ldr	r3, [pc, #24]	@ (8006218 <HAL_RCC_OscConfig+0x4c4>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1f0      	bne.n	80061ec <HAL_RCC_OscConfig+0x498>
 800620a:	e01e      	b.n	800624a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	69db      	ldr	r3, [r3, #28]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d107      	bne.n	8006224 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e019      	b.n	800624c <HAL_RCC_OscConfig+0x4f8>
 8006218:	40021000 	.word	0x40021000
 800621c:	40007000 	.word	0x40007000
 8006220:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006224:	4b0b      	ldr	r3, [pc, #44]	@ (8006254 <HAL_RCC_OscConfig+0x500>)
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a1b      	ldr	r3, [r3, #32]
 8006234:	429a      	cmp	r2, r3
 8006236:	d106      	bne.n	8006246 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006242:	429a      	cmp	r2, r3
 8006244:	d001      	beq.n	800624a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e000      	b.n	800624c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3718      	adds	r7, #24
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	40021000 	.word	0x40021000

08006258 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e0d0      	b.n	800640e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800626c:	4b6a      	ldr	r3, [pc, #424]	@ (8006418 <HAL_RCC_ClockConfig+0x1c0>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0307 	and.w	r3, r3, #7
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	429a      	cmp	r2, r3
 8006278:	d910      	bls.n	800629c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800627a:	4b67      	ldr	r3, [pc, #412]	@ (8006418 <HAL_RCC_ClockConfig+0x1c0>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f023 0207 	bic.w	r2, r3, #7
 8006282:	4965      	ldr	r1, [pc, #404]	@ (8006418 <HAL_RCC_ClockConfig+0x1c0>)
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	4313      	orrs	r3, r2
 8006288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800628a:	4b63      	ldr	r3, [pc, #396]	@ (8006418 <HAL_RCC_ClockConfig+0x1c0>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0307 	and.w	r3, r3, #7
 8006292:	683a      	ldr	r2, [r7, #0]
 8006294:	429a      	cmp	r2, r3
 8006296:	d001      	beq.n	800629c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e0b8      	b.n	800640e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0302 	and.w	r3, r3, #2
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d020      	beq.n	80062ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0304 	and.w	r3, r3, #4
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d005      	beq.n	80062c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062b4:	4b59      	ldr	r3, [pc, #356]	@ (800641c <HAL_RCC_ClockConfig+0x1c4>)
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	4a58      	ldr	r2, [pc, #352]	@ (800641c <HAL_RCC_ClockConfig+0x1c4>)
 80062ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80062be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0308 	and.w	r3, r3, #8
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d005      	beq.n	80062d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062cc:	4b53      	ldr	r3, [pc, #332]	@ (800641c <HAL_RCC_ClockConfig+0x1c4>)
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	4a52      	ldr	r2, [pc, #328]	@ (800641c <HAL_RCC_ClockConfig+0x1c4>)
 80062d2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80062d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062d8:	4b50      	ldr	r3, [pc, #320]	@ (800641c <HAL_RCC_ClockConfig+0x1c4>)
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	494d      	ldr	r1, [pc, #308]	@ (800641c <HAL_RCC_ClockConfig+0x1c4>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d040      	beq.n	8006378 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d107      	bne.n	800630e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062fe:	4b47      	ldr	r3, [pc, #284]	@ (800641c <HAL_RCC_ClockConfig+0x1c4>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d115      	bne.n	8006336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e07f      	b.n	800640e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	2b02      	cmp	r3, #2
 8006314:	d107      	bne.n	8006326 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006316:	4b41      	ldr	r3, [pc, #260]	@ (800641c <HAL_RCC_ClockConfig+0x1c4>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d109      	bne.n	8006336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e073      	b.n	800640e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006326:	4b3d      	ldr	r3, [pc, #244]	@ (800641c <HAL_RCC_ClockConfig+0x1c4>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e06b      	b.n	800640e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006336:	4b39      	ldr	r3, [pc, #228]	@ (800641c <HAL_RCC_ClockConfig+0x1c4>)
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f023 0203 	bic.w	r2, r3, #3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	4936      	ldr	r1, [pc, #216]	@ (800641c <HAL_RCC_ClockConfig+0x1c4>)
 8006344:	4313      	orrs	r3, r2
 8006346:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006348:	f7fd fe38 	bl	8003fbc <HAL_GetTick>
 800634c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800634e:	e00a      	b.n	8006366 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006350:	f7fd fe34 	bl	8003fbc <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800635e:	4293      	cmp	r3, r2
 8006360:	d901      	bls.n	8006366 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e053      	b.n	800640e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006366:	4b2d      	ldr	r3, [pc, #180]	@ (800641c <HAL_RCC_ClockConfig+0x1c4>)
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f003 020c 	and.w	r2, r3, #12
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	429a      	cmp	r2, r3
 8006376:	d1eb      	bne.n	8006350 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006378:	4b27      	ldr	r3, [pc, #156]	@ (8006418 <HAL_RCC_ClockConfig+0x1c0>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0307 	and.w	r3, r3, #7
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	429a      	cmp	r2, r3
 8006384:	d210      	bcs.n	80063a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006386:	4b24      	ldr	r3, [pc, #144]	@ (8006418 <HAL_RCC_ClockConfig+0x1c0>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f023 0207 	bic.w	r2, r3, #7
 800638e:	4922      	ldr	r1, [pc, #136]	@ (8006418 <HAL_RCC_ClockConfig+0x1c0>)
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	4313      	orrs	r3, r2
 8006394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006396:	4b20      	ldr	r3, [pc, #128]	@ (8006418 <HAL_RCC_ClockConfig+0x1c0>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0307 	and.w	r3, r3, #7
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d001      	beq.n	80063a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e032      	b.n	800640e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0304 	and.w	r3, r3, #4
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d008      	beq.n	80063c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063b4:	4b19      	ldr	r3, [pc, #100]	@ (800641c <HAL_RCC_ClockConfig+0x1c4>)
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	4916      	ldr	r1, [pc, #88]	@ (800641c <HAL_RCC_ClockConfig+0x1c4>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0308 	and.w	r3, r3, #8
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d009      	beq.n	80063e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80063d2:	4b12      	ldr	r3, [pc, #72]	@ (800641c <HAL_RCC_ClockConfig+0x1c4>)
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	00db      	lsls	r3, r3, #3
 80063e0:	490e      	ldr	r1, [pc, #56]	@ (800641c <HAL_RCC_ClockConfig+0x1c4>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80063e6:	f000 f821 	bl	800642c <HAL_RCC_GetSysClockFreq>
 80063ea:	4602      	mov	r2, r0
 80063ec:	4b0b      	ldr	r3, [pc, #44]	@ (800641c <HAL_RCC_ClockConfig+0x1c4>)
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	091b      	lsrs	r3, r3, #4
 80063f2:	f003 030f 	and.w	r3, r3, #15
 80063f6:	490a      	ldr	r1, [pc, #40]	@ (8006420 <HAL_RCC_ClockConfig+0x1c8>)
 80063f8:	5ccb      	ldrb	r3, [r1, r3]
 80063fa:	fa22 f303 	lsr.w	r3, r2, r3
 80063fe:	4a09      	ldr	r2, [pc, #36]	@ (8006424 <HAL_RCC_ClockConfig+0x1cc>)
 8006400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006402:	4b09      	ldr	r3, [pc, #36]	@ (8006428 <HAL_RCC_ClockConfig+0x1d0>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4618      	mov	r0, r3
 8006408:	f7fd fd96 	bl	8003f38 <HAL_InitTick>

  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	40022000 	.word	0x40022000
 800641c:	40021000 	.word	0x40021000
 8006420:	0800b6b0 	.word	0x0800b6b0
 8006424:	200000a8 	.word	0x200000a8
 8006428:	200000ac 	.word	0x200000ac

0800642c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800642c:	b480      	push	{r7}
 800642e:	b087      	sub	sp, #28
 8006430:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006432:	2300      	movs	r3, #0
 8006434:	60fb      	str	r3, [r7, #12]
 8006436:	2300      	movs	r3, #0
 8006438:	60bb      	str	r3, [r7, #8]
 800643a:	2300      	movs	r3, #0
 800643c:	617b      	str	r3, [r7, #20]
 800643e:	2300      	movs	r3, #0
 8006440:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006442:	2300      	movs	r3, #0
 8006444:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006446:	4b1e      	ldr	r3, [pc, #120]	@ (80064c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f003 030c 	and.w	r3, r3, #12
 8006452:	2b04      	cmp	r3, #4
 8006454:	d002      	beq.n	800645c <HAL_RCC_GetSysClockFreq+0x30>
 8006456:	2b08      	cmp	r3, #8
 8006458:	d003      	beq.n	8006462 <HAL_RCC_GetSysClockFreq+0x36>
 800645a:	e027      	b.n	80064ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800645c:	4b19      	ldr	r3, [pc, #100]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800645e:	613b      	str	r3, [r7, #16]
      break;
 8006460:	e027      	b.n	80064b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	0c9b      	lsrs	r3, r3, #18
 8006466:	f003 030f 	and.w	r3, r3, #15
 800646a:	4a17      	ldr	r2, [pc, #92]	@ (80064c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800646c:	5cd3      	ldrb	r3, [r2, r3]
 800646e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d010      	beq.n	800649c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800647a:	4b11      	ldr	r3, [pc, #68]	@ (80064c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	0c5b      	lsrs	r3, r3, #17
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	4a11      	ldr	r2, [pc, #68]	@ (80064cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8006486:	5cd3      	ldrb	r3, [r2, r3]
 8006488:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a0d      	ldr	r2, [pc, #52]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800648e:	fb03 f202 	mul.w	r2, r3, r2
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	fbb2 f3f3 	udiv	r3, r2, r3
 8006498:	617b      	str	r3, [r7, #20]
 800649a:	e004      	b.n	80064a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a0c      	ldr	r2, [pc, #48]	@ (80064d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80064a0:	fb02 f303 	mul.w	r3, r2, r3
 80064a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	613b      	str	r3, [r7, #16]
      break;
 80064aa:	e002      	b.n	80064b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80064ac:	4b05      	ldr	r3, [pc, #20]	@ (80064c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80064ae:	613b      	str	r3, [r7, #16]
      break;
 80064b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064b2:	693b      	ldr	r3, [r7, #16]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	371c      	adds	r7, #28
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bc80      	pop	{r7}
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	40021000 	.word	0x40021000
 80064c4:	007a1200 	.word	0x007a1200
 80064c8:	0800b6c8 	.word	0x0800b6c8
 80064cc:	0800b6d8 	.word	0x0800b6d8
 80064d0:	003d0900 	.word	0x003d0900

080064d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064d4:	b480      	push	{r7}
 80064d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064d8:	4b02      	ldr	r3, [pc, #8]	@ (80064e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80064da:	681b      	ldr	r3, [r3, #0]
}
 80064dc:	4618      	mov	r0, r3
 80064de:	46bd      	mov	sp, r7
 80064e0:	bc80      	pop	{r7}
 80064e2:	4770      	bx	lr
 80064e4:	200000a8 	.word	0x200000a8

080064e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80064ec:	f7ff fff2 	bl	80064d4 <HAL_RCC_GetHCLKFreq>
 80064f0:	4602      	mov	r2, r0
 80064f2:	4b05      	ldr	r3, [pc, #20]	@ (8006508 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	0a1b      	lsrs	r3, r3, #8
 80064f8:	f003 0307 	and.w	r3, r3, #7
 80064fc:	4903      	ldr	r1, [pc, #12]	@ (800650c <HAL_RCC_GetPCLK1Freq+0x24>)
 80064fe:	5ccb      	ldrb	r3, [r1, r3]
 8006500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006504:	4618      	mov	r0, r3
 8006506:	bd80      	pop	{r7, pc}
 8006508:	40021000 	.word	0x40021000
 800650c:	0800b6c0 	.word	0x0800b6c0

08006510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006514:	f7ff ffde 	bl	80064d4 <HAL_RCC_GetHCLKFreq>
 8006518:	4602      	mov	r2, r0
 800651a:	4b05      	ldr	r3, [pc, #20]	@ (8006530 <HAL_RCC_GetPCLK2Freq+0x20>)
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	0adb      	lsrs	r3, r3, #11
 8006520:	f003 0307 	and.w	r3, r3, #7
 8006524:	4903      	ldr	r1, [pc, #12]	@ (8006534 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006526:	5ccb      	ldrb	r3, [r1, r3]
 8006528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800652c:	4618      	mov	r0, r3
 800652e:	bd80      	pop	{r7, pc}
 8006530:	40021000 	.word	0x40021000
 8006534:	0800b6c0 	.word	0x0800b6c0

08006538 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006540:	4b0a      	ldr	r3, [pc, #40]	@ (800656c <RCC_Delay+0x34>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a0a      	ldr	r2, [pc, #40]	@ (8006570 <RCC_Delay+0x38>)
 8006546:	fba2 2303 	umull	r2, r3, r2, r3
 800654a:	0a5b      	lsrs	r3, r3, #9
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	fb02 f303 	mul.w	r3, r2, r3
 8006552:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006554:	bf00      	nop
  }
  while (Delay --);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	1e5a      	subs	r2, r3, #1
 800655a:	60fa      	str	r2, [r7, #12]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1f9      	bne.n	8006554 <RCC_Delay+0x1c>
}
 8006560:	bf00      	nop
 8006562:	bf00      	nop
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	bc80      	pop	{r7}
 800656a:	4770      	bx	lr
 800656c:	200000a8 	.word	0x200000a8
 8006570:	10624dd3 	.word	0x10624dd3

08006574 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d101      	bne.n	8006586 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e076      	b.n	8006674 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800658a:	2b00      	cmp	r3, #0
 800658c:	d108      	bne.n	80065a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006596:	d009      	beq.n	80065ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	61da      	str	r2, [r3, #28]
 800659e:	e005      	b.n	80065ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d106      	bne.n	80065cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7fd faa2 	bl	8003b10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2202      	movs	r2, #2
 80065d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80065f4:	431a      	orrs	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065fe:	431a      	orrs	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	f003 0302 	and.w	r3, r3, #2
 8006608:	431a      	orrs	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	431a      	orrs	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800661c:	431a      	orrs	r2, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006626:	431a      	orrs	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a1b      	ldr	r3, [r3, #32]
 800662c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006630:	ea42 0103 	orr.w	r1, r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006638:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	430a      	orrs	r2, r1
 8006642:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	0c1a      	lsrs	r2, r3, #16
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f002 0204 	and.w	r2, r2, #4
 8006652:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	69da      	ldr	r2, [r3, #28]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006662:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2201      	movs	r2, #1
 800666e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3708      	adds	r7, #8
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b088      	sub	sp, #32
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	603b      	str	r3, [r7, #0]
 8006688:	4613      	mov	r3, r2
 800668a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800668c:	f7fd fc96 	bl	8003fbc <HAL_GetTick>
 8006690:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006692:	88fb      	ldrh	r3, [r7, #6]
 8006694:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d001      	beq.n	80066a6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80066a2:	2302      	movs	r3, #2
 80066a4:	e12a      	b.n	80068fc <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d002      	beq.n	80066b2 <HAL_SPI_Transmit+0x36>
 80066ac:	88fb      	ldrh	r3, [r7, #6]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d101      	bne.n	80066b6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e122      	b.n	80068fc <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d101      	bne.n	80066c4 <HAL_SPI_Transmit+0x48>
 80066c0:	2302      	movs	r3, #2
 80066c2:	e11b      	b.n	80068fc <HAL_SPI_Transmit+0x280>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2203      	movs	r2, #3
 80066d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	68ba      	ldr	r2, [r7, #8]
 80066de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	88fa      	ldrh	r2, [r7, #6]
 80066e4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	88fa      	ldrh	r2, [r7, #6]
 80066ea:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006712:	d10f      	bne.n	8006734 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006722:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006732:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800673e:	2b40      	cmp	r3, #64	@ 0x40
 8006740:	d007      	beq.n	8006752 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006750:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800675a:	d152      	bne.n	8006802 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d002      	beq.n	800676a <HAL_SPI_Transmit+0xee>
 8006764:	8b7b      	ldrh	r3, [r7, #26]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d145      	bne.n	80067f6 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800676e:	881a      	ldrh	r2, [r3, #0]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800677a:	1c9a      	adds	r2, r3, #2
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006784:	b29b      	uxth	r3, r3
 8006786:	3b01      	subs	r3, #1
 8006788:	b29a      	uxth	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800678e:	e032      	b.n	80067f6 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f003 0302 	and.w	r3, r3, #2
 800679a:	2b02      	cmp	r3, #2
 800679c:	d112      	bne.n	80067c4 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067a2:	881a      	ldrh	r2, [r3, #0]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ae:	1c9a      	adds	r2, r3, #2
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	3b01      	subs	r3, #1
 80067bc:	b29a      	uxth	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80067c2:	e018      	b.n	80067f6 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067c4:	f7fd fbfa 	bl	8003fbc <HAL_GetTick>
 80067c8:	4602      	mov	r2, r0
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	683a      	ldr	r2, [r7, #0]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d803      	bhi.n	80067dc <HAL_SPI_Transmit+0x160>
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067da:	d102      	bne.n	80067e2 <HAL_SPI_Transmit+0x166>
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d109      	bne.n	80067f6 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e082      	b.n	80068fc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1c7      	bne.n	8006790 <HAL_SPI_Transmit+0x114>
 8006800:	e053      	b.n	80068aa <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d002      	beq.n	8006810 <HAL_SPI_Transmit+0x194>
 800680a:	8b7b      	ldrh	r3, [r7, #26]
 800680c:	2b01      	cmp	r3, #1
 800680e:	d147      	bne.n	80068a0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	330c      	adds	r3, #12
 800681a:	7812      	ldrb	r2, [r2, #0]
 800681c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006822:	1c5a      	adds	r2, r3, #1
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800682c:	b29b      	uxth	r3, r3
 800682e:	3b01      	subs	r3, #1
 8006830:	b29a      	uxth	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006836:	e033      	b.n	80068a0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f003 0302 	and.w	r3, r3, #2
 8006842:	2b02      	cmp	r3, #2
 8006844:	d113      	bne.n	800686e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	330c      	adds	r3, #12
 8006850:	7812      	ldrb	r2, [r2, #0]
 8006852:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006858:	1c5a      	adds	r2, r3, #1
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006862:	b29b      	uxth	r3, r3
 8006864:	3b01      	subs	r3, #1
 8006866:	b29a      	uxth	r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800686c:	e018      	b.n	80068a0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800686e:	f7fd fba5 	bl	8003fbc <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	683a      	ldr	r2, [r7, #0]
 800687a:	429a      	cmp	r2, r3
 800687c:	d803      	bhi.n	8006886 <HAL_SPI_Transmit+0x20a>
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006884:	d102      	bne.n	800688c <HAL_SPI_Transmit+0x210>
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d109      	bne.n	80068a0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e02d      	b.n	80068fc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1c6      	bne.n	8006838 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068aa:	69fa      	ldr	r2, [r7, #28]
 80068ac:	6839      	ldr	r1, [r7, #0]
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f000 fbd2 	bl	8007058 <SPI_EndRxTxTransaction>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d002      	beq.n	80068c0 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2220      	movs	r2, #32
 80068be:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10a      	bne.n	80068de <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068c8:	2300      	movs	r3, #0
 80068ca:	617b      	str	r3, [r7, #20]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	617b      	str	r3, [r7, #20]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	617b      	str	r3, [r7, #20]
 80068dc:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e000      	b.n	80068fc <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80068fa:	2300      	movs	r3, #0
  }
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3720      	adds	r7, #32
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b088      	sub	sp, #32
 8006908:	af02      	add	r7, sp, #8
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	603b      	str	r3, [r7, #0]
 8006910:	4613      	mov	r3, r2
 8006912:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b01      	cmp	r3, #1
 800691e:	d001      	beq.n	8006924 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8006920:	2302      	movs	r3, #2
 8006922:	e104      	b.n	8006b2e <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800692c:	d112      	bne.n	8006954 <HAL_SPI_Receive+0x50>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10e      	bne.n	8006954 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2204      	movs	r2, #4
 800693a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800693e:	88fa      	ldrh	r2, [r7, #6]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	4613      	mov	r3, r2
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	68b9      	ldr	r1, [r7, #8]
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f000 f8f3 	bl	8006b36 <HAL_SPI_TransmitReceive>
 8006950:	4603      	mov	r3, r0
 8006952:	e0ec      	b.n	8006b2e <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006954:	f7fd fb32 	bl	8003fbc <HAL_GetTick>
 8006958:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d002      	beq.n	8006966 <HAL_SPI_Receive+0x62>
 8006960:	88fb      	ldrh	r3, [r7, #6]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d101      	bne.n	800696a <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e0e1      	b.n	8006b2e <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006970:	2b01      	cmp	r3, #1
 8006972:	d101      	bne.n	8006978 <HAL_SPI_Receive+0x74>
 8006974:	2302      	movs	r3, #2
 8006976:	e0da      	b.n	8006b2e <HAL_SPI_Receive+0x22a>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2204      	movs	r2, #4
 8006984:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	88fa      	ldrh	r2, [r7, #6]
 8006998:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	88fa      	ldrh	r2, [r7, #6]
 800699e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069c6:	d10f      	bne.n	80069e8 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80069e6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069f2:	2b40      	cmp	r3, #64	@ 0x40
 80069f4:	d007      	beq.n	8006a06 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a04:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d170      	bne.n	8006af0 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006a0e:	e035      	b.n	8006a7c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d115      	bne.n	8006a4a <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f103 020c 	add.w	r2, r3, #12
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a2a:	7812      	ldrb	r2, [r2, #0]
 8006a2c:	b2d2      	uxtb	r2, r2
 8006a2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a34:	1c5a      	adds	r2, r3, #1
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	3b01      	subs	r3, #1
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006a48:	e018      	b.n	8006a7c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a4a:	f7fd fab7 	bl	8003fbc <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d803      	bhi.n	8006a62 <HAL_SPI_Receive+0x15e>
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a60:	d102      	bne.n	8006a68 <HAL_SPI_Receive+0x164>
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d109      	bne.n	8006a7c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	e058      	b.n	8006b2e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1c4      	bne.n	8006a10 <HAL_SPI_Receive+0x10c>
 8006a86:	e038      	b.n	8006afa <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f003 0301 	and.w	r3, r3, #1
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d113      	bne.n	8006abe <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68da      	ldr	r2, [r3, #12]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa0:	b292      	uxth	r2, r2
 8006aa2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa8:	1c9a      	adds	r2, r3, #2
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006abc:	e018      	b.n	8006af0 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006abe:	f7fd fa7d 	bl	8003fbc <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	683a      	ldr	r2, [r7, #0]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d803      	bhi.n	8006ad6 <HAL_SPI_Receive+0x1d2>
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad4:	d102      	bne.n	8006adc <HAL_SPI_Receive+0x1d8>
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d109      	bne.n	8006af0 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e01e      	b.n	8006b2e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1c6      	bne.n	8006a88 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	6839      	ldr	r1, [r7, #0]
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f000 fa58 	bl	8006fb4 <SPI_EndRxTransaction>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d002      	beq.n	8006b10 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2220      	movs	r2, #32
 8006b0e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d001      	beq.n	8006b2c <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e000      	b.n	8006b2e <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
  }
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3718      	adds	r7, #24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b08a      	sub	sp, #40	@ 0x28
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	60f8      	str	r0, [r7, #12]
 8006b3e:	60b9      	str	r1, [r7, #8]
 8006b40:	607a      	str	r2, [r7, #4]
 8006b42:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006b44:	2301      	movs	r3, #1
 8006b46:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b48:	f7fd fa38 	bl	8003fbc <HAL_GetTick>
 8006b4c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b54:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006b5c:	887b      	ldrh	r3, [r7, #2]
 8006b5e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006b60:	7ffb      	ldrb	r3, [r7, #31]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d00c      	beq.n	8006b80 <HAL_SPI_TransmitReceive+0x4a>
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b6c:	d106      	bne.n	8006b7c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d102      	bne.n	8006b7c <HAL_SPI_TransmitReceive+0x46>
 8006b76:	7ffb      	ldrb	r3, [r7, #31]
 8006b78:	2b04      	cmp	r3, #4
 8006b7a:	d001      	beq.n	8006b80 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	e17f      	b.n	8006e80 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d005      	beq.n	8006b92 <HAL_SPI_TransmitReceive+0x5c>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d002      	beq.n	8006b92 <HAL_SPI_TransmitReceive+0x5c>
 8006b8c:	887b      	ldrh	r3, [r7, #2]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e174      	b.n	8006e80 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d101      	bne.n	8006ba4 <HAL_SPI_TransmitReceive+0x6e>
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	e16d      	b.n	8006e80 <HAL_SPI_TransmitReceive+0x34a>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	2b04      	cmp	r3, #4
 8006bb6:	d003      	beq.n	8006bc0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2205      	movs	r2, #5
 8006bbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	887a      	ldrh	r2, [r7, #2]
 8006bd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	887a      	ldrh	r2, [r7, #2]
 8006bd6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	887a      	ldrh	r2, [r7, #2]
 8006be2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	887a      	ldrh	r2, [r7, #2]
 8006be8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c00:	2b40      	cmp	r3, #64	@ 0x40
 8006c02:	d007      	beq.n	8006c14 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c1c:	d17e      	bne.n	8006d1c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d002      	beq.n	8006c2c <HAL_SPI_TransmitReceive+0xf6>
 8006c26:	8afb      	ldrh	r3, [r7, #22]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d16c      	bne.n	8006d06 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c30:	881a      	ldrh	r2, [r3, #0]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c3c:	1c9a      	adds	r2, r3, #2
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c50:	e059      	b.n	8006d06 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d11b      	bne.n	8006c98 <HAL_SPI_TransmitReceive+0x162>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d016      	beq.n	8006c98 <HAL_SPI_TransmitReceive+0x162>
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d113      	bne.n	8006c98 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c74:	881a      	ldrh	r2, [r3, #0]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c80:	1c9a      	adds	r2, r3, #2
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c94:	2300      	movs	r3, #0
 8006c96:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d119      	bne.n	8006cda <HAL_SPI_TransmitReceive+0x1a4>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d014      	beq.n	8006cda <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68da      	ldr	r2, [r3, #12]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cba:	b292      	uxth	r2, r2
 8006cbc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cc2:	1c9a      	adds	r2, r3, #2
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006cda:	f7fd f96f 	bl	8003fbc <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	6a3b      	ldr	r3, [r7, #32]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d80d      	bhi.n	8006d06 <HAL_SPI_TransmitReceive+0x1d0>
 8006cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf0:	d009      	beq.n	8006d06 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e0bc      	b.n	8006e80 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d1a0      	bne.n	8006c52 <HAL_SPI_TransmitReceive+0x11c>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d19b      	bne.n	8006c52 <HAL_SPI_TransmitReceive+0x11c>
 8006d1a:	e082      	b.n	8006e22 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d002      	beq.n	8006d2a <HAL_SPI_TransmitReceive+0x1f4>
 8006d24:	8afb      	ldrh	r3, [r7, #22]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d171      	bne.n	8006e0e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	330c      	adds	r3, #12
 8006d34:	7812      	ldrb	r2, [r2, #0]
 8006d36:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d3c:	1c5a      	adds	r2, r3, #1
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d50:	e05d      	b.n	8006e0e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f003 0302 	and.w	r3, r3, #2
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d11c      	bne.n	8006d9a <HAL_SPI_TransmitReceive+0x264>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d017      	beq.n	8006d9a <HAL_SPI_TransmitReceive+0x264>
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d114      	bne.n	8006d9a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	330c      	adds	r3, #12
 8006d7a:	7812      	ldrb	r2, [r2, #0]
 8006d7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d82:	1c5a      	adds	r2, r3, #1
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d96:	2300      	movs	r3, #0
 8006d98:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f003 0301 	and.w	r3, r3, #1
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d119      	bne.n	8006ddc <HAL_SPI_TransmitReceive+0x2a6>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d014      	beq.n	8006ddc <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68da      	ldr	r2, [r3, #12]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dbc:	b2d2      	uxtb	r2, r2
 8006dbe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc4:	1c5a      	adds	r2, r3, #1
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ddc:	f7fd f8ee 	bl	8003fbc <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	6a3b      	ldr	r3, [r7, #32]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d803      	bhi.n	8006df4 <HAL_SPI_TransmitReceive+0x2be>
 8006dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df2:	d102      	bne.n	8006dfa <HAL_SPI_TransmitReceive+0x2c4>
 8006df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d109      	bne.n	8006e0e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e038      	b.n	8006e80 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d19c      	bne.n	8006d52 <HAL_SPI_TransmitReceive+0x21c>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d197      	bne.n	8006d52 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e22:	6a3a      	ldr	r2, [r7, #32]
 8006e24:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f000 f916 	bl	8007058 <SPI_EndRxTxTransaction>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d008      	beq.n	8006e44 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2220      	movs	r2, #32
 8006e36:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e01d      	b.n	8006e80 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10a      	bne.n	8006e62 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	613b      	str	r3, [r7, #16]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	613b      	str	r3, [r7, #16]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	613b      	str	r3, [r7, #16]
 8006e60:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d001      	beq.n	8006e7e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e000      	b.n	8006e80 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
  }
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3728      	adds	r7, #40	@ 0x28
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e96:	b2db      	uxtb	r3, r3
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bc80      	pop	{r7}
 8006ea0:	4770      	bx	lr
	...

08006ea4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b088      	sub	sp, #32
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	603b      	str	r3, [r7, #0]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006eb4:	f7fd f882 	bl	8003fbc <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ebc:	1a9b      	subs	r3, r3, r2
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ec4:	f7fd f87a 	bl	8003fbc <HAL_GetTick>
 8006ec8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006eca:	4b39      	ldr	r3, [pc, #228]	@ (8006fb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	015b      	lsls	r3, r3, #5
 8006ed0:	0d1b      	lsrs	r3, r3, #20
 8006ed2:	69fa      	ldr	r2, [r7, #28]
 8006ed4:	fb02 f303 	mul.w	r3, r2, r3
 8006ed8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006eda:	e054      	b.n	8006f86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee2:	d050      	beq.n	8006f86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ee4:	f7fd f86a 	bl	8003fbc <HAL_GetTick>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	69fa      	ldr	r2, [r7, #28]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d902      	bls.n	8006efa <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d13d      	bne.n	8006f76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	685a      	ldr	r2, [r3, #4]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006f08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f12:	d111      	bne.n	8006f38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f1c:	d004      	beq.n	8006f28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f26:	d107      	bne.n	8006f38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f40:	d10f      	bne.n	8006f62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f50:	601a      	str	r2, [r3, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e017      	b.n	8006fa6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d101      	bne.n	8006f80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	3b01      	subs	r3, #1
 8006f84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	689a      	ldr	r2, [r3, #8]
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	4013      	ands	r3, r2
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	bf0c      	ite	eq
 8006f96:	2301      	moveq	r3, #1
 8006f98:	2300      	movne	r3, #0
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	79fb      	ldrb	r3, [r7, #7]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d19b      	bne.n	8006edc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3720      	adds	r7, #32
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	200000a8 	.word	0x200000a8

08006fb4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b086      	sub	sp, #24
 8006fb8:	af02      	add	r7, sp, #8
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fc8:	d111      	bne.n	8006fee <SPI_EndRxTransaction+0x3a>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fd2:	d004      	beq.n	8006fde <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fdc:	d107      	bne.n	8006fee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fec:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ff6:	d117      	bne.n	8007028 <SPI_EndRxTransaction+0x74>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007000:	d112      	bne.n	8007028 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	2200      	movs	r2, #0
 800700a:	2101      	movs	r1, #1
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f7ff ff49 	bl	8006ea4 <SPI_WaitFlagStateUntilTimeout>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d01a      	beq.n	800704e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800701c:	f043 0220 	orr.w	r2, r3, #32
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007024:	2303      	movs	r3, #3
 8007026:	e013      	b.n	8007050 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	2200      	movs	r2, #0
 8007030:	2180      	movs	r1, #128	@ 0x80
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f7ff ff36 	bl	8006ea4 <SPI_WaitFlagStateUntilTimeout>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d007      	beq.n	800704e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007042:	f043 0220 	orr.w	r2, r3, #32
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e000      	b.n	8007050 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af02      	add	r7, sp, #8
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	2201      	movs	r2, #1
 800706c:	2102      	movs	r1, #2
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f7ff ff18 	bl	8006ea4 <SPI_WaitFlagStateUntilTimeout>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d007      	beq.n	800708a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800707e:	f043 0220 	orr.w	r2, r3, #32
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e013      	b.n	80070b2 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	2200      	movs	r2, #0
 8007092:	2180      	movs	r1, #128	@ 0x80
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f7ff ff05 	bl	8006ea4 <SPI_WaitFlagStateUntilTimeout>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d007      	beq.n	80070b0 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070a4:	f043 0220 	orr.w	r2, r3, #32
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80070ac:	2303      	movs	r3, #3
 80070ae:	e000      	b.n	80070b2 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b082      	sub	sp, #8
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d101      	bne.n	80070cc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e042      	b.n	8007152 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d106      	bne.n	80070e6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f7fc fd5f 	bl	8003ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2224      	movs	r2, #36	@ 0x24
 80070ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68da      	ldr	r2, [r3, #12]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80070fc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fa08 	bl	8007514 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	691a      	ldr	r2, [r3, #16]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007112:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	695a      	ldr	r2, [r3, #20]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007122:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68da      	ldr	r2, [r3, #12]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007132:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2220      	movs	r2, #32
 800713e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2220      	movs	r2, #32
 8007146:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b08a      	sub	sp, #40	@ 0x28
 800715e:	af02      	add	r7, sp, #8
 8007160:	60f8      	str	r0, [r7, #12]
 8007162:	60b9      	str	r1, [r7, #8]
 8007164:	603b      	str	r3, [r7, #0]
 8007166:	4613      	mov	r3, r2
 8007168:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800716a:	2300      	movs	r3, #0
 800716c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b20      	cmp	r3, #32
 8007178:	d175      	bne.n	8007266 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d002      	beq.n	8007186 <HAL_UART_Transmit+0x2c>
 8007180:	88fb      	ldrh	r3, [r7, #6]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d101      	bne.n	800718a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e06e      	b.n	8007268 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2221      	movs	r2, #33	@ 0x21
 8007194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007198:	f7fc ff10 	bl	8003fbc <HAL_GetTick>
 800719c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	88fa      	ldrh	r2, [r7, #6]
 80071a2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	88fa      	ldrh	r2, [r7, #6]
 80071a8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071b2:	d108      	bne.n	80071c6 <HAL_UART_Transmit+0x6c>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d104      	bne.n	80071c6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80071bc:	2300      	movs	r3, #0
 80071be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	61bb      	str	r3, [r7, #24]
 80071c4:	e003      	b.n	80071ce <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071ca:	2300      	movs	r3, #0
 80071cc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80071ce:	e02e      	b.n	800722e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	2200      	movs	r2, #0
 80071d8:	2180      	movs	r1, #128	@ 0x80
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f000 f8df 	bl	800739e <UART_WaitOnFlagUntilTimeout>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d005      	beq.n	80071f2 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2220      	movs	r2, #32
 80071ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80071ee:	2303      	movs	r3, #3
 80071f0:	e03a      	b.n	8007268 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10b      	bne.n	8007210 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	881b      	ldrh	r3, [r3, #0]
 80071fc:	461a      	mov	r2, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007206:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	3302      	adds	r3, #2
 800720c:	61bb      	str	r3, [r7, #24]
 800720e:	e007      	b.n	8007220 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	781a      	ldrb	r2, [r3, #0]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	3301      	adds	r3, #1
 800721e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007224:	b29b      	uxth	r3, r3
 8007226:	3b01      	subs	r3, #1
 8007228:	b29a      	uxth	r2, r3
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007232:	b29b      	uxth	r3, r3
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1cb      	bne.n	80071d0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	2200      	movs	r2, #0
 8007240:	2140      	movs	r1, #64	@ 0x40
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f000 f8ab 	bl	800739e <UART_WaitOnFlagUntilTimeout>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d005      	beq.n	800725a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2220      	movs	r2, #32
 8007252:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e006      	b.n	8007268 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2220      	movs	r2, #32
 800725e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007262:	2300      	movs	r3, #0
 8007264:	e000      	b.n	8007268 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007266:	2302      	movs	r3, #2
  }
}
 8007268:	4618      	mov	r0, r3
 800726a:	3720      	adds	r7, #32
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b08a      	sub	sp, #40	@ 0x28
 8007274:	af02      	add	r7, sp, #8
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	603b      	str	r3, [r7, #0]
 800727c:	4613      	mov	r3, r2
 800727e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007280:	2300      	movs	r3, #0
 8007282:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800728a:	b2db      	uxtb	r3, r3
 800728c:	2b20      	cmp	r3, #32
 800728e:	f040 8081 	bne.w	8007394 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d002      	beq.n	800729e <HAL_UART_Receive+0x2e>
 8007298:	88fb      	ldrh	r3, [r7, #6]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d101      	bne.n	80072a2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e079      	b.n	8007396 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2222      	movs	r2, #34	@ 0x22
 80072ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072b6:	f7fc fe81 	bl	8003fbc <HAL_GetTick>
 80072ba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	88fa      	ldrh	r2, [r7, #6]
 80072c0:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	88fa      	ldrh	r2, [r7, #6]
 80072c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072d0:	d108      	bne.n	80072e4 <HAL_UART_Receive+0x74>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d104      	bne.n	80072e4 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80072da:	2300      	movs	r3, #0
 80072dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	61bb      	str	r3, [r7, #24]
 80072e2:	e003      	b.n	80072ec <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072e8:	2300      	movs	r3, #0
 80072ea:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80072ec:	e047      	b.n	800737e <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	2200      	movs	r2, #0
 80072f6:	2120      	movs	r1, #32
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f000 f850 	bl	800739e <UART_WaitOnFlagUntilTimeout>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d005      	beq.n	8007310 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2220      	movs	r2, #32
 8007308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e042      	b.n	8007396 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10c      	bne.n	8007330 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	b29b      	uxth	r3, r3
 800731e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007322:	b29a      	uxth	r2, r3
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	3302      	adds	r3, #2
 800732c:	61bb      	str	r3, [r7, #24]
 800732e:	e01f      	b.n	8007370 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007338:	d007      	beq.n	800734a <HAL_UART_Receive+0xda>
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d10a      	bne.n	8007358 <HAL_UART_Receive+0xe8>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d106      	bne.n	8007358 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	b2da      	uxtb	r2, r3
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	701a      	strb	r2, [r3, #0]
 8007356:	e008      	b.n	800736a <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	b2db      	uxtb	r3, r3
 8007360:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007364:	b2da      	uxtb	r2, r3
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	3301      	adds	r3, #1
 800736e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007374:	b29b      	uxth	r3, r3
 8007376:	3b01      	subs	r3, #1
 8007378:	b29a      	uxth	r2, r3
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007382:	b29b      	uxth	r3, r3
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1b2      	bne.n	80072ee <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2220      	movs	r2, #32
 800738c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8007390:	2300      	movs	r3, #0
 8007392:	e000      	b.n	8007396 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007394:	2302      	movs	r3, #2
  }
}
 8007396:	4618      	mov	r0, r3
 8007398:	3720      	adds	r7, #32
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b086      	sub	sp, #24
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	60f8      	str	r0, [r7, #12]
 80073a6:	60b9      	str	r1, [r7, #8]
 80073a8:	603b      	str	r3, [r7, #0]
 80073aa:	4613      	mov	r3, r2
 80073ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073ae:	e03b      	b.n	8007428 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073b0:	6a3b      	ldr	r3, [r7, #32]
 80073b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b6:	d037      	beq.n	8007428 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073b8:	f7fc fe00 	bl	8003fbc <HAL_GetTick>
 80073bc:	4602      	mov	r2, r0
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	6a3a      	ldr	r2, [r7, #32]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d302      	bcc.n	80073ce <UART_WaitOnFlagUntilTimeout+0x30>
 80073c8:	6a3b      	ldr	r3, [r7, #32]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e03a      	b.n	8007448 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	f003 0304 	and.w	r3, r3, #4
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d023      	beq.n	8007428 <UART_WaitOnFlagUntilTimeout+0x8a>
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	2b80      	cmp	r3, #128	@ 0x80
 80073e4:	d020      	beq.n	8007428 <UART_WaitOnFlagUntilTimeout+0x8a>
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	2b40      	cmp	r3, #64	@ 0x40
 80073ea:	d01d      	beq.n	8007428 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 0308 	and.w	r3, r3, #8
 80073f6:	2b08      	cmp	r3, #8
 80073f8:	d116      	bne.n	8007428 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80073fa:	2300      	movs	r3, #0
 80073fc:	617b      	str	r3, [r7, #20]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	617b      	str	r3, [r7, #20]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	617b      	str	r3, [r7, #20]
 800740e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f000 f81d 	bl	8007450 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2208      	movs	r2, #8
 800741a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	e00f      	b.n	8007448 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	4013      	ands	r3, r2
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	429a      	cmp	r2, r3
 8007436:	bf0c      	ite	eq
 8007438:	2301      	moveq	r3, #1
 800743a:	2300      	movne	r3, #0
 800743c:	b2db      	uxtb	r3, r3
 800743e:	461a      	mov	r2, r3
 8007440:	79fb      	ldrb	r3, [r7, #7]
 8007442:	429a      	cmp	r2, r3
 8007444:	d0b4      	beq.n	80073b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	3718      	adds	r7, #24
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007450:	b480      	push	{r7}
 8007452:	b095      	sub	sp, #84	@ 0x54
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	330c      	adds	r3, #12
 800745e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007462:	e853 3f00 	ldrex	r3, [r3]
 8007466:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800746e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	330c      	adds	r3, #12
 8007476:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007478:	643a      	str	r2, [r7, #64]	@ 0x40
 800747a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800747e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007480:	e841 2300 	strex	r3, r2, [r1]
 8007484:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1e5      	bne.n	8007458 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	3314      	adds	r3, #20
 8007492:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007494:	6a3b      	ldr	r3, [r7, #32]
 8007496:	e853 3f00 	ldrex	r3, [r3]
 800749a:	61fb      	str	r3, [r7, #28]
   return(result);
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	f023 0301 	bic.w	r3, r3, #1
 80074a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	3314      	adds	r3, #20
 80074aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80074ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074b4:	e841 2300 	strex	r3, r2, [r1]
 80074b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80074ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1e5      	bne.n	800748c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d119      	bne.n	80074fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	330c      	adds	r3, #12
 80074ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	e853 3f00 	ldrex	r3, [r3]
 80074d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	f023 0310 	bic.w	r3, r3, #16
 80074de:	647b      	str	r3, [r7, #68]	@ 0x44
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	330c      	adds	r3, #12
 80074e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074e8:	61ba      	str	r2, [r7, #24]
 80074ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ec:	6979      	ldr	r1, [r7, #20]
 80074ee:	69ba      	ldr	r2, [r7, #24]
 80074f0:	e841 2300 	strex	r3, r2, [r1]
 80074f4:	613b      	str	r3, [r7, #16]
   return(result);
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1e5      	bne.n	80074c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2220      	movs	r2, #32
 8007500:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800750a:	bf00      	nop
 800750c:	3754      	adds	r7, #84	@ 0x54
 800750e:	46bd      	mov	sp, r7
 8007510:	bc80      	pop	{r7}
 8007512:	4770      	bx	lr

08007514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	68da      	ldr	r2, [r3, #12]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	430a      	orrs	r2, r1
 8007530:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	689a      	ldr	r2, [r3, #8]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	431a      	orrs	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	695b      	ldr	r3, [r3, #20]
 8007540:	4313      	orrs	r3, r2
 8007542:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800754e:	f023 030c 	bic.w	r3, r3, #12
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	6812      	ldr	r2, [r2, #0]
 8007556:	68b9      	ldr	r1, [r7, #8]
 8007558:	430b      	orrs	r3, r1
 800755a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	699a      	ldr	r2, [r3, #24]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	430a      	orrs	r2, r1
 8007570:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a2c      	ldr	r2, [pc, #176]	@ (8007628 <UART_SetConfig+0x114>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d103      	bne.n	8007584 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800757c:	f7fe ffc8 	bl	8006510 <HAL_RCC_GetPCLK2Freq>
 8007580:	60f8      	str	r0, [r7, #12]
 8007582:	e002      	b.n	800758a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007584:	f7fe ffb0 	bl	80064e8 <HAL_RCC_GetPCLK1Freq>
 8007588:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	4613      	mov	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4413      	add	r3, r2
 8007592:	009a      	lsls	r2, r3, #2
 8007594:	441a      	add	r2, r3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	fbb2 f3f3 	udiv	r3, r2, r3
 80075a0:	4a22      	ldr	r2, [pc, #136]	@ (800762c <UART_SetConfig+0x118>)
 80075a2:	fba2 2303 	umull	r2, r3, r2, r3
 80075a6:	095b      	lsrs	r3, r3, #5
 80075a8:	0119      	lsls	r1, r3, #4
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	4613      	mov	r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	4413      	add	r3, r2
 80075b2:	009a      	lsls	r2, r3, #2
 80075b4:	441a      	add	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80075c0:	4b1a      	ldr	r3, [pc, #104]	@ (800762c <UART_SetConfig+0x118>)
 80075c2:	fba3 0302 	umull	r0, r3, r3, r2
 80075c6:	095b      	lsrs	r3, r3, #5
 80075c8:	2064      	movs	r0, #100	@ 0x64
 80075ca:	fb00 f303 	mul.w	r3, r0, r3
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	011b      	lsls	r3, r3, #4
 80075d2:	3332      	adds	r3, #50	@ 0x32
 80075d4:	4a15      	ldr	r2, [pc, #84]	@ (800762c <UART_SetConfig+0x118>)
 80075d6:	fba2 2303 	umull	r2, r3, r2, r3
 80075da:	095b      	lsrs	r3, r3, #5
 80075dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80075e0:	4419      	add	r1, r3
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	4613      	mov	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	009a      	lsls	r2, r3, #2
 80075ec:	441a      	add	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80075f8:	4b0c      	ldr	r3, [pc, #48]	@ (800762c <UART_SetConfig+0x118>)
 80075fa:	fba3 0302 	umull	r0, r3, r3, r2
 80075fe:	095b      	lsrs	r3, r3, #5
 8007600:	2064      	movs	r0, #100	@ 0x64
 8007602:	fb00 f303 	mul.w	r3, r0, r3
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	011b      	lsls	r3, r3, #4
 800760a:	3332      	adds	r3, #50	@ 0x32
 800760c:	4a07      	ldr	r2, [pc, #28]	@ (800762c <UART_SetConfig+0x118>)
 800760e:	fba2 2303 	umull	r2, r3, r2, r3
 8007612:	095b      	lsrs	r3, r3, #5
 8007614:	f003 020f 	and.w	r2, r3, #15
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	440a      	add	r2, r1
 800761e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007620:	bf00      	nop
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	40013800 	.word	0x40013800
 800762c:	51eb851f 	.word	0x51eb851f

08007630 <atoi>:
 8007630:	220a      	movs	r2, #10
 8007632:	2100      	movs	r1, #0
 8007634:	f000 b87a 	b.w	800772c <strtol>

08007638 <_strtol_l.isra.0>:
 8007638:	2b24      	cmp	r3, #36	@ 0x24
 800763a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800763e:	4686      	mov	lr, r0
 8007640:	4690      	mov	r8, r2
 8007642:	d801      	bhi.n	8007648 <_strtol_l.isra.0+0x10>
 8007644:	2b01      	cmp	r3, #1
 8007646:	d106      	bne.n	8007656 <_strtol_l.isra.0+0x1e>
 8007648:	f001 f88a 	bl	8008760 <__errno>
 800764c:	2316      	movs	r3, #22
 800764e:	6003      	str	r3, [r0, #0]
 8007650:	2000      	movs	r0, #0
 8007652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007656:	460d      	mov	r5, r1
 8007658:	4833      	ldr	r0, [pc, #204]	@ (8007728 <_strtol_l.isra.0+0xf0>)
 800765a:	462a      	mov	r2, r5
 800765c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007660:	5d06      	ldrb	r6, [r0, r4]
 8007662:	f016 0608 	ands.w	r6, r6, #8
 8007666:	d1f8      	bne.n	800765a <_strtol_l.isra.0+0x22>
 8007668:	2c2d      	cmp	r4, #45	@ 0x2d
 800766a:	d110      	bne.n	800768e <_strtol_l.isra.0+0x56>
 800766c:	2601      	movs	r6, #1
 800766e:	782c      	ldrb	r4, [r5, #0]
 8007670:	1c95      	adds	r5, r2, #2
 8007672:	f033 0210 	bics.w	r2, r3, #16
 8007676:	d115      	bne.n	80076a4 <_strtol_l.isra.0+0x6c>
 8007678:	2c30      	cmp	r4, #48	@ 0x30
 800767a:	d10d      	bne.n	8007698 <_strtol_l.isra.0+0x60>
 800767c:	782a      	ldrb	r2, [r5, #0]
 800767e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007682:	2a58      	cmp	r2, #88	@ 0x58
 8007684:	d108      	bne.n	8007698 <_strtol_l.isra.0+0x60>
 8007686:	786c      	ldrb	r4, [r5, #1]
 8007688:	3502      	adds	r5, #2
 800768a:	2310      	movs	r3, #16
 800768c:	e00a      	b.n	80076a4 <_strtol_l.isra.0+0x6c>
 800768e:	2c2b      	cmp	r4, #43	@ 0x2b
 8007690:	bf04      	itt	eq
 8007692:	782c      	ldrbeq	r4, [r5, #0]
 8007694:	1c95      	addeq	r5, r2, #2
 8007696:	e7ec      	b.n	8007672 <_strtol_l.isra.0+0x3a>
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1f6      	bne.n	800768a <_strtol_l.isra.0+0x52>
 800769c:	2c30      	cmp	r4, #48	@ 0x30
 800769e:	bf14      	ite	ne
 80076a0:	230a      	movne	r3, #10
 80076a2:	2308      	moveq	r3, #8
 80076a4:	2200      	movs	r2, #0
 80076a6:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80076aa:	f10c 3cff 	add.w	ip, ip, #4294967295
 80076ae:	fbbc f9f3 	udiv	r9, ip, r3
 80076b2:	4610      	mov	r0, r2
 80076b4:	fb03 ca19 	mls	sl, r3, r9, ip
 80076b8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80076bc:	2f09      	cmp	r7, #9
 80076be:	d80f      	bhi.n	80076e0 <_strtol_l.isra.0+0xa8>
 80076c0:	463c      	mov	r4, r7
 80076c2:	42a3      	cmp	r3, r4
 80076c4:	dd1b      	ble.n	80076fe <_strtol_l.isra.0+0xc6>
 80076c6:	1c57      	adds	r7, r2, #1
 80076c8:	d007      	beq.n	80076da <_strtol_l.isra.0+0xa2>
 80076ca:	4581      	cmp	r9, r0
 80076cc:	d314      	bcc.n	80076f8 <_strtol_l.isra.0+0xc0>
 80076ce:	d101      	bne.n	80076d4 <_strtol_l.isra.0+0x9c>
 80076d0:	45a2      	cmp	sl, r4
 80076d2:	db11      	blt.n	80076f8 <_strtol_l.isra.0+0xc0>
 80076d4:	2201      	movs	r2, #1
 80076d6:	fb00 4003 	mla	r0, r0, r3, r4
 80076da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80076de:	e7eb      	b.n	80076b8 <_strtol_l.isra.0+0x80>
 80076e0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80076e4:	2f19      	cmp	r7, #25
 80076e6:	d801      	bhi.n	80076ec <_strtol_l.isra.0+0xb4>
 80076e8:	3c37      	subs	r4, #55	@ 0x37
 80076ea:	e7ea      	b.n	80076c2 <_strtol_l.isra.0+0x8a>
 80076ec:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80076f0:	2f19      	cmp	r7, #25
 80076f2:	d804      	bhi.n	80076fe <_strtol_l.isra.0+0xc6>
 80076f4:	3c57      	subs	r4, #87	@ 0x57
 80076f6:	e7e4      	b.n	80076c2 <_strtol_l.isra.0+0x8a>
 80076f8:	f04f 32ff 	mov.w	r2, #4294967295
 80076fc:	e7ed      	b.n	80076da <_strtol_l.isra.0+0xa2>
 80076fe:	1c53      	adds	r3, r2, #1
 8007700:	d108      	bne.n	8007714 <_strtol_l.isra.0+0xdc>
 8007702:	2322      	movs	r3, #34	@ 0x22
 8007704:	4660      	mov	r0, ip
 8007706:	f8ce 3000 	str.w	r3, [lr]
 800770a:	f1b8 0f00 	cmp.w	r8, #0
 800770e:	d0a0      	beq.n	8007652 <_strtol_l.isra.0+0x1a>
 8007710:	1e69      	subs	r1, r5, #1
 8007712:	e006      	b.n	8007722 <_strtol_l.isra.0+0xea>
 8007714:	b106      	cbz	r6, 8007718 <_strtol_l.isra.0+0xe0>
 8007716:	4240      	negs	r0, r0
 8007718:	f1b8 0f00 	cmp.w	r8, #0
 800771c:	d099      	beq.n	8007652 <_strtol_l.isra.0+0x1a>
 800771e:	2a00      	cmp	r2, #0
 8007720:	d1f6      	bne.n	8007710 <_strtol_l.isra.0+0xd8>
 8007722:	f8c8 1000 	str.w	r1, [r8]
 8007726:	e794      	b.n	8007652 <_strtol_l.isra.0+0x1a>
 8007728:	0800b6db 	.word	0x0800b6db

0800772c <strtol>:
 800772c:	4613      	mov	r3, r2
 800772e:	460a      	mov	r2, r1
 8007730:	4601      	mov	r1, r0
 8007732:	4802      	ldr	r0, [pc, #8]	@ (800773c <strtol+0x10>)
 8007734:	6800      	ldr	r0, [r0, #0]
 8007736:	f7ff bf7f 	b.w	8007638 <_strtol_l.isra.0>
 800773a:	bf00      	nop
 800773c:	200000c0 	.word	0x200000c0

08007740 <_strtoul_l.isra.0>:
 8007740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007744:	4686      	mov	lr, r0
 8007746:	460d      	mov	r5, r1
 8007748:	4e33      	ldr	r6, [pc, #204]	@ (8007818 <_strtoul_l.isra.0+0xd8>)
 800774a:	4628      	mov	r0, r5
 800774c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007750:	5d37      	ldrb	r7, [r6, r4]
 8007752:	f017 0708 	ands.w	r7, r7, #8
 8007756:	d1f8      	bne.n	800774a <_strtoul_l.isra.0+0xa>
 8007758:	2c2d      	cmp	r4, #45	@ 0x2d
 800775a:	d110      	bne.n	800777e <_strtoul_l.isra.0+0x3e>
 800775c:	2701      	movs	r7, #1
 800775e:	782c      	ldrb	r4, [r5, #0]
 8007760:	1c85      	adds	r5, r0, #2
 8007762:	f033 0010 	bics.w	r0, r3, #16
 8007766:	d115      	bne.n	8007794 <_strtoul_l.isra.0+0x54>
 8007768:	2c30      	cmp	r4, #48	@ 0x30
 800776a:	d10d      	bne.n	8007788 <_strtoul_l.isra.0+0x48>
 800776c:	7828      	ldrb	r0, [r5, #0]
 800776e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8007772:	2858      	cmp	r0, #88	@ 0x58
 8007774:	d108      	bne.n	8007788 <_strtoul_l.isra.0+0x48>
 8007776:	786c      	ldrb	r4, [r5, #1]
 8007778:	3502      	adds	r5, #2
 800777a:	2310      	movs	r3, #16
 800777c:	e00a      	b.n	8007794 <_strtoul_l.isra.0+0x54>
 800777e:	2c2b      	cmp	r4, #43	@ 0x2b
 8007780:	bf04      	itt	eq
 8007782:	782c      	ldrbeq	r4, [r5, #0]
 8007784:	1c85      	addeq	r5, r0, #2
 8007786:	e7ec      	b.n	8007762 <_strtoul_l.isra.0+0x22>
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1f6      	bne.n	800777a <_strtoul_l.isra.0+0x3a>
 800778c:	2c30      	cmp	r4, #48	@ 0x30
 800778e:	bf14      	ite	ne
 8007790:	230a      	movne	r3, #10
 8007792:	2308      	moveq	r3, #8
 8007794:	f04f 38ff 	mov.w	r8, #4294967295
 8007798:	fbb8 f8f3 	udiv	r8, r8, r3
 800779c:	2600      	movs	r6, #0
 800779e:	fb03 f908 	mul.w	r9, r3, r8
 80077a2:	4630      	mov	r0, r6
 80077a4:	ea6f 0909 	mvn.w	r9, r9
 80077a8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80077ac:	f1bc 0f09 	cmp.w	ip, #9
 80077b0:	d810      	bhi.n	80077d4 <_strtoul_l.isra.0+0x94>
 80077b2:	4664      	mov	r4, ip
 80077b4:	42a3      	cmp	r3, r4
 80077b6:	dd1e      	ble.n	80077f6 <_strtoul_l.isra.0+0xb6>
 80077b8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80077bc:	d007      	beq.n	80077ce <_strtoul_l.isra.0+0x8e>
 80077be:	4580      	cmp	r8, r0
 80077c0:	d316      	bcc.n	80077f0 <_strtoul_l.isra.0+0xb0>
 80077c2:	d101      	bne.n	80077c8 <_strtoul_l.isra.0+0x88>
 80077c4:	45a1      	cmp	r9, r4
 80077c6:	db13      	blt.n	80077f0 <_strtoul_l.isra.0+0xb0>
 80077c8:	2601      	movs	r6, #1
 80077ca:	fb00 4003 	mla	r0, r0, r3, r4
 80077ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80077d2:	e7e9      	b.n	80077a8 <_strtoul_l.isra.0+0x68>
 80077d4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80077d8:	f1bc 0f19 	cmp.w	ip, #25
 80077dc:	d801      	bhi.n	80077e2 <_strtoul_l.isra.0+0xa2>
 80077de:	3c37      	subs	r4, #55	@ 0x37
 80077e0:	e7e8      	b.n	80077b4 <_strtoul_l.isra.0+0x74>
 80077e2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80077e6:	f1bc 0f19 	cmp.w	ip, #25
 80077ea:	d804      	bhi.n	80077f6 <_strtoul_l.isra.0+0xb6>
 80077ec:	3c57      	subs	r4, #87	@ 0x57
 80077ee:	e7e1      	b.n	80077b4 <_strtoul_l.isra.0+0x74>
 80077f0:	f04f 36ff 	mov.w	r6, #4294967295
 80077f4:	e7eb      	b.n	80077ce <_strtoul_l.isra.0+0x8e>
 80077f6:	1c73      	adds	r3, r6, #1
 80077f8:	d106      	bne.n	8007808 <_strtoul_l.isra.0+0xc8>
 80077fa:	2322      	movs	r3, #34	@ 0x22
 80077fc:	4630      	mov	r0, r6
 80077fe:	f8ce 3000 	str.w	r3, [lr]
 8007802:	b932      	cbnz	r2, 8007812 <_strtoul_l.isra.0+0xd2>
 8007804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007808:	b107      	cbz	r7, 800780c <_strtoul_l.isra.0+0xcc>
 800780a:	4240      	negs	r0, r0
 800780c:	2a00      	cmp	r2, #0
 800780e:	d0f9      	beq.n	8007804 <_strtoul_l.isra.0+0xc4>
 8007810:	b106      	cbz	r6, 8007814 <_strtoul_l.isra.0+0xd4>
 8007812:	1e69      	subs	r1, r5, #1
 8007814:	6011      	str	r1, [r2, #0]
 8007816:	e7f5      	b.n	8007804 <_strtoul_l.isra.0+0xc4>
 8007818:	0800b6db 	.word	0x0800b6db

0800781c <strtoul>:
 800781c:	4613      	mov	r3, r2
 800781e:	460a      	mov	r2, r1
 8007820:	4601      	mov	r1, r0
 8007822:	4802      	ldr	r0, [pc, #8]	@ (800782c <strtoul+0x10>)
 8007824:	6800      	ldr	r0, [r0, #0]
 8007826:	f7ff bf8b 	b.w	8007740 <_strtoul_l.isra.0>
 800782a:	bf00      	nop
 800782c:	200000c0 	.word	0x200000c0

08007830 <__cvt>:
 8007830:	2b00      	cmp	r3, #0
 8007832:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007836:	461d      	mov	r5, r3
 8007838:	bfbb      	ittet	lt
 800783a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800783e:	461d      	movlt	r5, r3
 8007840:	2300      	movge	r3, #0
 8007842:	232d      	movlt	r3, #45	@ 0x2d
 8007844:	b088      	sub	sp, #32
 8007846:	4614      	mov	r4, r2
 8007848:	bfb8      	it	lt
 800784a:	4614      	movlt	r4, r2
 800784c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800784e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8007850:	7013      	strb	r3, [r2, #0]
 8007852:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007854:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8007858:	f023 0820 	bic.w	r8, r3, #32
 800785c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007860:	d005      	beq.n	800786e <__cvt+0x3e>
 8007862:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007866:	d100      	bne.n	800786a <__cvt+0x3a>
 8007868:	3601      	adds	r6, #1
 800786a:	2302      	movs	r3, #2
 800786c:	e000      	b.n	8007870 <__cvt+0x40>
 800786e:	2303      	movs	r3, #3
 8007870:	aa07      	add	r2, sp, #28
 8007872:	9204      	str	r2, [sp, #16]
 8007874:	aa06      	add	r2, sp, #24
 8007876:	e9cd a202 	strd	sl, r2, [sp, #8]
 800787a:	e9cd 3600 	strd	r3, r6, [sp]
 800787e:	4622      	mov	r2, r4
 8007880:	462b      	mov	r3, r5
 8007882:	f001 f85d 	bl	8008940 <_dtoa_r>
 8007886:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800788a:	4607      	mov	r7, r0
 800788c:	d119      	bne.n	80078c2 <__cvt+0x92>
 800788e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007890:	07db      	lsls	r3, r3, #31
 8007892:	d50e      	bpl.n	80078b2 <__cvt+0x82>
 8007894:	eb00 0906 	add.w	r9, r0, r6
 8007898:	2200      	movs	r2, #0
 800789a:	2300      	movs	r3, #0
 800789c:	4620      	mov	r0, r4
 800789e:	4629      	mov	r1, r5
 80078a0:	f7f9 f882 	bl	80009a8 <__aeabi_dcmpeq>
 80078a4:	b108      	cbz	r0, 80078aa <__cvt+0x7a>
 80078a6:	f8cd 901c 	str.w	r9, [sp, #28]
 80078aa:	2230      	movs	r2, #48	@ 0x30
 80078ac:	9b07      	ldr	r3, [sp, #28]
 80078ae:	454b      	cmp	r3, r9
 80078b0:	d31e      	bcc.n	80078f0 <__cvt+0xc0>
 80078b2:	4638      	mov	r0, r7
 80078b4:	9b07      	ldr	r3, [sp, #28]
 80078b6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80078b8:	1bdb      	subs	r3, r3, r7
 80078ba:	6013      	str	r3, [r2, #0]
 80078bc:	b008      	add	sp, #32
 80078be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078c2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80078c6:	eb00 0906 	add.w	r9, r0, r6
 80078ca:	d1e5      	bne.n	8007898 <__cvt+0x68>
 80078cc:	7803      	ldrb	r3, [r0, #0]
 80078ce:	2b30      	cmp	r3, #48	@ 0x30
 80078d0:	d10a      	bne.n	80078e8 <__cvt+0xb8>
 80078d2:	2200      	movs	r2, #0
 80078d4:	2300      	movs	r3, #0
 80078d6:	4620      	mov	r0, r4
 80078d8:	4629      	mov	r1, r5
 80078da:	f7f9 f865 	bl	80009a8 <__aeabi_dcmpeq>
 80078de:	b918      	cbnz	r0, 80078e8 <__cvt+0xb8>
 80078e0:	f1c6 0601 	rsb	r6, r6, #1
 80078e4:	f8ca 6000 	str.w	r6, [sl]
 80078e8:	f8da 3000 	ldr.w	r3, [sl]
 80078ec:	4499      	add	r9, r3
 80078ee:	e7d3      	b.n	8007898 <__cvt+0x68>
 80078f0:	1c59      	adds	r1, r3, #1
 80078f2:	9107      	str	r1, [sp, #28]
 80078f4:	701a      	strb	r2, [r3, #0]
 80078f6:	e7d9      	b.n	80078ac <__cvt+0x7c>

080078f8 <__exponent>:
 80078f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078fa:	2900      	cmp	r1, #0
 80078fc:	bfb6      	itet	lt
 80078fe:	232d      	movlt	r3, #45	@ 0x2d
 8007900:	232b      	movge	r3, #43	@ 0x2b
 8007902:	4249      	neglt	r1, r1
 8007904:	2909      	cmp	r1, #9
 8007906:	7002      	strb	r2, [r0, #0]
 8007908:	7043      	strb	r3, [r0, #1]
 800790a:	dd29      	ble.n	8007960 <__exponent+0x68>
 800790c:	f10d 0307 	add.w	r3, sp, #7
 8007910:	461d      	mov	r5, r3
 8007912:	270a      	movs	r7, #10
 8007914:	fbb1 f6f7 	udiv	r6, r1, r7
 8007918:	461a      	mov	r2, r3
 800791a:	fb07 1416 	mls	r4, r7, r6, r1
 800791e:	3430      	adds	r4, #48	@ 0x30
 8007920:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007924:	460c      	mov	r4, r1
 8007926:	2c63      	cmp	r4, #99	@ 0x63
 8007928:	4631      	mov	r1, r6
 800792a:	f103 33ff 	add.w	r3, r3, #4294967295
 800792e:	dcf1      	bgt.n	8007914 <__exponent+0x1c>
 8007930:	3130      	adds	r1, #48	@ 0x30
 8007932:	1e94      	subs	r4, r2, #2
 8007934:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007938:	4623      	mov	r3, r4
 800793a:	1c41      	adds	r1, r0, #1
 800793c:	42ab      	cmp	r3, r5
 800793e:	d30a      	bcc.n	8007956 <__exponent+0x5e>
 8007940:	f10d 0309 	add.w	r3, sp, #9
 8007944:	1a9b      	subs	r3, r3, r2
 8007946:	42ac      	cmp	r4, r5
 8007948:	bf88      	it	hi
 800794a:	2300      	movhi	r3, #0
 800794c:	3302      	adds	r3, #2
 800794e:	4403      	add	r3, r0
 8007950:	1a18      	subs	r0, r3, r0
 8007952:	b003      	add	sp, #12
 8007954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007956:	f813 6b01 	ldrb.w	r6, [r3], #1
 800795a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800795e:	e7ed      	b.n	800793c <__exponent+0x44>
 8007960:	2330      	movs	r3, #48	@ 0x30
 8007962:	3130      	adds	r1, #48	@ 0x30
 8007964:	7083      	strb	r3, [r0, #2]
 8007966:	70c1      	strb	r1, [r0, #3]
 8007968:	1d03      	adds	r3, r0, #4
 800796a:	e7f1      	b.n	8007950 <__exponent+0x58>

0800796c <_printf_float>:
 800796c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007970:	b091      	sub	sp, #68	@ 0x44
 8007972:	460c      	mov	r4, r1
 8007974:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007978:	4616      	mov	r6, r2
 800797a:	461f      	mov	r7, r3
 800797c:	4605      	mov	r5, r0
 800797e:	f000 fea5 	bl	80086cc <_localeconv_r>
 8007982:	6803      	ldr	r3, [r0, #0]
 8007984:	4618      	mov	r0, r3
 8007986:	9308      	str	r3, [sp, #32]
 8007988:	f7f8 fbe2 	bl	8000150 <strlen>
 800798c:	2300      	movs	r3, #0
 800798e:	930e      	str	r3, [sp, #56]	@ 0x38
 8007990:	f8d8 3000 	ldr.w	r3, [r8]
 8007994:	9009      	str	r0, [sp, #36]	@ 0x24
 8007996:	3307      	adds	r3, #7
 8007998:	f023 0307 	bic.w	r3, r3, #7
 800799c:	f103 0208 	add.w	r2, r3, #8
 80079a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80079a4:	f8d4 b000 	ldr.w	fp, [r4]
 80079a8:	f8c8 2000 	str.w	r2, [r8]
 80079ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80079b0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80079b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079b6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80079ba:	f04f 32ff 	mov.w	r2, #4294967295
 80079be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80079c2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80079c6:	4b9c      	ldr	r3, [pc, #624]	@ (8007c38 <_printf_float+0x2cc>)
 80079c8:	f7f9 f820 	bl	8000a0c <__aeabi_dcmpun>
 80079cc:	bb70      	cbnz	r0, 8007a2c <_printf_float+0xc0>
 80079ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80079d2:	f04f 32ff 	mov.w	r2, #4294967295
 80079d6:	4b98      	ldr	r3, [pc, #608]	@ (8007c38 <_printf_float+0x2cc>)
 80079d8:	f7f8 fffa 	bl	80009d0 <__aeabi_dcmple>
 80079dc:	bb30      	cbnz	r0, 8007a2c <_printf_float+0xc0>
 80079de:	2200      	movs	r2, #0
 80079e0:	2300      	movs	r3, #0
 80079e2:	4640      	mov	r0, r8
 80079e4:	4649      	mov	r1, r9
 80079e6:	f7f8 ffe9 	bl	80009bc <__aeabi_dcmplt>
 80079ea:	b110      	cbz	r0, 80079f2 <_printf_float+0x86>
 80079ec:	232d      	movs	r3, #45	@ 0x2d
 80079ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079f2:	4a92      	ldr	r2, [pc, #584]	@ (8007c3c <_printf_float+0x2d0>)
 80079f4:	4b92      	ldr	r3, [pc, #584]	@ (8007c40 <_printf_float+0x2d4>)
 80079f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80079fa:	bf8c      	ite	hi
 80079fc:	4690      	movhi	r8, r2
 80079fe:	4698      	movls	r8, r3
 8007a00:	2303      	movs	r3, #3
 8007a02:	f04f 0900 	mov.w	r9, #0
 8007a06:	6123      	str	r3, [r4, #16]
 8007a08:	f02b 0304 	bic.w	r3, fp, #4
 8007a0c:	6023      	str	r3, [r4, #0]
 8007a0e:	4633      	mov	r3, r6
 8007a10:	4621      	mov	r1, r4
 8007a12:	4628      	mov	r0, r5
 8007a14:	9700      	str	r7, [sp, #0]
 8007a16:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007a18:	f000 f9d4 	bl	8007dc4 <_printf_common>
 8007a1c:	3001      	adds	r0, #1
 8007a1e:	f040 8090 	bne.w	8007b42 <_printf_float+0x1d6>
 8007a22:	f04f 30ff 	mov.w	r0, #4294967295
 8007a26:	b011      	add	sp, #68	@ 0x44
 8007a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a2c:	4642      	mov	r2, r8
 8007a2e:	464b      	mov	r3, r9
 8007a30:	4640      	mov	r0, r8
 8007a32:	4649      	mov	r1, r9
 8007a34:	f7f8 ffea 	bl	8000a0c <__aeabi_dcmpun>
 8007a38:	b148      	cbz	r0, 8007a4e <_printf_float+0xe2>
 8007a3a:	464b      	mov	r3, r9
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	bfb8      	it	lt
 8007a40:	232d      	movlt	r3, #45	@ 0x2d
 8007a42:	4a80      	ldr	r2, [pc, #512]	@ (8007c44 <_printf_float+0x2d8>)
 8007a44:	bfb8      	it	lt
 8007a46:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007a4a:	4b7f      	ldr	r3, [pc, #508]	@ (8007c48 <_printf_float+0x2dc>)
 8007a4c:	e7d3      	b.n	80079f6 <_printf_float+0x8a>
 8007a4e:	6863      	ldr	r3, [r4, #4]
 8007a50:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007a54:	1c5a      	adds	r2, r3, #1
 8007a56:	d13f      	bne.n	8007ad8 <_printf_float+0x16c>
 8007a58:	2306      	movs	r3, #6
 8007a5a:	6063      	str	r3, [r4, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8007a62:	6023      	str	r3, [r4, #0]
 8007a64:	9206      	str	r2, [sp, #24]
 8007a66:	aa0e      	add	r2, sp, #56	@ 0x38
 8007a68:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007a6c:	aa0d      	add	r2, sp, #52	@ 0x34
 8007a6e:	9203      	str	r2, [sp, #12]
 8007a70:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007a74:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007a78:	6863      	ldr	r3, [r4, #4]
 8007a7a:	4642      	mov	r2, r8
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	4628      	mov	r0, r5
 8007a80:	464b      	mov	r3, r9
 8007a82:	910a      	str	r1, [sp, #40]	@ 0x28
 8007a84:	f7ff fed4 	bl	8007830 <__cvt>
 8007a88:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a8a:	4680      	mov	r8, r0
 8007a8c:	2947      	cmp	r1, #71	@ 0x47
 8007a8e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007a90:	d128      	bne.n	8007ae4 <_printf_float+0x178>
 8007a92:	1cc8      	adds	r0, r1, #3
 8007a94:	db02      	blt.n	8007a9c <_printf_float+0x130>
 8007a96:	6863      	ldr	r3, [r4, #4]
 8007a98:	4299      	cmp	r1, r3
 8007a9a:	dd40      	ble.n	8007b1e <_printf_float+0x1b2>
 8007a9c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007aa0:	fa5f fa8a 	uxtb.w	sl, sl
 8007aa4:	4652      	mov	r2, sl
 8007aa6:	3901      	subs	r1, #1
 8007aa8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007aac:	910d      	str	r1, [sp, #52]	@ 0x34
 8007aae:	f7ff ff23 	bl	80078f8 <__exponent>
 8007ab2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ab4:	4681      	mov	r9, r0
 8007ab6:	1813      	adds	r3, r2, r0
 8007ab8:	2a01      	cmp	r2, #1
 8007aba:	6123      	str	r3, [r4, #16]
 8007abc:	dc02      	bgt.n	8007ac4 <_printf_float+0x158>
 8007abe:	6822      	ldr	r2, [r4, #0]
 8007ac0:	07d2      	lsls	r2, r2, #31
 8007ac2:	d501      	bpl.n	8007ac8 <_printf_float+0x15c>
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	6123      	str	r3, [r4, #16]
 8007ac8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d09e      	beq.n	8007a0e <_printf_float+0xa2>
 8007ad0:	232d      	movs	r3, #45	@ 0x2d
 8007ad2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ad6:	e79a      	b.n	8007a0e <_printf_float+0xa2>
 8007ad8:	2947      	cmp	r1, #71	@ 0x47
 8007ada:	d1bf      	bne.n	8007a5c <_printf_float+0xf0>
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1bd      	bne.n	8007a5c <_printf_float+0xf0>
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e7ba      	b.n	8007a5a <_printf_float+0xee>
 8007ae4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007ae8:	d9dc      	bls.n	8007aa4 <_printf_float+0x138>
 8007aea:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007aee:	d118      	bne.n	8007b22 <_printf_float+0x1b6>
 8007af0:	2900      	cmp	r1, #0
 8007af2:	6863      	ldr	r3, [r4, #4]
 8007af4:	dd0b      	ble.n	8007b0e <_printf_float+0x1a2>
 8007af6:	6121      	str	r1, [r4, #16]
 8007af8:	b913      	cbnz	r3, 8007b00 <_printf_float+0x194>
 8007afa:	6822      	ldr	r2, [r4, #0]
 8007afc:	07d0      	lsls	r0, r2, #31
 8007afe:	d502      	bpl.n	8007b06 <_printf_float+0x19a>
 8007b00:	3301      	adds	r3, #1
 8007b02:	440b      	add	r3, r1
 8007b04:	6123      	str	r3, [r4, #16]
 8007b06:	f04f 0900 	mov.w	r9, #0
 8007b0a:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007b0c:	e7dc      	b.n	8007ac8 <_printf_float+0x15c>
 8007b0e:	b913      	cbnz	r3, 8007b16 <_printf_float+0x1aa>
 8007b10:	6822      	ldr	r2, [r4, #0]
 8007b12:	07d2      	lsls	r2, r2, #31
 8007b14:	d501      	bpl.n	8007b1a <_printf_float+0x1ae>
 8007b16:	3302      	adds	r3, #2
 8007b18:	e7f4      	b.n	8007b04 <_printf_float+0x198>
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e7f2      	b.n	8007b04 <_printf_float+0x198>
 8007b1e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007b22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b24:	4299      	cmp	r1, r3
 8007b26:	db05      	blt.n	8007b34 <_printf_float+0x1c8>
 8007b28:	6823      	ldr	r3, [r4, #0]
 8007b2a:	6121      	str	r1, [r4, #16]
 8007b2c:	07d8      	lsls	r0, r3, #31
 8007b2e:	d5ea      	bpl.n	8007b06 <_printf_float+0x19a>
 8007b30:	1c4b      	adds	r3, r1, #1
 8007b32:	e7e7      	b.n	8007b04 <_printf_float+0x198>
 8007b34:	2900      	cmp	r1, #0
 8007b36:	bfcc      	ite	gt
 8007b38:	2201      	movgt	r2, #1
 8007b3a:	f1c1 0202 	rsble	r2, r1, #2
 8007b3e:	4413      	add	r3, r2
 8007b40:	e7e0      	b.n	8007b04 <_printf_float+0x198>
 8007b42:	6823      	ldr	r3, [r4, #0]
 8007b44:	055a      	lsls	r2, r3, #21
 8007b46:	d407      	bmi.n	8007b58 <_printf_float+0x1ec>
 8007b48:	6923      	ldr	r3, [r4, #16]
 8007b4a:	4642      	mov	r2, r8
 8007b4c:	4631      	mov	r1, r6
 8007b4e:	4628      	mov	r0, r5
 8007b50:	47b8      	blx	r7
 8007b52:	3001      	adds	r0, #1
 8007b54:	d12b      	bne.n	8007bae <_printf_float+0x242>
 8007b56:	e764      	b.n	8007a22 <_printf_float+0xb6>
 8007b58:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007b5c:	f240 80dc 	bls.w	8007d18 <_printf_float+0x3ac>
 8007b60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007b64:	2200      	movs	r2, #0
 8007b66:	2300      	movs	r3, #0
 8007b68:	f7f8 ff1e 	bl	80009a8 <__aeabi_dcmpeq>
 8007b6c:	2800      	cmp	r0, #0
 8007b6e:	d033      	beq.n	8007bd8 <_printf_float+0x26c>
 8007b70:	2301      	movs	r3, #1
 8007b72:	4631      	mov	r1, r6
 8007b74:	4628      	mov	r0, r5
 8007b76:	4a35      	ldr	r2, [pc, #212]	@ (8007c4c <_printf_float+0x2e0>)
 8007b78:	47b8      	blx	r7
 8007b7a:	3001      	adds	r0, #1
 8007b7c:	f43f af51 	beq.w	8007a22 <_printf_float+0xb6>
 8007b80:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007b84:	4543      	cmp	r3, r8
 8007b86:	db02      	blt.n	8007b8e <_printf_float+0x222>
 8007b88:	6823      	ldr	r3, [r4, #0]
 8007b8a:	07d8      	lsls	r0, r3, #31
 8007b8c:	d50f      	bpl.n	8007bae <_printf_float+0x242>
 8007b8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007b92:	4631      	mov	r1, r6
 8007b94:	4628      	mov	r0, r5
 8007b96:	47b8      	blx	r7
 8007b98:	3001      	adds	r0, #1
 8007b9a:	f43f af42 	beq.w	8007a22 <_printf_float+0xb6>
 8007b9e:	f04f 0900 	mov.w	r9, #0
 8007ba2:	f108 38ff 	add.w	r8, r8, #4294967295
 8007ba6:	f104 0a1a 	add.w	sl, r4, #26
 8007baa:	45c8      	cmp	r8, r9
 8007bac:	dc09      	bgt.n	8007bc2 <_printf_float+0x256>
 8007bae:	6823      	ldr	r3, [r4, #0]
 8007bb0:	079b      	lsls	r3, r3, #30
 8007bb2:	f100 8102 	bmi.w	8007dba <_printf_float+0x44e>
 8007bb6:	68e0      	ldr	r0, [r4, #12]
 8007bb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bba:	4298      	cmp	r0, r3
 8007bbc:	bfb8      	it	lt
 8007bbe:	4618      	movlt	r0, r3
 8007bc0:	e731      	b.n	8007a26 <_printf_float+0xba>
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	4652      	mov	r2, sl
 8007bc6:	4631      	mov	r1, r6
 8007bc8:	4628      	mov	r0, r5
 8007bca:	47b8      	blx	r7
 8007bcc:	3001      	adds	r0, #1
 8007bce:	f43f af28 	beq.w	8007a22 <_printf_float+0xb6>
 8007bd2:	f109 0901 	add.w	r9, r9, #1
 8007bd6:	e7e8      	b.n	8007baa <_printf_float+0x23e>
 8007bd8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	dc38      	bgt.n	8007c50 <_printf_float+0x2e4>
 8007bde:	2301      	movs	r3, #1
 8007be0:	4631      	mov	r1, r6
 8007be2:	4628      	mov	r0, r5
 8007be4:	4a19      	ldr	r2, [pc, #100]	@ (8007c4c <_printf_float+0x2e0>)
 8007be6:	47b8      	blx	r7
 8007be8:	3001      	adds	r0, #1
 8007bea:	f43f af1a 	beq.w	8007a22 <_printf_float+0xb6>
 8007bee:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007bf2:	ea59 0303 	orrs.w	r3, r9, r3
 8007bf6:	d102      	bne.n	8007bfe <_printf_float+0x292>
 8007bf8:	6823      	ldr	r3, [r4, #0]
 8007bfa:	07d9      	lsls	r1, r3, #31
 8007bfc:	d5d7      	bpl.n	8007bae <_printf_float+0x242>
 8007bfe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007c02:	4631      	mov	r1, r6
 8007c04:	4628      	mov	r0, r5
 8007c06:	47b8      	blx	r7
 8007c08:	3001      	adds	r0, #1
 8007c0a:	f43f af0a 	beq.w	8007a22 <_printf_float+0xb6>
 8007c0e:	f04f 0a00 	mov.w	sl, #0
 8007c12:	f104 0b1a 	add.w	fp, r4, #26
 8007c16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c18:	425b      	negs	r3, r3
 8007c1a:	4553      	cmp	r3, sl
 8007c1c:	dc01      	bgt.n	8007c22 <_printf_float+0x2b6>
 8007c1e:	464b      	mov	r3, r9
 8007c20:	e793      	b.n	8007b4a <_printf_float+0x1de>
 8007c22:	2301      	movs	r3, #1
 8007c24:	465a      	mov	r2, fp
 8007c26:	4631      	mov	r1, r6
 8007c28:	4628      	mov	r0, r5
 8007c2a:	47b8      	blx	r7
 8007c2c:	3001      	adds	r0, #1
 8007c2e:	f43f aef8 	beq.w	8007a22 <_printf_float+0xb6>
 8007c32:	f10a 0a01 	add.w	sl, sl, #1
 8007c36:	e7ee      	b.n	8007c16 <_printf_float+0x2aa>
 8007c38:	7fefffff 	.word	0x7fefffff
 8007c3c:	0800b7df 	.word	0x0800b7df
 8007c40:	0800b7db 	.word	0x0800b7db
 8007c44:	0800b7e7 	.word	0x0800b7e7
 8007c48:	0800b7e3 	.word	0x0800b7e3
 8007c4c:	0800b7eb 	.word	0x0800b7eb
 8007c50:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007c52:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007c56:	4553      	cmp	r3, sl
 8007c58:	bfa8      	it	ge
 8007c5a:	4653      	movge	r3, sl
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	4699      	mov	r9, r3
 8007c60:	dc36      	bgt.n	8007cd0 <_printf_float+0x364>
 8007c62:	f04f 0b00 	mov.w	fp, #0
 8007c66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c6a:	f104 021a 	add.w	r2, r4, #26
 8007c6e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007c70:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c72:	eba3 0309 	sub.w	r3, r3, r9
 8007c76:	455b      	cmp	r3, fp
 8007c78:	dc31      	bgt.n	8007cde <_printf_float+0x372>
 8007c7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c7c:	459a      	cmp	sl, r3
 8007c7e:	dc3a      	bgt.n	8007cf6 <_printf_float+0x38a>
 8007c80:	6823      	ldr	r3, [r4, #0]
 8007c82:	07da      	lsls	r2, r3, #31
 8007c84:	d437      	bmi.n	8007cf6 <_printf_float+0x38a>
 8007c86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c88:	ebaa 0903 	sub.w	r9, sl, r3
 8007c8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c8e:	ebaa 0303 	sub.w	r3, sl, r3
 8007c92:	4599      	cmp	r9, r3
 8007c94:	bfa8      	it	ge
 8007c96:	4699      	movge	r9, r3
 8007c98:	f1b9 0f00 	cmp.w	r9, #0
 8007c9c:	dc33      	bgt.n	8007d06 <_printf_float+0x39a>
 8007c9e:	f04f 0800 	mov.w	r8, #0
 8007ca2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ca6:	f104 0b1a 	add.w	fp, r4, #26
 8007caa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007cac:	ebaa 0303 	sub.w	r3, sl, r3
 8007cb0:	eba3 0309 	sub.w	r3, r3, r9
 8007cb4:	4543      	cmp	r3, r8
 8007cb6:	f77f af7a 	ble.w	8007bae <_printf_float+0x242>
 8007cba:	2301      	movs	r3, #1
 8007cbc:	465a      	mov	r2, fp
 8007cbe:	4631      	mov	r1, r6
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	47b8      	blx	r7
 8007cc4:	3001      	adds	r0, #1
 8007cc6:	f43f aeac 	beq.w	8007a22 <_printf_float+0xb6>
 8007cca:	f108 0801 	add.w	r8, r8, #1
 8007cce:	e7ec      	b.n	8007caa <_printf_float+0x33e>
 8007cd0:	4642      	mov	r2, r8
 8007cd2:	4631      	mov	r1, r6
 8007cd4:	4628      	mov	r0, r5
 8007cd6:	47b8      	blx	r7
 8007cd8:	3001      	adds	r0, #1
 8007cda:	d1c2      	bne.n	8007c62 <_printf_float+0x2f6>
 8007cdc:	e6a1      	b.n	8007a22 <_printf_float+0xb6>
 8007cde:	2301      	movs	r3, #1
 8007ce0:	4631      	mov	r1, r6
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	920a      	str	r2, [sp, #40]	@ 0x28
 8007ce6:	47b8      	blx	r7
 8007ce8:	3001      	adds	r0, #1
 8007cea:	f43f ae9a 	beq.w	8007a22 <_printf_float+0xb6>
 8007cee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007cf0:	f10b 0b01 	add.w	fp, fp, #1
 8007cf4:	e7bb      	b.n	8007c6e <_printf_float+0x302>
 8007cf6:	4631      	mov	r1, r6
 8007cf8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007cfc:	4628      	mov	r0, r5
 8007cfe:	47b8      	blx	r7
 8007d00:	3001      	adds	r0, #1
 8007d02:	d1c0      	bne.n	8007c86 <_printf_float+0x31a>
 8007d04:	e68d      	b.n	8007a22 <_printf_float+0xb6>
 8007d06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007d08:	464b      	mov	r3, r9
 8007d0a:	4631      	mov	r1, r6
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	4442      	add	r2, r8
 8007d10:	47b8      	blx	r7
 8007d12:	3001      	adds	r0, #1
 8007d14:	d1c3      	bne.n	8007c9e <_printf_float+0x332>
 8007d16:	e684      	b.n	8007a22 <_printf_float+0xb6>
 8007d18:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007d1c:	f1ba 0f01 	cmp.w	sl, #1
 8007d20:	dc01      	bgt.n	8007d26 <_printf_float+0x3ba>
 8007d22:	07db      	lsls	r3, r3, #31
 8007d24:	d536      	bpl.n	8007d94 <_printf_float+0x428>
 8007d26:	2301      	movs	r3, #1
 8007d28:	4642      	mov	r2, r8
 8007d2a:	4631      	mov	r1, r6
 8007d2c:	4628      	mov	r0, r5
 8007d2e:	47b8      	blx	r7
 8007d30:	3001      	adds	r0, #1
 8007d32:	f43f ae76 	beq.w	8007a22 <_printf_float+0xb6>
 8007d36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007d3a:	4631      	mov	r1, r6
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	47b8      	blx	r7
 8007d40:	3001      	adds	r0, #1
 8007d42:	f43f ae6e 	beq.w	8007a22 <_printf_float+0xb6>
 8007d46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d52:	f7f8 fe29 	bl	80009a8 <__aeabi_dcmpeq>
 8007d56:	b9c0      	cbnz	r0, 8007d8a <_printf_float+0x41e>
 8007d58:	4653      	mov	r3, sl
 8007d5a:	f108 0201 	add.w	r2, r8, #1
 8007d5e:	4631      	mov	r1, r6
 8007d60:	4628      	mov	r0, r5
 8007d62:	47b8      	blx	r7
 8007d64:	3001      	adds	r0, #1
 8007d66:	d10c      	bne.n	8007d82 <_printf_float+0x416>
 8007d68:	e65b      	b.n	8007a22 <_printf_float+0xb6>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	465a      	mov	r2, fp
 8007d6e:	4631      	mov	r1, r6
 8007d70:	4628      	mov	r0, r5
 8007d72:	47b8      	blx	r7
 8007d74:	3001      	adds	r0, #1
 8007d76:	f43f ae54 	beq.w	8007a22 <_printf_float+0xb6>
 8007d7a:	f108 0801 	add.w	r8, r8, #1
 8007d7e:	45d0      	cmp	r8, sl
 8007d80:	dbf3      	blt.n	8007d6a <_printf_float+0x3fe>
 8007d82:	464b      	mov	r3, r9
 8007d84:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007d88:	e6e0      	b.n	8007b4c <_printf_float+0x1e0>
 8007d8a:	f04f 0800 	mov.w	r8, #0
 8007d8e:	f104 0b1a 	add.w	fp, r4, #26
 8007d92:	e7f4      	b.n	8007d7e <_printf_float+0x412>
 8007d94:	2301      	movs	r3, #1
 8007d96:	4642      	mov	r2, r8
 8007d98:	e7e1      	b.n	8007d5e <_printf_float+0x3f2>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	464a      	mov	r2, r9
 8007d9e:	4631      	mov	r1, r6
 8007da0:	4628      	mov	r0, r5
 8007da2:	47b8      	blx	r7
 8007da4:	3001      	adds	r0, #1
 8007da6:	f43f ae3c 	beq.w	8007a22 <_printf_float+0xb6>
 8007daa:	f108 0801 	add.w	r8, r8, #1
 8007dae:	68e3      	ldr	r3, [r4, #12]
 8007db0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007db2:	1a5b      	subs	r3, r3, r1
 8007db4:	4543      	cmp	r3, r8
 8007db6:	dcf0      	bgt.n	8007d9a <_printf_float+0x42e>
 8007db8:	e6fd      	b.n	8007bb6 <_printf_float+0x24a>
 8007dba:	f04f 0800 	mov.w	r8, #0
 8007dbe:	f104 0919 	add.w	r9, r4, #25
 8007dc2:	e7f4      	b.n	8007dae <_printf_float+0x442>

08007dc4 <_printf_common>:
 8007dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dc8:	4616      	mov	r6, r2
 8007dca:	4698      	mov	r8, r3
 8007dcc:	688a      	ldr	r2, [r1, #8]
 8007dce:	690b      	ldr	r3, [r1, #16]
 8007dd0:	4607      	mov	r7, r0
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	bfb8      	it	lt
 8007dd6:	4613      	movlt	r3, r2
 8007dd8:	6033      	str	r3, [r6, #0]
 8007dda:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007dde:	460c      	mov	r4, r1
 8007de0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007de4:	b10a      	cbz	r2, 8007dea <_printf_common+0x26>
 8007de6:	3301      	adds	r3, #1
 8007de8:	6033      	str	r3, [r6, #0]
 8007dea:	6823      	ldr	r3, [r4, #0]
 8007dec:	0699      	lsls	r1, r3, #26
 8007dee:	bf42      	ittt	mi
 8007df0:	6833      	ldrmi	r3, [r6, #0]
 8007df2:	3302      	addmi	r3, #2
 8007df4:	6033      	strmi	r3, [r6, #0]
 8007df6:	6825      	ldr	r5, [r4, #0]
 8007df8:	f015 0506 	ands.w	r5, r5, #6
 8007dfc:	d106      	bne.n	8007e0c <_printf_common+0x48>
 8007dfe:	f104 0a19 	add.w	sl, r4, #25
 8007e02:	68e3      	ldr	r3, [r4, #12]
 8007e04:	6832      	ldr	r2, [r6, #0]
 8007e06:	1a9b      	subs	r3, r3, r2
 8007e08:	42ab      	cmp	r3, r5
 8007e0a:	dc2b      	bgt.n	8007e64 <_printf_common+0xa0>
 8007e0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007e10:	6822      	ldr	r2, [r4, #0]
 8007e12:	3b00      	subs	r3, #0
 8007e14:	bf18      	it	ne
 8007e16:	2301      	movne	r3, #1
 8007e18:	0692      	lsls	r2, r2, #26
 8007e1a:	d430      	bmi.n	8007e7e <_printf_common+0xba>
 8007e1c:	4641      	mov	r1, r8
 8007e1e:	4638      	mov	r0, r7
 8007e20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007e24:	47c8      	blx	r9
 8007e26:	3001      	adds	r0, #1
 8007e28:	d023      	beq.n	8007e72 <_printf_common+0xae>
 8007e2a:	6823      	ldr	r3, [r4, #0]
 8007e2c:	6922      	ldr	r2, [r4, #16]
 8007e2e:	f003 0306 	and.w	r3, r3, #6
 8007e32:	2b04      	cmp	r3, #4
 8007e34:	bf14      	ite	ne
 8007e36:	2500      	movne	r5, #0
 8007e38:	6833      	ldreq	r3, [r6, #0]
 8007e3a:	f04f 0600 	mov.w	r6, #0
 8007e3e:	bf08      	it	eq
 8007e40:	68e5      	ldreq	r5, [r4, #12]
 8007e42:	f104 041a 	add.w	r4, r4, #26
 8007e46:	bf08      	it	eq
 8007e48:	1aed      	subeq	r5, r5, r3
 8007e4a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007e4e:	bf08      	it	eq
 8007e50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e54:	4293      	cmp	r3, r2
 8007e56:	bfc4      	itt	gt
 8007e58:	1a9b      	subgt	r3, r3, r2
 8007e5a:	18ed      	addgt	r5, r5, r3
 8007e5c:	42b5      	cmp	r5, r6
 8007e5e:	d11a      	bne.n	8007e96 <_printf_common+0xd2>
 8007e60:	2000      	movs	r0, #0
 8007e62:	e008      	b.n	8007e76 <_printf_common+0xb2>
 8007e64:	2301      	movs	r3, #1
 8007e66:	4652      	mov	r2, sl
 8007e68:	4641      	mov	r1, r8
 8007e6a:	4638      	mov	r0, r7
 8007e6c:	47c8      	blx	r9
 8007e6e:	3001      	adds	r0, #1
 8007e70:	d103      	bne.n	8007e7a <_printf_common+0xb6>
 8007e72:	f04f 30ff 	mov.w	r0, #4294967295
 8007e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e7a:	3501      	adds	r5, #1
 8007e7c:	e7c1      	b.n	8007e02 <_printf_common+0x3e>
 8007e7e:	2030      	movs	r0, #48	@ 0x30
 8007e80:	18e1      	adds	r1, r4, r3
 8007e82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e86:	1c5a      	adds	r2, r3, #1
 8007e88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e8c:	4422      	add	r2, r4
 8007e8e:	3302      	adds	r3, #2
 8007e90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e94:	e7c2      	b.n	8007e1c <_printf_common+0x58>
 8007e96:	2301      	movs	r3, #1
 8007e98:	4622      	mov	r2, r4
 8007e9a:	4641      	mov	r1, r8
 8007e9c:	4638      	mov	r0, r7
 8007e9e:	47c8      	blx	r9
 8007ea0:	3001      	adds	r0, #1
 8007ea2:	d0e6      	beq.n	8007e72 <_printf_common+0xae>
 8007ea4:	3601      	adds	r6, #1
 8007ea6:	e7d9      	b.n	8007e5c <_printf_common+0x98>

08007ea8 <_printf_i>:
 8007ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007eac:	7e0f      	ldrb	r7, [r1, #24]
 8007eae:	4691      	mov	r9, r2
 8007eb0:	2f78      	cmp	r7, #120	@ 0x78
 8007eb2:	4680      	mov	r8, r0
 8007eb4:	460c      	mov	r4, r1
 8007eb6:	469a      	mov	sl, r3
 8007eb8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007eba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007ebe:	d807      	bhi.n	8007ed0 <_printf_i+0x28>
 8007ec0:	2f62      	cmp	r7, #98	@ 0x62
 8007ec2:	d80a      	bhi.n	8007eda <_printf_i+0x32>
 8007ec4:	2f00      	cmp	r7, #0
 8007ec6:	f000 80d1 	beq.w	800806c <_printf_i+0x1c4>
 8007eca:	2f58      	cmp	r7, #88	@ 0x58
 8007ecc:	f000 80b8 	beq.w	8008040 <_printf_i+0x198>
 8007ed0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ed4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ed8:	e03a      	b.n	8007f50 <_printf_i+0xa8>
 8007eda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007ede:	2b15      	cmp	r3, #21
 8007ee0:	d8f6      	bhi.n	8007ed0 <_printf_i+0x28>
 8007ee2:	a101      	add	r1, pc, #4	@ (adr r1, 8007ee8 <_printf_i+0x40>)
 8007ee4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ee8:	08007f41 	.word	0x08007f41
 8007eec:	08007f55 	.word	0x08007f55
 8007ef0:	08007ed1 	.word	0x08007ed1
 8007ef4:	08007ed1 	.word	0x08007ed1
 8007ef8:	08007ed1 	.word	0x08007ed1
 8007efc:	08007ed1 	.word	0x08007ed1
 8007f00:	08007f55 	.word	0x08007f55
 8007f04:	08007ed1 	.word	0x08007ed1
 8007f08:	08007ed1 	.word	0x08007ed1
 8007f0c:	08007ed1 	.word	0x08007ed1
 8007f10:	08007ed1 	.word	0x08007ed1
 8007f14:	08008053 	.word	0x08008053
 8007f18:	08007f7f 	.word	0x08007f7f
 8007f1c:	0800800d 	.word	0x0800800d
 8007f20:	08007ed1 	.word	0x08007ed1
 8007f24:	08007ed1 	.word	0x08007ed1
 8007f28:	08008075 	.word	0x08008075
 8007f2c:	08007ed1 	.word	0x08007ed1
 8007f30:	08007f7f 	.word	0x08007f7f
 8007f34:	08007ed1 	.word	0x08007ed1
 8007f38:	08007ed1 	.word	0x08007ed1
 8007f3c:	08008015 	.word	0x08008015
 8007f40:	6833      	ldr	r3, [r6, #0]
 8007f42:	1d1a      	adds	r2, r3, #4
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	6032      	str	r2, [r6, #0]
 8007f48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f50:	2301      	movs	r3, #1
 8007f52:	e09c      	b.n	800808e <_printf_i+0x1e6>
 8007f54:	6833      	ldr	r3, [r6, #0]
 8007f56:	6820      	ldr	r0, [r4, #0]
 8007f58:	1d19      	adds	r1, r3, #4
 8007f5a:	6031      	str	r1, [r6, #0]
 8007f5c:	0606      	lsls	r6, r0, #24
 8007f5e:	d501      	bpl.n	8007f64 <_printf_i+0xbc>
 8007f60:	681d      	ldr	r5, [r3, #0]
 8007f62:	e003      	b.n	8007f6c <_printf_i+0xc4>
 8007f64:	0645      	lsls	r5, r0, #25
 8007f66:	d5fb      	bpl.n	8007f60 <_printf_i+0xb8>
 8007f68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f6c:	2d00      	cmp	r5, #0
 8007f6e:	da03      	bge.n	8007f78 <_printf_i+0xd0>
 8007f70:	232d      	movs	r3, #45	@ 0x2d
 8007f72:	426d      	negs	r5, r5
 8007f74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f78:	230a      	movs	r3, #10
 8007f7a:	4858      	ldr	r0, [pc, #352]	@ (80080dc <_printf_i+0x234>)
 8007f7c:	e011      	b.n	8007fa2 <_printf_i+0xfa>
 8007f7e:	6821      	ldr	r1, [r4, #0]
 8007f80:	6833      	ldr	r3, [r6, #0]
 8007f82:	0608      	lsls	r0, r1, #24
 8007f84:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f88:	d402      	bmi.n	8007f90 <_printf_i+0xe8>
 8007f8a:	0649      	lsls	r1, r1, #25
 8007f8c:	bf48      	it	mi
 8007f8e:	b2ad      	uxthmi	r5, r5
 8007f90:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f92:	6033      	str	r3, [r6, #0]
 8007f94:	bf14      	ite	ne
 8007f96:	230a      	movne	r3, #10
 8007f98:	2308      	moveq	r3, #8
 8007f9a:	4850      	ldr	r0, [pc, #320]	@ (80080dc <_printf_i+0x234>)
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007fa2:	6866      	ldr	r6, [r4, #4]
 8007fa4:	2e00      	cmp	r6, #0
 8007fa6:	60a6      	str	r6, [r4, #8]
 8007fa8:	db05      	blt.n	8007fb6 <_printf_i+0x10e>
 8007faa:	6821      	ldr	r1, [r4, #0]
 8007fac:	432e      	orrs	r6, r5
 8007fae:	f021 0104 	bic.w	r1, r1, #4
 8007fb2:	6021      	str	r1, [r4, #0]
 8007fb4:	d04b      	beq.n	800804e <_printf_i+0x1a6>
 8007fb6:	4616      	mov	r6, r2
 8007fb8:	fbb5 f1f3 	udiv	r1, r5, r3
 8007fbc:	fb03 5711 	mls	r7, r3, r1, r5
 8007fc0:	5dc7      	ldrb	r7, [r0, r7]
 8007fc2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007fc6:	462f      	mov	r7, r5
 8007fc8:	42bb      	cmp	r3, r7
 8007fca:	460d      	mov	r5, r1
 8007fcc:	d9f4      	bls.n	8007fb8 <_printf_i+0x110>
 8007fce:	2b08      	cmp	r3, #8
 8007fd0:	d10b      	bne.n	8007fea <_printf_i+0x142>
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	07df      	lsls	r7, r3, #31
 8007fd6:	d508      	bpl.n	8007fea <_printf_i+0x142>
 8007fd8:	6923      	ldr	r3, [r4, #16]
 8007fda:	6861      	ldr	r1, [r4, #4]
 8007fdc:	4299      	cmp	r1, r3
 8007fde:	bfde      	ittt	le
 8007fe0:	2330      	movle	r3, #48	@ 0x30
 8007fe2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007fe6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007fea:	1b92      	subs	r2, r2, r6
 8007fec:	6122      	str	r2, [r4, #16]
 8007fee:	464b      	mov	r3, r9
 8007ff0:	4621      	mov	r1, r4
 8007ff2:	4640      	mov	r0, r8
 8007ff4:	f8cd a000 	str.w	sl, [sp]
 8007ff8:	aa03      	add	r2, sp, #12
 8007ffa:	f7ff fee3 	bl	8007dc4 <_printf_common>
 8007ffe:	3001      	adds	r0, #1
 8008000:	d14a      	bne.n	8008098 <_printf_i+0x1f0>
 8008002:	f04f 30ff 	mov.w	r0, #4294967295
 8008006:	b004      	add	sp, #16
 8008008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800800c:	6823      	ldr	r3, [r4, #0]
 800800e:	f043 0320 	orr.w	r3, r3, #32
 8008012:	6023      	str	r3, [r4, #0]
 8008014:	2778      	movs	r7, #120	@ 0x78
 8008016:	4832      	ldr	r0, [pc, #200]	@ (80080e0 <_printf_i+0x238>)
 8008018:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800801c:	6823      	ldr	r3, [r4, #0]
 800801e:	6831      	ldr	r1, [r6, #0]
 8008020:	061f      	lsls	r7, r3, #24
 8008022:	f851 5b04 	ldr.w	r5, [r1], #4
 8008026:	d402      	bmi.n	800802e <_printf_i+0x186>
 8008028:	065f      	lsls	r7, r3, #25
 800802a:	bf48      	it	mi
 800802c:	b2ad      	uxthmi	r5, r5
 800802e:	6031      	str	r1, [r6, #0]
 8008030:	07d9      	lsls	r1, r3, #31
 8008032:	bf44      	itt	mi
 8008034:	f043 0320 	orrmi.w	r3, r3, #32
 8008038:	6023      	strmi	r3, [r4, #0]
 800803a:	b11d      	cbz	r5, 8008044 <_printf_i+0x19c>
 800803c:	2310      	movs	r3, #16
 800803e:	e7ad      	b.n	8007f9c <_printf_i+0xf4>
 8008040:	4826      	ldr	r0, [pc, #152]	@ (80080dc <_printf_i+0x234>)
 8008042:	e7e9      	b.n	8008018 <_printf_i+0x170>
 8008044:	6823      	ldr	r3, [r4, #0]
 8008046:	f023 0320 	bic.w	r3, r3, #32
 800804a:	6023      	str	r3, [r4, #0]
 800804c:	e7f6      	b.n	800803c <_printf_i+0x194>
 800804e:	4616      	mov	r6, r2
 8008050:	e7bd      	b.n	8007fce <_printf_i+0x126>
 8008052:	6833      	ldr	r3, [r6, #0]
 8008054:	6825      	ldr	r5, [r4, #0]
 8008056:	1d18      	adds	r0, r3, #4
 8008058:	6961      	ldr	r1, [r4, #20]
 800805a:	6030      	str	r0, [r6, #0]
 800805c:	062e      	lsls	r6, r5, #24
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	d501      	bpl.n	8008066 <_printf_i+0x1be>
 8008062:	6019      	str	r1, [r3, #0]
 8008064:	e002      	b.n	800806c <_printf_i+0x1c4>
 8008066:	0668      	lsls	r0, r5, #25
 8008068:	d5fb      	bpl.n	8008062 <_printf_i+0x1ba>
 800806a:	8019      	strh	r1, [r3, #0]
 800806c:	2300      	movs	r3, #0
 800806e:	4616      	mov	r6, r2
 8008070:	6123      	str	r3, [r4, #16]
 8008072:	e7bc      	b.n	8007fee <_printf_i+0x146>
 8008074:	6833      	ldr	r3, [r6, #0]
 8008076:	2100      	movs	r1, #0
 8008078:	1d1a      	adds	r2, r3, #4
 800807a:	6032      	str	r2, [r6, #0]
 800807c:	681e      	ldr	r6, [r3, #0]
 800807e:	6862      	ldr	r2, [r4, #4]
 8008080:	4630      	mov	r0, r6
 8008082:	f000 fb9a 	bl	80087ba <memchr>
 8008086:	b108      	cbz	r0, 800808c <_printf_i+0x1e4>
 8008088:	1b80      	subs	r0, r0, r6
 800808a:	6060      	str	r0, [r4, #4]
 800808c:	6863      	ldr	r3, [r4, #4]
 800808e:	6123      	str	r3, [r4, #16]
 8008090:	2300      	movs	r3, #0
 8008092:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008096:	e7aa      	b.n	8007fee <_printf_i+0x146>
 8008098:	4632      	mov	r2, r6
 800809a:	4649      	mov	r1, r9
 800809c:	4640      	mov	r0, r8
 800809e:	6923      	ldr	r3, [r4, #16]
 80080a0:	47d0      	blx	sl
 80080a2:	3001      	adds	r0, #1
 80080a4:	d0ad      	beq.n	8008002 <_printf_i+0x15a>
 80080a6:	6823      	ldr	r3, [r4, #0]
 80080a8:	079b      	lsls	r3, r3, #30
 80080aa:	d413      	bmi.n	80080d4 <_printf_i+0x22c>
 80080ac:	68e0      	ldr	r0, [r4, #12]
 80080ae:	9b03      	ldr	r3, [sp, #12]
 80080b0:	4298      	cmp	r0, r3
 80080b2:	bfb8      	it	lt
 80080b4:	4618      	movlt	r0, r3
 80080b6:	e7a6      	b.n	8008006 <_printf_i+0x15e>
 80080b8:	2301      	movs	r3, #1
 80080ba:	4632      	mov	r2, r6
 80080bc:	4649      	mov	r1, r9
 80080be:	4640      	mov	r0, r8
 80080c0:	47d0      	blx	sl
 80080c2:	3001      	adds	r0, #1
 80080c4:	d09d      	beq.n	8008002 <_printf_i+0x15a>
 80080c6:	3501      	adds	r5, #1
 80080c8:	68e3      	ldr	r3, [r4, #12]
 80080ca:	9903      	ldr	r1, [sp, #12]
 80080cc:	1a5b      	subs	r3, r3, r1
 80080ce:	42ab      	cmp	r3, r5
 80080d0:	dcf2      	bgt.n	80080b8 <_printf_i+0x210>
 80080d2:	e7eb      	b.n	80080ac <_printf_i+0x204>
 80080d4:	2500      	movs	r5, #0
 80080d6:	f104 0619 	add.w	r6, r4, #25
 80080da:	e7f5      	b.n	80080c8 <_printf_i+0x220>
 80080dc:	0800b7ed 	.word	0x0800b7ed
 80080e0:	0800b7fe 	.word	0x0800b7fe

080080e4 <std>:
 80080e4:	2300      	movs	r3, #0
 80080e6:	b510      	push	{r4, lr}
 80080e8:	4604      	mov	r4, r0
 80080ea:	e9c0 3300 	strd	r3, r3, [r0]
 80080ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080f2:	6083      	str	r3, [r0, #8]
 80080f4:	8181      	strh	r1, [r0, #12]
 80080f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80080f8:	81c2      	strh	r2, [r0, #14]
 80080fa:	6183      	str	r3, [r0, #24]
 80080fc:	4619      	mov	r1, r3
 80080fe:	2208      	movs	r2, #8
 8008100:	305c      	adds	r0, #92	@ 0x5c
 8008102:	f000 fa51 	bl	80085a8 <memset>
 8008106:	4b0d      	ldr	r3, [pc, #52]	@ (800813c <std+0x58>)
 8008108:	6224      	str	r4, [r4, #32]
 800810a:	6263      	str	r3, [r4, #36]	@ 0x24
 800810c:	4b0c      	ldr	r3, [pc, #48]	@ (8008140 <std+0x5c>)
 800810e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008110:	4b0c      	ldr	r3, [pc, #48]	@ (8008144 <std+0x60>)
 8008112:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008114:	4b0c      	ldr	r3, [pc, #48]	@ (8008148 <std+0x64>)
 8008116:	6323      	str	r3, [r4, #48]	@ 0x30
 8008118:	4b0c      	ldr	r3, [pc, #48]	@ (800814c <std+0x68>)
 800811a:	429c      	cmp	r4, r3
 800811c:	d006      	beq.n	800812c <std+0x48>
 800811e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008122:	4294      	cmp	r4, r2
 8008124:	d002      	beq.n	800812c <std+0x48>
 8008126:	33d0      	adds	r3, #208	@ 0xd0
 8008128:	429c      	cmp	r4, r3
 800812a:	d105      	bne.n	8008138 <std+0x54>
 800812c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008134:	f000 bb3e 	b.w	80087b4 <__retarget_lock_init_recursive>
 8008138:	bd10      	pop	{r4, pc}
 800813a:	bf00      	nop
 800813c:	080083f9 	.word	0x080083f9
 8008140:	0800841b 	.word	0x0800841b
 8008144:	08008453 	.word	0x08008453
 8008148:	08008477 	.word	0x08008477
 800814c:	20000640 	.word	0x20000640

08008150 <stdio_exit_handler>:
 8008150:	4a02      	ldr	r2, [pc, #8]	@ (800815c <stdio_exit_handler+0xc>)
 8008152:	4903      	ldr	r1, [pc, #12]	@ (8008160 <stdio_exit_handler+0x10>)
 8008154:	4803      	ldr	r0, [pc, #12]	@ (8008164 <stdio_exit_handler+0x14>)
 8008156:	f000 b869 	b.w	800822c <_fwalk_sglue>
 800815a:	bf00      	nop
 800815c:	200000b4 	.word	0x200000b4
 8008160:	0800a409 	.word	0x0800a409
 8008164:	200000c4 	.word	0x200000c4

08008168 <cleanup_stdio>:
 8008168:	6841      	ldr	r1, [r0, #4]
 800816a:	4b0c      	ldr	r3, [pc, #48]	@ (800819c <cleanup_stdio+0x34>)
 800816c:	b510      	push	{r4, lr}
 800816e:	4299      	cmp	r1, r3
 8008170:	4604      	mov	r4, r0
 8008172:	d001      	beq.n	8008178 <cleanup_stdio+0x10>
 8008174:	f002 f948 	bl	800a408 <_fflush_r>
 8008178:	68a1      	ldr	r1, [r4, #8]
 800817a:	4b09      	ldr	r3, [pc, #36]	@ (80081a0 <cleanup_stdio+0x38>)
 800817c:	4299      	cmp	r1, r3
 800817e:	d002      	beq.n	8008186 <cleanup_stdio+0x1e>
 8008180:	4620      	mov	r0, r4
 8008182:	f002 f941 	bl	800a408 <_fflush_r>
 8008186:	68e1      	ldr	r1, [r4, #12]
 8008188:	4b06      	ldr	r3, [pc, #24]	@ (80081a4 <cleanup_stdio+0x3c>)
 800818a:	4299      	cmp	r1, r3
 800818c:	d004      	beq.n	8008198 <cleanup_stdio+0x30>
 800818e:	4620      	mov	r0, r4
 8008190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008194:	f002 b938 	b.w	800a408 <_fflush_r>
 8008198:	bd10      	pop	{r4, pc}
 800819a:	bf00      	nop
 800819c:	20000640 	.word	0x20000640
 80081a0:	200006a8 	.word	0x200006a8
 80081a4:	20000710 	.word	0x20000710

080081a8 <global_stdio_init.part.0>:
 80081a8:	b510      	push	{r4, lr}
 80081aa:	4b0b      	ldr	r3, [pc, #44]	@ (80081d8 <global_stdio_init.part.0+0x30>)
 80081ac:	4c0b      	ldr	r4, [pc, #44]	@ (80081dc <global_stdio_init.part.0+0x34>)
 80081ae:	4a0c      	ldr	r2, [pc, #48]	@ (80081e0 <global_stdio_init.part.0+0x38>)
 80081b0:	4620      	mov	r0, r4
 80081b2:	601a      	str	r2, [r3, #0]
 80081b4:	2104      	movs	r1, #4
 80081b6:	2200      	movs	r2, #0
 80081b8:	f7ff ff94 	bl	80080e4 <std>
 80081bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80081c0:	2201      	movs	r2, #1
 80081c2:	2109      	movs	r1, #9
 80081c4:	f7ff ff8e 	bl	80080e4 <std>
 80081c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80081cc:	2202      	movs	r2, #2
 80081ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081d2:	2112      	movs	r1, #18
 80081d4:	f7ff bf86 	b.w	80080e4 <std>
 80081d8:	20000778 	.word	0x20000778
 80081dc:	20000640 	.word	0x20000640
 80081e0:	08008151 	.word	0x08008151

080081e4 <__sfp_lock_acquire>:
 80081e4:	4801      	ldr	r0, [pc, #4]	@ (80081ec <__sfp_lock_acquire+0x8>)
 80081e6:	f000 bae6 	b.w	80087b6 <__retarget_lock_acquire_recursive>
 80081ea:	bf00      	nop
 80081ec:	20000781 	.word	0x20000781

080081f0 <__sfp_lock_release>:
 80081f0:	4801      	ldr	r0, [pc, #4]	@ (80081f8 <__sfp_lock_release+0x8>)
 80081f2:	f000 bae1 	b.w	80087b8 <__retarget_lock_release_recursive>
 80081f6:	bf00      	nop
 80081f8:	20000781 	.word	0x20000781

080081fc <__sinit>:
 80081fc:	b510      	push	{r4, lr}
 80081fe:	4604      	mov	r4, r0
 8008200:	f7ff fff0 	bl	80081e4 <__sfp_lock_acquire>
 8008204:	6a23      	ldr	r3, [r4, #32]
 8008206:	b11b      	cbz	r3, 8008210 <__sinit+0x14>
 8008208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800820c:	f7ff bff0 	b.w	80081f0 <__sfp_lock_release>
 8008210:	4b04      	ldr	r3, [pc, #16]	@ (8008224 <__sinit+0x28>)
 8008212:	6223      	str	r3, [r4, #32]
 8008214:	4b04      	ldr	r3, [pc, #16]	@ (8008228 <__sinit+0x2c>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1f5      	bne.n	8008208 <__sinit+0xc>
 800821c:	f7ff ffc4 	bl	80081a8 <global_stdio_init.part.0>
 8008220:	e7f2      	b.n	8008208 <__sinit+0xc>
 8008222:	bf00      	nop
 8008224:	08008169 	.word	0x08008169
 8008228:	20000778 	.word	0x20000778

0800822c <_fwalk_sglue>:
 800822c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008230:	4607      	mov	r7, r0
 8008232:	4688      	mov	r8, r1
 8008234:	4614      	mov	r4, r2
 8008236:	2600      	movs	r6, #0
 8008238:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800823c:	f1b9 0901 	subs.w	r9, r9, #1
 8008240:	d505      	bpl.n	800824e <_fwalk_sglue+0x22>
 8008242:	6824      	ldr	r4, [r4, #0]
 8008244:	2c00      	cmp	r4, #0
 8008246:	d1f7      	bne.n	8008238 <_fwalk_sglue+0xc>
 8008248:	4630      	mov	r0, r6
 800824a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800824e:	89ab      	ldrh	r3, [r5, #12]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d907      	bls.n	8008264 <_fwalk_sglue+0x38>
 8008254:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008258:	3301      	adds	r3, #1
 800825a:	d003      	beq.n	8008264 <_fwalk_sglue+0x38>
 800825c:	4629      	mov	r1, r5
 800825e:	4638      	mov	r0, r7
 8008260:	47c0      	blx	r8
 8008262:	4306      	orrs	r6, r0
 8008264:	3568      	adds	r5, #104	@ 0x68
 8008266:	e7e9      	b.n	800823c <_fwalk_sglue+0x10>

08008268 <iprintf>:
 8008268:	b40f      	push	{r0, r1, r2, r3}
 800826a:	b507      	push	{r0, r1, r2, lr}
 800826c:	4906      	ldr	r1, [pc, #24]	@ (8008288 <iprintf+0x20>)
 800826e:	ab04      	add	r3, sp, #16
 8008270:	6808      	ldr	r0, [r1, #0]
 8008272:	f853 2b04 	ldr.w	r2, [r3], #4
 8008276:	6881      	ldr	r1, [r0, #8]
 8008278:	9301      	str	r3, [sp, #4]
 800827a:	f001 ff2d 	bl	800a0d8 <_vfiprintf_r>
 800827e:	b003      	add	sp, #12
 8008280:	f85d eb04 	ldr.w	lr, [sp], #4
 8008284:	b004      	add	sp, #16
 8008286:	4770      	bx	lr
 8008288:	200000c0 	.word	0x200000c0

0800828c <_puts_r>:
 800828c:	6a03      	ldr	r3, [r0, #32]
 800828e:	b570      	push	{r4, r5, r6, lr}
 8008290:	4605      	mov	r5, r0
 8008292:	460e      	mov	r6, r1
 8008294:	6884      	ldr	r4, [r0, #8]
 8008296:	b90b      	cbnz	r3, 800829c <_puts_r+0x10>
 8008298:	f7ff ffb0 	bl	80081fc <__sinit>
 800829c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800829e:	07db      	lsls	r3, r3, #31
 80082a0:	d405      	bmi.n	80082ae <_puts_r+0x22>
 80082a2:	89a3      	ldrh	r3, [r4, #12]
 80082a4:	0598      	lsls	r0, r3, #22
 80082a6:	d402      	bmi.n	80082ae <_puts_r+0x22>
 80082a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082aa:	f000 fa84 	bl	80087b6 <__retarget_lock_acquire_recursive>
 80082ae:	89a3      	ldrh	r3, [r4, #12]
 80082b0:	0719      	lsls	r1, r3, #28
 80082b2:	d502      	bpl.n	80082ba <_puts_r+0x2e>
 80082b4:	6923      	ldr	r3, [r4, #16]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d135      	bne.n	8008326 <_puts_r+0x9a>
 80082ba:	4621      	mov	r1, r4
 80082bc:	4628      	mov	r0, r5
 80082be:	f000 f91d 	bl	80084fc <__swsetup_r>
 80082c2:	b380      	cbz	r0, 8008326 <_puts_r+0x9a>
 80082c4:	f04f 35ff 	mov.w	r5, #4294967295
 80082c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082ca:	07da      	lsls	r2, r3, #31
 80082cc:	d405      	bmi.n	80082da <_puts_r+0x4e>
 80082ce:	89a3      	ldrh	r3, [r4, #12]
 80082d0:	059b      	lsls	r3, r3, #22
 80082d2:	d402      	bmi.n	80082da <_puts_r+0x4e>
 80082d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082d6:	f000 fa6f 	bl	80087b8 <__retarget_lock_release_recursive>
 80082da:	4628      	mov	r0, r5
 80082dc:	bd70      	pop	{r4, r5, r6, pc}
 80082de:	2b00      	cmp	r3, #0
 80082e0:	da04      	bge.n	80082ec <_puts_r+0x60>
 80082e2:	69a2      	ldr	r2, [r4, #24]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	dc17      	bgt.n	8008318 <_puts_r+0x8c>
 80082e8:	290a      	cmp	r1, #10
 80082ea:	d015      	beq.n	8008318 <_puts_r+0x8c>
 80082ec:	6823      	ldr	r3, [r4, #0]
 80082ee:	1c5a      	adds	r2, r3, #1
 80082f0:	6022      	str	r2, [r4, #0]
 80082f2:	7019      	strb	r1, [r3, #0]
 80082f4:	68a3      	ldr	r3, [r4, #8]
 80082f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80082fa:	3b01      	subs	r3, #1
 80082fc:	60a3      	str	r3, [r4, #8]
 80082fe:	2900      	cmp	r1, #0
 8008300:	d1ed      	bne.n	80082de <_puts_r+0x52>
 8008302:	2b00      	cmp	r3, #0
 8008304:	da11      	bge.n	800832a <_puts_r+0x9e>
 8008306:	4622      	mov	r2, r4
 8008308:	210a      	movs	r1, #10
 800830a:	4628      	mov	r0, r5
 800830c:	f000 f8b7 	bl	800847e <__swbuf_r>
 8008310:	3001      	adds	r0, #1
 8008312:	d0d7      	beq.n	80082c4 <_puts_r+0x38>
 8008314:	250a      	movs	r5, #10
 8008316:	e7d7      	b.n	80082c8 <_puts_r+0x3c>
 8008318:	4622      	mov	r2, r4
 800831a:	4628      	mov	r0, r5
 800831c:	f000 f8af 	bl	800847e <__swbuf_r>
 8008320:	3001      	adds	r0, #1
 8008322:	d1e7      	bne.n	80082f4 <_puts_r+0x68>
 8008324:	e7ce      	b.n	80082c4 <_puts_r+0x38>
 8008326:	3e01      	subs	r6, #1
 8008328:	e7e4      	b.n	80082f4 <_puts_r+0x68>
 800832a:	6823      	ldr	r3, [r4, #0]
 800832c:	1c5a      	adds	r2, r3, #1
 800832e:	6022      	str	r2, [r4, #0]
 8008330:	220a      	movs	r2, #10
 8008332:	701a      	strb	r2, [r3, #0]
 8008334:	e7ee      	b.n	8008314 <_puts_r+0x88>
	...

08008338 <puts>:
 8008338:	4b02      	ldr	r3, [pc, #8]	@ (8008344 <puts+0xc>)
 800833a:	4601      	mov	r1, r0
 800833c:	6818      	ldr	r0, [r3, #0]
 800833e:	f7ff bfa5 	b.w	800828c <_puts_r>
 8008342:	bf00      	nop
 8008344:	200000c0 	.word	0x200000c0

08008348 <sniprintf>:
 8008348:	b40c      	push	{r2, r3}
 800834a:	b530      	push	{r4, r5, lr}
 800834c:	4b18      	ldr	r3, [pc, #96]	@ (80083b0 <sniprintf+0x68>)
 800834e:	1e0c      	subs	r4, r1, #0
 8008350:	681d      	ldr	r5, [r3, #0]
 8008352:	b09d      	sub	sp, #116	@ 0x74
 8008354:	da08      	bge.n	8008368 <sniprintf+0x20>
 8008356:	238b      	movs	r3, #139	@ 0x8b
 8008358:	f04f 30ff 	mov.w	r0, #4294967295
 800835c:	602b      	str	r3, [r5, #0]
 800835e:	b01d      	add	sp, #116	@ 0x74
 8008360:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008364:	b002      	add	sp, #8
 8008366:	4770      	bx	lr
 8008368:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800836c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008370:	f04f 0300 	mov.w	r3, #0
 8008374:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008376:	bf0c      	ite	eq
 8008378:	4623      	moveq	r3, r4
 800837a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800837e:	9304      	str	r3, [sp, #16]
 8008380:	9307      	str	r3, [sp, #28]
 8008382:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008386:	9002      	str	r0, [sp, #8]
 8008388:	9006      	str	r0, [sp, #24]
 800838a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800838e:	4628      	mov	r0, r5
 8008390:	ab21      	add	r3, sp, #132	@ 0x84
 8008392:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008394:	a902      	add	r1, sp, #8
 8008396:	9301      	str	r3, [sp, #4]
 8008398:	f001 fd7a 	bl	8009e90 <_svfiprintf_r>
 800839c:	1c43      	adds	r3, r0, #1
 800839e:	bfbc      	itt	lt
 80083a0:	238b      	movlt	r3, #139	@ 0x8b
 80083a2:	602b      	strlt	r3, [r5, #0]
 80083a4:	2c00      	cmp	r4, #0
 80083a6:	d0da      	beq.n	800835e <sniprintf+0x16>
 80083a8:	2200      	movs	r2, #0
 80083aa:	9b02      	ldr	r3, [sp, #8]
 80083ac:	701a      	strb	r2, [r3, #0]
 80083ae:	e7d6      	b.n	800835e <sniprintf+0x16>
 80083b0:	200000c0 	.word	0x200000c0

080083b4 <siprintf>:
 80083b4:	b40e      	push	{r1, r2, r3}
 80083b6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80083ba:	b510      	push	{r4, lr}
 80083bc:	2400      	movs	r4, #0
 80083be:	b09d      	sub	sp, #116	@ 0x74
 80083c0:	ab1f      	add	r3, sp, #124	@ 0x7c
 80083c2:	9002      	str	r0, [sp, #8]
 80083c4:	9006      	str	r0, [sp, #24]
 80083c6:	9107      	str	r1, [sp, #28]
 80083c8:	9104      	str	r1, [sp, #16]
 80083ca:	4809      	ldr	r0, [pc, #36]	@ (80083f0 <siprintf+0x3c>)
 80083cc:	4909      	ldr	r1, [pc, #36]	@ (80083f4 <siprintf+0x40>)
 80083ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80083d2:	9105      	str	r1, [sp, #20]
 80083d4:	6800      	ldr	r0, [r0, #0]
 80083d6:	a902      	add	r1, sp, #8
 80083d8:	9301      	str	r3, [sp, #4]
 80083da:	941b      	str	r4, [sp, #108]	@ 0x6c
 80083dc:	f001 fd58 	bl	8009e90 <_svfiprintf_r>
 80083e0:	9b02      	ldr	r3, [sp, #8]
 80083e2:	701c      	strb	r4, [r3, #0]
 80083e4:	b01d      	add	sp, #116	@ 0x74
 80083e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083ea:	b003      	add	sp, #12
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	200000c0 	.word	0x200000c0
 80083f4:	ffff0208 	.word	0xffff0208

080083f8 <__sread>:
 80083f8:	b510      	push	{r4, lr}
 80083fa:	460c      	mov	r4, r1
 80083fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008400:	f000 f98a 	bl	8008718 <_read_r>
 8008404:	2800      	cmp	r0, #0
 8008406:	bfab      	itete	ge
 8008408:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800840a:	89a3      	ldrhlt	r3, [r4, #12]
 800840c:	181b      	addge	r3, r3, r0
 800840e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008412:	bfac      	ite	ge
 8008414:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008416:	81a3      	strhlt	r3, [r4, #12]
 8008418:	bd10      	pop	{r4, pc}

0800841a <__swrite>:
 800841a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800841e:	461f      	mov	r7, r3
 8008420:	898b      	ldrh	r3, [r1, #12]
 8008422:	4605      	mov	r5, r0
 8008424:	05db      	lsls	r3, r3, #23
 8008426:	460c      	mov	r4, r1
 8008428:	4616      	mov	r6, r2
 800842a:	d505      	bpl.n	8008438 <__swrite+0x1e>
 800842c:	2302      	movs	r3, #2
 800842e:	2200      	movs	r2, #0
 8008430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008434:	f000 f95e 	bl	80086f4 <_lseek_r>
 8008438:	89a3      	ldrh	r3, [r4, #12]
 800843a:	4632      	mov	r2, r6
 800843c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008440:	81a3      	strh	r3, [r4, #12]
 8008442:	4628      	mov	r0, r5
 8008444:	463b      	mov	r3, r7
 8008446:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800844a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800844e:	f000 b975 	b.w	800873c <_write_r>

08008452 <__sseek>:
 8008452:	b510      	push	{r4, lr}
 8008454:	460c      	mov	r4, r1
 8008456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800845a:	f000 f94b 	bl	80086f4 <_lseek_r>
 800845e:	1c43      	adds	r3, r0, #1
 8008460:	89a3      	ldrh	r3, [r4, #12]
 8008462:	bf15      	itete	ne
 8008464:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008466:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800846a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800846e:	81a3      	strheq	r3, [r4, #12]
 8008470:	bf18      	it	ne
 8008472:	81a3      	strhne	r3, [r4, #12]
 8008474:	bd10      	pop	{r4, pc}

08008476 <__sclose>:
 8008476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800847a:	f000 b92b 	b.w	80086d4 <_close_r>

0800847e <__swbuf_r>:
 800847e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008480:	460e      	mov	r6, r1
 8008482:	4614      	mov	r4, r2
 8008484:	4605      	mov	r5, r0
 8008486:	b118      	cbz	r0, 8008490 <__swbuf_r+0x12>
 8008488:	6a03      	ldr	r3, [r0, #32]
 800848a:	b90b      	cbnz	r3, 8008490 <__swbuf_r+0x12>
 800848c:	f7ff feb6 	bl	80081fc <__sinit>
 8008490:	69a3      	ldr	r3, [r4, #24]
 8008492:	60a3      	str	r3, [r4, #8]
 8008494:	89a3      	ldrh	r3, [r4, #12]
 8008496:	071a      	lsls	r2, r3, #28
 8008498:	d501      	bpl.n	800849e <__swbuf_r+0x20>
 800849a:	6923      	ldr	r3, [r4, #16]
 800849c:	b943      	cbnz	r3, 80084b0 <__swbuf_r+0x32>
 800849e:	4621      	mov	r1, r4
 80084a0:	4628      	mov	r0, r5
 80084a2:	f000 f82b 	bl	80084fc <__swsetup_r>
 80084a6:	b118      	cbz	r0, 80084b0 <__swbuf_r+0x32>
 80084a8:	f04f 37ff 	mov.w	r7, #4294967295
 80084ac:	4638      	mov	r0, r7
 80084ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084b0:	6823      	ldr	r3, [r4, #0]
 80084b2:	6922      	ldr	r2, [r4, #16]
 80084b4:	b2f6      	uxtb	r6, r6
 80084b6:	1a98      	subs	r0, r3, r2
 80084b8:	6963      	ldr	r3, [r4, #20]
 80084ba:	4637      	mov	r7, r6
 80084bc:	4283      	cmp	r3, r0
 80084be:	dc05      	bgt.n	80084cc <__swbuf_r+0x4e>
 80084c0:	4621      	mov	r1, r4
 80084c2:	4628      	mov	r0, r5
 80084c4:	f001 ffa0 	bl	800a408 <_fflush_r>
 80084c8:	2800      	cmp	r0, #0
 80084ca:	d1ed      	bne.n	80084a8 <__swbuf_r+0x2a>
 80084cc:	68a3      	ldr	r3, [r4, #8]
 80084ce:	3b01      	subs	r3, #1
 80084d0:	60a3      	str	r3, [r4, #8]
 80084d2:	6823      	ldr	r3, [r4, #0]
 80084d4:	1c5a      	adds	r2, r3, #1
 80084d6:	6022      	str	r2, [r4, #0]
 80084d8:	701e      	strb	r6, [r3, #0]
 80084da:	6962      	ldr	r2, [r4, #20]
 80084dc:	1c43      	adds	r3, r0, #1
 80084de:	429a      	cmp	r2, r3
 80084e0:	d004      	beq.n	80084ec <__swbuf_r+0x6e>
 80084e2:	89a3      	ldrh	r3, [r4, #12]
 80084e4:	07db      	lsls	r3, r3, #31
 80084e6:	d5e1      	bpl.n	80084ac <__swbuf_r+0x2e>
 80084e8:	2e0a      	cmp	r6, #10
 80084ea:	d1df      	bne.n	80084ac <__swbuf_r+0x2e>
 80084ec:	4621      	mov	r1, r4
 80084ee:	4628      	mov	r0, r5
 80084f0:	f001 ff8a 	bl	800a408 <_fflush_r>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	d0d9      	beq.n	80084ac <__swbuf_r+0x2e>
 80084f8:	e7d6      	b.n	80084a8 <__swbuf_r+0x2a>
	...

080084fc <__swsetup_r>:
 80084fc:	b538      	push	{r3, r4, r5, lr}
 80084fe:	4b29      	ldr	r3, [pc, #164]	@ (80085a4 <__swsetup_r+0xa8>)
 8008500:	4605      	mov	r5, r0
 8008502:	6818      	ldr	r0, [r3, #0]
 8008504:	460c      	mov	r4, r1
 8008506:	b118      	cbz	r0, 8008510 <__swsetup_r+0x14>
 8008508:	6a03      	ldr	r3, [r0, #32]
 800850a:	b90b      	cbnz	r3, 8008510 <__swsetup_r+0x14>
 800850c:	f7ff fe76 	bl	80081fc <__sinit>
 8008510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008514:	0719      	lsls	r1, r3, #28
 8008516:	d422      	bmi.n	800855e <__swsetup_r+0x62>
 8008518:	06da      	lsls	r2, r3, #27
 800851a:	d407      	bmi.n	800852c <__swsetup_r+0x30>
 800851c:	2209      	movs	r2, #9
 800851e:	602a      	str	r2, [r5, #0]
 8008520:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008524:	f04f 30ff 	mov.w	r0, #4294967295
 8008528:	81a3      	strh	r3, [r4, #12]
 800852a:	e033      	b.n	8008594 <__swsetup_r+0x98>
 800852c:	0758      	lsls	r0, r3, #29
 800852e:	d512      	bpl.n	8008556 <__swsetup_r+0x5a>
 8008530:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008532:	b141      	cbz	r1, 8008546 <__swsetup_r+0x4a>
 8008534:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008538:	4299      	cmp	r1, r3
 800853a:	d002      	beq.n	8008542 <__swsetup_r+0x46>
 800853c:	4628      	mov	r0, r5
 800853e:	f000 ffd3 	bl	80094e8 <_free_r>
 8008542:	2300      	movs	r3, #0
 8008544:	6363      	str	r3, [r4, #52]	@ 0x34
 8008546:	89a3      	ldrh	r3, [r4, #12]
 8008548:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800854c:	81a3      	strh	r3, [r4, #12]
 800854e:	2300      	movs	r3, #0
 8008550:	6063      	str	r3, [r4, #4]
 8008552:	6923      	ldr	r3, [r4, #16]
 8008554:	6023      	str	r3, [r4, #0]
 8008556:	89a3      	ldrh	r3, [r4, #12]
 8008558:	f043 0308 	orr.w	r3, r3, #8
 800855c:	81a3      	strh	r3, [r4, #12]
 800855e:	6923      	ldr	r3, [r4, #16]
 8008560:	b94b      	cbnz	r3, 8008576 <__swsetup_r+0x7a>
 8008562:	89a3      	ldrh	r3, [r4, #12]
 8008564:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008568:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800856c:	d003      	beq.n	8008576 <__swsetup_r+0x7a>
 800856e:	4621      	mov	r1, r4
 8008570:	4628      	mov	r0, r5
 8008572:	f001 ffa8 	bl	800a4c6 <__smakebuf_r>
 8008576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800857a:	f013 0201 	ands.w	r2, r3, #1
 800857e:	d00a      	beq.n	8008596 <__swsetup_r+0x9a>
 8008580:	2200      	movs	r2, #0
 8008582:	60a2      	str	r2, [r4, #8]
 8008584:	6962      	ldr	r2, [r4, #20]
 8008586:	4252      	negs	r2, r2
 8008588:	61a2      	str	r2, [r4, #24]
 800858a:	6922      	ldr	r2, [r4, #16]
 800858c:	b942      	cbnz	r2, 80085a0 <__swsetup_r+0xa4>
 800858e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008592:	d1c5      	bne.n	8008520 <__swsetup_r+0x24>
 8008594:	bd38      	pop	{r3, r4, r5, pc}
 8008596:	0799      	lsls	r1, r3, #30
 8008598:	bf58      	it	pl
 800859a:	6962      	ldrpl	r2, [r4, #20]
 800859c:	60a2      	str	r2, [r4, #8]
 800859e:	e7f4      	b.n	800858a <__swsetup_r+0x8e>
 80085a0:	2000      	movs	r0, #0
 80085a2:	e7f7      	b.n	8008594 <__swsetup_r+0x98>
 80085a4:	200000c0 	.word	0x200000c0

080085a8 <memset>:
 80085a8:	4603      	mov	r3, r0
 80085aa:	4402      	add	r2, r0
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d100      	bne.n	80085b2 <memset+0xa>
 80085b0:	4770      	bx	lr
 80085b2:	f803 1b01 	strb.w	r1, [r3], #1
 80085b6:	e7f9      	b.n	80085ac <memset+0x4>

080085b8 <strncpy>:
 80085b8:	4603      	mov	r3, r0
 80085ba:	b510      	push	{r4, lr}
 80085bc:	3901      	subs	r1, #1
 80085be:	b132      	cbz	r2, 80085ce <strncpy+0x16>
 80085c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80085c4:	3a01      	subs	r2, #1
 80085c6:	f803 4b01 	strb.w	r4, [r3], #1
 80085ca:	2c00      	cmp	r4, #0
 80085cc:	d1f7      	bne.n	80085be <strncpy+0x6>
 80085ce:	2100      	movs	r1, #0
 80085d0:	441a      	add	r2, r3
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d100      	bne.n	80085d8 <strncpy+0x20>
 80085d6:	bd10      	pop	{r4, pc}
 80085d8:	f803 1b01 	strb.w	r1, [r3], #1
 80085dc:	e7f9      	b.n	80085d2 <strncpy+0x1a>
	...

080085e0 <strtok>:
 80085e0:	4b16      	ldr	r3, [pc, #88]	@ (800863c <strtok+0x5c>)
 80085e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085e6:	681f      	ldr	r7, [r3, #0]
 80085e8:	4605      	mov	r5, r0
 80085ea:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80085ec:	460e      	mov	r6, r1
 80085ee:	b9ec      	cbnz	r4, 800862c <strtok+0x4c>
 80085f0:	2050      	movs	r0, #80	@ 0x50
 80085f2:	f000 ffc1 	bl	8009578 <malloc>
 80085f6:	4602      	mov	r2, r0
 80085f8:	6478      	str	r0, [r7, #68]	@ 0x44
 80085fa:	b920      	cbnz	r0, 8008606 <strtok+0x26>
 80085fc:	215b      	movs	r1, #91	@ 0x5b
 80085fe:	4b10      	ldr	r3, [pc, #64]	@ (8008640 <strtok+0x60>)
 8008600:	4810      	ldr	r0, [pc, #64]	@ (8008644 <strtok+0x64>)
 8008602:	f000 f8f7 	bl	80087f4 <__assert_func>
 8008606:	e9c0 4400 	strd	r4, r4, [r0]
 800860a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800860e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008612:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008616:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800861a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800861e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008622:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008626:	6184      	str	r4, [r0, #24]
 8008628:	7704      	strb	r4, [r0, #28]
 800862a:	6244      	str	r4, [r0, #36]	@ 0x24
 800862c:	4631      	mov	r1, r6
 800862e:	4628      	mov	r0, r5
 8008630:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008632:	2301      	movs	r3, #1
 8008634:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008638:	f000 b806 	b.w	8008648 <__strtok_r>
 800863c:	200000c0 	.word	0x200000c0
 8008640:	0800b80f 	.word	0x0800b80f
 8008644:	0800b826 	.word	0x0800b826

08008648 <__strtok_r>:
 8008648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800864a:	4604      	mov	r4, r0
 800864c:	b908      	cbnz	r0, 8008652 <__strtok_r+0xa>
 800864e:	6814      	ldr	r4, [r2, #0]
 8008650:	b144      	cbz	r4, 8008664 <__strtok_r+0x1c>
 8008652:	460f      	mov	r7, r1
 8008654:	4620      	mov	r0, r4
 8008656:	f814 5b01 	ldrb.w	r5, [r4], #1
 800865a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800865e:	b91e      	cbnz	r6, 8008668 <__strtok_r+0x20>
 8008660:	b965      	cbnz	r5, 800867c <__strtok_r+0x34>
 8008662:	6015      	str	r5, [r2, #0]
 8008664:	2000      	movs	r0, #0
 8008666:	e005      	b.n	8008674 <__strtok_r+0x2c>
 8008668:	42b5      	cmp	r5, r6
 800866a:	d1f6      	bne.n	800865a <__strtok_r+0x12>
 800866c:	2b00      	cmp	r3, #0
 800866e:	d1f0      	bne.n	8008652 <__strtok_r+0xa>
 8008670:	6014      	str	r4, [r2, #0]
 8008672:	7003      	strb	r3, [r0, #0]
 8008674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008676:	461c      	mov	r4, r3
 8008678:	e00c      	b.n	8008694 <__strtok_r+0x4c>
 800867a:	b91d      	cbnz	r5, 8008684 <__strtok_r+0x3c>
 800867c:	460e      	mov	r6, r1
 800867e:	4627      	mov	r7, r4
 8008680:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008684:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008688:	42ab      	cmp	r3, r5
 800868a:	d1f6      	bne.n	800867a <__strtok_r+0x32>
 800868c:	2b00      	cmp	r3, #0
 800868e:	d0f2      	beq.n	8008676 <__strtok_r+0x2e>
 8008690:	2300      	movs	r3, #0
 8008692:	703b      	strb	r3, [r7, #0]
 8008694:	6014      	str	r4, [r2, #0]
 8008696:	e7ed      	b.n	8008674 <__strtok_r+0x2c>

08008698 <strtok_r>:
 8008698:	2301      	movs	r3, #1
 800869a:	f7ff bfd5 	b.w	8008648 <__strtok_r>

0800869e <strstr>:
 800869e:	780a      	ldrb	r2, [r1, #0]
 80086a0:	b570      	push	{r4, r5, r6, lr}
 80086a2:	b96a      	cbnz	r2, 80086c0 <strstr+0x22>
 80086a4:	bd70      	pop	{r4, r5, r6, pc}
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d109      	bne.n	80086be <strstr+0x20>
 80086aa:	460c      	mov	r4, r1
 80086ac:	4605      	mov	r5, r0
 80086ae:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d0f6      	beq.n	80086a4 <strstr+0x6>
 80086b6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80086ba:	429e      	cmp	r6, r3
 80086bc:	d0f7      	beq.n	80086ae <strstr+0x10>
 80086be:	3001      	adds	r0, #1
 80086c0:	7803      	ldrb	r3, [r0, #0]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1ef      	bne.n	80086a6 <strstr+0x8>
 80086c6:	4618      	mov	r0, r3
 80086c8:	e7ec      	b.n	80086a4 <strstr+0x6>
	...

080086cc <_localeconv_r>:
 80086cc:	4800      	ldr	r0, [pc, #0]	@ (80086d0 <_localeconv_r+0x4>)
 80086ce:	4770      	bx	lr
 80086d0:	20000200 	.word	0x20000200

080086d4 <_close_r>:
 80086d4:	b538      	push	{r3, r4, r5, lr}
 80086d6:	2300      	movs	r3, #0
 80086d8:	4d05      	ldr	r5, [pc, #20]	@ (80086f0 <_close_r+0x1c>)
 80086da:	4604      	mov	r4, r0
 80086dc:	4608      	mov	r0, r1
 80086de:	602b      	str	r3, [r5, #0]
 80086e0:	f7fb fb81 	bl	8003de6 <_close>
 80086e4:	1c43      	adds	r3, r0, #1
 80086e6:	d102      	bne.n	80086ee <_close_r+0x1a>
 80086e8:	682b      	ldr	r3, [r5, #0]
 80086ea:	b103      	cbz	r3, 80086ee <_close_r+0x1a>
 80086ec:	6023      	str	r3, [r4, #0]
 80086ee:	bd38      	pop	{r3, r4, r5, pc}
 80086f0:	2000077c 	.word	0x2000077c

080086f4 <_lseek_r>:
 80086f4:	b538      	push	{r3, r4, r5, lr}
 80086f6:	4604      	mov	r4, r0
 80086f8:	4608      	mov	r0, r1
 80086fa:	4611      	mov	r1, r2
 80086fc:	2200      	movs	r2, #0
 80086fe:	4d05      	ldr	r5, [pc, #20]	@ (8008714 <_lseek_r+0x20>)
 8008700:	602a      	str	r2, [r5, #0]
 8008702:	461a      	mov	r2, r3
 8008704:	f7fb fb93 	bl	8003e2e <_lseek>
 8008708:	1c43      	adds	r3, r0, #1
 800870a:	d102      	bne.n	8008712 <_lseek_r+0x1e>
 800870c:	682b      	ldr	r3, [r5, #0]
 800870e:	b103      	cbz	r3, 8008712 <_lseek_r+0x1e>
 8008710:	6023      	str	r3, [r4, #0]
 8008712:	bd38      	pop	{r3, r4, r5, pc}
 8008714:	2000077c 	.word	0x2000077c

08008718 <_read_r>:
 8008718:	b538      	push	{r3, r4, r5, lr}
 800871a:	4604      	mov	r4, r0
 800871c:	4608      	mov	r0, r1
 800871e:	4611      	mov	r1, r2
 8008720:	2200      	movs	r2, #0
 8008722:	4d05      	ldr	r5, [pc, #20]	@ (8008738 <_read_r+0x20>)
 8008724:	602a      	str	r2, [r5, #0]
 8008726:	461a      	mov	r2, r3
 8008728:	f7fb fb24 	bl	8003d74 <_read>
 800872c:	1c43      	adds	r3, r0, #1
 800872e:	d102      	bne.n	8008736 <_read_r+0x1e>
 8008730:	682b      	ldr	r3, [r5, #0]
 8008732:	b103      	cbz	r3, 8008736 <_read_r+0x1e>
 8008734:	6023      	str	r3, [r4, #0]
 8008736:	bd38      	pop	{r3, r4, r5, pc}
 8008738:	2000077c 	.word	0x2000077c

0800873c <_write_r>:
 800873c:	b538      	push	{r3, r4, r5, lr}
 800873e:	4604      	mov	r4, r0
 8008740:	4608      	mov	r0, r1
 8008742:	4611      	mov	r1, r2
 8008744:	2200      	movs	r2, #0
 8008746:	4d05      	ldr	r5, [pc, #20]	@ (800875c <_write_r+0x20>)
 8008748:	602a      	str	r2, [r5, #0]
 800874a:	461a      	mov	r2, r3
 800874c:	f7fb fb2f 	bl	8003dae <_write>
 8008750:	1c43      	adds	r3, r0, #1
 8008752:	d102      	bne.n	800875a <_write_r+0x1e>
 8008754:	682b      	ldr	r3, [r5, #0]
 8008756:	b103      	cbz	r3, 800875a <_write_r+0x1e>
 8008758:	6023      	str	r3, [r4, #0]
 800875a:	bd38      	pop	{r3, r4, r5, pc}
 800875c:	2000077c 	.word	0x2000077c

08008760 <__errno>:
 8008760:	4b01      	ldr	r3, [pc, #4]	@ (8008768 <__errno+0x8>)
 8008762:	6818      	ldr	r0, [r3, #0]
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	200000c0 	.word	0x200000c0

0800876c <__libc_init_array>:
 800876c:	b570      	push	{r4, r5, r6, lr}
 800876e:	2600      	movs	r6, #0
 8008770:	4d0c      	ldr	r5, [pc, #48]	@ (80087a4 <__libc_init_array+0x38>)
 8008772:	4c0d      	ldr	r4, [pc, #52]	@ (80087a8 <__libc_init_array+0x3c>)
 8008774:	1b64      	subs	r4, r4, r5
 8008776:	10a4      	asrs	r4, r4, #2
 8008778:	42a6      	cmp	r6, r4
 800877a:	d109      	bne.n	8008790 <__libc_init_array+0x24>
 800877c:	f002 fb42 	bl	800ae04 <_init>
 8008780:	2600      	movs	r6, #0
 8008782:	4d0a      	ldr	r5, [pc, #40]	@ (80087ac <__libc_init_array+0x40>)
 8008784:	4c0a      	ldr	r4, [pc, #40]	@ (80087b0 <__libc_init_array+0x44>)
 8008786:	1b64      	subs	r4, r4, r5
 8008788:	10a4      	asrs	r4, r4, #2
 800878a:	42a6      	cmp	r6, r4
 800878c:	d105      	bne.n	800879a <__libc_init_array+0x2e>
 800878e:	bd70      	pop	{r4, r5, r6, pc}
 8008790:	f855 3b04 	ldr.w	r3, [r5], #4
 8008794:	4798      	blx	r3
 8008796:	3601      	adds	r6, #1
 8008798:	e7ee      	b.n	8008778 <__libc_init_array+0xc>
 800879a:	f855 3b04 	ldr.w	r3, [r5], #4
 800879e:	4798      	blx	r3
 80087a0:	3601      	adds	r6, #1
 80087a2:	e7f2      	b.n	800878a <__libc_init_array+0x1e>
 80087a4:	0800bb30 	.word	0x0800bb30
 80087a8:	0800bb30 	.word	0x0800bb30
 80087ac:	0800bb30 	.word	0x0800bb30
 80087b0:	0800bb34 	.word	0x0800bb34

080087b4 <__retarget_lock_init_recursive>:
 80087b4:	4770      	bx	lr

080087b6 <__retarget_lock_acquire_recursive>:
 80087b6:	4770      	bx	lr

080087b8 <__retarget_lock_release_recursive>:
 80087b8:	4770      	bx	lr

080087ba <memchr>:
 80087ba:	4603      	mov	r3, r0
 80087bc:	b510      	push	{r4, lr}
 80087be:	b2c9      	uxtb	r1, r1
 80087c0:	4402      	add	r2, r0
 80087c2:	4293      	cmp	r3, r2
 80087c4:	4618      	mov	r0, r3
 80087c6:	d101      	bne.n	80087cc <memchr+0x12>
 80087c8:	2000      	movs	r0, #0
 80087ca:	e003      	b.n	80087d4 <memchr+0x1a>
 80087cc:	7804      	ldrb	r4, [r0, #0]
 80087ce:	3301      	adds	r3, #1
 80087d0:	428c      	cmp	r4, r1
 80087d2:	d1f6      	bne.n	80087c2 <memchr+0x8>
 80087d4:	bd10      	pop	{r4, pc}

080087d6 <memcpy>:
 80087d6:	440a      	add	r2, r1
 80087d8:	4291      	cmp	r1, r2
 80087da:	f100 33ff 	add.w	r3, r0, #4294967295
 80087de:	d100      	bne.n	80087e2 <memcpy+0xc>
 80087e0:	4770      	bx	lr
 80087e2:	b510      	push	{r4, lr}
 80087e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087e8:	4291      	cmp	r1, r2
 80087ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087ee:	d1f9      	bne.n	80087e4 <memcpy+0xe>
 80087f0:	bd10      	pop	{r4, pc}
	...

080087f4 <__assert_func>:
 80087f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087f6:	4614      	mov	r4, r2
 80087f8:	461a      	mov	r2, r3
 80087fa:	4b09      	ldr	r3, [pc, #36]	@ (8008820 <__assert_func+0x2c>)
 80087fc:	4605      	mov	r5, r0
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	68d8      	ldr	r0, [r3, #12]
 8008802:	b14c      	cbz	r4, 8008818 <__assert_func+0x24>
 8008804:	4b07      	ldr	r3, [pc, #28]	@ (8008824 <__assert_func+0x30>)
 8008806:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800880a:	9100      	str	r1, [sp, #0]
 800880c:	462b      	mov	r3, r5
 800880e:	4906      	ldr	r1, [pc, #24]	@ (8008828 <__assert_func+0x34>)
 8008810:	f001 fe22 	bl	800a458 <fiprintf>
 8008814:	f001 fee0 	bl	800a5d8 <abort>
 8008818:	4b04      	ldr	r3, [pc, #16]	@ (800882c <__assert_func+0x38>)
 800881a:	461c      	mov	r4, r3
 800881c:	e7f3      	b.n	8008806 <__assert_func+0x12>
 800881e:	bf00      	nop
 8008820:	200000c0 	.word	0x200000c0
 8008824:	0800b880 	.word	0x0800b880
 8008828:	0800b88d 	.word	0x0800b88d
 800882c:	0800b8bb 	.word	0x0800b8bb

08008830 <quorem>:
 8008830:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008834:	6903      	ldr	r3, [r0, #16]
 8008836:	690c      	ldr	r4, [r1, #16]
 8008838:	4607      	mov	r7, r0
 800883a:	42a3      	cmp	r3, r4
 800883c:	db7e      	blt.n	800893c <quorem+0x10c>
 800883e:	3c01      	subs	r4, #1
 8008840:	00a3      	lsls	r3, r4, #2
 8008842:	f100 0514 	add.w	r5, r0, #20
 8008846:	f101 0814 	add.w	r8, r1, #20
 800884a:	9300      	str	r3, [sp, #0]
 800884c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008850:	9301      	str	r3, [sp, #4]
 8008852:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008856:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800885a:	3301      	adds	r3, #1
 800885c:	429a      	cmp	r2, r3
 800885e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008862:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008866:	d32e      	bcc.n	80088c6 <quorem+0x96>
 8008868:	f04f 0a00 	mov.w	sl, #0
 800886c:	46c4      	mov	ip, r8
 800886e:	46ae      	mov	lr, r5
 8008870:	46d3      	mov	fp, sl
 8008872:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008876:	b298      	uxth	r0, r3
 8008878:	fb06 a000 	mla	r0, r6, r0, sl
 800887c:	0c1b      	lsrs	r3, r3, #16
 800887e:	0c02      	lsrs	r2, r0, #16
 8008880:	fb06 2303 	mla	r3, r6, r3, r2
 8008884:	f8de 2000 	ldr.w	r2, [lr]
 8008888:	b280      	uxth	r0, r0
 800888a:	b292      	uxth	r2, r2
 800888c:	1a12      	subs	r2, r2, r0
 800888e:	445a      	add	r2, fp
 8008890:	f8de 0000 	ldr.w	r0, [lr]
 8008894:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008898:	b29b      	uxth	r3, r3
 800889a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800889e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80088a2:	b292      	uxth	r2, r2
 80088a4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80088a8:	45e1      	cmp	r9, ip
 80088aa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80088ae:	f84e 2b04 	str.w	r2, [lr], #4
 80088b2:	d2de      	bcs.n	8008872 <quorem+0x42>
 80088b4:	9b00      	ldr	r3, [sp, #0]
 80088b6:	58eb      	ldr	r3, [r5, r3]
 80088b8:	b92b      	cbnz	r3, 80088c6 <quorem+0x96>
 80088ba:	9b01      	ldr	r3, [sp, #4]
 80088bc:	3b04      	subs	r3, #4
 80088be:	429d      	cmp	r5, r3
 80088c0:	461a      	mov	r2, r3
 80088c2:	d32f      	bcc.n	8008924 <quorem+0xf4>
 80088c4:	613c      	str	r4, [r7, #16]
 80088c6:	4638      	mov	r0, r7
 80088c8:	f001 f97e 	bl	8009bc8 <__mcmp>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	db25      	blt.n	800891c <quorem+0xec>
 80088d0:	4629      	mov	r1, r5
 80088d2:	2000      	movs	r0, #0
 80088d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80088d8:	f8d1 c000 	ldr.w	ip, [r1]
 80088dc:	fa1f fe82 	uxth.w	lr, r2
 80088e0:	fa1f f38c 	uxth.w	r3, ip
 80088e4:	eba3 030e 	sub.w	r3, r3, lr
 80088e8:	4403      	add	r3, r0
 80088ea:	0c12      	lsrs	r2, r2, #16
 80088ec:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80088f0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088fa:	45c1      	cmp	r9, r8
 80088fc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008900:	f841 3b04 	str.w	r3, [r1], #4
 8008904:	d2e6      	bcs.n	80088d4 <quorem+0xa4>
 8008906:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800890a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800890e:	b922      	cbnz	r2, 800891a <quorem+0xea>
 8008910:	3b04      	subs	r3, #4
 8008912:	429d      	cmp	r5, r3
 8008914:	461a      	mov	r2, r3
 8008916:	d30b      	bcc.n	8008930 <quorem+0x100>
 8008918:	613c      	str	r4, [r7, #16]
 800891a:	3601      	adds	r6, #1
 800891c:	4630      	mov	r0, r6
 800891e:	b003      	add	sp, #12
 8008920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008924:	6812      	ldr	r2, [r2, #0]
 8008926:	3b04      	subs	r3, #4
 8008928:	2a00      	cmp	r2, #0
 800892a:	d1cb      	bne.n	80088c4 <quorem+0x94>
 800892c:	3c01      	subs	r4, #1
 800892e:	e7c6      	b.n	80088be <quorem+0x8e>
 8008930:	6812      	ldr	r2, [r2, #0]
 8008932:	3b04      	subs	r3, #4
 8008934:	2a00      	cmp	r2, #0
 8008936:	d1ef      	bne.n	8008918 <quorem+0xe8>
 8008938:	3c01      	subs	r4, #1
 800893a:	e7ea      	b.n	8008912 <quorem+0xe2>
 800893c:	2000      	movs	r0, #0
 800893e:	e7ee      	b.n	800891e <quorem+0xee>

08008940 <_dtoa_r>:
 8008940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008944:	4614      	mov	r4, r2
 8008946:	461d      	mov	r5, r3
 8008948:	69c7      	ldr	r7, [r0, #28]
 800894a:	b097      	sub	sp, #92	@ 0x5c
 800894c:	4681      	mov	r9, r0
 800894e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008952:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8008954:	b97f      	cbnz	r7, 8008976 <_dtoa_r+0x36>
 8008956:	2010      	movs	r0, #16
 8008958:	f000 fe0e 	bl	8009578 <malloc>
 800895c:	4602      	mov	r2, r0
 800895e:	f8c9 001c 	str.w	r0, [r9, #28]
 8008962:	b920      	cbnz	r0, 800896e <_dtoa_r+0x2e>
 8008964:	21ef      	movs	r1, #239	@ 0xef
 8008966:	4bac      	ldr	r3, [pc, #688]	@ (8008c18 <_dtoa_r+0x2d8>)
 8008968:	48ac      	ldr	r0, [pc, #688]	@ (8008c1c <_dtoa_r+0x2dc>)
 800896a:	f7ff ff43 	bl	80087f4 <__assert_func>
 800896e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008972:	6007      	str	r7, [r0, #0]
 8008974:	60c7      	str	r7, [r0, #12]
 8008976:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800897a:	6819      	ldr	r1, [r3, #0]
 800897c:	b159      	cbz	r1, 8008996 <_dtoa_r+0x56>
 800897e:	685a      	ldr	r2, [r3, #4]
 8008980:	2301      	movs	r3, #1
 8008982:	4093      	lsls	r3, r2
 8008984:	604a      	str	r2, [r1, #4]
 8008986:	608b      	str	r3, [r1, #8]
 8008988:	4648      	mov	r0, r9
 800898a:	f000 feeb 	bl	8009764 <_Bfree>
 800898e:	2200      	movs	r2, #0
 8008990:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008994:	601a      	str	r2, [r3, #0]
 8008996:	1e2b      	subs	r3, r5, #0
 8008998:	bfaf      	iteee	ge
 800899a:	2300      	movge	r3, #0
 800899c:	2201      	movlt	r2, #1
 800899e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80089a2:	9307      	strlt	r3, [sp, #28]
 80089a4:	bfa8      	it	ge
 80089a6:	6033      	strge	r3, [r6, #0]
 80089a8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80089ac:	4b9c      	ldr	r3, [pc, #624]	@ (8008c20 <_dtoa_r+0x2e0>)
 80089ae:	bfb8      	it	lt
 80089b0:	6032      	strlt	r2, [r6, #0]
 80089b2:	ea33 0308 	bics.w	r3, r3, r8
 80089b6:	d112      	bne.n	80089de <_dtoa_r+0x9e>
 80089b8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80089bc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80089be:	6013      	str	r3, [r2, #0]
 80089c0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80089c4:	4323      	orrs	r3, r4
 80089c6:	f000 855e 	beq.w	8009486 <_dtoa_r+0xb46>
 80089ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80089cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008c24 <_dtoa_r+0x2e4>
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	f000 8560 	beq.w	8009496 <_dtoa_r+0xb56>
 80089d6:	f10a 0303 	add.w	r3, sl, #3
 80089da:	f000 bd5a 	b.w	8009492 <_dtoa_r+0xb52>
 80089de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80089e2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80089e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089ea:	2200      	movs	r2, #0
 80089ec:	2300      	movs	r3, #0
 80089ee:	f7f7 ffdb 	bl	80009a8 <__aeabi_dcmpeq>
 80089f2:	4607      	mov	r7, r0
 80089f4:	b158      	cbz	r0, 8008a0e <_dtoa_r+0xce>
 80089f6:	2301      	movs	r3, #1
 80089f8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80089fa:	6013      	str	r3, [r2, #0]
 80089fc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80089fe:	b113      	cbz	r3, 8008a06 <_dtoa_r+0xc6>
 8008a00:	4b89      	ldr	r3, [pc, #548]	@ (8008c28 <_dtoa_r+0x2e8>)
 8008a02:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008a04:	6013      	str	r3, [r2, #0]
 8008a06:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8008c2c <_dtoa_r+0x2ec>
 8008a0a:	f000 bd44 	b.w	8009496 <_dtoa_r+0xb56>
 8008a0e:	ab14      	add	r3, sp, #80	@ 0x50
 8008a10:	9301      	str	r3, [sp, #4]
 8008a12:	ab15      	add	r3, sp, #84	@ 0x54
 8008a14:	9300      	str	r3, [sp, #0]
 8008a16:	4648      	mov	r0, r9
 8008a18:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008a1c:	f001 f984 	bl	8009d28 <__d2b>
 8008a20:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8008a24:	9003      	str	r0, [sp, #12]
 8008a26:	2e00      	cmp	r6, #0
 8008a28:	d078      	beq.n	8008b1c <_dtoa_r+0x1dc>
 8008a2a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a30:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008a34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a38:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008a3c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008a40:	9712      	str	r7, [sp, #72]	@ 0x48
 8008a42:	4619      	mov	r1, r3
 8008a44:	2200      	movs	r2, #0
 8008a46:	4b7a      	ldr	r3, [pc, #488]	@ (8008c30 <_dtoa_r+0x2f0>)
 8008a48:	f7f7 fb8e 	bl	8000168 <__aeabi_dsub>
 8008a4c:	a36c      	add	r3, pc, #432	@ (adr r3, 8008c00 <_dtoa_r+0x2c0>)
 8008a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a52:	f7f7 fd41 	bl	80004d8 <__aeabi_dmul>
 8008a56:	a36c      	add	r3, pc, #432	@ (adr r3, 8008c08 <_dtoa_r+0x2c8>)
 8008a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5c:	f7f7 fb86 	bl	800016c <__adddf3>
 8008a60:	4604      	mov	r4, r0
 8008a62:	4630      	mov	r0, r6
 8008a64:	460d      	mov	r5, r1
 8008a66:	f7f7 fccd 	bl	8000404 <__aeabi_i2d>
 8008a6a:	a369      	add	r3, pc, #420	@ (adr r3, 8008c10 <_dtoa_r+0x2d0>)
 8008a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a70:	f7f7 fd32 	bl	80004d8 <__aeabi_dmul>
 8008a74:	4602      	mov	r2, r0
 8008a76:	460b      	mov	r3, r1
 8008a78:	4620      	mov	r0, r4
 8008a7a:	4629      	mov	r1, r5
 8008a7c:	f7f7 fb76 	bl	800016c <__adddf3>
 8008a80:	4604      	mov	r4, r0
 8008a82:	460d      	mov	r5, r1
 8008a84:	f7f7 ffd8 	bl	8000a38 <__aeabi_d2iz>
 8008a88:	2200      	movs	r2, #0
 8008a8a:	4607      	mov	r7, r0
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	4620      	mov	r0, r4
 8008a90:	4629      	mov	r1, r5
 8008a92:	f7f7 ff93 	bl	80009bc <__aeabi_dcmplt>
 8008a96:	b140      	cbz	r0, 8008aaa <_dtoa_r+0x16a>
 8008a98:	4638      	mov	r0, r7
 8008a9a:	f7f7 fcb3 	bl	8000404 <__aeabi_i2d>
 8008a9e:	4622      	mov	r2, r4
 8008aa0:	462b      	mov	r3, r5
 8008aa2:	f7f7 ff81 	bl	80009a8 <__aeabi_dcmpeq>
 8008aa6:	b900      	cbnz	r0, 8008aaa <_dtoa_r+0x16a>
 8008aa8:	3f01      	subs	r7, #1
 8008aaa:	2f16      	cmp	r7, #22
 8008aac:	d854      	bhi.n	8008b58 <_dtoa_r+0x218>
 8008aae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ab2:	4b60      	ldr	r3, [pc, #384]	@ (8008c34 <_dtoa_r+0x2f4>)
 8008ab4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abc:	f7f7 ff7e 	bl	80009bc <__aeabi_dcmplt>
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	d04b      	beq.n	8008b5c <_dtoa_r+0x21c>
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	3f01      	subs	r7, #1
 8008ac8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008aca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008acc:	1b9b      	subs	r3, r3, r6
 8008ace:	1e5a      	subs	r2, r3, #1
 8008ad0:	bf49      	itett	mi
 8008ad2:	f1c3 0301 	rsbmi	r3, r3, #1
 8008ad6:	2300      	movpl	r3, #0
 8008ad8:	9304      	strmi	r3, [sp, #16]
 8008ada:	2300      	movmi	r3, #0
 8008adc:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ade:	bf54      	ite	pl
 8008ae0:	9304      	strpl	r3, [sp, #16]
 8008ae2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8008ae4:	2f00      	cmp	r7, #0
 8008ae6:	db3b      	blt.n	8008b60 <_dtoa_r+0x220>
 8008ae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008aea:	970e      	str	r7, [sp, #56]	@ 0x38
 8008aec:	443b      	add	r3, r7
 8008aee:	9309      	str	r3, [sp, #36]	@ 0x24
 8008af0:	2300      	movs	r3, #0
 8008af2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008af4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008af6:	2b09      	cmp	r3, #9
 8008af8:	d865      	bhi.n	8008bc6 <_dtoa_r+0x286>
 8008afa:	2b05      	cmp	r3, #5
 8008afc:	bfc4      	itt	gt
 8008afe:	3b04      	subgt	r3, #4
 8008b00:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008b02:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008b04:	bfc8      	it	gt
 8008b06:	2400      	movgt	r4, #0
 8008b08:	f1a3 0302 	sub.w	r3, r3, #2
 8008b0c:	bfd8      	it	le
 8008b0e:	2401      	movle	r4, #1
 8008b10:	2b03      	cmp	r3, #3
 8008b12:	d864      	bhi.n	8008bde <_dtoa_r+0x29e>
 8008b14:	e8df f003 	tbb	[pc, r3]
 8008b18:	2c385553 	.word	0x2c385553
 8008b1c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008b20:	441e      	add	r6, r3
 8008b22:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008b26:	2b20      	cmp	r3, #32
 8008b28:	bfc1      	itttt	gt
 8008b2a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008b2e:	fa08 f803 	lslgt.w	r8, r8, r3
 8008b32:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008b36:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008b3a:	bfd6      	itet	le
 8008b3c:	f1c3 0320 	rsble	r3, r3, #32
 8008b40:	ea48 0003 	orrgt.w	r0, r8, r3
 8008b44:	fa04 f003 	lslle.w	r0, r4, r3
 8008b48:	f7f7 fc4c 	bl	80003e4 <__aeabi_ui2d>
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008b52:	3e01      	subs	r6, #1
 8008b54:	9212      	str	r2, [sp, #72]	@ 0x48
 8008b56:	e774      	b.n	8008a42 <_dtoa_r+0x102>
 8008b58:	2301      	movs	r3, #1
 8008b5a:	e7b5      	b.n	8008ac8 <_dtoa_r+0x188>
 8008b5c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008b5e:	e7b4      	b.n	8008aca <_dtoa_r+0x18a>
 8008b60:	9b04      	ldr	r3, [sp, #16]
 8008b62:	1bdb      	subs	r3, r3, r7
 8008b64:	9304      	str	r3, [sp, #16]
 8008b66:	427b      	negs	r3, r7
 8008b68:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	930e      	str	r3, [sp, #56]	@ 0x38
 8008b6e:	e7c1      	b.n	8008af4 <_dtoa_r+0x1b4>
 8008b70:	2301      	movs	r3, #1
 8008b72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b74:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008b76:	eb07 0b03 	add.w	fp, r7, r3
 8008b7a:	f10b 0301 	add.w	r3, fp, #1
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	9308      	str	r3, [sp, #32]
 8008b82:	bfb8      	it	lt
 8008b84:	2301      	movlt	r3, #1
 8008b86:	e006      	b.n	8008b96 <_dtoa_r+0x256>
 8008b88:	2301      	movs	r3, #1
 8008b8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b8c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	dd28      	ble.n	8008be4 <_dtoa_r+0x2a4>
 8008b92:	469b      	mov	fp, r3
 8008b94:	9308      	str	r3, [sp, #32]
 8008b96:	2100      	movs	r1, #0
 8008b98:	2204      	movs	r2, #4
 8008b9a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008b9e:	f102 0514 	add.w	r5, r2, #20
 8008ba2:	429d      	cmp	r5, r3
 8008ba4:	d926      	bls.n	8008bf4 <_dtoa_r+0x2b4>
 8008ba6:	6041      	str	r1, [r0, #4]
 8008ba8:	4648      	mov	r0, r9
 8008baa:	f000 fd9b 	bl	80096e4 <_Balloc>
 8008bae:	4682      	mov	sl, r0
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	d143      	bne.n	8008c3c <_dtoa_r+0x2fc>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	f240 11af 	movw	r1, #431	@ 0x1af
 8008bba:	4b1f      	ldr	r3, [pc, #124]	@ (8008c38 <_dtoa_r+0x2f8>)
 8008bbc:	e6d4      	b.n	8008968 <_dtoa_r+0x28>
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	e7e3      	b.n	8008b8a <_dtoa_r+0x24a>
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e7d5      	b.n	8008b72 <_dtoa_r+0x232>
 8008bc6:	2401      	movs	r4, #1
 8008bc8:	2300      	movs	r3, #0
 8008bca:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008bcc:	9320      	str	r3, [sp, #128]	@ 0x80
 8008bce:	f04f 3bff 	mov.w	fp, #4294967295
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	2312      	movs	r3, #18
 8008bd6:	f8cd b020 	str.w	fp, [sp, #32]
 8008bda:	9221      	str	r2, [sp, #132]	@ 0x84
 8008bdc:	e7db      	b.n	8008b96 <_dtoa_r+0x256>
 8008bde:	2301      	movs	r3, #1
 8008be0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008be2:	e7f4      	b.n	8008bce <_dtoa_r+0x28e>
 8008be4:	f04f 0b01 	mov.w	fp, #1
 8008be8:	465b      	mov	r3, fp
 8008bea:	f8cd b020 	str.w	fp, [sp, #32]
 8008bee:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8008bf2:	e7d0      	b.n	8008b96 <_dtoa_r+0x256>
 8008bf4:	3101      	adds	r1, #1
 8008bf6:	0052      	lsls	r2, r2, #1
 8008bf8:	e7d1      	b.n	8008b9e <_dtoa_r+0x25e>
 8008bfa:	bf00      	nop
 8008bfc:	f3af 8000 	nop.w
 8008c00:	636f4361 	.word	0x636f4361
 8008c04:	3fd287a7 	.word	0x3fd287a7
 8008c08:	8b60c8b3 	.word	0x8b60c8b3
 8008c0c:	3fc68a28 	.word	0x3fc68a28
 8008c10:	509f79fb 	.word	0x509f79fb
 8008c14:	3fd34413 	.word	0x3fd34413
 8008c18:	0800b80f 	.word	0x0800b80f
 8008c1c:	0800b8c9 	.word	0x0800b8c9
 8008c20:	7ff00000 	.word	0x7ff00000
 8008c24:	0800b8c5 	.word	0x0800b8c5
 8008c28:	0800b7ec 	.word	0x0800b7ec
 8008c2c:	0800b7eb 	.word	0x0800b7eb
 8008c30:	3ff80000 	.word	0x3ff80000
 8008c34:	0800b9e0 	.word	0x0800b9e0
 8008c38:	0800b921 	.word	0x0800b921
 8008c3c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008c40:	6018      	str	r0, [r3, #0]
 8008c42:	9b08      	ldr	r3, [sp, #32]
 8008c44:	2b0e      	cmp	r3, #14
 8008c46:	f200 80a1 	bhi.w	8008d8c <_dtoa_r+0x44c>
 8008c4a:	2c00      	cmp	r4, #0
 8008c4c:	f000 809e 	beq.w	8008d8c <_dtoa_r+0x44c>
 8008c50:	2f00      	cmp	r7, #0
 8008c52:	dd33      	ble.n	8008cbc <_dtoa_r+0x37c>
 8008c54:	4b9c      	ldr	r3, [pc, #624]	@ (8008ec8 <_dtoa_r+0x588>)
 8008c56:	f007 020f 	and.w	r2, r7, #15
 8008c5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c5e:	05f8      	lsls	r0, r7, #23
 8008c60:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008c64:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8008c68:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008c6c:	d516      	bpl.n	8008c9c <_dtoa_r+0x35c>
 8008c6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c72:	4b96      	ldr	r3, [pc, #600]	@ (8008ecc <_dtoa_r+0x58c>)
 8008c74:	2603      	movs	r6, #3
 8008c76:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c7a:	f7f7 fd57 	bl	800072c <__aeabi_ddiv>
 8008c7e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008c82:	f004 040f 	and.w	r4, r4, #15
 8008c86:	4d91      	ldr	r5, [pc, #580]	@ (8008ecc <_dtoa_r+0x58c>)
 8008c88:	b954      	cbnz	r4, 8008ca0 <_dtoa_r+0x360>
 8008c8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008c8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c92:	f7f7 fd4b 	bl	800072c <__aeabi_ddiv>
 8008c96:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008c9a:	e028      	b.n	8008cee <_dtoa_r+0x3ae>
 8008c9c:	2602      	movs	r6, #2
 8008c9e:	e7f2      	b.n	8008c86 <_dtoa_r+0x346>
 8008ca0:	07e1      	lsls	r1, r4, #31
 8008ca2:	d508      	bpl.n	8008cb6 <_dtoa_r+0x376>
 8008ca4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008ca8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008cac:	f7f7 fc14 	bl	80004d8 <__aeabi_dmul>
 8008cb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008cb4:	3601      	adds	r6, #1
 8008cb6:	1064      	asrs	r4, r4, #1
 8008cb8:	3508      	adds	r5, #8
 8008cba:	e7e5      	b.n	8008c88 <_dtoa_r+0x348>
 8008cbc:	f000 80af 	beq.w	8008e1e <_dtoa_r+0x4de>
 8008cc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008cc4:	427c      	negs	r4, r7
 8008cc6:	4b80      	ldr	r3, [pc, #512]	@ (8008ec8 <_dtoa_r+0x588>)
 8008cc8:	f004 020f 	and.w	r2, r4, #15
 8008ccc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd4:	f7f7 fc00 	bl	80004d8 <__aeabi_dmul>
 8008cd8:	2602      	movs	r6, #2
 8008cda:	2300      	movs	r3, #0
 8008cdc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008ce0:	4d7a      	ldr	r5, [pc, #488]	@ (8008ecc <_dtoa_r+0x58c>)
 8008ce2:	1124      	asrs	r4, r4, #4
 8008ce4:	2c00      	cmp	r4, #0
 8008ce6:	f040 808f 	bne.w	8008e08 <_dtoa_r+0x4c8>
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d1d3      	bne.n	8008c96 <_dtoa_r+0x356>
 8008cee:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8008cf2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f000 8094 	beq.w	8008e22 <_dtoa_r+0x4e2>
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	4629      	mov	r1, r5
 8008d00:	4b73      	ldr	r3, [pc, #460]	@ (8008ed0 <_dtoa_r+0x590>)
 8008d02:	f7f7 fe5b 	bl	80009bc <__aeabi_dcmplt>
 8008d06:	2800      	cmp	r0, #0
 8008d08:	f000 808b 	beq.w	8008e22 <_dtoa_r+0x4e2>
 8008d0c:	9b08      	ldr	r3, [sp, #32]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f000 8087 	beq.w	8008e22 <_dtoa_r+0x4e2>
 8008d14:	f1bb 0f00 	cmp.w	fp, #0
 8008d18:	dd34      	ble.n	8008d84 <_dtoa_r+0x444>
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	4629      	mov	r1, r5
 8008d20:	4b6c      	ldr	r3, [pc, #432]	@ (8008ed4 <_dtoa_r+0x594>)
 8008d22:	f7f7 fbd9 	bl	80004d8 <__aeabi_dmul>
 8008d26:	465c      	mov	r4, fp
 8008d28:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008d2c:	f107 38ff 	add.w	r8, r7, #4294967295
 8008d30:	3601      	adds	r6, #1
 8008d32:	4630      	mov	r0, r6
 8008d34:	f7f7 fb66 	bl	8000404 <__aeabi_i2d>
 8008d38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d3c:	f7f7 fbcc 	bl	80004d8 <__aeabi_dmul>
 8008d40:	2200      	movs	r2, #0
 8008d42:	4b65      	ldr	r3, [pc, #404]	@ (8008ed8 <_dtoa_r+0x598>)
 8008d44:	f7f7 fa12 	bl	800016c <__adddf3>
 8008d48:	4605      	mov	r5, r0
 8008d4a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008d4e:	2c00      	cmp	r4, #0
 8008d50:	d16a      	bne.n	8008e28 <_dtoa_r+0x4e8>
 8008d52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d56:	2200      	movs	r2, #0
 8008d58:	4b60      	ldr	r3, [pc, #384]	@ (8008edc <_dtoa_r+0x59c>)
 8008d5a:	f7f7 fa05 	bl	8000168 <__aeabi_dsub>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	460b      	mov	r3, r1
 8008d62:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008d66:	462a      	mov	r2, r5
 8008d68:	4633      	mov	r3, r6
 8008d6a:	f7f7 fe45 	bl	80009f8 <__aeabi_dcmpgt>
 8008d6e:	2800      	cmp	r0, #0
 8008d70:	f040 8298 	bne.w	80092a4 <_dtoa_r+0x964>
 8008d74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d78:	462a      	mov	r2, r5
 8008d7a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008d7e:	f7f7 fe1d 	bl	80009bc <__aeabi_dcmplt>
 8008d82:	bb38      	cbnz	r0, 8008dd4 <_dtoa_r+0x494>
 8008d84:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008d88:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008d8c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f2c0 8157 	blt.w	8009042 <_dtoa_r+0x702>
 8008d94:	2f0e      	cmp	r7, #14
 8008d96:	f300 8154 	bgt.w	8009042 <_dtoa_r+0x702>
 8008d9a:	4b4b      	ldr	r3, [pc, #300]	@ (8008ec8 <_dtoa_r+0x588>)
 8008d9c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008da0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008da4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008da8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	f280 80e5 	bge.w	8008f7a <_dtoa_r+0x63a>
 8008db0:	9b08      	ldr	r3, [sp, #32]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	f300 80e1 	bgt.w	8008f7a <_dtoa_r+0x63a>
 8008db8:	d10c      	bne.n	8008dd4 <_dtoa_r+0x494>
 8008dba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	4b46      	ldr	r3, [pc, #280]	@ (8008edc <_dtoa_r+0x59c>)
 8008dc2:	f7f7 fb89 	bl	80004d8 <__aeabi_dmul>
 8008dc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008dca:	f7f7 fe0b 	bl	80009e4 <__aeabi_dcmpge>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	f000 8266 	beq.w	80092a0 <_dtoa_r+0x960>
 8008dd4:	2400      	movs	r4, #0
 8008dd6:	4625      	mov	r5, r4
 8008dd8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008dda:	4656      	mov	r6, sl
 8008ddc:	ea6f 0803 	mvn.w	r8, r3
 8008de0:	2700      	movs	r7, #0
 8008de2:	4621      	mov	r1, r4
 8008de4:	4648      	mov	r0, r9
 8008de6:	f000 fcbd 	bl	8009764 <_Bfree>
 8008dea:	2d00      	cmp	r5, #0
 8008dec:	f000 80bd 	beq.w	8008f6a <_dtoa_r+0x62a>
 8008df0:	b12f      	cbz	r7, 8008dfe <_dtoa_r+0x4be>
 8008df2:	42af      	cmp	r7, r5
 8008df4:	d003      	beq.n	8008dfe <_dtoa_r+0x4be>
 8008df6:	4639      	mov	r1, r7
 8008df8:	4648      	mov	r0, r9
 8008dfa:	f000 fcb3 	bl	8009764 <_Bfree>
 8008dfe:	4629      	mov	r1, r5
 8008e00:	4648      	mov	r0, r9
 8008e02:	f000 fcaf 	bl	8009764 <_Bfree>
 8008e06:	e0b0      	b.n	8008f6a <_dtoa_r+0x62a>
 8008e08:	07e2      	lsls	r2, r4, #31
 8008e0a:	d505      	bpl.n	8008e18 <_dtoa_r+0x4d8>
 8008e0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e10:	f7f7 fb62 	bl	80004d8 <__aeabi_dmul>
 8008e14:	2301      	movs	r3, #1
 8008e16:	3601      	adds	r6, #1
 8008e18:	1064      	asrs	r4, r4, #1
 8008e1a:	3508      	adds	r5, #8
 8008e1c:	e762      	b.n	8008ce4 <_dtoa_r+0x3a4>
 8008e1e:	2602      	movs	r6, #2
 8008e20:	e765      	b.n	8008cee <_dtoa_r+0x3ae>
 8008e22:	46b8      	mov	r8, r7
 8008e24:	9c08      	ldr	r4, [sp, #32]
 8008e26:	e784      	b.n	8008d32 <_dtoa_r+0x3f2>
 8008e28:	4b27      	ldr	r3, [pc, #156]	@ (8008ec8 <_dtoa_r+0x588>)
 8008e2a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008e2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e34:	4454      	add	r4, sl
 8008e36:	2900      	cmp	r1, #0
 8008e38:	d054      	beq.n	8008ee4 <_dtoa_r+0x5a4>
 8008e3a:	2000      	movs	r0, #0
 8008e3c:	4928      	ldr	r1, [pc, #160]	@ (8008ee0 <_dtoa_r+0x5a0>)
 8008e3e:	f7f7 fc75 	bl	800072c <__aeabi_ddiv>
 8008e42:	4633      	mov	r3, r6
 8008e44:	462a      	mov	r2, r5
 8008e46:	f7f7 f98f 	bl	8000168 <__aeabi_dsub>
 8008e4a:	4656      	mov	r6, sl
 8008e4c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008e50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e54:	f7f7 fdf0 	bl	8000a38 <__aeabi_d2iz>
 8008e58:	4605      	mov	r5, r0
 8008e5a:	f7f7 fad3 	bl	8000404 <__aeabi_i2d>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	460b      	mov	r3, r1
 8008e62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e66:	f7f7 f97f 	bl	8000168 <__aeabi_dsub>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	3530      	adds	r5, #48	@ 0x30
 8008e70:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008e74:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008e78:	f806 5b01 	strb.w	r5, [r6], #1
 8008e7c:	f7f7 fd9e 	bl	80009bc <__aeabi_dcmplt>
 8008e80:	2800      	cmp	r0, #0
 8008e82:	d172      	bne.n	8008f6a <_dtoa_r+0x62a>
 8008e84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e88:	2000      	movs	r0, #0
 8008e8a:	4911      	ldr	r1, [pc, #68]	@ (8008ed0 <_dtoa_r+0x590>)
 8008e8c:	f7f7 f96c 	bl	8000168 <__aeabi_dsub>
 8008e90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008e94:	f7f7 fd92 	bl	80009bc <__aeabi_dcmplt>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	f040 80b4 	bne.w	8009006 <_dtoa_r+0x6c6>
 8008e9e:	42a6      	cmp	r6, r4
 8008ea0:	f43f af70 	beq.w	8008d84 <_dtoa_r+0x444>
 8008ea4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8008ed4 <_dtoa_r+0x594>)
 8008eac:	f7f7 fb14 	bl	80004d8 <__aeabi_dmul>
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008eb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008eba:	4b06      	ldr	r3, [pc, #24]	@ (8008ed4 <_dtoa_r+0x594>)
 8008ebc:	f7f7 fb0c 	bl	80004d8 <__aeabi_dmul>
 8008ec0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008ec4:	e7c4      	b.n	8008e50 <_dtoa_r+0x510>
 8008ec6:	bf00      	nop
 8008ec8:	0800b9e0 	.word	0x0800b9e0
 8008ecc:	0800b9b8 	.word	0x0800b9b8
 8008ed0:	3ff00000 	.word	0x3ff00000
 8008ed4:	40240000 	.word	0x40240000
 8008ed8:	401c0000 	.word	0x401c0000
 8008edc:	40140000 	.word	0x40140000
 8008ee0:	3fe00000 	.word	0x3fe00000
 8008ee4:	4631      	mov	r1, r6
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	f7f7 faf6 	bl	80004d8 <__aeabi_dmul>
 8008eec:	4656      	mov	r6, sl
 8008eee:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008ef2:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008ef4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ef8:	f7f7 fd9e 	bl	8000a38 <__aeabi_d2iz>
 8008efc:	4605      	mov	r5, r0
 8008efe:	f7f7 fa81 	bl	8000404 <__aeabi_i2d>
 8008f02:	4602      	mov	r2, r0
 8008f04:	460b      	mov	r3, r1
 8008f06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f0a:	f7f7 f92d 	bl	8000168 <__aeabi_dsub>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	460b      	mov	r3, r1
 8008f12:	3530      	adds	r5, #48	@ 0x30
 8008f14:	f806 5b01 	strb.w	r5, [r6], #1
 8008f18:	42a6      	cmp	r6, r4
 8008f1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008f1e:	f04f 0200 	mov.w	r2, #0
 8008f22:	d124      	bne.n	8008f6e <_dtoa_r+0x62e>
 8008f24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008f28:	4bae      	ldr	r3, [pc, #696]	@ (80091e4 <_dtoa_r+0x8a4>)
 8008f2a:	f7f7 f91f 	bl	800016c <__adddf3>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	460b      	mov	r3, r1
 8008f32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f36:	f7f7 fd5f 	bl	80009f8 <__aeabi_dcmpgt>
 8008f3a:	2800      	cmp	r0, #0
 8008f3c:	d163      	bne.n	8009006 <_dtoa_r+0x6c6>
 8008f3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008f42:	2000      	movs	r0, #0
 8008f44:	49a7      	ldr	r1, [pc, #668]	@ (80091e4 <_dtoa_r+0x8a4>)
 8008f46:	f7f7 f90f 	bl	8000168 <__aeabi_dsub>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f52:	f7f7 fd33 	bl	80009bc <__aeabi_dcmplt>
 8008f56:	2800      	cmp	r0, #0
 8008f58:	f43f af14 	beq.w	8008d84 <_dtoa_r+0x444>
 8008f5c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008f5e:	1e73      	subs	r3, r6, #1
 8008f60:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008f62:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008f66:	2b30      	cmp	r3, #48	@ 0x30
 8008f68:	d0f8      	beq.n	8008f5c <_dtoa_r+0x61c>
 8008f6a:	4647      	mov	r7, r8
 8008f6c:	e03b      	b.n	8008fe6 <_dtoa_r+0x6a6>
 8008f6e:	4b9e      	ldr	r3, [pc, #632]	@ (80091e8 <_dtoa_r+0x8a8>)
 8008f70:	f7f7 fab2 	bl	80004d8 <__aeabi_dmul>
 8008f74:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008f78:	e7bc      	b.n	8008ef4 <_dtoa_r+0x5b4>
 8008f7a:	4656      	mov	r6, sl
 8008f7c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8008f80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f84:	4620      	mov	r0, r4
 8008f86:	4629      	mov	r1, r5
 8008f88:	f7f7 fbd0 	bl	800072c <__aeabi_ddiv>
 8008f8c:	f7f7 fd54 	bl	8000a38 <__aeabi_d2iz>
 8008f90:	4680      	mov	r8, r0
 8008f92:	f7f7 fa37 	bl	8000404 <__aeabi_i2d>
 8008f96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f9a:	f7f7 fa9d 	bl	80004d8 <__aeabi_dmul>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	4629      	mov	r1, r5
 8008fa6:	f7f7 f8df 	bl	8000168 <__aeabi_dsub>
 8008faa:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008fae:	9d08      	ldr	r5, [sp, #32]
 8008fb0:	f806 4b01 	strb.w	r4, [r6], #1
 8008fb4:	eba6 040a 	sub.w	r4, r6, sl
 8008fb8:	42a5      	cmp	r5, r4
 8008fba:	4602      	mov	r2, r0
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	d133      	bne.n	8009028 <_dtoa_r+0x6e8>
 8008fc0:	f7f7 f8d4 	bl	800016c <__adddf3>
 8008fc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fc8:	4604      	mov	r4, r0
 8008fca:	460d      	mov	r5, r1
 8008fcc:	f7f7 fd14 	bl	80009f8 <__aeabi_dcmpgt>
 8008fd0:	b9c0      	cbnz	r0, 8009004 <_dtoa_r+0x6c4>
 8008fd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	4629      	mov	r1, r5
 8008fda:	f7f7 fce5 	bl	80009a8 <__aeabi_dcmpeq>
 8008fde:	b110      	cbz	r0, 8008fe6 <_dtoa_r+0x6a6>
 8008fe0:	f018 0f01 	tst.w	r8, #1
 8008fe4:	d10e      	bne.n	8009004 <_dtoa_r+0x6c4>
 8008fe6:	4648      	mov	r0, r9
 8008fe8:	9903      	ldr	r1, [sp, #12]
 8008fea:	f000 fbbb 	bl	8009764 <_Bfree>
 8008fee:	2300      	movs	r3, #0
 8008ff0:	7033      	strb	r3, [r6, #0]
 8008ff2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008ff4:	3701      	adds	r7, #1
 8008ff6:	601f      	str	r7, [r3, #0]
 8008ff8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	f000 824b 	beq.w	8009496 <_dtoa_r+0xb56>
 8009000:	601e      	str	r6, [r3, #0]
 8009002:	e248      	b.n	8009496 <_dtoa_r+0xb56>
 8009004:	46b8      	mov	r8, r7
 8009006:	4633      	mov	r3, r6
 8009008:	461e      	mov	r6, r3
 800900a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800900e:	2a39      	cmp	r2, #57	@ 0x39
 8009010:	d106      	bne.n	8009020 <_dtoa_r+0x6e0>
 8009012:	459a      	cmp	sl, r3
 8009014:	d1f8      	bne.n	8009008 <_dtoa_r+0x6c8>
 8009016:	2230      	movs	r2, #48	@ 0x30
 8009018:	f108 0801 	add.w	r8, r8, #1
 800901c:	f88a 2000 	strb.w	r2, [sl]
 8009020:	781a      	ldrb	r2, [r3, #0]
 8009022:	3201      	adds	r2, #1
 8009024:	701a      	strb	r2, [r3, #0]
 8009026:	e7a0      	b.n	8008f6a <_dtoa_r+0x62a>
 8009028:	2200      	movs	r2, #0
 800902a:	4b6f      	ldr	r3, [pc, #444]	@ (80091e8 <_dtoa_r+0x8a8>)
 800902c:	f7f7 fa54 	bl	80004d8 <__aeabi_dmul>
 8009030:	2200      	movs	r2, #0
 8009032:	2300      	movs	r3, #0
 8009034:	4604      	mov	r4, r0
 8009036:	460d      	mov	r5, r1
 8009038:	f7f7 fcb6 	bl	80009a8 <__aeabi_dcmpeq>
 800903c:	2800      	cmp	r0, #0
 800903e:	d09f      	beq.n	8008f80 <_dtoa_r+0x640>
 8009040:	e7d1      	b.n	8008fe6 <_dtoa_r+0x6a6>
 8009042:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009044:	2a00      	cmp	r2, #0
 8009046:	f000 80ea 	beq.w	800921e <_dtoa_r+0x8de>
 800904a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800904c:	2a01      	cmp	r2, #1
 800904e:	f300 80cd 	bgt.w	80091ec <_dtoa_r+0x8ac>
 8009052:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009054:	2a00      	cmp	r2, #0
 8009056:	f000 80c1 	beq.w	80091dc <_dtoa_r+0x89c>
 800905a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800905e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009060:	9e04      	ldr	r6, [sp, #16]
 8009062:	9a04      	ldr	r2, [sp, #16]
 8009064:	2101      	movs	r1, #1
 8009066:	441a      	add	r2, r3
 8009068:	9204      	str	r2, [sp, #16]
 800906a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800906c:	4648      	mov	r0, r9
 800906e:	441a      	add	r2, r3
 8009070:	9209      	str	r2, [sp, #36]	@ 0x24
 8009072:	f000 fc2b 	bl	80098cc <__i2b>
 8009076:	4605      	mov	r5, r0
 8009078:	b166      	cbz	r6, 8009094 <_dtoa_r+0x754>
 800907a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800907c:	2b00      	cmp	r3, #0
 800907e:	dd09      	ble.n	8009094 <_dtoa_r+0x754>
 8009080:	42b3      	cmp	r3, r6
 8009082:	bfa8      	it	ge
 8009084:	4633      	movge	r3, r6
 8009086:	9a04      	ldr	r2, [sp, #16]
 8009088:	1af6      	subs	r6, r6, r3
 800908a:	1ad2      	subs	r2, r2, r3
 800908c:	9204      	str	r2, [sp, #16]
 800908e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	9309      	str	r3, [sp, #36]	@ 0x24
 8009094:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009096:	b30b      	cbz	r3, 80090dc <_dtoa_r+0x79c>
 8009098:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800909a:	2b00      	cmp	r3, #0
 800909c:	f000 80c6 	beq.w	800922c <_dtoa_r+0x8ec>
 80090a0:	2c00      	cmp	r4, #0
 80090a2:	f000 80c0 	beq.w	8009226 <_dtoa_r+0x8e6>
 80090a6:	4629      	mov	r1, r5
 80090a8:	4622      	mov	r2, r4
 80090aa:	4648      	mov	r0, r9
 80090ac:	f000 fcc6 	bl	8009a3c <__pow5mult>
 80090b0:	9a03      	ldr	r2, [sp, #12]
 80090b2:	4601      	mov	r1, r0
 80090b4:	4605      	mov	r5, r0
 80090b6:	4648      	mov	r0, r9
 80090b8:	f000 fc1e 	bl	80098f8 <__multiply>
 80090bc:	9903      	ldr	r1, [sp, #12]
 80090be:	4680      	mov	r8, r0
 80090c0:	4648      	mov	r0, r9
 80090c2:	f000 fb4f 	bl	8009764 <_Bfree>
 80090c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090c8:	1b1b      	subs	r3, r3, r4
 80090ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80090cc:	f000 80b1 	beq.w	8009232 <_dtoa_r+0x8f2>
 80090d0:	4641      	mov	r1, r8
 80090d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80090d4:	4648      	mov	r0, r9
 80090d6:	f000 fcb1 	bl	8009a3c <__pow5mult>
 80090da:	9003      	str	r0, [sp, #12]
 80090dc:	2101      	movs	r1, #1
 80090de:	4648      	mov	r0, r9
 80090e0:	f000 fbf4 	bl	80098cc <__i2b>
 80090e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090e6:	4604      	mov	r4, r0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	f000 81d8 	beq.w	800949e <_dtoa_r+0xb5e>
 80090ee:	461a      	mov	r2, r3
 80090f0:	4601      	mov	r1, r0
 80090f2:	4648      	mov	r0, r9
 80090f4:	f000 fca2 	bl	8009a3c <__pow5mult>
 80090f8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80090fa:	4604      	mov	r4, r0
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	f300 809f 	bgt.w	8009240 <_dtoa_r+0x900>
 8009102:	9b06      	ldr	r3, [sp, #24]
 8009104:	2b00      	cmp	r3, #0
 8009106:	f040 8097 	bne.w	8009238 <_dtoa_r+0x8f8>
 800910a:	9b07      	ldr	r3, [sp, #28]
 800910c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009110:	2b00      	cmp	r3, #0
 8009112:	f040 8093 	bne.w	800923c <_dtoa_r+0x8fc>
 8009116:	9b07      	ldr	r3, [sp, #28]
 8009118:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800911c:	0d1b      	lsrs	r3, r3, #20
 800911e:	051b      	lsls	r3, r3, #20
 8009120:	b133      	cbz	r3, 8009130 <_dtoa_r+0x7f0>
 8009122:	9b04      	ldr	r3, [sp, #16]
 8009124:	3301      	adds	r3, #1
 8009126:	9304      	str	r3, [sp, #16]
 8009128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800912a:	3301      	adds	r3, #1
 800912c:	9309      	str	r3, [sp, #36]	@ 0x24
 800912e:	2301      	movs	r3, #1
 8009130:	930a      	str	r3, [sp, #40]	@ 0x28
 8009132:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009134:	2b00      	cmp	r3, #0
 8009136:	f000 81b8 	beq.w	80094aa <_dtoa_r+0xb6a>
 800913a:	6923      	ldr	r3, [r4, #16]
 800913c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009140:	6918      	ldr	r0, [r3, #16]
 8009142:	f000 fb77 	bl	8009834 <__hi0bits>
 8009146:	f1c0 0020 	rsb	r0, r0, #32
 800914a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800914c:	4418      	add	r0, r3
 800914e:	f010 001f 	ands.w	r0, r0, #31
 8009152:	f000 8082 	beq.w	800925a <_dtoa_r+0x91a>
 8009156:	f1c0 0320 	rsb	r3, r0, #32
 800915a:	2b04      	cmp	r3, #4
 800915c:	dd73      	ble.n	8009246 <_dtoa_r+0x906>
 800915e:	9b04      	ldr	r3, [sp, #16]
 8009160:	f1c0 001c 	rsb	r0, r0, #28
 8009164:	4403      	add	r3, r0
 8009166:	9304      	str	r3, [sp, #16]
 8009168:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800916a:	4406      	add	r6, r0
 800916c:	4403      	add	r3, r0
 800916e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009170:	9b04      	ldr	r3, [sp, #16]
 8009172:	2b00      	cmp	r3, #0
 8009174:	dd05      	ble.n	8009182 <_dtoa_r+0x842>
 8009176:	461a      	mov	r2, r3
 8009178:	4648      	mov	r0, r9
 800917a:	9903      	ldr	r1, [sp, #12]
 800917c:	f000 fcb8 	bl	8009af0 <__lshift>
 8009180:	9003      	str	r0, [sp, #12]
 8009182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009184:	2b00      	cmp	r3, #0
 8009186:	dd05      	ble.n	8009194 <_dtoa_r+0x854>
 8009188:	4621      	mov	r1, r4
 800918a:	461a      	mov	r2, r3
 800918c:	4648      	mov	r0, r9
 800918e:	f000 fcaf 	bl	8009af0 <__lshift>
 8009192:	4604      	mov	r4, r0
 8009194:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009196:	2b00      	cmp	r3, #0
 8009198:	d061      	beq.n	800925e <_dtoa_r+0x91e>
 800919a:	4621      	mov	r1, r4
 800919c:	9803      	ldr	r0, [sp, #12]
 800919e:	f000 fd13 	bl	8009bc8 <__mcmp>
 80091a2:	2800      	cmp	r0, #0
 80091a4:	da5b      	bge.n	800925e <_dtoa_r+0x91e>
 80091a6:	2300      	movs	r3, #0
 80091a8:	220a      	movs	r2, #10
 80091aa:	4648      	mov	r0, r9
 80091ac:	9903      	ldr	r1, [sp, #12]
 80091ae:	f000 fafb 	bl	80097a8 <__multadd>
 80091b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091b4:	f107 38ff 	add.w	r8, r7, #4294967295
 80091b8:	9003      	str	r0, [sp, #12]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f000 8177 	beq.w	80094ae <_dtoa_r+0xb6e>
 80091c0:	4629      	mov	r1, r5
 80091c2:	2300      	movs	r3, #0
 80091c4:	220a      	movs	r2, #10
 80091c6:	4648      	mov	r0, r9
 80091c8:	f000 faee 	bl	80097a8 <__multadd>
 80091cc:	f1bb 0f00 	cmp.w	fp, #0
 80091d0:	4605      	mov	r5, r0
 80091d2:	dc6f      	bgt.n	80092b4 <_dtoa_r+0x974>
 80091d4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	dc49      	bgt.n	800926e <_dtoa_r+0x92e>
 80091da:	e06b      	b.n	80092b4 <_dtoa_r+0x974>
 80091dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80091de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80091e2:	e73c      	b.n	800905e <_dtoa_r+0x71e>
 80091e4:	3fe00000 	.word	0x3fe00000
 80091e8:	40240000 	.word	0x40240000
 80091ec:	9b08      	ldr	r3, [sp, #32]
 80091ee:	1e5c      	subs	r4, r3, #1
 80091f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091f2:	42a3      	cmp	r3, r4
 80091f4:	db09      	blt.n	800920a <_dtoa_r+0x8ca>
 80091f6:	1b1c      	subs	r4, r3, r4
 80091f8:	9b08      	ldr	r3, [sp, #32]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	f6bf af30 	bge.w	8009060 <_dtoa_r+0x720>
 8009200:	9b04      	ldr	r3, [sp, #16]
 8009202:	9a08      	ldr	r2, [sp, #32]
 8009204:	1a9e      	subs	r6, r3, r2
 8009206:	2300      	movs	r3, #0
 8009208:	e72b      	b.n	8009062 <_dtoa_r+0x722>
 800920a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800920c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800920e:	1ae3      	subs	r3, r4, r3
 8009210:	441a      	add	r2, r3
 8009212:	940a      	str	r4, [sp, #40]	@ 0x28
 8009214:	9e04      	ldr	r6, [sp, #16]
 8009216:	2400      	movs	r4, #0
 8009218:	9b08      	ldr	r3, [sp, #32]
 800921a:	920e      	str	r2, [sp, #56]	@ 0x38
 800921c:	e721      	b.n	8009062 <_dtoa_r+0x722>
 800921e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009220:	9e04      	ldr	r6, [sp, #16]
 8009222:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009224:	e728      	b.n	8009078 <_dtoa_r+0x738>
 8009226:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800922a:	e751      	b.n	80090d0 <_dtoa_r+0x790>
 800922c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800922e:	9903      	ldr	r1, [sp, #12]
 8009230:	e750      	b.n	80090d4 <_dtoa_r+0x794>
 8009232:	f8cd 800c 	str.w	r8, [sp, #12]
 8009236:	e751      	b.n	80090dc <_dtoa_r+0x79c>
 8009238:	2300      	movs	r3, #0
 800923a:	e779      	b.n	8009130 <_dtoa_r+0x7f0>
 800923c:	9b06      	ldr	r3, [sp, #24]
 800923e:	e777      	b.n	8009130 <_dtoa_r+0x7f0>
 8009240:	2300      	movs	r3, #0
 8009242:	930a      	str	r3, [sp, #40]	@ 0x28
 8009244:	e779      	b.n	800913a <_dtoa_r+0x7fa>
 8009246:	d093      	beq.n	8009170 <_dtoa_r+0x830>
 8009248:	9a04      	ldr	r2, [sp, #16]
 800924a:	331c      	adds	r3, #28
 800924c:	441a      	add	r2, r3
 800924e:	9204      	str	r2, [sp, #16]
 8009250:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009252:	441e      	add	r6, r3
 8009254:	441a      	add	r2, r3
 8009256:	9209      	str	r2, [sp, #36]	@ 0x24
 8009258:	e78a      	b.n	8009170 <_dtoa_r+0x830>
 800925a:	4603      	mov	r3, r0
 800925c:	e7f4      	b.n	8009248 <_dtoa_r+0x908>
 800925e:	9b08      	ldr	r3, [sp, #32]
 8009260:	46b8      	mov	r8, r7
 8009262:	2b00      	cmp	r3, #0
 8009264:	dc20      	bgt.n	80092a8 <_dtoa_r+0x968>
 8009266:	469b      	mov	fp, r3
 8009268:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800926a:	2b02      	cmp	r3, #2
 800926c:	dd1e      	ble.n	80092ac <_dtoa_r+0x96c>
 800926e:	f1bb 0f00 	cmp.w	fp, #0
 8009272:	f47f adb1 	bne.w	8008dd8 <_dtoa_r+0x498>
 8009276:	4621      	mov	r1, r4
 8009278:	465b      	mov	r3, fp
 800927a:	2205      	movs	r2, #5
 800927c:	4648      	mov	r0, r9
 800927e:	f000 fa93 	bl	80097a8 <__multadd>
 8009282:	4601      	mov	r1, r0
 8009284:	4604      	mov	r4, r0
 8009286:	9803      	ldr	r0, [sp, #12]
 8009288:	f000 fc9e 	bl	8009bc8 <__mcmp>
 800928c:	2800      	cmp	r0, #0
 800928e:	f77f ada3 	ble.w	8008dd8 <_dtoa_r+0x498>
 8009292:	4656      	mov	r6, sl
 8009294:	2331      	movs	r3, #49	@ 0x31
 8009296:	f108 0801 	add.w	r8, r8, #1
 800929a:	f806 3b01 	strb.w	r3, [r6], #1
 800929e:	e59f      	b.n	8008de0 <_dtoa_r+0x4a0>
 80092a0:	46b8      	mov	r8, r7
 80092a2:	9c08      	ldr	r4, [sp, #32]
 80092a4:	4625      	mov	r5, r4
 80092a6:	e7f4      	b.n	8009292 <_dtoa_r+0x952>
 80092a8:	f8dd b020 	ldr.w	fp, [sp, #32]
 80092ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f000 8101 	beq.w	80094b6 <_dtoa_r+0xb76>
 80092b4:	2e00      	cmp	r6, #0
 80092b6:	dd05      	ble.n	80092c4 <_dtoa_r+0x984>
 80092b8:	4629      	mov	r1, r5
 80092ba:	4632      	mov	r2, r6
 80092bc:	4648      	mov	r0, r9
 80092be:	f000 fc17 	bl	8009af0 <__lshift>
 80092c2:	4605      	mov	r5, r0
 80092c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d05c      	beq.n	8009384 <_dtoa_r+0xa44>
 80092ca:	4648      	mov	r0, r9
 80092cc:	6869      	ldr	r1, [r5, #4]
 80092ce:	f000 fa09 	bl	80096e4 <_Balloc>
 80092d2:	4606      	mov	r6, r0
 80092d4:	b928      	cbnz	r0, 80092e2 <_dtoa_r+0x9a2>
 80092d6:	4602      	mov	r2, r0
 80092d8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80092dc:	4b80      	ldr	r3, [pc, #512]	@ (80094e0 <_dtoa_r+0xba0>)
 80092de:	f7ff bb43 	b.w	8008968 <_dtoa_r+0x28>
 80092e2:	692a      	ldr	r2, [r5, #16]
 80092e4:	f105 010c 	add.w	r1, r5, #12
 80092e8:	3202      	adds	r2, #2
 80092ea:	0092      	lsls	r2, r2, #2
 80092ec:	300c      	adds	r0, #12
 80092ee:	f7ff fa72 	bl	80087d6 <memcpy>
 80092f2:	2201      	movs	r2, #1
 80092f4:	4631      	mov	r1, r6
 80092f6:	4648      	mov	r0, r9
 80092f8:	f000 fbfa 	bl	8009af0 <__lshift>
 80092fc:	462f      	mov	r7, r5
 80092fe:	4605      	mov	r5, r0
 8009300:	f10a 0301 	add.w	r3, sl, #1
 8009304:	9304      	str	r3, [sp, #16]
 8009306:	eb0a 030b 	add.w	r3, sl, fp
 800930a:	930a      	str	r3, [sp, #40]	@ 0x28
 800930c:	9b06      	ldr	r3, [sp, #24]
 800930e:	f003 0301 	and.w	r3, r3, #1
 8009312:	9309      	str	r3, [sp, #36]	@ 0x24
 8009314:	9b04      	ldr	r3, [sp, #16]
 8009316:	4621      	mov	r1, r4
 8009318:	9803      	ldr	r0, [sp, #12]
 800931a:	f103 3bff 	add.w	fp, r3, #4294967295
 800931e:	f7ff fa87 	bl	8008830 <quorem>
 8009322:	4603      	mov	r3, r0
 8009324:	4639      	mov	r1, r7
 8009326:	3330      	adds	r3, #48	@ 0x30
 8009328:	9006      	str	r0, [sp, #24]
 800932a:	9803      	ldr	r0, [sp, #12]
 800932c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800932e:	f000 fc4b 	bl	8009bc8 <__mcmp>
 8009332:	462a      	mov	r2, r5
 8009334:	9008      	str	r0, [sp, #32]
 8009336:	4621      	mov	r1, r4
 8009338:	4648      	mov	r0, r9
 800933a:	f000 fc61 	bl	8009c00 <__mdiff>
 800933e:	68c2      	ldr	r2, [r0, #12]
 8009340:	4606      	mov	r6, r0
 8009342:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009344:	bb02      	cbnz	r2, 8009388 <_dtoa_r+0xa48>
 8009346:	4601      	mov	r1, r0
 8009348:	9803      	ldr	r0, [sp, #12]
 800934a:	f000 fc3d 	bl	8009bc8 <__mcmp>
 800934e:	4602      	mov	r2, r0
 8009350:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009352:	4631      	mov	r1, r6
 8009354:	4648      	mov	r0, r9
 8009356:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800935a:	f000 fa03 	bl	8009764 <_Bfree>
 800935e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009360:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009362:	9e04      	ldr	r6, [sp, #16]
 8009364:	ea42 0103 	orr.w	r1, r2, r3
 8009368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800936a:	4319      	orrs	r1, r3
 800936c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800936e:	d10d      	bne.n	800938c <_dtoa_r+0xa4c>
 8009370:	2b39      	cmp	r3, #57	@ 0x39
 8009372:	d027      	beq.n	80093c4 <_dtoa_r+0xa84>
 8009374:	9a08      	ldr	r2, [sp, #32]
 8009376:	2a00      	cmp	r2, #0
 8009378:	dd01      	ble.n	800937e <_dtoa_r+0xa3e>
 800937a:	9b06      	ldr	r3, [sp, #24]
 800937c:	3331      	adds	r3, #49	@ 0x31
 800937e:	f88b 3000 	strb.w	r3, [fp]
 8009382:	e52e      	b.n	8008de2 <_dtoa_r+0x4a2>
 8009384:	4628      	mov	r0, r5
 8009386:	e7b9      	b.n	80092fc <_dtoa_r+0x9bc>
 8009388:	2201      	movs	r2, #1
 800938a:	e7e2      	b.n	8009352 <_dtoa_r+0xa12>
 800938c:	9908      	ldr	r1, [sp, #32]
 800938e:	2900      	cmp	r1, #0
 8009390:	db04      	blt.n	800939c <_dtoa_r+0xa5c>
 8009392:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8009394:	4301      	orrs	r1, r0
 8009396:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009398:	4301      	orrs	r1, r0
 800939a:	d120      	bne.n	80093de <_dtoa_r+0xa9e>
 800939c:	2a00      	cmp	r2, #0
 800939e:	ddee      	ble.n	800937e <_dtoa_r+0xa3e>
 80093a0:	2201      	movs	r2, #1
 80093a2:	9903      	ldr	r1, [sp, #12]
 80093a4:	4648      	mov	r0, r9
 80093a6:	9304      	str	r3, [sp, #16]
 80093a8:	f000 fba2 	bl	8009af0 <__lshift>
 80093ac:	4621      	mov	r1, r4
 80093ae:	9003      	str	r0, [sp, #12]
 80093b0:	f000 fc0a 	bl	8009bc8 <__mcmp>
 80093b4:	2800      	cmp	r0, #0
 80093b6:	9b04      	ldr	r3, [sp, #16]
 80093b8:	dc02      	bgt.n	80093c0 <_dtoa_r+0xa80>
 80093ba:	d1e0      	bne.n	800937e <_dtoa_r+0xa3e>
 80093bc:	07da      	lsls	r2, r3, #31
 80093be:	d5de      	bpl.n	800937e <_dtoa_r+0xa3e>
 80093c0:	2b39      	cmp	r3, #57	@ 0x39
 80093c2:	d1da      	bne.n	800937a <_dtoa_r+0xa3a>
 80093c4:	2339      	movs	r3, #57	@ 0x39
 80093c6:	f88b 3000 	strb.w	r3, [fp]
 80093ca:	4633      	mov	r3, r6
 80093cc:	461e      	mov	r6, r3
 80093ce:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80093d2:	3b01      	subs	r3, #1
 80093d4:	2a39      	cmp	r2, #57	@ 0x39
 80093d6:	d04e      	beq.n	8009476 <_dtoa_r+0xb36>
 80093d8:	3201      	adds	r2, #1
 80093da:	701a      	strb	r2, [r3, #0]
 80093dc:	e501      	b.n	8008de2 <_dtoa_r+0x4a2>
 80093de:	2a00      	cmp	r2, #0
 80093e0:	dd03      	ble.n	80093ea <_dtoa_r+0xaaa>
 80093e2:	2b39      	cmp	r3, #57	@ 0x39
 80093e4:	d0ee      	beq.n	80093c4 <_dtoa_r+0xa84>
 80093e6:	3301      	adds	r3, #1
 80093e8:	e7c9      	b.n	800937e <_dtoa_r+0xa3e>
 80093ea:	9a04      	ldr	r2, [sp, #16]
 80093ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80093ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 80093f2:	428a      	cmp	r2, r1
 80093f4:	d028      	beq.n	8009448 <_dtoa_r+0xb08>
 80093f6:	2300      	movs	r3, #0
 80093f8:	220a      	movs	r2, #10
 80093fa:	9903      	ldr	r1, [sp, #12]
 80093fc:	4648      	mov	r0, r9
 80093fe:	f000 f9d3 	bl	80097a8 <__multadd>
 8009402:	42af      	cmp	r7, r5
 8009404:	9003      	str	r0, [sp, #12]
 8009406:	f04f 0300 	mov.w	r3, #0
 800940a:	f04f 020a 	mov.w	r2, #10
 800940e:	4639      	mov	r1, r7
 8009410:	4648      	mov	r0, r9
 8009412:	d107      	bne.n	8009424 <_dtoa_r+0xae4>
 8009414:	f000 f9c8 	bl	80097a8 <__multadd>
 8009418:	4607      	mov	r7, r0
 800941a:	4605      	mov	r5, r0
 800941c:	9b04      	ldr	r3, [sp, #16]
 800941e:	3301      	adds	r3, #1
 8009420:	9304      	str	r3, [sp, #16]
 8009422:	e777      	b.n	8009314 <_dtoa_r+0x9d4>
 8009424:	f000 f9c0 	bl	80097a8 <__multadd>
 8009428:	4629      	mov	r1, r5
 800942a:	4607      	mov	r7, r0
 800942c:	2300      	movs	r3, #0
 800942e:	220a      	movs	r2, #10
 8009430:	4648      	mov	r0, r9
 8009432:	f000 f9b9 	bl	80097a8 <__multadd>
 8009436:	4605      	mov	r5, r0
 8009438:	e7f0      	b.n	800941c <_dtoa_r+0xadc>
 800943a:	f1bb 0f00 	cmp.w	fp, #0
 800943e:	bfcc      	ite	gt
 8009440:	465e      	movgt	r6, fp
 8009442:	2601      	movle	r6, #1
 8009444:	2700      	movs	r7, #0
 8009446:	4456      	add	r6, sl
 8009448:	2201      	movs	r2, #1
 800944a:	9903      	ldr	r1, [sp, #12]
 800944c:	4648      	mov	r0, r9
 800944e:	9304      	str	r3, [sp, #16]
 8009450:	f000 fb4e 	bl	8009af0 <__lshift>
 8009454:	4621      	mov	r1, r4
 8009456:	9003      	str	r0, [sp, #12]
 8009458:	f000 fbb6 	bl	8009bc8 <__mcmp>
 800945c:	2800      	cmp	r0, #0
 800945e:	dcb4      	bgt.n	80093ca <_dtoa_r+0xa8a>
 8009460:	d102      	bne.n	8009468 <_dtoa_r+0xb28>
 8009462:	9b04      	ldr	r3, [sp, #16]
 8009464:	07db      	lsls	r3, r3, #31
 8009466:	d4b0      	bmi.n	80093ca <_dtoa_r+0xa8a>
 8009468:	4633      	mov	r3, r6
 800946a:	461e      	mov	r6, r3
 800946c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009470:	2a30      	cmp	r2, #48	@ 0x30
 8009472:	d0fa      	beq.n	800946a <_dtoa_r+0xb2a>
 8009474:	e4b5      	b.n	8008de2 <_dtoa_r+0x4a2>
 8009476:	459a      	cmp	sl, r3
 8009478:	d1a8      	bne.n	80093cc <_dtoa_r+0xa8c>
 800947a:	2331      	movs	r3, #49	@ 0x31
 800947c:	f108 0801 	add.w	r8, r8, #1
 8009480:	f88a 3000 	strb.w	r3, [sl]
 8009484:	e4ad      	b.n	8008de2 <_dtoa_r+0x4a2>
 8009486:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009488:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80094e4 <_dtoa_r+0xba4>
 800948c:	b11b      	cbz	r3, 8009496 <_dtoa_r+0xb56>
 800948e:	f10a 0308 	add.w	r3, sl, #8
 8009492:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009494:	6013      	str	r3, [r2, #0]
 8009496:	4650      	mov	r0, sl
 8009498:	b017      	add	sp, #92	@ 0x5c
 800949a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800949e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	f77f ae2e 	ble.w	8009102 <_dtoa_r+0x7c2>
 80094a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80094aa:	2001      	movs	r0, #1
 80094ac:	e64d      	b.n	800914a <_dtoa_r+0x80a>
 80094ae:	f1bb 0f00 	cmp.w	fp, #0
 80094b2:	f77f aed9 	ble.w	8009268 <_dtoa_r+0x928>
 80094b6:	4656      	mov	r6, sl
 80094b8:	4621      	mov	r1, r4
 80094ba:	9803      	ldr	r0, [sp, #12]
 80094bc:	f7ff f9b8 	bl	8008830 <quorem>
 80094c0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80094c4:	f806 3b01 	strb.w	r3, [r6], #1
 80094c8:	eba6 020a 	sub.w	r2, r6, sl
 80094cc:	4593      	cmp	fp, r2
 80094ce:	ddb4      	ble.n	800943a <_dtoa_r+0xafa>
 80094d0:	2300      	movs	r3, #0
 80094d2:	220a      	movs	r2, #10
 80094d4:	4648      	mov	r0, r9
 80094d6:	9903      	ldr	r1, [sp, #12]
 80094d8:	f000 f966 	bl	80097a8 <__multadd>
 80094dc:	9003      	str	r0, [sp, #12]
 80094de:	e7eb      	b.n	80094b8 <_dtoa_r+0xb78>
 80094e0:	0800b921 	.word	0x0800b921
 80094e4:	0800b8bc 	.word	0x0800b8bc

080094e8 <_free_r>:
 80094e8:	b538      	push	{r3, r4, r5, lr}
 80094ea:	4605      	mov	r5, r0
 80094ec:	2900      	cmp	r1, #0
 80094ee:	d040      	beq.n	8009572 <_free_r+0x8a>
 80094f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094f4:	1f0c      	subs	r4, r1, #4
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	bfb8      	it	lt
 80094fa:	18e4      	addlt	r4, r4, r3
 80094fc:	f000 f8e6 	bl	80096cc <__malloc_lock>
 8009500:	4a1c      	ldr	r2, [pc, #112]	@ (8009574 <_free_r+0x8c>)
 8009502:	6813      	ldr	r3, [r2, #0]
 8009504:	b933      	cbnz	r3, 8009514 <_free_r+0x2c>
 8009506:	6063      	str	r3, [r4, #4]
 8009508:	6014      	str	r4, [r2, #0]
 800950a:	4628      	mov	r0, r5
 800950c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009510:	f000 b8e2 	b.w	80096d8 <__malloc_unlock>
 8009514:	42a3      	cmp	r3, r4
 8009516:	d908      	bls.n	800952a <_free_r+0x42>
 8009518:	6820      	ldr	r0, [r4, #0]
 800951a:	1821      	adds	r1, r4, r0
 800951c:	428b      	cmp	r3, r1
 800951e:	bf01      	itttt	eq
 8009520:	6819      	ldreq	r1, [r3, #0]
 8009522:	685b      	ldreq	r3, [r3, #4]
 8009524:	1809      	addeq	r1, r1, r0
 8009526:	6021      	streq	r1, [r4, #0]
 8009528:	e7ed      	b.n	8009506 <_free_r+0x1e>
 800952a:	461a      	mov	r2, r3
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	b10b      	cbz	r3, 8009534 <_free_r+0x4c>
 8009530:	42a3      	cmp	r3, r4
 8009532:	d9fa      	bls.n	800952a <_free_r+0x42>
 8009534:	6811      	ldr	r1, [r2, #0]
 8009536:	1850      	adds	r0, r2, r1
 8009538:	42a0      	cmp	r0, r4
 800953a:	d10b      	bne.n	8009554 <_free_r+0x6c>
 800953c:	6820      	ldr	r0, [r4, #0]
 800953e:	4401      	add	r1, r0
 8009540:	1850      	adds	r0, r2, r1
 8009542:	4283      	cmp	r3, r0
 8009544:	6011      	str	r1, [r2, #0]
 8009546:	d1e0      	bne.n	800950a <_free_r+0x22>
 8009548:	6818      	ldr	r0, [r3, #0]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	4408      	add	r0, r1
 800954e:	6010      	str	r0, [r2, #0]
 8009550:	6053      	str	r3, [r2, #4]
 8009552:	e7da      	b.n	800950a <_free_r+0x22>
 8009554:	d902      	bls.n	800955c <_free_r+0x74>
 8009556:	230c      	movs	r3, #12
 8009558:	602b      	str	r3, [r5, #0]
 800955a:	e7d6      	b.n	800950a <_free_r+0x22>
 800955c:	6820      	ldr	r0, [r4, #0]
 800955e:	1821      	adds	r1, r4, r0
 8009560:	428b      	cmp	r3, r1
 8009562:	bf01      	itttt	eq
 8009564:	6819      	ldreq	r1, [r3, #0]
 8009566:	685b      	ldreq	r3, [r3, #4]
 8009568:	1809      	addeq	r1, r1, r0
 800956a:	6021      	streq	r1, [r4, #0]
 800956c:	6063      	str	r3, [r4, #4]
 800956e:	6054      	str	r4, [r2, #4]
 8009570:	e7cb      	b.n	800950a <_free_r+0x22>
 8009572:	bd38      	pop	{r3, r4, r5, pc}
 8009574:	20000788 	.word	0x20000788

08009578 <malloc>:
 8009578:	4b02      	ldr	r3, [pc, #8]	@ (8009584 <malloc+0xc>)
 800957a:	4601      	mov	r1, r0
 800957c:	6818      	ldr	r0, [r3, #0]
 800957e:	f000 b825 	b.w	80095cc <_malloc_r>
 8009582:	bf00      	nop
 8009584:	200000c0 	.word	0x200000c0

08009588 <sbrk_aligned>:
 8009588:	b570      	push	{r4, r5, r6, lr}
 800958a:	4e0f      	ldr	r6, [pc, #60]	@ (80095c8 <sbrk_aligned+0x40>)
 800958c:	460c      	mov	r4, r1
 800958e:	6831      	ldr	r1, [r6, #0]
 8009590:	4605      	mov	r5, r0
 8009592:	b911      	cbnz	r1, 800959a <sbrk_aligned+0x12>
 8009594:	f001 f810 	bl	800a5b8 <_sbrk_r>
 8009598:	6030      	str	r0, [r6, #0]
 800959a:	4621      	mov	r1, r4
 800959c:	4628      	mov	r0, r5
 800959e:	f001 f80b 	bl	800a5b8 <_sbrk_r>
 80095a2:	1c43      	adds	r3, r0, #1
 80095a4:	d103      	bne.n	80095ae <sbrk_aligned+0x26>
 80095a6:	f04f 34ff 	mov.w	r4, #4294967295
 80095aa:	4620      	mov	r0, r4
 80095ac:	bd70      	pop	{r4, r5, r6, pc}
 80095ae:	1cc4      	adds	r4, r0, #3
 80095b0:	f024 0403 	bic.w	r4, r4, #3
 80095b4:	42a0      	cmp	r0, r4
 80095b6:	d0f8      	beq.n	80095aa <sbrk_aligned+0x22>
 80095b8:	1a21      	subs	r1, r4, r0
 80095ba:	4628      	mov	r0, r5
 80095bc:	f000 fffc 	bl	800a5b8 <_sbrk_r>
 80095c0:	3001      	adds	r0, #1
 80095c2:	d1f2      	bne.n	80095aa <sbrk_aligned+0x22>
 80095c4:	e7ef      	b.n	80095a6 <sbrk_aligned+0x1e>
 80095c6:	bf00      	nop
 80095c8:	20000784 	.word	0x20000784

080095cc <_malloc_r>:
 80095cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095d0:	1ccd      	adds	r5, r1, #3
 80095d2:	f025 0503 	bic.w	r5, r5, #3
 80095d6:	3508      	adds	r5, #8
 80095d8:	2d0c      	cmp	r5, #12
 80095da:	bf38      	it	cc
 80095dc:	250c      	movcc	r5, #12
 80095de:	2d00      	cmp	r5, #0
 80095e0:	4606      	mov	r6, r0
 80095e2:	db01      	blt.n	80095e8 <_malloc_r+0x1c>
 80095e4:	42a9      	cmp	r1, r5
 80095e6:	d904      	bls.n	80095f2 <_malloc_r+0x26>
 80095e8:	230c      	movs	r3, #12
 80095ea:	6033      	str	r3, [r6, #0]
 80095ec:	2000      	movs	r0, #0
 80095ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80096c8 <_malloc_r+0xfc>
 80095f6:	f000 f869 	bl	80096cc <__malloc_lock>
 80095fa:	f8d8 3000 	ldr.w	r3, [r8]
 80095fe:	461c      	mov	r4, r3
 8009600:	bb44      	cbnz	r4, 8009654 <_malloc_r+0x88>
 8009602:	4629      	mov	r1, r5
 8009604:	4630      	mov	r0, r6
 8009606:	f7ff ffbf 	bl	8009588 <sbrk_aligned>
 800960a:	1c43      	adds	r3, r0, #1
 800960c:	4604      	mov	r4, r0
 800960e:	d158      	bne.n	80096c2 <_malloc_r+0xf6>
 8009610:	f8d8 4000 	ldr.w	r4, [r8]
 8009614:	4627      	mov	r7, r4
 8009616:	2f00      	cmp	r7, #0
 8009618:	d143      	bne.n	80096a2 <_malloc_r+0xd6>
 800961a:	2c00      	cmp	r4, #0
 800961c:	d04b      	beq.n	80096b6 <_malloc_r+0xea>
 800961e:	6823      	ldr	r3, [r4, #0]
 8009620:	4639      	mov	r1, r7
 8009622:	4630      	mov	r0, r6
 8009624:	eb04 0903 	add.w	r9, r4, r3
 8009628:	f000 ffc6 	bl	800a5b8 <_sbrk_r>
 800962c:	4581      	cmp	r9, r0
 800962e:	d142      	bne.n	80096b6 <_malloc_r+0xea>
 8009630:	6821      	ldr	r1, [r4, #0]
 8009632:	4630      	mov	r0, r6
 8009634:	1a6d      	subs	r5, r5, r1
 8009636:	4629      	mov	r1, r5
 8009638:	f7ff ffa6 	bl	8009588 <sbrk_aligned>
 800963c:	3001      	adds	r0, #1
 800963e:	d03a      	beq.n	80096b6 <_malloc_r+0xea>
 8009640:	6823      	ldr	r3, [r4, #0]
 8009642:	442b      	add	r3, r5
 8009644:	6023      	str	r3, [r4, #0]
 8009646:	f8d8 3000 	ldr.w	r3, [r8]
 800964a:	685a      	ldr	r2, [r3, #4]
 800964c:	bb62      	cbnz	r2, 80096a8 <_malloc_r+0xdc>
 800964e:	f8c8 7000 	str.w	r7, [r8]
 8009652:	e00f      	b.n	8009674 <_malloc_r+0xa8>
 8009654:	6822      	ldr	r2, [r4, #0]
 8009656:	1b52      	subs	r2, r2, r5
 8009658:	d420      	bmi.n	800969c <_malloc_r+0xd0>
 800965a:	2a0b      	cmp	r2, #11
 800965c:	d917      	bls.n	800968e <_malloc_r+0xc2>
 800965e:	1961      	adds	r1, r4, r5
 8009660:	42a3      	cmp	r3, r4
 8009662:	6025      	str	r5, [r4, #0]
 8009664:	bf18      	it	ne
 8009666:	6059      	strne	r1, [r3, #4]
 8009668:	6863      	ldr	r3, [r4, #4]
 800966a:	bf08      	it	eq
 800966c:	f8c8 1000 	streq.w	r1, [r8]
 8009670:	5162      	str	r2, [r4, r5]
 8009672:	604b      	str	r3, [r1, #4]
 8009674:	4630      	mov	r0, r6
 8009676:	f000 f82f 	bl	80096d8 <__malloc_unlock>
 800967a:	f104 000b 	add.w	r0, r4, #11
 800967e:	1d23      	adds	r3, r4, #4
 8009680:	f020 0007 	bic.w	r0, r0, #7
 8009684:	1ac2      	subs	r2, r0, r3
 8009686:	bf1c      	itt	ne
 8009688:	1a1b      	subne	r3, r3, r0
 800968a:	50a3      	strne	r3, [r4, r2]
 800968c:	e7af      	b.n	80095ee <_malloc_r+0x22>
 800968e:	6862      	ldr	r2, [r4, #4]
 8009690:	42a3      	cmp	r3, r4
 8009692:	bf0c      	ite	eq
 8009694:	f8c8 2000 	streq.w	r2, [r8]
 8009698:	605a      	strne	r2, [r3, #4]
 800969a:	e7eb      	b.n	8009674 <_malloc_r+0xa8>
 800969c:	4623      	mov	r3, r4
 800969e:	6864      	ldr	r4, [r4, #4]
 80096a0:	e7ae      	b.n	8009600 <_malloc_r+0x34>
 80096a2:	463c      	mov	r4, r7
 80096a4:	687f      	ldr	r7, [r7, #4]
 80096a6:	e7b6      	b.n	8009616 <_malloc_r+0x4a>
 80096a8:	461a      	mov	r2, r3
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	42a3      	cmp	r3, r4
 80096ae:	d1fb      	bne.n	80096a8 <_malloc_r+0xdc>
 80096b0:	2300      	movs	r3, #0
 80096b2:	6053      	str	r3, [r2, #4]
 80096b4:	e7de      	b.n	8009674 <_malloc_r+0xa8>
 80096b6:	230c      	movs	r3, #12
 80096b8:	4630      	mov	r0, r6
 80096ba:	6033      	str	r3, [r6, #0]
 80096bc:	f000 f80c 	bl	80096d8 <__malloc_unlock>
 80096c0:	e794      	b.n	80095ec <_malloc_r+0x20>
 80096c2:	6005      	str	r5, [r0, #0]
 80096c4:	e7d6      	b.n	8009674 <_malloc_r+0xa8>
 80096c6:	bf00      	nop
 80096c8:	20000788 	.word	0x20000788

080096cc <__malloc_lock>:
 80096cc:	4801      	ldr	r0, [pc, #4]	@ (80096d4 <__malloc_lock+0x8>)
 80096ce:	f7ff b872 	b.w	80087b6 <__retarget_lock_acquire_recursive>
 80096d2:	bf00      	nop
 80096d4:	20000780 	.word	0x20000780

080096d8 <__malloc_unlock>:
 80096d8:	4801      	ldr	r0, [pc, #4]	@ (80096e0 <__malloc_unlock+0x8>)
 80096da:	f7ff b86d 	b.w	80087b8 <__retarget_lock_release_recursive>
 80096de:	bf00      	nop
 80096e0:	20000780 	.word	0x20000780

080096e4 <_Balloc>:
 80096e4:	b570      	push	{r4, r5, r6, lr}
 80096e6:	69c6      	ldr	r6, [r0, #28]
 80096e8:	4604      	mov	r4, r0
 80096ea:	460d      	mov	r5, r1
 80096ec:	b976      	cbnz	r6, 800970c <_Balloc+0x28>
 80096ee:	2010      	movs	r0, #16
 80096f0:	f7ff ff42 	bl	8009578 <malloc>
 80096f4:	4602      	mov	r2, r0
 80096f6:	61e0      	str	r0, [r4, #28]
 80096f8:	b920      	cbnz	r0, 8009704 <_Balloc+0x20>
 80096fa:	216b      	movs	r1, #107	@ 0x6b
 80096fc:	4b17      	ldr	r3, [pc, #92]	@ (800975c <_Balloc+0x78>)
 80096fe:	4818      	ldr	r0, [pc, #96]	@ (8009760 <_Balloc+0x7c>)
 8009700:	f7ff f878 	bl	80087f4 <__assert_func>
 8009704:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009708:	6006      	str	r6, [r0, #0]
 800970a:	60c6      	str	r6, [r0, #12]
 800970c:	69e6      	ldr	r6, [r4, #28]
 800970e:	68f3      	ldr	r3, [r6, #12]
 8009710:	b183      	cbz	r3, 8009734 <_Balloc+0x50>
 8009712:	69e3      	ldr	r3, [r4, #28]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800971a:	b9b8      	cbnz	r0, 800974c <_Balloc+0x68>
 800971c:	2101      	movs	r1, #1
 800971e:	fa01 f605 	lsl.w	r6, r1, r5
 8009722:	1d72      	adds	r2, r6, #5
 8009724:	4620      	mov	r0, r4
 8009726:	0092      	lsls	r2, r2, #2
 8009728:	f000 ff5d 	bl	800a5e6 <_calloc_r>
 800972c:	b160      	cbz	r0, 8009748 <_Balloc+0x64>
 800972e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009732:	e00e      	b.n	8009752 <_Balloc+0x6e>
 8009734:	2221      	movs	r2, #33	@ 0x21
 8009736:	2104      	movs	r1, #4
 8009738:	4620      	mov	r0, r4
 800973a:	f000 ff54 	bl	800a5e6 <_calloc_r>
 800973e:	69e3      	ldr	r3, [r4, #28]
 8009740:	60f0      	str	r0, [r6, #12]
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d1e4      	bne.n	8009712 <_Balloc+0x2e>
 8009748:	2000      	movs	r0, #0
 800974a:	bd70      	pop	{r4, r5, r6, pc}
 800974c:	6802      	ldr	r2, [r0, #0]
 800974e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009752:	2300      	movs	r3, #0
 8009754:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009758:	e7f7      	b.n	800974a <_Balloc+0x66>
 800975a:	bf00      	nop
 800975c:	0800b80f 	.word	0x0800b80f
 8009760:	0800b932 	.word	0x0800b932

08009764 <_Bfree>:
 8009764:	b570      	push	{r4, r5, r6, lr}
 8009766:	69c6      	ldr	r6, [r0, #28]
 8009768:	4605      	mov	r5, r0
 800976a:	460c      	mov	r4, r1
 800976c:	b976      	cbnz	r6, 800978c <_Bfree+0x28>
 800976e:	2010      	movs	r0, #16
 8009770:	f7ff ff02 	bl	8009578 <malloc>
 8009774:	4602      	mov	r2, r0
 8009776:	61e8      	str	r0, [r5, #28]
 8009778:	b920      	cbnz	r0, 8009784 <_Bfree+0x20>
 800977a:	218f      	movs	r1, #143	@ 0x8f
 800977c:	4b08      	ldr	r3, [pc, #32]	@ (80097a0 <_Bfree+0x3c>)
 800977e:	4809      	ldr	r0, [pc, #36]	@ (80097a4 <_Bfree+0x40>)
 8009780:	f7ff f838 	bl	80087f4 <__assert_func>
 8009784:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009788:	6006      	str	r6, [r0, #0]
 800978a:	60c6      	str	r6, [r0, #12]
 800978c:	b13c      	cbz	r4, 800979e <_Bfree+0x3a>
 800978e:	69eb      	ldr	r3, [r5, #28]
 8009790:	6862      	ldr	r2, [r4, #4]
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009798:	6021      	str	r1, [r4, #0]
 800979a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800979e:	bd70      	pop	{r4, r5, r6, pc}
 80097a0:	0800b80f 	.word	0x0800b80f
 80097a4:	0800b932 	.word	0x0800b932

080097a8 <__multadd>:
 80097a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ac:	4607      	mov	r7, r0
 80097ae:	460c      	mov	r4, r1
 80097b0:	461e      	mov	r6, r3
 80097b2:	2000      	movs	r0, #0
 80097b4:	690d      	ldr	r5, [r1, #16]
 80097b6:	f101 0c14 	add.w	ip, r1, #20
 80097ba:	f8dc 3000 	ldr.w	r3, [ip]
 80097be:	3001      	adds	r0, #1
 80097c0:	b299      	uxth	r1, r3
 80097c2:	fb02 6101 	mla	r1, r2, r1, r6
 80097c6:	0c1e      	lsrs	r6, r3, #16
 80097c8:	0c0b      	lsrs	r3, r1, #16
 80097ca:	fb02 3306 	mla	r3, r2, r6, r3
 80097ce:	b289      	uxth	r1, r1
 80097d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80097d4:	4285      	cmp	r5, r0
 80097d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80097da:	f84c 1b04 	str.w	r1, [ip], #4
 80097de:	dcec      	bgt.n	80097ba <__multadd+0x12>
 80097e0:	b30e      	cbz	r6, 8009826 <__multadd+0x7e>
 80097e2:	68a3      	ldr	r3, [r4, #8]
 80097e4:	42ab      	cmp	r3, r5
 80097e6:	dc19      	bgt.n	800981c <__multadd+0x74>
 80097e8:	6861      	ldr	r1, [r4, #4]
 80097ea:	4638      	mov	r0, r7
 80097ec:	3101      	adds	r1, #1
 80097ee:	f7ff ff79 	bl	80096e4 <_Balloc>
 80097f2:	4680      	mov	r8, r0
 80097f4:	b928      	cbnz	r0, 8009802 <__multadd+0x5a>
 80097f6:	4602      	mov	r2, r0
 80097f8:	21ba      	movs	r1, #186	@ 0xba
 80097fa:	4b0c      	ldr	r3, [pc, #48]	@ (800982c <__multadd+0x84>)
 80097fc:	480c      	ldr	r0, [pc, #48]	@ (8009830 <__multadd+0x88>)
 80097fe:	f7fe fff9 	bl	80087f4 <__assert_func>
 8009802:	6922      	ldr	r2, [r4, #16]
 8009804:	f104 010c 	add.w	r1, r4, #12
 8009808:	3202      	adds	r2, #2
 800980a:	0092      	lsls	r2, r2, #2
 800980c:	300c      	adds	r0, #12
 800980e:	f7fe ffe2 	bl	80087d6 <memcpy>
 8009812:	4621      	mov	r1, r4
 8009814:	4638      	mov	r0, r7
 8009816:	f7ff ffa5 	bl	8009764 <_Bfree>
 800981a:	4644      	mov	r4, r8
 800981c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009820:	3501      	adds	r5, #1
 8009822:	615e      	str	r6, [r3, #20]
 8009824:	6125      	str	r5, [r4, #16]
 8009826:	4620      	mov	r0, r4
 8009828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800982c:	0800b921 	.word	0x0800b921
 8009830:	0800b932 	.word	0x0800b932

08009834 <__hi0bits>:
 8009834:	4603      	mov	r3, r0
 8009836:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800983a:	bf3a      	itte	cc
 800983c:	0403      	lslcc	r3, r0, #16
 800983e:	2010      	movcc	r0, #16
 8009840:	2000      	movcs	r0, #0
 8009842:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009846:	bf3c      	itt	cc
 8009848:	021b      	lslcc	r3, r3, #8
 800984a:	3008      	addcc	r0, #8
 800984c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009850:	bf3c      	itt	cc
 8009852:	011b      	lslcc	r3, r3, #4
 8009854:	3004      	addcc	r0, #4
 8009856:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800985a:	bf3c      	itt	cc
 800985c:	009b      	lslcc	r3, r3, #2
 800985e:	3002      	addcc	r0, #2
 8009860:	2b00      	cmp	r3, #0
 8009862:	db05      	blt.n	8009870 <__hi0bits+0x3c>
 8009864:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009868:	f100 0001 	add.w	r0, r0, #1
 800986c:	bf08      	it	eq
 800986e:	2020      	moveq	r0, #32
 8009870:	4770      	bx	lr

08009872 <__lo0bits>:
 8009872:	6803      	ldr	r3, [r0, #0]
 8009874:	4602      	mov	r2, r0
 8009876:	f013 0007 	ands.w	r0, r3, #7
 800987a:	d00b      	beq.n	8009894 <__lo0bits+0x22>
 800987c:	07d9      	lsls	r1, r3, #31
 800987e:	d421      	bmi.n	80098c4 <__lo0bits+0x52>
 8009880:	0798      	lsls	r0, r3, #30
 8009882:	bf49      	itett	mi
 8009884:	085b      	lsrmi	r3, r3, #1
 8009886:	089b      	lsrpl	r3, r3, #2
 8009888:	2001      	movmi	r0, #1
 800988a:	6013      	strmi	r3, [r2, #0]
 800988c:	bf5c      	itt	pl
 800988e:	2002      	movpl	r0, #2
 8009890:	6013      	strpl	r3, [r2, #0]
 8009892:	4770      	bx	lr
 8009894:	b299      	uxth	r1, r3
 8009896:	b909      	cbnz	r1, 800989c <__lo0bits+0x2a>
 8009898:	2010      	movs	r0, #16
 800989a:	0c1b      	lsrs	r3, r3, #16
 800989c:	b2d9      	uxtb	r1, r3
 800989e:	b909      	cbnz	r1, 80098a4 <__lo0bits+0x32>
 80098a0:	3008      	adds	r0, #8
 80098a2:	0a1b      	lsrs	r3, r3, #8
 80098a4:	0719      	lsls	r1, r3, #28
 80098a6:	bf04      	itt	eq
 80098a8:	091b      	lsreq	r3, r3, #4
 80098aa:	3004      	addeq	r0, #4
 80098ac:	0799      	lsls	r1, r3, #30
 80098ae:	bf04      	itt	eq
 80098b0:	089b      	lsreq	r3, r3, #2
 80098b2:	3002      	addeq	r0, #2
 80098b4:	07d9      	lsls	r1, r3, #31
 80098b6:	d403      	bmi.n	80098c0 <__lo0bits+0x4e>
 80098b8:	085b      	lsrs	r3, r3, #1
 80098ba:	f100 0001 	add.w	r0, r0, #1
 80098be:	d003      	beq.n	80098c8 <__lo0bits+0x56>
 80098c0:	6013      	str	r3, [r2, #0]
 80098c2:	4770      	bx	lr
 80098c4:	2000      	movs	r0, #0
 80098c6:	4770      	bx	lr
 80098c8:	2020      	movs	r0, #32
 80098ca:	4770      	bx	lr

080098cc <__i2b>:
 80098cc:	b510      	push	{r4, lr}
 80098ce:	460c      	mov	r4, r1
 80098d0:	2101      	movs	r1, #1
 80098d2:	f7ff ff07 	bl	80096e4 <_Balloc>
 80098d6:	4602      	mov	r2, r0
 80098d8:	b928      	cbnz	r0, 80098e6 <__i2b+0x1a>
 80098da:	f240 1145 	movw	r1, #325	@ 0x145
 80098de:	4b04      	ldr	r3, [pc, #16]	@ (80098f0 <__i2b+0x24>)
 80098e0:	4804      	ldr	r0, [pc, #16]	@ (80098f4 <__i2b+0x28>)
 80098e2:	f7fe ff87 	bl	80087f4 <__assert_func>
 80098e6:	2301      	movs	r3, #1
 80098e8:	6144      	str	r4, [r0, #20]
 80098ea:	6103      	str	r3, [r0, #16]
 80098ec:	bd10      	pop	{r4, pc}
 80098ee:	bf00      	nop
 80098f0:	0800b921 	.word	0x0800b921
 80098f4:	0800b932 	.word	0x0800b932

080098f8 <__multiply>:
 80098f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098fc:	4617      	mov	r7, r2
 80098fe:	690a      	ldr	r2, [r1, #16]
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	4689      	mov	r9, r1
 8009904:	429a      	cmp	r2, r3
 8009906:	bfa2      	ittt	ge
 8009908:	463b      	movge	r3, r7
 800990a:	460f      	movge	r7, r1
 800990c:	4699      	movge	r9, r3
 800990e:	693d      	ldr	r5, [r7, #16]
 8009910:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	6879      	ldr	r1, [r7, #4]
 8009918:	eb05 060a 	add.w	r6, r5, sl
 800991c:	42b3      	cmp	r3, r6
 800991e:	b085      	sub	sp, #20
 8009920:	bfb8      	it	lt
 8009922:	3101      	addlt	r1, #1
 8009924:	f7ff fede 	bl	80096e4 <_Balloc>
 8009928:	b930      	cbnz	r0, 8009938 <__multiply+0x40>
 800992a:	4602      	mov	r2, r0
 800992c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009930:	4b40      	ldr	r3, [pc, #256]	@ (8009a34 <__multiply+0x13c>)
 8009932:	4841      	ldr	r0, [pc, #260]	@ (8009a38 <__multiply+0x140>)
 8009934:	f7fe ff5e 	bl	80087f4 <__assert_func>
 8009938:	f100 0414 	add.w	r4, r0, #20
 800993c:	4623      	mov	r3, r4
 800993e:	2200      	movs	r2, #0
 8009940:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009944:	4573      	cmp	r3, lr
 8009946:	d320      	bcc.n	800998a <__multiply+0x92>
 8009948:	f107 0814 	add.w	r8, r7, #20
 800994c:	f109 0114 	add.w	r1, r9, #20
 8009950:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009954:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009958:	9302      	str	r3, [sp, #8]
 800995a:	1beb      	subs	r3, r5, r7
 800995c:	3b15      	subs	r3, #21
 800995e:	f023 0303 	bic.w	r3, r3, #3
 8009962:	3304      	adds	r3, #4
 8009964:	3715      	adds	r7, #21
 8009966:	42bd      	cmp	r5, r7
 8009968:	bf38      	it	cc
 800996a:	2304      	movcc	r3, #4
 800996c:	9301      	str	r3, [sp, #4]
 800996e:	9b02      	ldr	r3, [sp, #8]
 8009970:	9103      	str	r1, [sp, #12]
 8009972:	428b      	cmp	r3, r1
 8009974:	d80c      	bhi.n	8009990 <__multiply+0x98>
 8009976:	2e00      	cmp	r6, #0
 8009978:	dd03      	ble.n	8009982 <__multiply+0x8a>
 800997a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800997e:	2b00      	cmp	r3, #0
 8009980:	d055      	beq.n	8009a2e <__multiply+0x136>
 8009982:	6106      	str	r6, [r0, #16]
 8009984:	b005      	add	sp, #20
 8009986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800998a:	f843 2b04 	str.w	r2, [r3], #4
 800998e:	e7d9      	b.n	8009944 <__multiply+0x4c>
 8009990:	f8b1 a000 	ldrh.w	sl, [r1]
 8009994:	f1ba 0f00 	cmp.w	sl, #0
 8009998:	d01f      	beq.n	80099da <__multiply+0xe2>
 800999a:	46c4      	mov	ip, r8
 800999c:	46a1      	mov	r9, r4
 800999e:	2700      	movs	r7, #0
 80099a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80099a4:	f8d9 3000 	ldr.w	r3, [r9]
 80099a8:	fa1f fb82 	uxth.w	fp, r2
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	fb0a 330b 	mla	r3, sl, fp, r3
 80099b2:	443b      	add	r3, r7
 80099b4:	f8d9 7000 	ldr.w	r7, [r9]
 80099b8:	0c12      	lsrs	r2, r2, #16
 80099ba:	0c3f      	lsrs	r7, r7, #16
 80099bc:	fb0a 7202 	mla	r2, sl, r2, r7
 80099c0:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099ca:	4565      	cmp	r5, ip
 80099cc:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80099d0:	f849 3b04 	str.w	r3, [r9], #4
 80099d4:	d8e4      	bhi.n	80099a0 <__multiply+0xa8>
 80099d6:	9b01      	ldr	r3, [sp, #4]
 80099d8:	50e7      	str	r7, [r4, r3]
 80099da:	9b03      	ldr	r3, [sp, #12]
 80099dc:	3104      	adds	r1, #4
 80099de:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80099e2:	f1b9 0f00 	cmp.w	r9, #0
 80099e6:	d020      	beq.n	8009a2a <__multiply+0x132>
 80099e8:	4647      	mov	r7, r8
 80099ea:	46a4      	mov	ip, r4
 80099ec:	f04f 0a00 	mov.w	sl, #0
 80099f0:	6823      	ldr	r3, [r4, #0]
 80099f2:	f8b7 b000 	ldrh.w	fp, [r7]
 80099f6:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	fb09 220b 	mla	r2, r9, fp, r2
 8009a00:	4452      	add	r2, sl
 8009a02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a06:	f84c 3b04 	str.w	r3, [ip], #4
 8009a0a:	f857 3b04 	ldr.w	r3, [r7], #4
 8009a0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009a12:	f8bc 3000 	ldrh.w	r3, [ip]
 8009a16:	42bd      	cmp	r5, r7
 8009a18:	fb09 330a 	mla	r3, r9, sl, r3
 8009a1c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009a20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009a24:	d8e5      	bhi.n	80099f2 <__multiply+0xfa>
 8009a26:	9a01      	ldr	r2, [sp, #4]
 8009a28:	50a3      	str	r3, [r4, r2]
 8009a2a:	3404      	adds	r4, #4
 8009a2c:	e79f      	b.n	800996e <__multiply+0x76>
 8009a2e:	3e01      	subs	r6, #1
 8009a30:	e7a1      	b.n	8009976 <__multiply+0x7e>
 8009a32:	bf00      	nop
 8009a34:	0800b921 	.word	0x0800b921
 8009a38:	0800b932 	.word	0x0800b932

08009a3c <__pow5mult>:
 8009a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a40:	4615      	mov	r5, r2
 8009a42:	f012 0203 	ands.w	r2, r2, #3
 8009a46:	4607      	mov	r7, r0
 8009a48:	460e      	mov	r6, r1
 8009a4a:	d007      	beq.n	8009a5c <__pow5mult+0x20>
 8009a4c:	4c25      	ldr	r4, [pc, #148]	@ (8009ae4 <__pow5mult+0xa8>)
 8009a4e:	3a01      	subs	r2, #1
 8009a50:	2300      	movs	r3, #0
 8009a52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a56:	f7ff fea7 	bl	80097a8 <__multadd>
 8009a5a:	4606      	mov	r6, r0
 8009a5c:	10ad      	asrs	r5, r5, #2
 8009a5e:	d03d      	beq.n	8009adc <__pow5mult+0xa0>
 8009a60:	69fc      	ldr	r4, [r7, #28]
 8009a62:	b97c      	cbnz	r4, 8009a84 <__pow5mult+0x48>
 8009a64:	2010      	movs	r0, #16
 8009a66:	f7ff fd87 	bl	8009578 <malloc>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	61f8      	str	r0, [r7, #28]
 8009a6e:	b928      	cbnz	r0, 8009a7c <__pow5mult+0x40>
 8009a70:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009a74:	4b1c      	ldr	r3, [pc, #112]	@ (8009ae8 <__pow5mult+0xac>)
 8009a76:	481d      	ldr	r0, [pc, #116]	@ (8009aec <__pow5mult+0xb0>)
 8009a78:	f7fe febc 	bl	80087f4 <__assert_func>
 8009a7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a80:	6004      	str	r4, [r0, #0]
 8009a82:	60c4      	str	r4, [r0, #12]
 8009a84:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009a88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a8c:	b94c      	cbnz	r4, 8009aa2 <__pow5mult+0x66>
 8009a8e:	f240 2171 	movw	r1, #625	@ 0x271
 8009a92:	4638      	mov	r0, r7
 8009a94:	f7ff ff1a 	bl	80098cc <__i2b>
 8009a98:	2300      	movs	r3, #0
 8009a9a:	4604      	mov	r4, r0
 8009a9c:	f8c8 0008 	str.w	r0, [r8, #8]
 8009aa0:	6003      	str	r3, [r0, #0]
 8009aa2:	f04f 0900 	mov.w	r9, #0
 8009aa6:	07eb      	lsls	r3, r5, #31
 8009aa8:	d50a      	bpl.n	8009ac0 <__pow5mult+0x84>
 8009aaa:	4631      	mov	r1, r6
 8009aac:	4622      	mov	r2, r4
 8009aae:	4638      	mov	r0, r7
 8009ab0:	f7ff ff22 	bl	80098f8 <__multiply>
 8009ab4:	4680      	mov	r8, r0
 8009ab6:	4631      	mov	r1, r6
 8009ab8:	4638      	mov	r0, r7
 8009aba:	f7ff fe53 	bl	8009764 <_Bfree>
 8009abe:	4646      	mov	r6, r8
 8009ac0:	106d      	asrs	r5, r5, #1
 8009ac2:	d00b      	beq.n	8009adc <__pow5mult+0xa0>
 8009ac4:	6820      	ldr	r0, [r4, #0]
 8009ac6:	b938      	cbnz	r0, 8009ad8 <__pow5mult+0x9c>
 8009ac8:	4622      	mov	r2, r4
 8009aca:	4621      	mov	r1, r4
 8009acc:	4638      	mov	r0, r7
 8009ace:	f7ff ff13 	bl	80098f8 <__multiply>
 8009ad2:	6020      	str	r0, [r4, #0]
 8009ad4:	f8c0 9000 	str.w	r9, [r0]
 8009ad8:	4604      	mov	r4, r0
 8009ada:	e7e4      	b.n	8009aa6 <__pow5mult+0x6a>
 8009adc:	4630      	mov	r0, r6
 8009ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ae2:	bf00      	nop
 8009ae4:	0800b9a8 	.word	0x0800b9a8
 8009ae8:	0800b80f 	.word	0x0800b80f
 8009aec:	0800b932 	.word	0x0800b932

08009af0 <__lshift>:
 8009af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009af4:	460c      	mov	r4, r1
 8009af6:	4607      	mov	r7, r0
 8009af8:	4691      	mov	r9, r2
 8009afa:	6923      	ldr	r3, [r4, #16]
 8009afc:	6849      	ldr	r1, [r1, #4]
 8009afe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009b02:	68a3      	ldr	r3, [r4, #8]
 8009b04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b08:	f108 0601 	add.w	r6, r8, #1
 8009b0c:	42b3      	cmp	r3, r6
 8009b0e:	db0b      	blt.n	8009b28 <__lshift+0x38>
 8009b10:	4638      	mov	r0, r7
 8009b12:	f7ff fde7 	bl	80096e4 <_Balloc>
 8009b16:	4605      	mov	r5, r0
 8009b18:	b948      	cbnz	r0, 8009b2e <__lshift+0x3e>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009b20:	4b27      	ldr	r3, [pc, #156]	@ (8009bc0 <__lshift+0xd0>)
 8009b22:	4828      	ldr	r0, [pc, #160]	@ (8009bc4 <__lshift+0xd4>)
 8009b24:	f7fe fe66 	bl	80087f4 <__assert_func>
 8009b28:	3101      	adds	r1, #1
 8009b2a:	005b      	lsls	r3, r3, #1
 8009b2c:	e7ee      	b.n	8009b0c <__lshift+0x1c>
 8009b2e:	2300      	movs	r3, #0
 8009b30:	f100 0114 	add.w	r1, r0, #20
 8009b34:	f100 0210 	add.w	r2, r0, #16
 8009b38:	4618      	mov	r0, r3
 8009b3a:	4553      	cmp	r3, sl
 8009b3c:	db33      	blt.n	8009ba6 <__lshift+0xb6>
 8009b3e:	6920      	ldr	r0, [r4, #16]
 8009b40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b44:	f104 0314 	add.w	r3, r4, #20
 8009b48:	f019 091f 	ands.w	r9, r9, #31
 8009b4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b54:	d02b      	beq.n	8009bae <__lshift+0xbe>
 8009b56:	468a      	mov	sl, r1
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f1c9 0e20 	rsb	lr, r9, #32
 8009b5e:	6818      	ldr	r0, [r3, #0]
 8009b60:	fa00 f009 	lsl.w	r0, r0, r9
 8009b64:	4310      	orrs	r0, r2
 8009b66:	f84a 0b04 	str.w	r0, [sl], #4
 8009b6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b6e:	459c      	cmp	ip, r3
 8009b70:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b74:	d8f3      	bhi.n	8009b5e <__lshift+0x6e>
 8009b76:	ebac 0304 	sub.w	r3, ip, r4
 8009b7a:	3b15      	subs	r3, #21
 8009b7c:	f023 0303 	bic.w	r3, r3, #3
 8009b80:	3304      	adds	r3, #4
 8009b82:	f104 0015 	add.w	r0, r4, #21
 8009b86:	4560      	cmp	r0, ip
 8009b88:	bf88      	it	hi
 8009b8a:	2304      	movhi	r3, #4
 8009b8c:	50ca      	str	r2, [r1, r3]
 8009b8e:	b10a      	cbz	r2, 8009b94 <__lshift+0xa4>
 8009b90:	f108 0602 	add.w	r6, r8, #2
 8009b94:	3e01      	subs	r6, #1
 8009b96:	4638      	mov	r0, r7
 8009b98:	4621      	mov	r1, r4
 8009b9a:	612e      	str	r6, [r5, #16]
 8009b9c:	f7ff fde2 	bl	8009764 <_Bfree>
 8009ba0:	4628      	mov	r0, r5
 8009ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ba6:	f842 0f04 	str.w	r0, [r2, #4]!
 8009baa:	3301      	adds	r3, #1
 8009bac:	e7c5      	b.n	8009b3a <__lshift+0x4a>
 8009bae:	3904      	subs	r1, #4
 8009bb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bb4:	459c      	cmp	ip, r3
 8009bb6:	f841 2f04 	str.w	r2, [r1, #4]!
 8009bba:	d8f9      	bhi.n	8009bb0 <__lshift+0xc0>
 8009bbc:	e7ea      	b.n	8009b94 <__lshift+0xa4>
 8009bbe:	bf00      	nop
 8009bc0:	0800b921 	.word	0x0800b921
 8009bc4:	0800b932 	.word	0x0800b932

08009bc8 <__mcmp>:
 8009bc8:	4603      	mov	r3, r0
 8009bca:	690a      	ldr	r2, [r1, #16]
 8009bcc:	6900      	ldr	r0, [r0, #16]
 8009bce:	b530      	push	{r4, r5, lr}
 8009bd0:	1a80      	subs	r0, r0, r2
 8009bd2:	d10e      	bne.n	8009bf2 <__mcmp+0x2a>
 8009bd4:	3314      	adds	r3, #20
 8009bd6:	3114      	adds	r1, #20
 8009bd8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009bdc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009be0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009be4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009be8:	4295      	cmp	r5, r2
 8009bea:	d003      	beq.n	8009bf4 <__mcmp+0x2c>
 8009bec:	d205      	bcs.n	8009bfa <__mcmp+0x32>
 8009bee:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf2:	bd30      	pop	{r4, r5, pc}
 8009bf4:	42a3      	cmp	r3, r4
 8009bf6:	d3f3      	bcc.n	8009be0 <__mcmp+0x18>
 8009bf8:	e7fb      	b.n	8009bf2 <__mcmp+0x2a>
 8009bfa:	2001      	movs	r0, #1
 8009bfc:	e7f9      	b.n	8009bf2 <__mcmp+0x2a>
	...

08009c00 <__mdiff>:
 8009c00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c04:	4689      	mov	r9, r1
 8009c06:	4606      	mov	r6, r0
 8009c08:	4611      	mov	r1, r2
 8009c0a:	4648      	mov	r0, r9
 8009c0c:	4614      	mov	r4, r2
 8009c0e:	f7ff ffdb 	bl	8009bc8 <__mcmp>
 8009c12:	1e05      	subs	r5, r0, #0
 8009c14:	d112      	bne.n	8009c3c <__mdiff+0x3c>
 8009c16:	4629      	mov	r1, r5
 8009c18:	4630      	mov	r0, r6
 8009c1a:	f7ff fd63 	bl	80096e4 <_Balloc>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	b928      	cbnz	r0, 8009c2e <__mdiff+0x2e>
 8009c22:	f240 2137 	movw	r1, #567	@ 0x237
 8009c26:	4b3e      	ldr	r3, [pc, #248]	@ (8009d20 <__mdiff+0x120>)
 8009c28:	483e      	ldr	r0, [pc, #248]	@ (8009d24 <__mdiff+0x124>)
 8009c2a:	f7fe fde3 	bl	80087f4 <__assert_func>
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c34:	4610      	mov	r0, r2
 8009c36:	b003      	add	sp, #12
 8009c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c3c:	bfbc      	itt	lt
 8009c3e:	464b      	movlt	r3, r9
 8009c40:	46a1      	movlt	r9, r4
 8009c42:	4630      	mov	r0, r6
 8009c44:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009c48:	bfba      	itte	lt
 8009c4a:	461c      	movlt	r4, r3
 8009c4c:	2501      	movlt	r5, #1
 8009c4e:	2500      	movge	r5, #0
 8009c50:	f7ff fd48 	bl	80096e4 <_Balloc>
 8009c54:	4602      	mov	r2, r0
 8009c56:	b918      	cbnz	r0, 8009c60 <__mdiff+0x60>
 8009c58:	f240 2145 	movw	r1, #581	@ 0x245
 8009c5c:	4b30      	ldr	r3, [pc, #192]	@ (8009d20 <__mdiff+0x120>)
 8009c5e:	e7e3      	b.n	8009c28 <__mdiff+0x28>
 8009c60:	f100 0b14 	add.w	fp, r0, #20
 8009c64:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009c68:	f109 0310 	add.w	r3, r9, #16
 8009c6c:	60c5      	str	r5, [r0, #12]
 8009c6e:	f04f 0c00 	mov.w	ip, #0
 8009c72:	f109 0514 	add.w	r5, r9, #20
 8009c76:	46d9      	mov	r9, fp
 8009c78:	6926      	ldr	r6, [r4, #16]
 8009c7a:	f104 0e14 	add.w	lr, r4, #20
 8009c7e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009c82:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009c86:	9301      	str	r3, [sp, #4]
 8009c88:	9b01      	ldr	r3, [sp, #4]
 8009c8a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009c8e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009c92:	b281      	uxth	r1, r0
 8009c94:	9301      	str	r3, [sp, #4]
 8009c96:	fa1f f38a 	uxth.w	r3, sl
 8009c9a:	1a5b      	subs	r3, r3, r1
 8009c9c:	0c00      	lsrs	r0, r0, #16
 8009c9e:	4463      	add	r3, ip
 8009ca0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009ca4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009cae:	4576      	cmp	r6, lr
 8009cb0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009cb4:	f849 3b04 	str.w	r3, [r9], #4
 8009cb8:	d8e6      	bhi.n	8009c88 <__mdiff+0x88>
 8009cba:	1b33      	subs	r3, r6, r4
 8009cbc:	3b15      	subs	r3, #21
 8009cbe:	f023 0303 	bic.w	r3, r3, #3
 8009cc2:	3415      	adds	r4, #21
 8009cc4:	3304      	adds	r3, #4
 8009cc6:	42a6      	cmp	r6, r4
 8009cc8:	bf38      	it	cc
 8009cca:	2304      	movcc	r3, #4
 8009ccc:	441d      	add	r5, r3
 8009cce:	445b      	add	r3, fp
 8009cd0:	461e      	mov	r6, r3
 8009cd2:	462c      	mov	r4, r5
 8009cd4:	4544      	cmp	r4, r8
 8009cd6:	d30e      	bcc.n	8009cf6 <__mdiff+0xf6>
 8009cd8:	f108 0103 	add.w	r1, r8, #3
 8009cdc:	1b49      	subs	r1, r1, r5
 8009cde:	f021 0103 	bic.w	r1, r1, #3
 8009ce2:	3d03      	subs	r5, #3
 8009ce4:	45a8      	cmp	r8, r5
 8009ce6:	bf38      	it	cc
 8009ce8:	2100      	movcc	r1, #0
 8009cea:	440b      	add	r3, r1
 8009cec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009cf0:	b199      	cbz	r1, 8009d1a <__mdiff+0x11a>
 8009cf2:	6117      	str	r7, [r2, #16]
 8009cf4:	e79e      	b.n	8009c34 <__mdiff+0x34>
 8009cf6:	46e6      	mov	lr, ip
 8009cf8:	f854 1b04 	ldr.w	r1, [r4], #4
 8009cfc:	fa1f fc81 	uxth.w	ip, r1
 8009d00:	44f4      	add	ip, lr
 8009d02:	0c08      	lsrs	r0, r1, #16
 8009d04:	4471      	add	r1, lr
 8009d06:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009d0a:	b289      	uxth	r1, r1
 8009d0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009d10:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009d14:	f846 1b04 	str.w	r1, [r6], #4
 8009d18:	e7dc      	b.n	8009cd4 <__mdiff+0xd4>
 8009d1a:	3f01      	subs	r7, #1
 8009d1c:	e7e6      	b.n	8009cec <__mdiff+0xec>
 8009d1e:	bf00      	nop
 8009d20:	0800b921 	.word	0x0800b921
 8009d24:	0800b932 	.word	0x0800b932

08009d28 <__d2b>:
 8009d28:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009d2c:	2101      	movs	r1, #1
 8009d2e:	4690      	mov	r8, r2
 8009d30:	4699      	mov	r9, r3
 8009d32:	9e08      	ldr	r6, [sp, #32]
 8009d34:	f7ff fcd6 	bl	80096e4 <_Balloc>
 8009d38:	4604      	mov	r4, r0
 8009d3a:	b930      	cbnz	r0, 8009d4a <__d2b+0x22>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	f240 310f 	movw	r1, #783	@ 0x30f
 8009d42:	4b23      	ldr	r3, [pc, #140]	@ (8009dd0 <__d2b+0xa8>)
 8009d44:	4823      	ldr	r0, [pc, #140]	@ (8009dd4 <__d2b+0xac>)
 8009d46:	f7fe fd55 	bl	80087f4 <__assert_func>
 8009d4a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009d4e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d52:	b10d      	cbz	r5, 8009d58 <__d2b+0x30>
 8009d54:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d58:	9301      	str	r3, [sp, #4]
 8009d5a:	f1b8 0300 	subs.w	r3, r8, #0
 8009d5e:	d024      	beq.n	8009daa <__d2b+0x82>
 8009d60:	4668      	mov	r0, sp
 8009d62:	9300      	str	r3, [sp, #0]
 8009d64:	f7ff fd85 	bl	8009872 <__lo0bits>
 8009d68:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009d6c:	b1d8      	cbz	r0, 8009da6 <__d2b+0x7e>
 8009d6e:	f1c0 0320 	rsb	r3, r0, #32
 8009d72:	fa02 f303 	lsl.w	r3, r2, r3
 8009d76:	430b      	orrs	r3, r1
 8009d78:	40c2      	lsrs	r2, r0
 8009d7a:	6163      	str	r3, [r4, #20]
 8009d7c:	9201      	str	r2, [sp, #4]
 8009d7e:	9b01      	ldr	r3, [sp, #4]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	bf0c      	ite	eq
 8009d84:	2201      	moveq	r2, #1
 8009d86:	2202      	movne	r2, #2
 8009d88:	61a3      	str	r3, [r4, #24]
 8009d8a:	6122      	str	r2, [r4, #16]
 8009d8c:	b1ad      	cbz	r5, 8009dba <__d2b+0x92>
 8009d8e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009d92:	4405      	add	r5, r0
 8009d94:	6035      	str	r5, [r6, #0]
 8009d96:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009d9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d9c:	6018      	str	r0, [r3, #0]
 8009d9e:	4620      	mov	r0, r4
 8009da0:	b002      	add	sp, #8
 8009da2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009da6:	6161      	str	r1, [r4, #20]
 8009da8:	e7e9      	b.n	8009d7e <__d2b+0x56>
 8009daa:	a801      	add	r0, sp, #4
 8009dac:	f7ff fd61 	bl	8009872 <__lo0bits>
 8009db0:	9b01      	ldr	r3, [sp, #4]
 8009db2:	2201      	movs	r2, #1
 8009db4:	6163      	str	r3, [r4, #20]
 8009db6:	3020      	adds	r0, #32
 8009db8:	e7e7      	b.n	8009d8a <__d2b+0x62>
 8009dba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009dbe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009dc2:	6030      	str	r0, [r6, #0]
 8009dc4:	6918      	ldr	r0, [r3, #16]
 8009dc6:	f7ff fd35 	bl	8009834 <__hi0bits>
 8009dca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009dce:	e7e4      	b.n	8009d9a <__d2b+0x72>
 8009dd0:	0800b921 	.word	0x0800b921
 8009dd4:	0800b932 	.word	0x0800b932

08009dd8 <__ssputs_r>:
 8009dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ddc:	461f      	mov	r7, r3
 8009dde:	688e      	ldr	r6, [r1, #8]
 8009de0:	4682      	mov	sl, r0
 8009de2:	42be      	cmp	r6, r7
 8009de4:	460c      	mov	r4, r1
 8009de6:	4690      	mov	r8, r2
 8009de8:	680b      	ldr	r3, [r1, #0]
 8009dea:	d82d      	bhi.n	8009e48 <__ssputs_r+0x70>
 8009dec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009df0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009df4:	d026      	beq.n	8009e44 <__ssputs_r+0x6c>
 8009df6:	6965      	ldr	r5, [r4, #20]
 8009df8:	6909      	ldr	r1, [r1, #16]
 8009dfa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009dfe:	eba3 0901 	sub.w	r9, r3, r1
 8009e02:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e06:	1c7b      	adds	r3, r7, #1
 8009e08:	444b      	add	r3, r9
 8009e0a:	106d      	asrs	r5, r5, #1
 8009e0c:	429d      	cmp	r5, r3
 8009e0e:	bf38      	it	cc
 8009e10:	461d      	movcc	r5, r3
 8009e12:	0553      	lsls	r3, r2, #21
 8009e14:	d527      	bpl.n	8009e66 <__ssputs_r+0x8e>
 8009e16:	4629      	mov	r1, r5
 8009e18:	f7ff fbd8 	bl	80095cc <_malloc_r>
 8009e1c:	4606      	mov	r6, r0
 8009e1e:	b360      	cbz	r0, 8009e7a <__ssputs_r+0xa2>
 8009e20:	464a      	mov	r2, r9
 8009e22:	6921      	ldr	r1, [r4, #16]
 8009e24:	f7fe fcd7 	bl	80087d6 <memcpy>
 8009e28:	89a3      	ldrh	r3, [r4, #12]
 8009e2a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009e2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e32:	81a3      	strh	r3, [r4, #12]
 8009e34:	6126      	str	r6, [r4, #16]
 8009e36:	444e      	add	r6, r9
 8009e38:	6026      	str	r6, [r4, #0]
 8009e3a:	463e      	mov	r6, r7
 8009e3c:	6165      	str	r5, [r4, #20]
 8009e3e:	eba5 0509 	sub.w	r5, r5, r9
 8009e42:	60a5      	str	r5, [r4, #8]
 8009e44:	42be      	cmp	r6, r7
 8009e46:	d900      	bls.n	8009e4a <__ssputs_r+0x72>
 8009e48:	463e      	mov	r6, r7
 8009e4a:	4632      	mov	r2, r6
 8009e4c:	4641      	mov	r1, r8
 8009e4e:	6820      	ldr	r0, [r4, #0]
 8009e50:	f000 fb75 	bl	800a53e <memmove>
 8009e54:	2000      	movs	r0, #0
 8009e56:	68a3      	ldr	r3, [r4, #8]
 8009e58:	1b9b      	subs	r3, r3, r6
 8009e5a:	60a3      	str	r3, [r4, #8]
 8009e5c:	6823      	ldr	r3, [r4, #0]
 8009e5e:	4433      	add	r3, r6
 8009e60:	6023      	str	r3, [r4, #0]
 8009e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e66:	462a      	mov	r2, r5
 8009e68:	f000 fbe3 	bl	800a632 <_realloc_r>
 8009e6c:	4606      	mov	r6, r0
 8009e6e:	2800      	cmp	r0, #0
 8009e70:	d1e0      	bne.n	8009e34 <__ssputs_r+0x5c>
 8009e72:	4650      	mov	r0, sl
 8009e74:	6921      	ldr	r1, [r4, #16]
 8009e76:	f7ff fb37 	bl	80094e8 <_free_r>
 8009e7a:	230c      	movs	r3, #12
 8009e7c:	f8ca 3000 	str.w	r3, [sl]
 8009e80:	89a3      	ldrh	r3, [r4, #12]
 8009e82:	f04f 30ff 	mov.w	r0, #4294967295
 8009e86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e8a:	81a3      	strh	r3, [r4, #12]
 8009e8c:	e7e9      	b.n	8009e62 <__ssputs_r+0x8a>
	...

08009e90 <_svfiprintf_r>:
 8009e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e94:	4698      	mov	r8, r3
 8009e96:	898b      	ldrh	r3, [r1, #12]
 8009e98:	4607      	mov	r7, r0
 8009e9a:	061b      	lsls	r3, r3, #24
 8009e9c:	460d      	mov	r5, r1
 8009e9e:	4614      	mov	r4, r2
 8009ea0:	b09d      	sub	sp, #116	@ 0x74
 8009ea2:	d510      	bpl.n	8009ec6 <_svfiprintf_r+0x36>
 8009ea4:	690b      	ldr	r3, [r1, #16]
 8009ea6:	b973      	cbnz	r3, 8009ec6 <_svfiprintf_r+0x36>
 8009ea8:	2140      	movs	r1, #64	@ 0x40
 8009eaa:	f7ff fb8f 	bl	80095cc <_malloc_r>
 8009eae:	6028      	str	r0, [r5, #0]
 8009eb0:	6128      	str	r0, [r5, #16]
 8009eb2:	b930      	cbnz	r0, 8009ec2 <_svfiprintf_r+0x32>
 8009eb4:	230c      	movs	r3, #12
 8009eb6:	603b      	str	r3, [r7, #0]
 8009eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ebc:	b01d      	add	sp, #116	@ 0x74
 8009ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ec2:	2340      	movs	r3, #64	@ 0x40
 8009ec4:	616b      	str	r3, [r5, #20]
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009eca:	2320      	movs	r3, #32
 8009ecc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ed0:	2330      	movs	r3, #48	@ 0x30
 8009ed2:	f04f 0901 	mov.w	r9, #1
 8009ed6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009eda:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a074 <_svfiprintf_r+0x1e4>
 8009ede:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ee2:	4623      	mov	r3, r4
 8009ee4:	469a      	mov	sl, r3
 8009ee6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009eea:	b10a      	cbz	r2, 8009ef0 <_svfiprintf_r+0x60>
 8009eec:	2a25      	cmp	r2, #37	@ 0x25
 8009eee:	d1f9      	bne.n	8009ee4 <_svfiprintf_r+0x54>
 8009ef0:	ebba 0b04 	subs.w	fp, sl, r4
 8009ef4:	d00b      	beq.n	8009f0e <_svfiprintf_r+0x7e>
 8009ef6:	465b      	mov	r3, fp
 8009ef8:	4622      	mov	r2, r4
 8009efa:	4629      	mov	r1, r5
 8009efc:	4638      	mov	r0, r7
 8009efe:	f7ff ff6b 	bl	8009dd8 <__ssputs_r>
 8009f02:	3001      	adds	r0, #1
 8009f04:	f000 80a7 	beq.w	800a056 <_svfiprintf_r+0x1c6>
 8009f08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f0a:	445a      	add	r2, fp
 8009f0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f0e:	f89a 3000 	ldrb.w	r3, [sl]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	f000 809f 	beq.w	800a056 <_svfiprintf_r+0x1c6>
 8009f18:	2300      	movs	r3, #0
 8009f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f22:	f10a 0a01 	add.w	sl, sl, #1
 8009f26:	9304      	str	r3, [sp, #16]
 8009f28:	9307      	str	r3, [sp, #28]
 8009f2a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009f2e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f30:	4654      	mov	r4, sl
 8009f32:	2205      	movs	r2, #5
 8009f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f38:	484e      	ldr	r0, [pc, #312]	@ (800a074 <_svfiprintf_r+0x1e4>)
 8009f3a:	f7fe fc3e 	bl	80087ba <memchr>
 8009f3e:	9a04      	ldr	r2, [sp, #16]
 8009f40:	b9d8      	cbnz	r0, 8009f7a <_svfiprintf_r+0xea>
 8009f42:	06d0      	lsls	r0, r2, #27
 8009f44:	bf44      	itt	mi
 8009f46:	2320      	movmi	r3, #32
 8009f48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f4c:	0711      	lsls	r1, r2, #28
 8009f4e:	bf44      	itt	mi
 8009f50:	232b      	movmi	r3, #43	@ 0x2b
 8009f52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f56:	f89a 3000 	ldrb.w	r3, [sl]
 8009f5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f5c:	d015      	beq.n	8009f8a <_svfiprintf_r+0xfa>
 8009f5e:	4654      	mov	r4, sl
 8009f60:	2000      	movs	r0, #0
 8009f62:	f04f 0c0a 	mov.w	ip, #10
 8009f66:	9a07      	ldr	r2, [sp, #28]
 8009f68:	4621      	mov	r1, r4
 8009f6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f6e:	3b30      	subs	r3, #48	@ 0x30
 8009f70:	2b09      	cmp	r3, #9
 8009f72:	d94b      	bls.n	800a00c <_svfiprintf_r+0x17c>
 8009f74:	b1b0      	cbz	r0, 8009fa4 <_svfiprintf_r+0x114>
 8009f76:	9207      	str	r2, [sp, #28]
 8009f78:	e014      	b.n	8009fa4 <_svfiprintf_r+0x114>
 8009f7a:	eba0 0308 	sub.w	r3, r0, r8
 8009f7e:	fa09 f303 	lsl.w	r3, r9, r3
 8009f82:	4313      	orrs	r3, r2
 8009f84:	46a2      	mov	sl, r4
 8009f86:	9304      	str	r3, [sp, #16]
 8009f88:	e7d2      	b.n	8009f30 <_svfiprintf_r+0xa0>
 8009f8a:	9b03      	ldr	r3, [sp, #12]
 8009f8c:	1d19      	adds	r1, r3, #4
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	9103      	str	r1, [sp, #12]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	bfbb      	ittet	lt
 8009f96:	425b      	neglt	r3, r3
 8009f98:	f042 0202 	orrlt.w	r2, r2, #2
 8009f9c:	9307      	strge	r3, [sp, #28]
 8009f9e:	9307      	strlt	r3, [sp, #28]
 8009fa0:	bfb8      	it	lt
 8009fa2:	9204      	strlt	r2, [sp, #16]
 8009fa4:	7823      	ldrb	r3, [r4, #0]
 8009fa6:	2b2e      	cmp	r3, #46	@ 0x2e
 8009fa8:	d10a      	bne.n	8009fc0 <_svfiprintf_r+0x130>
 8009faa:	7863      	ldrb	r3, [r4, #1]
 8009fac:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fae:	d132      	bne.n	800a016 <_svfiprintf_r+0x186>
 8009fb0:	9b03      	ldr	r3, [sp, #12]
 8009fb2:	3402      	adds	r4, #2
 8009fb4:	1d1a      	adds	r2, r3, #4
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	9203      	str	r2, [sp, #12]
 8009fba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009fbe:	9305      	str	r3, [sp, #20]
 8009fc0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a078 <_svfiprintf_r+0x1e8>
 8009fc4:	2203      	movs	r2, #3
 8009fc6:	4650      	mov	r0, sl
 8009fc8:	7821      	ldrb	r1, [r4, #0]
 8009fca:	f7fe fbf6 	bl	80087ba <memchr>
 8009fce:	b138      	cbz	r0, 8009fe0 <_svfiprintf_r+0x150>
 8009fd0:	2240      	movs	r2, #64	@ 0x40
 8009fd2:	9b04      	ldr	r3, [sp, #16]
 8009fd4:	eba0 000a 	sub.w	r0, r0, sl
 8009fd8:	4082      	lsls	r2, r0
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	3401      	adds	r4, #1
 8009fde:	9304      	str	r3, [sp, #16]
 8009fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fe4:	2206      	movs	r2, #6
 8009fe6:	4825      	ldr	r0, [pc, #148]	@ (800a07c <_svfiprintf_r+0x1ec>)
 8009fe8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009fec:	f7fe fbe5 	bl	80087ba <memchr>
 8009ff0:	2800      	cmp	r0, #0
 8009ff2:	d036      	beq.n	800a062 <_svfiprintf_r+0x1d2>
 8009ff4:	4b22      	ldr	r3, [pc, #136]	@ (800a080 <_svfiprintf_r+0x1f0>)
 8009ff6:	bb1b      	cbnz	r3, 800a040 <_svfiprintf_r+0x1b0>
 8009ff8:	9b03      	ldr	r3, [sp, #12]
 8009ffa:	3307      	adds	r3, #7
 8009ffc:	f023 0307 	bic.w	r3, r3, #7
 800a000:	3308      	adds	r3, #8
 800a002:	9303      	str	r3, [sp, #12]
 800a004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a006:	4433      	add	r3, r6
 800a008:	9309      	str	r3, [sp, #36]	@ 0x24
 800a00a:	e76a      	b.n	8009ee2 <_svfiprintf_r+0x52>
 800a00c:	460c      	mov	r4, r1
 800a00e:	2001      	movs	r0, #1
 800a010:	fb0c 3202 	mla	r2, ip, r2, r3
 800a014:	e7a8      	b.n	8009f68 <_svfiprintf_r+0xd8>
 800a016:	2300      	movs	r3, #0
 800a018:	f04f 0c0a 	mov.w	ip, #10
 800a01c:	4619      	mov	r1, r3
 800a01e:	3401      	adds	r4, #1
 800a020:	9305      	str	r3, [sp, #20]
 800a022:	4620      	mov	r0, r4
 800a024:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a028:	3a30      	subs	r2, #48	@ 0x30
 800a02a:	2a09      	cmp	r2, #9
 800a02c:	d903      	bls.n	800a036 <_svfiprintf_r+0x1a6>
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d0c6      	beq.n	8009fc0 <_svfiprintf_r+0x130>
 800a032:	9105      	str	r1, [sp, #20]
 800a034:	e7c4      	b.n	8009fc0 <_svfiprintf_r+0x130>
 800a036:	4604      	mov	r4, r0
 800a038:	2301      	movs	r3, #1
 800a03a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a03e:	e7f0      	b.n	800a022 <_svfiprintf_r+0x192>
 800a040:	ab03      	add	r3, sp, #12
 800a042:	9300      	str	r3, [sp, #0]
 800a044:	462a      	mov	r2, r5
 800a046:	4638      	mov	r0, r7
 800a048:	4b0e      	ldr	r3, [pc, #56]	@ (800a084 <_svfiprintf_r+0x1f4>)
 800a04a:	a904      	add	r1, sp, #16
 800a04c:	f7fd fc8e 	bl	800796c <_printf_float>
 800a050:	1c42      	adds	r2, r0, #1
 800a052:	4606      	mov	r6, r0
 800a054:	d1d6      	bne.n	800a004 <_svfiprintf_r+0x174>
 800a056:	89ab      	ldrh	r3, [r5, #12]
 800a058:	065b      	lsls	r3, r3, #25
 800a05a:	f53f af2d 	bmi.w	8009eb8 <_svfiprintf_r+0x28>
 800a05e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a060:	e72c      	b.n	8009ebc <_svfiprintf_r+0x2c>
 800a062:	ab03      	add	r3, sp, #12
 800a064:	9300      	str	r3, [sp, #0]
 800a066:	462a      	mov	r2, r5
 800a068:	4638      	mov	r0, r7
 800a06a:	4b06      	ldr	r3, [pc, #24]	@ (800a084 <_svfiprintf_r+0x1f4>)
 800a06c:	a904      	add	r1, sp, #16
 800a06e:	f7fd ff1b 	bl	8007ea8 <_printf_i>
 800a072:	e7ed      	b.n	800a050 <_svfiprintf_r+0x1c0>
 800a074:	0800b98b 	.word	0x0800b98b
 800a078:	0800b991 	.word	0x0800b991
 800a07c:	0800b995 	.word	0x0800b995
 800a080:	0800796d 	.word	0x0800796d
 800a084:	08009dd9 	.word	0x08009dd9

0800a088 <__sfputc_r>:
 800a088:	6893      	ldr	r3, [r2, #8]
 800a08a:	b410      	push	{r4}
 800a08c:	3b01      	subs	r3, #1
 800a08e:	2b00      	cmp	r3, #0
 800a090:	6093      	str	r3, [r2, #8]
 800a092:	da07      	bge.n	800a0a4 <__sfputc_r+0x1c>
 800a094:	6994      	ldr	r4, [r2, #24]
 800a096:	42a3      	cmp	r3, r4
 800a098:	db01      	blt.n	800a09e <__sfputc_r+0x16>
 800a09a:	290a      	cmp	r1, #10
 800a09c:	d102      	bne.n	800a0a4 <__sfputc_r+0x1c>
 800a09e:	bc10      	pop	{r4}
 800a0a0:	f7fe b9ed 	b.w	800847e <__swbuf_r>
 800a0a4:	6813      	ldr	r3, [r2, #0]
 800a0a6:	1c58      	adds	r0, r3, #1
 800a0a8:	6010      	str	r0, [r2, #0]
 800a0aa:	7019      	strb	r1, [r3, #0]
 800a0ac:	4608      	mov	r0, r1
 800a0ae:	bc10      	pop	{r4}
 800a0b0:	4770      	bx	lr

0800a0b2 <__sfputs_r>:
 800a0b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0b4:	4606      	mov	r6, r0
 800a0b6:	460f      	mov	r7, r1
 800a0b8:	4614      	mov	r4, r2
 800a0ba:	18d5      	adds	r5, r2, r3
 800a0bc:	42ac      	cmp	r4, r5
 800a0be:	d101      	bne.n	800a0c4 <__sfputs_r+0x12>
 800a0c0:	2000      	movs	r0, #0
 800a0c2:	e007      	b.n	800a0d4 <__sfputs_r+0x22>
 800a0c4:	463a      	mov	r2, r7
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0cc:	f7ff ffdc 	bl	800a088 <__sfputc_r>
 800a0d0:	1c43      	adds	r3, r0, #1
 800a0d2:	d1f3      	bne.n	800a0bc <__sfputs_r+0xa>
 800a0d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a0d8 <_vfiprintf_r>:
 800a0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0dc:	460d      	mov	r5, r1
 800a0de:	4614      	mov	r4, r2
 800a0e0:	4698      	mov	r8, r3
 800a0e2:	4606      	mov	r6, r0
 800a0e4:	b09d      	sub	sp, #116	@ 0x74
 800a0e6:	b118      	cbz	r0, 800a0f0 <_vfiprintf_r+0x18>
 800a0e8:	6a03      	ldr	r3, [r0, #32]
 800a0ea:	b90b      	cbnz	r3, 800a0f0 <_vfiprintf_r+0x18>
 800a0ec:	f7fe f886 	bl	80081fc <__sinit>
 800a0f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a0f2:	07d9      	lsls	r1, r3, #31
 800a0f4:	d405      	bmi.n	800a102 <_vfiprintf_r+0x2a>
 800a0f6:	89ab      	ldrh	r3, [r5, #12]
 800a0f8:	059a      	lsls	r2, r3, #22
 800a0fa:	d402      	bmi.n	800a102 <_vfiprintf_r+0x2a>
 800a0fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a0fe:	f7fe fb5a 	bl	80087b6 <__retarget_lock_acquire_recursive>
 800a102:	89ab      	ldrh	r3, [r5, #12]
 800a104:	071b      	lsls	r3, r3, #28
 800a106:	d501      	bpl.n	800a10c <_vfiprintf_r+0x34>
 800a108:	692b      	ldr	r3, [r5, #16]
 800a10a:	b99b      	cbnz	r3, 800a134 <_vfiprintf_r+0x5c>
 800a10c:	4629      	mov	r1, r5
 800a10e:	4630      	mov	r0, r6
 800a110:	f7fe f9f4 	bl	80084fc <__swsetup_r>
 800a114:	b170      	cbz	r0, 800a134 <_vfiprintf_r+0x5c>
 800a116:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a118:	07dc      	lsls	r4, r3, #31
 800a11a:	d504      	bpl.n	800a126 <_vfiprintf_r+0x4e>
 800a11c:	f04f 30ff 	mov.w	r0, #4294967295
 800a120:	b01d      	add	sp, #116	@ 0x74
 800a122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a126:	89ab      	ldrh	r3, [r5, #12]
 800a128:	0598      	lsls	r0, r3, #22
 800a12a:	d4f7      	bmi.n	800a11c <_vfiprintf_r+0x44>
 800a12c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a12e:	f7fe fb43 	bl	80087b8 <__retarget_lock_release_recursive>
 800a132:	e7f3      	b.n	800a11c <_vfiprintf_r+0x44>
 800a134:	2300      	movs	r3, #0
 800a136:	9309      	str	r3, [sp, #36]	@ 0x24
 800a138:	2320      	movs	r3, #32
 800a13a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a13e:	2330      	movs	r3, #48	@ 0x30
 800a140:	f04f 0901 	mov.w	r9, #1
 800a144:	f8cd 800c 	str.w	r8, [sp, #12]
 800a148:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a2f4 <_vfiprintf_r+0x21c>
 800a14c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a150:	4623      	mov	r3, r4
 800a152:	469a      	mov	sl, r3
 800a154:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a158:	b10a      	cbz	r2, 800a15e <_vfiprintf_r+0x86>
 800a15a:	2a25      	cmp	r2, #37	@ 0x25
 800a15c:	d1f9      	bne.n	800a152 <_vfiprintf_r+0x7a>
 800a15e:	ebba 0b04 	subs.w	fp, sl, r4
 800a162:	d00b      	beq.n	800a17c <_vfiprintf_r+0xa4>
 800a164:	465b      	mov	r3, fp
 800a166:	4622      	mov	r2, r4
 800a168:	4629      	mov	r1, r5
 800a16a:	4630      	mov	r0, r6
 800a16c:	f7ff ffa1 	bl	800a0b2 <__sfputs_r>
 800a170:	3001      	adds	r0, #1
 800a172:	f000 80a7 	beq.w	800a2c4 <_vfiprintf_r+0x1ec>
 800a176:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a178:	445a      	add	r2, fp
 800a17a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a17c:	f89a 3000 	ldrb.w	r3, [sl]
 800a180:	2b00      	cmp	r3, #0
 800a182:	f000 809f 	beq.w	800a2c4 <_vfiprintf_r+0x1ec>
 800a186:	2300      	movs	r3, #0
 800a188:	f04f 32ff 	mov.w	r2, #4294967295
 800a18c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a190:	f10a 0a01 	add.w	sl, sl, #1
 800a194:	9304      	str	r3, [sp, #16]
 800a196:	9307      	str	r3, [sp, #28]
 800a198:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a19c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a19e:	4654      	mov	r4, sl
 800a1a0:	2205      	movs	r2, #5
 800a1a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1a6:	4853      	ldr	r0, [pc, #332]	@ (800a2f4 <_vfiprintf_r+0x21c>)
 800a1a8:	f7fe fb07 	bl	80087ba <memchr>
 800a1ac:	9a04      	ldr	r2, [sp, #16]
 800a1ae:	b9d8      	cbnz	r0, 800a1e8 <_vfiprintf_r+0x110>
 800a1b0:	06d1      	lsls	r1, r2, #27
 800a1b2:	bf44      	itt	mi
 800a1b4:	2320      	movmi	r3, #32
 800a1b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a1ba:	0713      	lsls	r3, r2, #28
 800a1bc:	bf44      	itt	mi
 800a1be:	232b      	movmi	r3, #43	@ 0x2b
 800a1c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a1c4:	f89a 3000 	ldrb.w	r3, [sl]
 800a1c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1ca:	d015      	beq.n	800a1f8 <_vfiprintf_r+0x120>
 800a1cc:	4654      	mov	r4, sl
 800a1ce:	2000      	movs	r0, #0
 800a1d0:	f04f 0c0a 	mov.w	ip, #10
 800a1d4:	9a07      	ldr	r2, [sp, #28]
 800a1d6:	4621      	mov	r1, r4
 800a1d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1dc:	3b30      	subs	r3, #48	@ 0x30
 800a1de:	2b09      	cmp	r3, #9
 800a1e0:	d94b      	bls.n	800a27a <_vfiprintf_r+0x1a2>
 800a1e2:	b1b0      	cbz	r0, 800a212 <_vfiprintf_r+0x13a>
 800a1e4:	9207      	str	r2, [sp, #28]
 800a1e6:	e014      	b.n	800a212 <_vfiprintf_r+0x13a>
 800a1e8:	eba0 0308 	sub.w	r3, r0, r8
 800a1ec:	fa09 f303 	lsl.w	r3, r9, r3
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	46a2      	mov	sl, r4
 800a1f4:	9304      	str	r3, [sp, #16]
 800a1f6:	e7d2      	b.n	800a19e <_vfiprintf_r+0xc6>
 800a1f8:	9b03      	ldr	r3, [sp, #12]
 800a1fa:	1d19      	adds	r1, r3, #4
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	9103      	str	r1, [sp, #12]
 800a200:	2b00      	cmp	r3, #0
 800a202:	bfbb      	ittet	lt
 800a204:	425b      	neglt	r3, r3
 800a206:	f042 0202 	orrlt.w	r2, r2, #2
 800a20a:	9307      	strge	r3, [sp, #28]
 800a20c:	9307      	strlt	r3, [sp, #28]
 800a20e:	bfb8      	it	lt
 800a210:	9204      	strlt	r2, [sp, #16]
 800a212:	7823      	ldrb	r3, [r4, #0]
 800a214:	2b2e      	cmp	r3, #46	@ 0x2e
 800a216:	d10a      	bne.n	800a22e <_vfiprintf_r+0x156>
 800a218:	7863      	ldrb	r3, [r4, #1]
 800a21a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a21c:	d132      	bne.n	800a284 <_vfiprintf_r+0x1ac>
 800a21e:	9b03      	ldr	r3, [sp, #12]
 800a220:	3402      	adds	r4, #2
 800a222:	1d1a      	adds	r2, r3, #4
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	9203      	str	r2, [sp, #12]
 800a228:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a22c:	9305      	str	r3, [sp, #20]
 800a22e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a2f8 <_vfiprintf_r+0x220>
 800a232:	2203      	movs	r2, #3
 800a234:	4650      	mov	r0, sl
 800a236:	7821      	ldrb	r1, [r4, #0]
 800a238:	f7fe fabf 	bl	80087ba <memchr>
 800a23c:	b138      	cbz	r0, 800a24e <_vfiprintf_r+0x176>
 800a23e:	2240      	movs	r2, #64	@ 0x40
 800a240:	9b04      	ldr	r3, [sp, #16]
 800a242:	eba0 000a 	sub.w	r0, r0, sl
 800a246:	4082      	lsls	r2, r0
 800a248:	4313      	orrs	r3, r2
 800a24a:	3401      	adds	r4, #1
 800a24c:	9304      	str	r3, [sp, #16]
 800a24e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a252:	2206      	movs	r2, #6
 800a254:	4829      	ldr	r0, [pc, #164]	@ (800a2fc <_vfiprintf_r+0x224>)
 800a256:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a25a:	f7fe faae 	bl	80087ba <memchr>
 800a25e:	2800      	cmp	r0, #0
 800a260:	d03f      	beq.n	800a2e2 <_vfiprintf_r+0x20a>
 800a262:	4b27      	ldr	r3, [pc, #156]	@ (800a300 <_vfiprintf_r+0x228>)
 800a264:	bb1b      	cbnz	r3, 800a2ae <_vfiprintf_r+0x1d6>
 800a266:	9b03      	ldr	r3, [sp, #12]
 800a268:	3307      	adds	r3, #7
 800a26a:	f023 0307 	bic.w	r3, r3, #7
 800a26e:	3308      	adds	r3, #8
 800a270:	9303      	str	r3, [sp, #12]
 800a272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a274:	443b      	add	r3, r7
 800a276:	9309      	str	r3, [sp, #36]	@ 0x24
 800a278:	e76a      	b.n	800a150 <_vfiprintf_r+0x78>
 800a27a:	460c      	mov	r4, r1
 800a27c:	2001      	movs	r0, #1
 800a27e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a282:	e7a8      	b.n	800a1d6 <_vfiprintf_r+0xfe>
 800a284:	2300      	movs	r3, #0
 800a286:	f04f 0c0a 	mov.w	ip, #10
 800a28a:	4619      	mov	r1, r3
 800a28c:	3401      	adds	r4, #1
 800a28e:	9305      	str	r3, [sp, #20]
 800a290:	4620      	mov	r0, r4
 800a292:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a296:	3a30      	subs	r2, #48	@ 0x30
 800a298:	2a09      	cmp	r2, #9
 800a29a:	d903      	bls.n	800a2a4 <_vfiprintf_r+0x1cc>
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d0c6      	beq.n	800a22e <_vfiprintf_r+0x156>
 800a2a0:	9105      	str	r1, [sp, #20]
 800a2a2:	e7c4      	b.n	800a22e <_vfiprintf_r+0x156>
 800a2a4:	4604      	mov	r4, r0
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2ac:	e7f0      	b.n	800a290 <_vfiprintf_r+0x1b8>
 800a2ae:	ab03      	add	r3, sp, #12
 800a2b0:	9300      	str	r3, [sp, #0]
 800a2b2:	462a      	mov	r2, r5
 800a2b4:	4630      	mov	r0, r6
 800a2b6:	4b13      	ldr	r3, [pc, #76]	@ (800a304 <_vfiprintf_r+0x22c>)
 800a2b8:	a904      	add	r1, sp, #16
 800a2ba:	f7fd fb57 	bl	800796c <_printf_float>
 800a2be:	4607      	mov	r7, r0
 800a2c0:	1c78      	adds	r0, r7, #1
 800a2c2:	d1d6      	bne.n	800a272 <_vfiprintf_r+0x19a>
 800a2c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a2c6:	07d9      	lsls	r1, r3, #31
 800a2c8:	d405      	bmi.n	800a2d6 <_vfiprintf_r+0x1fe>
 800a2ca:	89ab      	ldrh	r3, [r5, #12]
 800a2cc:	059a      	lsls	r2, r3, #22
 800a2ce:	d402      	bmi.n	800a2d6 <_vfiprintf_r+0x1fe>
 800a2d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a2d2:	f7fe fa71 	bl	80087b8 <__retarget_lock_release_recursive>
 800a2d6:	89ab      	ldrh	r3, [r5, #12]
 800a2d8:	065b      	lsls	r3, r3, #25
 800a2da:	f53f af1f 	bmi.w	800a11c <_vfiprintf_r+0x44>
 800a2de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a2e0:	e71e      	b.n	800a120 <_vfiprintf_r+0x48>
 800a2e2:	ab03      	add	r3, sp, #12
 800a2e4:	9300      	str	r3, [sp, #0]
 800a2e6:	462a      	mov	r2, r5
 800a2e8:	4630      	mov	r0, r6
 800a2ea:	4b06      	ldr	r3, [pc, #24]	@ (800a304 <_vfiprintf_r+0x22c>)
 800a2ec:	a904      	add	r1, sp, #16
 800a2ee:	f7fd fddb 	bl	8007ea8 <_printf_i>
 800a2f2:	e7e4      	b.n	800a2be <_vfiprintf_r+0x1e6>
 800a2f4:	0800b98b 	.word	0x0800b98b
 800a2f8:	0800b991 	.word	0x0800b991
 800a2fc:	0800b995 	.word	0x0800b995
 800a300:	0800796d 	.word	0x0800796d
 800a304:	0800a0b3 	.word	0x0800a0b3

0800a308 <__sflush_r>:
 800a308:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a30e:	0716      	lsls	r6, r2, #28
 800a310:	4605      	mov	r5, r0
 800a312:	460c      	mov	r4, r1
 800a314:	d454      	bmi.n	800a3c0 <__sflush_r+0xb8>
 800a316:	684b      	ldr	r3, [r1, #4]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	dc02      	bgt.n	800a322 <__sflush_r+0x1a>
 800a31c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a31e:	2b00      	cmp	r3, #0
 800a320:	dd48      	ble.n	800a3b4 <__sflush_r+0xac>
 800a322:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a324:	2e00      	cmp	r6, #0
 800a326:	d045      	beq.n	800a3b4 <__sflush_r+0xac>
 800a328:	2300      	movs	r3, #0
 800a32a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a32e:	682f      	ldr	r7, [r5, #0]
 800a330:	6a21      	ldr	r1, [r4, #32]
 800a332:	602b      	str	r3, [r5, #0]
 800a334:	d030      	beq.n	800a398 <__sflush_r+0x90>
 800a336:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a338:	89a3      	ldrh	r3, [r4, #12]
 800a33a:	0759      	lsls	r1, r3, #29
 800a33c:	d505      	bpl.n	800a34a <__sflush_r+0x42>
 800a33e:	6863      	ldr	r3, [r4, #4]
 800a340:	1ad2      	subs	r2, r2, r3
 800a342:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a344:	b10b      	cbz	r3, 800a34a <__sflush_r+0x42>
 800a346:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a348:	1ad2      	subs	r2, r2, r3
 800a34a:	2300      	movs	r3, #0
 800a34c:	4628      	mov	r0, r5
 800a34e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a350:	6a21      	ldr	r1, [r4, #32]
 800a352:	47b0      	blx	r6
 800a354:	1c43      	adds	r3, r0, #1
 800a356:	89a3      	ldrh	r3, [r4, #12]
 800a358:	d106      	bne.n	800a368 <__sflush_r+0x60>
 800a35a:	6829      	ldr	r1, [r5, #0]
 800a35c:	291d      	cmp	r1, #29
 800a35e:	d82b      	bhi.n	800a3b8 <__sflush_r+0xb0>
 800a360:	4a28      	ldr	r2, [pc, #160]	@ (800a404 <__sflush_r+0xfc>)
 800a362:	40ca      	lsrs	r2, r1
 800a364:	07d6      	lsls	r6, r2, #31
 800a366:	d527      	bpl.n	800a3b8 <__sflush_r+0xb0>
 800a368:	2200      	movs	r2, #0
 800a36a:	6062      	str	r2, [r4, #4]
 800a36c:	6922      	ldr	r2, [r4, #16]
 800a36e:	04d9      	lsls	r1, r3, #19
 800a370:	6022      	str	r2, [r4, #0]
 800a372:	d504      	bpl.n	800a37e <__sflush_r+0x76>
 800a374:	1c42      	adds	r2, r0, #1
 800a376:	d101      	bne.n	800a37c <__sflush_r+0x74>
 800a378:	682b      	ldr	r3, [r5, #0]
 800a37a:	b903      	cbnz	r3, 800a37e <__sflush_r+0x76>
 800a37c:	6560      	str	r0, [r4, #84]	@ 0x54
 800a37e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a380:	602f      	str	r7, [r5, #0]
 800a382:	b1b9      	cbz	r1, 800a3b4 <__sflush_r+0xac>
 800a384:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a388:	4299      	cmp	r1, r3
 800a38a:	d002      	beq.n	800a392 <__sflush_r+0x8a>
 800a38c:	4628      	mov	r0, r5
 800a38e:	f7ff f8ab 	bl	80094e8 <_free_r>
 800a392:	2300      	movs	r3, #0
 800a394:	6363      	str	r3, [r4, #52]	@ 0x34
 800a396:	e00d      	b.n	800a3b4 <__sflush_r+0xac>
 800a398:	2301      	movs	r3, #1
 800a39a:	4628      	mov	r0, r5
 800a39c:	47b0      	blx	r6
 800a39e:	4602      	mov	r2, r0
 800a3a0:	1c50      	adds	r0, r2, #1
 800a3a2:	d1c9      	bne.n	800a338 <__sflush_r+0x30>
 800a3a4:	682b      	ldr	r3, [r5, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d0c6      	beq.n	800a338 <__sflush_r+0x30>
 800a3aa:	2b1d      	cmp	r3, #29
 800a3ac:	d001      	beq.n	800a3b2 <__sflush_r+0xaa>
 800a3ae:	2b16      	cmp	r3, #22
 800a3b0:	d11d      	bne.n	800a3ee <__sflush_r+0xe6>
 800a3b2:	602f      	str	r7, [r5, #0]
 800a3b4:	2000      	movs	r0, #0
 800a3b6:	e021      	b.n	800a3fc <__sflush_r+0xf4>
 800a3b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3bc:	b21b      	sxth	r3, r3
 800a3be:	e01a      	b.n	800a3f6 <__sflush_r+0xee>
 800a3c0:	690f      	ldr	r7, [r1, #16]
 800a3c2:	2f00      	cmp	r7, #0
 800a3c4:	d0f6      	beq.n	800a3b4 <__sflush_r+0xac>
 800a3c6:	0793      	lsls	r3, r2, #30
 800a3c8:	bf18      	it	ne
 800a3ca:	2300      	movne	r3, #0
 800a3cc:	680e      	ldr	r6, [r1, #0]
 800a3ce:	bf08      	it	eq
 800a3d0:	694b      	ldreq	r3, [r1, #20]
 800a3d2:	1bf6      	subs	r6, r6, r7
 800a3d4:	600f      	str	r7, [r1, #0]
 800a3d6:	608b      	str	r3, [r1, #8]
 800a3d8:	2e00      	cmp	r6, #0
 800a3da:	ddeb      	ble.n	800a3b4 <__sflush_r+0xac>
 800a3dc:	4633      	mov	r3, r6
 800a3de:	463a      	mov	r2, r7
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	6a21      	ldr	r1, [r4, #32]
 800a3e4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a3e8:	47e0      	blx	ip
 800a3ea:	2800      	cmp	r0, #0
 800a3ec:	dc07      	bgt.n	800a3fe <__sflush_r+0xf6>
 800a3ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a3fa:	81a3      	strh	r3, [r4, #12]
 800a3fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3fe:	4407      	add	r7, r0
 800a400:	1a36      	subs	r6, r6, r0
 800a402:	e7e9      	b.n	800a3d8 <__sflush_r+0xd0>
 800a404:	20400001 	.word	0x20400001

0800a408 <_fflush_r>:
 800a408:	b538      	push	{r3, r4, r5, lr}
 800a40a:	690b      	ldr	r3, [r1, #16]
 800a40c:	4605      	mov	r5, r0
 800a40e:	460c      	mov	r4, r1
 800a410:	b913      	cbnz	r3, 800a418 <_fflush_r+0x10>
 800a412:	2500      	movs	r5, #0
 800a414:	4628      	mov	r0, r5
 800a416:	bd38      	pop	{r3, r4, r5, pc}
 800a418:	b118      	cbz	r0, 800a422 <_fflush_r+0x1a>
 800a41a:	6a03      	ldr	r3, [r0, #32]
 800a41c:	b90b      	cbnz	r3, 800a422 <_fflush_r+0x1a>
 800a41e:	f7fd feed 	bl	80081fc <__sinit>
 800a422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d0f3      	beq.n	800a412 <_fflush_r+0xa>
 800a42a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a42c:	07d0      	lsls	r0, r2, #31
 800a42e:	d404      	bmi.n	800a43a <_fflush_r+0x32>
 800a430:	0599      	lsls	r1, r3, #22
 800a432:	d402      	bmi.n	800a43a <_fflush_r+0x32>
 800a434:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a436:	f7fe f9be 	bl	80087b6 <__retarget_lock_acquire_recursive>
 800a43a:	4628      	mov	r0, r5
 800a43c:	4621      	mov	r1, r4
 800a43e:	f7ff ff63 	bl	800a308 <__sflush_r>
 800a442:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a444:	4605      	mov	r5, r0
 800a446:	07da      	lsls	r2, r3, #31
 800a448:	d4e4      	bmi.n	800a414 <_fflush_r+0xc>
 800a44a:	89a3      	ldrh	r3, [r4, #12]
 800a44c:	059b      	lsls	r3, r3, #22
 800a44e:	d4e1      	bmi.n	800a414 <_fflush_r+0xc>
 800a450:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a452:	f7fe f9b1 	bl	80087b8 <__retarget_lock_release_recursive>
 800a456:	e7dd      	b.n	800a414 <_fflush_r+0xc>

0800a458 <fiprintf>:
 800a458:	b40e      	push	{r1, r2, r3}
 800a45a:	b503      	push	{r0, r1, lr}
 800a45c:	4601      	mov	r1, r0
 800a45e:	ab03      	add	r3, sp, #12
 800a460:	4805      	ldr	r0, [pc, #20]	@ (800a478 <fiprintf+0x20>)
 800a462:	f853 2b04 	ldr.w	r2, [r3], #4
 800a466:	6800      	ldr	r0, [r0, #0]
 800a468:	9301      	str	r3, [sp, #4]
 800a46a:	f7ff fe35 	bl	800a0d8 <_vfiprintf_r>
 800a46e:	b002      	add	sp, #8
 800a470:	f85d eb04 	ldr.w	lr, [sp], #4
 800a474:	b003      	add	sp, #12
 800a476:	4770      	bx	lr
 800a478:	200000c0 	.word	0x200000c0

0800a47c <__swhatbuf_r>:
 800a47c:	b570      	push	{r4, r5, r6, lr}
 800a47e:	460c      	mov	r4, r1
 800a480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a484:	4615      	mov	r5, r2
 800a486:	2900      	cmp	r1, #0
 800a488:	461e      	mov	r6, r3
 800a48a:	b096      	sub	sp, #88	@ 0x58
 800a48c:	da0c      	bge.n	800a4a8 <__swhatbuf_r+0x2c>
 800a48e:	89a3      	ldrh	r3, [r4, #12]
 800a490:	2100      	movs	r1, #0
 800a492:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a496:	bf14      	ite	ne
 800a498:	2340      	movne	r3, #64	@ 0x40
 800a49a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a49e:	2000      	movs	r0, #0
 800a4a0:	6031      	str	r1, [r6, #0]
 800a4a2:	602b      	str	r3, [r5, #0]
 800a4a4:	b016      	add	sp, #88	@ 0x58
 800a4a6:	bd70      	pop	{r4, r5, r6, pc}
 800a4a8:	466a      	mov	r2, sp
 800a4aa:	f000 f863 	bl	800a574 <_fstat_r>
 800a4ae:	2800      	cmp	r0, #0
 800a4b0:	dbed      	blt.n	800a48e <__swhatbuf_r+0x12>
 800a4b2:	9901      	ldr	r1, [sp, #4]
 800a4b4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a4b8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a4bc:	4259      	negs	r1, r3
 800a4be:	4159      	adcs	r1, r3
 800a4c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4c4:	e7eb      	b.n	800a49e <__swhatbuf_r+0x22>

0800a4c6 <__smakebuf_r>:
 800a4c6:	898b      	ldrh	r3, [r1, #12]
 800a4c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4ca:	079d      	lsls	r5, r3, #30
 800a4cc:	4606      	mov	r6, r0
 800a4ce:	460c      	mov	r4, r1
 800a4d0:	d507      	bpl.n	800a4e2 <__smakebuf_r+0x1c>
 800a4d2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a4d6:	6023      	str	r3, [r4, #0]
 800a4d8:	6123      	str	r3, [r4, #16]
 800a4da:	2301      	movs	r3, #1
 800a4dc:	6163      	str	r3, [r4, #20]
 800a4de:	b003      	add	sp, #12
 800a4e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4e2:	466a      	mov	r2, sp
 800a4e4:	ab01      	add	r3, sp, #4
 800a4e6:	f7ff ffc9 	bl	800a47c <__swhatbuf_r>
 800a4ea:	9f00      	ldr	r7, [sp, #0]
 800a4ec:	4605      	mov	r5, r0
 800a4ee:	4639      	mov	r1, r7
 800a4f0:	4630      	mov	r0, r6
 800a4f2:	f7ff f86b 	bl	80095cc <_malloc_r>
 800a4f6:	b948      	cbnz	r0, 800a50c <__smakebuf_r+0x46>
 800a4f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4fc:	059a      	lsls	r2, r3, #22
 800a4fe:	d4ee      	bmi.n	800a4de <__smakebuf_r+0x18>
 800a500:	f023 0303 	bic.w	r3, r3, #3
 800a504:	f043 0302 	orr.w	r3, r3, #2
 800a508:	81a3      	strh	r3, [r4, #12]
 800a50a:	e7e2      	b.n	800a4d2 <__smakebuf_r+0xc>
 800a50c:	89a3      	ldrh	r3, [r4, #12]
 800a50e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a516:	81a3      	strh	r3, [r4, #12]
 800a518:	9b01      	ldr	r3, [sp, #4]
 800a51a:	6020      	str	r0, [r4, #0]
 800a51c:	b15b      	cbz	r3, 800a536 <__smakebuf_r+0x70>
 800a51e:	4630      	mov	r0, r6
 800a520:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a524:	f000 f838 	bl	800a598 <_isatty_r>
 800a528:	b128      	cbz	r0, 800a536 <__smakebuf_r+0x70>
 800a52a:	89a3      	ldrh	r3, [r4, #12]
 800a52c:	f023 0303 	bic.w	r3, r3, #3
 800a530:	f043 0301 	orr.w	r3, r3, #1
 800a534:	81a3      	strh	r3, [r4, #12]
 800a536:	89a3      	ldrh	r3, [r4, #12]
 800a538:	431d      	orrs	r5, r3
 800a53a:	81a5      	strh	r5, [r4, #12]
 800a53c:	e7cf      	b.n	800a4de <__smakebuf_r+0x18>

0800a53e <memmove>:
 800a53e:	4288      	cmp	r0, r1
 800a540:	b510      	push	{r4, lr}
 800a542:	eb01 0402 	add.w	r4, r1, r2
 800a546:	d902      	bls.n	800a54e <memmove+0x10>
 800a548:	4284      	cmp	r4, r0
 800a54a:	4623      	mov	r3, r4
 800a54c:	d807      	bhi.n	800a55e <memmove+0x20>
 800a54e:	1e43      	subs	r3, r0, #1
 800a550:	42a1      	cmp	r1, r4
 800a552:	d008      	beq.n	800a566 <memmove+0x28>
 800a554:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a558:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a55c:	e7f8      	b.n	800a550 <memmove+0x12>
 800a55e:	4601      	mov	r1, r0
 800a560:	4402      	add	r2, r0
 800a562:	428a      	cmp	r2, r1
 800a564:	d100      	bne.n	800a568 <memmove+0x2a>
 800a566:	bd10      	pop	{r4, pc}
 800a568:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a56c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a570:	e7f7      	b.n	800a562 <memmove+0x24>
	...

0800a574 <_fstat_r>:
 800a574:	b538      	push	{r3, r4, r5, lr}
 800a576:	2300      	movs	r3, #0
 800a578:	4d06      	ldr	r5, [pc, #24]	@ (800a594 <_fstat_r+0x20>)
 800a57a:	4604      	mov	r4, r0
 800a57c:	4608      	mov	r0, r1
 800a57e:	4611      	mov	r1, r2
 800a580:	602b      	str	r3, [r5, #0]
 800a582:	f7f9 fc3b 	bl	8003dfc <_fstat>
 800a586:	1c43      	adds	r3, r0, #1
 800a588:	d102      	bne.n	800a590 <_fstat_r+0x1c>
 800a58a:	682b      	ldr	r3, [r5, #0]
 800a58c:	b103      	cbz	r3, 800a590 <_fstat_r+0x1c>
 800a58e:	6023      	str	r3, [r4, #0]
 800a590:	bd38      	pop	{r3, r4, r5, pc}
 800a592:	bf00      	nop
 800a594:	2000077c 	.word	0x2000077c

0800a598 <_isatty_r>:
 800a598:	b538      	push	{r3, r4, r5, lr}
 800a59a:	2300      	movs	r3, #0
 800a59c:	4d05      	ldr	r5, [pc, #20]	@ (800a5b4 <_isatty_r+0x1c>)
 800a59e:	4604      	mov	r4, r0
 800a5a0:	4608      	mov	r0, r1
 800a5a2:	602b      	str	r3, [r5, #0]
 800a5a4:	f7f9 fc39 	bl	8003e1a <_isatty>
 800a5a8:	1c43      	adds	r3, r0, #1
 800a5aa:	d102      	bne.n	800a5b2 <_isatty_r+0x1a>
 800a5ac:	682b      	ldr	r3, [r5, #0]
 800a5ae:	b103      	cbz	r3, 800a5b2 <_isatty_r+0x1a>
 800a5b0:	6023      	str	r3, [r4, #0]
 800a5b2:	bd38      	pop	{r3, r4, r5, pc}
 800a5b4:	2000077c 	.word	0x2000077c

0800a5b8 <_sbrk_r>:
 800a5b8:	b538      	push	{r3, r4, r5, lr}
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	4d05      	ldr	r5, [pc, #20]	@ (800a5d4 <_sbrk_r+0x1c>)
 800a5be:	4604      	mov	r4, r0
 800a5c0:	4608      	mov	r0, r1
 800a5c2:	602b      	str	r3, [r5, #0]
 800a5c4:	f7f9 fc40 	bl	8003e48 <_sbrk>
 800a5c8:	1c43      	adds	r3, r0, #1
 800a5ca:	d102      	bne.n	800a5d2 <_sbrk_r+0x1a>
 800a5cc:	682b      	ldr	r3, [r5, #0]
 800a5ce:	b103      	cbz	r3, 800a5d2 <_sbrk_r+0x1a>
 800a5d0:	6023      	str	r3, [r4, #0]
 800a5d2:	bd38      	pop	{r3, r4, r5, pc}
 800a5d4:	2000077c 	.word	0x2000077c

0800a5d8 <abort>:
 800a5d8:	2006      	movs	r0, #6
 800a5da:	b508      	push	{r3, lr}
 800a5dc:	f000 f88c 	bl	800a6f8 <raise>
 800a5e0:	2001      	movs	r0, #1
 800a5e2:	f7f9 fbbc 	bl	8003d5e <_exit>

0800a5e6 <_calloc_r>:
 800a5e6:	b570      	push	{r4, r5, r6, lr}
 800a5e8:	fba1 5402 	umull	r5, r4, r1, r2
 800a5ec:	b934      	cbnz	r4, 800a5fc <_calloc_r+0x16>
 800a5ee:	4629      	mov	r1, r5
 800a5f0:	f7fe ffec 	bl	80095cc <_malloc_r>
 800a5f4:	4606      	mov	r6, r0
 800a5f6:	b928      	cbnz	r0, 800a604 <_calloc_r+0x1e>
 800a5f8:	4630      	mov	r0, r6
 800a5fa:	bd70      	pop	{r4, r5, r6, pc}
 800a5fc:	220c      	movs	r2, #12
 800a5fe:	2600      	movs	r6, #0
 800a600:	6002      	str	r2, [r0, #0]
 800a602:	e7f9      	b.n	800a5f8 <_calloc_r+0x12>
 800a604:	462a      	mov	r2, r5
 800a606:	4621      	mov	r1, r4
 800a608:	f7fd ffce 	bl	80085a8 <memset>
 800a60c:	e7f4      	b.n	800a5f8 <_calloc_r+0x12>

0800a60e <__ascii_mbtowc>:
 800a60e:	b082      	sub	sp, #8
 800a610:	b901      	cbnz	r1, 800a614 <__ascii_mbtowc+0x6>
 800a612:	a901      	add	r1, sp, #4
 800a614:	b142      	cbz	r2, 800a628 <__ascii_mbtowc+0x1a>
 800a616:	b14b      	cbz	r3, 800a62c <__ascii_mbtowc+0x1e>
 800a618:	7813      	ldrb	r3, [r2, #0]
 800a61a:	600b      	str	r3, [r1, #0]
 800a61c:	7812      	ldrb	r2, [r2, #0]
 800a61e:	1e10      	subs	r0, r2, #0
 800a620:	bf18      	it	ne
 800a622:	2001      	movne	r0, #1
 800a624:	b002      	add	sp, #8
 800a626:	4770      	bx	lr
 800a628:	4610      	mov	r0, r2
 800a62a:	e7fb      	b.n	800a624 <__ascii_mbtowc+0x16>
 800a62c:	f06f 0001 	mvn.w	r0, #1
 800a630:	e7f8      	b.n	800a624 <__ascii_mbtowc+0x16>

0800a632 <_realloc_r>:
 800a632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a636:	4607      	mov	r7, r0
 800a638:	4614      	mov	r4, r2
 800a63a:	460d      	mov	r5, r1
 800a63c:	b921      	cbnz	r1, 800a648 <_realloc_r+0x16>
 800a63e:	4611      	mov	r1, r2
 800a640:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a644:	f7fe bfc2 	b.w	80095cc <_malloc_r>
 800a648:	b92a      	cbnz	r2, 800a656 <_realloc_r+0x24>
 800a64a:	f7fe ff4d 	bl	80094e8 <_free_r>
 800a64e:	4625      	mov	r5, r4
 800a650:	4628      	mov	r0, r5
 800a652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a656:	f000 f86b 	bl	800a730 <_malloc_usable_size_r>
 800a65a:	4284      	cmp	r4, r0
 800a65c:	4606      	mov	r6, r0
 800a65e:	d802      	bhi.n	800a666 <_realloc_r+0x34>
 800a660:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a664:	d8f4      	bhi.n	800a650 <_realloc_r+0x1e>
 800a666:	4621      	mov	r1, r4
 800a668:	4638      	mov	r0, r7
 800a66a:	f7fe ffaf 	bl	80095cc <_malloc_r>
 800a66e:	4680      	mov	r8, r0
 800a670:	b908      	cbnz	r0, 800a676 <_realloc_r+0x44>
 800a672:	4645      	mov	r5, r8
 800a674:	e7ec      	b.n	800a650 <_realloc_r+0x1e>
 800a676:	42b4      	cmp	r4, r6
 800a678:	4622      	mov	r2, r4
 800a67a:	4629      	mov	r1, r5
 800a67c:	bf28      	it	cs
 800a67e:	4632      	movcs	r2, r6
 800a680:	f7fe f8a9 	bl	80087d6 <memcpy>
 800a684:	4629      	mov	r1, r5
 800a686:	4638      	mov	r0, r7
 800a688:	f7fe ff2e 	bl	80094e8 <_free_r>
 800a68c:	e7f1      	b.n	800a672 <_realloc_r+0x40>

0800a68e <__ascii_wctomb>:
 800a68e:	4603      	mov	r3, r0
 800a690:	4608      	mov	r0, r1
 800a692:	b141      	cbz	r1, 800a6a6 <__ascii_wctomb+0x18>
 800a694:	2aff      	cmp	r2, #255	@ 0xff
 800a696:	d904      	bls.n	800a6a2 <__ascii_wctomb+0x14>
 800a698:	228a      	movs	r2, #138	@ 0x8a
 800a69a:	f04f 30ff 	mov.w	r0, #4294967295
 800a69e:	601a      	str	r2, [r3, #0]
 800a6a0:	4770      	bx	lr
 800a6a2:	2001      	movs	r0, #1
 800a6a4:	700a      	strb	r2, [r1, #0]
 800a6a6:	4770      	bx	lr

0800a6a8 <_raise_r>:
 800a6a8:	291f      	cmp	r1, #31
 800a6aa:	b538      	push	{r3, r4, r5, lr}
 800a6ac:	4605      	mov	r5, r0
 800a6ae:	460c      	mov	r4, r1
 800a6b0:	d904      	bls.n	800a6bc <_raise_r+0x14>
 800a6b2:	2316      	movs	r3, #22
 800a6b4:	6003      	str	r3, [r0, #0]
 800a6b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ba:	bd38      	pop	{r3, r4, r5, pc}
 800a6bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a6be:	b112      	cbz	r2, 800a6c6 <_raise_r+0x1e>
 800a6c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6c4:	b94b      	cbnz	r3, 800a6da <_raise_r+0x32>
 800a6c6:	4628      	mov	r0, r5
 800a6c8:	f000 f830 	bl	800a72c <_getpid_r>
 800a6cc:	4622      	mov	r2, r4
 800a6ce:	4601      	mov	r1, r0
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6d6:	f000 b817 	b.w	800a708 <_kill_r>
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d00a      	beq.n	800a6f4 <_raise_r+0x4c>
 800a6de:	1c59      	adds	r1, r3, #1
 800a6e0:	d103      	bne.n	800a6ea <_raise_r+0x42>
 800a6e2:	2316      	movs	r3, #22
 800a6e4:	6003      	str	r3, [r0, #0]
 800a6e6:	2001      	movs	r0, #1
 800a6e8:	e7e7      	b.n	800a6ba <_raise_r+0x12>
 800a6ea:	2100      	movs	r1, #0
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a6f2:	4798      	blx	r3
 800a6f4:	2000      	movs	r0, #0
 800a6f6:	e7e0      	b.n	800a6ba <_raise_r+0x12>

0800a6f8 <raise>:
 800a6f8:	4b02      	ldr	r3, [pc, #8]	@ (800a704 <raise+0xc>)
 800a6fa:	4601      	mov	r1, r0
 800a6fc:	6818      	ldr	r0, [r3, #0]
 800a6fe:	f7ff bfd3 	b.w	800a6a8 <_raise_r>
 800a702:	bf00      	nop
 800a704:	200000c0 	.word	0x200000c0

0800a708 <_kill_r>:
 800a708:	b538      	push	{r3, r4, r5, lr}
 800a70a:	2300      	movs	r3, #0
 800a70c:	4d06      	ldr	r5, [pc, #24]	@ (800a728 <_kill_r+0x20>)
 800a70e:	4604      	mov	r4, r0
 800a710:	4608      	mov	r0, r1
 800a712:	4611      	mov	r1, r2
 800a714:	602b      	str	r3, [r5, #0]
 800a716:	f7f9 fb12 	bl	8003d3e <_kill>
 800a71a:	1c43      	adds	r3, r0, #1
 800a71c:	d102      	bne.n	800a724 <_kill_r+0x1c>
 800a71e:	682b      	ldr	r3, [r5, #0]
 800a720:	b103      	cbz	r3, 800a724 <_kill_r+0x1c>
 800a722:	6023      	str	r3, [r4, #0]
 800a724:	bd38      	pop	{r3, r4, r5, pc}
 800a726:	bf00      	nop
 800a728:	2000077c 	.word	0x2000077c

0800a72c <_getpid_r>:
 800a72c:	f7f9 bb00 	b.w	8003d30 <_getpid>

0800a730 <_malloc_usable_size_r>:
 800a730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a734:	1f18      	subs	r0, r3, #4
 800a736:	2b00      	cmp	r3, #0
 800a738:	bfbc      	itt	lt
 800a73a:	580b      	ldrlt	r3, [r1, r0]
 800a73c:	18c0      	addlt	r0, r0, r3
 800a73e:	4770      	bx	lr

0800a740 <atan2>:
 800a740:	f000 ba8e 	b.w	800ac60 <__ieee754_atan2>

0800a744 <sqrt>:
 800a744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a746:	4606      	mov	r6, r0
 800a748:	460f      	mov	r7, r1
 800a74a:	f000 f9b5 	bl	800aab8 <__ieee754_sqrt>
 800a74e:	4632      	mov	r2, r6
 800a750:	4604      	mov	r4, r0
 800a752:	460d      	mov	r5, r1
 800a754:	463b      	mov	r3, r7
 800a756:	4630      	mov	r0, r6
 800a758:	4639      	mov	r1, r7
 800a75a:	f7f6 f957 	bl	8000a0c <__aeabi_dcmpun>
 800a75e:	b990      	cbnz	r0, 800a786 <sqrt+0x42>
 800a760:	2200      	movs	r2, #0
 800a762:	2300      	movs	r3, #0
 800a764:	4630      	mov	r0, r6
 800a766:	4639      	mov	r1, r7
 800a768:	f7f6 f928 	bl	80009bc <__aeabi_dcmplt>
 800a76c:	b158      	cbz	r0, 800a786 <sqrt+0x42>
 800a76e:	f7fd fff7 	bl	8008760 <__errno>
 800a772:	2321      	movs	r3, #33	@ 0x21
 800a774:	2200      	movs	r2, #0
 800a776:	6003      	str	r3, [r0, #0]
 800a778:	2300      	movs	r3, #0
 800a77a:	4610      	mov	r0, r2
 800a77c:	4619      	mov	r1, r3
 800a77e:	f7f5 ffd5 	bl	800072c <__aeabi_ddiv>
 800a782:	4604      	mov	r4, r0
 800a784:	460d      	mov	r5, r1
 800a786:	4620      	mov	r0, r4
 800a788:	4629      	mov	r1, r5
 800a78a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a78c:	0000      	movs	r0, r0
	...

0800a790 <atan>:
 800a790:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a794:	4bbc      	ldr	r3, [pc, #752]	@ (800aa88 <atan+0x2f8>)
 800a796:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800a79a:	429e      	cmp	r6, r3
 800a79c:	4604      	mov	r4, r0
 800a79e:	460d      	mov	r5, r1
 800a7a0:	468b      	mov	fp, r1
 800a7a2:	d918      	bls.n	800a7d6 <atan+0x46>
 800a7a4:	4bb9      	ldr	r3, [pc, #740]	@ (800aa8c <atan+0x2fc>)
 800a7a6:	429e      	cmp	r6, r3
 800a7a8:	d801      	bhi.n	800a7ae <atan+0x1e>
 800a7aa:	d109      	bne.n	800a7c0 <atan+0x30>
 800a7ac:	b140      	cbz	r0, 800a7c0 <atan+0x30>
 800a7ae:	4622      	mov	r2, r4
 800a7b0:	462b      	mov	r3, r5
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	4629      	mov	r1, r5
 800a7b6:	f7f5 fcd9 	bl	800016c <__adddf3>
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	460d      	mov	r5, r1
 800a7be:	e006      	b.n	800a7ce <atan+0x3e>
 800a7c0:	f1bb 0f00 	cmp.w	fp, #0
 800a7c4:	f340 8123 	ble.w	800aa0e <atan+0x27e>
 800a7c8:	a593      	add	r5, pc, #588	@ (adr r5, 800aa18 <atan+0x288>)
 800a7ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	4629      	mov	r1, r5
 800a7d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7d6:	4bae      	ldr	r3, [pc, #696]	@ (800aa90 <atan+0x300>)
 800a7d8:	429e      	cmp	r6, r3
 800a7da:	d811      	bhi.n	800a800 <atan+0x70>
 800a7dc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800a7e0:	429e      	cmp	r6, r3
 800a7e2:	d80a      	bhi.n	800a7fa <atan+0x6a>
 800a7e4:	a38e      	add	r3, pc, #568	@ (adr r3, 800aa20 <atan+0x290>)
 800a7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ea:	f7f5 fcbf 	bl	800016c <__adddf3>
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	4ba8      	ldr	r3, [pc, #672]	@ (800aa94 <atan+0x304>)
 800a7f2:	f7f6 f901 	bl	80009f8 <__aeabi_dcmpgt>
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	d1e9      	bne.n	800a7ce <atan+0x3e>
 800a7fa:	f04f 3aff 	mov.w	sl, #4294967295
 800a7fe:	e027      	b.n	800a850 <atan+0xc0>
 800a800:	f000 f956 	bl	800aab0 <fabs>
 800a804:	4ba4      	ldr	r3, [pc, #656]	@ (800aa98 <atan+0x308>)
 800a806:	4604      	mov	r4, r0
 800a808:	429e      	cmp	r6, r3
 800a80a:	460d      	mov	r5, r1
 800a80c:	f200 80b8 	bhi.w	800a980 <atan+0x1f0>
 800a810:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800a814:	429e      	cmp	r6, r3
 800a816:	f200 809c 	bhi.w	800a952 <atan+0x1c2>
 800a81a:	4602      	mov	r2, r0
 800a81c:	460b      	mov	r3, r1
 800a81e:	f7f5 fca5 	bl	800016c <__adddf3>
 800a822:	2200      	movs	r2, #0
 800a824:	4b9b      	ldr	r3, [pc, #620]	@ (800aa94 <atan+0x304>)
 800a826:	f7f5 fc9f 	bl	8000168 <__aeabi_dsub>
 800a82a:	2200      	movs	r2, #0
 800a82c:	4606      	mov	r6, r0
 800a82e:	460f      	mov	r7, r1
 800a830:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a834:	4620      	mov	r0, r4
 800a836:	4629      	mov	r1, r5
 800a838:	f7f5 fc98 	bl	800016c <__adddf3>
 800a83c:	4602      	mov	r2, r0
 800a83e:	460b      	mov	r3, r1
 800a840:	4630      	mov	r0, r6
 800a842:	4639      	mov	r1, r7
 800a844:	f7f5 ff72 	bl	800072c <__aeabi_ddiv>
 800a848:	f04f 0a00 	mov.w	sl, #0
 800a84c:	4604      	mov	r4, r0
 800a84e:	460d      	mov	r5, r1
 800a850:	4622      	mov	r2, r4
 800a852:	462b      	mov	r3, r5
 800a854:	4620      	mov	r0, r4
 800a856:	4629      	mov	r1, r5
 800a858:	f7f5 fe3e 	bl	80004d8 <__aeabi_dmul>
 800a85c:	4602      	mov	r2, r0
 800a85e:	460b      	mov	r3, r1
 800a860:	4680      	mov	r8, r0
 800a862:	4689      	mov	r9, r1
 800a864:	f7f5 fe38 	bl	80004d8 <__aeabi_dmul>
 800a868:	a36f      	add	r3, pc, #444	@ (adr r3, 800aa28 <atan+0x298>)
 800a86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86e:	4606      	mov	r6, r0
 800a870:	460f      	mov	r7, r1
 800a872:	f7f5 fe31 	bl	80004d8 <__aeabi_dmul>
 800a876:	a36e      	add	r3, pc, #440	@ (adr r3, 800aa30 <atan+0x2a0>)
 800a878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87c:	f7f5 fc76 	bl	800016c <__adddf3>
 800a880:	4632      	mov	r2, r6
 800a882:	463b      	mov	r3, r7
 800a884:	f7f5 fe28 	bl	80004d8 <__aeabi_dmul>
 800a888:	a36b      	add	r3, pc, #428	@ (adr r3, 800aa38 <atan+0x2a8>)
 800a88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88e:	f7f5 fc6d 	bl	800016c <__adddf3>
 800a892:	4632      	mov	r2, r6
 800a894:	463b      	mov	r3, r7
 800a896:	f7f5 fe1f 	bl	80004d8 <__aeabi_dmul>
 800a89a:	a369      	add	r3, pc, #420	@ (adr r3, 800aa40 <atan+0x2b0>)
 800a89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a0:	f7f5 fc64 	bl	800016c <__adddf3>
 800a8a4:	4632      	mov	r2, r6
 800a8a6:	463b      	mov	r3, r7
 800a8a8:	f7f5 fe16 	bl	80004d8 <__aeabi_dmul>
 800a8ac:	a366      	add	r3, pc, #408	@ (adr r3, 800aa48 <atan+0x2b8>)
 800a8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b2:	f7f5 fc5b 	bl	800016c <__adddf3>
 800a8b6:	4632      	mov	r2, r6
 800a8b8:	463b      	mov	r3, r7
 800a8ba:	f7f5 fe0d 	bl	80004d8 <__aeabi_dmul>
 800a8be:	a364      	add	r3, pc, #400	@ (adr r3, 800aa50 <atan+0x2c0>)
 800a8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c4:	f7f5 fc52 	bl	800016c <__adddf3>
 800a8c8:	4642      	mov	r2, r8
 800a8ca:	464b      	mov	r3, r9
 800a8cc:	f7f5 fe04 	bl	80004d8 <__aeabi_dmul>
 800a8d0:	a361      	add	r3, pc, #388	@ (adr r3, 800aa58 <atan+0x2c8>)
 800a8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d6:	4680      	mov	r8, r0
 800a8d8:	4689      	mov	r9, r1
 800a8da:	4630      	mov	r0, r6
 800a8dc:	4639      	mov	r1, r7
 800a8de:	f7f5 fdfb 	bl	80004d8 <__aeabi_dmul>
 800a8e2:	a35f      	add	r3, pc, #380	@ (adr r3, 800aa60 <atan+0x2d0>)
 800a8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e8:	f7f5 fc3e 	bl	8000168 <__aeabi_dsub>
 800a8ec:	4632      	mov	r2, r6
 800a8ee:	463b      	mov	r3, r7
 800a8f0:	f7f5 fdf2 	bl	80004d8 <__aeabi_dmul>
 800a8f4:	a35c      	add	r3, pc, #368	@ (adr r3, 800aa68 <atan+0x2d8>)
 800a8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fa:	f7f5 fc35 	bl	8000168 <__aeabi_dsub>
 800a8fe:	4632      	mov	r2, r6
 800a900:	463b      	mov	r3, r7
 800a902:	f7f5 fde9 	bl	80004d8 <__aeabi_dmul>
 800a906:	a35a      	add	r3, pc, #360	@ (adr r3, 800aa70 <atan+0x2e0>)
 800a908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90c:	f7f5 fc2c 	bl	8000168 <__aeabi_dsub>
 800a910:	4632      	mov	r2, r6
 800a912:	463b      	mov	r3, r7
 800a914:	f7f5 fde0 	bl	80004d8 <__aeabi_dmul>
 800a918:	a357      	add	r3, pc, #348	@ (adr r3, 800aa78 <atan+0x2e8>)
 800a91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91e:	f7f5 fc23 	bl	8000168 <__aeabi_dsub>
 800a922:	4632      	mov	r2, r6
 800a924:	463b      	mov	r3, r7
 800a926:	f7f5 fdd7 	bl	80004d8 <__aeabi_dmul>
 800a92a:	4602      	mov	r2, r0
 800a92c:	460b      	mov	r3, r1
 800a92e:	4640      	mov	r0, r8
 800a930:	4649      	mov	r1, r9
 800a932:	f7f5 fc1b 	bl	800016c <__adddf3>
 800a936:	4622      	mov	r2, r4
 800a938:	462b      	mov	r3, r5
 800a93a:	f7f5 fdcd 	bl	80004d8 <__aeabi_dmul>
 800a93e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a942:	4602      	mov	r2, r0
 800a944:	460b      	mov	r3, r1
 800a946:	d144      	bne.n	800a9d2 <atan+0x242>
 800a948:	4620      	mov	r0, r4
 800a94a:	4629      	mov	r1, r5
 800a94c:	f7f5 fc0c 	bl	8000168 <__aeabi_dsub>
 800a950:	e733      	b.n	800a7ba <atan+0x2a>
 800a952:	2200      	movs	r2, #0
 800a954:	4b4f      	ldr	r3, [pc, #316]	@ (800aa94 <atan+0x304>)
 800a956:	f7f5 fc07 	bl	8000168 <__aeabi_dsub>
 800a95a:	2200      	movs	r2, #0
 800a95c:	4606      	mov	r6, r0
 800a95e:	460f      	mov	r7, r1
 800a960:	4620      	mov	r0, r4
 800a962:	4629      	mov	r1, r5
 800a964:	4b4b      	ldr	r3, [pc, #300]	@ (800aa94 <atan+0x304>)
 800a966:	f7f5 fc01 	bl	800016c <__adddf3>
 800a96a:	4602      	mov	r2, r0
 800a96c:	460b      	mov	r3, r1
 800a96e:	4630      	mov	r0, r6
 800a970:	4639      	mov	r1, r7
 800a972:	f7f5 fedb 	bl	800072c <__aeabi_ddiv>
 800a976:	f04f 0a01 	mov.w	sl, #1
 800a97a:	4604      	mov	r4, r0
 800a97c:	460d      	mov	r5, r1
 800a97e:	e767      	b.n	800a850 <atan+0xc0>
 800a980:	4b46      	ldr	r3, [pc, #280]	@ (800aa9c <atan+0x30c>)
 800a982:	429e      	cmp	r6, r3
 800a984:	d21a      	bcs.n	800a9bc <atan+0x22c>
 800a986:	2200      	movs	r2, #0
 800a988:	4b45      	ldr	r3, [pc, #276]	@ (800aaa0 <atan+0x310>)
 800a98a:	f7f5 fbed 	bl	8000168 <__aeabi_dsub>
 800a98e:	2200      	movs	r2, #0
 800a990:	4606      	mov	r6, r0
 800a992:	460f      	mov	r7, r1
 800a994:	4620      	mov	r0, r4
 800a996:	4629      	mov	r1, r5
 800a998:	4b41      	ldr	r3, [pc, #260]	@ (800aaa0 <atan+0x310>)
 800a99a:	f7f5 fd9d 	bl	80004d8 <__aeabi_dmul>
 800a99e:	2200      	movs	r2, #0
 800a9a0:	4b3c      	ldr	r3, [pc, #240]	@ (800aa94 <atan+0x304>)
 800a9a2:	f7f5 fbe3 	bl	800016c <__adddf3>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	460b      	mov	r3, r1
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	4639      	mov	r1, r7
 800a9ae:	f7f5 febd 	bl	800072c <__aeabi_ddiv>
 800a9b2:	f04f 0a02 	mov.w	sl, #2
 800a9b6:	4604      	mov	r4, r0
 800a9b8:	460d      	mov	r5, r1
 800a9ba:	e749      	b.n	800a850 <atan+0xc0>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	460b      	mov	r3, r1
 800a9c0:	2000      	movs	r0, #0
 800a9c2:	4938      	ldr	r1, [pc, #224]	@ (800aaa4 <atan+0x314>)
 800a9c4:	f7f5 feb2 	bl	800072c <__aeabi_ddiv>
 800a9c8:	f04f 0a03 	mov.w	sl, #3
 800a9cc:	4604      	mov	r4, r0
 800a9ce:	460d      	mov	r5, r1
 800a9d0:	e73e      	b.n	800a850 <atan+0xc0>
 800a9d2:	4b35      	ldr	r3, [pc, #212]	@ (800aaa8 <atan+0x318>)
 800a9d4:	4e35      	ldr	r6, [pc, #212]	@ (800aaac <atan+0x31c>)
 800a9d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9de:	f7f5 fbc3 	bl	8000168 <__aeabi_dsub>
 800a9e2:	4622      	mov	r2, r4
 800a9e4:	462b      	mov	r3, r5
 800a9e6:	f7f5 fbbf 	bl	8000168 <__aeabi_dsub>
 800a9ea:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a9f6:	f7f5 fbb7 	bl	8000168 <__aeabi_dsub>
 800a9fa:	f1bb 0f00 	cmp.w	fp, #0
 800a9fe:	4604      	mov	r4, r0
 800aa00:	460d      	mov	r5, r1
 800aa02:	f6bf aee4 	bge.w	800a7ce <atan+0x3e>
 800aa06:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aa0a:	461d      	mov	r5, r3
 800aa0c:	e6df      	b.n	800a7ce <atan+0x3e>
 800aa0e:	a51c      	add	r5, pc, #112	@ (adr r5, 800aa80 <atan+0x2f0>)
 800aa10:	e9d5 4500 	ldrd	r4, r5, [r5]
 800aa14:	e6db      	b.n	800a7ce <atan+0x3e>
 800aa16:	bf00      	nop
 800aa18:	54442d18 	.word	0x54442d18
 800aa1c:	3ff921fb 	.word	0x3ff921fb
 800aa20:	8800759c 	.word	0x8800759c
 800aa24:	7e37e43c 	.word	0x7e37e43c
 800aa28:	e322da11 	.word	0xe322da11
 800aa2c:	3f90ad3a 	.word	0x3f90ad3a
 800aa30:	24760deb 	.word	0x24760deb
 800aa34:	3fa97b4b 	.word	0x3fa97b4b
 800aa38:	a0d03d51 	.word	0xa0d03d51
 800aa3c:	3fb10d66 	.word	0x3fb10d66
 800aa40:	c54c206e 	.word	0xc54c206e
 800aa44:	3fb745cd 	.word	0x3fb745cd
 800aa48:	920083ff 	.word	0x920083ff
 800aa4c:	3fc24924 	.word	0x3fc24924
 800aa50:	5555550d 	.word	0x5555550d
 800aa54:	3fd55555 	.word	0x3fd55555
 800aa58:	2c6a6c2f 	.word	0x2c6a6c2f
 800aa5c:	bfa2b444 	.word	0xbfa2b444
 800aa60:	52defd9a 	.word	0x52defd9a
 800aa64:	3fadde2d 	.word	0x3fadde2d
 800aa68:	af749a6d 	.word	0xaf749a6d
 800aa6c:	3fb3b0f2 	.word	0x3fb3b0f2
 800aa70:	fe231671 	.word	0xfe231671
 800aa74:	3fbc71c6 	.word	0x3fbc71c6
 800aa78:	9998ebc4 	.word	0x9998ebc4
 800aa7c:	3fc99999 	.word	0x3fc99999
 800aa80:	54442d18 	.word	0x54442d18
 800aa84:	bff921fb 	.word	0xbff921fb
 800aa88:	440fffff 	.word	0x440fffff
 800aa8c:	7ff00000 	.word	0x7ff00000
 800aa90:	3fdbffff 	.word	0x3fdbffff
 800aa94:	3ff00000 	.word	0x3ff00000
 800aa98:	3ff2ffff 	.word	0x3ff2ffff
 800aa9c:	40038000 	.word	0x40038000
 800aaa0:	3ff80000 	.word	0x3ff80000
 800aaa4:	bff00000 	.word	0xbff00000
 800aaa8:	0800baa8 	.word	0x0800baa8
 800aaac:	0800bac8 	.word	0x0800bac8

0800aab0 <fabs>:
 800aab0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800aab4:	4619      	mov	r1, r3
 800aab6:	4770      	bx	lr

0800aab8 <__ieee754_sqrt>:
 800aab8:	4a65      	ldr	r2, [pc, #404]	@ (800ac50 <__ieee754_sqrt+0x198>)
 800aaba:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aabe:	438a      	bics	r2, r1
 800aac0:	4606      	mov	r6, r0
 800aac2:	460f      	mov	r7, r1
 800aac4:	460b      	mov	r3, r1
 800aac6:	4604      	mov	r4, r0
 800aac8:	d10e      	bne.n	800aae8 <__ieee754_sqrt+0x30>
 800aaca:	4602      	mov	r2, r0
 800aacc:	f7f5 fd04 	bl	80004d8 <__aeabi_dmul>
 800aad0:	4602      	mov	r2, r0
 800aad2:	460b      	mov	r3, r1
 800aad4:	4630      	mov	r0, r6
 800aad6:	4639      	mov	r1, r7
 800aad8:	f7f5 fb48 	bl	800016c <__adddf3>
 800aadc:	4606      	mov	r6, r0
 800aade:	460f      	mov	r7, r1
 800aae0:	4630      	mov	r0, r6
 800aae2:	4639      	mov	r1, r7
 800aae4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aae8:	2900      	cmp	r1, #0
 800aaea:	dc0c      	bgt.n	800ab06 <__ieee754_sqrt+0x4e>
 800aaec:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800aaf0:	4302      	orrs	r2, r0
 800aaf2:	d0f5      	beq.n	800aae0 <__ieee754_sqrt+0x28>
 800aaf4:	b189      	cbz	r1, 800ab1a <__ieee754_sqrt+0x62>
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	f7f5 fb36 	bl	8000168 <__aeabi_dsub>
 800aafc:	4602      	mov	r2, r0
 800aafe:	460b      	mov	r3, r1
 800ab00:	f7f5 fe14 	bl	800072c <__aeabi_ddiv>
 800ab04:	e7ea      	b.n	800aadc <__ieee754_sqrt+0x24>
 800ab06:	150a      	asrs	r2, r1, #20
 800ab08:	d115      	bne.n	800ab36 <__ieee754_sqrt+0x7e>
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	e009      	b.n	800ab22 <__ieee754_sqrt+0x6a>
 800ab0e:	0ae3      	lsrs	r3, r4, #11
 800ab10:	3a15      	subs	r2, #21
 800ab12:	0564      	lsls	r4, r4, #21
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d0fa      	beq.n	800ab0e <__ieee754_sqrt+0x56>
 800ab18:	e7f7      	b.n	800ab0a <__ieee754_sqrt+0x52>
 800ab1a:	460a      	mov	r2, r1
 800ab1c:	e7fa      	b.n	800ab14 <__ieee754_sqrt+0x5c>
 800ab1e:	005b      	lsls	r3, r3, #1
 800ab20:	3101      	adds	r1, #1
 800ab22:	02d8      	lsls	r0, r3, #11
 800ab24:	d5fb      	bpl.n	800ab1e <__ieee754_sqrt+0x66>
 800ab26:	1e48      	subs	r0, r1, #1
 800ab28:	1a12      	subs	r2, r2, r0
 800ab2a:	f1c1 0020 	rsb	r0, r1, #32
 800ab2e:	fa24 f000 	lsr.w	r0, r4, r0
 800ab32:	4303      	orrs	r3, r0
 800ab34:	408c      	lsls	r4, r1
 800ab36:	2700      	movs	r7, #0
 800ab38:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 800ab3c:	2116      	movs	r1, #22
 800ab3e:	07d2      	lsls	r2, r2, #31
 800ab40:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800ab44:	463a      	mov	r2, r7
 800ab46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ab4e:	bf5c      	itt	pl
 800ab50:	005b      	lslpl	r3, r3, #1
 800ab52:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800ab56:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ab5a:	bf58      	it	pl
 800ab5c:	0064      	lslpl	r4, r4, #1
 800ab5e:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800ab62:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ab66:	0064      	lsls	r4, r4, #1
 800ab68:	1815      	adds	r5, r2, r0
 800ab6a:	429d      	cmp	r5, r3
 800ab6c:	bfde      	ittt	le
 800ab6e:	182a      	addle	r2, r5, r0
 800ab70:	1b5b      	suble	r3, r3, r5
 800ab72:	183f      	addle	r7, r7, r0
 800ab74:	0fe5      	lsrs	r5, r4, #31
 800ab76:	3901      	subs	r1, #1
 800ab78:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800ab7c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800ab80:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800ab84:	d1f0      	bne.n	800ab68 <__ieee754_sqrt+0xb0>
 800ab86:	460d      	mov	r5, r1
 800ab88:	2620      	movs	r6, #32
 800ab8a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	eb00 0c01 	add.w	ip, r0, r1
 800ab94:	dc02      	bgt.n	800ab9c <__ieee754_sqrt+0xe4>
 800ab96:	d113      	bne.n	800abc0 <__ieee754_sqrt+0x108>
 800ab98:	45a4      	cmp	ip, r4
 800ab9a:	d811      	bhi.n	800abc0 <__ieee754_sqrt+0x108>
 800ab9c:	f1bc 0f00 	cmp.w	ip, #0
 800aba0:	eb0c 0100 	add.w	r1, ip, r0
 800aba4:	da3e      	bge.n	800ac24 <__ieee754_sqrt+0x16c>
 800aba6:	2900      	cmp	r1, #0
 800aba8:	db3c      	blt.n	800ac24 <__ieee754_sqrt+0x16c>
 800abaa:	f102 0e01 	add.w	lr, r2, #1
 800abae:	1a9b      	subs	r3, r3, r2
 800abb0:	4672      	mov	r2, lr
 800abb2:	45a4      	cmp	ip, r4
 800abb4:	bf88      	it	hi
 800abb6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800abba:	eba4 040c 	sub.w	r4, r4, ip
 800abbe:	4405      	add	r5, r0
 800abc0:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800abc4:	3e01      	subs	r6, #1
 800abc6:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800abca:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800abce:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800abd2:	d1dc      	bne.n	800ab8e <__ieee754_sqrt+0xd6>
 800abd4:	431c      	orrs	r4, r3
 800abd6:	d01a      	beq.n	800ac0e <__ieee754_sqrt+0x156>
 800abd8:	4c1e      	ldr	r4, [pc, #120]	@ (800ac54 <__ieee754_sqrt+0x19c>)
 800abda:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 800ac58 <__ieee754_sqrt+0x1a0>
 800abde:	e9d4 0100 	ldrd	r0, r1, [r4]
 800abe2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800abe6:	f7f5 fabf 	bl	8000168 <__aeabi_dsub>
 800abea:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800abee:	4602      	mov	r2, r0
 800abf0:	460b      	mov	r3, r1
 800abf2:	4650      	mov	r0, sl
 800abf4:	4659      	mov	r1, fp
 800abf6:	f7f5 feeb 	bl	80009d0 <__aeabi_dcmple>
 800abfa:	b140      	cbz	r0, 800ac0e <__ieee754_sqrt+0x156>
 800abfc:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ac00:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ac04:	f1b5 3fff 	cmp.w	r5, #4294967295
 800ac08:	d10e      	bne.n	800ac28 <__ieee754_sqrt+0x170>
 800ac0a:	4635      	mov	r5, r6
 800ac0c:	3701      	adds	r7, #1
 800ac0e:	107b      	asrs	r3, r7, #1
 800ac10:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800ac14:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800ac18:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 800ac1c:	086b      	lsrs	r3, r5, #1
 800ac1e:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 800ac22:	e75b      	b.n	800aadc <__ieee754_sqrt+0x24>
 800ac24:	4696      	mov	lr, r2
 800ac26:	e7c2      	b.n	800abae <__ieee754_sqrt+0xf6>
 800ac28:	f7f5 faa0 	bl	800016c <__adddf3>
 800ac2c:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800ac30:	4602      	mov	r2, r0
 800ac32:	460b      	mov	r3, r1
 800ac34:	4650      	mov	r0, sl
 800ac36:	4659      	mov	r1, fp
 800ac38:	f7f5 fec0 	bl	80009bc <__aeabi_dcmplt>
 800ac3c:	b120      	cbz	r0, 800ac48 <__ieee754_sqrt+0x190>
 800ac3e:	1cab      	adds	r3, r5, #2
 800ac40:	bf08      	it	eq
 800ac42:	3701      	addeq	r7, #1
 800ac44:	3502      	adds	r5, #2
 800ac46:	e7e2      	b.n	800ac0e <__ieee754_sqrt+0x156>
 800ac48:	1c6b      	adds	r3, r5, #1
 800ac4a:	f023 0501 	bic.w	r5, r3, #1
 800ac4e:	e7de      	b.n	800ac0e <__ieee754_sqrt+0x156>
 800ac50:	7ff00000 	.word	0x7ff00000
 800ac54:	0800baf0 	.word	0x0800baf0
 800ac58:	0800bae8 	.word	0x0800bae8
 800ac5c:	00000000 	.word	0x00000000

0800ac60 <__ieee754_atan2>:
 800ac60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac64:	4617      	mov	r7, r2
 800ac66:	4690      	mov	r8, r2
 800ac68:	4699      	mov	r9, r3
 800ac6a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ac6e:	427b      	negs	r3, r7
 800ac70:	f8df a184 	ldr.w	sl, [pc, #388]	@ 800adf8 <__ieee754_atan2+0x198>
 800ac74:	433b      	orrs	r3, r7
 800ac76:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ac7a:	4553      	cmp	r3, sl
 800ac7c:	4604      	mov	r4, r0
 800ac7e:	460d      	mov	r5, r1
 800ac80:	d809      	bhi.n	800ac96 <__ieee754_atan2+0x36>
 800ac82:	4246      	negs	r6, r0
 800ac84:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ac88:	4306      	orrs	r6, r0
 800ac8a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800ac8e:	4556      	cmp	r6, sl
 800ac90:	468e      	mov	lr, r1
 800ac92:	4683      	mov	fp, r0
 800ac94:	d908      	bls.n	800aca8 <__ieee754_atan2+0x48>
 800ac96:	4642      	mov	r2, r8
 800ac98:	464b      	mov	r3, r9
 800ac9a:	4620      	mov	r0, r4
 800ac9c:	4629      	mov	r1, r5
 800ac9e:	f7f5 fa65 	bl	800016c <__adddf3>
 800aca2:	4604      	mov	r4, r0
 800aca4:	460d      	mov	r5, r1
 800aca6:	e016      	b.n	800acd6 <__ieee754_atan2+0x76>
 800aca8:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 800acac:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800acb0:	433e      	orrs	r6, r7
 800acb2:	d103      	bne.n	800acbc <__ieee754_atan2+0x5c>
 800acb4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb8:	f7ff bd6a 	b.w	800a790 <atan>
 800acbc:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800acc0:	f006 0602 	and.w	r6, r6, #2
 800acc4:	ea53 0b0b 	orrs.w	fp, r3, fp
 800acc8:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800accc:	d107      	bne.n	800acde <__ieee754_atan2+0x7e>
 800acce:	2e02      	cmp	r6, #2
 800acd0:	d064      	beq.n	800ad9c <__ieee754_atan2+0x13c>
 800acd2:	2e03      	cmp	r6, #3
 800acd4:	d066      	beq.n	800ada4 <__ieee754_atan2+0x144>
 800acd6:	4620      	mov	r0, r4
 800acd8:	4629      	mov	r1, r5
 800acda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acde:	4317      	orrs	r7, r2
 800ace0:	d106      	bne.n	800acf0 <__ieee754_atan2+0x90>
 800ace2:	f1be 0f00 	cmp.w	lr, #0
 800ace6:	db68      	blt.n	800adba <__ieee754_atan2+0x15a>
 800ace8:	a537      	add	r5, pc, #220	@ (adr r5, 800adc8 <__ieee754_atan2+0x168>)
 800acea:	e9d5 4500 	ldrd	r4, r5, [r5]
 800acee:	e7f2      	b.n	800acd6 <__ieee754_atan2+0x76>
 800acf0:	4552      	cmp	r2, sl
 800acf2:	d10f      	bne.n	800ad14 <__ieee754_atan2+0xb4>
 800acf4:	4293      	cmp	r3, r2
 800acf6:	f106 36ff 	add.w	r6, r6, #4294967295
 800acfa:	d107      	bne.n	800ad0c <__ieee754_atan2+0xac>
 800acfc:	2e02      	cmp	r6, #2
 800acfe:	d855      	bhi.n	800adac <__ieee754_atan2+0x14c>
 800ad00:	4b3e      	ldr	r3, [pc, #248]	@ (800adfc <__ieee754_atan2+0x19c>)
 800ad02:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ad06:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ad0a:	e7e4      	b.n	800acd6 <__ieee754_atan2+0x76>
 800ad0c:	2e02      	cmp	r6, #2
 800ad0e:	d851      	bhi.n	800adb4 <__ieee754_atan2+0x154>
 800ad10:	4b3b      	ldr	r3, [pc, #236]	@ (800ae00 <__ieee754_atan2+0x1a0>)
 800ad12:	e7f6      	b.n	800ad02 <__ieee754_atan2+0xa2>
 800ad14:	4553      	cmp	r3, sl
 800ad16:	d0e4      	beq.n	800ace2 <__ieee754_atan2+0x82>
 800ad18:	1a9b      	subs	r3, r3, r2
 800ad1a:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800ad1e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ad22:	da21      	bge.n	800ad68 <__ieee754_atan2+0x108>
 800ad24:	f1b9 0f00 	cmp.w	r9, #0
 800ad28:	da01      	bge.n	800ad2e <__ieee754_atan2+0xce>
 800ad2a:	323c      	adds	r2, #60	@ 0x3c
 800ad2c:	db20      	blt.n	800ad70 <__ieee754_atan2+0x110>
 800ad2e:	4642      	mov	r2, r8
 800ad30:	464b      	mov	r3, r9
 800ad32:	4620      	mov	r0, r4
 800ad34:	4629      	mov	r1, r5
 800ad36:	f7f5 fcf9 	bl	800072c <__aeabi_ddiv>
 800ad3a:	f7ff feb9 	bl	800aab0 <fabs>
 800ad3e:	f7ff fd27 	bl	800a790 <atan>
 800ad42:	4604      	mov	r4, r0
 800ad44:	460d      	mov	r5, r1
 800ad46:	2e01      	cmp	r6, #1
 800ad48:	d015      	beq.n	800ad76 <__ieee754_atan2+0x116>
 800ad4a:	2e02      	cmp	r6, #2
 800ad4c:	d017      	beq.n	800ad7e <__ieee754_atan2+0x11e>
 800ad4e:	2e00      	cmp	r6, #0
 800ad50:	d0c1      	beq.n	800acd6 <__ieee754_atan2+0x76>
 800ad52:	a31f      	add	r3, pc, #124	@ (adr r3, 800add0 <__ieee754_atan2+0x170>)
 800ad54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad58:	4620      	mov	r0, r4
 800ad5a:	4629      	mov	r1, r5
 800ad5c:	f7f5 fa04 	bl	8000168 <__aeabi_dsub>
 800ad60:	a31d      	add	r3, pc, #116	@ (adr r3, 800add8 <__ieee754_atan2+0x178>)
 800ad62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad66:	e016      	b.n	800ad96 <__ieee754_atan2+0x136>
 800ad68:	a517      	add	r5, pc, #92	@ (adr r5, 800adc8 <__ieee754_atan2+0x168>)
 800ad6a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ad6e:	e7ea      	b.n	800ad46 <__ieee754_atan2+0xe6>
 800ad70:	2400      	movs	r4, #0
 800ad72:	2500      	movs	r5, #0
 800ad74:	e7e7      	b.n	800ad46 <__ieee754_atan2+0xe6>
 800ad76:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 800ad7a:	461d      	mov	r5, r3
 800ad7c:	e7ab      	b.n	800acd6 <__ieee754_atan2+0x76>
 800ad7e:	a314      	add	r3, pc, #80	@ (adr r3, 800add0 <__ieee754_atan2+0x170>)
 800ad80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad84:	4620      	mov	r0, r4
 800ad86:	4629      	mov	r1, r5
 800ad88:	f7f5 f9ee 	bl	8000168 <__aeabi_dsub>
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	460b      	mov	r3, r1
 800ad90:	a111      	add	r1, pc, #68	@ (adr r1, 800add8 <__ieee754_atan2+0x178>)
 800ad92:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad96:	f7f5 f9e7 	bl	8000168 <__aeabi_dsub>
 800ad9a:	e782      	b.n	800aca2 <__ieee754_atan2+0x42>
 800ad9c:	a50e      	add	r5, pc, #56	@ (adr r5, 800add8 <__ieee754_atan2+0x178>)
 800ad9e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ada2:	e798      	b.n	800acd6 <__ieee754_atan2+0x76>
 800ada4:	a50e      	add	r5, pc, #56	@ (adr r5, 800ade0 <__ieee754_atan2+0x180>)
 800ada6:	e9d5 4500 	ldrd	r4, r5, [r5]
 800adaa:	e794      	b.n	800acd6 <__ieee754_atan2+0x76>
 800adac:	a50e      	add	r5, pc, #56	@ (adr r5, 800ade8 <__ieee754_atan2+0x188>)
 800adae:	e9d5 4500 	ldrd	r4, r5, [r5]
 800adb2:	e790      	b.n	800acd6 <__ieee754_atan2+0x76>
 800adb4:	2400      	movs	r4, #0
 800adb6:	2500      	movs	r5, #0
 800adb8:	e78d      	b.n	800acd6 <__ieee754_atan2+0x76>
 800adba:	a50d      	add	r5, pc, #52	@ (adr r5, 800adf0 <__ieee754_atan2+0x190>)
 800adbc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800adc0:	e789      	b.n	800acd6 <__ieee754_atan2+0x76>
 800adc2:	bf00      	nop
 800adc4:	f3af 8000 	nop.w
 800adc8:	54442d18 	.word	0x54442d18
 800adcc:	3ff921fb 	.word	0x3ff921fb
 800add0:	33145c07 	.word	0x33145c07
 800add4:	3ca1a626 	.word	0x3ca1a626
 800add8:	54442d18 	.word	0x54442d18
 800addc:	400921fb 	.word	0x400921fb
 800ade0:	54442d18 	.word	0x54442d18
 800ade4:	c00921fb 	.word	0xc00921fb
 800ade8:	54442d18 	.word	0x54442d18
 800adec:	3fe921fb 	.word	0x3fe921fb
 800adf0:	54442d18 	.word	0x54442d18
 800adf4:	bff921fb 	.word	0xbff921fb
 800adf8:	7ff00000 	.word	0x7ff00000
 800adfc:	0800bb10 	.word	0x0800bb10
 800ae00:	0800baf8 	.word	0x0800baf8

0800ae04 <_init>:
 800ae04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae06:	bf00      	nop
 800ae08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae0a:	bc08      	pop	{r3}
 800ae0c:	469e      	mov	lr, r3
 800ae0e:	4770      	bx	lr

0800ae10 <_fini>:
 800ae10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae12:	bf00      	nop
 800ae14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae16:	bc08      	pop	{r3}
 800ae18:	469e      	mov	lr, r3
 800ae1a:	4770      	bx	lr
