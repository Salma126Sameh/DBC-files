
TX_LORA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000124e4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000730  08012688  08012688  00013688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012db8  08012db8  00014358  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012db8  08012db8  00013db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012dc0  08012dc0  00014358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012dc0  08012dc0  00013dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012dc4  08012dc4  00013dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000358  20000000  08012dc8  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006218  20000358  08013120  00014358  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006570  08013120  00014570  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014358  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027cc6  00000000  00000000  00014388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000626b  00000000  00000000  0003c04e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022b8  00000000  00000000  000422c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001ab6  00000000  00000000  00044578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f3c1  00000000  00000000  0004602e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d046  00000000  00000000  000653ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a300b  00000000  00000000  00092435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00135440  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a5a0  00000000  00000000  00135484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  0013fa24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000358 	.word	0x20000358
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801266c 	.word	0x0801266c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000035c 	.word	0x2000035c
 80001dc:	0801266c 	.word	0x0801266c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000eee:	2101      	movs	r1, #1
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f000 f9fe 	bl	80012f2 <LoRa_read>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000efa:	7bbb      	ldrb	r3, [r7, #14]
 8000efc:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d107      	bne.n	8000f14 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000f04:	7bbb      	ldrb	r3, [r7, #14]
 8000f06:	f023 0307 	bic.w	r3, r3, #7
 8000f0a:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
 8000f12:	e03e      	b.n	8000f92 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d10c      	bne.n	8000f34 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000f1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f1e:	f023 0307 	bic.w	r3, r3, #7
 8000f22:	b25b      	sxtb	r3, r3
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	b25b      	sxtb	r3, r3
 8000f2a:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2201      	movs	r2, #1
 8000f30:	61da      	str	r2, [r3, #28]
 8000f32:	e02e      	b.n	8000f92 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	d10c      	bne.n	8000f54 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000f3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f3e:	f023 0307 	bic.w	r3, r3, #7
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	f043 0303 	orr.w	r3, r3, #3
 8000f48:	b25b      	sxtb	r3, r3
 8000f4a:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2203      	movs	r2, #3
 8000f50:	61da      	str	r2, [r3, #28]
 8000f52:	e01e      	b.n	8000f92 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	2b05      	cmp	r3, #5
 8000f58:	d10c      	bne.n	8000f74 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000f5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f5e:	f023 0307 	bic.w	r3, r3, #7
 8000f62:	b25b      	sxtb	r3, r3
 8000f64:	f043 0305 	orr.w	r3, r3, #5
 8000f68:	b25b      	sxtb	r3, r3
 8000f6a:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2205      	movs	r2, #5
 8000f70:	61da      	str	r2, [r3, #28]
 8000f72:	e00e      	b.n	8000f92 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	2b06      	cmp	r3, #6
 8000f78:	d10b      	bne.n	8000f92 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000f7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f7e:	f023 0307 	bic.w	r3, r3, #7
 8000f82:	b25b      	sxtb	r3, r3
 8000f84:	f043 0306 	orr.w	r3, r3, #6
 8000f88:	b25b      	sxtb	r3, r3
 8000f8a:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2206      	movs	r2, #6
 8000f90:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	461a      	mov	r2, r3
 8000f96:	2101      	movs	r1, #1
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f000 f9c4 	bl	8001326 <LoRa_write>
	//HAL_Delay(10);
}
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b084      	sub	sp, #16
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	60f8      	str	r0, [r7, #12]
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	603b      	str	r3, [r7, #0]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6818      	ldr	r0, [r3, #0]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	889b      	ldrh	r3, [r3, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f002 fc2b 	bl	800381c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6998      	ldr	r0, [r3, #24]
 8000fca:	88fa      	ldrh	r2, [r7, #6]
 8000fcc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000fd0:	68b9      	ldr	r1, [r7, #8]
 8000fd2:	f005 fbde 	bl	8006792 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000fd6:	bf00      	nop
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f005 ffde 	bl	8006f9e <HAL_SPI_GetState>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d1f7      	bne.n	8000fd8 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	6998      	ldr	r0, [r3, #24]
 8000fec:	8b3a      	ldrh	r2, [r7, #24]
 8000fee:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000ff2:	6839      	ldr	r1, [r7, #0]
 8000ff4:	f005 fd11 	bl	8006a1a <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000ff8:	bf00      	nop
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f005 ffcd 	bl	8006f9e <HAL_SPI_GetState>
 8001004:	4603      	mov	r3, r0
 8001006:	2b01      	cmp	r3, #1
 8001008:	d1f7      	bne.n	8000ffa <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	6818      	ldr	r0, [r3, #0]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	889b      	ldrh	r3, [r3, #4]
 8001012:	2201      	movs	r2, #1
 8001014:	4619      	mov	r1, r3
 8001016:	f002 fc01 	bl	800381c <HAL_GPIO_WritePin>
}
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8001022:	b580      	push	{r7, lr}
 8001024:	b084      	sub	sp, #16
 8001026:	af00      	add	r7, sp, #0
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	603b      	str	r3, [r7, #0]
 800102e:	4613      	mov	r3, r2
 8001030:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	6818      	ldr	r0, [r3, #0]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	889b      	ldrh	r3, [r3, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	4619      	mov	r1, r3
 800103e:	f002 fbed 	bl	800381c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6998      	ldr	r0, [r3, #24]
 8001046:	88fa      	ldrh	r2, [r7, #6]
 8001048:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800104c:	68b9      	ldr	r1, [r7, #8]
 800104e:	f005 fba0 	bl	8006792 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001052:	bf00      	nop
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	4618      	mov	r0, r3
 800105a:	f005 ffa0 	bl	8006f9e <HAL_SPI_GetState>
 800105e:	4603      	mov	r3, r0
 8001060:	2b01      	cmp	r3, #1
 8001062:	d1f7      	bne.n	8001054 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	6998      	ldr	r0, [r3, #24]
 8001068:	8b3a      	ldrh	r2, [r7, #24]
 800106a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800106e:	6839      	ldr	r1, [r7, #0]
 8001070:	f005 fb8f 	bl	8006792 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001074:	bf00      	nop
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	4618      	mov	r0, r3
 800107c:	f005 ff8f 	bl	8006f9e <HAL_SPI_GetState>
 8001080:	4603      	mov	r3, r0
 8001082:	2b01      	cmp	r3, #1
 8001084:	d1f7      	bne.n	8001076 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	6818      	ldr	r0, [r3, #0]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	889b      	ldrh	r3, [r3, #4]
 800108e:	2201      	movs	r2, #1
 8001090:	4619      	mov	r1, r3
 8001092:	f002 fbc3 	bl	800381c <HAL_GPIO_WritePin>
}
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 800109e:	b580      	push	{r7, lr}
 80010a0:	b084      	sub	sp, #16
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	460b      	mov	r3, r1
 80010a8:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 80010aa:	2126      	movs	r1, #38	@ 0x26
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f000 f920 	bl	80012f2 <LoRa_read>
 80010b2:	4603      	mov	r3, r0
 80010b4:	73bb      	strb	r3, [r7, #14]

	if(value)
 80010b6:	78fb      	ldrb	r3, [r7, #3]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d004      	beq.n	80010c6 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 80010bc:	7bbb      	ldrb	r3, [r7, #14]
 80010be:	f043 0308 	orr.w	r3, r3, #8
 80010c2:	73fb      	strb	r3, [r7, #15]
 80010c4:	e003      	b.n	80010ce <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 80010c6:	7bbb      	ldrb	r3, [r7, #14]
 80010c8:	f023 0308 	bic.w	r3, r3, #8
 80010cc:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	461a      	mov	r2, r3
 80010d2:	2126      	movs	r1, #38	@ 0x26
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f000 f926 	bl	8001326 <LoRa_write>
	HAL_Delay(10);
 80010da:	200a      	movs	r0, #10
 80010dc:	f002 f8a2 	bl	8003224 <HAL_Delay>
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b096      	sub	sp, #88	@ 0x58
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 80010f0:	4a17      	ldr	r2, [pc, #92]	@ (8001150 <LoRa_setAutoLDO+0x68>)
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	4611      	mov	r1, r2
 80010f8:	2250      	movs	r2, #80	@ 0x50
 80010fa:	4618      	mov	r0, r3
 80010fc:	f00e fefb 	bl	800fef6 <memcpy>

	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001106:	461a      	mov	r2, r3
 8001108:	2301      	movs	r3, #1
 800110a:	4093      	lsls	r3, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fa11 	bl	8000534 <__aeabi_i2d>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	3358      	adds	r3, #88	@ 0x58
 800111c:	443b      	add	r3, r7
 800111e:	3b50      	subs	r3, #80	@ 0x50
 8001120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001124:	f7ff fb9a 	bl	800085c <__aeabi_ddiv>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4610      	mov	r0, r2
 800112e:	4619      	mov	r1, r3
 8001130:	f7ff fd1a 	bl	8000b68 <__aeabi_d2iz>
 8001134:	4603      	mov	r3, r0
 8001136:	2b10      	cmp	r3, #16
 8001138:	bfcc      	ite	gt
 800113a:	2301      	movgt	r3, #1
 800113c:	2300      	movle	r3, #0
 800113e:	b2db      	uxtb	r3, r3
 8001140:	4619      	mov	r1, r3
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ffab 	bl	800109e <LoRa_setLowDaraRateOptimization>
}
 8001148:	bf00      	nop
 800114a:	3758      	adds	r7, #88	@ 0x58
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	08012688 	.word	0x08012688

08001154 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	04db      	lsls	r3, r3, #19
 8001162:	115b      	asrs	r3, r3, #5
 8001164:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	0c1b      	lsrs	r3, r3, #16
 800116a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 800116c:	7afb      	ldrb	r3, [r7, #11]
 800116e:	461a      	mov	r2, r3
 8001170:	2106      	movs	r1, #6
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 f8d7 	bl	8001326 <LoRa_write>
	HAL_Delay(5);
 8001178:	2005      	movs	r0, #5
 800117a:	f002 f853 	bl	8003224 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	0a1b      	lsrs	r3, r3, #8
 8001182:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001184:	7afb      	ldrb	r3, [r7, #11]
 8001186:	461a      	mov	r2, r3
 8001188:	2107      	movs	r1, #7
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 f8cb 	bl	8001326 <LoRa_write>
	HAL_Delay(5);
 8001190:	2005      	movs	r0, #5
 8001192:	f002 f847 	bl	8003224 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800119a:	7afb      	ldrb	r3, [r7, #11]
 800119c:	461a      	mov	r2, r3
 800119e:	2108      	movs	r1, #8
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 f8c0 	bl	8001326 <LoRa_write>
	HAL_Delay(5);
 80011a6:	2005      	movs	r0, #5
 80011a8:	f002 f83c 	bl	8003224 <HAL_Delay>
}
 80011ac:	bf00      	nop
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	2b0c      	cmp	r3, #12
 80011c2:	dd01      	ble.n	80011c8 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80011c4:	230c      	movs	r3, #12
 80011c6:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	2b06      	cmp	r3, #6
 80011cc:	dc01      	bgt.n	80011d2 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80011ce:	2307      	movs	r3, #7
 80011d0:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80011d2:	211e      	movs	r1, #30
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 f88c 	bl	80012f2 <LoRa_read>
 80011da:	4603      	mov	r3, r0
 80011dc:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80011de:	200a      	movs	r0, #10
 80011e0:	f002 f820 	bl	8003224 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	011b      	lsls	r3, r3, #4
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	4413      	add	r3, r2
 80011f6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80011f8:	7bbb      	ldrb	r3, [r7, #14]
 80011fa:	461a      	mov	r2, r3
 80011fc:	211e      	movs	r1, #30
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 f891 	bl	8001326 <LoRa_write>
	HAL_Delay(10);
 8001204:	200a      	movs	r0, #10
 8001206:	f002 f80d 	bl	8003224 <HAL_Delay>

	LoRa_setAutoLDO(_LoRa);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ff6c 	bl	80010e8 <LoRa_setAutoLDO>
}
 8001210:	bf00      	nop
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8001224:	78fb      	ldrb	r3, [r7, #3]
 8001226:	461a      	mov	r2, r3
 8001228:	2109      	movs	r1, #9
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 f87b 	bl	8001326 <LoRa_write>
	HAL_Delay(10);
 8001230:	200a      	movs	r0, #10
 8001232:	f001 fff7 	bl	8003224 <HAL_Delay>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001250:	78fb      	ldrb	r3, [r7, #3]
 8001252:	2b2c      	cmp	r3, #44	@ 0x2c
 8001254:	d801      	bhi.n	800125a <LoRa_setOCP+0x1a>
		current = 45;
 8001256:	232d      	movs	r3, #45	@ 0x2d
 8001258:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 800125a:	78fb      	ldrb	r3, [r7, #3]
 800125c:	2bf0      	cmp	r3, #240	@ 0xf0
 800125e:	d901      	bls.n	8001264 <LoRa_setOCP+0x24>
		current = 240;
 8001260:	23f0      	movs	r3, #240	@ 0xf0
 8001262:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001264:	78fb      	ldrb	r3, [r7, #3]
 8001266:	2b78      	cmp	r3, #120	@ 0x78
 8001268:	d809      	bhi.n	800127e <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 800126a:	78fb      	ldrb	r3, [r7, #3]
 800126c:	3b2d      	subs	r3, #45	@ 0x2d
 800126e:	4a12      	ldr	r2, [pc, #72]	@ (80012b8 <LoRa_setOCP+0x78>)
 8001270:	fb82 1203 	smull	r1, r2, r2, r3
 8001274:	1052      	asrs	r2, r2, #1
 8001276:	17db      	asrs	r3, r3, #31
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	73fb      	strb	r3, [r7, #15]
 800127c:	e00b      	b.n	8001296 <LoRa_setOCP+0x56>
	else if(current <= 240)
 800127e:	78fb      	ldrb	r3, [r7, #3]
 8001280:	2bf0      	cmp	r3, #240	@ 0xf0
 8001282:	d808      	bhi.n	8001296 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001284:	78fb      	ldrb	r3, [r7, #3]
 8001286:	331e      	adds	r3, #30
 8001288:	4a0b      	ldr	r2, [pc, #44]	@ (80012b8 <LoRa_setOCP+0x78>)
 800128a:	fb82 1203 	smull	r1, r2, r2, r3
 800128e:	1092      	asrs	r2, r2, #2
 8001290:	17db      	asrs	r3, r3, #31
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	3320      	adds	r3, #32
 800129a:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 800129c:	7bfb      	ldrb	r3, [r7, #15]
 800129e:	461a      	mov	r2, r3
 80012a0:	210b      	movs	r1, #11
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 f83f 	bl	8001326 <LoRa_write>
	HAL_Delay(10);
 80012a8:	200a      	movs	r0, #10
 80012aa:	f001 ffbb 	bl	8003224 <HAL_Delay>
}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	66666667 	.word	0x66666667

080012bc <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 80012c4:	211e      	movs	r1, #30
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 f813 	bl	80012f2 <LoRa_read>
 80012cc:	4603      	mov	r3, r0
 80012ce:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	f043 0307 	orr.w	r3, r3, #7
 80012d6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80012d8:	7bbb      	ldrb	r3, [r7, #14]
 80012da:	461a      	mov	r2, r3
 80012dc:	211e      	movs	r1, #30
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 f821 	bl	8001326 <LoRa_write>
	HAL_Delay(10);
 80012e4:	200a      	movs	r0, #10
 80012e6:	f001 ff9d 	bl	8003224 <HAL_Delay>
}
 80012ea:	bf00      	nop
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af02      	add	r7, sp, #8
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	460b      	mov	r3, r1
 80012fc:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80012fe:	78fb      	ldrb	r3, [r7, #3]
 8001300:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001304:	b2db      	uxtb	r3, r3
 8001306:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8001308:	f107 030f 	add.w	r3, r7, #15
 800130c:	f107 010e 	add.w	r1, r7, #14
 8001310:	2201      	movs	r2, #1
 8001312:	9200      	str	r2, [sp, #0]
 8001314:	2201      	movs	r2, #1
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff fe45 	bl	8000fa6 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 800131c:	7bfb      	ldrb	r3, [r7, #15]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8001326:	b580      	push	{r7, lr}
 8001328:	b086      	sub	sp, #24
 800132a:	af02      	add	r7, sp, #8
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	460b      	mov	r3, r1
 8001330:	70fb      	strb	r3, [r7, #3]
 8001332:	4613      	mov	r3, r2
 8001334:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8001336:	78fb      	ldrb	r3, [r7, #3]
 8001338:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800133c:	b2db      	uxtb	r3, r3
 800133e:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001340:	78bb      	ldrb	r3, [r7, #2]
 8001342:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001344:	f107 030f 	add.w	r3, r7, #15
 8001348:	f107 010e 	add.w	r1, r7, #14
 800134c:	2201      	movs	r2, #1
 800134e:	9200      	str	r2, [sp, #0]
 8001350:	2201      	movs	r2, #1
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff fe65 	bl	8001022 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	461a      	mov	r2, r3
 800136c:	460b      	mov	r3, r1
 800136e:	72fb      	strb	r3, [r7, #11]
 8001370:	4613      	mov	r3, r2
 8001372:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8001374:	7afb      	ldrb	r3, [r7, #11]
 8001376:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800137a:	b2db      	uxtb	r3, r3
 800137c:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6818      	ldr	r0, [r3, #0]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	889b      	ldrh	r3, [r3, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	4619      	mov	r1, r3
 800138a:	f002 fa47 	bl	800381c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6998      	ldr	r0, [r3, #24]
 8001392:	f107 0117 	add.w	r1, r7, #23
 8001396:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800139a:	2201      	movs	r2, #1
 800139c:	f005 f9f9 	bl	8006792 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80013a0:	bf00      	nop
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f005 fdf9 	bl	8006f9e <HAL_SPI_GetState>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d1f7      	bne.n	80013a2 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	6998      	ldr	r0, [r3, #24]
 80013b6:	7abb      	ldrb	r3, [r7, #10]
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	f005 f9e7 	bl	8006792 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80013c4:	bf00      	nop
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f005 fde7 	bl	8006f9e <HAL_SPI_GetState>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d1f7      	bne.n	80013c6 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6818      	ldr	r0, [r3, #0]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	889b      	ldrh	r3, [r3, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	4619      	mov	r1, r3
 80013e2:	f002 fa1b 	bl	800381c <HAL_GPIO_WritePin>
}
 80013e6:	bf00      	nop
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]

	return 1;
 80013f6:	2301      	movs	r3, #1
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	4611      	mov	r1, r2
 8001410:	461a      	mov	r2, r3
 8001412:	460b      	mov	r3, r1
 8001414:	71fb      	strb	r3, [r7, #7]
 8001416:	4613      	mov	r3, r2
 8001418:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001420:	2101      	movs	r1, #1
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	f7ff fd5e 	bl	8000ee4 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8001428:	210e      	movs	r1, #14
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f7ff ff61 	bl	80012f2 <LoRa_read>
 8001430:	4603      	mov	r3, r0
 8001432:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001434:	7cfb      	ldrb	r3, [r7, #19]
 8001436:	461a      	mov	r2, r3
 8001438:	210d      	movs	r1, #13
 800143a:	68f8      	ldr	r0, [r7, #12]
 800143c:	f7ff ff73 	bl	8001326 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	461a      	mov	r2, r3
 8001444:	2122      	movs	r1, #34	@ 0x22
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f7ff ff6d 	bl	8001326 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	2100      	movs	r1, #0
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f7ff ff84 	bl	8001360 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8001458:	2103      	movs	r1, #3
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f7ff fd42 	bl	8000ee4 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001460:	2112      	movs	r1, #18
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f7ff ff45 	bl	80012f2 <LoRa_read>
 8001468:	4603      	mov	r3, r0
 800146a:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 800146c:	7cfb      	ldrb	r3, [r7, #19]
 800146e:	f003 0308 	and.w	r3, r3, #8
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00a      	beq.n	800148c <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001476:	22ff      	movs	r2, #255	@ 0xff
 8001478:	2112      	movs	r1, #18
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	f7ff ff53 	bl	8001326 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001480:	6979      	ldr	r1, [r7, #20]
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f7ff fd2e 	bl	8000ee4 <LoRa_gotoMode>
			return 1;
 8001488:	2301      	movs	r3, #1
 800148a:	e00f      	b.n	80014ac <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 800148c:	88bb      	ldrh	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	80bb      	strh	r3, [r7, #4]
 8001492:	88bb      	ldrh	r3, [r7, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d105      	bne.n	80014a4 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8001498:	6979      	ldr	r1, [r7, #20]
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f7ff fd22 	bl	8000ee4 <LoRa_gotoMode>
				return 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	e003      	b.n	80014ac <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 80014a4:	2001      	movs	r0, #1
 80014a6:	f001 febd 	bl	8003224 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 80014aa:	e7d9      	b.n	8001460 <LoRa_transmit+0x5c>
	}
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80014bc:	2105      	movs	r1, #5
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff fd10 	bl	8000ee4 <LoRa_gotoMode>
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b089      	sub	sp, #36	@ 0x24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	4613      	mov	r3, r2
 80014d8:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 80014de:	2300      	movs	r3, #0
 80014e0:	61bb      	str	r3, [r7, #24]
 80014e2:	e007      	b.n	80014f4 <LoRa_receive+0x28>
		data[i]=0;
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	4413      	add	r3, r2
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	3301      	adds	r3, #1
 80014f2:	61bb      	str	r3, [r7, #24]
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	dbf3      	blt.n	80014e4 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80014fc:	2101      	movs	r1, #1
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f7ff fcf0 	bl	8000ee4 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8001504:	2112      	movs	r1, #18
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f7ff fef3 	bl	80012f2 <LoRa_read>
 800150c:	4603      	mov	r3, r0
 800150e:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8001510:	7cfb      	ldrb	r3, [r7, #19]
 8001512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001516:	2b00      	cmp	r3, #0
 8001518:	d02f      	beq.n	800157a <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 800151a:	22ff      	movs	r2, #255	@ 0xff
 800151c:	2112      	movs	r1, #18
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f7ff ff01 	bl	8001326 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8001524:	2113      	movs	r1, #19
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	f7ff fee3 	bl	80012f2 <LoRa_read>
 800152c:	4603      	mov	r3, r0
 800152e:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8001530:	2110      	movs	r1, #16
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f7ff fedd 	bl	80012f2 <LoRa_read>
 8001538:	4603      	mov	r3, r0
 800153a:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800153c:	7cfb      	ldrb	r3, [r7, #19]
 800153e:	461a      	mov	r2, r3
 8001540:	210d      	movs	r1, #13
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f7ff feef 	bl	8001326 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8001548:	7cba      	ldrb	r2, [r7, #18]
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	4293      	cmp	r3, r2
 800154e:	bf28      	it	cs
 8001550:	4613      	movcs	r3, r2
 8001552:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	e00b      	b.n	8001572 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	68ba      	ldr	r2, [r7, #8]
 800155e:	18d4      	adds	r4, r2, r3
 8001560:	2100      	movs	r1, #0
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f7ff fec5 	bl	80012f2 <LoRa_read>
 8001568:	4603      	mov	r3, r0
 800156a:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	3301      	adds	r3, #1
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	7ffb      	ldrb	r3, [r7, #31]
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	429a      	cmp	r2, r3
 8001578:	dbef      	blt.n	800155a <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 800157a:	2105      	movs	r1, #5
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f7ff fcb1 	bl	8000ee4 <LoRa_gotoMode>
    return min;
 8001582:	7ffb      	ldrb	r3, [r7, #31]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3724      	adds	r7, #36	@ 0x24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd90      	pop	{r4, r7, pc}

0800158c <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff ff2a 	bl	80013ee <LoRa_isvalid>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 8096 	beq.w	80016ce <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80015a2:	2100      	movs	r1, #0
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff fc9d 	bl	8000ee4 <LoRa_gotoMode>
			HAL_Delay(10);
 80015aa:	200a      	movs	r0, #10
 80015ac:	f001 fe3a 	bl	8003224 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80015b0:	2101      	movs	r1, #1
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff fe9d 	bl	80012f2 <LoRa_read>
 80015b8:	4603      	mov	r3, r0
 80015ba:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80015bc:	200a      	movs	r0, #10
 80015be:	f001 fe31 	bl	8003224 <HAL_Delay>
			data = read | 0x80;
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80015c8:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80015ca:	7bbb      	ldrb	r3, [r7, #14]
 80015cc:	461a      	mov	r2, r3
 80015ce:	2101      	movs	r1, #1
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff fea8 	bl	8001326 <LoRa_write>
			HAL_Delay(100);
 80015d6:	2064      	movs	r0, #100	@ 0x64
 80015d8:	f001 fe24 	bl	8003224 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	4619      	mov	r1, r3
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff fdb6 	bl	8001154 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80015ee:	4619      	mov	r1, r3
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff fe11 	bl	8001218 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80015fc:	4619      	mov	r1, r3
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff fe1e 	bl	8001240 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8001604:	2223      	movs	r2, #35	@ 0x23
 8001606:	210c      	movs	r1, #12
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff fe8c 	bl	8001326 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff fe54 	bl	80012bc <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800161a:	4619      	mov	r1, r3
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff fdc9 	bl	80011b4 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001622:	22ff      	movs	r2, #255	@ 0xff
 8001624:	211f      	movs	r1, #31
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff fe7d 	bl	8001326 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001636:	011b      	lsls	r3, r3, #4
 8001638:	b2da      	uxtb	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	b2db      	uxtb	r3, r3
 8001644:	4413      	add	r3, r2
 8001646:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8001648:	7bbb      	ldrb	r3, [r7, #14]
 800164a:	461a      	mov	r2, r3
 800164c:	211d      	movs	r1, #29
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff fe69 	bl	8001326 <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff fd47 	bl	80010e8 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800165e:	0a1b      	lsrs	r3, r3, #8
 8001660:	b29b      	uxth	r3, r3
 8001662:	b2db      	uxtb	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	2120      	movs	r1, #32
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff fe5c 	bl	8001326 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001672:	b2db      	uxtb	r3, r3
 8001674:	461a      	mov	r2, r3
 8001676:	2121      	movs	r1, #33	@ 0x21
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff fe54 	bl	8001326 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 800167e:	2140      	movs	r1, #64	@ 0x40
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff fe36 	bl	80012f2 <LoRa_read>
 8001686:	4603      	mov	r3, r0
 8001688:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8001690:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001692:	7bbb      	ldrb	r3, [r7, #14]
 8001694:	461a      	mov	r2, r3
 8001696:	2140      	movs	r1, #64	@ 0x40
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff fe44 	bl	8001326 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 800169e:	2101      	movs	r1, #1
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff fc1f 	bl	8000ee4 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 80016ac:	200a      	movs	r0, #10
 80016ae:	f001 fdb9 	bl	8003224 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 80016b2:	2142      	movs	r1, #66	@ 0x42
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff fe1c 	bl	80012f2 <LoRa_read>
 80016ba:	4603      	mov	r3, r0
 80016bc:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	2b12      	cmp	r3, #18
 80016c2:	d101      	bne.n	80016c8 <LoRa_init+0x13c>
				return LORA_OK;
 80016c4:	23c8      	movs	r3, #200	@ 0xc8
 80016c6:	e004      	b.n	80016d2 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 80016c8:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 80016cc:	e001      	b.n	80016d2 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 80016ce:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
	...

080016dc <receive_ack_TX>:

uint8_t loraRxBuffer[128];
extern LoRa myLoRa;


bool receive_ack_TX(void) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b094      	sub	sp, #80	@ 0x50
 80016e0:	af00      	add	r7, sp, #0
	uint8_t ackByte = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	char buffer[64];
	bool responseReceived = false;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	CDC_Transmit_FS((uint8_t*) "Waiting for ACK...\r\n",
 80016ee:	2114      	movs	r1, #20
 80016f0:	4831      	ldr	r0, [pc, #196]	@ (80017b8 <receive_ack_TX+0xdc>)
 80016f2:	f00d f8a7 	bl	800e844 <CDC_Transmit_FS>
			strlen("Waiting for ACK...\r\n"));

	uint32_t startTime = HAL_GetTick();
 80016f6:	f001 fd89 	bl	800320c <HAL_GetTick>
 80016fa:	64b8      	str	r0, [r7, #72]	@ 0x48
	while (HAL_GetTick() - startTime < 2000) { // Wait up to 2 seconds
 80016fc:	e030      	b.n	8001760 <receive_ack_TX+0x84>
		int receivedLen = LoRa_receive(&myLoRa, &ackByte, 1);
 80016fe:	f107 0343 	add.w	r3, r7, #67	@ 0x43
 8001702:	2201      	movs	r2, #1
 8001704:	4619      	mov	r1, r3
 8001706:	482d      	ldr	r0, [pc, #180]	@ (80017bc <receive_ack_TX+0xe0>)
 8001708:	f7ff fee0 	bl	80014cc <LoRa_receive>
 800170c:	4603      	mov	r3, r0
 800170e:	647b      	str	r3, [r7, #68]	@ 0x44

		if (receivedLen == 1) {
 8001710:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001712:	2b01      	cmp	r3, #1
 8001714:	d11d      	bne.n	8001752 <receive_ack_TX+0x76>
			snprintf(buffer, sizeof(buffer), "ACK byte received: %d\r\n",
 8001716:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800171a:	4638      	mov	r0, r7
 800171c:	4a28      	ldr	r2, [pc, #160]	@ (80017c0 <receive_ack_TX+0xe4>)
 800171e:	2140      	movs	r1, #64	@ 0x40
 8001720:	f00e face 	bl	800fcc0 <sniprintf>
					ackByte);
			CDC_Transmit_FS((uint8_t*) buffer, strlen(buffer));
 8001724:	463b      	mov	r3, r7
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe fdaa 	bl	8000280 <strlen>
 800172c:	4603      	mov	r3, r0
 800172e:	b29a      	uxth	r2, r3
 8001730:	463b      	mov	r3, r7
 8001732:	4611      	mov	r1, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f00d f885 	bl	800e844 <CDC_Transmit_FS>

			if (ackByte == 1) {
 800173a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800173e:	2b01      	cmp	r3, #1
 8001740:	d103      	bne.n	800174a <receive_ack_TX+0x6e>
				responseReceived = true;  // ACK
 8001742:	2301      	movs	r3, #1
 8001744:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			} else {
				responseReceived = false; // NACK
			}
			break;
 8001748:	e012      	b.n	8001770 <receive_ack_TX+0x94>
				responseReceived = false; // NACK
 800174a:	2300      	movs	r3, #0
 800174c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			break;
 8001750:	e00e      	b.n	8001770 <receive_ack_TX+0x94>
		} else {
			CDC_Transmit_FS((uint8_t*) "No data received yet...\r\n",
 8001752:	2119      	movs	r1, #25
 8001754:	481b      	ldr	r0, [pc, #108]	@ (80017c4 <receive_ack_TX+0xe8>)
 8001756:	f00d f875 	bl	800e844 <CDC_Transmit_FS>
					strlen("No data received yet...\r\n"));
			HAL_Delay(100);
 800175a:	2064      	movs	r0, #100	@ 0x64
 800175c:	f001 fd62 	bl	8003224 <HAL_Delay>
	while (HAL_GetTick() - startTime < 2000) { // Wait up to 2 seconds
 8001760:	f001 fd54 	bl	800320c <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800176e:	d3c6      	bcc.n	80016fe <receive_ack_TX+0x22>
		}
	}

	if (!responseReceived) {
 8001770:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001774:	f083 0301 	eor.w	r3, r3, #1
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d011      	beq.n	80017a2 <receive_ack_TX+0xc6>
		snprintf(buffer, sizeof(buffer),
 800177e:	463b      	mov	r3, r7
 8001780:	4a11      	ldr	r2, [pc, #68]	@ (80017c8 <receive_ack_TX+0xec>)
 8001782:	2140      	movs	r1, #64	@ 0x40
 8001784:	4618      	mov	r0, r3
 8001786:	f00e fa9b 	bl	800fcc0 <sniprintf>
				"No ACK received (timeout or NACK)\r\n");
		CDC_Transmit_FS((uint8_t*) buffer, strlen(buffer));
 800178a:	463b      	mov	r3, r7
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fd77 	bl	8000280 <strlen>
 8001792:	4603      	mov	r3, r0
 8001794:	b29a      	uxth	r2, r3
 8001796:	463b      	mov	r3, r7
 8001798:	4611      	mov	r1, r2
 800179a:	4618      	mov	r0, r3
 800179c:	f00d f852 	bl	800e844 <CDC_Transmit_FS>
 80017a0:	e003      	b.n	80017aa <receive_ack_TX+0xce>
	} else {
		CDC_Transmit_FS((uint8_t*) "ACK confirmed!\r\n",
 80017a2:	2110      	movs	r1, #16
 80017a4:	4809      	ldr	r0, [pc, #36]	@ (80017cc <receive_ack_TX+0xf0>)
 80017a6:	f00d f84d 	bl	800e844 <CDC_Transmit_FS>
				strlen("ACK confirmed!\r\n"));
	}

	return responseReceived;
 80017aa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3750      	adds	r7, #80	@ 0x50
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	080126d8 	.word	0x080126d8
 80017bc:	20000650 	.word	0x20000650
 80017c0:	080126f0 	.word	0x080126f0
 80017c4:	08012708 	.word	0x08012708
 80017c8:	08012724 	.word	0x08012724
 80017cc:	08012748 	.word	0x08012748

080017d0 <sendMessageAndWaitForAck_TX>:
//void sendMessageAndWaitForAck(LoRa *lora, uint8_t *messageBuffer) {

void sendMessageAndWaitForAck_TX(LoRa *lora, const uint8_t *messageBuffer) {
 80017d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017d4:	b0cd      	sub	sp, #308	@ 0x134
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80017dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80017e0:	6018      	str	r0, [r3, #0]
 80017e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80017e6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80017ea:	6019      	str	r1, [r3, #0]
 80017ec:	466b      	mov	r3, sp
 80017ee:	461e      	mov	r6, r3

	//uint8_t msgLen = strlen(messageBuffer); // Cast to char* to fix warning
	uint8_t msgLen = strlen((const char*)messageBuffer); // Cast to char* to fix warning
 80017f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80017f4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80017f8:	6818      	ldr	r0, [r3, #0]
 80017fa:	f7fe fd41 	bl	8000280 <strlen>
 80017fe:	4603      	mov	r3, r0
 8001800:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

	// Calculate CRC for the original message
	uint32_t crc = Calculate_CRC((uint8_t*) messageBuffer, msgLen); // 0xf65adea6
 8001804:	f897 212f 	ldrb.w	r2, [r7, #303]	@ 0x12f
 8001808:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800180c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001810:	4611      	mov	r1, r2
 8001812:	6818      	ldr	r0, [r3, #0]
 8001814:	f000 fa0c 	bl	8001c30 <Calculate_CRC>
 8001818:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

	// Delay for 200ms (maybe for LoRa to settle, or other reasons)
	HAL_Delay(500);
 800181c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001820:	f001 fd00 	bl	8003224 <HAL_Delay>

	// Transmit "CRC: " via CDC
	CDC_Transmit_FS((uint8_t*) "CRC: ", strlen("CRC: "));
 8001824:	2105      	movs	r1, #5
 8001826:	4868      	ldr	r0, [pc, #416]	@ (80019c8 <sendMessageAndWaitForAck_TX+0x1f8>)
 8001828:	f00d f80c 	bl	800e844 <CDC_Transmit_FS>

	// Format the CRC as a string
	char crcString[11]; // Enough space for "0xXXXXXXXX" + null terminator

	//snprintf(crcString, sizeof(crcString), "0x%08X\r\n", (unsigned int) crc); // Format CRC as an 8-digit hex number
	snprintf(crcString, sizeof(crcString), "0x%08lX", crc); // Format CRC as an 8-digit hex number
 800182c:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8001830:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001834:	4a65      	ldr	r2, [pc, #404]	@ (80019cc <sendMessageAndWaitForAck_TX+0x1fc>)
 8001836:	210b      	movs	r1, #11
 8001838:	f00e fa42 	bl	800fcc0 <sniprintf>

	// Transmit the formatted CRC string via CDC
	CDC_Transmit_FS((uint8_t*) crcString, strlen(crcString));
 800183c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fd1d 	bl	8000280 <strlen>
 8001846:	4603      	mov	r3, r0
 8001848:	b29a      	uxth	r2, r3
 800184a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f00c fff7 	bl	800e844 <CDC_Transmit_FS>



	// Buffer to hold the CRC in hexadecimal string format
	//snprintf(crcString, sizeof(crcString), "0x%08X", crc); // Convert CRC to "0xXXXXXXXX"
	snprintf(crcString, sizeof(crcString), "0x%08lX", crc); // Convert CRC to "0xXXXXXXXX"
 8001856:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 800185a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800185e:	4a5b      	ldr	r2, [pc, #364]	@ (80019cc <sendMessageAndWaitForAck_TX+0x1fc>)
 8001860:	210b      	movs	r1, #11
 8001862:	f00e fa2d 	bl	800fcc0 <sniprintf>

//	CDC_Transmit_FS((uint8_t*) "\n", strlen("\n"));

	// Total length of the packet: message + CRC string
	uint8_t packetLen = msgLen + strlen(crcString);
 8001866:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fd08 	bl	8000280 <strlen>
 8001870:	4603      	mov	r3, r0
 8001872:	b2da      	uxtb	r2, r3
 8001874:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8001878:	4413      	add	r3, r2
 800187a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
	char packet[packetLen + 1]; // +1 for null terminator
 800187e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8001882:	1c59      	adds	r1, r3, #1
 8001884:	1e4b      	subs	r3, r1, #1
 8001886:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800188a:	460a      	mov	r2, r1
 800188c:	2300      	movs	r3, #0
 800188e:	4690      	mov	r8, r2
 8001890:	4699      	mov	r9, r3
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800189e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018a6:	460a      	mov	r2, r1
 80018a8:	2300      	movs	r3, #0
 80018aa:	4614      	mov	r4, r2
 80018ac:	461d      	mov	r5, r3
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	f04f 0300 	mov.w	r3, #0
 80018b6:	00eb      	lsls	r3, r5, #3
 80018b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018bc:	00e2      	lsls	r2, r4, #3
 80018be:	460b      	mov	r3, r1
 80018c0:	3307      	adds	r3, #7
 80018c2:	08db      	lsrs	r3, r3, #3
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	ebad 0d03 	sub.w	sp, sp, r3
 80018ca:	466b      	mov	r3, sp
 80018cc:	3300      	adds	r3, #0
 80018ce:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	// Copy the message into the packet
	memcpy(packet, messageBuffer, msgLen);
 80018d2:	f897 212f 	ldrb.w	r2, [r7, #303]	@ 0x12f
 80018d6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80018da:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80018de:	6819      	ldr	r1, [r3, #0]
 80018e0:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 80018e4:	f00e fb07 	bl	800fef6 <memcpy>
	// Append the CRC string to the packet
	memcpy(packet + msgLen, crcString, strlen(crcString) + 1); // Include null terminator
 80018e8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80018ec:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80018f0:	18d4      	adds	r4, r2, r3
 80018f2:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fcc2 	bl	8000280 <strlen>
 80018fc:	4603      	mov	r3, r0
 80018fe:	1c5a      	adds	r2, r3, #1
 8001900:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001904:	4619      	mov	r1, r3
 8001906:	4620      	mov	r0, r4
 8001908:	f00e faf5 	bl	800fef6 <memcpy>
//
//	CDC_Transmit_FS((uint8_t*) packet, packetLen);
//	CDC_Transmit_FS((uint8_t*) "\n", strlen("\n"));

	// Transmit the combined packet via LoRa
	uint8_t result = LoRa_transmit(lora, (uint8_t*) packet, packetLen, 1000);
 800190c:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 8001910:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001914:	f5a3 7096 	sub.w	r0, r3, #300	@ 0x12c
 8001918:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800191c:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 8001920:	6800      	ldr	r0, [r0, #0]
 8001922:	f7ff fd6f 	bl	8001404 <LoRa_transmit>
 8001926:	4603      	mov	r3, r0
 8001928:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b

	// Check for acknowledgment
	if (result) {
 800192c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8001930:	2b00      	cmp	r3, #0
 8001932:	d042      	beq.n	80019ba <sendMessageAndWaitForAck_TX+0x1ea>
		bool ackReceived = receive_ack_TX();
 8001934:	f7ff fed2 	bl	80016dc <receive_ack_TX>
 8001938:	4603      	mov	r3, r0
 800193a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
		char buffer[256];
		sprintf(buffer, "ACK raw value: %s\r\n",
 800193e:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <sendMessageAndWaitForAck_TX+0x17a>
 8001946:	4a22      	ldr	r2, [pc, #136]	@ (80019d0 <sendMessageAndWaitForAck_TX+0x200>)
 8001948:	e000      	b.n	800194c <sendMessageAndWaitForAck_TX+0x17c>
 800194a:	4a22      	ldr	r2, [pc, #136]	@ (80019d4 <sendMessageAndWaitForAck_TX+0x204>)
 800194c:	f107 030c 	add.w	r3, r7, #12
 8001950:	4921      	ldr	r1, [pc, #132]	@ (80019d8 <sendMessageAndWaitForAck_TX+0x208>)
 8001952:	4618      	mov	r0, r3
 8001954:	f00e f9ea 	bl	800fd2c <siprintf>
				ackReceived ? "true" : "false");
		CDC_Transmit_FS((uint8_t*) buffer, strlen(buffer));
 8001958:	f107 030c 	add.w	r3, r7, #12
 800195c:	4618      	mov	r0, r3
 800195e:	f7fe fc8f 	bl	8000280 <strlen>
 8001962:	4603      	mov	r3, r0
 8001964:	b29a      	uxth	r2, r3
 8001966:	f107 030c 	add.w	r3, r7, #12
 800196a:	4611      	mov	r1, r2
 800196c:	4618      	mov	r0, r3
 800196e:	f00c ff69 	bl	800e844 <CDC_Transmit_FS>

		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001972:	2201      	movs	r2, #1
 8001974:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001978:	4818      	ldr	r0, [pc, #96]	@ (80019dc <sendMessageAndWaitForAck_TX+0x20c>)
 800197a:	f001 ff4f 	bl	800381c <HAL_GPIO_WritePin>
		if (ackReceived) {
 800197e:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
 8001982:	2b00      	cmp	r3, #0
 8001984:	d006      	beq.n	8001994 <sendMessageAndWaitForAck_TX+0x1c4>
			sprintf(buffer, "ACK received successfully.\r\n");
 8001986:	f107 030c 	add.w	r3, r7, #12
 800198a:	4915      	ldr	r1, [pc, #84]	@ (80019e0 <sendMessageAndWaitForAck_TX+0x210>)
 800198c:	4618      	mov	r0, r3
 800198e:	f00e f9cd 	bl	800fd2c <siprintf>
 8001992:	e005      	b.n	80019a0 <sendMessageAndWaitForAck_TX+0x1d0>

		} else {
			sprintf(buffer, "No ACK received.\r\n");
 8001994:	f107 030c 	add.w	r3, r7, #12
 8001998:	4912      	ldr	r1, [pc, #72]	@ (80019e4 <sendMessageAndWaitForAck_TX+0x214>)
 800199a:	4618      	mov	r0, r3
 800199c:	f00e f9c6 	bl	800fd2c <siprintf>
		}
		CDC_Transmit_FS((uint8_t*) buffer, strlen(buffer));
 80019a0:	f107 030c 	add.w	r3, r7, #12
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fc6b 	bl	8000280 <strlen>
 80019aa:	4603      	mov	r3, r0
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	f107 030c 	add.w	r3, r7, #12
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f00c ff45 	bl	800e844 <CDC_Transmit_FS>
 80019ba:	46b5      	mov	sp, r6

	}

}
 80019bc:	bf00      	nop
 80019be:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80019c2:	46bd      	mov	sp, r7
 80019c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019c8:	0801275c 	.word	0x0801275c
 80019cc:	08012764 	.word	0x08012764
 80019d0:	0801276c 	.word	0x0801276c
 80019d4:	08012774 	.word	0x08012774
 80019d8:	0801277c 	.word	0x0801277c
 80019dc:	40020800 	.word	0x40020800
 80019e0:	08012790 	.word	0x08012790
 80019e4:	080127b0 	.word	0x080127b0

080019e8 <send_ack_RX>:


void send_ack_RX(bool isAck) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b094      	sub	sp, #80	@ 0x50
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
	// Debug message via USB
	char ackinfo[64];
	snprintf(ackinfo, sizeof(ackinfo), "ACK_INFO: %s\r\n", isAck ? "true" : "false");
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <send_ack_RX+0x14>
 80019f8:	4b11      	ldr	r3, [pc, #68]	@ (8001a40 <send_ack_RX+0x58>)
 80019fa:	e000      	b.n	80019fe <send_ack_RX+0x16>
 80019fc:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <send_ack_RX+0x5c>)
 80019fe:	f107 0010 	add.w	r0, r7, #16
 8001a02:	4a11      	ldr	r2, [pc, #68]	@ (8001a48 <send_ack_RX+0x60>)
 8001a04:	2140      	movs	r1, #64	@ 0x40
 8001a06:	f00e f95b 	bl	800fcc0 <sniprintf>
	CDC_Transmit_FS((uint8_t*)ackinfo, strlen(ackinfo));
 8001a0a:	f107 0310 	add.w	r3, r7, #16
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fc36 	bl	8000280 <strlen>
 8001a14:	4603      	mov	r3, r0
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	f107 0310 	add.w	r3, r7, #16
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f00c ff10 	bl	800e844 <CDC_Transmit_FS>

	// Send 1-byte boolean value over LoRa
	uint8_t response = isAck ? 1 : 0;
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	73fb      	strb	r3, [r7, #15]
	LoRa_transmit(&myLoRa, &response, 1, 1000);
 8001a28:	f107 010f 	add.w	r1, r7, #15
 8001a2c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a30:	2201      	movs	r2, #1
 8001a32:	4806      	ldr	r0, [pc, #24]	@ (8001a4c <send_ack_RX+0x64>)
 8001a34:	f7ff fce6 	bl	8001404 <LoRa_transmit>
}
 8001a38:	bf00      	nop
 8001a3a:	3750      	adds	r7, #80	@ 0x50
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	0801276c 	.word	0x0801276c
 8001a44:	08012774 	.word	0x08012774
 8001a48:	080127c4 	.word	0x080127c4
 8001a4c:	20000650 	.word	0x20000650

08001a50 <receiveAndsendACK_RX>:


uint8_t receiveAndsendACK_RX(LoRa *_LoRa) {
 8001a50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a54:	f2ad 5d34 	subw	sp, sp, #1332	@ 0x534
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8001a5e:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 8001a62:	6018      	str	r0, [r3, #0]

	uint8_t rxSize = LoRa_receive(&myLoRa, loraRxBuffer,sizeof(loraRxBuffer));
 8001a64:	2280      	movs	r2, #128	@ 0x80
 8001a66:	496e      	ldr	r1, [pc, #440]	@ (8001c20 <receiveAndsendACK_RX+0x1d0>)
 8001a68:	486e      	ldr	r0, [pc, #440]	@ (8001c24 <receiveAndsendACK_RX+0x1d4>)
 8001a6a:	f7ff fd2f 	bl	80014cc <LoRa_receive>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	f887 352b 	strb.w	r3, [r7, #1323]	@ 0x52b
	if (rxSize > 0) {
 8001a74:	f897 352b 	ldrb.w	r3, [r7, #1323]	@ 0x52b
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f000 80c9 	beq.w	8001c10 <receiveAndsendACK_RX+0x1c0>
 8001a7e:	466b      	mov	r3, sp
 8001a80:	461e      	mov	r6, r3
	uint8_t dataLength = rxSize - 10;
 8001a82:	f897 352b 	ldrb.w	r3, [r7, #1323]	@ 0x52b
 8001a86:	3b0a      	subs	r3, #10
 8001a88:	f887 352a 	strb.w	r3, [r7, #1322]	@ 0x52a
	if (dataLength <= 0) {
 8001a8c:	f897 352a 	ldrb.w	r3, [r7, #1322]	@ 0x52a
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d104      	bne.n	8001a9e <receiveAndsendACK_RX+0x4e>
	 send_ack_RX(false);
 8001a94:	2000      	movs	r0, #0
 8001a96:	f7ff ffa7 	bl	80019e8 <send_ack_RX>
	  return 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e0b6      	b.n	8001c0c <receiveAndsendACK_RX+0x1bc>
	}

	// Extract the main message
	uint8_t mainMessage[dataLength];
 8001a9e:	f897 152a 	ldrb.w	r1, [r7, #1322]	@ 0x52a
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
 8001aaa:	b2cb      	uxtb	r3, r1
 8001aac:	2200      	movs	r2, #0
 8001aae:	4698      	mov	r8, r3
 8001ab0:	4691      	mov	r9, r2
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	f04f 0300 	mov.w	r3, #0
 8001aba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001abe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ac2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ac6:	b2cb      	uxtb	r3, r1
 8001ac8:	2200      	movs	r2, #0
 8001aca:	461c      	mov	r4, r3
 8001acc:	4615      	mov	r5, r2
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	f04f 0300 	mov.w	r3, #0
 8001ad6:	00eb      	lsls	r3, r5, #3
 8001ad8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001adc:	00e2      	lsls	r2, r4, #3
 8001ade:	460b      	mov	r3, r1
 8001ae0:	3307      	adds	r3, #7
 8001ae2:	08db      	lsrs	r3, r3, #3
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	ebad 0d03 	sub.w	sp, sp, r3
 8001aea:	466b      	mov	r3, sp
 8001aec:	3300      	adds	r3, #0
 8001aee:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    memcpy(mainMessage, loraRxBuffer, dataLength);
 8001af2:	f897 352a 	ldrb.w	r3, [r7, #1322]	@ 0x52a
 8001af6:	461a      	mov	r2, r3
 8001af8:	4949      	ldr	r1, [pc, #292]	@ (8001c20 <receiveAndsendACK_RX+0x1d0>)
 8001afa:	f8d7 0520 	ldr.w	r0, [r7, #1312]	@ 0x520
 8001afe:	f00e f9fa 	bl	800fef6 <memcpy>

    // Extract CRC string
    char crcStr[11];
    memcpy(crcStr, &loraRxBuffer[dataLength], 10);
 8001b02:	f897 352a 	ldrb.w	r3, [r7, #1322]	@ 0x52a
 8001b06:	4a46      	ldr	r2, [pc, #280]	@ (8001c20 <receiveAndsendACK_RX+0x1d0>)
 8001b08:	1899      	adds	r1, r3, r2
 8001b0a:	f207 530c 	addw	r3, r7, #1292	@ 0x50c
 8001b0e:	220a      	movs	r2, #10
 8001b10:	4618      	mov	r0, r3
 8001b12:	f00e f9f0 	bl	800fef6 <memcpy>
	crcStr[10] = '\0';
 8001b16:	2300      	movs	r3, #0
 8001b18:	f887 3516 	strb.w	r3, [r7, #1302]	@ 0x516

	// Convert CRC string to actual number
	uint32_t receivedCrc = (uint32_t) strtoul(crcStr, NULL, 16);
 8001b1c:	f207 530c 	addw	r3, r7, #1292	@ 0x50c
 8001b20:	2210      	movs	r2, #16
 8001b22:	2100      	movs	r1, #0
 8001b24:	4618      	mov	r0, r3
 8001b26:	f00d fb67 	bl	800f1f8 <strtoul>
 8001b2a:	f8c7 051c 	str.w	r0, [r7, #1308]	@ 0x51c
	// Calculate expected CRC using only the main message
	uint32_t expectedCrc = Calculate_CRC(mainMessage,dataLength);
 8001b2e:	f897 352a 	ldrb.w	r3, [r7, #1322]	@ 0x52a
 8001b32:	4619      	mov	r1, r3
 8001b34:	f8d7 0520 	ldr.w	r0, [r7, #1312]	@ 0x520
 8001b38:	f000 f87a 	bl	8001c30 <Calculate_CRC>
 8001b3c:	f8c7 0518 	str.w	r0, [r7, #1304]	@ 0x518

	// Compare CRCs
	if (receivedCrc == expectedCrc) {
 8001b40:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8001b44:	f8d7 3518 	ldr.w	r3, [r7, #1304]	@ 0x518
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d10e      	bne.n	8001b6a <receiveAndsendACK_RX+0x11a>
	CDC_Transmit_FS((uint8_t*) "matched\r\n",strlen("matched\r\n"));
 8001b4c:	2109      	movs	r1, #9
 8001b4e:	4836      	ldr	r0, [pc, #216]	@ (8001c28 <receiveAndsendACK_RX+0x1d8>)
 8001b50:	f00c fe78 	bl	800e844 <CDC_Transmit_FS>
	HAL_Delay(500);
 8001b54:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b58:	f001 fb64 	bl	8003224 <HAL_Delay>
	send_ack_RX(true);
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	f7ff ff43 	bl	80019e8 <send_ack_RX>
    return 0;
	}

	// Print the main message
	char tempBuffer[256];
	for (int i = 0; i < dataLength; i++) {
 8001b62:	2300      	movs	r3, #0
 8001b64:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
 8001b68:	e02a      	b.n	8001bc0 <receiveAndsendACK_RX+0x170>
	send_ack_RX(false);
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	f7ff ff3c 	bl	80019e8 <send_ack_RX>
    return 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	e04b      	b.n	8001c0c <receiveAndsendACK_RX+0x1bc>
        tempBuffer[i] = (mainMessage[i] >= 32 && mainMessage[i] <= 126) ? mainMessage[i] : '.';
 8001b74:	f8d7 2520 	ldr.w	r2, [r7, #1312]	@ 0x520
 8001b78:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 8001b7c:	4413      	add	r3, r2
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b1f      	cmp	r3, #31
 8001b82:	d90e      	bls.n	8001ba2 <receiveAndsendACK_RX+0x152>
 8001b84:	f8d7 2520 	ldr.w	r2, [r7, #1312]	@ 0x520
 8001b88:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 8001b8c:	4413      	add	r3, r2
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b7e      	cmp	r3, #126	@ 0x7e
 8001b92:	d806      	bhi.n	8001ba2 <receiveAndsendACK_RX+0x152>
 8001b94:	f8d7 2520 	ldr.w	r2, [r7, #1312]	@ 0x520
 8001b98:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 8001b9c:	4413      	add	r3, r2
 8001b9e:	7819      	ldrb	r1, [r3, #0]
 8001ba0:	e000      	b.n	8001ba4 <receiveAndsendACK_RX+0x154>
 8001ba2:	212e      	movs	r1, #46	@ 0x2e
 8001ba4:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8001ba8:	f2a3 5224 	subw	r2, r3, #1316	@ 0x524
 8001bac:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 8001bb0:	4413      	add	r3, r2
 8001bb2:	460a      	mov	r2, r1
 8001bb4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < dataLength; i++) {
 8001bb6:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 8001bba:	3301      	adds	r3, #1
 8001bbc:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
 8001bc0:	f897 352a 	ldrb.w	r3, [r7, #1322]	@ 0x52a
 8001bc4:	f8d7 252c 	ldr.w	r2, [r7, #1324]	@ 0x52c
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	dbd3      	blt.n	8001b74 <receiveAndsendACK_RX+0x124>
	}
        tempBuffer[dataLength] = '\0';
 8001bcc:	f897 352a 	ldrb.w	r3, [r7, #1322]	@ 0x52a
 8001bd0:	f507 62a6 	add.w	r2, r7, #1328	@ 0x530
 8001bd4:	f2a2 5224 	subw	r2, r2, #1316	@ 0x524
 8001bd8:	2100      	movs	r1, #0
 8001bda:	54d1      	strb	r1, [r2, r3]


        char formattedMessage[1024];
        snprintf(formattedMessage, sizeof(formattedMessage), "Received message: %s\r\n", tempBuffer);
 8001bdc:	f107 030c 	add.w	r3, r7, #12
 8001be0:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8001be4:	4a11      	ldr	r2, [pc, #68]	@ (8001c2c <receiveAndsendACK_RX+0x1dc>)
 8001be6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bea:	f00e f869 	bl	800fcc0 <sniprintf>
        CDC_Transmit_FS((uint8_t*)formattedMessage, strlen(formattedMessage));
 8001bee:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe fb44 	bl	8000280 <strlen>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001c00:	4611      	mov	r1, r2
 8001c02:	4618      	mov	r0, r3
 8001c04:	f00c fe1e 	bl	800e844 <CDC_Transmit_FS>
 8001c08:	46b5      	mov	sp, r6
 8001c0a:	e001      	b.n	8001c10 <receiveAndsendACK_RX+0x1c0>
	  return 0;
 8001c0c:	46b5      	mov	sp, r6
 8001c0e:	e000      	b.n	8001c12 <receiveAndsendACK_RX+0x1c2>
    }

    return 1;
 8001c10:	2301      	movs	r3, #1

}
 8001c12:	4618      	mov	r0, r3
 8001c14:	f207 5734 	addw	r7, r7, #1332	@ 0x534
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000374 	.word	0x20000374
 8001c24:	20000650 	.word	0x20000650
 8001c28:	080127d4 	.word	0x080127d4
 8001c2c:	080127e0 	.word	0x080127e0

08001c30 <Calculate_CRC>:
#include "crc_calculator.h"
#include "main.h"

uint32_t Calculate_CRC(const uint8_t *data, uint8_t length) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b0c6      	sub	sp, #280	@ 0x118
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001c3a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001c3e:	6018      	str	r0, [r3, #0]
 8001c40:	460a      	mov	r2, r1
 8001c42:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001c46:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8001c4a:	701a      	strb	r2, [r3, #0]
    uint32_t crc = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    uint32_t buffer32[(256 + 3) / 4]; // Pre-allocate buffer for max data size
    uint32_t wordCount = (length + 3) / 4;
 8001c52:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001c56:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	3303      	adds	r3, #3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	da00      	bge.n	8001c64 <Calculate_CRC+0x34>
 8001c62:	3303      	adds	r3, #3
 8001c64:	109b      	asrs	r3, r3, #2
 8001c66:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    uint8_t i, j;

    // Pack bytes into 32-bit words (little-endian)
    for (i = 0; i < wordCount; i++) {
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8001c70:	e044      	b.n	8001cfc <Calculate_CRC+0xcc>
        uint32_t word = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
        for (j = 0; j < 4 && (i * 4 + j) < length; j++) {
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8001c7e:	e01d      	b.n	8001cbc <Calculate_CRC+0x8c>
            word |= (uint32_t)data[i * 4 + j] << (j * 8);
 8001c80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001c84:	009a      	lsls	r2, r3, #2
 8001c86:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8001c8a:	4413      	add	r3, r2
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001c92:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4413      	add	r3, r2
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001cac:	4313      	orrs	r3, r2
 8001cae:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
        for (j = 0; j < 4 && (i * 4 + j) < length; j++) {
 8001cb2:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8001cbc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	d80c      	bhi.n	8001cde <Calculate_CRC+0xae>
 8001cc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001cc8:	009a      	lsls	r2, r3, #2
 8001cca:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8001cce:	441a      	add	r2, r3
 8001cd0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001cd4:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	dbd0      	blt.n	8001c80 <Calculate_CRC+0x50>
        }
        buffer32[i] = word;
 8001cde:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 8001ce2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ce6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001cea:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 8001cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < wordCount; i++) {
 8001cf2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 8001cfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001d00:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d8b4      	bhi.n	8001c72 <Calculate_CRC+0x42>
    }

    // Compute CRC using HAL function
    crc = HAL_CRC_Calculate(&hcrc, buffer32, wordCount);
 8001d08:	f107 0308 	add.w	r3, r7, #8
 8001d0c:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001d10:	4619      	mov	r1, r3
 8001d12:	4806      	ldr	r0, [pc, #24]	@ (8001d2c <Calculate_CRC+0xfc>)
 8001d14:	f001 fba8 	bl	8003468 <HAL_CRC_Calculate>
 8001d18:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c

    // Apply final XOR
    return crc ^ 0xFFFFFFFF;
 8001d1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001d20:	43db      	mvns	r3, r3
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	200004f4 	.word	0x200004f4

08001d30 <LoRa_Init>:
#include "usbd_cdc_if.h"

extern SPI_HandleTypeDef hspi1;
char buffer[256];

void LoRa_Init(void) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
    myLoRa.CS_port = GPIOB;
 8001d34:	4b32      	ldr	r3, [pc, #200]	@ (8001e00 <LoRa_Init+0xd0>)
 8001d36:	4a33      	ldr	r2, [pc, #204]	@ (8001e04 <LoRa_Init+0xd4>)
 8001d38:	601a      	str	r2, [r3, #0]
    myLoRa.CS_pin = GPIO_PIN_0;
 8001d3a:	4b31      	ldr	r3, [pc, #196]	@ (8001e00 <LoRa_Init+0xd0>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	809a      	strh	r2, [r3, #4]
    myLoRa.reset_port = GPIOB;
 8001d40:	4b2f      	ldr	r3, [pc, #188]	@ (8001e00 <LoRa_Init+0xd0>)
 8001d42:	4a30      	ldr	r2, [pc, #192]	@ (8001e04 <LoRa_Init+0xd4>)
 8001d44:	609a      	str	r2, [r3, #8]
    myLoRa.reset_pin = GPIO_PIN_1;
 8001d46:	4b2e      	ldr	r3, [pc, #184]	@ (8001e00 <LoRa_Init+0xd0>)
 8001d48:	2202      	movs	r2, #2
 8001d4a:	819a      	strh	r2, [r3, #12]
    myLoRa.DIO0_port = GPIOB;
 8001d4c:	4b2c      	ldr	r3, [pc, #176]	@ (8001e00 <LoRa_Init+0xd0>)
 8001d4e:	4a2d      	ldr	r2, [pc, #180]	@ (8001e04 <LoRa_Init+0xd4>)
 8001d50:	611a      	str	r2, [r3, #16]
    myLoRa.DIO0_pin = GPIO_PIN_2;
 8001d52:	4b2b      	ldr	r3, [pc, #172]	@ (8001e00 <LoRa_Init+0xd0>)
 8001d54:	2204      	movs	r2, #4
 8001d56:	829a      	strh	r2, [r3, #20]
    myLoRa.hSPIx = &hspi1;
 8001d58:	4b29      	ldr	r3, [pc, #164]	@ (8001e00 <LoRa_Init+0xd0>)
 8001d5a:	4a2b      	ldr	r2, [pc, #172]	@ (8001e08 <LoRa_Init+0xd8>)
 8001d5c:	619a      	str	r2, [r3, #24]

    myLoRa.frequency = 433;
 8001d5e:	4b28      	ldr	r3, [pc, #160]	@ (8001e00 <LoRa_Init+0xd0>)
 8001d60:	f240 12b1 	movw	r2, #433	@ 0x1b1
 8001d64:	621a      	str	r2, [r3, #32]
    myLoRa.spredingFactor = SF_7;
 8001d66:	4b26      	ldr	r3, [pc, #152]	@ (8001e00 <LoRa_Init+0xd0>)
 8001d68:	2207      	movs	r2, #7
 8001d6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    myLoRa.bandWidth = BW_125KHz;
 8001d6e:	4b24      	ldr	r3, [pc, #144]	@ (8001e00 <LoRa_Init+0xd0>)
 8001d70:	2207      	movs	r2, #7
 8001d72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    myLoRa.crcRate = CR_4_5;
 8001d76:	4b22      	ldr	r3, [pc, #136]	@ (8001e00 <LoRa_Init+0xd0>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    myLoRa.power = POWER_20db;
 8001d7e:	4b20      	ldr	r3, [pc, #128]	@ (8001e00 <LoRa_Init+0xd0>)
 8001d80:	22ff      	movs	r2, #255	@ 0xff
 8001d82:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    myLoRa.overCurrentProtection = 130;
 8001d86:	4b1e      	ldr	r3, [pc, #120]	@ (8001e00 <LoRa_Init+0xd0>)
 8001d88:	2282      	movs	r2, #130	@ 0x82
 8001d8a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    myLoRa.preamble = 8;
 8001d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001e00 <LoRa_Init+0xd0>)
 8001d90:	2208      	movs	r2, #8
 8001d92:	851a      	strh	r2, [r3, #40]	@ 0x28


    // Initialize LoRa
    if (LoRa_init(&myLoRa) != LORA_OK) {
 8001d94:	481a      	ldr	r0, [pc, #104]	@ (8001e00 <LoRa_Init+0xd0>)
 8001d96:	f7ff fbf9 	bl	800158c <LoRa_init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2bc8      	cmp	r3, #200	@ 0xc8
 8001d9e:	d00e      	beq.n	8001dbe <LoRa_Init+0x8e>
        sprintf(buffer, "LoRa Init Failed\r\n");
 8001da0:	491a      	ldr	r1, [pc, #104]	@ (8001e0c <LoRa_Init+0xdc>)
 8001da2:	481b      	ldr	r0, [pc, #108]	@ (8001e10 <LoRa_Init+0xe0>)
 8001da4:	f00d ffc2 	bl	800fd2c <siprintf>
        CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 8001da8:	4819      	ldr	r0, [pc, #100]	@ (8001e10 <LoRa_Init+0xe0>)
 8001daa:	f7fe fa69 	bl	8000280 <strlen>
 8001dae:	4603      	mov	r3, r0
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	4619      	mov	r1, r3
 8001db4:	4816      	ldr	r0, [pc, #88]	@ (8001e10 <LoRa_Init+0xe0>)
 8001db6:	f00c fd45 	bl	800e844 <CDC_Transmit_FS>
        while (1);
 8001dba:	bf00      	nop
 8001dbc:	e7fd      	b.n	8001dba <LoRa_Init+0x8a>
    }
    // Send initialization message
    sprintf(buffer, "LoRa Transmitter & Receiver initialized\r\n");
 8001dbe:	4915      	ldr	r1, [pc, #84]	@ (8001e14 <LoRa_Init+0xe4>)
 8001dc0:	4813      	ldr	r0, [pc, #76]	@ (8001e10 <LoRa_Init+0xe0>)
 8001dc2:	f00d ffb3 	bl	800fd2c <siprintf>
    CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 8001dc6:	4812      	ldr	r0, [pc, #72]	@ (8001e10 <LoRa_Init+0xe0>)
 8001dc8:	f7fe fa5a 	bl	8000280 <strlen>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	480f      	ldr	r0, [pc, #60]	@ (8001e10 <LoRa_Init+0xe0>)
 8001dd4:	f00c fd36 	bl	800e844 <CDC_Transmit_FS>
	HAL_Delay(3000);
 8001dd8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001ddc:	f001 fa22 	bl	8003224 <HAL_Delay>
    sprintf(buffer, "CarSYNC_1\r\n");
 8001de0:	490d      	ldr	r1, [pc, #52]	@ (8001e18 <LoRa_Init+0xe8>)
 8001de2:	480b      	ldr	r0, [pc, #44]	@ (8001e10 <LoRa_Init+0xe0>)
 8001de4:	f00d ffa2 	bl	800fd2c <siprintf>
    CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 8001de8:	4809      	ldr	r0, [pc, #36]	@ (8001e10 <LoRa_Init+0xe0>)
 8001dea:	f7fe fa49 	bl	8000280 <strlen>
 8001dee:	4603      	mov	r3, r0
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	4619      	mov	r1, r3
 8001df4:	4806      	ldr	r0, [pc, #24]	@ (8001e10 <LoRa_Init+0xe0>)
 8001df6:	f00c fd25 	bl	800e844 <CDC_Transmit_FS>



}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000650 	.word	0x20000650
 8001e04:	40020400 	.word	0x40020400
 8001e08:	20000550 	.word	0x20000550
 8001e0c:	080127f8 	.word	0x080127f8
 8001e10:	200003f4 	.word	0x200003f4
 8001e14:	0801280c 	.word	0x0801280c
 8001e18:	08012838 	.word	0x08012838

08001e1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b0c2      	sub	sp, #264	@ 0x108
 8001e20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e22:	f001 f9bd 	bl	80031a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e26:	f000 f863 	bl	8001ef0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e2a:	f000 f971 	bl	8002110 <MX_GPIO_Init>
  MX_CRC_Init();
 8001e2e:	f000 f8cb 	bl	8001fc8 <MX_CRC_Init>
  MX_I2C1_Init();
 8001e32:	f000 f8dd 	bl	8001ff0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001e36:	f000 f909 	bl	800204c <MX_SPI1_Init>
  MX_USART2_Init();
 8001e3a:	f000 f93d 	bl	80020b8 <MX_USART2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(3000);
 8001e3e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001e42:	f001 f9ef 	bl	8003224 <HAL_Delay>
    CDC_Transmit_FS((uint8_t*) "System Starting\r\n", strlen("System Starting\r\n"));
 8001e46:	2111      	movs	r1, #17
 8001e48:	481c      	ldr	r0, [pc, #112]	@ (8001ebc <main+0xa0>)
 8001e4a:	f00c fcfb 	bl	800e844 <CDC_Transmit_FS>


    // Initialize MPU-6050
    uint8_t check = MPU6050_Init(&hi2c1);
 8001e4e:	481c      	ldr	r0, [pc, #112]	@ (8001ec0 <main+0xa4>)
 8001e50:	f000 fa88 	bl	8002364 <MPU6050_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
    char buffer[256];
    itoa(check, buffer, 10);
 8001e5a:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8001e5e:	1d39      	adds	r1, r7, #4
 8001e60:	220a      	movs	r2, #10
 8001e62:	4618      	mov	r0, r3
 8001e64:	f00d f958 	bl	800f118 <itoa>

  	// Initialize LoRa using the function from lora_config.c
  	 LoRa_Init();
 8001e68:	f7ff ff62 	bl	8001d30 <LoRa_Init>
  	 // Start LoRa receiving
  	 LoRa_startReceiving(&myLoRa);
 8001e6c:	4815      	ldr	r0, [pc, #84]	@ (8001ec4 <main+0xa8>)
 8001e6e:	f7ff fb21 	bl	80014b4 <LoRa_startReceiving>

  	  CDC_Transmit_FS((uint8_t*) "LoRa Initialized\r\n", strlen("LoRa Initialized\r\n"));
 8001e72:	2112      	movs	r1, #18
 8001e74:	4814      	ldr	r0, [pc, #80]	@ (8001ec8 <main+0xac>)
 8001e76:	f00c fce5 	bl	800e844 <CDC_Transmit_FS>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001e7a:	f009 fde7 	bl	800ba4c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MPU6050Task */
  MPU6050TaskHandle = osThreadNew(MPU6050_Task, NULL, &MPU6050Task_attributes);
 8001e7e:	4a13      	ldr	r2, [pc, #76]	@ (8001ecc <main+0xb0>)
 8001e80:	2100      	movs	r1, #0
 8001e82:	4813      	ldr	r0, [pc, #76]	@ (8001ed0 <main+0xb4>)
 8001e84:	f009 fe2c 	bl	800bae0 <osThreadNew>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	4a12      	ldr	r2, [pc, #72]	@ (8001ed4 <main+0xb8>)
 8001e8c:	6013      	str	r3, [r2, #0]

  /* creation of LoRaSenderTask */
  LoRaSenderTaskHandle = osThreadNew(LoRa_Sender_Task, NULL, &LoRaSenderTask_attributes);
 8001e8e:	4a12      	ldr	r2, [pc, #72]	@ (8001ed8 <main+0xbc>)
 8001e90:	2100      	movs	r1, #0
 8001e92:	4812      	ldr	r0, [pc, #72]	@ (8001edc <main+0xc0>)
 8001e94:	f009 fe24 	bl	800bae0 <osThreadNew>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	4a11      	ldr	r2, [pc, #68]	@ (8001ee0 <main+0xc4>)
 8001e9c:	6013      	str	r3, [r2, #0]

  /* creation of LoRaReceiverTas */
  LoRaReceiverTasHandle = osThreadNew(LoRa_Receiver_Task, NULL, &LoRaReceiverTas_attributes);
 8001e9e:	4a11      	ldr	r2, [pc, #68]	@ (8001ee4 <main+0xc8>)
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	4811      	ldr	r0, [pc, #68]	@ (8001ee8 <main+0xcc>)
 8001ea4:	f009 fe1c 	bl	800bae0 <osThreadNew>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	4a10      	ldr	r2, [pc, #64]	@ (8001eec <main+0xd0>)
 8001eac:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001eae:	f009 fdf1 	bl	800ba94 <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      vTaskDelay(pdMS_TO_TICKS(10)); // Polling delay
 8001eb2:	200a      	movs	r0, #10
 8001eb4:	f00a fe2e 	bl	800cb14 <vTaskDelay>
 8001eb8:	e7fb      	b.n	8001eb2 <main+0x96>
 8001eba:	bf00      	nop
 8001ebc:	08012870 	.word	0x08012870
 8001ec0:	200004fc 	.word	0x200004fc
 8001ec4:	20000650 	.word	0x20000650
 8001ec8:	08012884 	.word	0x08012884
 8001ecc:	0801291c 	.word	0x0801291c
 8001ed0:	08002285 	.word	0x08002285
 8001ed4:	200005ec 	.word	0x200005ec
 8001ed8:	08012940 	.word	0x08012940
 8001edc:	080022ad 	.word	0x080022ad
 8001ee0:	200005f0 	.word	0x200005f0
 8001ee4:	08012964 	.word	0x08012964
 8001ee8:	08002305 	.word	0x08002305
 8001eec:	200005f4 	.word	0x200005f4

08001ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b094      	sub	sp, #80	@ 0x50
 8001ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ef6:	f107 0320 	add.w	r3, r7, #32
 8001efa:	2230      	movs	r2, #48	@ 0x30
 8001efc:	2100      	movs	r1, #0
 8001efe:	4618      	mov	r0, r3
 8001f00:	f00d ff79 	bl	800fdf6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f04:	f107 030c 	add.w	r3, r7, #12
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f14:	2300      	movs	r3, #0
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	4b29      	ldr	r3, [pc, #164]	@ (8001fc0 <SystemClock_Config+0xd0>)
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1c:	4a28      	ldr	r2, [pc, #160]	@ (8001fc0 <SystemClock_Config+0xd0>)
 8001f1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f22:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f24:	4b26      	ldr	r3, [pc, #152]	@ (8001fc0 <SystemClock_Config+0xd0>)
 8001f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f30:	2300      	movs	r3, #0
 8001f32:	607b      	str	r3, [r7, #4]
 8001f34:	4b23      	ldr	r3, [pc, #140]	@ (8001fc4 <SystemClock_Config+0xd4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001f3c:	4a21      	ldr	r2, [pc, #132]	@ (8001fc4 <SystemClock_Config+0xd4>)
 8001f3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	4b1f      	ldr	r3, [pc, #124]	@ (8001fc4 <SystemClock_Config+0xd4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f4c:	607b      	str	r3, [r7, #4]
 8001f4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f50:	2301      	movs	r3, #1
 8001f52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f54:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f58:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f5e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001f64:	2319      	movs	r3, #25
 8001f66:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001f68:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001f6c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001f6e:	2304      	movs	r3, #4
 8001f70:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001f72:	2307      	movs	r3, #7
 8001f74:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f76:	f107 0320 	add.w	r3, r7, #32
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f003 fef6 	bl	8005d6c <HAL_RCC_OscConfig>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001f86:	f000 f9e7 	bl	8002358 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f8a:	230f      	movs	r3, #15
 8001f8c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fa0:	f107 030c 	add.w	r3, r7, #12
 8001fa4:	2102      	movs	r1, #2
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f004 f958 	bl	800625c <HAL_RCC_ClockConfig>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001fb2:	f000 f9d1 	bl	8002358 <Error_Handler>
  }
}
 8001fb6:	bf00      	nop
 8001fb8:	3750      	adds	r7, #80	@ 0x50
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40007000 	.word	0x40007000

08001fc8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001fcc:	4b06      	ldr	r3, [pc, #24]	@ (8001fe8 <MX_CRC_Init+0x20>)
 8001fce:	4a07      	ldr	r2, [pc, #28]	@ (8001fec <MX_CRC_Init+0x24>)
 8001fd0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001fd2:	4805      	ldr	r0, [pc, #20]	@ (8001fe8 <MX_CRC_Init+0x20>)
 8001fd4:	f001 fa2c 	bl	8003430 <HAL_CRC_Init>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001fde:	f000 f9bb 	bl	8002358 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	200004f4 	.word	0x200004f4
 8001fec:	40023000 	.word	0x40023000

08001ff0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ff4:	4b12      	ldr	r3, [pc, #72]	@ (8002040 <MX_I2C1_Init+0x50>)
 8001ff6:	4a13      	ldr	r2, [pc, #76]	@ (8002044 <MX_I2C1_Init+0x54>)
 8001ff8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ffa:	4b11      	ldr	r3, [pc, #68]	@ (8002040 <MX_I2C1_Init+0x50>)
 8001ffc:	4a12      	ldr	r2, [pc, #72]	@ (8002048 <MX_I2C1_Init+0x58>)
 8001ffe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002000:	4b0f      	ldr	r3, [pc, #60]	@ (8002040 <MX_I2C1_Init+0x50>)
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002006:	4b0e      	ldr	r3, [pc, #56]	@ (8002040 <MX_I2C1_Init+0x50>)
 8002008:	2200      	movs	r2, #0
 800200a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800200c:	4b0c      	ldr	r3, [pc, #48]	@ (8002040 <MX_I2C1_Init+0x50>)
 800200e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002012:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002014:	4b0a      	ldr	r3, [pc, #40]	@ (8002040 <MX_I2C1_Init+0x50>)
 8002016:	2200      	movs	r2, #0
 8002018:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800201a:	4b09      	ldr	r3, [pc, #36]	@ (8002040 <MX_I2C1_Init+0x50>)
 800201c:	2200      	movs	r2, #0
 800201e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002020:	4b07      	ldr	r3, [pc, #28]	@ (8002040 <MX_I2C1_Init+0x50>)
 8002022:	2200      	movs	r2, #0
 8002024:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002026:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <MX_I2C1_Init+0x50>)
 8002028:	2200      	movs	r2, #0
 800202a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800202c:	4804      	ldr	r0, [pc, #16]	@ (8002040 <MX_I2C1_Init+0x50>)
 800202e:	f001 fc27 	bl	8003880 <HAL_I2C_Init>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002038:	f000 f98e 	bl	8002358 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}
 8002040:	200004fc 	.word	0x200004fc
 8002044:	40005400 	.word	0x40005400
 8002048:	000186a0 	.word	0x000186a0

0800204c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002050:	4b17      	ldr	r3, [pc, #92]	@ (80020b0 <MX_SPI1_Init+0x64>)
 8002052:	4a18      	ldr	r2, [pc, #96]	@ (80020b4 <MX_SPI1_Init+0x68>)
 8002054:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002056:	4b16      	ldr	r3, [pc, #88]	@ (80020b0 <MX_SPI1_Init+0x64>)
 8002058:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800205c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800205e:	4b14      	ldr	r3, [pc, #80]	@ (80020b0 <MX_SPI1_Init+0x64>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002064:	4b12      	ldr	r3, [pc, #72]	@ (80020b0 <MX_SPI1_Init+0x64>)
 8002066:	2200      	movs	r2, #0
 8002068:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800206a:	4b11      	ldr	r3, [pc, #68]	@ (80020b0 <MX_SPI1_Init+0x64>)
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002070:	4b0f      	ldr	r3, [pc, #60]	@ (80020b0 <MX_SPI1_Init+0x64>)
 8002072:	2200      	movs	r2, #0
 8002074:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002076:	4b0e      	ldr	r3, [pc, #56]	@ (80020b0 <MX_SPI1_Init+0x64>)
 8002078:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800207c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800207e:	4b0c      	ldr	r3, [pc, #48]	@ (80020b0 <MX_SPI1_Init+0x64>)
 8002080:	2218      	movs	r2, #24
 8002082:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002084:	4b0a      	ldr	r3, [pc, #40]	@ (80020b0 <MX_SPI1_Init+0x64>)
 8002086:	2200      	movs	r2, #0
 8002088:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800208a:	4b09      	ldr	r3, [pc, #36]	@ (80020b0 <MX_SPI1_Init+0x64>)
 800208c:	2200      	movs	r2, #0
 800208e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002090:	4b07      	ldr	r3, [pc, #28]	@ (80020b0 <MX_SPI1_Init+0x64>)
 8002092:	2200      	movs	r2, #0
 8002094:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002096:	4b06      	ldr	r3, [pc, #24]	@ (80020b0 <MX_SPI1_Init+0x64>)
 8002098:	220a      	movs	r2, #10
 800209a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800209c:	4804      	ldr	r0, [pc, #16]	@ (80020b0 <MX_SPI1_Init+0x64>)
 800209e:	f004 faef 	bl	8006680 <HAL_SPI_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80020a8:	f000 f956 	bl	8002358 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020ac:	bf00      	nop
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20000550 	.word	0x20000550
 80020b4:	40013000 	.word	0x40013000

080020b8 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 80020bc:	4b12      	ldr	r3, [pc, #72]	@ (8002108 <MX_USART2_Init+0x50>)
 80020be:	4a13      	ldr	r2, [pc, #76]	@ (800210c <MX_USART2_Init+0x54>)
 80020c0:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 80020c2:	4b11      	ldr	r3, [pc, #68]	@ (8002108 <MX_USART2_Init+0x50>)
 80020c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020c8:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 80020ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002108 <MX_USART2_Init+0x50>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 80020d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002108 <MX_USART2_Init+0x50>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 80020d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002108 <MX_USART2_Init+0x50>)
 80020d8:	2200      	movs	r2, #0
 80020da:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 80020dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002108 <MX_USART2_Init+0x50>)
 80020de:	220c      	movs	r2, #12
 80020e0:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 80020e2:	4b09      	ldr	r3, [pc, #36]	@ (8002108 <MX_USART2_Init+0x50>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 80020e8:	4b07      	ldr	r3, [pc, #28]	@ (8002108 <MX_USART2_Init+0x50>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80020ee:	4b06      	ldr	r3, [pc, #24]	@ (8002108 <MX_USART2_Init+0x50>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 80020f4:	4804      	ldr	r0, [pc, #16]	@ (8002108 <MX_USART2_Init+0x50>)
 80020f6:	f005 fb11 	bl	800771c <HAL_USART_Init>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8002100:	f000 f92a 	bl	8002358 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002104:	bf00      	nop
 8002106:	bd80      	pop	{r7, pc}
 8002108:	200005a8 	.word	0x200005a8
 800210c:	40004400 	.word	0x40004400

08002110 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08a      	sub	sp, #40	@ 0x28
 8002114:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002116:	f107 0314 	add.w	r3, r7, #20
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
 8002120:	609a      	str	r2, [r3, #8]
 8002122:	60da      	str	r2, [r3, #12]
 8002124:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	4b46      	ldr	r3, [pc, #280]	@ (8002244 <MX_GPIO_Init+0x134>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212e:	4a45      	ldr	r2, [pc, #276]	@ (8002244 <MX_GPIO_Init+0x134>)
 8002130:	f043 0304 	orr.w	r3, r3, #4
 8002134:	6313      	str	r3, [r2, #48]	@ 0x30
 8002136:	4b43      	ldr	r3, [pc, #268]	@ (8002244 <MX_GPIO_Init+0x134>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	4b3f      	ldr	r3, [pc, #252]	@ (8002244 <MX_GPIO_Init+0x134>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214a:	4a3e      	ldr	r2, [pc, #248]	@ (8002244 <MX_GPIO_Init+0x134>)
 800214c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002150:	6313      	str	r3, [r2, #48]	@ 0x30
 8002152:	4b3c      	ldr	r3, [pc, #240]	@ (8002244 <MX_GPIO_Init+0x134>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	4b38      	ldr	r3, [pc, #224]	@ (8002244 <MX_GPIO_Init+0x134>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002166:	4a37      	ldr	r2, [pc, #220]	@ (8002244 <MX_GPIO_Init+0x134>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6313      	str	r3, [r2, #48]	@ 0x30
 800216e:	4b35      	ldr	r3, [pc, #212]	@ (8002244 <MX_GPIO_Init+0x134>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	607b      	str	r3, [r7, #4]
 800217e:	4b31      	ldr	r3, [pc, #196]	@ (8002244 <MX_GPIO_Init+0x134>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002182:	4a30      	ldr	r2, [pc, #192]	@ (8002244 <MX_GPIO_Init+0x134>)
 8002184:	f043 0302 	orr.w	r3, r3, #2
 8002188:	6313      	str	r3, [r2, #48]	@ 0x30
 800218a:	4b2e      	ldr	r3, [pc, #184]	@ (8002244 <MX_GPIO_Init+0x134>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	607b      	str	r3, [r7, #4]
 8002194:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002196:	2201      	movs	r2, #1
 8002198:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800219c:	482a      	ldr	r0, [pc, #168]	@ (8002248 <MX_GPIO_Init+0x138>)
 800219e:	f001 fb3d 	bl	800381c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RESET_Pin, GPIO_PIN_SET);
 80021a2:	2201      	movs	r2, #1
 80021a4:	2103      	movs	r1, #3
 80021a6:	4829      	ldr	r0, [pc, #164]	@ (800224c <MX_GPIO_Init+0x13c>)
 80021a8:	f001 fb38 	bl	800381c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80021ac:	2200      	movs	r2, #0
 80021ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021b2:	4827      	ldr	r0, [pc, #156]	@ (8002250 <MX_GPIO_Init+0x140>)
 80021b4:	f001 fb32 	bl	800381c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80021b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021be:	2301      	movs	r3, #1
 80021c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c6:	2300      	movs	r3, #0
 80021c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80021ca:	f107 0314 	add.w	r3, r7, #20
 80021ce:	4619      	mov	r1, r3
 80021d0:	481d      	ldr	r0, [pc, #116]	@ (8002248 <MX_GPIO_Init+0x138>)
 80021d2:	f001 f99f 	bl	8003514 <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_Pin RESET_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|RESET_Pin;
 80021d6:	2303      	movs	r3, #3
 80021d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021da:	2301      	movs	r3, #1
 80021dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e2:	2300      	movs	r3, #0
 80021e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e6:	f107 0314 	add.w	r3, r7, #20
 80021ea:	4619      	mov	r1, r3
 80021ec:	4817      	ldr	r0, [pc, #92]	@ (800224c <MX_GPIO_Init+0x13c>)
 80021ee:	f001 f991 	bl	8003514 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 80021f2:	2304      	movs	r3, #4
 80021f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021f6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80021fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	4619      	mov	r1, r3
 8002206:	4811      	ldr	r0, [pc, #68]	@ (800224c <MX_GPIO_Init+0x13c>)
 8002208:	f001 f984 	bl	8003514 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 800220c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002212:	2301      	movs	r3, #1
 8002214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221a:	2300      	movs	r3, #0
 800221c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 800221e:	f107 0314 	add.w	r3, r7, #20
 8002222:	4619      	mov	r1, r3
 8002224:	480a      	ldr	r0, [pc, #40]	@ (8002250 <MX_GPIO_Init+0x140>)
 8002226:	f001 f975 	bl	8003514 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800222a:	2200      	movs	r2, #0
 800222c:	2105      	movs	r1, #5
 800222e:	2008      	movs	r0, #8
 8002230:	f001 f8d4 	bl	80033dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002234:	2008      	movs	r0, #8
 8002236:	f001 f8ed 	bl	8003414 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800223a:	bf00      	nop
 800223c:	3728      	adds	r7, #40	@ 0x28
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40023800 	.word	0x40023800
 8002248:	40020800 	.word	0x40020800
 800224c:	40020400 	.word	0x40020400
 8002250:	40020000 	.word	0x40020000

08002254 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == myLoRa.DIO0_pin) {
 800225e:	4b07      	ldr	r3, [pc, #28]	@ (800227c <HAL_GPIO_EXTI_Callback+0x28>)
 8002260:	8a9b      	ldrh	r3, [r3, #20]
 8002262:	88fa      	ldrh	r2, [r7, #6]
 8002264:	429a      	cmp	r2, r3
 8002266:	d102      	bne.n	800226e <HAL_GPIO_EXTI_Callback+0x1a>
		// This indicates a packet has been received
		// We'll handle it in the main loop
		receivedFlag = 1;
 8002268:	4b05      	ldr	r3, [pc, #20]	@ (8002280 <HAL_GPIO_EXTI_Callback+0x2c>)
 800226a:	2201      	movs	r2, #1
 800226c:	701a      	strb	r2, [r3, #0]
	}
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	20000650 	.word	0x20000650
 8002280:	2000067c 	.word	0x2000067c

08002284 <MPU6050_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_MPU6050_Task */
void MPU6050_Task(void *argument)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800228c:	f00c fa1c 	bl	800e6c8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	    MPU6050_Data(&hi2c1, &MPU6050);
 8002290:	4904      	ldr	r1, [pc, #16]	@ (80022a4 <MPU6050_Task+0x20>)
 8002292:	4805      	ldr	r0, [pc, #20]	@ (80022a8 <MPU6050_Task+0x24>)
 8002294:	f000 fc30 	bl	8002af8 <MPU6050_Data>
	    vTaskDelay(pdMS_TO_TICKS(500));
 8002298:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800229c:	f00a fc3a 	bl	800cb14 <vTaskDelay>
	    MPU6050_Data(&hi2c1, &MPU6050);
 80022a0:	bf00      	nop
 80022a2:	e7f5      	b.n	8002290 <MPU6050_Task+0xc>
 80022a4:	200005f8 	.word	0x200005f8
 80022a8:	200004fc 	.word	0x200004fc

080022ac <LoRa_Sender_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LoRa_Sender_Task */
void LoRa_Sender_Task(void *argument)
{
 80022ac:	b5b0      	push	{r4, r5, r7, lr}
 80022ae:	b08c      	sub	sp, #48	@ 0x30
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LoRa_Sender_Task */
	 const char accidentMessage[] = "Vehicle flipped! Alert received.";
 80022b4:	4b10      	ldr	r3, [pc, #64]	@ (80022f8 <LoRa_Sender_Task+0x4c>)
 80022b6:	f107 040c 	add.w	r4, r7, #12
 80022ba:	461d      	mov	r5, r3
 80022bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022c4:	682b      	ldr	r3, [r5, #0]
 80022c6:	7023      	strb	r3, [r4, #0]
  /* Infinite loop */
  for(;;)
  {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80022c8:	f04f 31ff 	mov.w	r1, #4294967295
 80022cc:	2001      	movs	r0, #1
 80022ce:	f00b f933 	bl	800d538 <ulTaskNotifyTake>
	      if (vehicleFlipped)
 80022d2:	4b0a      	ldr	r3, [pc, #40]	@ (80022fc <LoRa_Sender_Task+0x50>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d008      	beq.n	80022ec <LoRa_Sender_Task+0x40>
	      {
	        sendMessageAndWaitForAck_TX(&myLoRa, (uint8_t*)accidentMessage);
 80022da:	f107 030c 	add.w	r3, r7, #12
 80022de:	4619      	mov	r1, r3
 80022e0:	4807      	ldr	r0, [pc, #28]	@ (8002300 <LoRa_Sender_Task+0x54>)
 80022e2:	f7ff fa75 	bl	80017d0 <sendMessageAndWaitForAck_TX>
	        vehicleFlipped = false;
 80022e6:	4b05      	ldr	r3, [pc, #20]	@ (80022fc <LoRa_Sender_Task+0x50>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	701a      	strb	r2, [r3, #0]
	      }
	      vTaskDelay(pdMS_TO_TICKS(1000));
 80022ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022f0:	f00a fc10 	bl	800cb14 <vTaskDelay>
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80022f4:	e7e8      	b.n	80022c8 <LoRa_Sender_Task+0x1c>
 80022f6:	bf00      	nop
 80022f8:	08012898 	.word	0x08012898
 80022fc:	20000684 	.word	0x20000684
 8002300:	20000650 	.word	0x20000650

08002304 <LoRa_Receiver_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LoRa_Receiver_Task */
void LoRa_Receiver_Task(void *argument)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LoRa_Receiver_Task */
  /* Infinite loop */
  for(;;)
  {
	  if (receivedFlag)
 800230c:	4b07      	ldr	r3, [pc, #28]	@ (800232c <LoRa_Receiver_Task+0x28>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d005      	beq.n	8002320 <LoRa_Receiver_Task+0x1c>
	     	   {
	     	 	 receivedFlag = 0;
 8002314:	4b05      	ldr	r3, [pc, #20]	@ (800232c <LoRa_Receiver_Task+0x28>)
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]
	     	 	 receiveAndsendACK_RX(&myLoRa);
 800231a:	4805      	ldr	r0, [pc, #20]	@ (8002330 <LoRa_Receiver_Task+0x2c>)
 800231c:	f7ff fb98 	bl	8001a50 <receiveAndsendACK_RX>
	     	   }
      vTaskDelay(pdMS_TO_TICKS(1000));
 8002320:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002324:	f00a fbf6 	bl	800cb14 <vTaskDelay>
	  if (receivedFlag)
 8002328:	e7f0      	b.n	800230c <LoRa_Receiver_Task+0x8>
 800232a:	bf00      	nop
 800232c:	2000067c 	.word	0x2000067c
 8002330:	20000650 	.word	0x20000650

08002334 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a04      	ldr	r2, [pc, #16]	@ (8002354 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d101      	bne.n	800234a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002346:	f000 ff4d 	bl	80031e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40000400 	.word	0x40000400

08002358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800235c:	b672      	cpsid	i
}
 800235e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002360:	bf00      	nop
 8002362:	e7fd      	b.n	8002360 <Error_Handler+0x8>

08002364 <MPU6050_Init>:
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

// Initialize MPU6050
uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8002364:	b580      	push	{r7, lr}
 8002366:	b088      	sub	sp, #32
 8002368:	af04      	add	r7, sp, #16
 800236a:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800236c:	2364      	movs	r3, #100	@ 0x64
 800236e:	9302      	str	r3, [sp, #8]
 8002370:	2301      	movs	r3, #1
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	f107 030f 	add.w	r3, r7, #15
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	2301      	movs	r3, #1
 800237c:	2275      	movs	r2, #117	@ 0x75
 800237e:	21d0      	movs	r1, #208	@ 0xd0
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f001 fcbb 	bl	8003cfc <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 is the expected response
 8002386:	7bfb      	ldrb	r3, [r7, #15]
 8002388:	2b68      	cmp	r3, #104	@ 0x68
 800238a:	d13d      	bne.n	8002408 <MPU6050_Init+0xa4>
    {
        // Wake up the sensor by writing 0 to PWR_MGMT_1 register
        Data = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002390:	2364      	movs	r3, #100	@ 0x64
 8002392:	9302      	str	r3, [sp, #8]
 8002394:	2301      	movs	r3, #1
 8002396:	9301      	str	r3, [sp, #4]
 8002398:	f107 030e 	add.w	r3, r7, #14
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	2301      	movs	r3, #1
 80023a0:	226b      	movs	r2, #107	@ 0x6b
 80023a2:	21d0      	movs	r1, #208	@ 0xd0
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f001 fbaf 	bl	8003b08 <HAL_I2C_Mem_Write>

        // Set sample rate to 1 kHz
        Data = 0x07;
 80023aa:	2307      	movs	r3, #7
 80023ac:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80023ae:	2364      	movs	r3, #100	@ 0x64
 80023b0:	9302      	str	r3, [sp, #8]
 80023b2:	2301      	movs	r3, #1
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	f107 030e 	add.w	r3, r7, #14
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	2301      	movs	r3, #1
 80023be:	2219      	movs	r2, #25
 80023c0:	21d0      	movs	r1, #208	@ 0xd0
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f001 fba0 	bl	8003b08 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ±2g range
        Data = 0x00;
 80023c8:	2300      	movs	r3, #0
 80023ca:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80023cc:	2364      	movs	r3, #100	@ 0x64
 80023ce:	9302      	str	r3, [sp, #8]
 80023d0:	2301      	movs	r3, #1
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	f107 030e 	add.w	r3, r7, #14
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	2301      	movs	r3, #1
 80023dc:	221c      	movs	r2, #28
 80023de:	21d0      	movs	r1, #208	@ 0xd0
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f001 fb91 	bl	8003b08 <HAL_I2C_Mem_Write>

        // Set Gyro configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ±250 deg/sec range
        Data = 0x00;
 80023e6:	2300      	movs	r3, #0
 80023e8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80023ea:	2364      	movs	r3, #100	@ 0x64
 80023ec:	9302      	str	r3, [sp, #8]
 80023ee:	2301      	movs	r3, #1
 80023f0:	9301      	str	r3, [sp, #4]
 80023f2:	f107 030e 	add.w	r3, r7, #14
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	2301      	movs	r3, #1
 80023fa:	221b      	movs	r2, #27
 80023fc:	21d0      	movs	r1, #208	@ 0xd0
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f001 fb82 	bl	8003b08 <HAL_I2C_Mem_Write>
        return 0;  // Initialization successful
 8002404:	2300      	movs	r3, #0
 8002406:	e000      	b.n	800240a <MPU6050_Init+0xa6>
    }
    return 1;  // Initialization failed
 8002408:	2301      	movs	r3, #1
}
 800240a:	4618      	mov	r0, r3
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	0000      	movs	r0, r0
 8002414:	0000      	movs	r0, r0
	...

08002418 <MPU6050_Read_All>:
    // Convert raw data to temperature in Celsius
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

// Read all sensor data
void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8002418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800241c:	b094      	sub	sp, #80	@ 0x50
 800241e:	af04      	add	r7, sp, #16
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];  // Buffer for raw data
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8002424:	2364      	movs	r3, #100	@ 0x64
 8002426:	9302      	str	r3, [sp, #8]
 8002428:	230e      	movs	r3, #14
 800242a:	9301      	str	r3, [sp, #4]
 800242c:	f107 0308 	add.w	r3, r7, #8
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	2301      	movs	r3, #1
 8002434:	223b      	movs	r2, #59	@ 0x3b
 8002436:	21d0      	movs	r1, #208	@ 0xd0
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f001 fc5f 	bl	8003cfc <HAL_I2C_Mem_Read>

    // Parse accelerometer data
    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800243e:	7a3b      	ldrb	r3, [r7, #8]
 8002440:	b21b      	sxth	r3, r3
 8002442:	021b      	lsls	r3, r3, #8
 8002444:	b21a      	sxth	r2, r3
 8002446:	7a7b      	ldrb	r3, [r7, #9]
 8002448:	b21b      	sxth	r3, r3
 800244a:	4313      	orrs	r3, r2
 800244c:	b21a      	sxth	r2, r3
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8002452:	7abb      	ldrb	r3, [r7, #10]
 8002454:	b21b      	sxth	r3, r3
 8002456:	021b      	lsls	r3, r3, #8
 8002458:	b21a      	sxth	r2, r3
 800245a:	7afb      	ldrb	r3, [r7, #11]
 800245c:	b21b      	sxth	r3, r3
 800245e:	4313      	orrs	r3, r2
 8002460:	b21a      	sxth	r2, r3
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8002466:	7b3b      	ldrb	r3, [r7, #12]
 8002468:	b21b      	sxth	r3, r3
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	b21a      	sxth	r2, r3
 800246e:	7b7b      	ldrb	r3, [r7, #13]
 8002470:	b21b      	sxth	r3, r3
 8002472:	4313      	orrs	r3, r2
 8002474:	b21a      	sxth	r2, r3
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	809a      	strh	r2, [r3, #4]

    // Parse temperature data
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 800247a:	7bbb      	ldrb	r3, [r7, #14]
 800247c:	b21b      	sxth	r3, r3
 800247e:	021b      	lsls	r3, r3, #8
 8002480:	b21a      	sxth	r2, r3
 8002482:	7bfb      	ldrb	r3, [r7, #15]
 8002484:	b21b      	sxth	r3, r3
 8002486:	4313      	orrs	r3, r2
 8002488:	86fb      	strh	r3, [r7, #54]	@ 0x36

    // Parse gyroscope data
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 800248a:	7c3b      	ldrb	r3, [r7, #16]
 800248c:	b21b      	sxth	r3, r3
 800248e:	021b      	lsls	r3, r3, #8
 8002490:	b21a      	sxth	r2, r3
 8002492:	7c7b      	ldrb	r3, [r7, #17]
 8002494:	b21b      	sxth	r3, r3
 8002496:	4313      	orrs	r3, r2
 8002498:	b21a      	sxth	r2, r3
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 800249e:	7cbb      	ldrb	r3, [r7, #18]
 80024a0:	b21b      	sxth	r3, r3
 80024a2:	021b      	lsls	r3, r3, #8
 80024a4:	b21a      	sxth	r2, r3
 80024a6:	7cfb      	ldrb	r3, [r7, #19]
 80024a8:	b21b      	sxth	r3, r3
 80024aa:	4313      	orrs	r3, r2
 80024ac:	b21a      	sxth	r2, r3
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 80024b2:	7d3b      	ldrb	r3, [r7, #20]
 80024b4:	b21b      	sxth	r3, r3
 80024b6:	021b      	lsls	r3, r3, #8
 80024b8:	b21a      	sxth	r2, r3
 80024ba:	7d7b      	ldrb	r3, [r7, #21]
 80024bc:	b21b      	sxth	r3, r3
 80024be:	4313      	orrs	r3, r2
 80024c0:	b21a      	sxth	r2, r3
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	849a      	strh	r2, [r3, #36]	@ 0x24

    // Convert to proper units
    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe f831 	bl	8000534 <__aeabi_i2d>
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	4bbe      	ldr	r3, [pc, #760]	@ (80027d0 <MPU6050_Read_All+0x3b8>)
 80024d8:	f7fe f9c0 	bl	800085c <__aeabi_ddiv>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	6839      	ldr	r1, [r7, #0]
 80024e2:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe f821 	bl	8000534 <__aeabi_i2d>
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	4bb6      	ldr	r3, [pc, #728]	@ (80027d0 <MPU6050_Read_All+0x3b8>)
 80024f8:	f7fe f9b0 	bl	800085c <__aeabi_ddiv>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	6839      	ldr	r1, [r7, #0]
 8002502:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe f811 	bl	8000534 <__aeabi_i2d>
 8002512:	a3a9      	add	r3, pc, #676	@ (adr r3, 80027b8 <MPU6050_Read_All+0x3a0>)
 8002514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002518:	f7fe f9a0 	bl	800085c <__aeabi_ddiv>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	6839      	ldr	r1, [r7, #0]
 8002522:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8002526:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800252a:	ee07 3a90 	vmov	s15, r3
 800252e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002532:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 80027d4 <MPU6050_Read_All+0x3bc>
 8002536:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800253a:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 80027d8 <MPU6050_Read_All+0x3c0>
 800253e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800254e:	4618      	mov	r0, r3
 8002550:	f7fd fff0 	bl	8000534 <__aeabi_i2d>
 8002554:	a39a      	add	r3, pc, #616	@ (adr r3, 80027c0 <MPU6050_Read_All+0x3a8>)
 8002556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255a:	f7fe f97f 	bl	800085c <__aeabi_ddiv>
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	6839      	ldr	r1, [r7, #0]
 8002564:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 800256e:	4618      	mov	r0, r3
 8002570:	f7fd ffe0 	bl	8000534 <__aeabi_i2d>
 8002574:	a392      	add	r3, pc, #584	@ (adr r3, 80027c0 <MPU6050_Read_All+0x3a8>)
 8002576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257a:	f7fe f96f 	bl	800085c <__aeabi_ddiv>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	6839      	ldr	r1, [r7, #0]
 8002584:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800258e:	4618      	mov	r0, r3
 8002590:	f7fd ffd0 	bl	8000534 <__aeabi_i2d>
 8002594:	a38a      	add	r3, pc, #552	@ (adr r3, 80027c0 <MPU6050_Read_All+0x3a8>)
 8002596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259a:	f7fe f95f 	bl	800085c <__aeabi_ddiv>
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	6839      	ldr	r1, [r7, #0]
 80025a4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman filter calculations
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 80025a8:	f000 fe30 	bl	800320c <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	4b8b      	ldr	r3, [pc, #556]	@ (80027dc <MPU6050_Read_All+0x3c4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fd ffad 	bl	8000514 <__aeabi_ui2d>
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	4b88      	ldr	r3, [pc, #544]	@ (80027e0 <MPU6050_Read_All+0x3c8>)
 80025c0:	f7fe f94c 	bl	800085c <__aeabi_ddiv>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 80025cc:	f000 fe1e 	bl	800320c <HAL_GetTick>
 80025d0:	4603      	mov	r3, r0
 80025d2:	4a82      	ldr	r2, [pc, #520]	@ (80027dc <MPU6050_Read_All+0x3c4>)
 80025d4:	6013      	str	r3, [r2, #0]
    double roll;

    // Calculate roll and pitch
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025dc:	461a      	mov	r2, r3
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025e4:	fb03 f202 	mul.w	r2, r3, r2
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80025ee:	4619      	mov	r1, r3
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80025f6:	fb01 f303 	mul.w	r3, r1, r3
 80025fa:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fd ff99 	bl	8000534 <__aeabi_i2d>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	ec43 2b10 	vmov	d0, r2, r3
 800260a:	f00f fcc5 	bl	8011f98 <sqrt>
 800260e:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 8002612:	f04f 0200 	mov.w	r2, #0
 8002616:	f04f 0300 	mov.w	r3, #0
 800261a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800261e:	f7fe fa5b 	bl	8000ad8 <__aeabi_dcmpeq>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d11f      	bne.n	8002668 <MPU6050_Read_All+0x250>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800262e:	4618      	mov	r0, r3
 8002630:	f7fd ff80 	bl	8000534 <__aeabi_i2d>
 8002634:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002638:	f7fe f910 	bl	800085c <__aeabi_ddiv>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	ec43 2b17 	vmov	d7, r2, r3
 8002644:	eeb0 0a47 	vmov.f32	s0, s14
 8002648:	eef0 0a67 	vmov.f32	s1, s15
 800264c:	f00f fcd0 	bl	8011ff0 <atan>
 8002650:	ec51 0b10 	vmov	r0, r1, d0
 8002654:	a35c      	add	r3, pc, #368	@ (adr r3, 80027c8 <MPU6050_Read_All+0x3b0>)
 8002656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265a:	f7fd ffd5 	bl	8000608 <__aeabi_dmul>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8002666:	e005      	b.n	8002674 <MPU6050_Read_All+0x25c>
    } else {
        roll = 0.0;
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	f04f 0300 	mov.w	r3, #0
 8002670:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	f9b3 3000 	ldrsh.w	r3, [r3]
 800267a:	425b      	negs	r3, r3
 800267c:	4618      	mov	r0, r3
 800267e:	f7fd ff59 	bl	8000534 <__aeabi_i2d>
 8002682:	4682      	mov	sl, r0
 8002684:	468b      	mov	fp, r1
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800268c:	4618      	mov	r0, r3
 800268e:	f7fd ff51 	bl	8000534 <__aeabi_i2d>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	ec43 2b11 	vmov	d1, r2, r3
 800269a:	ec4b ab10 	vmov	d0, sl, fp
 800269e:	f00f fc79 	bl	8011f94 <atan2>
 80026a2:	ec51 0b10 	vmov	r0, r1, d0
 80026a6:	a348      	add	r3, pc, #288	@ (adr r3, 80027c8 <MPU6050_Read_All+0x3b0>)
 80026a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ac:	f7fd ffac 	bl	8000608 <__aeabi_dmul>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    // Handle pitch discontinuity
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	4b49      	ldr	r3, [pc, #292]	@ (80027e4 <MPU6050_Read_All+0x3cc>)
 80026be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026c2:	f7fe fa13 	bl	8000aec <__aeabi_dcmplt>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00a      	beq.n	80026e2 <MPU6050_Read_All+0x2ca>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	4b44      	ldr	r3, [pc, #272]	@ (80027e8 <MPU6050_Read_All+0x3d0>)
 80026d8:	f7fe fa26 	bl	8000b28 <__aeabi_dcmpgt>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d114      	bne.n	800270c <MPU6050_Read_All+0x2f4>
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	4b40      	ldr	r3, [pc, #256]	@ (80027e8 <MPU6050_Read_All+0x3d0>)
 80026e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80026ec:	f7fe fa1c 	bl	8000b28 <__aeabi_dcmpgt>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d015      	beq.n	8002722 <MPU6050_Read_All+0x30a>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	4b38      	ldr	r3, [pc, #224]	@ (80027e4 <MPU6050_Read_All+0x3cc>)
 8002702:	f7fe f9f3 	bl	8000aec <__aeabi_dcmplt>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00a      	beq.n	8002722 <MPU6050_Read_All+0x30a>
        KalmanY.angle = pitch;
 800270c:	4937      	ldr	r1, [pc, #220]	@ (80027ec <MPU6050_Read_All+0x3d4>)
 800270e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002712:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002716:	6839      	ldr	r1, [r7, #0]
 8002718:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800271c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8002720:	e014      	b.n	800274c <MPU6050_Read_All+0x334>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8002728:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 800272c:	eeb0 1a47 	vmov.f32	s2, s14
 8002730:	eef0 1a67 	vmov.f32	s3, s15
 8002734:	ed97 0b06 	vldr	d0, [r7, #24]
 8002738:	482c      	ldr	r0, [pc, #176]	@ (80027ec <MPU6050_Read_All+0x3d4>)
 800273a:	f000 f85b 	bl	80027f4 <Kalman_getAngle>
 800273e:	eeb0 7a40 	vmov.f32	s14, s0
 8002742:	eef0 7a60 	vmov.f32	s15, s1
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }

    // Correct roll direction based on pitch
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8002752:	4690      	mov	r8, r2
 8002754:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	4b22      	ldr	r3, [pc, #136]	@ (80027e8 <MPU6050_Read_All+0x3d0>)
 800275e:	4640      	mov	r0, r8
 8002760:	4649      	mov	r1, r9
 8002762:	f7fe f9e1 	bl	8000b28 <__aeabi_dcmpgt>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d008      	beq.n	800277e <MPU6050_Read_All+0x366>
        DataStruct->Gx = -DataStruct->Gx;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002772:	4614      	mov	r4, r2
 8002774:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8002784:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 8002788:	eeb0 1a47 	vmov.f32	s2, s14
 800278c:	eef0 1a67 	vmov.f32	s3, s15
 8002790:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8002794:	4816      	ldr	r0, [pc, #88]	@ (80027f0 <MPU6050_Read_All+0x3d8>)
 8002796:	f000 f82d 	bl	80027f4 <Kalman_getAngle>
 800279a:	eeb0 7a40 	vmov.f32	s14, s0
 800279e:	eef0 7a60 	vmov.f32	s15, s1
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48

}
 80027a8:	bf00      	nop
 80027aa:	3740      	adds	r7, #64	@ 0x40
 80027ac:	46bd      	mov	sp, r7
 80027ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027b2:	bf00      	nop
 80027b4:	f3af 8000 	nop.w
 80027b8:	00000000 	.word	0x00000000
 80027bc:	40cc2900 	.word	0x40cc2900
 80027c0:	00000000 	.word	0x00000000
 80027c4:	40606000 	.word	0x40606000
 80027c8:	1a63c1f8 	.word	0x1a63c1f8
 80027cc:	404ca5dc 	.word	0x404ca5dc
 80027d0:	40d00000 	.word	0x40d00000
 80027d4:	43aa0000 	.word	0x43aa0000
 80027d8:	42121eb8 	.word	0x42121eb8
 80027dc:	20000680 	.word	0x20000680
 80027e0:	408f4000 	.word	0x408f4000
 80027e4:	c0568000 	.word	0xc0568000
 80027e8:	40568000 	.word	0x40568000
 80027ec:	20000048 	.word	0x20000048
 80027f0:	20000000 	.word	0x20000000

080027f4 <Kalman_getAngle>:
// Kalman filter implementation
double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 80027f4:	b5b0      	push	{r4, r5, r7, lr}
 80027f6:	b096      	sub	sp, #88	@ 0x58
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	61f8      	str	r0, [r7, #28]
 80027fc:	ed87 0b04 	vstr	d0, [r7, #16]
 8002800:	ed87 1b02 	vstr	d1, [r7, #8]
 8002804:	ed87 2b00 	vstr	d2, [r7]
    // Predict step
    double rate = newRate - Kalman->bias;
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800280e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002812:	f7fd fd41 	bl	8000298 <__aeabi_dsub>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002824:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002828:	e9d7 0100 	ldrd	r0, r1, [r7]
 800282c:	f7fd feec 	bl	8000608 <__aeabi_dmul>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4620      	mov	r0, r4
 8002836:	4629      	mov	r1, r5
 8002838:	f7fd fd30 	bl	800029c <__adddf3>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	69f9      	ldr	r1, [r7, #28]
 8002842:	e9c1 2306 	strd	r2, r3, [r1, #24]

    // Update error covariance matrix
    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8002852:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002856:	f7fd fed7 	bl	8000608 <__aeabi_dmul>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4610      	mov	r0, r2
 8002860:	4619      	mov	r1, r3
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002868:	f7fd fd16 	bl	8000298 <__aeabi_dsub>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4610      	mov	r0, r2
 8002872:	4619      	mov	r1, r3
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800287a:	f7fd fd0d 	bl	8000298 <__aeabi_dsub>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	4610      	mov	r0, r2
 8002884:	4619      	mov	r1, r3
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288c:	f7fd fd06 	bl	800029c <__adddf3>
 8002890:	4602      	mov	r2, r0
 8002892:	460b      	mov	r3, r1
 8002894:	4610      	mov	r0, r2
 8002896:	4619      	mov	r1, r3
 8002898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800289c:	f7fd feb4 	bl	8000608 <__aeabi_dmul>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4620      	mov	r0, r4
 80028a6:	4629      	mov	r1, r5
 80028a8:	f7fd fcf8 	bl	800029c <__adddf3>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	69f9      	ldr	r1, [r7, #28]
 80028b2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80028c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028c6:	f7fd fe9f 	bl	8000608 <__aeabi_dmul>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4620      	mov	r0, r4
 80028d0:	4629      	mov	r1, r5
 80028d2:	f7fd fce1 	bl	8000298 <__aeabi_dsub>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	69f9      	ldr	r1, [r7, #28]
 80028dc:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80028ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028f0:	f7fd fe8a 	bl	8000608 <__aeabi_dmul>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4620      	mov	r0, r4
 80028fa:	4629      	mov	r1, r5
 80028fc:	f7fd fccc 	bl	8000298 <__aeabi_dsub>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	69f9      	ldr	r1, [r7, #28]
 8002906:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002916:	e9d7 2300 	ldrd	r2, r3, [r7]
 800291a:	f7fd fe75 	bl	8000608 <__aeabi_dmul>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4620      	mov	r0, r4
 8002924:	4629      	mov	r1, r5
 8002926:	f7fd fcb9 	bl	800029c <__adddf3>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	69f9      	ldr	r1, [r7, #28]
 8002930:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    // Calculate Kalman gain
    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002940:	f7fd fcac 	bl	800029c <__adddf3>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002952:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002956:	f7fd ff81 	bl	800085c <__aeabi_ddiv>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002968:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800296c:	f7fd ff76 	bl	800085c <__aeabi_ddiv>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    // Update step
    double y = newAngle - Kalman->angle;
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800297e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002982:	f7fd fc89 	bl	8000298 <__aeabi_dsub>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002994:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002998:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800299c:	f7fd fe34 	bl	8000608 <__aeabi_dmul>
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4620      	mov	r0, r4
 80029a6:	4629      	mov	r1, r5
 80029a8:	f7fd fc78 	bl	800029c <__adddf3>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	69f9      	ldr	r1, [r7, #28]
 80029b2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80029bc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80029c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80029c4:	f7fd fe20 	bl	8000608 <__aeabi_dmul>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4620      	mov	r0, r4
 80029ce:	4629      	mov	r1, r5
 80029d0:	f7fd fc64 	bl	800029c <__adddf3>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	69f9      	ldr	r1, [r7, #28]
 80029da:	e9c1 2308 	strd	r2, r3, [r1, #32]

    // Update error covariance matrix
    double P00_temp = Kalman->P[0][0];
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80029e4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80029ee:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    Kalman->P[0][0] -= K[0] * P00_temp;
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80029f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80029fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002a00:	f7fd fe02 	bl	8000608 <__aeabi_dmul>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4620      	mov	r0, r4
 8002a0a:	4629      	mov	r1, r5
 8002a0c:	f7fd fc44 	bl	8000298 <__aeabi_dsub>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	69f9      	ldr	r1, [r7, #28]
 8002a16:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8002a20:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002a24:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002a28:	f7fd fdee 	bl	8000608 <__aeabi_dmul>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4620      	mov	r0, r4
 8002a32:	4629      	mov	r1, r5
 8002a34:	f7fd fc30 	bl	8000298 <__aeabi_dsub>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	69f9      	ldr	r1, [r7, #28]
 8002a3e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8002a48:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002a4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002a50:	f7fd fdda 	bl	8000608 <__aeabi_dmul>
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	4620      	mov	r0, r4
 8002a5a:	4629      	mov	r1, r5
 8002a5c:	f7fd fc1c 	bl	8000298 <__aeabi_dsub>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	69f9      	ldr	r1, [r7, #28]
 8002a66:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8002a70:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002a74:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002a78:	f7fd fdc6 	bl	8000608 <__aeabi_dmul>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4620      	mov	r0, r4
 8002a82:	4629      	mov	r1, r5
 8002a84:	f7fd fc08 	bl	8000298 <__aeabi_dsub>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	69f9      	ldr	r1, [r7, #28]
 8002a8e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002a98:	ec43 2b17 	vmov	d7, r2, r3
};
 8002a9c:	eeb0 0a47 	vmov.f32	s0, s14
 8002aa0:	eef0 0a67 	vmov.f32	s1, s15
 8002aa4:	3758      	adds	r7, #88	@ 0x58
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002aac <set_last_read_angle_data>:
double last_x_angle = 0.0;
double last_y_angle = 0.0;
//double last_z_angle = 0.0;

/* Function to update the last read angles */
void set_last_read_angle_data(unsigned long time, double x, double y, double z) {
 8002aac:	b480      	push	{r7}
 8002aae:	b089      	sub	sp, #36	@ 0x24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	61f8      	str	r0, [r7, #28]
 8002ab4:	ed87 0b04 	vstr	d0, [r7, #16]
 8002ab8:	ed87 1b02 	vstr	d1, [r7, #8]
 8002abc:	ed87 2b00 	vstr	d2, [r7]
    last_read_time = time;
 8002ac0:	4a09      	ldr	r2, [pc, #36]	@ (8002ae8 <set_last_read_angle_data+0x3c>)
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	6013      	str	r3, [r2, #0]
    last_x_angle = x;
 8002ac6:	4909      	ldr	r1, [pc, #36]	@ (8002aec <set_last_read_angle_data+0x40>)
 8002ac8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002acc:	e9c1 2300 	strd	r2, r3, [r1]
    last_y_angle = y;
 8002ad0:	4907      	ldr	r1, [pc, #28]	@ (8002af0 <set_last_read_angle_data+0x44>)
 8002ad2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ad6:	e9c1 2300 	strd	r2, r3, [r1]
 //   last_z_angle = z;
}
 8002ada:	bf00      	nop
 8002adc:	3724      	adds	r7, #36	@ 0x24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	20000688 	.word	0x20000688
 8002aec:	20000690 	.word	0x20000690
 8002af0:	20000698 	.word	0x20000698
 8002af4:	00000000 	.word	0x00000000

08002af8 <MPU6050_Data>:
//double get_last_z_angle() {
//    return last_z_angle;
//}

/* Function to handle MPU6050 sensor readings and processing */
void MPU6050_Data(I2C_HandleTypeDef *I2Cx, MPU6050_t *MPU6050) {
 8002af8:	b5b0      	push	{r4, r5, r7, lr}
 8002afa:	b08a      	sub	sp, #40	@ 0x28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
    MPU6050_Read_All(I2Cx, MPU6050);
 8002b02:	68b9      	ldr	r1, [r7, #8]
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f7ff fc87 	bl	8002418 <MPU6050_Read_All>
    double angle_x = MPU6050->KalmanAngleX;
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8002b10:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double angle_y = MPU6050->KalmanAngleY;
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8002b1a:	e9c7 2306 	strd	r2, r3, [r7, #24]


    // Check if the vehicle's angle exceeds a certain threshold (e.g., 45 degrees)
      if (fabs(angle_x) > 45.0 || fabs(angle_y) > 45.0) {
 8002b1e:	6a3b      	ldr	r3, [r7, #32]
 8002b20:	603b      	str	r3, [r7, #0]
 8002b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b24:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b28:	607b      	str	r3, [r7, #4]
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	4b22      	ldr	r3, [pc, #136]	@ (8002bb8 <MPU6050_Data+0xc0>)
 8002b30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b34:	f7fd fff8 	bl	8000b28 <__aeabi_dcmpgt>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10d      	bne.n	8002b5a <MPU6050_Data+0x62>
 8002b3e:	69bc      	ldr	r4, [r7, #24]
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8002b46:	f04f 0200 	mov.w	r2, #0
 8002b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb8 <MPU6050_Data+0xc0>)
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	4629      	mov	r1, r5
 8002b50:	f7fd ffea 	bl	8000b28 <__aeabi_dcmpgt>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d017      	beq.n	8002b8a <MPU6050_Data+0x92>
    	  vehicleFlipped = true;  // Set the vehicleFlipped flag
 8002b5a:	4b18      	ldr	r3, [pc, #96]	@ (8002bbc <MPU6050_Data+0xc4>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	701a      	strb	r2, [r3, #0]
    	   BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]

    	    // Send a message to the LoRa task
    	   vTaskNotifyGiveFromISR(LoRaSenderTaskHandle, &xHigherPriorityTaskWoken);
 8002b64:	4b16      	ldr	r3, [pc, #88]	@ (8002bc0 <MPU6050_Data+0xc8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f107 0214 	add.w	r2, r7, #20
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f00a fd2a 	bl	800d5c8 <vTaskNotifyGiveFromISR>

    	    if (xHigherPriorityTaskWoken) {
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d007      	beq.n	8002b8a <MPU6050_Data+0x92>
    	        taskYIELD();
 8002b7a:	4b12      	ldr	r3, [pc, #72]	@ (8002bc4 <MPU6050_Data+0xcc>)
 8002b7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	f3bf 8f4f 	dsb	sy
 8002b86:	f3bf 8f6f 	isb	sy
         // const uint8_t accidentMessage[] = "Vehicle flipped! Alert received.";
          //sendMessageAndWaitForAck_TX(&myLoRa, accidentMessage);


    // Update the last read angles
    set_last_read_angle_data(HAL_GetTick(), angle_x, angle_y, 0.0);
 8002b8a:	f000 fb3f 	bl	800320c <HAL_GetTick>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	ed9f 2b07 	vldr	d2, [pc, #28]	@ 8002bb0 <MPU6050_Data+0xb8>
 8002b94:	ed97 1b06 	vldr	d1, [r7, #24]
 8002b98:	ed97 0b08 	vldr	d0, [r7, #32]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff ff85 	bl	8002aac <set_last_read_angle_data>
//                   angle_y,
//                  MPU6050->Temperature);
//
//  CDC_Transmit_FS((uint8_t*)datax, strlen(datax));
//
}
 8002ba2:	bf00      	nop
 8002ba4:	3728      	adds	r7, #40	@ 0x28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bdb0      	pop	{r4, r5, r7, pc}
 8002baa:	bf00      	nop
 8002bac:	f3af 8000 	nop.w
	...
 8002bb8:	40468000 	.word	0x40468000
 8002bbc:	20000684 	.word	0x20000684
 8002bc0:	200005f0 	.word	0x200005f0
 8002bc4:	e000ed04 	.word	0xe000ed04

08002bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	607b      	str	r3, [r7, #4]
 8002bd2:	4b12      	ldr	r3, [pc, #72]	@ (8002c1c <HAL_MspInit+0x54>)
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd6:	4a11      	ldr	r2, [pc, #68]	@ (8002c1c <HAL_MspInit+0x54>)
 8002bd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bde:	4b0f      	ldr	r3, [pc, #60]	@ (8002c1c <HAL_MspInit+0x54>)
 8002be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002be6:	607b      	str	r3, [r7, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	603b      	str	r3, [r7, #0]
 8002bee:	4b0b      	ldr	r3, [pc, #44]	@ (8002c1c <HAL_MspInit+0x54>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8002c1c <HAL_MspInit+0x54>)
 8002bf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bfa:	4b08      	ldr	r3, [pc, #32]	@ (8002c1c <HAL_MspInit+0x54>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c02:	603b      	str	r3, [r7, #0]
 8002c04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c06:	2200      	movs	r2, #0
 8002c08:	210f      	movs	r1, #15
 8002c0a:	f06f 0001 	mvn.w	r0, #1
 8002c0e:	f000 fbe5 	bl	80033dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c12:	bf00      	nop
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40023800 	.word	0x40023800

08002c20 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a0b      	ldr	r2, [pc, #44]	@ (8002c5c <HAL_CRC_MspInit+0x3c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d10d      	bne.n	8002c4e <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	4b0a      	ldr	r3, [pc, #40]	@ (8002c60 <HAL_CRC_MspInit+0x40>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3a:	4a09      	ldr	r2, [pc, #36]	@ (8002c60 <HAL_CRC_MspInit+0x40>)
 8002c3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c42:	4b07      	ldr	r3, [pc, #28]	@ (8002c60 <HAL_CRC_MspInit+0x40>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8002c4e:	bf00      	nop
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	40023000 	.word	0x40023000
 8002c60:	40023800 	.word	0x40023800

08002c64 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08a      	sub	sp, #40	@ 0x28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6c:	f107 0314 	add.w	r3, r7, #20
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	60da      	str	r2, [r3, #12]
 8002c7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a19      	ldr	r2, [pc, #100]	@ (8002ce8 <HAL_I2C_MspInit+0x84>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d12b      	bne.n	8002cde <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	4b18      	ldr	r3, [pc, #96]	@ (8002cec <HAL_I2C_MspInit+0x88>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8e:	4a17      	ldr	r2, [pc, #92]	@ (8002cec <HAL_I2C_MspInit+0x88>)
 8002c90:	f043 0302 	orr.w	r3, r3, #2
 8002c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c96:	4b15      	ldr	r3, [pc, #84]	@ (8002cec <HAL_I2C_MspInit+0x88>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ca2:	23c0      	movs	r3, #192	@ 0xc0
 8002ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ca6:	2312      	movs	r3, #18
 8002ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cb2:	2304      	movs	r3, #4
 8002cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb6:	f107 0314 	add.w	r3, r7, #20
 8002cba:	4619      	mov	r1, r3
 8002cbc:	480c      	ldr	r0, [pc, #48]	@ (8002cf0 <HAL_I2C_MspInit+0x8c>)
 8002cbe:	f000 fc29 	bl	8003514 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	4b09      	ldr	r3, [pc, #36]	@ (8002cec <HAL_I2C_MspInit+0x88>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cca:	4a08      	ldr	r2, [pc, #32]	@ (8002cec <HAL_I2C_MspInit+0x88>)
 8002ccc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002cd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cd2:	4b06      	ldr	r3, [pc, #24]	@ (8002cec <HAL_I2C_MspInit+0x88>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002cde:	bf00      	nop
 8002ce0:	3728      	adds	r7, #40	@ 0x28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40005400 	.word	0x40005400
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	40020400 	.word	0x40020400

08002cf4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08a      	sub	sp, #40	@ 0x28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cfc:	f107 0314 	add.w	r3, r7, #20
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	60da      	str	r2, [r3, #12]
 8002d0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a19      	ldr	r2, [pc, #100]	@ (8002d78 <HAL_SPI_MspInit+0x84>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d12b      	bne.n	8002d6e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	4b18      	ldr	r3, [pc, #96]	@ (8002d7c <HAL_SPI_MspInit+0x88>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1e:	4a17      	ldr	r2, [pc, #92]	@ (8002d7c <HAL_SPI_MspInit+0x88>)
 8002d20:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d24:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d26:	4b15      	ldr	r3, [pc, #84]	@ (8002d7c <HAL_SPI_MspInit+0x88>)
 8002d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	4b11      	ldr	r3, [pc, #68]	@ (8002d7c <HAL_SPI_MspInit+0x88>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3a:	4a10      	ldr	r2, [pc, #64]	@ (8002d7c <HAL_SPI_MspInit+0x88>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d42:	4b0e      	ldr	r3, [pc, #56]	@ (8002d7c <HAL_SPI_MspInit+0x88>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002d4e:	23e0      	movs	r3, #224	@ 0xe0
 8002d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d52:	2302      	movs	r3, #2
 8002d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d5e:	2305      	movs	r3, #5
 8002d60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d62:	f107 0314 	add.w	r3, r7, #20
 8002d66:	4619      	mov	r1, r3
 8002d68:	4805      	ldr	r0, [pc, #20]	@ (8002d80 <HAL_SPI_MspInit+0x8c>)
 8002d6a:	f000 fbd3 	bl	8003514 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002d6e:	bf00      	nop
 8002d70:	3728      	adds	r7, #40	@ 0x28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40013000 	.word	0x40013000
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	40020000 	.word	0x40020000

08002d84 <HAL_USART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param husart: USART handle pointer
  * @retval None
  */
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08a      	sub	sp, #40	@ 0x28
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d8c:	f107 0314 	add.w	r3, r7, #20
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	60da      	str	r2, [r3, #12]
 8002d9a:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a1d      	ldr	r2, [pc, #116]	@ (8002e18 <HAL_USART_MspInit+0x94>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d133      	bne.n	8002e0e <HAL_USART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	613b      	str	r3, [r7, #16]
 8002daa:	4b1c      	ldr	r3, [pc, #112]	@ (8002e1c <HAL_USART_MspInit+0x98>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dae:	4a1b      	ldr	r2, [pc, #108]	@ (8002e1c <HAL_USART_MspInit+0x98>)
 8002db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002db4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002db6:	4b19      	ldr	r3, [pc, #100]	@ (8002e1c <HAL_USART_MspInit+0x98>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dbe:	613b      	str	r3, [r7, #16]
 8002dc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	4b15      	ldr	r3, [pc, #84]	@ (8002e1c <HAL_USART_MspInit+0x98>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dca:	4a14      	ldr	r2, [pc, #80]	@ (8002e1c <HAL_USART_MspInit+0x98>)
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dd2:	4b12      	ldr	r3, [pc, #72]	@ (8002e1c <HAL_USART_MspInit+0x98>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8002dde:	231c      	movs	r3, #28
 8002de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de2:	2302      	movs	r3, #2
 8002de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dea:	2303      	movs	r3, #3
 8002dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002dee:	2307      	movs	r3, #7
 8002df0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df2:	f107 0314 	add.w	r3, r7, #20
 8002df6:	4619      	mov	r1, r3
 8002df8:	4809      	ldr	r0, [pc, #36]	@ (8002e20 <HAL_USART_MspInit+0x9c>)
 8002dfa:	f000 fb8b 	bl	8003514 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2105      	movs	r1, #5
 8002e02:	2026      	movs	r0, #38	@ 0x26
 8002e04:	f000 faea 	bl	80033dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e08:	2026      	movs	r0, #38	@ 0x26
 8002e0a:	f000 fb03 	bl	8003414 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002e0e:	bf00      	nop
 8002e10:	3728      	adds	r7, #40	@ 0x28
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40004400 	.word	0x40004400
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	40020000 	.word	0x40020000

08002e24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08e      	sub	sp, #56	@ 0x38
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002e34:	2300      	movs	r3, #0
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	4b33      	ldr	r3, [pc, #204]	@ (8002f08 <HAL_InitTick+0xe4>)
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3c:	4a32      	ldr	r2, [pc, #200]	@ (8002f08 <HAL_InitTick+0xe4>)
 8002e3e:	f043 0302 	orr.w	r3, r3, #2
 8002e42:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e44:	4b30      	ldr	r3, [pc, #192]	@ (8002f08 <HAL_InitTick+0xe4>)
 8002e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e50:	f107 0210 	add.w	r2, r7, #16
 8002e54:	f107 0314 	add.w	r3, r7, #20
 8002e58:	4611      	mov	r1, r2
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f003 fbde 	bl	800661c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d103      	bne.n	8002e72 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002e6a:	f003 fbaf 	bl	80065cc <HAL_RCC_GetPCLK1Freq>
 8002e6e:	6378      	str	r0, [r7, #52]	@ 0x34
 8002e70:	e004      	b.n	8002e7c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002e72:	f003 fbab 	bl	80065cc <HAL_RCC_GetPCLK1Freq>
 8002e76:	4603      	mov	r3, r0
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e7e:	4a23      	ldr	r2, [pc, #140]	@ (8002f0c <HAL_InitTick+0xe8>)
 8002e80:	fba2 2303 	umull	r2, r3, r2, r3
 8002e84:	0c9b      	lsrs	r3, r3, #18
 8002e86:	3b01      	subs	r3, #1
 8002e88:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8002e8a:	4b21      	ldr	r3, [pc, #132]	@ (8002f10 <HAL_InitTick+0xec>)
 8002e8c:	4a21      	ldr	r2, [pc, #132]	@ (8002f14 <HAL_InitTick+0xf0>)
 8002e8e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8002e90:	4b1f      	ldr	r3, [pc, #124]	@ (8002f10 <HAL_InitTick+0xec>)
 8002e92:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002e96:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8002e98:	4a1d      	ldr	r2, [pc, #116]	@ (8002f10 <HAL_InitTick+0xec>)
 8002e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e9c:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8002e9e:	4b1c      	ldr	r3, [pc, #112]	@ (8002f10 <HAL_InitTick+0xec>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8002f10 <HAL_InitTick+0xec>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eaa:	4b19      	ldr	r3, [pc, #100]	@ (8002f10 <HAL_InitTick+0xec>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8002eb0:	4817      	ldr	r0, [pc, #92]	@ (8002f10 <HAL_InitTick+0xec>)
 8002eb2:	f004 f9c5 	bl	8007240 <HAL_TIM_Base_Init>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002ebc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d11b      	bne.n	8002efc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8002ec4:	4812      	ldr	r0, [pc, #72]	@ (8002f10 <HAL_InitTick+0xec>)
 8002ec6:	f004 fa15 	bl	80072f4 <HAL_TIM_Base_Start_IT>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002ed0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d111      	bne.n	8002efc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ed8:	201d      	movs	r0, #29
 8002eda:	f000 fa9b 	bl	8003414 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b0f      	cmp	r3, #15
 8002ee2:	d808      	bhi.n	8002ef6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	201d      	movs	r0, #29
 8002eea:	f000 fa77 	bl	80033dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002eee:	4a0a      	ldr	r2, [pc, #40]	@ (8002f18 <HAL_InitTick+0xf4>)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6013      	str	r3, [r2, #0]
 8002ef4:	e002      	b.n	8002efc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002efc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3738      	adds	r7, #56	@ 0x38
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	431bde83 	.word	0x431bde83
 8002f10:	200006a0 	.word	0x200006a0
 8002f14:	40000400 	.word	0x40000400
 8002f18:	20000094 	.word	0x20000094

08002f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f20:	bf00      	nop
 8002f22:	e7fd      	b.n	8002f20 <NMI_Handler+0x4>

08002f24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f28:	bf00      	nop
 8002f2a:	e7fd      	b.n	8002f28 <HardFault_Handler+0x4>

08002f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f30:	bf00      	nop
 8002f32:	e7fd      	b.n	8002f30 <MemManage_Handler+0x4>

08002f34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f38:	bf00      	nop
 8002f3a:	e7fd      	b.n	8002f38 <BusFault_Handler+0x4>

08002f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f40:	bf00      	nop
 8002f42:	e7fd      	b.n	8002f40 <UsageFault_Handler+0x4>

08002f44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f48:	bf00      	nop
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8002f56:	2004      	movs	r0, #4
 8002f58:	f000 fc7a 	bl	8003850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002f5c:	bf00      	nop
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f64:	4802      	ldr	r0, [pc, #8]	@ (8002f70 <TIM3_IRQHandler+0x10>)
 8002f66:	f004 fa27 	bl	80073b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002f6a:	bf00      	nop
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	200006a0 	.word	0x200006a0

08002f74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_USART_IRQHandler(&husart2);
 8002f78:	4802      	ldr	r0, [pc, #8]	@ (8002f84 <USART2_IRQHandler+0x10>)
 8002f7a:	f004 fc11 	bl	80077a0 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f7e:	bf00      	nop
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	200005a8 	.word	0x200005a8

08002f88 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002f8c:	4802      	ldr	r0, [pc, #8]	@ (8002f98 <OTG_FS_IRQHandler+0x10>)
 8002f8e:	f001 fddf 	bl	8004b50 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002f92:	bf00      	nop
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20005d20 	.word	0x20005d20

08002f9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return 1;
 8002fa0:	2301      	movs	r3, #1
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <_kill>:

int _kill(int pid, int sig)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002fb6:	f00c ff71 	bl	800fe9c <__errno>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2216      	movs	r2, #22
 8002fbe:	601a      	str	r2, [r3, #0]
  return -1;
 8002fc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <_exit>:

void _exit (int status)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7ff ffe7 	bl	8002fac <_kill>
  while (1) {}    /* Make sure we hang here */
 8002fde:	bf00      	nop
 8002fe0:	e7fd      	b.n	8002fde <_exit+0x12>

08002fe2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b086      	sub	sp, #24
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	60f8      	str	r0, [r7, #12]
 8002fea:	60b9      	str	r1, [r7, #8]
 8002fec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fee:	2300      	movs	r3, #0
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	e00a      	b.n	800300a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ff4:	f3af 8000 	nop.w
 8002ff8:	4601      	mov	r1, r0
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	60ba      	str	r2, [r7, #8]
 8003000:	b2ca      	uxtb	r2, r1
 8003002:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	3301      	adds	r3, #1
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	429a      	cmp	r2, r3
 8003010:	dbf0      	blt.n	8002ff4 <_read+0x12>
  }

  return len;
 8003012:	687b      	ldr	r3, [r7, #4]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	e009      	b.n	8003042 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	60ba      	str	r2, [r7, #8]
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	3301      	adds	r3, #1
 8003040:	617b      	str	r3, [r7, #20]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	429a      	cmp	r2, r3
 8003048:	dbf1      	blt.n	800302e <_write+0x12>
  }
  return len;
 800304a:	687b      	ldr	r3, [r7, #4]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3718      	adds	r7, #24
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <_close>:

int _close(int file)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800305c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800307c:	605a      	str	r2, [r3, #4]
  return 0;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <_isatty>:

int _isatty(int file)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003094:	2301      	movs	r3, #1
}
 8003096:	4618      	mov	r0, r3
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b085      	sub	sp, #20
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030c4:	4a14      	ldr	r2, [pc, #80]	@ (8003118 <_sbrk+0x5c>)
 80030c6:	4b15      	ldr	r3, [pc, #84]	@ (800311c <_sbrk+0x60>)
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030d0:	4b13      	ldr	r3, [pc, #76]	@ (8003120 <_sbrk+0x64>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d102      	bne.n	80030de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030d8:	4b11      	ldr	r3, [pc, #68]	@ (8003120 <_sbrk+0x64>)
 80030da:	4a12      	ldr	r2, [pc, #72]	@ (8003124 <_sbrk+0x68>)
 80030dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030de:	4b10      	ldr	r3, [pc, #64]	@ (8003120 <_sbrk+0x64>)
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4413      	add	r3, r2
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d207      	bcs.n	80030fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030ec:	f00c fed6 	bl	800fe9c <__errno>
 80030f0:	4603      	mov	r3, r0
 80030f2:	220c      	movs	r2, #12
 80030f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030f6:	f04f 33ff 	mov.w	r3, #4294967295
 80030fa:	e009      	b.n	8003110 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030fc:	4b08      	ldr	r3, [pc, #32]	@ (8003120 <_sbrk+0x64>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003102:	4b07      	ldr	r3, [pc, #28]	@ (8003120 <_sbrk+0x64>)
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4413      	add	r3, r2
 800310a:	4a05      	ldr	r2, [pc, #20]	@ (8003120 <_sbrk+0x64>)
 800310c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800310e:	68fb      	ldr	r3, [r7, #12]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	20010000 	.word	0x20010000
 800311c:	00000400 	.word	0x00000400
 8003120:	200006e8 	.word	0x200006e8
 8003124:	20006570 	.word	0x20006570

08003128 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800312c:	4b06      	ldr	r3, [pc, #24]	@ (8003148 <SystemInit+0x20>)
 800312e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003132:	4a05      	ldr	r2, [pc, #20]	@ (8003148 <SystemInit+0x20>)
 8003134:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003138:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800313c:	bf00      	nop
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	e000ed00 	.word	0xe000ed00

0800314c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800314c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003184 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003150:	f7ff ffea 	bl	8003128 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003154:	480c      	ldr	r0, [pc, #48]	@ (8003188 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003156:	490d      	ldr	r1, [pc, #52]	@ (800318c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003158:	4a0d      	ldr	r2, [pc, #52]	@ (8003190 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800315a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800315c:	e002      	b.n	8003164 <LoopCopyDataInit>

0800315e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800315e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003162:	3304      	adds	r3, #4

08003164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003168:	d3f9      	bcc.n	800315e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800316a:	4a0a      	ldr	r2, [pc, #40]	@ (8003194 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800316c:	4c0a      	ldr	r4, [pc, #40]	@ (8003198 <LoopFillZerobss+0x22>)
  movs r3, #0
 800316e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003170:	e001      	b.n	8003176 <LoopFillZerobss>

08003172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003174:	3204      	adds	r2, #4

08003176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003178:	d3fb      	bcc.n	8003172 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800317a:	f00c fe95 	bl	800fea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800317e:	f7fe fe4d 	bl	8001e1c <main>
  bx  lr    
 8003182:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003184:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800318c:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8003190:	08012dc8 	.word	0x08012dc8
  ldr r2, =_sbss
 8003194:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8003198:	20006570 	.word	0x20006570

0800319c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800319c:	e7fe      	b.n	800319c <ADC_IRQHandler>
	...

080031a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031a4:	4b0e      	ldr	r3, [pc, #56]	@ (80031e0 <HAL_Init+0x40>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a0d      	ldr	r2, [pc, #52]	@ (80031e0 <HAL_Init+0x40>)
 80031aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031b0:	4b0b      	ldr	r3, [pc, #44]	@ (80031e0 <HAL_Init+0x40>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a0a      	ldr	r2, [pc, #40]	@ (80031e0 <HAL_Init+0x40>)
 80031b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80031ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031bc:	4b08      	ldr	r3, [pc, #32]	@ (80031e0 <HAL_Init+0x40>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a07      	ldr	r2, [pc, #28]	@ (80031e0 <HAL_Init+0x40>)
 80031c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031c8:	2003      	movs	r0, #3
 80031ca:	f000 f8fc 	bl	80033c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031ce:	200f      	movs	r0, #15
 80031d0:	f7ff fe28 	bl	8002e24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031d4:	f7ff fcf8 	bl	8002bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40023c00 	.word	0x40023c00

080031e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031e8:	4b06      	ldr	r3, [pc, #24]	@ (8003204 <HAL_IncTick+0x20>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	461a      	mov	r2, r3
 80031ee:	4b06      	ldr	r3, [pc, #24]	@ (8003208 <HAL_IncTick+0x24>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4413      	add	r3, r2
 80031f4:	4a04      	ldr	r2, [pc, #16]	@ (8003208 <HAL_IncTick+0x24>)
 80031f6:	6013      	str	r3, [r2, #0]
}
 80031f8:	bf00      	nop
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	20000098 	.word	0x20000098
 8003208:	200006ec 	.word	0x200006ec

0800320c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  return uwTick;
 8003210:	4b03      	ldr	r3, [pc, #12]	@ (8003220 <HAL_GetTick+0x14>)
 8003212:	681b      	ldr	r3, [r3, #0]
}
 8003214:	4618      	mov	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	200006ec 	.word	0x200006ec

08003224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800322c:	f7ff ffee 	bl	800320c <HAL_GetTick>
 8003230:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323c:	d005      	beq.n	800324a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800323e:	4b0a      	ldr	r3, [pc, #40]	@ (8003268 <HAL_Delay+0x44>)
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	461a      	mov	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4413      	add	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800324a:	bf00      	nop
 800324c:	f7ff ffde 	bl	800320c <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	429a      	cmp	r2, r3
 800325a:	d8f7      	bhi.n	800324c <HAL_Delay+0x28>
  {
  }
}
 800325c:	bf00      	nop
 800325e:	bf00      	nop
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20000098 	.word	0x20000098

0800326c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800327c:	4b0c      	ldr	r3, [pc, #48]	@ (80032b0 <__NVIC_SetPriorityGrouping+0x44>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003288:	4013      	ands	r3, r2
 800328a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003294:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003298:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800329c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800329e:	4a04      	ldr	r2, [pc, #16]	@ (80032b0 <__NVIC_SetPriorityGrouping+0x44>)
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	60d3      	str	r3, [r2, #12]
}
 80032a4:	bf00      	nop
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	e000ed00 	.word	0xe000ed00

080032b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032b8:	4b04      	ldr	r3, [pc, #16]	@ (80032cc <__NVIC_GetPriorityGrouping+0x18>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	0a1b      	lsrs	r3, r3, #8
 80032be:	f003 0307 	and.w	r3, r3, #7
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	e000ed00 	.word	0xe000ed00

080032d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	4603      	mov	r3, r0
 80032d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	db0b      	blt.n	80032fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032e2:	79fb      	ldrb	r3, [r7, #7]
 80032e4:	f003 021f 	and.w	r2, r3, #31
 80032e8:	4907      	ldr	r1, [pc, #28]	@ (8003308 <__NVIC_EnableIRQ+0x38>)
 80032ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	2001      	movs	r0, #1
 80032f2:	fa00 f202 	lsl.w	r2, r0, r2
 80032f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	e000e100 	.word	0xe000e100

0800330c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	4603      	mov	r3, r0
 8003314:	6039      	str	r1, [r7, #0]
 8003316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331c:	2b00      	cmp	r3, #0
 800331e:	db0a      	blt.n	8003336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	b2da      	uxtb	r2, r3
 8003324:	490c      	ldr	r1, [pc, #48]	@ (8003358 <__NVIC_SetPriority+0x4c>)
 8003326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332a:	0112      	lsls	r2, r2, #4
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	440b      	add	r3, r1
 8003330:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003334:	e00a      	b.n	800334c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	b2da      	uxtb	r2, r3
 800333a:	4908      	ldr	r1, [pc, #32]	@ (800335c <__NVIC_SetPriority+0x50>)
 800333c:	79fb      	ldrb	r3, [r7, #7]
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	3b04      	subs	r3, #4
 8003344:	0112      	lsls	r2, r2, #4
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	440b      	add	r3, r1
 800334a:	761a      	strb	r2, [r3, #24]
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	e000e100 	.word	0xe000e100
 800335c:	e000ed00 	.word	0xe000ed00

08003360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003360:	b480      	push	{r7}
 8003362:	b089      	sub	sp, #36	@ 0x24
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	f1c3 0307 	rsb	r3, r3, #7
 800337a:	2b04      	cmp	r3, #4
 800337c:	bf28      	it	cs
 800337e:	2304      	movcs	r3, #4
 8003380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	3304      	adds	r3, #4
 8003386:	2b06      	cmp	r3, #6
 8003388:	d902      	bls.n	8003390 <NVIC_EncodePriority+0x30>
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	3b03      	subs	r3, #3
 800338e:	e000      	b.n	8003392 <NVIC_EncodePriority+0x32>
 8003390:	2300      	movs	r3, #0
 8003392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003394:	f04f 32ff 	mov.w	r2, #4294967295
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	43da      	mvns	r2, r3
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	401a      	ands	r2, r3
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033a8:	f04f 31ff 	mov.w	r1, #4294967295
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	fa01 f303 	lsl.w	r3, r1, r3
 80033b2:	43d9      	mvns	r1, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b8:	4313      	orrs	r3, r2
         );
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3724      	adds	r7, #36	@ 0x24
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b082      	sub	sp, #8
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7ff ff4c 	bl	800326c <__NVIC_SetPriorityGrouping>
}
 80033d4:	bf00      	nop
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
 80033e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033ee:	f7ff ff61 	bl	80032b4 <__NVIC_GetPriorityGrouping>
 80033f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	68b9      	ldr	r1, [r7, #8]
 80033f8:	6978      	ldr	r0, [r7, #20]
 80033fa:	f7ff ffb1 	bl	8003360 <NVIC_EncodePriority>
 80033fe:	4602      	mov	r2, r0
 8003400:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003404:	4611      	mov	r1, r2
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff ff80 	bl	800330c <__NVIC_SetPriority>
}
 800340c:	bf00      	nop
 800340e:	3718      	adds	r7, #24
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800341e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff ff54 	bl	80032d0 <__NVIC_EnableIRQ>
}
 8003428:	bf00      	nop
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e00e      	b.n	8003460 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	795b      	ldrb	r3, [r3, #5]
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d105      	bne.n	8003458 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff fbe4 	bl	8002c20 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8003468:	b480      	push	{r7}
 800346a:	b087      	sub	sp, #28
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8003474:	2300      	movs	r3, #0
 8003476:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2202      	movs	r2, #2
 800347c:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f042 0201 	orr.w	r2, r2, #1
 800348c:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	e00a      	b.n	80034aa <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	441a      	add	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6812      	ldr	r2, [r2, #0]
 80034a2:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	3301      	adds	r3, #1
 80034a8:	617b      	str	r3, [r7, #20]
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d3f0      	bcc.n	8003494 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2201      	movs	r2, #1
 80034be:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80034c0:	693b      	ldr	r3, [r7, #16]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	371c      	adds	r7, #28
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d004      	beq.n	80034ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2280      	movs	r2, #128	@ 0x80
 80034e6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e00c      	b.n	8003506 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2205      	movs	r2, #5
 80034f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0201 	bic.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
	...

08003514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003514:	b480      	push	{r7}
 8003516:	b089      	sub	sp, #36	@ 0x24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003522:	2300      	movs	r3, #0
 8003524:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003526:	2300      	movs	r3, #0
 8003528:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800352a:	2300      	movs	r3, #0
 800352c:	61fb      	str	r3, [r7, #28]
 800352e:	e159      	b.n	80037e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003530:	2201      	movs	r2, #1
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	4013      	ands	r3, r2
 8003542:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	429a      	cmp	r2, r3
 800354a:	f040 8148 	bne.w	80037de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f003 0303 	and.w	r3, r3, #3
 8003556:	2b01      	cmp	r3, #1
 8003558:	d005      	beq.n	8003566 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003562:	2b02      	cmp	r3, #2
 8003564:	d130      	bne.n	80035c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	2203      	movs	r2, #3
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	43db      	mvns	r3, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4013      	ands	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	4313      	orrs	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800359c:	2201      	movs	r2, #1
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	43db      	mvns	r3, r3
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	4013      	ands	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	091b      	lsrs	r3, r3, #4
 80035b2:	f003 0201 	and.w	r2, r3, #1
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	4313      	orrs	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	2b03      	cmp	r3, #3
 80035d2:	d017      	beq.n	8003604 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	2203      	movs	r2, #3
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	43db      	mvns	r3, r3
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4013      	ands	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f003 0303 	and.w	r3, r3, #3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d123      	bne.n	8003658 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	08da      	lsrs	r2, r3, #3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3208      	adds	r2, #8
 8003618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800361c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	220f      	movs	r2, #15
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43db      	mvns	r3, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4013      	ands	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4313      	orrs	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	08da      	lsrs	r2, r3, #3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3208      	adds	r2, #8
 8003652:	69b9      	ldr	r1, [r7, #24]
 8003654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	2203      	movs	r2, #3
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	43db      	mvns	r3, r3
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4013      	ands	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f003 0203 	and.w	r2, r3, #3
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	4313      	orrs	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80a2 	beq.w	80037de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800369a:	2300      	movs	r3, #0
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	4b57      	ldr	r3, [pc, #348]	@ (80037fc <HAL_GPIO_Init+0x2e8>)
 80036a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a2:	4a56      	ldr	r2, [pc, #344]	@ (80037fc <HAL_GPIO_Init+0x2e8>)
 80036a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80036aa:	4b54      	ldr	r3, [pc, #336]	@ (80037fc <HAL_GPIO_Init+0x2e8>)
 80036ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036b6:	4a52      	ldr	r2, [pc, #328]	@ (8003800 <HAL_GPIO_Init+0x2ec>)
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	089b      	lsrs	r3, r3, #2
 80036bc:	3302      	adds	r3, #2
 80036be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	220f      	movs	r2, #15
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	43db      	mvns	r3, r3
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	4013      	ands	r3, r2
 80036d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a49      	ldr	r2, [pc, #292]	@ (8003804 <HAL_GPIO_Init+0x2f0>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d019      	beq.n	8003716 <HAL_GPIO_Init+0x202>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a48      	ldr	r2, [pc, #288]	@ (8003808 <HAL_GPIO_Init+0x2f4>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d013      	beq.n	8003712 <HAL_GPIO_Init+0x1fe>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a47      	ldr	r2, [pc, #284]	@ (800380c <HAL_GPIO_Init+0x2f8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00d      	beq.n	800370e <HAL_GPIO_Init+0x1fa>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a46      	ldr	r2, [pc, #280]	@ (8003810 <HAL_GPIO_Init+0x2fc>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d007      	beq.n	800370a <HAL_GPIO_Init+0x1f6>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a45      	ldr	r2, [pc, #276]	@ (8003814 <HAL_GPIO_Init+0x300>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d101      	bne.n	8003706 <HAL_GPIO_Init+0x1f2>
 8003702:	2304      	movs	r3, #4
 8003704:	e008      	b.n	8003718 <HAL_GPIO_Init+0x204>
 8003706:	2307      	movs	r3, #7
 8003708:	e006      	b.n	8003718 <HAL_GPIO_Init+0x204>
 800370a:	2303      	movs	r3, #3
 800370c:	e004      	b.n	8003718 <HAL_GPIO_Init+0x204>
 800370e:	2302      	movs	r3, #2
 8003710:	e002      	b.n	8003718 <HAL_GPIO_Init+0x204>
 8003712:	2301      	movs	r3, #1
 8003714:	e000      	b.n	8003718 <HAL_GPIO_Init+0x204>
 8003716:	2300      	movs	r3, #0
 8003718:	69fa      	ldr	r2, [r7, #28]
 800371a:	f002 0203 	and.w	r2, r2, #3
 800371e:	0092      	lsls	r2, r2, #2
 8003720:	4093      	lsls	r3, r2
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	4313      	orrs	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003728:	4935      	ldr	r1, [pc, #212]	@ (8003800 <HAL_GPIO_Init+0x2ec>)
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	089b      	lsrs	r3, r3, #2
 800372e:	3302      	adds	r3, #2
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003736:	4b38      	ldr	r3, [pc, #224]	@ (8003818 <HAL_GPIO_Init+0x304>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	43db      	mvns	r3, r3
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	4013      	ands	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800375a:	4a2f      	ldr	r2, [pc, #188]	@ (8003818 <HAL_GPIO_Init+0x304>)
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003760:	4b2d      	ldr	r3, [pc, #180]	@ (8003818 <HAL_GPIO_Init+0x304>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	43db      	mvns	r3, r3
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	4013      	ands	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003784:	4a24      	ldr	r2, [pc, #144]	@ (8003818 <HAL_GPIO_Init+0x304>)
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800378a:	4b23      	ldr	r3, [pc, #140]	@ (8003818 <HAL_GPIO_Init+0x304>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	43db      	mvns	r3, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4013      	ands	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003818 <HAL_GPIO_Init+0x304>)
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037b4:	4b18      	ldr	r3, [pc, #96]	@ (8003818 <HAL_GPIO_Init+0x304>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	43db      	mvns	r3, r3
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4013      	ands	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037d8:	4a0f      	ldr	r2, [pc, #60]	@ (8003818 <HAL_GPIO_Init+0x304>)
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	3301      	adds	r3, #1
 80037e2:	61fb      	str	r3, [r7, #28]
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	2b0f      	cmp	r3, #15
 80037e8:	f67f aea2 	bls.w	8003530 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037ec:	bf00      	nop
 80037ee:	bf00      	nop
 80037f0:	3724      	adds	r7, #36	@ 0x24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	40023800 	.word	0x40023800
 8003800:	40013800 	.word	0x40013800
 8003804:	40020000 	.word	0x40020000
 8003808:	40020400 	.word	0x40020400
 800380c:	40020800 	.word	0x40020800
 8003810:	40020c00 	.word	0x40020c00
 8003814:	40021000 	.word	0x40021000
 8003818:	40013c00 	.word	0x40013c00

0800381c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	807b      	strh	r3, [r7, #2]
 8003828:	4613      	mov	r3, r2
 800382a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800382c:	787b      	ldrb	r3, [r7, #1]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003832:	887a      	ldrh	r2, [r7, #2]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003838:	e003      	b.n	8003842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800383a:	887b      	ldrh	r3, [r7, #2]
 800383c:	041a      	lsls	r2, r3, #16
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	619a      	str	r2, [r3, #24]
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
	...

08003850 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	4603      	mov	r3, r0
 8003858:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800385a:	4b08      	ldr	r3, [pc, #32]	@ (800387c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	88fb      	ldrh	r3, [r7, #6]
 8003860:	4013      	ands	r3, r2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d006      	beq.n	8003874 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003866:	4a05      	ldr	r2, [pc, #20]	@ (800387c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003868:	88fb      	ldrh	r3, [r7, #6]
 800386a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800386c:	88fb      	ldrh	r3, [r7, #6]
 800386e:	4618      	mov	r0, r3
 8003870:	f7fe fcf0 	bl	8002254 <HAL_GPIO_EXTI_Callback>
  }
}
 8003874:	bf00      	nop
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40013c00 	.word	0x40013c00

08003880 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e12b      	b.n	8003aea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d106      	bne.n	80038ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff f9dc 	bl	8002c64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2224      	movs	r2, #36	@ 0x24
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0201 	bic.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038e4:	f002 fe72 	bl	80065cc <HAL_RCC_GetPCLK1Freq>
 80038e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	4a81      	ldr	r2, [pc, #516]	@ (8003af4 <HAL_I2C_Init+0x274>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d807      	bhi.n	8003904 <HAL_I2C_Init+0x84>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4a80      	ldr	r2, [pc, #512]	@ (8003af8 <HAL_I2C_Init+0x278>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	bf94      	ite	ls
 80038fc:	2301      	movls	r3, #1
 80038fe:	2300      	movhi	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	e006      	b.n	8003912 <HAL_I2C_Init+0x92>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4a7d      	ldr	r2, [pc, #500]	@ (8003afc <HAL_I2C_Init+0x27c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	bf94      	ite	ls
 800390c:	2301      	movls	r3, #1
 800390e:	2300      	movhi	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e0e7      	b.n	8003aea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4a78      	ldr	r2, [pc, #480]	@ (8003b00 <HAL_I2C_Init+0x280>)
 800391e:	fba2 2303 	umull	r2, r3, r2, r3
 8003922:	0c9b      	lsrs	r3, r3, #18
 8003924:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	430a      	orrs	r2, r1
 8003938:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	4a6a      	ldr	r2, [pc, #424]	@ (8003af4 <HAL_I2C_Init+0x274>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d802      	bhi.n	8003954 <HAL_I2C_Init+0xd4>
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	3301      	adds	r3, #1
 8003952:	e009      	b.n	8003968 <HAL_I2C_Init+0xe8>
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800395a:	fb02 f303 	mul.w	r3, r2, r3
 800395e:	4a69      	ldr	r2, [pc, #420]	@ (8003b04 <HAL_I2C_Init+0x284>)
 8003960:	fba2 2303 	umull	r2, r3, r2, r3
 8003964:	099b      	lsrs	r3, r3, #6
 8003966:	3301      	adds	r3, #1
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6812      	ldr	r2, [r2, #0]
 800396c:	430b      	orrs	r3, r1
 800396e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800397a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	495c      	ldr	r1, [pc, #368]	@ (8003af4 <HAL_I2C_Init+0x274>)
 8003984:	428b      	cmp	r3, r1
 8003986:	d819      	bhi.n	80039bc <HAL_I2C_Init+0x13c>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	1e59      	subs	r1, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	fbb1 f3f3 	udiv	r3, r1, r3
 8003996:	1c59      	adds	r1, r3, #1
 8003998:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800399c:	400b      	ands	r3, r1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <HAL_I2C_Init+0x138>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	1e59      	subs	r1, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80039b0:	3301      	adds	r3, #1
 80039b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b6:	e051      	b.n	8003a5c <HAL_I2C_Init+0x1dc>
 80039b8:	2304      	movs	r3, #4
 80039ba:	e04f      	b.n	8003a5c <HAL_I2C_Init+0x1dc>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d111      	bne.n	80039e8 <HAL_I2C_Init+0x168>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	1e58      	subs	r0, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6859      	ldr	r1, [r3, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	440b      	add	r3, r1
 80039d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039d6:	3301      	adds	r3, #1
 80039d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039dc:	2b00      	cmp	r3, #0
 80039de:	bf0c      	ite	eq
 80039e0:	2301      	moveq	r3, #1
 80039e2:	2300      	movne	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	e012      	b.n	8003a0e <HAL_I2C_Init+0x18e>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	1e58      	subs	r0, r3, #1
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6859      	ldr	r1, [r3, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	0099      	lsls	r1, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80039fe:	3301      	adds	r3, #1
 8003a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	bf0c      	ite	eq
 8003a08:	2301      	moveq	r3, #1
 8003a0a:	2300      	movne	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_I2C_Init+0x196>
 8003a12:	2301      	movs	r3, #1
 8003a14:	e022      	b.n	8003a5c <HAL_I2C_Init+0x1dc>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10e      	bne.n	8003a3c <HAL_I2C_Init+0x1bc>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1e58      	subs	r0, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6859      	ldr	r1, [r3, #4]
 8003a26:	460b      	mov	r3, r1
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	440b      	add	r3, r1
 8003a2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a30:	3301      	adds	r3, #1
 8003a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a3a:	e00f      	b.n	8003a5c <HAL_I2C_Init+0x1dc>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	1e58      	subs	r0, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6859      	ldr	r1, [r3, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	0099      	lsls	r1, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a52:	3301      	adds	r3, #1
 8003a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	6809      	ldr	r1, [r1, #0]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69da      	ldr	r2, [r3, #28]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a8a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6911      	ldr	r1, [r2, #16]
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	68d2      	ldr	r2, [r2, #12]
 8003a96:	4311      	orrs	r1, r2
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6812      	ldr	r2, [r2, #0]
 8003a9c:	430b      	orrs	r3, r1
 8003a9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	695a      	ldr	r2, [r3, #20]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0201 	orr.w	r2, r2, #1
 8003aca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	000186a0 	.word	0x000186a0
 8003af8:	001e847f 	.word	0x001e847f
 8003afc:	003d08ff 	.word	0x003d08ff
 8003b00:	431bde83 	.word	0x431bde83
 8003b04:	10624dd3 	.word	0x10624dd3

08003b08 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	4608      	mov	r0, r1
 8003b12:	4611      	mov	r1, r2
 8003b14:	461a      	mov	r2, r3
 8003b16:	4603      	mov	r3, r0
 8003b18:	817b      	strh	r3, [r7, #10]
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	813b      	strh	r3, [r7, #8]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b22:	f7ff fb73 	bl	800320c <HAL_GetTick>
 8003b26:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b20      	cmp	r3, #32
 8003b32:	f040 80d9 	bne.w	8003ce8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	2319      	movs	r3, #25
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	496d      	ldr	r1, [pc, #436]	@ (8003cf4 <HAL_I2C_Mem_Write+0x1ec>)
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 fc8b 	bl	800445c <I2C_WaitOnFlagUntilTimeout>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	e0cc      	b.n	8003cea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d101      	bne.n	8003b5e <HAL_I2C_Mem_Write+0x56>
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	e0c5      	b.n	8003cea <HAL_I2C_Mem_Write+0x1e2>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d007      	beq.n	8003b84 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0201 	orr.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2221      	movs	r2, #33	@ 0x21
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2240      	movs	r2, #64	@ 0x40
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a3a      	ldr	r2, [r7, #32]
 8003bae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003bb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4a4d      	ldr	r2, [pc, #308]	@ (8003cf8 <HAL_I2C_Mem_Write+0x1f0>)
 8003bc4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bc6:	88f8      	ldrh	r0, [r7, #6]
 8003bc8:	893a      	ldrh	r2, [r7, #8]
 8003bca:	8979      	ldrh	r1, [r7, #10]
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	9301      	str	r3, [sp, #4]
 8003bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 fac2 	bl	8004160 <I2C_RequestMemoryWrite>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d052      	beq.n	8003c88 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e081      	b.n	8003cea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 fd50 	bl	8004690 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00d      	beq.n	8003c12 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d107      	bne.n	8003c0e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e06b      	b.n	8003cea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c16:	781a      	ldrb	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c22:	1c5a      	adds	r2, r3, #1
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b04      	cmp	r3, #4
 8003c4e:	d11b      	bne.n	8003c88 <HAL_I2C_Mem_Write+0x180>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d017      	beq.n	8003c88 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5c:	781a      	ldrb	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1aa      	bne.n	8003be6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 fd43 	bl	8004720 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00d      	beq.n	8003cbc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	d107      	bne.n	8003cb8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cb6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e016      	b.n	8003cea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	e000      	b.n	8003cea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ce8:	2302      	movs	r3, #2
  }
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	00100002 	.word	0x00100002
 8003cf8:	ffff0000 	.word	0xffff0000

08003cfc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b08c      	sub	sp, #48	@ 0x30
 8003d00:	af02      	add	r7, sp, #8
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	4608      	mov	r0, r1
 8003d06:	4611      	mov	r1, r2
 8003d08:	461a      	mov	r2, r3
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	817b      	strh	r3, [r7, #10]
 8003d0e:	460b      	mov	r3, r1
 8003d10:	813b      	strh	r3, [r7, #8]
 8003d12:	4613      	mov	r3, r2
 8003d14:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d16:	f7ff fa79 	bl	800320c <HAL_GetTick>
 8003d1a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	f040 8214 	bne.w	8004152 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	2319      	movs	r3, #25
 8003d30:	2201      	movs	r2, #1
 8003d32:	497b      	ldr	r1, [pc, #492]	@ (8003f20 <HAL_I2C_Mem_Read+0x224>)
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 fb91 	bl	800445c <I2C_WaitOnFlagUntilTimeout>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003d40:	2302      	movs	r3, #2
 8003d42:	e207      	b.n	8004154 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d101      	bne.n	8003d52 <HAL_I2C_Mem_Read+0x56>
 8003d4e:	2302      	movs	r3, #2
 8003d50:	e200      	b.n	8004154 <HAL_I2C_Mem_Read+0x458>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d007      	beq.n	8003d78 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 0201 	orr.w	r2, r2, #1
 8003d76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2222      	movs	r2, #34	@ 0x22
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2240      	movs	r2, #64	@ 0x40
 8003d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003da2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003da8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4a5b      	ldr	r2, [pc, #364]	@ (8003f24 <HAL_I2C_Mem_Read+0x228>)
 8003db8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dba:	88f8      	ldrh	r0, [r7, #6]
 8003dbc:	893a      	ldrh	r2, [r7, #8]
 8003dbe:	8979      	ldrh	r1, [r7, #10]
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc2:	9301      	str	r3, [sp, #4]
 8003dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	4603      	mov	r3, r0
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 fa5e 	bl	800428c <I2C_RequestMemoryRead>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e1bc      	b.n	8004154 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d113      	bne.n	8003e0a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003de2:	2300      	movs	r3, #0
 8003de4:	623b      	str	r3, [r7, #32]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	623b      	str	r3, [r7, #32]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	623b      	str	r3, [r7, #32]
 8003df6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	e190      	b.n	800412c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d11b      	bne.n	8003e4a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e22:	2300      	movs	r3, #0
 8003e24:	61fb      	str	r3, [r7, #28]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	61fb      	str	r3, [r7, #28]
 8003e36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	e170      	b.n	800412c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d11b      	bne.n	8003e8a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e60:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e72:	2300      	movs	r3, #0
 8003e74:	61bb      	str	r3, [r7, #24]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	61bb      	str	r3, [r7, #24]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	61bb      	str	r3, [r7, #24]
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	e150      	b.n	800412c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	617b      	str	r3, [r7, #20]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	617b      	str	r3, [r7, #20]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	617b      	str	r3, [r7, #20]
 8003e9e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ea0:	e144      	b.n	800412c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ea6:	2b03      	cmp	r3, #3
 8003ea8:	f200 80f1 	bhi.w	800408e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d123      	bne.n	8003efc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eb6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 fc79 	bl	80047b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e145      	b.n	8004154 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	691a      	ldr	r2, [r3, #16]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed2:	b2d2      	uxtb	r2, r2
 8003ed4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eda:	1c5a      	adds	r2, r3, #1
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003efa:	e117      	b.n	800412c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d14e      	bne.n	8003fa2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	4906      	ldr	r1, [pc, #24]	@ (8003f28 <HAL_I2C_Mem_Read+0x22c>)
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 faa4 	bl	800445c <I2C_WaitOnFlagUntilTimeout>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d008      	beq.n	8003f2c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e11a      	b.n	8004154 <HAL_I2C_Mem_Read+0x458>
 8003f1e:	bf00      	nop
 8003f20:	00100002 	.word	0x00100002
 8003f24:	ffff0000 	.word	0xffff0000
 8003f28:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	691a      	ldr	r2, [r3, #16]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	691a      	ldr	r2, [r3, #16]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003fa0:	e0c4      	b.n	800412c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa8:	2200      	movs	r2, #0
 8003faa:	496c      	ldr	r1, [pc, #432]	@ (800415c <HAL_I2C_Mem_Read+0x460>)
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 fa55 	bl	800445c <I2C_WaitOnFlagUntilTimeout>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e0cb      	b.n	8004154 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	691a      	ldr	r2, [r3, #16]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004004:	2200      	movs	r2, #0
 8004006:	4955      	ldr	r1, [pc, #340]	@ (800415c <HAL_I2C_Mem_Read+0x460>)
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 fa27 	bl	800445c <I2C_WaitOnFlagUntilTimeout>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e09d      	b.n	8004154 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004026:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	691a      	ldr	r2, [r3, #16]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403a:	1c5a      	adds	r2, r3, #1
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004044:	3b01      	subs	r3, #1
 8004046:	b29a      	uxth	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004050:	b29b      	uxth	r3, r3
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	691a      	ldr	r2, [r3, #16]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004064:	b2d2      	uxtb	r2, r2
 8004066:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004076:	3b01      	subs	r3, #1
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004082:	b29b      	uxth	r3, r3
 8004084:	3b01      	subs	r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800408c:	e04e      	b.n	800412c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800408e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004090:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f000 fb8c 	bl	80047b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e058      	b.n	8004154 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	691a      	ldr	r2, [r3, #16]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ac:	b2d2      	uxtb	r2, r2
 80040ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	f003 0304 	and.w	r3, r3, #4
 80040de:	2b04      	cmp	r3, #4
 80040e0:	d124      	bne.n	800412c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e6:	2b03      	cmp	r3, #3
 80040e8:	d107      	bne.n	80040fa <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040f8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004104:	b2d2      	uxtb	r2, r2
 8004106:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410c:	1c5a      	adds	r2, r3, #1
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004116:	3b01      	subs	r3, #1
 8004118:	b29a      	uxth	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004122:	b29b      	uxth	r3, r3
 8004124:	3b01      	subs	r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004130:	2b00      	cmp	r3, #0
 8004132:	f47f aeb6 	bne.w	8003ea2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2220      	movs	r2, #32
 800413a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800414e:	2300      	movs	r3, #0
 8004150:	e000      	b.n	8004154 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004152:	2302      	movs	r3, #2
  }
}
 8004154:	4618      	mov	r0, r3
 8004156:	3728      	adds	r7, #40	@ 0x28
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	00010004 	.word	0x00010004

08004160 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b088      	sub	sp, #32
 8004164:	af02      	add	r7, sp, #8
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	4608      	mov	r0, r1
 800416a:	4611      	mov	r1, r2
 800416c:	461a      	mov	r2, r3
 800416e:	4603      	mov	r3, r0
 8004170:	817b      	strh	r3, [r7, #10]
 8004172:	460b      	mov	r3, r1
 8004174:	813b      	strh	r3, [r7, #8]
 8004176:	4613      	mov	r3, r2
 8004178:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004188:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800418a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	6a3b      	ldr	r3, [r7, #32]
 8004190:	2200      	movs	r2, #0
 8004192:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 f960 	bl	800445c <I2C_WaitOnFlagUntilTimeout>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00d      	beq.n	80041be <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041b0:	d103      	bne.n	80041ba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e05f      	b.n	800427e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041be:	897b      	ldrh	r3, [r7, #10]
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	461a      	mov	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80041cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d0:	6a3a      	ldr	r2, [r7, #32]
 80041d2:	492d      	ldr	r1, [pc, #180]	@ (8004288 <I2C_RequestMemoryWrite+0x128>)
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 f9bb 	bl	8004550 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e04c      	b.n	800427e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041e4:	2300      	movs	r3, #0
 80041e6:	617b      	str	r3, [r7, #20]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	617b      	str	r3, [r7, #20]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041fc:	6a39      	ldr	r1, [r7, #32]
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 fa46 	bl	8004690 <I2C_WaitOnTXEFlagUntilTimeout>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00d      	beq.n	8004226 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420e:	2b04      	cmp	r3, #4
 8004210:	d107      	bne.n	8004222 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004220:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e02b      	b.n	800427e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004226:	88fb      	ldrh	r3, [r7, #6]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d105      	bne.n	8004238 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800422c:	893b      	ldrh	r3, [r7, #8]
 800422e:	b2da      	uxtb	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	611a      	str	r2, [r3, #16]
 8004236:	e021      	b.n	800427c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004238:	893b      	ldrh	r3, [r7, #8]
 800423a:	0a1b      	lsrs	r3, r3, #8
 800423c:	b29b      	uxth	r3, r3
 800423e:	b2da      	uxtb	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004248:	6a39      	ldr	r1, [r7, #32]
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 fa20 	bl	8004690 <I2C_WaitOnTXEFlagUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00d      	beq.n	8004272 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425a:	2b04      	cmp	r3, #4
 800425c:	d107      	bne.n	800426e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800426c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e005      	b.n	800427e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004272:	893b      	ldrh	r3, [r7, #8]
 8004274:	b2da      	uxtb	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3718      	adds	r7, #24
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	00010002 	.word	0x00010002

0800428c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b088      	sub	sp, #32
 8004290:	af02      	add	r7, sp, #8
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	4608      	mov	r0, r1
 8004296:	4611      	mov	r1, r2
 8004298:	461a      	mov	r2, r3
 800429a:	4603      	mov	r3, r0
 800429c:	817b      	strh	r3, [r7, #10]
 800429e:	460b      	mov	r3, r1
 80042a0:	813b      	strh	r3, [r7, #8]
 80042a2:	4613      	mov	r3, r2
 80042a4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042b4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 f8c2 	bl	800445c <I2C_WaitOnFlagUntilTimeout>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00d      	beq.n	80042fa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042ec:	d103      	bne.n	80042f6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e0aa      	b.n	8004450 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042fa:	897b      	ldrh	r3, [r7, #10]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	461a      	mov	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004308:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800430a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430c:	6a3a      	ldr	r2, [r7, #32]
 800430e:	4952      	ldr	r1, [pc, #328]	@ (8004458 <I2C_RequestMemoryRead+0x1cc>)
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 f91d 	bl	8004550 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e097      	b.n	8004450 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004320:	2300      	movs	r3, #0
 8004322:	617b      	str	r3, [r7, #20]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	617b      	str	r3, [r7, #20]
 8004334:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004338:	6a39      	ldr	r1, [r7, #32]
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 f9a8 	bl	8004690 <I2C_WaitOnTXEFlagUntilTimeout>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00d      	beq.n	8004362 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434a:	2b04      	cmp	r3, #4
 800434c:	d107      	bne.n	800435e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800435c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e076      	b.n	8004450 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004362:	88fb      	ldrh	r3, [r7, #6]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d105      	bne.n	8004374 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004368:	893b      	ldrh	r3, [r7, #8]
 800436a:	b2da      	uxtb	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	611a      	str	r2, [r3, #16]
 8004372:	e021      	b.n	80043b8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004374:	893b      	ldrh	r3, [r7, #8]
 8004376:	0a1b      	lsrs	r3, r3, #8
 8004378:	b29b      	uxth	r3, r3
 800437a:	b2da      	uxtb	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004382:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004384:	6a39      	ldr	r1, [r7, #32]
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 f982 	bl	8004690 <I2C_WaitOnTXEFlagUntilTimeout>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00d      	beq.n	80043ae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004396:	2b04      	cmp	r3, #4
 8004398:	d107      	bne.n	80043aa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e050      	b.n	8004450 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043ae:	893b      	ldrh	r3, [r7, #8]
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ba:	6a39      	ldr	r1, [r7, #32]
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 f967 	bl	8004690 <I2C_WaitOnTXEFlagUntilTimeout>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00d      	beq.n	80043e4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d107      	bne.n	80043e0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043de:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e035      	b.n	8004450 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043f2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 f82b 	bl	800445c <I2C_WaitOnFlagUntilTimeout>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00d      	beq.n	8004428 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004416:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800441a:	d103      	bne.n	8004424 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004422:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e013      	b.n	8004450 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004428:	897b      	ldrh	r3, [r7, #10]
 800442a:	b2db      	uxtb	r3, r3
 800442c:	f043 0301 	orr.w	r3, r3, #1
 8004430:	b2da      	uxtb	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443a:	6a3a      	ldr	r2, [r7, #32]
 800443c:	4906      	ldr	r1, [pc, #24]	@ (8004458 <I2C_RequestMemoryRead+0x1cc>)
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 f886 	bl	8004550 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e000      	b.n	8004450 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	00010002 	.word	0x00010002

0800445c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	603b      	str	r3, [r7, #0]
 8004468:	4613      	mov	r3, r2
 800446a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800446c:	e048      	b.n	8004500 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004474:	d044      	beq.n	8004500 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004476:	f7fe fec9 	bl	800320c <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	429a      	cmp	r2, r3
 8004484:	d302      	bcc.n	800448c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d139      	bne.n	8004500 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	0c1b      	lsrs	r3, r3, #16
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b01      	cmp	r3, #1
 8004494:	d10d      	bne.n	80044b2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	43da      	mvns	r2, r3
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	4013      	ands	r3, r2
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	bf0c      	ite	eq
 80044a8:	2301      	moveq	r3, #1
 80044aa:	2300      	movne	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	461a      	mov	r2, r3
 80044b0:	e00c      	b.n	80044cc <I2C_WaitOnFlagUntilTimeout+0x70>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	43da      	mvns	r2, r3
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	4013      	ands	r3, r2
 80044be:	b29b      	uxth	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	bf0c      	ite	eq
 80044c4:	2301      	moveq	r3, #1
 80044c6:	2300      	movne	r3, #0
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	461a      	mov	r2, r3
 80044cc:	79fb      	ldrb	r3, [r7, #7]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d116      	bne.n	8004500 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2220      	movs	r2, #32
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ec:	f043 0220 	orr.w	r2, r3, #32
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e023      	b.n	8004548 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	0c1b      	lsrs	r3, r3, #16
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b01      	cmp	r3, #1
 8004508:	d10d      	bne.n	8004526 <I2C_WaitOnFlagUntilTimeout+0xca>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	43da      	mvns	r2, r3
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	4013      	ands	r3, r2
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	bf0c      	ite	eq
 800451c:	2301      	moveq	r3, #1
 800451e:	2300      	movne	r3, #0
 8004520:	b2db      	uxtb	r3, r3
 8004522:	461a      	mov	r2, r3
 8004524:	e00c      	b.n	8004540 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	43da      	mvns	r2, r3
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	4013      	ands	r3, r2
 8004532:	b29b      	uxth	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	bf0c      	ite	eq
 8004538:	2301      	moveq	r3, #1
 800453a:	2300      	movne	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	461a      	mov	r2, r3
 8004540:	79fb      	ldrb	r3, [r7, #7]
 8004542:	429a      	cmp	r2, r3
 8004544:	d093      	beq.n	800446e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800455e:	e071      	b.n	8004644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800456a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800456e:	d123      	bne.n	80045b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800457e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004588:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2220      	movs	r2, #32
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a4:	f043 0204 	orr.w	r2, r3, #4
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e067      	b.n	8004688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045be:	d041      	beq.n	8004644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045c0:	f7fe fe24 	bl	800320c <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d302      	bcc.n	80045d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d136      	bne.n	8004644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	0c1b      	lsrs	r3, r3, #16
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d10c      	bne.n	80045fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	43da      	mvns	r2, r3
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	4013      	ands	r3, r2
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	bf14      	ite	ne
 80045f2:	2301      	movne	r3, #1
 80045f4:	2300      	moveq	r3, #0
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	e00b      	b.n	8004612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	43da      	mvns	r2, r3
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	4013      	ands	r3, r2
 8004606:	b29b      	uxth	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	bf14      	ite	ne
 800460c:	2301      	movne	r3, #1
 800460e:	2300      	moveq	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d016      	beq.n	8004644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004630:	f043 0220 	orr.w	r2, r3, #32
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e021      	b.n	8004688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	0c1b      	lsrs	r3, r3, #16
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b01      	cmp	r3, #1
 800464c:	d10c      	bne.n	8004668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	43da      	mvns	r2, r3
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	4013      	ands	r3, r2
 800465a:	b29b      	uxth	r3, r3
 800465c:	2b00      	cmp	r3, #0
 800465e:	bf14      	ite	ne
 8004660:	2301      	movne	r3, #1
 8004662:	2300      	moveq	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	e00b      	b.n	8004680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	43da      	mvns	r2, r3
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	4013      	ands	r3, r2
 8004674:	b29b      	uxth	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	bf14      	ite	ne
 800467a:	2301      	movne	r3, #1
 800467c:	2300      	moveq	r3, #0
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	f47f af6d 	bne.w	8004560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800469c:	e034      	b.n	8004708 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 f8e3 	bl	800486a <I2C_IsAcknowledgeFailed>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e034      	b.n	8004718 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b4:	d028      	beq.n	8004708 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b6:	f7fe fda9 	bl	800320c <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d302      	bcc.n	80046cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d11d      	bne.n	8004708 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046d6:	2b80      	cmp	r3, #128	@ 0x80
 80046d8:	d016      	beq.n	8004708 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f4:	f043 0220 	orr.w	r2, r3, #32
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e007      	b.n	8004718 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004712:	2b80      	cmp	r3, #128	@ 0x80
 8004714:	d1c3      	bne.n	800469e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800472c:	e034      	b.n	8004798 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 f89b 	bl	800486a <I2C_IsAcknowledgeFailed>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e034      	b.n	80047a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004744:	d028      	beq.n	8004798 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004746:	f7fe fd61 	bl	800320c <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	429a      	cmp	r2, r3
 8004754:	d302      	bcc.n	800475c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d11d      	bne.n	8004798 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	f003 0304 	and.w	r3, r3, #4
 8004766:	2b04      	cmp	r3, #4
 8004768:	d016      	beq.n	8004798 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2220      	movs	r2, #32
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004784:	f043 0220 	orr.w	r2, r3, #32
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e007      	b.n	80047a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	f003 0304 	and.w	r3, r3, #4
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	d1c3      	bne.n	800472e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047bc:	e049      	b.n	8004852 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	f003 0310 	and.w	r3, r3, #16
 80047c8:	2b10      	cmp	r3, #16
 80047ca:	d119      	bne.n	8004800 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f06f 0210 	mvn.w	r2, #16
 80047d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2220      	movs	r2, #32
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e030      	b.n	8004862 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004800:	f7fe fd04 	bl	800320c <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	429a      	cmp	r2, r3
 800480e:	d302      	bcc.n	8004816 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d11d      	bne.n	8004852 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004820:	2b40      	cmp	r3, #64	@ 0x40
 8004822:	d016      	beq.n	8004852 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2220      	movs	r2, #32
 800482e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483e:	f043 0220 	orr.w	r2, r3, #32
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e007      	b.n	8004862 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800485c:	2b40      	cmp	r3, #64	@ 0x40
 800485e:	d1ae      	bne.n	80047be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800487c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004880:	d11b      	bne.n	80048ba <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800488a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2220      	movs	r2, #32
 8004896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a6:	f043 0204 	orr.w	r2, r3, #4
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e000      	b.n	80048bc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af02      	add	r7, sp, #8
 80048ce:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e101      	b.n	8004ade <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d106      	bne.n	80048fa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f00a f8ed 	bl	800ead4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2203      	movs	r2, #3
 80048fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004908:	d102      	bne.n	8004910 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4618      	mov	r0, r3
 8004916:	f003 fe2e 	bl	8008576 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6818      	ldr	r0, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	7c1a      	ldrb	r2, [r3, #16]
 8004922:	f88d 2000 	strb.w	r2, [sp]
 8004926:	3304      	adds	r3, #4
 8004928:	cb0e      	ldmia	r3, {r1, r2, r3}
 800492a:	f003 fd0d 	bl	8008348 <USB_CoreInit>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d005      	beq.n	8004940 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e0ce      	b.n	8004ade <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2100      	movs	r1, #0
 8004946:	4618      	mov	r0, r3
 8004948:	f003 fe26 	bl	8008598 <USB_SetCurrentMode>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d005      	beq.n	800495e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2202      	movs	r2, #2
 8004956:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e0bf      	b.n	8004ade <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800495e:	2300      	movs	r3, #0
 8004960:	73fb      	strb	r3, [r7, #15]
 8004962:	e04a      	b.n	80049fa <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004964:	7bfa      	ldrb	r2, [r7, #15]
 8004966:	6879      	ldr	r1, [r7, #4]
 8004968:	4613      	mov	r3, r2
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	4413      	add	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	440b      	add	r3, r1
 8004972:	3315      	adds	r3, #21
 8004974:	2201      	movs	r2, #1
 8004976:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004978:	7bfa      	ldrb	r2, [r7, #15]
 800497a:	6879      	ldr	r1, [r7, #4]
 800497c:	4613      	mov	r3, r2
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	4413      	add	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	440b      	add	r3, r1
 8004986:	3314      	adds	r3, #20
 8004988:	7bfa      	ldrb	r2, [r7, #15]
 800498a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800498c:	7bfa      	ldrb	r2, [r7, #15]
 800498e:	7bfb      	ldrb	r3, [r7, #15]
 8004990:	b298      	uxth	r0, r3
 8004992:	6879      	ldr	r1, [r7, #4]
 8004994:	4613      	mov	r3, r2
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	4413      	add	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	440b      	add	r3, r1
 800499e:	332e      	adds	r3, #46	@ 0x2e
 80049a0:	4602      	mov	r2, r0
 80049a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80049a4:	7bfa      	ldrb	r2, [r7, #15]
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	4613      	mov	r3, r2
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	4413      	add	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	440b      	add	r3, r1
 80049b2:	3318      	adds	r3, #24
 80049b4:	2200      	movs	r2, #0
 80049b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80049b8:	7bfa      	ldrb	r2, [r7, #15]
 80049ba:	6879      	ldr	r1, [r7, #4]
 80049bc:	4613      	mov	r3, r2
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	4413      	add	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	440b      	add	r3, r1
 80049c6:	331c      	adds	r3, #28
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80049cc:	7bfa      	ldrb	r2, [r7, #15]
 80049ce:	6879      	ldr	r1, [r7, #4]
 80049d0:	4613      	mov	r3, r2
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	4413      	add	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	440b      	add	r3, r1
 80049da:	3320      	adds	r3, #32
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80049e0:	7bfa      	ldrb	r2, [r7, #15]
 80049e2:	6879      	ldr	r1, [r7, #4]
 80049e4:	4613      	mov	r3, r2
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	4413      	add	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	440b      	add	r3, r1
 80049ee:	3324      	adds	r3, #36	@ 0x24
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
 80049f6:	3301      	adds	r3, #1
 80049f8:	73fb      	strb	r3, [r7, #15]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	791b      	ldrb	r3, [r3, #4]
 80049fe:	7bfa      	ldrb	r2, [r7, #15]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d3af      	bcc.n	8004964 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a04:	2300      	movs	r3, #0
 8004a06:	73fb      	strb	r3, [r7, #15]
 8004a08:	e044      	b.n	8004a94 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a0a:	7bfa      	ldrb	r2, [r7, #15]
 8004a0c:	6879      	ldr	r1, [r7, #4]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	4413      	add	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	440b      	add	r3, r1
 8004a18:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a20:	7bfa      	ldrb	r2, [r7, #15]
 8004a22:	6879      	ldr	r1, [r7, #4]
 8004a24:	4613      	mov	r3, r2
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	4413      	add	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	440b      	add	r3, r1
 8004a2e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004a32:	7bfa      	ldrb	r2, [r7, #15]
 8004a34:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a36:	7bfa      	ldrb	r2, [r7, #15]
 8004a38:	6879      	ldr	r1, [r7, #4]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	00db      	lsls	r3, r3, #3
 8004a3e:	4413      	add	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	440b      	add	r3, r1
 8004a44:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004a48:	2200      	movs	r2, #0
 8004a4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a4c:	7bfa      	ldrb	r2, [r7, #15]
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	4613      	mov	r3, r2
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	4413      	add	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	440b      	add	r3, r1
 8004a5a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a62:	7bfa      	ldrb	r2, [r7, #15]
 8004a64:	6879      	ldr	r1, [r7, #4]
 8004a66:	4613      	mov	r3, r2
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	4413      	add	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	440b      	add	r3, r1
 8004a70:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a78:	7bfa      	ldrb	r2, [r7, #15]
 8004a7a:	6879      	ldr	r1, [r7, #4]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	4413      	add	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	440b      	add	r3, r1
 8004a86:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a8e:	7bfb      	ldrb	r3, [r7, #15]
 8004a90:	3301      	adds	r3, #1
 8004a92:	73fb      	strb	r3, [r7, #15]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	791b      	ldrb	r3, [r3, #4]
 8004a98:	7bfa      	ldrb	r2, [r7, #15]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d3b5      	bcc.n	8004a0a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6818      	ldr	r0, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	7c1a      	ldrb	r2, [r3, #16]
 8004aa6:	f88d 2000 	strb.w	r2, [sp]
 8004aaa:	3304      	adds	r3, #4
 8004aac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004aae:	f003 fdbf 	bl	8008630 <USB_DevInit>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d005      	beq.n	8004ac4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e00c      	b.n	8004ade <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f004 fe09 	bl	80096ee <USB_DevDisconnect>

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b084      	sub	sp, #16
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d101      	bne.n	8004b02 <HAL_PCD_Start+0x1c>
 8004afe:	2302      	movs	r3, #2
 8004b00:	e022      	b.n	8004b48 <HAL_PCD_Start+0x62>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d009      	beq.n	8004b2a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d105      	bne.n	8004b2a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b22:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f003 fd10 	bl	8008554 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f004 fdb7 	bl	80096ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004b50:	b590      	push	{r4, r7, lr}
 8004b52:	b08d      	sub	sp, #52	@ 0x34
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f004 fe75 	bl	8009856 <USB_GetMode>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f040 848c 	bne.w	800548c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f004 fdd9 	bl	8009730 <USB_ReadInterrupts>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 8482 	beq.w	800548a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	0a1b      	lsrs	r3, r3, #8
 8004b90:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f004 fdc6 	bl	8009730 <USB_ReadInterrupts>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d107      	bne.n	8004bbe <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	695a      	ldr	r2, [r3, #20]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f002 0202 	and.w	r2, r2, #2
 8004bbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f004 fdb4 	bl	8009730 <USB_ReadInterrupts>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	f003 0310 	and.w	r3, r3, #16
 8004bce:	2b10      	cmp	r3, #16
 8004bd0:	d161      	bne.n	8004c96 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	699a      	ldr	r2, [r3, #24]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0210 	bic.w	r2, r2, #16
 8004be0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	f003 020f 	and.w	r2, r3, #15
 8004bee:	4613      	mov	r3, r2
 8004bf0:	00db      	lsls	r3, r3, #3
 8004bf2:	4413      	add	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	3304      	adds	r3, #4
 8004c00:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004c08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c0c:	d124      	bne.n	8004c58 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004c14:	4013      	ands	r3, r2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d035      	beq.n	8004c86 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	091b      	lsrs	r3, r3, #4
 8004c22:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004c24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	6a38      	ldr	r0, [r7, #32]
 8004c2e:	f004 fbeb 	bl	8009408 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	091b      	lsrs	r3, r3, #4
 8004c3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c3e:	441a      	add	r2, r3
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	695a      	ldr	r2, [r3, #20]
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	091b      	lsrs	r3, r3, #4
 8004c4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c50:	441a      	add	r2, r3
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	615a      	str	r2, [r3, #20]
 8004c56:	e016      	b.n	8004c86 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004c5e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004c62:	d110      	bne.n	8004c86 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c6a:	2208      	movs	r2, #8
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	6a38      	ldr	r0, [r7, #32]
 8004c70:	f004 fbca 	bl	8009408 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	695a      	ldr	r2, [r3, #20]
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	091b      	lsrs	r3, r3, #4
 8004c7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c80:	441a      	add	r2, r3
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	699a      	ldr	r2, [r3, #24]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f042 0210 	orr.w	r2, r2, #16
 8004c94:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f004 fd48 	bl	8009730 <USB_ReadInterrupts>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ca6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004caa:	f040 80a7 	bne.w	8004dfc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f004 fd4d 	bl	8009756 <USB_ReadDevAllOutEpInterrupt>
 8004cbc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004cbe:	e099      	b.n	8004df4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 808e 	beq.w	8004de8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	4611      	mov	r1, r2
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f004 fd71 	bl	80097be <USB_ReadDevOutEPInterrupt>
 8004cdc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00c      	beq.n	8004d02 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004cfa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 fea3 	bl	8005a48 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f003 0308 	and.w	r3, r3, #8
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00c      	beq.n	8004d26 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d18:	461a      	mov	r2, r3
 8004d1a:	2308      	movs	r3, #8
 8004d1c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004d1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 ff79 	bl	8005c18 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	f003 0310 	and.w	r3, r3, #16
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d008      	beq.n	8004d42 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	2310      	movs	r3, #16
 8004d40:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d030      	beq.n	8004dae <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d54:	2b80      	cmp	r3, #128	@ 0x80
 8004d56:	d109      	bne.n	8004d6c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	69fa      	ldr	r2, [r7, #28]
 8004d62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004d6a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004d6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d6e:	4613      	mov	r3, r2
 8004d70:	00db      	lsls	r3, r3, #3
 8004d72:	4413      	add	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	3304      	adds	r3, #4
 8004d80:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	78db      	ldrb	r3, [r3, #3]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d108      	bne.n	8004d9c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	4619      	mov	r1, r3
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f009 ff98 	bl	800eccc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004da8:	461a      	mov	r2, r3
 8004daa:	2302      	movs	r3, #2
 8004dac:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	f003 0320 	and.w	r3, r3, #32
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d008      	beq.n	8004dca <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	2320      	movs	r3, #32
 8004dc8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d009      	beq.n	8004de8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004de0:	461a      	mov	r2, r3
 8004de2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004de6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dea:	3301      	adds	r3, #1
 8004dec:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df0:	085b      	lsrs	r3, r3, #1
 8004df2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f47f af62 	bne.w	8004cc0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f004 fc95 	bl	8009730 <USB_ReadInterrupts>
 8004e06:	4603      	mov	r3, r0
 8004e08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e0c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e10:	f040 80db 	bne.w	8004fca <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f004 fcb6 	bl	800978a <USB_ReadDevAllInEpInterrupt>
 8004e1e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004e20:	2300      	movs	r3, #0
 8004e22:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004e24:	e0cd      	b.n	8004fc2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 80c2 	beq.w	8004fb6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e38:	b2d2      	uxtb	r2, r2
 8004e3a:	4611      	mov	r1, r2
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f004 fcdc 	bl	80097fa <USB_ReadDevInEPInterrupt>
 8004e42:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d057      	beq.n	8004efe <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e50:	f003 030f 	and.w	r3, r3, #15
 8004e54:	2201      	movs	r2, #1
 8004e56:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	43db      	mvns	r3, r3
 8004e68:	69f9      	ldr	r1, [r7, #28]
 8004e6a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e6e:	4013      	ands	r3, r2
 8004e70:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e74:	015a      	lsls	r2, r3, #5
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	4413      	add	r3, r2
 8004e7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e7e:	461a      	mov	r2, r3
 8004e80:	2301      	movs	r3, #1
 8004e82:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	799b      	ldrb	r3, [r3, #6]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d132      	bne.n	8004ef2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004e8c:	6879      	ldr	r1, [r7, #4]
 8004e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e90:	4613      	mov	r3, r2
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	4413      	add	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	440b      	add	r3, r1
 8004e9a:	3320      	adds	r3, #32
 8004e9c:	6819      	ldr	r1, [r3, #0]
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	4413      	add	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4403      	add	r3, r0
 8004eac:	331c      	adds	r3, #28
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4419      	add	r1, r3
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	4413      	add	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4403      	add	r3, r0
 8004ec0:	3320      	adds	r3, #32
 8004ec2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d113      	bne.n	8004ef2 <HAL_PCD_IRQHandler+0x3a2>
 8004eca:	6879      	ldr	r1, [r7, #4]
 8004ecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ece:	4613      	mov	r3, r2
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	4413      	add	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	440b      	add	r3, r1
 8004ed8:	3324      	adds	r3, #36	@ 0x24
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d108      	bne.n	8004ef2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6818      	ldr	r0, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004eea:	461a      	mov	r2, r3
 8004eec:	2101      	movs	r1, #1
 8004eee:	f004 fce3 	bl	80098b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f009 fe6c 	bl	800ebd6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f003 0308 	and.w	r3, r3, #8
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d008      	beq.n	8004f1a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f14:	461a      	mov	r2, r3
 8004f16:	2308      	movs	r3, #8
 8004f18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	f003 0310 	and.w	r3, r3, #16
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d008      	beq.n	8004f36 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f30:	461a      	mov	r2, r3
 8004f32:	2310      	movs	r3, #16
 8004f34:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d008      	beq.n	8004f52 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	2340      	movs	r3, #64	@ 0x40
 8004f50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d023      	beq.n	8004fa4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004f5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f5e:	6a38      	ldr	r0, [r7, #32]
 8004f60:	f003 fcca 	bl	80088f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f66:	4613      	mov	r3, r2
 8004f68:	00db      	lsls	r3, r3, #3
 8004f6a:	4413      	add	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	3310      	adds	r3, #16
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	4413      	add	r3, r2
 8004f74:	3304      	adds	r3, #4
 8004f76:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	78db      	ldrb	r3, [r3, #3]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d108      	bne.n	8004f92 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	2200      	movs	r2, #0
 8004f84:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f009 feaf 	bl	800ecf0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004fae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 fcbd 	bl	8005930 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb8:	3301      	adds	r3, #1
 8004fba:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fbe:	085b      	lsrs	r3, r3, #1
 8004fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f47f af2e 	bne.w	8004e26 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f004 fbae 	bl	8009730 <USB_ReadInterrupts>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fde:	d122      	bne.n	8005026 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	69fa      	ldr	r2, [r7, #28]
 8004fea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fee:	f023 0301 	bic.w	r3, r3, #1
 8004ff2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d108      	bne.n	8005010 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005006:	2100      	movs	r1, #0
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 fea3 	bl	8005d54 <HAL_PCDEx_LPM_Callback>
 800500e:	e002      	b.n	8005016 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f009 fe4d 	bl	800ecb0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	695a      	ldr	r2, [r3, #20]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005024:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4618      	mov	r0, r3
 800502c:	f004 fb80 	bl	8009730 <USB_ReadInterrupts>
 8005030:	4603      	mov	r3, r0
 8005032:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005036:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800503a:	d112      	bne.n	8005062 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	2b01      	cmp	r3, #1
 800504a:	d102      	bne.n	8005052 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f009 fe09 	bl	800ec64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	695a      	ldr	r2, [r3, #20]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005060:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4618      	mov	r0, r3
 8005068:	f004 fb62 	bl	8009730 <USB_ReadInterrupts>
 800506c:	4603      	mov	r3, r0
 800506e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005072:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005076:	f040 80b7 	bne.w	80051e8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	69fa      	ldr	r2, [r7, #28]
 8005084:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005088:	f023 0301 	bic.w	r3, r3, #1
 800508c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2110      	movs	r1, #16
 8005094:	4618      	mov	r0, r3
 8005096:	f003 fc2f 	bl	80088f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800509a:	2300      	movs	r3, #0
 800509c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800509e:	e046      	b.n	800512e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80050a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050ac:	461a      	mov	r2, r3
 80050ae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80050b2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80050b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050c4:	0151      	lsls	r1, r2, #5
 80050c6:	69fa      	ldr	r2, [r7, #28]
 80050c8:	440a      	add	r2, r1
 80050ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80050d2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80050d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050e0:	461a      	mov	r2, r3
 80050e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80050e6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80050e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050f8:	0151      	lsls	r1, r2, #5
 80050fa:	69fa      	ldr	r2, [r7, #28]
 80050fc:	440a      	add	r2, r1
 80050fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005102:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005106:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005118:	0151      	lsls	r1, r2, #5
 800511a:	69fa      	ldr	r2, [r7, #28]
 800511c:	440a      	add	r2, r1
 800511e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005122:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005126:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800512a:	3301      	adds	r3, #1
 800512c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	791b      	ldrb	r3, [r3, #4]
 8005132:	461a      	mov	r2, r3
 8005134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005136:	4293      	cmp	r3, r2
 8005138:	d3b2      	bcc.n	80050a0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	69fa      	ldr	r2, [r7, #28]
 8005144:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005148:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800514c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	7bdb      	ldrb	r3, [r3, #15]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d016      	beq.n	8005184 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800515c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005160:	69fa      	ldr	r2, [r7, #28]
 8005162:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005166:	f043 030b 	orr.w	r3, r3, #11
 800516a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005176:	69fa      	ldr	r2, [r7, #28]
 8005178:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800517c:	f043 030b 	orr.w	r3, r3, #11
 8005180:	6453      	str	r3, [r2, #68]	@ 0x44
 8005182:	e015      	b.n	80051b0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	69fa      	ldr	r2, [r7, #28]
 800518e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005192:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005196:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800519a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	69fa      	ldr	r2, [r7, #28]
 80051a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051aa:	f043 030b 	orr.w	r3, r3, #11
 80051ae:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	69fa      	ldr	r2, [r7, #28]
 80051ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051be:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80051c2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6818      	ldr	r0, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80051d2:	461a      	mov	r2, r3
 80051d4:	f004 fb70 	bl	80098b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695a      	ldr	r2, [r3, #20]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80051e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f004 fa9f 	bl	8009730 <USB_ReadInterrupts>
 80051f2:	4603      	mov	r3, r0
 80051f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051fc:	d123      	bne.n	8005246 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4618      	mov	r0, r3
 8005204:	f004 fb35 	bl	8009872 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4618      	mov	r0, r3
 800520e:	f003 fbec 	bl	80089ea <USB_GetDevSpeed>
 8005212:	4603      	mov	r3, r0
 8005214:	461a      	mov	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681c      	ldr	r4, [r3, #0]
 800521e:	f001 f9c9 	bl	80065b4 <HAL_RCC_GetHCLKFreq>
 8005222:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005228:	461a      	mov	r2, r3
 800522a:	4620      	mov	r0, r4
 800522c:	f003 f8f0 	bl	8008410 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f009 fcf8 	bl	800ec26 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	695a      	ldr	r2, [r3, #20]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005244:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4618      	mov	r0, r3
 800524c:	f004 fa70 	bl	8009730 <USB_ReadInterrupts>
 8005250:	4603      	mov	r3, r0
 8005252:	f003 0308 	and.w	r3, r3, #8
 8005256:	2b08      	cmp	r3, #8
 8005258:	d10a      	bne.n	8005270 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f009 fcd5 	bl	800ec0a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	695a      	ldr	r2, [r3, #20]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f002 0208 	and.w	r2, r2, #8
 800526e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4618      	mov	r0, r3
 8005276:	f004 fa5b 	bl	8009730 <USB_ReadInterrupts>
 800527a:	4603      	mov	r3, r0
 800527c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005280:	2b80      	cmp	r3, #128	@ 0x80
 8005282:	d123      	bne.n	80052cc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005290:	2301      	movs	r3, #1
 8005292:	627b      	str	r3, [r7, #36]	@ 0x24
 8005294:	e014      	b.n	80052c0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005296:	6879      	ldr	r1, [r7, #4]
 8005298:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800529a:	4613      	mov	r3, r2
 800529c:	00db      	lsls	r3, r3, #3
 800529e:	4413      	add	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	440b      	add	r3, r1
 80052a4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d105      	bne.n	80052ba <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80052ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	4619      	mov	r1, r3
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 fb0a 	bl	80058ce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80052ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052bc:	3301      	adds	r3, #1
 80052be:	627b      	str	r3, [r7, #36]	@ 0x24
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	791b      	ldrb	r3, [r3, #4]
 80052c4:	461a      	mov	r2, r3
 80052c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d3e4      	bcc.n	8005296 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f004 fa2d 	bl	8009730 <USB_ReadInterrupts>
 80052d6:	4603      	mov	r3, r0
 80052d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052e0:	d13c      	bne.n	800535c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80052e2:	2301      	movs	r3, #1
 80052e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80052e6:	e02b      	b.n	8005340 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80052e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80052f8:	6879      	ldr	r1, [r7, #4]
 80052fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052fc:	4613      	mov	r3, r2
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	4413      	add	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	440b      	add	r3, r1
 8005306:	3318      	adds	r3, #24
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d115      	bne.n	800533a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800530e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005310:	2b00      	cmp	r3, #0
 8005312:	da12      	bge.n	800533a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005314:	6879      	ldr	r1, [r7, #4]
 8005316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005318:	4613      	mov	r3, r2
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	4413      	add	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	440b      	add	r3, r1
 8005322:	3317      	adds	r3, #23
 8005324:	2201      	movs	r2, #1
 8005326:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532a:	b2db      	uxtb	r3, r3
 800532c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005330:	b2db      	uxtb	r3, r3
 8005332:	4619      	mov	r1, r3
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 faca 	bl	80058ce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800533a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533c:	3301      	adds	r3, #1
 800533e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	791b      	ldrb	r3, [r3, #4]
 8005344:	461a      	mov	r2, r3
 8005346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005348:	4293      	cmp	r3, r2
 800534a:	d3cd      	bcc.n	80052e8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	695a      	ldr	r2, [r3, #20]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800535a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4618      	mov	r0, r3
 8005362:	f004 f9e5 	bl	8009730 <USB_ReadInterrupts>
 8005366:	4603      	mov	r3, r0
 8005368:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800536c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005370:	d156      	bne.n	8005420 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005372:	2301      	movs	r3, #1
 8005374:	627b      	str	r3, [r7, #36]	@ 0x24
 8005376:	e045      	b.n	8005404 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	4413      	add	r3, r2
 8005380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005388:	6879      	ldr	r1, [r7, #4]
 800538a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800538c:	4613      	mov	r3, r2
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	4413      	add	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	440b      	add	r3, r1
 8005396:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d12e      	bne.n	80053fe <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80053a0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	da2b      	bge.n	80053fe <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	0c1a      	lsrs	r2, r3, #16
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80053b0:	4053      	eors	r3, r2
 80053b2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d121      	bne.n	80053fe <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053be:	4613      	mov	r3, r2
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	4413      	add	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	440b      	add	r3, r1
 80053c8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80053cc:	2201      	movs	r2, #1
 80053ce:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80053d0:	6a3b      	ldr	r3, [r7, #32]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80053d8:	6a3b      	ldr	r3, [r7, #32]
 80053da:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10a      	bne.n	80053fe <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	69fa      	ldr	r2, [r7, #28]
 80053f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80053fa:	6053      	str	r3, [r2, #4]
            break;
 80053fc:	e008      	b.n	8005410 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80053fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005400:	3301      	adds	r3, #1
 8005402:	627b      	str	r3, [r7, #36]	@ 0x24
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	791b      	ldrb	r3, [r3, #4]
 8005408:	461a      	mov	r2, r3
 800540a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540c:	4293      	cmp	r3, r2
 800540e:	d3b3      	bcc.n	8005378 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	695a      	ldr	r2, [r3, #20]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800541e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4618      	mov	r0, r3
 8005426:	f004 f983 	bl	8009730 <USB_ReadInterrupts>
 800542a:	4603      	mov	r3, r0
 800542c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005430:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005434:	d10a      	bne.n	800544c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f009 fc6c 	bl	800ed14 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	695a      	ldr	r2, [r3, #20]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800544a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4618      	mov	r0, r3
 8005452:	f004 f96d 	bl	8009730 <USB_ReadInterrupts>
 8005456:	4603      	mov	r3, r0
 8005458:	f003 0304 	and.w	r3, r3, #4
 800545c:	2b04      	cmp	r3, #4
 800545e:	d115      	bne.n	800548c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	f003 0304 	and.w	r3, r3, #4
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f009 fc5c 	bl	800ed30 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6859      	ldr	r1, [r3, #4]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	69ba      	ldr	r2, [r7, #24]
 8005484:	430a      	orrs	r2, r1
 8005486:	605a      	str	r2, [r3, #4]
 8005488:	e000      	b.n	800548c <HAL_PCD_IRQHandler+0x93c>
      return;
 800548a:	bf00      	nop
    }
  }
}
 800548c:	3734      	adds	r7, #52	@ 0x34
 800548e:	46bd      	mov	sp, r7
 8005490:	bd90      	pop	{r4, r7, pc}

08005492 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b082      	sub	sp, #8
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
 800549a:	460b      	mov	r3, r1
 800549c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d101      	bne.n	80054ac <HAL_PCD_SetAddress+0x1a>
 80054a8:	2302      	movs	r3, #2
 80054aa:	e012      	b.n	80054d2 <HAL_PCD_SetAddress+0x40>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	78fa      	ldrb	r2, [r7, #3]
 80054b8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	78fa      	ldrb	r2, [r7, #3]
 80054c0:	4611      	mov	r1, r2
 80054c2:	4618      	mov	r0, r3
 80054c4:	f004 f8cc 	bl	8009660 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b084      	sub	sp, #16
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	4608      	mov	r0, r1
 80054e4:	4611      	mov	r1, r2
 80054e6:	461a      	mov	r2, r3
 80054e8:	4603      	mov	r3, r0
 80054ea:	70fb      	strb	r3, [r7, #3]
 80054ec:	460b      	mov	r3, r1
 80054ee:	803b      	strh	r3, [r7, #0]
 80054f0:	4613      	mov	r3, r2
 80054f2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80054f4:	2300      	movs	r3, #0
 80054f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80054f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	da0f      	bge.n	8005520 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005500:	78fb      	ldrb	r3, [r7, #3]
 8005502:	f003 020f 	and.w	r2, r3, #15
 8005506:	4613      	mov	r3, r2
 8005508:	00db      	lsls	r3, r3, #3
 800550a:	4413      	add	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	3310      	adds	r3, #16
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	4413      	add	r3, r2
 8005514:	3304      	adds	r3, #4
 8005516:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2201      	movs	r2, #1
 800551c:	705a      	strb	r2, [r3, #1]
 800551e:	e00f      	b.n	8005540 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005520:	78fb      	ldrb	r3, [r7, #3]
 8005522:	f003 020f 	and.w	r2, r3, #15
 8005526:	4613      	mov	r3, r2
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	4413      	add	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	4413      	add	r3, r2
 8005536:	3304      	adds	r3, #4
 8005538:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005540:	78fb      	ldrb	r3, [r7, #3]
 8005542:	f003 030f 	and.w	r3, r3, #15
 8005546:	b2da      	uxtb	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800554c:	883b      	ldrh	r3, [r7, #0]
 800554e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	78ba      	ldrb	r2, [r7, #2]
 800555a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	785b      	ldrb	r3, [r3, #1]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d004      	beq.n	800556e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	461a      	mov	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800556e:	78bb      	ldrb	r3, [r7, #2]
 8005570:	2b02      	cmp	r3, #2
 8005572:	d102      	bne.n	800557a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005580:	2b01      	cmp	r3, #1
 8005582:	d101      	bne.n	8005588 <HAL_PCD_EP_Open+0xae>
 8005584:	2302      	movs	r3, #2
 8005586:	e00e      	b.n	80055a6 <HAL_PCD_EP_Open+0xcc>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68f9      	ldr	r1, [r7, #12]
 8005596:	4618      	mov	r0, r3
 8005598:	f003 fa4c 	bl	8008a34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80055a4:	7afb      	ldrb	r3, [r7, #11]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b084      	sub	sp, #16
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
 80055b6:	460b      	mov	r3, r1
 80055b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80055ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	da0f      	bge.n	80055e2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055c2:	78fb      	ldrb	r3, [r7, #3]
 80055c4:	f003 020f 	and.w	r2, r3, #15
 80055c8:	4613      	mov	r3, r2
 80055ca:	00db      	lsls	r3, r3, #3
 80055cc:	4413      	add	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	3310      	adds	r3, #16
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	4413      	add	r3, r2
 80055d6:	3304      	adds	r3, #4
 80055d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2201      	movs	r2, #1
 80055de:	705a      	strb	r2, [r3, #1]
 80055e0:	e00f      	b.n	8005602 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055e2:	78fb      	ldrb	r3, [r7, #3]
 80055e4:	f003 020f 	and.w	r2, r3, #15
 80055e8:	4613      	mov	r3, r2
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	4413      	add	r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	4413      	add	r3, r2
 80055f8:	3304      	adds	r3, #4
 80055fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005602:	78fb      	ldrb	r3, [r7, #3]
 8005604:	f003 030f 	and.w	r3, r3, #15
 8005608:	b2da      	uxtb	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005614:	2b01      	cmp	r3, #1
 8005616:	d101      	bne.n	800561c <HAL_PCD_EP_Close+0x6e>
 8005618:	2302      	movs	r3, #2
 800561a:	e00e      	b.n	800563a <HAL_PCD_EP_Close+0x8c>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68f9      	ldr	r1, [r7, #12]
 800562a:	4618      	mov	r0, r3
 800562c:	f003 fa8a 	bl	8008b44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	b086      	sub	sp, #24
 8005646:	af00      	add	r7, sp, #0
 8005648:	60f8      	str	r0, [r7, #12]
 800564a:	607a      	str	r2, [r7, #4]
 800564c:	603b      	str	r3, [r7, #0]
 800564e:	460b      	mov	r3, r1
 8005650:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005652:	7afb      	ldrb	r3, [r7, #11]
 8005654:	f003 020f 	and.w	r2, r3, #15
 8005658:	4613      	mov	r3, r2
 800565a:	00db      	lsls	r3, r3, #3
 800565c:	4413      	add	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4413      	add	r3, r2
 8005668:	3304      	adds	r3, #4
 800566a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	2200      	movs	r2, #0
 800567c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	2200      	movs	r2, #0
 8005682:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005684:	7afb      	ldrb	r3, [r7, #11]
 8005686:	f003 030f 	and.w	r3, r3, #15
 800568a:	b2da      	uxtb	r2, r3
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	799b      	ldrb	r3, [r3, #6]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d102      	bne.n	800569e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6818      	ldr	r0, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	799b      	ldrb	r3, [r3, #6]
 80056a6:	461a      	mov	r2, r3
 80056a8:	6979      	ldr	r1, [r7, #20]
 80056aa:	f003 fb27 	bl	8008cfc <USB_EPStartXfer>

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3718      	adds	r7, #24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	460b      	mov	r3, r1
 80056c2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80056c4:	78fb      	ldrb	r3, [r7, #3]
 80056c6:	f003 020f 	and.w	r2, r3, #15
 80056ca:	6879      	ldr	r1, [r7, #4]
 80056cc:	4613      	mov	r3, r2
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	4413      	add	r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	440b      	add	r3, r1
 80056d6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80056da:	681b      	ldr	r3, [r3, #0]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	607a      	str	r2, [r7, #4]
 80056f2:	603b      	str	r3, [r7, #0]
 80056f4:	460b      	mov	r3, r1
 80056f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056f8:	7afb      	ldrb	r3, [r7, #11]
 80056fa:	f003 020f 	and.w	r2, r3, #15
 80056fe:	4613      	mov	r3, r2
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	4413      	add	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	3310      	adds	r3, #16
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	4413      	add	r3, r2
 800570c:	3304      	adds	r3, #4
 800570e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	683a      	ldr	r2, [r7, #0]
 800571a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	2200      	movs	r2, #0
 8005720:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	2201      	movs	r2, #1
 8005726:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005728:	7afb      	ldrb	r3, [r7, #11]
 800572a:	f003 030f 	and.w	r3, r3, #15
 800572e:	b2da      	uxtb	r2, r3
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	799b      	ldrb	r3, [r3, #6]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d102      	bne.n	8005742 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6818      	ldr	r0, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	799b      	ldrb	r3, [r3, #6]
 800574a:	461a      	mov	r2, r3
 800574c:	6979      	ldr	r1, [r7, #20]
 800574e:	f003 fad5 	bl	8008cfc <USB_EPStartXfer>

  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3718      	adds	r7, #24
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	460b      	mov	r3, r1
 8005766:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005768:	78fb      	ldrb	r3, [r7, #3]
 800576a:	f003 030f 	and.w	r3, r3, #15
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	7912      	ldrb	r2, [r2, #4]
 8005772:	4293      	cmp	r3, r2
 8005774:	d901      	bls.n	800577a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e04f      	b.n	800581a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800577a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800577e:	2b00      	cmp	r3, #0
 8005780:	da0f      	bge.n	80057a2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005782:	78fb      	ldrb	r3, [r7, #3]
 8005784:	f003 020f 	and.w	r2, r3, #15
 8005788:	4613      	mov	r3, r2
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	4413      	add	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	3310      	adds	r3, #16
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	4413      	add	r3, r2
 8005796:	3304      	adds	r3, #4
 8005798:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2201      	movs	r2, #1
 800579e:	705a      	strb	r2, [r3, #1]
 80057a0:	e00d      	b.n	80057be <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80057a2:	78fa      	ldrb	r2, [r7, #3]
 80057a4:	4613      	mov	r3, r2
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	4413      	add	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	4413      	add	r3, r2
 80057b4:	3304      	adds	r3, #4
 80057b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2201      	movs	r2, #1
 80057c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057c4:	78fb      	ldrb	r3, [r7, #3]
 80057c6:	f003 030f 	and.w	r3, r3, #15
 80057ca:	b2da      	uxtb	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d101      	bne.n	80057de <HAL_PCD_EP_SetStall+0x82>
 80057da:	2302      	movs	r3, #2
 80057dc:	e01d      	b.n	800581a <HAL_PCD_EP_SetStall+0xbe>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68f9      	ldr	r1, [r7, #12]
 80057ec:	4618      	mov	r0, r3
 80057ee:	f003 fe63 	bl	80094b8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80057f2:	78fb      	ldrb	r3, [r7, #3]
 80057f4:	f003 030f 	and.w	r3, r3, #15
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d109      	bne.n	8005810 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6818      	ldr	r0, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	7999      	ldrb	r1, [r3, #6]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800580a:	461a      	mov	r2, r3
 800580c:	f004 f854 	bl	80098b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b084      	sub	sp, #16
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
 800582a:	460b      	mov	r3, r1
 800582c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800582e:	78fb      	ldrb	r3, [r7, #3]
 8005830:	f003 030f 	and.w	r3, r3, #15
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	7912      	ldrb	r2, [r2, #4]
 8005838:	4293      	cmp	r3, r2
 800583a:	d901      	bls.n	8005840 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e042      	b.n	80058c6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005840:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005844:	2b00      	cmp	r3, #0
 8005846:	da0f      	bge.n	8005868 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005848:	78fb      	ldrb	r3, [r7, #3]
 800584a:	f003 020f 	and.w	r2, r3, #15
 800584e:	4613      	mov	r3, r2
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	4413      	add	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	3310      	adds	r3, #16
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	4413      	add	r3, r2
 800585c:	3304      	adds	r3, #4
 800585e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2201      	movs	r2, #1
 8005864:	705a      	strb	r2, [r3, #1]
 8005866:	e00f      	b.n	8005888 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005868:	78fb      	ldrb	r3, [r7, #3]
 800586a:	f003 020f 	and.w	r2, r3, #15
 800586e:	4613      	mov	r3, r2
 8005870:	00db      	lsls	r3, r3, #3
 8005872:	4413      	add	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	4413      	add	r3, r2
 800587e:	3304      	adds	r3, #4
 8005880:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800588e:	78fb      	ldrb	r3, [r7, #3]
 8005890:	f003 030f 	and.w	r3, r3, #15
 8005894:	b2da      	uxtb	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d101      	bne.n	80058a8 <HAL_PCD_EP_ClrStall+0x86>
 80058a4:	2302      	movs	r3, #2
 80058a6:	e00e      	b.n	80058c6 <HAL_PCD_EP_ClrStall+0xa4>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68f9      	ldr	r1, [r7, #12]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f003 fe6c 	bl	8009594 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b084      	sub	sp, #16
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	460b      	mov	r3, r1
 80058d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80058da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	da0c      	bge.n	80058fc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058e2:	78fb      	ldrb	r3, [r7, #3]
 80058e4:	f003 020f 	and.w	r2, r3, #15
 80058e8:	4613      	mov	r3, r2
 80058ea:	00db      	lsls	r3, r3, #3
 80058ec:	4413      	add	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	3310      	adds	r3, #16
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	4413      	add	r3, r2
 80058f6:	3304      	adds	r3, #4
 80058f8:	60fb      	str	r3, [r7, #12]
 80058fa:	e00c      	b.n	8005916 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058fc:	78fb      	ldrb	r3, [r7, #3]
 80058fe:	f003 020f 	and.w	r2, r3, #15
 8005902:	4613      	mov	r3, r2
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	4413      	add	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	4413      	add	r3, r2
 8005912:	3304      	adds	r3, #4
 8005914:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68f9      	ldr	r1, [r7, #12]
 800591c:	4618      	mov	r0, r3
 800591e:	f003 fc8b 	bl	8009238 <USB_EPStopXfer>
 8005922:	4603      	mov	r3, r0
 8005924:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005926:	7afb      	ldrb	r3, [r7, #11]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b08a      	sub	sp, #40	@ 0x28
 8005934:	af02      	add	r7, sp, #8
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	4613      	mov	r3, r2
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	4413      	add	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	3310      	adds	r3, #16
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	4413      	add	r3, r2
 8005954:	3304      	adds	r3, #4
 8005956:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	695a      	ldr	r2, [r3, #20]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	429a      	cmp	r2, r3
 8005962:	d901      	bls.n	8005968 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e06b      	b.n	8005a40 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	691a      	ldr	r2, [r3, #16]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	69fa      	ldr	r2, [r7, #28]
 800597a:	429a      	cmp	r2, r3
 800597c:	d902      	bls.n	8005984 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	3303      	adds	r3, #3
 8005988:	089b      	lsrs	r3, r3, #2
 800598a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800598c:	e02a      	b.n	80059e4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	691a      	ldr	r2, [r3, #16]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	69fa      	ldr	r2, [r7, #28]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d902      	bls.n	80059aa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	3303      	adds	r3, #3
 80059ae:	089b      	lsrs	r3, r3, #2
 80059b0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	68d9      	ldr	r1, [r3, #12]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	4603      	mov	r3, r0
 80059c6:	6978      	ldr	r0, [r7, #20]
 80059c8:	f003 fce0 	bl	800938c <USB_WritePacket>

    ep->xfer_buff  += len;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	68da      	ldr	r2, [r3, #12]
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	441a      	add	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	695a      	ldr	r2, [r3, #20]
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	441a      	add	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	015a      	lsls	r2, r3, #5
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d809      	bhi.n	8005a0e <PCD_WriteEmptyTxFifo+0xde>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	695a      	ldr	r2, [r3, #20]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d203      	bcs.n	8005a0e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1bf      	bne.n	800598e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	691a      	ldr	r2, [r3, #16]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d811      	bhi.n	8005a3e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	f003 030f 	and.w	r3, r3, #15
 8005a20:	2201      	movs	r2, #1
 8005a22:	fa02 f303 	lsl.w	r3, r2, r3
 8005a26:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	43db      	mvns	r3, r3
 8005a34:	6939      	ldr	r1, [r7, #16]
 8005a36:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3720      	adds	r7, #32
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b088      	sub	sp, #32
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	333c      	adds	r3, #60	@ 0x3c
 8005a60:	3304      	adds	r3, #4
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	799b      	ldrb	r3, [r3, #6]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d17b      	bne.n	8005b76 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	f003 0308 	and.w	r3, r3, #8
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d015      	beq.n	8005ab4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	4a61      	ldr	r2, [pc, #388]	@ (8005c10 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	f240 80b9 	bls.w	8005c04 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f000 80b3 	beq.w	8005c04 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aaa:	461a      	mov	r2, r3
 8005aac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ab0:	6093      	str	r3, [r2, #8]
 8005ab2:	e0a7      	b.n	8005c04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f003 0320 	and.w	r3, r3, #32
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d009      	beq.n	8005ad2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aca:	461a      	mov	r2, r3
 8005acc:	2320      	movs	r3, #32
 8005ace:	6093      	str	r3, [r2, #8]
 8005ad0:	e098      	b.n	8005c04 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f040 8093 	bne.w	8005c04 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	4a4b      	ldr	r2, [pc, #300]	@ (8005c10 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d90f      	bls.n	8005b06 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00a      	beq.n	8005b06 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005afc:	461a      	mov	r2, r3
 8005afe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b02:	6093      	str	r3, [r2, #8]
 8005b04:	e07e      	b.n	8005c04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	00db      	lsls	r3, r3, #3
 8005b0c:	4413      	add	r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	4413      	add	r3, r2
 8005b18:	3304      	adds	r3, #4
 8005b1a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6a1a      	ldr	r2, [r3, #32]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	0159      	lsls	r1, r3, #5
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	440b      	add	r3, r1
 8005b28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b32:	1ad2      	subs	r2, r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d114      	bne.n	8005b68 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d109      	bne.n	8005b5a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6818      	ldr	r0, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005b50:	461a      	mov	r2, r3
 8005b52:	2101      	movs	r1, #1
 8005b54:	f003 feb0 	bl	80098b8 <USB_EP0_OutStart>
 8005b58:	e006      	b.n	8005b68 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	68da      	ldr	r2, [r3, #12]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	441a      	add	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f009 f816 	bl	800eba0 <HAL_PCD_DataOutStageCallback>
 8005b74:	e046      	b.n	8005c04 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	4a26      	ldr	r2, [pc, #152]	@ (8005c14 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d124      	bne.n	8005bc8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00a      	beq.n	8005b9e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b94:	461a      	mov	r2, r3
 8005b96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b9a:	6093      	str	r3, [r2, #8]
 8005b9c:	e032      	b.n	8005c04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f003 0320 	and.w	r3, r3, #32
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d008      	beq.n	8005bba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	2320      	movs	r3, #32
 8005bb8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f008 ffed 	bl	800eba0 <HAL_PCD_DataOutStageCallback>
 8005bc6:	e01d      	b.n	8005c04 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d114      	bne.n	8005bf8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005bce:	6879      	ldr	r1, [r7, #4]
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	4413      	add	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	440b      	add	r3, r1
 8005bdc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d108      	bne.n	8005bf8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6818      	ldr	r0, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	f003 fe60 	bl	80098b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f008 ffce 	bl	800eba0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3720      	adds	r7, #32
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	4f54300a 	.word	0x4f54300a
 8005c14:	4f54310a 	.word	0x4f54310a

08005c18 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	333c      	adds	r3, #60	@ 0x3c
 8005c30:	3304      	adds	r3, #4
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	4a15      	ldr	r2, [pc, #84]	@ (8005ca0 <PCD_EP_OutSetupPacket_int+0x88>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d90e      	bls.n	8005c6c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d009      	beq.n	8005c6c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c64:	461a      	mov	r2, r3
 8005c66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c6a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f008 ff85 	bl	800eb7c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	4a0a      	ldr	r2, [pc, #40]	@ (8005ca0 <PCD_EP_OutSetupPacket_int+0x88>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d90c      	bls.n	8005c94 <PCD_EP_OutSetupPacket_int+0x7c>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	799b      	ldrb	r3, [r3, #6]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d108      	bne.n	8005c94 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6818      	ldr	r0, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	2101      	movs	r1, #1
 8005c90:	f003 fe12 	bl	80098b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3718      	adds	r7, #24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	4f54300a 	.word	0x4f54300a

08005ca4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	460b      	mov	r3, r1
 8005cae:	70fb      	strb	r3, [r7, #3]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005cbc:	78fb      	ldrb	r3, [r7, #3]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d107      	bne.n	8005cd2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005cc2:	883b      	ldrh	r3, [r7, #0]
 8005cc4:	0419      	lsls	r1, r3, #16
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	629a      	str	r2, [r3, #40]	@ 0x28
 8005cd0:	e028      	b.n	8005d24 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd8:	0c1b      	lsrs	r3, r3, #16
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	4413      	add	r3, r2
 8005cde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	73fb      	strb	r3, [r7, #15]
 8005ce4:	e00d      	b.n	8005d02 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	7bfb      	ldrb	r3, [r7, #15]
 8005cec:	3340      	adds	r3, #64	@ 0x40
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	0c1b      	lsrs	r3, r3, #16
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005cfc:	7bfb      	ldrb	r3, [r7, #15]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	73fb      	strb	r3, [r7, #15]
 8005d02:	7bfa      	ldrb	r2, [r7, #15]
 8005d04:	78fb      	ldrb	r3, [r7, #3]
 8005d06:	3b01      	subs	r3, #1
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d3ec      	bcc.n	8005ce6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005d0c:	883b      	ldrh	r3, [r7, #0]
 8005d0e:	0418      	lsls	r0, r3, #16
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6819      	ldr	r1, [r3, #0]
 8005d14:	78fb      	ldrb	r3, [r7, #3]
 8005d16:	3b01      	subs	r3, #1
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	4302      	orrs	r2, r0
 8005d1c:	3340      	adds	r3, #64	@ 0x40
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	440b      	add	r3, r1
 8005d22:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b083      	sub	sp, #12
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	887a      	ldrh	r2, [r7, #2]
 8005d44:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e267      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d075      	beq.n	8005e76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005d8a:	4b88      	ldr	r3, [pc, #544]	@ (8005fac <HAL_RCC_OscConfig+0x240>)
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f003 030c 	and.w	r3, r3, #12
 8005d92:	2b04      	cmp	r3, #4
 8005d94:	d00c      	beq.n	8005db0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d96:	4b85      	ldr	r3, [pc, #532]	@ (8005fac <HAL_RCC_OscConfig+0x240>)
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005d9e:	2b08      	cmp	r3, #8
 8005da0:	d112      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005da2:	4b82      	ldr	r3, [pc, #520]	@ (8005fac <HAL_RCC_OscConfig+0x240>)
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005daa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005dae:	d10b      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005db0:	4b7e      	ldr	r3, [pc, #504]	@ (8005fac <HAL_RCC_OscConfig+0x240>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d05b      	beq.n	8005e74 <HAL_RCC_OscConfig+0x108>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d157      	bne.n	8005e74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e242      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dd0:	d106      	bne.n	8005de0 <HAL_RCC_OscConfig+0x74>
 8005dd2:	4b76      	ldr	r3, [pc, #472]	@ (8005fac <HAL_RCC_OscConfig+0x240>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a75      	ldr	r2, [pc, #468]	@ (8005fac <HAL_RCC_OscConfig+0x240>)
 8005dd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ddc:	6013      	str	r3, [r2, #0]
 8005dde:	e01d      	b.n	8005e1c <HAL_RCC_OscConfig+0xb0>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005de8:	d10c      	bne.n	8005e04 <HAL_RCC_OscConfig+0x98>
 8005dea:	4b70      	ldr	r3, [pc, #448]	@ (8005fac <HAL_RCC_OscConfig+0x240>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a6f      	ldr	r2, [pc, #444]	@ (8005fac <HAL_RCC_OscConfig+0x240>)
 8005df0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005df4:	6013      	str	r3, [r2, #0]
 8005df6:	4b6d      	ldr	r3, [pc, #436]	@ (8005fac <HAL_RCC_OscConfig+0x240>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a6c      	ldr	r2, [pc, #432]	@ (8005fac <HAL_RCC_OscConfig+0x240>)
 8005dfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e00:	6013      	str	r3, [r2, #0]
 8005e02:	e00b      	b.n	8005e1c <HAL_RCC_OscConfig+0xb0>
 8005e04:	4b69      	ldr	r3, [pc, #420]	@ (8005fac <HAL_RCC_OscConfig+0x240>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a68      	ldr	r2, [pc, #416]	@ (8005fac <HAL_RCC_OscConfig+0x240>)
 8005e0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e0e:	6013      	str	r3, [r2, #0]
 8005e10:	4b66      	ldr	r3, [pc, #408]	@ (8005fac <HAL_RCC_OscConfig+0x240>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a65      	ldr	r2, [pc, #404]	@ (8005fac <HAL_RCC_OscConfig+0x240>)
 8005e16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d013      	beq.n	8005e4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e24:	f7fd f9f2 	bl	800320c <HAL_GetTick>
 8005e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e2a:	e008      	b.n	8005e3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e2c:	f7fd f9ee 	bl	800320c <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	2b64      	cmp	r3, #100	@ 0x64
 8005e38:	d901      	bls.n	8005e3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e207      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e3e:	4b5b      	ldr	r3, [pc, #364]	@ (8005fac <HAL_RCC_OscConfig+0x240>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d0f0      	beq.n	8005e2c <HAL_RCC_OscConfig+0xc0>
 8005e4a:	e014      	b.n	8005e76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e4c:	f7fd f9de 	bl	800320c <HAL_GetTick>
 8005e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e52:	e008      	b.n	8005e66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e54:	f7fd f9da 	bl	800320c <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b64      	cmp	r3, #100	@ 0x64
 8005e60:	d901      	bls.n	8005e66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e1f3      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e66:	4b51      	ldr	r3, [pc, #324]	@ (8005fac <HAL_RCC_OscConfig+0x240>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1f0      	bne.n	8005e54 <HAL_RCC_OscConfig+0xe8>
 8005e72:	e000      	b.n	8005e76 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d063      	beq.n	8005f4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005e82:	4b4a      	ldr	r3, [pc, #296]	@ (8005fac <HAL_RCC_OscConfig+0x240>)
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f003 030c 	and.w	r3, r3, #12
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00b      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e8e:	4b47      	ldr	r3, [pc, #284]	@ (8005fac <HAL_RCC_OscConfig+0x240>)
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005e96:	2b08      	cmp	r3, #8
 8005e98:	d11c      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e9a:	4b44      	ldr	r3, [pc, #272]	@ (8005fac <HAL_RCC_OscConfig+0x240>)
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d116      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ea6:	4b41      	ldr	r3, [pc, #260]	@ (8005fac <HAL_RCC_OscConfig+0x240>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d005      	beq.n	8005ebe <HAL_RCC_OscConfig+0x152>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d001      	beq.n	8005ebe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e1c7      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ebe:	4b3b      	ldr	r3, [pc, #236]	@ (8005fac <HAL_RCC_OscConfig+0x240>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	00db      	lsls	r3, r3, #3
 8005ecc:	4937      	ldr	r1, [pc, #220]	@ (8005fac <HAL_RCC_OscConfig+0x240>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ed2:	e03a      	b.n	8005f4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d020      	beq.n	8005f1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005edc:	4b34      	ldr	r3, [pc, #208]	@ (8005fb0 <HAL_RCC_OscConfig+0x244>)
 8005ede:	2201      	movs	r2, #1
 8005ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee2:	f7fd f993 	bl	800320c <HAL_GetTick>
 8005ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ee8:	e008      	b.n	8005efc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005eea:	f7fd f98f 	bl	800320c <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d901      	bls.n	8005efc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e1a8      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005efc:	4b2b      	ldr	r3, [pc, #172]	@ (8005fac <HAL_RCC_OscConfig+0x240>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d0f0      	beq.n	8005eea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f08:	4b28      	ldr	r3, [pc, #160]	@ (8005fac <HAL_RCC_OscConfig+0x240>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	00db      	lsls	r3, r3, #3
 8005f16:	4925      	ldr	r1, [pc, #148]	@ (8005fac <HAL_RCC_OscConfig+0x240>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	600b      	str	r3, [r1, #0]
 8005f1c:	e015      	b.n	8005f4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f1e:	4b24      	ldr	r3, [pc, #144]	@ (8005fb0 <HAL_RCC_OscConfig+0x244>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f24:	f7fd f972 	bl	800320c <HAL_GetTick>
 8005f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f2a:	e008      	b.n	8005f3e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f2c:	f7fd f96e 	bl	800320c <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d901      	bls.n	8005f3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e187      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8005fac <HAL_RCC_OscConfig+0x240>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0302 	and.w	r3, r3, #2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1f0      	bne.n	8005f2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0308 	and.w	r3, r3, #8
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d036      	beq.n	8005fc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d016      	beq.n	8005f8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f5e:	4b15      	ldr	r3, [pc, #84]	@ (8005fb4 <HAL_RCC_OscConfig+0x248>)
 8005f60:	2201      	movs	r2, #1
 8005f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f64:	f7fd f952 	bl	800320c <HAL_GetTick>
 8005f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f6a:	e008      	b.n	8005f7e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f6c:	f7fd f94e 	bl	800320c <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d901      	bls.n	8005f7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e167      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8005fac <HAL_RCC_OscConfig+0x240>)
 8005f80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d0f0      	beq.n	8005f6c <HAL_RCC_OscConfig+0x200>
 8005f8a:	e01b      	b.n	8005fc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f8c:	4b09      	ldr	r3, [pc, #36]	@ (8005fb4 <HAL_RCC_OscConfig+0x248>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f92:	f7fd f93b 	bl	800320c <HAL_GetTick>
 8005f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f98:	e00e      	b.n	8005fb8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f9a:	f7fd f937 	bl	800320c <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d907      	bls.n	8005fb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e150      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
 8005fac:	40023800 	.word	0x40023800
 8005fb0:	42470000 	.word	0x42470000
 8005fb4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fb8:	4b88      	ldr	r3, [pc, #544]	@ (80061dc <HAL_RCC_OscConfig+0x470>)
 8005fba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1ea      	bne.n	8005f9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0304 	and.w	r3, r3, #4
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f000 8097 	beq.w	8006100 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fd6:	4b81      	ldr	r3, [pc, #516]	@ (80061dc <HAL_RCC_OscConfig+0x470>)
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10f      	bne.n	8006002 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60bb      	str	r3, [r7, #8]
 8005fe6:	4b7d      	ldr	r3, [pc, #500]	@ (80061dc <HAL_RCC_OscConfig+0x470>)
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fea:	4a7c      	ldr	r2, [pc, #496]	@ (80061dc <HAL_RCC_OscConfig+0x470>)
 8005fec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ff0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ff2:	4b7a      	ldr	r3, [pc, #488]	@ (80061dc <HAL_RCC_OscConfig+0x470>)
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ffa:	60bb      	str	r3, [r7, #8]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ffe:	2301      	movs	r3, #1
 8006000:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006002:	4b77      	ldr	r3, [pc, #476]	@ (80061e0 <HAL_RCC_OscConfig+0x474>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800600a:	2b00      	cmp	r3, #0
 800600c:	d118      	bne.n	8006040 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800600e:	4b74      	ldr	r3, [pc, #464]	@ (80061e0 <HAL_RCC_OscConfig+0x474>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a73      	ldr	r2, [pc, #460]	@ (80061e0 <HAL_RCC_OscConfig+0x474>)
 8006014:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800601a:	f7fd f8f7 	bl	800320c <HAL_GetTick>
 800601e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006020:	e008      	b.n	8006034 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006022:	f7fd f8f3 	bl	800320c <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	2b02      	cmp	r3, #2
 800602e:	d901      	bls.n	8006034 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e10c      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006034:	4b6a      	ldr	r3, [pc, #424]	@ (80061e0 <HAL_RCC_OscConfig+0x474>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800603c:	2b00      	cmp	r3, #0
 800603e:	d0f0      	beq.n	8006022 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d106      	bne.n	8006056 <HAL_RCC_OscConfig+0x2ea>
 8006048:	4b64      	ldr	r3, [pc, #400]	@ (80061dc <HAL_RCC_OscConfig+0x470>)
 800604a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800604c:	4a63      	ldr	r2, [pc, #396]	@ (80061dc <HAL_RCC_OscConfig+0x470>)
 800604e:	f043 0301 	orr.w	r3, r3, #1
 8006052:	6713      	str	r3, [r2, #112]	@ 0x70
 8006054:	e01c      	b.n	8006090 <HAL_RCC_OscConfig+0x324>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	2b05      	cmp	r3, #5
 800605c:	d10c      	bne.n	8006078 <HAL_RCC_OscConfig+0x30c>
 800605e:	4b5f      	ldr	r3, [pc, #380]	@ (80061dc <HAL_RCC_OscConfig+0x470>)
 8006060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006062:	4a5e      	ldr	r2, [pc, #376]	@ (80061dc <HAL_RCC_OscConfig+0x470>)
 8006064:	f043 0304 	orr.w	r3, r3, #4
 8006068:	6713      	str	r3, [r2, #112]	@ 0x70
 800606a:	4b5c      	ldr	r3, [pc, #368]	@ (80061dc <HAL_RCC_OscConfig+0x470>)
 800606c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800606e:	4a5b      	ldr	r2, [pc, #364]	@ (80061dc <HAL_RCC_OscConfig+0x470>)
 8006070:	f043 0301 	orr.w	r3, r3, #1
 8006074:	6713      	str	r3, [r2, #112]	@ 0x70
 8006076:	e00b      	b.n	8006090 <HAL_RCC_OscConfig+0x324>
 8006078:	4b58      	ldr	r3, [pc, #352]	@ (80061dc <HAL_RCC_OscConfig+0x470>)
 800607a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800607c:	4a57      	ldr	r2, [pc, #348]	@ (80061dc <HAL_RCC_OscConfig+0x470>)
 800607e:	f023 0301 	bic.w	r3, r3, #1
 8006082:	6713      	str	r3, [r2, #112]	@ 0x70
 8006084:	4b55      	ldr	r3, [pc, #340]	@ (80061dc <HAL_RCC_OscConfig+0x470>)
 8006086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006088:	4a54      	ldr	r2, [pc, #336]	@ (80061dc <HAL_RCC_OscConfig+0x470>)
 800608a:	f023 0304 	bic.w	r3, r3, #4
 800608e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d015      	beq.n	80060c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006098:	f7fd f8b8 	bl	800320c <HAL_GetTick>
 800609c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800609e:	e00a      	b.n	80060b6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060a0:	f7fd f8b4 	bl	800320c <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d901      	bls.n	80060b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e0cb      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060b6:	4b49      	ldr	r3, [pc, #292]	@ (80061dc <HAL_RCC_OscConfig+0x470>)
 80060b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d0ee      	beq.n	80060a0 <HAL_RCC_OscConfig+0x334>
 80060c2:	e014      	b.n	80060ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060c4:	f7fd f8a2 	bl	800320c <HAL_GetTick>
 80060c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060ca:	e00a      	b.n	80060e2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060cc:	f7fd f89e 	bl	800320c <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060da:	4293      	cmp	r3, r2
 80060dc:	d901      	bls.n	80060e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e0b5      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060e2:	4b3e      	ldr	r3, [pc, #248]	@ (80061dc <HAL_RCC_OscConfig+0x470>)
 80060e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1ee      	bne.n	80060cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80060ee:	7dfb      	ldrb	r3, [r7, #23]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d105      	bne.n	8006100 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060f4:	4b39      	ldr	r3, [pc, #228]	@ (80061dc <HAL_RCC_OscConfig+0x470>)
 80060f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f8:	4a38      	ldr	r2, [pc, #224]	@ (80061dc <HAL_RCC_OscConfig+0x470>)
 80060fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	2b00      	cmp	r3, #0
 8006106:	f000 80a1 	beq.w	800624c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800610a:	4b34      	ldr	r3, [pc, #208]	@ (80061dc <HAL_RCC_OscConfig+0x470>)
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f003 030c 	and.w	r3, r3, #12
 8006112:	2b08      	cmp	r3, #8
 8006114:	d05c      	beq.n	80061d0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	2b02      	cmp	r3, #2
 800611c:	d141      	bne.n	80061a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800611e:	4b31      	ldr	r3, [pc, #196]	@ (80061e4 <HAL_RCC_OscConfig+0x478>)
 8006120:	2200      	movs	r2, #0
 8006122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006124:	f7fd f872 	bl	800320c <HAL_GetTick>
 8006128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800612a:	e008      	b.n	800613e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800612c:	f7fd f86e 	bl	800320c <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b02      	cmp	r3, #2
 8006138:	d901      	bls.n	800613e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e087      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800613e:	4b27      	ldr	r3, [pc, #156]	@ (80061dc <HAL_RCC_OscConfig+0x470>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1f0      	bne.n	800612c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	69da      	ldr	r2, [r3, #28]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	431a      	orrs	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006158:	019b      	lsls	r3, r3, #6
 800615a:	431a      	orrs	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006160:	085b      	lsrs	r3, r3, #1
 8006162:	3b01      	subs	r3, #1
 8006164:	041b      	lsls	r3, r3, #16
 8006166:	431a      	orrs	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616c:	061b      	lsls	r3, r3, #24
 800616e:	491b      	ldr	r1, [pc, #108]	@ (80061dc <HAL_RCC_OscConfig+0x470>)
 8006170:	4313      	orrs	r3, r2
 8006172:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006174:	4b1b      	ldr	r3, [pc, #108]	@ (80061e4 <HAL_RCC_OscConfig+0x478>)
 8006176:	2201      	movs	r2, #1
 8006178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800617a:	f7fd f847 	bl	800320c <HAL_GetTick>
 800617e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006180:	e008      	b.n	8006194 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006182:	f7fd f843 	bl	800320c <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	2b02      	cmp	r3, #2
 800618e:	d901      	bls.n	8006194 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e05c      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006194:	4b11      	ldr	r3, [pc, #68]	@ (80061dc <HAL_RCC_OscConfig+0x470>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d0f0      	beq.n	8006182 <HAL_RCC_OscConfig+0x416>
 80061a0:	e054      	b.n	800624c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061a2:	4b10      	ldr	r3, [pc, #64]	@ (80061e4 <HAL_RCC_OscConfig+0x478>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061a8:	f7fd f830 	bl	800320c <HAL_GetTick>
 80061ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ae:	e008      	b.n	80061c2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061b0:	f7fd f82c 	bl	800320c <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d901      	bls.n	80061c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e045      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061c2:	4b06      	ldr	r3, [pc, #24]	@ (80061dc <HAL_RCC_OscConfig+0x470>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1f0      	bne.n	80061b0 <HAL_RCC_OscConfig+0x444>
 80061ce:	e03d      	b.n	800624c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d107      	bne.n	80061e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e038      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
 80061dc:	40023800 	.word	0x40023800
 80061e0:	40007000 	.word	0x40007000
 80061e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006258 <HAL_RCC_OscConfig+0x4ec>)
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d028      	beq.n	8006248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006200:	429a      	cmp	r2, r3
 8006202:	d121      	bne.n	8006248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800620e:	429a      	cmp	r2, r3
 8006210:	d11a      	bne.n	8006248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006218:	4013      	ands	r3, r2
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800621e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006220:	4293      	cmp	r3, r2
 8006222:	d111      	bne.n	8006248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800622e:	085b      	lsrs	r3, r3, #1
 8006230:	3b01      	subs	r3, #1
 8006232:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006234:	429a      	cmp	r2, r3
 8006236:	d107      	bne.n	8006248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006242:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006244:	429a      	cmp	r2, r3
 8006246:	d001      	beq.n	800624c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e000      	b.n	800624e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3718      	adds	r7, #24
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	40023800 	.word	0x40023800

0800625c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e0cc      	b.n	800640a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006270:	4b68      	ldr	r3, [pc, #416]	@ (8006414 <HAL_RCC_ClockConfig+0x1b8>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0307 	and.w	r3, r3, #7
 8006278:	683a      	ldr	r2, [r7, #0]
 800627a:	429a      	cmp	r2, r3
 800627c:	d90c      	bls.n	8006298 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800627e:	4b65      	ldr	r3, [pc, #404]	@ (8006414 <HAL_RCC_ClockConfig+0x1b8>)
 8006280:	683a      	ldr	r2, [r7, #0]
 8006282:	b2d2      	uxtb	r2, r2
 8006284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006286:	4b63      	ldr	r3, [pc, #396]	@ (8006414 <HAL_RCC_ClockConfig+0x1b8>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0307 	and.w	r3, r3, #7
 800628e:	683a      	ldr	r2, [r7, #0]
 8006290:	429a      	cmp	r2, r3
 8006292:	d001      	beq.n	8006298 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e0b8      	b.n	800640a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0302 	and.w	r3, r3, #2
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d020      	beq.n	80062e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d005      	beq.n	80062bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062b0:	4b59      	ldr	r3, [pc, #356]	@ (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	4a58      	ldr	r2, [pc, #352]	@ (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 80062b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80062ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0308 	and.w	r3, r3, #8
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d005      	beq.n	80062d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062c8:	4b53      	ldr	r3, [pc, #332]	@ (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	4a52      	ldr	r2, [pc, #328]	@ (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 80062ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80062d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062d4:	4b50      	ldr	r3, [pc, #320]	@ (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	494d      	ldr	r1, [pc, #308]	@ (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d044      	beq.n	800637c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d107      	bne.n	800630a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062fa:	4b47      	ldr	r3, [pc, #284]	@ (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d119      	bne.n	800633a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e07f      	b.n	800640a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	2b02      	cmp	r3, #2
 8006310:	d003      	beq.n	800631a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006316:	2b03      	cmp	r3, #3
 8006318:	d107      	bne.n	800632a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800631a:	4b3f      	ldr	r3, [pc, #252]	@ (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d109      	bne.n	800633a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e06f      	b.n	800640a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800632a:	4b3b      	ldr	r3, [pc, #236]	@ (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0302 	and.w	r3, r3, #2
 8006332:	2b00      	cmp	r3, #0
 8006334:	d101      	bne.n	800633a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e067      	b.n	800640a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800633a:	4b37      	ldr	r3, [pc, #220]	@ (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f023 0203 	bic.w	r2, r3, #3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	4934      	ldr	r1, [pc, #208]	@ (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 8006348:	4313      	orrs	r3, r2
 800634a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800634c:	f7fc ff5e 	bl	800320c <HAL_GetTick>
 8006350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006352:	e00a      	b.n	800636a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006354:	f7fc ff5a 	bl	800320c <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006362:	4293      	cmp	r3, r2
 8006364:	d901      	bls.n	800636a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e04f      	b.n	800640a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800636a:	4b2b      	ldr	r3, [pc, #172]	@ (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f003 020c 	and.w	r2, r3, #12
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	429a      	cmp	r2, r3
 800637a:	d1eb      	bne.n	8006354 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800637c:	4b25      	ldr	r3, [pc, #148]	@ (8006414 <HAL_RCC_ClockConfig+0x1b8>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0307 	and.w	r3, r3, #7
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	429a      	cmp	r2, r3
 8006388:	d20c      	bcs.n	80063a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800638a:	4b22      	ldr	r3, [pc, #136]	@ (8006414 <HAL_RCC_ClockConfig+0x1b8>)
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	b2d2      	uxtb	r2, r2
 8006390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006392:	4b20      	ldr	r3, [pc, #128]	@ (8006414 <HAL_RCC_ClockConfig+0x1b8>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0307 	and.w	r3, r3, #7
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	429a      	cmp	r2, r3
 800639e:	d001      	beq.n	80063a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e032      	b.n	800640a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0304 	and.w	r3, r3, #4
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d008      	beq.n	80063c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063b0:	4b19      	ldr	r3, [pc, #100]	@ (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	4916      	ldr	r1, [pc, #88]	@ (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0308 	and.w	r3, r3, #8
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d009      	beq.n	80063e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063ce:	4b12      	ldr	r3, [pc, #72]	@ (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	00db      	lsls	r3, r3, #3
 80063dc:	490e      	ldr	r1, [pc, #56]	@ (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80063e2:	f000 f821 	bl	8006428 <HAL_RCC_GetSysClockFreq>
 80063e6:	4602      	mov	r2, r0
 80063e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006418 <HAL_RCC_ClockConfig+0x1bc>)
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	091b      	lsrs	r3, r3, #4
 80063ee:	f003 030f 	and.w	r3, r3, #15
 80063f2:	490a      	ldr	r1, [pc, #40]	@ (800641c <HAL_RCC_ClockConfig+0x1c0>)
 80063f4:	5ccb      	ldrb	r3, [r1, r3]
 80063f6:	fa22 f303 	lsr.w	r3, r2, r3
 80063fa:	4a09      	ldr	r2, [pc, #36]	@ (8006420 <HAL_RCC_ClockConfig+0x1c4>)
 80063fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80063fe:	4b09      	ldr	r3, [pc, #36]	@ (8006424 <HAL_RCC_ClockConfig+0x1c8>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4618      	mov	r0, r3
 8006404:	f7fc fd0e 	bl	8002e24 <HAL_InitTick>

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	40023c00 	.word	0x40023c00
 8006418:	40023800 	.word	0x40023800
 800641c:	08012988 	.word	0x08012988
 8006420:	20000090 	.word	0x20000090
 8006424:	20000094 	.word	0x20000094

08006428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800642c:	b090      	sub	sp, #64	@ 0x40
 800642e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006434:	2300      	movs	r3, #0
 8006436:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006438:	2300      	movs	r3, #0
 800643a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800643c:	2300      	movs	r3, #0
 800643e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006440:	4b59      	ldr	r3, [pc, #356]	@ (80065a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f003 030c 	and.w	r3, r3, #12
 8006448:	2b08      	cmp	r3, #8
 800644a:	d00d      	beq.n	8006468 <HAL_RCC_GetSysClockFreq+0x40>
 800644c:	2b08      	cmp	r3, #8
 800644e:	f200 80a1 	bhi.w	8006594 <HAL_RCC_GetSysClockFreq+0x16c>
 8006452:	2b00      	cmp	r3, #0
 8006454:	d002      	beq.n	800645c <HAL_RCC_GetSysClockFreq+0x34>
 8006456:	2b04      	cmp	r3, #4
 8006458:	d003      	beq.n	8006462 <HAL_RCC_GetSysClockFreq+0x3a>
 800645a:	e09b      	b.n	8006594 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800645c:	4b53      	ldr	r3, [pc, #332]	@ (80065ac <HAL_RCC_GetSysClockFreq+0x184>)
 800645e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006460:	e09b      	b.n	800659a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006462:	4b53      	ldr	r3, [pc, #332]	@ (80065b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006464:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006466:	e098      	b.n	800659a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006468:	4b4f      	ldr	r3, [pc, #316]	@ (80065a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006470:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006472:	4b4d      	ldr	r3, [pc, #308]	@ (80065a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d028      	beq.n	80064d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800647e:	4b4a      	ldr	r3, [pc, #296]	@ (80065a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	099b      	lsrs	r3, r3, #6
 8006484:	2200      	movs	r2, #0
 8006486:	623b      	str	r3, [r7, #32]
 8006488:	627a      	str	r2, [r7, #36]	@ 0x24
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006490:	2100      	movs	r1, #0
 8006492:	4b47      	ldr	r3, [pc, #284]	@ (80065b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006494:	fb03 f201 	mul.w	r2, r3, r1
 8006498:	2300      	movs	r3, #0
 800649a:	fb00 f303 	mul.w	r3, r0, r3
 800649e:	4413      	add	r3, r2
 80064a0:	4a43      	ldr	r2, [pc, #268]	@ (80065b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80064a2:	fba0 1202 	umull	r1, r2, r0, r2
 80064a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064a8:	460a      	mov	r2, r1
 80064aa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80064ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064ae:	4413      	add	r3, r2
 80064b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064b4:	2200      	movs	r2, #0
 80064b6:	61bb      	str	r3, [r7, #24]
 80064b8:	61fa      	str	r2, [r7, #28]
 80064ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80064c2:	f7fa fb79 	bl	8000bb8 <__aeabi_uldivmod>
 80064c6:	4602      	mov	r2, r0
 80064c8:	460b      	mov	r3, r1
 80064ca:	4613      	mov	r3, r2
 80064cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064ce:	e053      	b.n	8006578 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064d0:	4b35      	ldr	r3, [pc, #212]	@ (80065a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	099b      	lsrs	r3, r3, #6
 80064d6:	2200      	movs	r2, #0
 80064d8:	613b      	str	r3, [r7, #16]
 80064da:	617a      	str	r2, [r7, #20]
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80064e2:	f04f 0b00 	mov.w	fp, #0
 80064e6:	4652      	mov	r2, sl
 80064e8:	465b      	mov	r3, fp
 80064ea:	f04f 0000 	mov.w	r0, #0
 80064ee:	f04f 0100 	mov.w	r1, #0
 80064f2:	0159      	lsls	r1, r3, #5
 80064f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064f8:	0150      	lsls	r0, r2, #5
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	ebb2 080a 	subs.w	r8, r2, sl
 8006502:	eb63 090b 	sbc.w	r9, r3, fp
 8006506:	f04f 0200 	mov.w	r2, #0
 800650a:	f04f 0300 	mov.w	r3, #0
 800650e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006512:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006516:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800651a:	ebb2 0408 	subs.w	r4, r2, r8
 800651e:	eb63 0509 	sbc.w	r5, r3, r9
 8006522:	f04f 0200 	mov.w	r2, #0
 8006526:	f04f 0300 	mov.w	r3, #0
 800652a:	00eb      	lsls	r3, r5, #3
 800652c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006530:	00e2      	lsls	r2, r4, #3
 8006532:	4614      	mov	r4, r2
 8006534:	461d      	mov	r5, r3
 8006536:	eb14 030a 	adds.w	r3, r4, sl
 800653a:	603b      	str	r3, [r7, #0]
 800653c:	eb45 030b 	adc.w	r3, r5, fp
 8006540:	607b      	str	r3, [r7, #4]
 8006542:	f04f 0200 	mov.w	r2, #0
 8006546:	f04f 0300 	mov.w	r3, #0
 800654a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800654e:	4629      	mov	r1, r5
 8006550:	028b      	lsls	r3, r1, #10
 8006552:	4621      	mov	r1, r4
 8006554:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006558:	4621      	mov	r1, r4
 800655a:	028a      	lsls	r2, r1, #10
 800655c:	4610      	mov	r0, r2
 800655e:	4619      	mov	r1, r3
 8006560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006562:	2200      	movs	r2, #0
 8006564:	60bb      	str	r3, [r7, #8]
 8006566:	60fa      	str	r2, [r7, #12]
 8006568:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800656c:	f7fa fb24 	bl	8000bb8 <__aeabi_uldivmod>
 8006570:	4602      	mov	r2, r0
 8006572:	460b      	mov	r3, r1
 8006574:	4613      	mov	r3, r2
 8006576:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006578:	4b0b      	ldr	r3, [pc, #44]	@ (80065a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	0c1b      	lsrs	r3, r3, #16
 800657e:	f003 0303 	and.w	r3, r3, #3
 8006582:	3301      	adds	r3, #1
 8006584:	005b      	lsls	r3, r3, #1
 8006586:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006588:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800658a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800658c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006590:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006592:	e002      	b.n	800659a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006594:	4b05      	ldr	r3, [pc, #20]	@ (80065ac <HAL_RCC_GetSysClockFreq+0x184>)
 8006596:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006598:	bf00      	nop
    }
  }
  return sysclockfreq;
 800659a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800659c:	4618      	mov	r0, r3
 800659e:	3740      	adds	r7, #64	@ 0x40
 80065a0:	46bd      	mov	sp, r7
 80065a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065a6:	bf00      	nop
 80065a8:	40023800 	.word	0x40023800
 80065ac:	00f42400 	.word	0x00f42400
 80065b0:	017d7840 	.word	0x017d7840

080065b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065b4:	b480      	push	{r7}
 80065b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065b8:	4b03      	ldr	r3, [pc, #12]	@ (80065c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80065ba:	681b      	ldr	r3, [r3, #0]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	20000090 	.word	0x20000090

080065cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80065d0:	f7ff fff0 	bl	80065b4 <HAL_RCC_GetHCLKFreq>
 80065d4:	4602      	mov	r2, r0
 80065d6:	4b05      	ldr	r3, [pc, #20]	@ (80065ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	0a9b      	lsrs	r3, r3, #10
 80065dc:	f003 0307 	and.w	r3, r3, #7
 80065e0:	4903      	ldr	r1, [pc, #12]	@ (80065f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065e2:	5ccb      	ldrb	r3, [r1, r3]
 80065e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	40023800 	.word	0x40023800
 80065f0:	08012998 	.word	0x08012998

080065f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80065f8:	f7ff ffdc 	bl	80065b4 <HAL_RCC_GetHCLKFreq>
 80065fc:	4602      	mov	r2, r0
 80065fe:	4b05      	ldr	r3, [pc, #20]	@ (8006614 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	0b5b      	lsrs	r3, r3, #13
 8006604:	f003 0307 	and.w	r3, r3, #7
 8006608:	4903      	ldr	r1, [pc, #12]	@ (8006618 <HAL_RCC_GetPCLK2Freq+0x24>)
 800660a:	5ccb      	ldrb	r3, [r1, r3]
 800660c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006610:	4618      	mov	r0, r3
 8006612:	bd80      	pop	{r7, pc}
 8006614:	40023800 	.word	0x40023800
 8006618:	08012998 	.word	0x08012998

0800661c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	220f      	movs	r2, #15
 800662a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800662c:	4b12      	ldr	r3, [pc, #72]	@ (8006678 <HAL_RCC_GetClockConfig+0x5c>)
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f003 0203 	and.w	r2, r3, #3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006638:	4b0f      	ldr	r3, [pc, #60]	@ (8006678 <HAL_RCC_GetClockConfig+0x5c>)
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006644:	4b0c      	ldr	r3, [pc, #48]	@ (8006678 <HAL_RCC_GetClockConfig+0x5c>)
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006650:	4b09      	ldr	r3, [pc, #36]	@ (8006678 <HAL_RCC_GetClockConfig+0x5c>)
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	08db      	lsrs	r3, r3, #3
 8006656:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800665e:	4b07      	ldr	r3, [pc, #28]	@ (800667c <HAL_RCC_GetClockConfig+0x60>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0207 	and.w	r2, r3, #7
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	601a      	str	r2, [r3, #0]
}
 800666a:	bf00      	nop
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	40023800 	.word	0x40023800
 800667c:	40023c00 	.word	0x40023c00

08006680 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e07b      	b.n	800678a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006696:	2b00      	cmp	r3, #0
 8006698:	d108      	bne.n	80066ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066a2:	d009      	beq.n	80066b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	61da      	str	r2, [r3, #28]
 80066aa:	e005      	b.n	80066b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d106      	bne.n	80066d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f7fc fb0e 	bl	8002cf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006700:	431a      	orrs	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800670a:	431a      	orrs	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	f003 0302 	and.w	r3, r3, #2
 8006714:	431a      	orrs	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	431a      	orrs	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006728:	431a      	orrs	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006732:	431a      	orrs	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a1b      	ldr	r3, [r3, #32]
 8006738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800673c:	ea42 0103 	orr.w	r1, r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006744:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	0c1b      	lsrs	r3, r3, #16
 8006756:	f003 0104 	and.w	r1, r3, #4
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800675e:	f003 0210 	and.w	r2, r3, #16
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	430a      	orrs	r2, r1
 8006768:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	69da      	ldr	r2, [r3, #28]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006778:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b088      	sub	sp, #32
 8006796:	af00      	add	r7, sp, #0
 8006798:	60f8      	str	r0, [r7, #12]
 800679a:	60b9      	str	r1, [r7, #8]
 800679c:	603b      	str	r3, [r7, #0]
 800679e:	4613      	mov	r3, r2
 80067a0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067a2:	f7fc fd33 	bl	800320c <HAL_GetTick>
 80067a6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80067a8:	88fb      	ldrh	r3, [r7, #6]
 80067aa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d001      	beq.n	80067bc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80067b8:	2302      	movs	r3, #2
 80067ba:	e12a      	b.n	8006a12 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d002      	beq.n	80067c8 <HAL_SPI_Transmit+0x36>
 80067c2:	88fb      	ldrh	r3, [r7, #6]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d101      	bne.n	80067cc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e122      	b.n	8006a12 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d101      	bne.n	80067da <HAL_SPI_Transmit+0x48>
 80067d6:	2302      	movs	r3, #2
 80067d8:	e11b      	b.n	8006a12 <HAL_SPI_Transmit+0x280>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2203      	movs	r2, #3
 80067e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	88fa      	ldrh	r2, [r7, #6]
 80067fa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	88fa      	ldrh	r2, [r7, #6]
 8006800:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006828:	d10f      	bne.n	800684a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006838:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006848:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006854:	2b40      	cmp	r3, #64	@ 0x40
 8006856:	d007      	beq.n	8006868 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006866:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006870:	d152      	bne.n	8006918 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d002      	beq.n	8006880 <HAL_SPI_Transmit+0xee>
 800687a:	8b7b      	ldrh	r3, [r7, #26]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d145      	bne.n	800690c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006884:	881a      	ldrh	r2, [r3, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006890:	1c9a      	adds	r2, r3, #2
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800689a:	b29b      	uxth	r3, r3
 800689c:	3b01      	subs	r3, #1
 800689e:	b29a      	uxth	r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80068a4:	e032      	b.n	800690c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d112      	bne.n	80068da <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068b8:	881a      	ldrh	r2, [r3, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068c4:	1c9a      	adds	r2, r3, #2
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	3b01      	subs	r3, #1
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80068d8:	e018      	b.n	800690c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068da:	f7fc fc97 	bl	800320c <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	683a      	ldr	r2, [r7, #0]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d803      	bhi.n	80068f2 <HAL_SPI_Transmit+0x160>
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f0:	d102      	bne.n	80068f8 <HAL_SPI_Transmit+0x166>
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d109      	bne.n	800690c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e082      	b.n	8006a12 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006910:	b29b      	uxth	r3, r3
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1c7      	bne.n	80068a6 <HAL_SPI_Transmit+0x114>
 8006916:	e053      	b.n	80069c0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d002      	beq.n	8006926 <HAL_SPI_Transmit+0x194>
 8006920:	8b7b      	ldrh	r3, [r7, #26]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d147      	bne.n	80069b6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	330c      	adds	r3, #12
 8006930:	7812      	ldrb	r2, [r2, #0]
 8006932:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006938:	1c5a      	adds	r2, r3, #1
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006942:	b29b      	uxth	r3, r3
 8006944:	3b01      	subs	r3, #1
 8006946:	b29a      	uxth	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800694c:	e033      	b.n	80069b6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f003 0302 	and.w	r3, r3, #2
 8006958:	2b02      	cmp	r3, #2
 800695a:	d113      	bne.n	8006984 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	330c      	adds	r3, #12
 8006966:	7812      	ldrb	r2, [r2, #0]
 8006968:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800696e:	1c5a      	adds	r2, r3, #1
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006978:	b29b      	uxth	r3, r3
 800697a:	3b01      	subs	r3, #1
 800697c:	b29a      	uxth	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006982:	e018      	b.n	80069b6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006984:	f7fc fc42 	bl	800320c <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	683a      	ldr	r2, [r7, #0]
 8006990:	429a      	cmp	r2, r3
 8006992:	d803      	bhi.n	800699c <HAL_SPI_Transmit+0x20a>
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800699a:	d102      	bne.n	80069a2 <HAL_SPI_Transmit+0x210>
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d109      	bne.n	80069b6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e02d      	b.n	8006a12 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1c6      	bne.n	800694e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069c0:	69fa      	ldr	r2, [r7, #28]
 80069c2:	6839      	ldr	r1, [r7, #0]
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f000 fbe7 	bl	8007198 <SPI_EndRxTxTransaction>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d002      	beq.n	80069d6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2220      	movs	r2, #32
 80069d4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10a      	bne.n	80069f4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069de:	2300      	movs	r3, #0
 80069e0:	617b      	str	r3, [r7, #20]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	617b      	str	r3, [r7, #20]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	617b      	str	r3, [r7, #20]
 80069f2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e000      	b.n	8006a12 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006a10:	2300      	movs	r3, #0
  }
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3720      	adds	r7, #32
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b088      	sub	sp, #32
 8006a1e:	af02      	add	r7, sp, #8
 8006a20:	60f8      	str	r0, [r7, #12]
 8006a22:	60b9      	str	r1, [r7, #8]
 8006a24:	603b      	str	r3, [r7, #0]
 8006a26:	4613      	mov	r3, r2
 8006a28:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d001      	beq.n	8006a3a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8006a36:	2302      	movs	r3, #2
 8006a38:	e104      	b.n	8006c44 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d002      	beq.n	8006a46 <HAL_SPI_Receive+0x2c>
 8006a40:	88fb      	ldrh	r3, [r7, #6]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d101      	bne.n	8006a4a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e0fc      	b.n	8006c44 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a52:	d112      	bne.n	8006a7a <HAL_SPI_Receive+0x60>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10e      	bne.n	8006a7a <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2204      	movs	r2, #4
 8006a60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006a64:	88fa      	ldrh	r2, [r7, #6]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	68b9      	ldr	r1, [r7, #8]
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f000 f8eb 	bl	8006c4c <HAL_SPI_TransmitReceive>
 8006a76:	4603      	mov	r3, r0
 8006a78:	e0e4      	b.n	8006c44 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a7a:	f7fc fbc7 	bl	800320c <HAL_GetTick>
 8006a7e:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d101      	bne.n	8006a8e <HAL_SPI_Receive+0x74>
 8006a8a:	2302      	movs	r3, #2
 8006a8c:	e0da      	b.n	8006c44 <HAL_SPI_Receive+0x22a>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2204      	movs	r2, #4
 8006a9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	88fa      	ldrh	r2, [r7, #6]
 8006aae:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	88fa      	ldrh	r2, [r7, #6]
 8006ab4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006adc:	d10f      	bne.n	8006afe <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006aec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006afc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b08:	2b40      	cmp	r3, #64	@ 0x40
 8006b0a:	d007      	beq.n	8006b1c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b1a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d170      	bne.n	8006c06 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006b24:	e035      	b.n	8006b92 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d115      	bne.n	8006b60 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f103 020c 	add.w	r2, r3, #12
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b40:	7812      	ldrb	r2, [r2, #0]
 8006b42:	b2d2      	uxtb	r2, r2
 8006b44:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b4a:	1c5a      	adds	r2, r3, #1
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	3b01      	subs	r3, #1
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006b5e:	e018      	b.n	8006b92 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b60:	f7fc fb54 	bl	800320c <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	683a      	ldr	r2, [r7, #0]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d803      	bhi.n	8006b78 <HAL_SPI_Receive+0x15e>
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b76:	d102      	bne.n	8006b7e <HAL_SPI_Receive+0x164>
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d109      	bne.n	8006b92 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e058      	b.n	8006c44 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1c4      	bne.n	8006b26 <HAL_SPI_Receive+0x10c>
 8006b9c:	e038      	b.n	8006c10 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d113      	bne.n	8006bd4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68da      	ldr	r2, [r3, #12]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bb6:	b292      	uxth	r2, r2
 8006bb8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bbe:	1c9a      	adds	r2, r3, #2
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006bd2:	e018      	b.n	8006c06 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bd4:	f7fc fb1a 	bl	800320c <HAL_GetTick>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	683a      	ldr	r2, [r7, #0]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d803      	bhi.n	8006bec <HAL_SPI_Receive+0x1d2>
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bea:	d102      	bne.n	8006bf2 <HAL_SPI_Receive+0x1d8>
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d109      	bne.n	8006c06 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e01e      	b.n	8006c44 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1c6      	bne.n	8006b9e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	6839      	ldr	r1, [r7, #0]
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f000 fa59 	bl	80070cc <SPI_EndRxTransaction>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d002      	beq.n	8006c26 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2220      	movs	r2, #32
 8006c24:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e000      	b.n	8006c44 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8006c42:	2300      	movs	r3, #0
  }
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3718      	adds	r7, #24
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b08a      	sub	sp, #40	@ 0x28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
 8006c58:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c5e:	f7fc fad5 	bl	800320c <HAL_GetTick>
 8006c62:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c6a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006c72:	887b      	ldrh	r3, [r7, #2]
 8006c74:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c76:	7ffb      	ldrb	r3, [r7, #31]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d00c      	beq.n	8006c96 <HAL_SPI_TransmitReceive+0x4a>
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c82:	d106      	bne.n	8006c92 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d102      	bne.n	8006c92 <HAL_SPI_TransmitReceive+0x46>
 8006c8c:	7ffb      	ldrb	r3, [r7, #31]
 8006c8e:	2b04      	cmp	r3, #4
 8006c90:	d001      	beq.n	8006c96 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006c92:	2302      	movs	r3, #2
 8006c94:	e17f      	b.n	8006f96 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d005      	beq.n	8006ca8 <HAL_SPI_TransmitReceive+0x5c>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d002      	beq.n	8006ca8 <HAL_SPI_TransmitReceive+0x5c>
 8006ca2:	887b      	ldrh	r3, [r7, #2]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d101      	bne.n	8006cac <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e174      	b.n	8006f96 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d101      	bne.n	8006cba <HAL_SPI_TransmitReceive+0x6e>
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	e16d      	b.n	8006f96 <HAL_SPI_TransmitReceive+0x34a>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b04      	cmp	r3, #4
 8006ccc:	d003      	beq.n	8006cd6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2205      	movs	r2, #5
 8006cd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	887a      	ldrh	r2, [r7, #2]
 8006ce6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	887a      	ldrh	r2, [r7, #2]
 8006cec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	887a      	ldrh	r2, [r7, #2]
 8006cf8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	887a      	ldrh	r2, [r7, #2]
 8006cfe:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d16:	2b40      	cmp	r3, #64	@ 0x40
 8006d18:	d007      	beq.n	8006d2a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d32:	d17e      	bne.n	8006e32 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d002      	beq.n	8006d42 <HAL_SPI_TransmitReceive+0xf6>
 8006d3c:	8afb      	ldrh	r3, [r7, #22]
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d16c      	bne.n	8006e1c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d46:	881a      	ldrh	r2, [r3, #0]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d52:	1c9a      	adds	r2, r3, #2
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d66:	e059      	b.n	8006e1c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f003 0302 	and.w	r3, r3, #2
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d11b      	bne.n	8006dae <HAL_SPI_TransmitReceive+0x162>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d016      	beq.n	8006dae <HAL_SPI_TransmitReceive+0x162>
 8006d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d113      	bne.n	8006dae <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d8a:	881a      	ldrh	r2, [r3, #0]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d96:	1c9a      	adds	r2, r3, #2
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	3b01      	subs	r3, #1
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	f003 0301 	and.w	r3, r3, #1
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d119      	bne.n	8006df0 <HAL_SPI_TransmitReceive+0x1a4>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d014      	beq.n	8006df0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68da      	ldr	r2, [r3, #12]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd0:	b292      	uxth	r2, r2
 8006dd2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd8:	1c9a      	adds	r2, r3, #2
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	3b01      	subs	r3, #1
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006dec:	2301      	movs	r3, #1
 8006dee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006df0:	f7fc fa0c 	bl	800320c <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	6a3b      	ldr	r3, [r7, #32]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d80d      	bhi.n	8006e1c <HAL_SPI_TransmitReceive+0x1d0>
 8006e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e06:	d009      	beq.n	8006e1c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e0bc      	b.n	8006f96 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1a0      	bne.n	8006d68 <HAL_SPI_TransmitReceive+0x11c>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d19b      	bne.n	8006d68 <HAL_SPI_TransmitReceive+0x11c>
 8006e30:	e082      	b.n	8006f38 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d002      	beq.n	8006e40 <HAL_SPI_TransmitReceive+0x1f4>
 8006e3a:	8afb      	ldrh	r3, [r7, #22]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d171      	bne.n	8006f24 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	330c      	adds	r3, #12
 8006e4a:	7812      	ldrb	r2, [r2, #0]
 8006e4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e52:	1c5a      	adds	r2, r3, #1
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e66:	e05d      	b.n	8006f24 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f003 0302 	and.w	r3, r3, #2
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d11c      	bne.n	8006eb0 <HAL_SPI_TransmitReceive+0x264>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d017      	beq.n	8006eb0 <HAL_SPI_TransmitReceive+0x264>
 8006e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d114      	bne.n	8006eb0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	330c      	adds	r3, #12
 8006e90:	7812      	ldrb	r2, [r2, #0]
 8006e92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e98:	1c5a      	adds	r2, r3, #1
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006eac:	2300      	movs	r3, #0
 8006eae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d119      	bne.n	8006ef2 <HAL_SPI_TransmitReceive+0x2a6>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d014      	beq.n	8006ef2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68da      	ldr	r2, [r3, #12]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed2:	b2d2      	uxtb	r2, r2
 8006ed4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eda:	1c5a      	adds	r2, r3, #1
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ef2:	f7fc f98b 	bl	800320c <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d803      	bhi.n	8006f0a <HAL_SPI_TransmitReceive+0x2be>
 8006f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f08:	d102      	bne.n	8006f10 <HAL_SPI_TransmitReceive+0x2c4>
 8006f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d109      	bne.n	8006f24 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	e038      	b.n	8006f96 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d19c      	bne.n	8006e68 <HAL_SPI_TransmitReceive+0x21c>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d197      	bne.n	8006e68 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f38:	6a3a      	ldr	r2, [r7, #32]
 8006f3a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 f92b 	bl	8007198 <SPI_EndRxTxTransaction>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d008      	beq.n	8006f5a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2220      	movs	r2, #32
 8006f4c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e01d      	b.n	8006f96 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10a      	bne.n	8006f78 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f62:	2300      	movs	r3, #0
 8006f64:	613b      	str	r3, [r7, #16]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	613b      	str	r3, [r7, #16]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	613b      	str	r3, [r7, #16]
 8006f76:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d001      	beq.n	8006f94 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e000      	b.n	8006f96 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006f94:	2300      	movs	r3, #0
  }
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3728      	adds	r7, #40	@ 0x28
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b083      	sub	sp, #12
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006fac:	b2db      	uxtb	r3, r3
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	370c      	adds	r7, #12
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
	...

08006fbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b088      	sub	sp, #32
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	603b      	str	r3, [r7, #0]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006fcc:	f7fc f91e 	bl	800320c <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd4:	1a9b      	subs	r3, r3, r2
 8006fd6:	683a      	ldr	r2, [r7, #0]
 8006fd8:	4413      	add	r3, r2
 8006fda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006fdc:	f7fc f916 	bl	800320c <HAL_GetTick>
 8006fe0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006fe2:	4b39      	ldr	r3, [pc, #228]	@ (80070c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	015b      	lsls	r3, r3, #5
 8006fe8:	0d1b      	lsrs	r3, r3, #20
 8006fea:	69fa      	ldr	r2, [r7, #28]
 8006fec:	fb02 f303 	mul.w	r3, r2, r3
 8006ff0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ff2:	e055      	b.n	80070a0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffa:	d051      	beq.n	80070a0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ffc:	f7fc f906 	bl	800320c <HAL_GetTick>
 8007000:	4602      	mov	r2, r0
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	69fa      	ldr	r2, [r7, #28]
 8007008:	429a      	cmp	r2, r3
 800700a:	d902      	bls.n	8007012 <SPI_WaitFlagStateUntilTimeout+0x56>
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d13d      	bne.n	800708e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	685a      	ldr	r2, [r3, #4]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007020:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800702a:	d111      	bne.n	8007050 <SPI_WaitFlagStateUntilTimeout+0x94>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007034:	d004      	beq.n	8007040 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800703e:	d107      	bne.n	8007050 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800704e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007054:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007058:	d10f      	bne.n	800707a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007078:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e018      	b.n	80070c0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d102      	bne.n	800709a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8007094:	2300      	movs	r3, #0
 8007096:	61fb      	str	r3, [r7, #28]
 8007098:	e002      	b.n	80070a0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	3b01      	subs	r3, #1
 800709e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689a      	ldr	r2, [r3, #8]
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	4013      	ands	r3, r2
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	bf0c      	ite	eq
 80070b0:	2301      	moveq	r3, #1
 80070b2:	2300      	movne	r3, #0
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	461a      	mov	r2, r3
 80070b8:	79fb      	ldrb	r3, [r7, #7]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d19a      	bne.n	8006ff4 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3720      	adds	r7, #32
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	20000090 	.word	0x20000090

080070cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af02      	add	r7, sp, #8
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070e0:	d111      	bne.n	8007106 <SPI_EndRxTransaction+0x3a>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070ea:	d004      	beq.n	80070f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070f4:	d107      	bne.n	8007106 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007104:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800710e:	d12a      	bne.n	8007166 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007118:	d012      	beq.n	8007140 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	2200      	movs	r2, #0
 8007122:	2180      	movs	r1, #128	@ 0x80
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f7ff ff49 	bl	8006fbc <SPI_WaitFlagStateUntilTimeout>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d02d      	beq.n	800718c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007134:	f043 0220 	orr.w	r2, r3, #32
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800713c:	2303      	movs	r3, #3
 800713e:	e026      	b.n	800718e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	2200      	movs	r2, #0
 8007148:	2101      	movs	r1, #1
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f7ff ff36 	bl	8006fbc <SPI_WaitFlagStateUntilTimeout>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d01a      	beq.n	800718c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800715a:	f043 0220 	orr.w	r2, r3, #32
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e013      	b.n	800718e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	9300      	str	r3, [sp, #0]
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	2200      	movs	r2, #0
 800716e:	2101      	movs	r1, #1
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	f7ff ff23 	bl	8006fbc <SPI_WaitFlagStateUntilTimeout>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d007      	beq.n	800718c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007180:	f043 0220 	orr.w	r2, r3, #32
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007188:	2303      	movs	r3, #3
 800718a:	e000      	b.n	800718e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
	...

08007198 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b088      	sub	sp, #32
 800719c:	af02      	add	r7, sp, #8
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	2201      	movs	r2, #1
 80071ac:	2102      	movs	r1, #2
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f7ff ff04 	bl	8006fbc <SPI_WaitFlagStateUntilTimeout>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d007      	beq.n	80071ca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071be:	f043 0220 	orr.w	r2, r3, #32
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e032      	b.n	8007230 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80071ca:	4b1b      	ldr	r3, [pc, #108]	@ (8007238 <SPI_EndRxTxTransaction+0xa0>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a1b      	ldr	r2, [pc, #108]	@ (800723c <SPI_EndRxTxTransaction+0xa4>)
 80071d0:	fba2 2303 	umull	r2, r3, r2, r3
 80071d4:	0d5b      	lsrs	r3, r3, #21
 80071d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80071da:	fb02 f303 	mul.w	r3, r2, r3
 80071de:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071e8:	d112      	bne.n	8007210 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	9300      	str	r3, [sp, #0]
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	2200      	movs	r2, #0
 80071f2:	2180      	movs	r1, #128	@ 0x80
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f7ff fee1 	bl	8006fbc <SPI_WaitFlagStateUntilTimeout>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d016      	beq.n	800722e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007204:	f043 0220 	orr.w	r2, r3, #32
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e00f      	b.n	8007230 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00a      	beq.n	800722c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	3b01      	subs	r3, #1
 800721a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007226:	2b80      	cmp	r3, #128	@ 0x80
 8007228:	d0f2      	beq.n	8007210 <SPI_EndRxTxTransaction+0x78>
 800722a:	e000      	b.n	800722e <SPI_EndRxTxTransaction+0x96>
        break;
 800722c:	bf00      	nop
  }

  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3718      	adds	r7, #24
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	20000090 	.word	0x20000090
 800723c:	165e9f81 	.word	0x165e9f81

08007240 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d101      	bne.n	8007252 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e041      	b.n	80072d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b00      	cmp	r3, #0
 800725c:	d106      	bne.n	800726c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f839 	bl	80072de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2202      	movs	r2, #2
 8007270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	3304      	adds	r3, #4
 800727c:	4619      	mov	r1, r3
 800727e:	4610      	mov	r0, r2
 8007280:	f000 f9b2 	bl	80075e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80072de:	b480      	push	{r7}
 80072e0:	b083      	sub	sp, #12
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80072e6:	bf00      	nop
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
	...

080072f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007302:	b2db      	uxtb	r3, r3
 8007304:	2b01      	cmp	r3, #1
 8007306:	d001      	beq.n	800730c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e044      	b.n	8007396 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2202      	movs	r2, #2
 8007310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68da      	ldr	r2, [r3, #12]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f042 0201 	orr.w	r2, r2, #1
 8007322:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a1e      	ldr	r2, [pc, #120]	@ (80073a4 <HAL_TIM_Base_Start_IT+0xb0>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d018      	beq.n	8007360 <HAL_TIM_Base_Start_IT+0x6c>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007336:	d013      	beq.n	8007360 <HAL_TIM_Base_Start_IT+0x6c>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a1a      	ldr	r2, [pc, #104]	@ (80073a8 <HAL_TIM_Base_Start_IT+0xb4>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d00e      	beq.n	8007360 <HAL_TIM_Base_Start_IT+0x6c>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a19      	ldr	r2, [pc, #100]	@ (80073ac <HAL_TIM_Base_Start_IT+0xb8>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d009      	beq.n	8007360 <HAL_TIM_Base_Start_IT+0x6c>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a17      	ldr	r2, [pc, #92]	@ (80073b0 <HAL_TIM_Base_Start_IT+0xbc>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d004      	beq.n	8007360 <HAL_TIM_Base_Start_IT+0x6c>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a16      	ldr	r2, [pc, #88]	@ (80073b4 <HAL_TIM_Base_Start_IT+0xc0>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d111      	bne.n	8007384 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	f003 0307 	and.w	r3, r3, #7
 800736a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2b06      	cmp	r3, #6
 8007370:	d010      	beq.n	8007394 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f042 0201 	orr.w	r2, r2, #1
 8007380:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007382:	e007      	b.n	8007394 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f042 0201 	orr.w	r2, r2, #1
 8007392:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3714      	adds	r7, #20
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	40010000 	.word	0x40010000
 80073a8:	40000400 	.word	0x40000400
 80073ac:	40000800 	.word	0x40000800
 80073b0:	40000c00 	.word	0x40000c00
 80073b4:	40014000 	.word	0x40014000

080073b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	f003 0302 	and.w	r3, r3, #2
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d020      	beq.n	800741c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f003 0302 	and.w	r3, r3, #2
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d01b      	beq.n	800741c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f06f 0202 	mvn.w	r2, #2
 80073ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	f003 0303 	and.w	r3, r3, #3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f8d2 	bl	80075ac <HAL_TIM_IC_CaptureCallback>
 8007408:	e005      	b.n	8007416 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f8c4 	bl	8007598 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f8d5 	bl	80075c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	f003 0304 	and.w	r3, r3, #4
 8007422:	2b00      	cmp	r3, #0
 8007424:	d020      	beq.n	8007468 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f003 0304 	and.w	r3, r3, #4
 800742c:	2b00      	cmp	r3, #0
 800742e:	d01b      	beq.n	8007468 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f06f 0204 	mvn.w	r2, #4
 8007438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2202      	movs	r2, #2
 800743e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f8ac 	bl	80075ac <HAL_TIM_IC_CaptureCallback>
 8007454:	e005      	b.n	8007462 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f89e 	bl	8007598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f8af 	bl	80075c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	f003 0308 	and.w	r3, r3, #8
 800746e:	2b00      	cmp	r3, #0
 8007470:	d020      	beq.n	80074b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f003 0308 	and.w	r3, r3, #8
 8007478:	2b00      	cmp	r3, #0
 800747a:	d01b      	beq.n	80074b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f06f 0208 	mvn.w	r2, #8
 8007484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2204      	movs	r2, #4
 800748a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	69db      	ldr	r3, [r3, #28]
 8007492:	f003 0303 	and.w	r3, r3, #3
 8007496:	2b00      	cmp	r3, #0
 8007498:	d003      	beq.n	80074a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f886 	bl	80075ac <HAL_TIM_IC_CaptureCallback>
 80074a0:	e005      	b.n	80074ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f878 	bl	8007598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 f889 	bl	80075c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	f003 0310 	and.w	r3, r3, #16
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d020      	beq.n	8007500 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f003 0310 	and.w	r3, r3, #16
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d01b      	beq.n	8007500 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f06f 0210 	mvn.w	r2, #16
 80074d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2208      	movs	r2, #8
 80074d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	69db      	ldr	r3, [r3, #28]
 80074de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d003      	beq.n	80074ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f860 	bl	80075ac <HAL_TIM_IC_CaptureCallback>
 80074ec:	e005      	b.n	80074fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f852 	bl	8007598 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 f863 	bl	80075c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	f003 0301 	and.w	r3, r3, #1
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00c      	beq.n	8007524 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	2b00      	cmp	r3, #0
 8007512:	d007      	beq.n	8007524 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f06f 0201 	mvn.w	r2, #1
 800751c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f7fa ff08 	bl	8002334 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00c      	beq.n	8007548 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007534:	2b00      	cmp	r3, #0
 8007536:	d007      	beq.n	8007548 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f8e0 	bl	8007708 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00c      	beq.n	800756c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007558:	2b00      	cmp	r3, #0
 800755a:	d007      	beq.n	800756c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f834 	bl	80075d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	f003 0320 	and.w	r3, r3, #32
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00c      	beq.n	8007590 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f003 0320 	and.w	r3, r3, #32
 800757c:	2b00      	cmp	r3, #0
 800757e:	d007      	beq.n	8007590 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f06f 0220 	mvn.w	r2, #32
 8007588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 f8b2 	bl	80076f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007590:	bf00      	nop
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a37      	ldr	r2, [pc, #220]	@ (80076d8 <TIM_Base_SetConfig+0xf0>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d00f      	beq.n	8007620 <TIM_Base_SetConfig+0x38>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007606:	d00b      	beq.n	8007620 <TIM_Base_SetConfig+0x38>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a34      	ldr	r2, [pc, #208]	@ (80076dc <TIM_Base_SetConfig+0xf4>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d007      	beq.n	8007620 <TIM_Base_SetConfig+0x38>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a33      	ldr	r2, [pc, #204]	@ (80076e0 <TIM_Base_SetConfig+0xf8>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d003      	beq.n	8007620 <TIM_Base_SetConfig+0x38>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a32      	ldr	r2, [pc, #200]	@ (80076e4 <TIM_Base_SetConfig+0xfc>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d108      	bne.n	8007632 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007626:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	4313      	orrs	r3, r2
 8007630:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a28      	ldr	r2, [pc, #160]	@ (80076d8 <TIM_Base_SetConfig+0xf0>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d01b      	beq.n	8007672 <TIM_Base_SetConfig+0x8a>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007640:	d017      	beq.n	8007672 <TIM_Base_SetConfig+0x8a>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a25      	ldr	r2, [pc, #148]	@ (80076dc <TIM_Base_SetConfig+0xf4>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d013      	beq.n	8007672 <TIM_Base_SetConfig+0x8a>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a24      	ldr	r2, [pc, #144]	@ (80076e0 <TIM_Base_SetConfig+0xf8>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d00f      	beq.n	8007672 <TIM_Base_SetConfig+0x8a>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a23      	ldr	r2, [pc, #140]	@ (80076e4 <TIM_Base_SetConfig+0xfc>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d00b      	beq.n	8007672 <TIM_Base_SetConfig+0x8a>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a22      	ldr	r2, [pc, #136]	@ (80076e8 <TIM_Base_SetConfig+0x100>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d007      	beq.n	8007672 <TIM_Base_SetConfig+0x8a>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a21      	ldr	r2, [pc, #132]	@ (80076ec <TIM_Base_SetConfig+0x104>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d003      	beq.n	8007672 <TIM_Base_SetConfig+0x8a>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a20      	ldr	r2, [pc, #128]	@ (80076f0 <TIM_Base_SetConfig+0x108>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d108      	bne.n	8007684 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007678:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	4313      	orrs	r3, r2
 8007682:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	4313      	orrs	r3, r2
 8007690:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	689a      	ldr	r2, [r3, #8]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a0c      	ldr	r2, [pc, #48]	@ (80076d8 <TIM_Base_SetConfig+0xf0>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d103      	bne.n	80076b2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	691a      	ldr	r2, [r3, #16]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f043 0204 	orr.w	r2, r3, #4
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2201      	movs	r2, #1
 80076c2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	601a      	str	r2, [r3, #0]
}
 80076ca:	bf00      	nop
 80076cc:	3714      	adds	r7, #20
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	40010000 	.word	0x40010000
 80076dc:	40000400 	.word	0x40000400
 80076e0:	40000800 	.word	0x40000800
 80076e4:	40000c00 	.word	0x40000c00
 80076e8:	40014000 	.word	0x40014000
 80076ec:	40014400 	.word	0x40014400
 80076f0:	40014800 	.word	0x40014800

080076f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076fc:	bf00      	nop
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d101      	bne.n	800772e <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e033      	b.n	8007796 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007734:	b2db      	uxtb	r3, r3
 8007736:	2b00      	cmp	r3, #0
 8007738:	d106      	bne.n	8007748 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f7fb fb1e 	bl	8002d84 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2202      	movs	r2, #2
 800774c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fb61 	bl	8007e18 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	691a      	ldr	r2, [r3, #16]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007764:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	695a      	ldr	r2, [r3, #20]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007774:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68da      	ldr	r2, [r3, #12]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007784:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	641a      	str	r2, [r3, #64]	@ 0x40
  husart->State = HAL_USART_STATE_READY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3708      	adds	r7, #8
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
	...

080077a0 <HAL_USART_IRQHandler>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b088      	sub	sp, #32
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(husart->Instance->SR);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its   = READ_REG(husart->Instance->CR1);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its   = READ_REG(husart->Instance->CR3);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80077c0:	2300      	movs	r3, #0
 80077c2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80077c4:	2300      	movs	r3, #0
 80077c6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	f003 030f 	and.w	r3, r3, #15
 80077ce:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d117      	bne.n	8007806 <HAL_USART_IRQHandler+0x66>
  {
    /* USART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	f003 0320 	and.w	r3, r3, #32
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d012      	beq.n	8007806 <HAL_USART_IRQHandler+0x66>
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	f003 0320 	and.w	r3, r3, #32
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00d      	beq.n	8007806 <HAL_USART_IRQHandler+0x66>
    {
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b22      	cmp	r3, #34	@ 0x22
 80077f4:	d103      	bne.n	80077fe <HAL_USART_IRQHandler+0x5e>
      {
        USART_Receive_IT(husart);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f9ba 	bl	8007b70 <USART_Receive_IT>
      }
      else
      {
        USART_TransmitReceive_IT(husart);
      }
      return;
 80077fc:	e0e9      	b.n	80079d2 <HAL_USART_IRQHandler+0x232>
        USART_TransmitReceive_IT(husart);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fa3c 	bl	8007c7c <USART_TransmitReceive_IT>
      return;
 8007804:	e0e5      	b.n	80079d2 <HAL_USART_IRQHandler+0x232>
    }
  }
  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	2b00      	cmp	r3, #0
 800780a:	f000 80bb 	beq.w	8007984 <HAL_USART_IRQHandler+0x1e4>
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f003 0301 	and.w	r3, r3, #1
 8007814:	2b00      	cmp	r3, #0
 8007816:	d105      	bne.n	8007824 <HAL_USART_IRQHandler+0x84>
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800781e:	2b00      	cmp	r3, #0
 8007820:	f000 80b0 	beq.w	8007984 <HAL_USART_IRQHandler+0x1e4>
  {
    /* USART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	f003 0301 	and.w	r3, r3, #1
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00a      	beq.n	8007844 <HAL_USART_IRQHandler+0xa4>
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007834:	2b00      	cmp	r3, #0
 8007836:	d005      	beq.n	8007844 <HAL_USART_IRQHandler+0xa4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800783c:	f043 0201 	orr.w	r2, r3, #1
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* USART noise error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	f003 0304 	and.w	r3, r3, #4
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00a      	beq.n	8007864 <HAL_USART_IRQHandler+0xc4>
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f003 0301 	and.w	r3, r3, #1
 8007854:	2b00      	cmp	r3, #0
 8007856:	d005      	beq.n	8007864 <HAL_USART_IRQHandler+0xc4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800785c:	f043 0202 	orr.w	r2, r3, #2
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* USART frame error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	f003 0302 	and.w	r3, r3, #2
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00a      	beq.n	8007884 <HAL_USART_IRQHandler+0xe4>
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	f003 0301 	and.w	r3, r3, #1
 8007874:	2b00      	cmp	r3, #0
 8007876:	d005      	beq.n	8007884 <HAL_USART_IRQHandler+0xe4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800787c:	f043 0204 	orr.w	r2, r3, #4
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* USART Over-Run interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	f003 0308 	and.w	r3, r3, #8
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00f      	beq.n	80078ae <HAL_USART_IRQHandler+0x10e>
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	f003 0320 	and.w	r3, r3, #32
 8007894:	2b00      	cmp	r3, #0
 8007896:	d104      	bne.n	80078a2 <HAL_USART_IRQHandler+0x102>
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	f003 0301 	and.w	r3, r3, #1
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d005      	beq.n	80078ae <HAL_USART_IRQHandler+0x10e>
    {
      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a6:	f043 0208 	orr.w	r2, r3, #8
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f000 808c 	beq.w	80079d0 <HAL_USART_IRQHandler+0x230>
    {
      /* USART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	f003 0320 	and.w	r3, r3, #32
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d011      	beq.n	80078e6 <HAL_USART_IRQHandler+0x146>
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	f003 0320 	and.w	r3, r3, #32
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00c      	beq.n	80078e6 <HAL_USART_IRQHandler+0x146>
      {
        if (husart->State == HAL_USART_STATE_BUSY_RX)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	2b22      	cmp	r3, #34	@ 0x22
 80078d6:	d103      	bne.n	80078e0 <HAL_USART_IRQHandler+0x140>
        {
          USART_Receive_IT(husart);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f949 	bl	8007b70 <USART_Receive_IT>
 80078de:	e002      	b.n	80078e6 <HAL_USART_IRQHandler+0x146>
        }
        else
        {
          USART_TransmitReceive_IT(husart);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f9cb 	bl	8007c7c <USART_TransmitReceive_IT>
        }
      }
      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
      consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078f0:	2b40      	cmp	r3, #64	@ 0x40
 80078f2:	bf0c      	ite	eq
 80078f4:	2301      	moveq	r3, #1
 80078f6:	2300      	movne	r3, #0
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	60fb      	str	r3, [r7, #12]
      if (((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007900:	f003 0308 	and.w	r3, r3, #8
 8007904:	2b00      	cmp	r3, #0
 8007906:	d102      	bne.n	800790e <HAL_USART_IRQHandler+0x16e>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d031      	beq.n	8007972 <HAL_USART_IRQHandler+0x1d2>
      {
        /* Set the USART state ready to be able to start again the process,
        Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        USART_EndRxTransfer(husart);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f88c 	bl	8007a2c <USART_EndRxTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800791e:	2b40      	cmp	r3, #64	@ 0x40
 8007920:	d123      	bne.n	800796a <HAL_USART_IRQHandler+0x1ca>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	695a      	ldr	r2, [r3, #20]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007930:	615a      	str	r2, [r3, #20]

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007936:	2b00      	cmp	r3, #0
 8007938:	d013      	beq.n	8007962 <HAL_USART_IRQHandler+0x1c2>
          {
            /* Set the USART DMA Abort callback :
            will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800793e:	4a26      	ldr	r2, [pc, #152]	@ (80079d8 <HAL_USART_IRQHandler+0x238>)
 8007940:	651a      	str	r2, [r3, #80]	@ 0x50

            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007946:	4618      	mov	r0, r3
 8007948:	f7fb fdc1 	bl	80034ce <HAL_DMA_Abort_IT>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d016      	beq.n	8007980 <HAL_USART_IRQHandler+0x1e0>
            {
              /* Call Directly XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800795c:	4610      	mov	r0, r2
 800795e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8007960:	e00e      	b.n	8007980 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f858 	bl	8007a18 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8007968:	e00a      	b.n	8007980 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f854 	bl	8007a18 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8007970:	e006      	b.n	8007980 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f850 	bl	8007a18 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800797e:	e027      	b.n	80079d0 <HAL_USART_IRQHandler+0x230>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8007980:	bf00      	nop
    return;
 8007982:	e025      	b.n	80079d0 <HAL_USART_IRQHandler+0x230>
  }

  /* USART in mode Transmitter -----------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800798a:	2b00      	cmp	r3, #0
 800798c:	d012      	beq.n	80079b4 <HAL_USART_IRQHandler+0x214>
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00d      	beq.n	80079b4 <HAL_USART_IRQHandler+0x214>
  {
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	2b12      	cmp	r3, #18
 80079a2:	d103      	bne.n	80079ac <HAL_USART_IRQHandler+0x20c>
    {
      USART_Transmit_IT(husart);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 f873 	bl	8007a90 <USART_Transmit_IT>
    }
    else
    {
      USART_TransmitReceive_IT(husart);
    }
    return;
 80079aa:	e012      	b.n	80079d2 <HAL_USART_IRQHandler+0x232>
      USART_TransmitReceive_IT(husart);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f965 	bl	8007c7c <USART_TransmitReceive_IT>
    return;
 80079b2:	e00e      	b.n	80079d2 <HAL_USART_IRQHandler+0x232>
  }

  /* USART in mode Transmitter (transmission end) ----------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d009      	beq.n	80079d2 <HAL_USART_IRQHandler+0x232>
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d004      	beq.n	80079d2 <HAL_USART_IRQHandler+0x232>
  {
    USART_EndTransmit_IT(husart);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f8b1 	bl	8007b30 <USART_EndTransmit_IT>
    return;
 80079ce:	e000      	b.n	80079d2 <HAL_USART_IRQHandler+0x232>
    return;
 80079d0:	bf00      	nop
  }
}
 80079d2:	3720      	adds	r7, #32
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	08007a69 	.word	0x08007a69

080079dc <HAL_USART_TxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxCpltCallback could be implemented in the user file
   */
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <HAL_USART_RxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_RxCpltCallback could be implemented in the user file
   */
}
 80079f8:	bf00      	nop
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <HAL_USART_TxRxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxRxCpltCallback could be implemented in the user file
   */
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <HAL_USART_ErrorCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_ErrorCallback could be implemented in the user file
   */
}
 8007a20:	bf00      	nop
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <USART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on USART peripheral (following error detection or Reception completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndRxTransfer(USART_HandleTypeDef *husart)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68da      	ldr	r2, [r3, #12]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8007a42:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	695a      	ldr	r2, [r3, #20]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f022 0201 	bic.w	r2, r2, #1
 8007a52:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 8007a5c:	bf00      	nop
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a74:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0x00U;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	865a      	strh	r2, [r3, #50]	@ 0x32
  husart->TxXferCount = 0x00U;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	855a      	strh	r2, [r3, #42]	@ 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	f7ff ffc8 	bl	8007a18 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8007a88:	bf00      	nop
 8007a8a:	3710      	adds	r7, #16
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <USART_Transmit_IT>:
  *                the configuration information for the specified USART module.
  * @retval HAL status
  * @note   The USART errors are not managed to avoid the overrun error.
  */
static HAL_StatusTypeDef USART_Transmit_IT(USART_HandleTypeDef *husart)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	2b12      	cmp	r3, #18
 8007aa2:	d13e      	bne.n	8007b22 <USART_Transmit_IT+0x92>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007aac:	d114      	bne.n	8007ad8 <USART_Transmit_IT+0x48>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d110      	bne.n	8007ad8 <USART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) husart->pTxBuffPtr;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aba:	60fb      	str	r3, [r7, #12]
      husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	881b      	ldrh	r3, [r3, #0]
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007aca:	605a      	str	r2, [r3, #4]
      husart->pTxBuffPtr += 2U;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ad0:	1c9a      	adds	r2, r3, #2
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	625a      	str	r2, [r3, #36]	@ 0x24
 8007ad6:	e008      	b.n	8007aea <USART_Transmit_IT+0x5a>
    }
    else
    {
      husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007adc:	1c59      	adds	r1, r3, #1
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	6251      	str	r1, [r2, #36]	@ 0x24
 8007ae2:	781a      	ldrb	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	605a      	str	r2, [r3, #4]
    }

    if (--husart->TxXferCount == 0U)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	3b01      	subs	r3, #1
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	4619      	mov	r1, r3
 8007af8:	8551      	strh	r1, [r2, #42]	@ 0x2a
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d10f      	bne.n	8007b1e <USART_Transmit_IT+0x8e>
    {
      /* Disable the USART Transmit data register empty Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68da      	ldr	r2, [r3, #12]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007b0c:	60da      	str	r2, [r3, #12]

      /* Enable the USART Transmit Complete Interrupt */
      SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68da      	ldr	r2, [r3, #12]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b1c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	e000      	b.n	8007b24 <USART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b22:	2302      	movs	r3, #2
  }
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3714      	adds	r7, #20
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  CLEAR_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68da      	ldr	r2, [r3, #12]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b46:	60da      	str	r2, [r3, #12]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	695a      	ldr	r2, [r3, #20]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f022 0201 	bic.w	r2, r2, #1
 8007b56:	615a      	str	r2, [r3, #20]

  husart->State = HAL_USART_STATE_READY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Complete Callback */
  husart->TxCpltCallback(husart);
#else
  /* Call legacy weak Tx Complete Callback */
  HAL_USART_TxCpltCallback(husart);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f7ff ff3b 	bl	80079dc <HAL_USART_TxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <USART_Receive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_Receive_IT(USART_HandleTypeDef *husart)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	60fb      	str	r3, [r7, #12]
  uint16_t *pdata16bits = NULL;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	60bb      	str	r3, [r7, #8]

  if (husart->State == HAL_USART_STATE_BUSY_RX)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	2b22      	cmp	r3, #34	@ 0x22
 8007b8a:	d172      	bne.n	8007c72 <USART_Receive_IT+0x102>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b94:	d115      	bne.n	8007bc2 <USART_Receive_IT+0x52>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d111      	bne.n	8007bc2 <USART_Receive_IT+0x52>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) husart->pRxBuffPtr;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	801a      	strh	r2, [r3, #0]
      husart->pRxBuffPtr += 2U;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bba:	1c9a      	adds	r2, r3, #2
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007bc0:	e024      	b.n	8007c0c <USART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) husart->pRxBuffPtr;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc6:	60fb      	str	r3, [r7, #12]
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bd0:	d007      	beq.n	8007be2 <USART_Receive_IT+0x72>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10a      	bne.n	8007bf0 <USART_Receive_IT+0x80>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d106      	bne.n	8007bf0 <USART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	b2da      	uxtb	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	701a      	strb	r2, [r3, #0]
 8007bee:	e008      	b.n	8007c02 <USART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bfc:	b2da      	uxtb	r2, r3
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	701a      	strb	r2, [r3, #0]
      }

      husart->pRxBuffPtr += 1U;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c06:	1c5a      	adds	r2, r3, #1
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    husart->RxXferCount--;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	3b01      	subs	r3, #1
 8007c14:	b29a      	uxth	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	865a      	strh	r2, [r3, #50]	@ 0x32

    if (husart->RxXferCount == 0U)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d120      	bne.n	8007c66 <USART_Receive_IT+0xf6>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68da      	ldr	r2, [r3, #12]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f022 0220 	bic.w	r2, r2, #32
 8007c32:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68da      	ldr	r2, [r3, #12]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c42:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	695a      	ldr	r2, [r3, #20]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f022 0201 	bic.w	r2, r2, #1
 8007c52:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Rx Complete Callback */
      husart->RxCpltCallback(husart);
#else
      /* Call legacy weak Rx Complete Callback */
      HAL_USART_RxCpltCallback(husart);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f7ff fec7 	bl	80079f0 <HAL_USART_RxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007c62:	2300      	movs	r3, #0
 8007c64:	e006      	b.n	8007c74 <USART_Receive_IT+0x104>
    else
    {
      /* Send dummy byte in order to generate the clock for the slave to send the next data.
      * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
      * can be written for all the cases. */
      husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x0FF);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	22ff      	movs	r2, #255	@ 0xff
 8007c6c:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	e000      	b.n	8007c74 <USART_Receive_IT+0x104>
  }
  else
  {
    return HAL_BUSY;
 8007c72:	2302      	movs	r3, #2
  }
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <USART_TransmitReceive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_TransmitReceive_IT(USART_HandleTypeDef *husart)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  const uint16_t *pdatatx16bits;
  uint16_t *pdatarx16bits;

  if (husart->State == HAL_USART_STATE_BUSY_TX_RX)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	2b32      	cmp	r3, #50	@ 0x32
 8007c8e:	f040 80bd 	bne.w	8007e0c <USART_TransmitReceive_IT+0x190>
  {
    if (husart->TxXferCount != 0x00U)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d03d      	beq.n	8007d18 <USART_TransmitReceive_IT+0x9c>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_TXE) != RESET)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ca6:	2b80      	cmp	r3, #128	@ 0x80
 8007ca8:	d136      	bne.n	8007d18 <USART_TransmitReceive_IT+0x9c>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cb2:	d114      	bne.n	8007cde <USART_TransmitReceive_IT+0x62>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d110      	bne.n	8007cde <USART_TransmitReceive_IT+0x62>
        {
          pdatatx16bits = (const uint16_t *) husart->pTxBuffPtr;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cc0:	60fb      	str	r3, [r7, #12]
          husart->Instance->DR = (uint16_t)(*pdatatx16bits & (uint16_t)0x01FF);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	881b      	ldrh	r3, [r3, #0]
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cd0:	605a      	str	r2, [r3, #4]
          husart->pTxBuffPtr += 2U;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd6:	1c9a      	adds	r2, r3, #2
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	625a      	str	r2, [r3, #36]	@ 0x24
 8007cdc:	e008      	b.n	8007cf0 <USART_TransmitReceive_IT+0x74>
        }
        else
        {
          husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ce2:	1c59      	adds	r1, r3, #1
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	6251      	str	r1, [r2, #36]	@ 0x24
 8007ce8:	781a      	ldrb	r2, [r3, #0]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	605a      	str	r2, [r3, #4]
        }

        husart->TxXferCount--;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Check the latest data transmitted */
        if (husart->TxXferCount == 0U)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d107      	bne.n	8007d18 <USART_TransmitReceive_IT+0x9c>
        {
          CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	68da      	ldr	r2, [r3, #12]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007d16:	60da      	str	r2, [r3, #12]
        }
      }
    }

    if (husart->RxXferCount != 0x00U)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d04c      	beq.n	8007dbc <USART_TransmitReceive_IT+0x140>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_RXNE) != RESET)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0320 	and.w	r3, r3, #32
 8007d2c:	2b20      	cmp	r3, #32
 8007d2e:	d145      	bne.n	8007dbc <USART_TransmitReceive_IT+0x140>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d38:	d115      	bne.n	8007d66 <USART_TransmitReceive_IT+0xea>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d111      	bne.n	8007d66 <USART_TransmitReceive_IT+0xea>
        {
          pdatarx16bits = (uint16_t *) husart->pRxBuffPtr;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d46:	60bb      	str	r3, [r7, #8]
          *pdatarx16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d54:	b29a      	uxth	r2, r3
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	801a      	strh	r2, [r3, #0]
          husart->pRxBuffPtr += 2U;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d5e:	1c9a      	adds	r2, r3, #2
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007d64:	e023      	b.n	8007dae <USART_TransmitReceive_IT+0x132>
        }
        else
        {
          if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d6e:	d007      	beq.n	8007d80 <USART_TransmitReceive_IT+0x104>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10b      	bne.n	8007d90 <USART_TransmitReceive_IT+0x114>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d107      	bne.n	8007d90 <USART_TransmitReceive_IT+0x114>
          {
            *husart->pRxBuffPtr = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	685a      	ldr	r2, [r3, #4]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d8a:	b2d2      	uxtb	r2, r2
 8007d8c:	701a      	strb	r2, [r3, #0]
 8007d8e:	e009      	b.n	8007da4 <USART_TransmitReceive_IT+0x128>
          }
          else
          {
            *husart->pRxBuffPtr = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	b2da      	uxtb	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d9c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007da0:	b2d2      	uxtb	r2, r2
 8007da2:	701a      	strb	r2, [r3, #0]
          }
          husart->pRxBuffPtr += 1U;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007da8:	1c5a      	adds	r2, r3, #1
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	62da      	str	r2, [r3, #44]	@ 0x2c
        }

        husart->RxXferCount--;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	3b01      	subs	r3, #1
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	865a      	strh	r2, [r3, #50]	@ 0x32
      }
    }

    /* Check the latest data received */
    if (husart->RxXferCount == 0U)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d120      	bne.n	8007e08 <USART_TransmitReceive_IT+0x18c>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68da      	ldr	r2, [r3, #12]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f022 0220 	bic.w	r2, r2, #32
 8007dd4:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68da      	ldr	r2, [r3, #12]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007de4:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	695a      	ldr	r2, [r3, #20]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f022 0201 	bic.w	r2, r2, #1
 8007df4:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Tx Rx Complete Callback */
      husart->TxRxCpltCallback(husart);
#else
      /* Call legacy weak Tx Rx Complete Callback */
      HAL_USART_TxRxCpltCallback(husart);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f7ff fe00 	bl	8007a04 <HAL_USART_TxRxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007e04:	2300      	movs	r3, #0
 8007e06:	e002      	b.n	8007e0e <USART_TransmitReceive_IT+0x192>
    }

    return HAL_OK;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	e000      	b.n	8007e0e <USART_TransmitReceive_IT+0x192>
  }
  else
  {
    return HAL_BUSY;
 8007e0c:	2302      	movs	r3, #2
  }
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
	...

08007e18 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8007e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e1c:	b0c6      	sub	sp, #280	@ 0x118
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg = 0x00U;
 8007e24:	2300      	movs	r3, #0
 8007e26:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8007e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68d9      	ldr	r1, [r3, #12]
 8007e32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	f021 030c 	bic.w	r3, r1, #12
 8007e3c:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8007e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8007e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e4e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007e52:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8007e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e5a:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8007e5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e60:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8007e62:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8007e64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e68:	6a1b      	ldr	r3, [r3, #32]
 8007e6a:	431a      	orrs	r2, r3
 8007e6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e70:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8007e72:	431a      	orrs	r2, r3
 8007e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007e7e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8007e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e8c:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8007e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8007e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e9e:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8007ea2:	f023 030c 	bic.w	r3, r3, #12
 8007ea6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8007eaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007eae:	689a      	ldr	r2, [r3, #8]
 8007eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007eb4:	691b      	ldr	r3, [r3, #16]
 8007eb6:	431a      	orrs	r2, r3
 8007eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ebc:	695b      	ldr	r3, [r3, #20]
 8007ebe:	431a      	orrs	r2, r3
 8007ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007eca:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8007ece:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ed8:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8007eda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	6959      	ldr	r1, [r3, #20]
 8007ee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
 8007eec:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8007eee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	4b8b      	ldr	r3, [pc, #556]	@ (8008124 <USART_SetConfig+0x30c>)
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d006      	beq.n	8007f08 <USART_SetConfig+0xf0>
 8007efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	4b89      	ldr	r3, [pc, #548]	@ (8008128 <USART_SetConfig+0x310>)
 8007f02:	429a      	cmp	r2, r3
 8007f04:	f040 8114 	bne.w	8008130 <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007f08:	f7fe fb74 	bl	80065f4 <HAL_RCC_GetPCLK2Freq>
 8007f0c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8007f10:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007f14:	2200      	movs	r2, #0
 8007f16:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007f1a:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8007f1e:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8007f22:	4622      	mov	r2, r4
 8007f24:	462b      	mov	r3, r5
 8007f26:	1891      	adds	r1, r2, r2
 8007f28:	6739      	str	r1, [r7, #112]	@ 0x70
 8007f2a:	415b      	adcs	r3, r3
 8007f2c:	677b      	str	r3, [r7, #116]	@ 0x74
 8007f2e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8007f32:	4621      	mov	r1, r4
 8007f34:	eb12 0801 	adds.w	r8, r2, r1
 8007f38:	4629      	mov	r1, r5
 8007f3a:	eb43 0901 	adc.w	r9, r3, r1
 8007f3e:	f04f 0200 	mov.w	r2, #0
 8007f42:	f04f 0300 	mov.w	r3, #0
 8007f46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f52:	4690      	mov	r8, r2
 8007f54:	4699      	mov	r9, r3
 8007f56:	4623      	mov	r3, r4
 8007f58:	eb18 0303 	adds.w	r3, r8, r3
 8007f5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007f60:	462b      	mov	r3, r5
 8007f62:	eb49 0303 	adc.w	r3, r9, r3
 8007f66:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007f76:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8007f7a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007f7e:	460b      	mov	r3, r1
 8007f80:	18db      	adds	r3, r3, r3
 8007f82:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f84:	4613      	mov	r3, r2
 8007f86:	eb42 0303 	adc.w	r3, r2, r3
 8007f8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007f8c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8007f90:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8007f94:	f7f8 fe10 	bl	8000bb8 <__aeabi_uldivmod>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	4b63      	ldr	r3, [pc, #396]	@ (800812c <USART_SetConfig+0x314>)
 8007f9e:	fba3 2302 	umull	r2, r3, r3, r2
 8007fa2:	095b      	lsrs	r3, r3, #5
 8007fa4:	011c      	lsls	r4, r3, #4
 8007fa6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007faa:	2200      	movs	r2, #0
 8007fac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007fb0:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007fb4:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8007fb8:	4642      	mov	r2, r8
 8007fba:	464b      	mov	r3, r9
 8007fbc:	1891      	adds	r1, r2, r2
 8007fbe:	6639      	str	r1, [r7, #96]	@ 0x60
 8007fc0:	415b      	adcs	r3, r3
 8007fc2:	667b      	str	r3, [r7, #100]	@ 0x64
 8007fc4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8007fc8:	4641      	mov	r1, r8
 8007fca:	1851      	adds	r1, r2, r1
 8007fcc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007fce:	4649      	mov	r1, r9
 8007fd0:	414b      	adcs	r3, r1
 8007fd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007fd4:	f04f 0200 	mov.w	r2, #0
 8007fd8:	f04f 0300 	mov.w	r3, #0
 8007fdc:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 8007fe0:	4659      	mov	r1, fp
 8007fe2:	00cb      	lsls	r3, r1, #3
 8007fe4:	4651      	mov	r1, sl
 8007fe6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fea:	4651      	mov	r1, sl
 8007fec:	00ca      	lsls	r2, r1, #3
 8007fee:	4610      	mov	r0, r2
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	4642      	mov	r2, r8
 8007ff6:	189b      	adds	r3, r3, r2
 8007ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007ffc:	464b      	mov	r3, r9
 8007ffe:	460a      	mov	r2, r1
 8008000:	eb42 0303 	adc.w	r3, r2, r3
 8008004:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008008:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008014:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008018:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800801c:	460b      	mov	r3, r1
 800801e:	18db      	adds	r3, r3, r3
 8008020:	653b      	str	r3, [r7, #80]	@ 0x50
 8008022:	4613      	mov	r3, r2
 8008024:	eb42 0303 	adc.w	r3, r2, r3
 8008028:	657b      	str	r3, [r7, #84]	@ 0x54
 800802a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800802e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008032:	f7f8 fdc1 	bl	8000bb8 <__aeabi_uldivmod>
 8008036:	4602      	mov	r2, r0
 8008038:	460b      	mov	r3, r1
 800803a:	4611      	mov	r1, r2
 800803c:	4b3b      	ldr	r3, [pc, #236]	@ (800812c <USART_SetConfig+0x314>)
 800803e:	fba3 2301 	umull	r2, r3, r3, r1
 8008042:	095b      	lsrs	r3, r3, #5
 8008044:	2264      	movs	r2, #100	@ 0x64
 8008046:	fb02 f303 	mul.w	r3, r2, r3
 800804a:	1acb      	subs	r3, r1, r3
 800804c:	00db      	lsls	r3, r3, #3
 800804e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008052:	4b36      	ldr	r3, [pc, #216]	@ (800812c <USART_SetConfig+0x314>)
 8008054:	fba3 2302 	umull	r2, r3, r3, r2
 8008058:	095b      	lsrs	r3, r3, #5
 800805a:	005b      	lsls	r3, r3, #1
 800805c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008060:	441c      	add	r4, r3
 8008062:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008066:	2200      	movs	r2, #0
 8008068:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800806c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008070:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008074:	4642      	mov	r2, r8
 8008076:	464b      	mov	r3, r9
 8008078:	1891      	adds	r1, r2, r2
 800807a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800807c:	415b      	adcs	r3, r3
 800807e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008080:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008084:	4641      	mov	r1, r8
 8008086:	1851      	adds	r1, r2, r1
 8008088:	6439      	str	r1, [r7, #64]	@ 0x40
 800808a:	4649      	mov	r1, r9
 800808c:	414b      	adcs	r3, r1
 800808e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008090:	f04f 0200 	mov.w	r2, #0
 8008094:	f04f 0300 	mov.w	r3, #0
 8008098:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	@ 0x40
 800809c:	4659      	mov	r1, fp
 800809e:	00cb      	lsls	r3, r1, #3
 80080a0:	4651      	mov	r1, sl
 80080a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080a6:	4651      	mov	r1, sl
 80080a8:	00ca      	lsls	r2, r1, #3
 80080aa:	4610      	mov	r0, r2
 80080ac:	4619      	mov	r1, r3
 80080ae:	4603      	mov	r3, r0
 80080b0:	4642      	mov	r2, r8
 80080b2:	189b      	adds	r3, r3, r2
 80080b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80080b8:	464b      	mov	r3, r9
 80080ba:	460a      	mov	r2, r1
 80080bc:	eb42 0303 	adc.w	r3, r2, r3
 80080c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80080c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80080d0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80080d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80080d8:	460b      	mov	r3, r1
 80080da:	18db      	adds	r3, r3, r3
 80080dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80080de:	4613      	mov	r3, r2
 80080e0:	eb42 0303 	adc.w	r3, r2, r3
 80080e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080e6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80080ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80080ee:	f7f8 fd63 	bl	8000bb8 <__aeabi_uldivmod>
 80080f2:	4602      	mov	r2, r0
 80080f4:	460b      	mov	r3, r1
 80080f6:	4b0d      	ldr	r3, [pc, #52]	@ (800812c <USART_SetConfig+0x314>)
 80080f8:	fba3 1302 	umull	r1, r3, r3, r2
 80080fc:	095b      	lsrs	r3, r3, #5
 80080fe:	2164      	movs	r1, #100	@ 0x64
 8008100:	fb01 f303 	mul.w	r3, r1, r3
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	00db      	lsls	r3, r3, #3
 8008108:	3332      	adds	r3, #50	@ 0x32
 800810a:	4a08      	ldr	r2, [pc, #32]	@ (800812c <USART_SetConfig+0x314>)
 800810c:	fba2 2303 	umull	r2, r3, r2, r3
 8008110:	095b      	lsrs	r3, r3, #5
 8008112:	f003 0207 	and.w	r2, r3, #7
 8008116:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4422      	add	r2, r4
 800811e:	609a      	str	r2, [r3, #8]
 8008120:	e109      	b.n	8008336 <USART_SetConfig+0x51e>
 8008122:	bf00      	nop
 8008124:	40011000 	.word	0x40011000
 8008128:	40011400 	.word	0x40011400
 800812c:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008130:	f7fe fa4c 	bl	80065cc <HAL_RCC_GetPCLK1Freq>
 8008134:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8008138:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800813c:	2200      	movs	r2, #0
 800813e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008142:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008146:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800814a:	4642      	mov	r2, r8
 800814c:	464b      	mov	r3, r9
 800814e:	1891      	adds	r1, r2, r2
 8008150:	6339      	str	r1, [r7, #48]	@ 0x30
 8008152:	415b      	adcs	r3, r3
 8008154:	637b      	str	r3, [r7, #52]	@ 0x34
 8008156:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800815a:	4641      	mov	r1, r8
 800815c:	1854      	adds	r4, r2, r1
 800815e:	4649      	mov	r1, r9
 8008160:	eb43 0501 	adc.w	r5, r3, r1
 8008164:	f04f 0200 	mov.w	r2, #0
 8008168:	f04f 0300 	mov.w	r3, #0
 800816c:	00eb      	lsls	r3, r5, #3
 800816e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008172:	00e2      	lsls	r2, r4, #3
 8008174:	4614      	mov	r4, r2
 8008176:	461d      	mov	r5, r3
 8008178:	4643      	mov	r3, r8
 800817a:	18e3      	adds	r3, r4, r3
 800817c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008180:	464b      	mov	r3, r9
 8008182:	eb45 0303 	adc.w	r3, r5, r3
 8008186:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800818a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008196:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800819a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800819e:	460b      	mov	r3, r1
 80081a0:	18db      	adds	r3, r3, r3
 80081a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081a4:	4613      	mov	r3, r2
 80081a6:	eb42 0303 	adc.w	r3, r2, r3
 80081aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80081b0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80081b4:	f7f8 fd00 	bl	8000bb8 <__aeabi_uldivmod>
 80081b8:	4602      	mov	r2, r0
 80081ba:	460b      	mov	r3, r1
 80081bc:	4b61      	ldr	r3, [pc, #388]	@ (8008344 <USART_SetConfig+0x52c>)
 80081be:	fba3 2302 	umull	r2, r3, r3, r2
 80081c2:	095b      	lsrs	r3, r3, #5
 80081c4:	011c      	lsls	r4, r3, #4
 80081c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80081ca:	2200      	movs	r2, #0
 80081cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80081d0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80081d4:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80081d8:	4642      	mov	r2, r8
 80081da:	464b      	mov	r3, r9
 80081dc:	1891      	adds	r1, r2, r2
 80081de:	6239      	str	r1, [r7, #32]
 80081e0:	415b      	adcs	r3, r3
 80081e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80081e4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80081e8:	4641      	mov	r1, r8
 80081ea:	eb12 0a01 	adds.w	sl, r2, r1
 80081ee:	4649      	mov	r1, r9
 80081f0:	eb43 0b01 	adc.w	fp, r3, r1
 80081f4:	f04f 0200 	mov.w	r2, #0
 80081f8:	f04f 0300 	mov.w	r3, #0
 80081fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008200:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008204:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008208:	4692      	mov	sl, r2
 800820a:	469b      	mov	fp, r3
 800820c:	4643      	mov	r3, r8
 800820e:	eb1a 0303 	adds.w	r3, sl, r3
 8008212:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008216:	464b      	mov	r3, r9
 8008218:	eb4b 0303 	adc.w	r3, fp, r3
 800821c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008220:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800822c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008230:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008234:	460b      	mov	r3, r1
 8008236:	18db      	adds	r3, r3, r3
 8008238:	61bb      	str	r3, [r7, #24]
 800823a:	4613      	mov	r3, r2
 800823c:	eb42 0303 	adc.w	r3, r2, r3
 8008240:	61fb      	str	r3, [r7, #28]
 8008242:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008246:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800824a:	f7f8 fcb5 	bl	8000bb8 <__aeabi_uldivmod>
 800824e:	4602      	mov	r2, r0
 8008250:	460b      	mov	r3, r1
 8008252:	4611      	mov	r1, r2
 8008254:	4b3b      	ldr	r3, [pc, #236]	@ (8008344 <USART_SetConfig+0x52c>)
 8008256:	fba3 2301 	umull	r2, r3, r3, r1
 800825a:	095b      	lsrs	r3, r3, #5
 800825c:	2264      	movs	r2, #100	@ 0x64
 800825e:	fb02 f303 	mul.w	r3, r2, r3
 8008262:	1acb      	subs	r3, r1, r3
 8008264:	00db      	lsls	r3, r3, #3
 8008266:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800826a:	4b36      	ldr	r3, [pc, #216]	@ (8008344 <USART_SetConfig+0x52c>)
 800826c:	fba3 2302 	umull	r2, r3, r3, r2
 8008270:	095b      	lsrs	r3, r3, #5
 8008272:	005b      	lsls	r3, r3, #1
 8008274:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008278:	441c      	add	r4, r3
 800827a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800827e:	2200      	movs	r2, #0
 8008280:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008284:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008288:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800828c:	4642      	mov	r2, r8
 800828e:	464b      	mov	r3, r9
 8008290:	1891      	adds	r1, r2, r2
 8008292:	6139      	str	r1, [r7, #16]
 8008294:	415b      	adcs	r3, r3
 8008296:	617b      	str	r3, [r7, #20]
 8008298:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800829c:	4641      	mov	r1, r8
 800829e:	1851      	adds	r1, r2, r1
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	4649      	mov	r1, r9
 80082a4:	414b      	adcs	r3, r1
 80082a6:	60fb      	str	r3, [r7, #12]
 80082a8:	f04f 0200 	mov.w	r2, #0
 80082ac:	f04f 0300 	mov.w	r3, #0
 80082b0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80082b4:	4659      	mov	r1, fp
 80082b6:	00cb      	lsls	r3, r1, #3
 80082b8:	4651      	mov	r1, sl
 80082ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082be:	4651      	mov	r1, sl
 80082c0:	00ca      	lsls	r2, r1, #3
 80082c2:	4610      	mov	r0, r2
 80082c4:	4619      	mov	r1, r3
 80082c6:	4603      	mov	r3, r0
 80082c8:	4642      	mov	r2, r8
 80082ca:	189b      	adds	r3, r3, r2
 80082cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80082d0:	464b      	mov	r3, r9
 80082d2:	460a      	mov	r2, r1
 80082d4:	eb42 0303 	adc.w	r3, r2, r3
 80082d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80082dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80082e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80082e8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80082ec:	460b      	mov	r3, r1
 80082ee:	18db      	adds	r3, r3, r3
 80082f0:	603b      	str	r3, [r7, #0]
 80082f2:	4613      	mov	r3, r2
 80082f4:	eb42 0303 	adc.w	r3, r2, r3
 80082f8:	607b      	str	r3, [r7, #4]
 80082fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008302:	f7f8 fc59 	bl	8000bb8 <__aeabi_uldivmod>
 8008306:	4602      	mov	r2, r0
 8008308:	460b      	mov	r3, r1
 800830a:	4b0e      	ldr	r3, [pc, #56]	@ (8008344 <USART_SetConfig+0x52c>)
 800830c:	fba3 1302 	umull	r1, r3, r3, r2
 8008310:	095b      	lsrs	r3, r3, #5
 8008312:	2164      	movs	r1, #100	@ 0x64
 8008314:	fb01 f303 	mul.w	r3, r1, r3
 8008318:	1ad3      	subs	r3, r2, r3
 800831a:	00db      	lsls	r3, r3, #3
 800831c:	3332      	adds	r3, #50	@ 0x32
 800831e:	4a09      	ldr	r2, [pc, #36]	@ (8008344 <USART_SetConfig+0x52c>)
 8008320:	fba2 2303 	umull	r2, r3, r2, r3
 8008324:	095b      	lsrs	r3, r3, #5
 8008326:	f003 0207 	and.w	r2, r3, #7
 800832a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4422      	add	r2, r4
 8008332:	609a      	str	r2, [r3, #8]
  }
}
 8008334:	bf00      	nop
 8008336:	bf00      	nop
 8008338:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800833c:	46bd      	mov	sp, r7
 800833e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008342:	bf00      	nop
 8008344:	51eb851f 	.word	0x51eb851f

08008348 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008348:	b084      	sub	sp, #16
 800834a:	b580      	push	{r7, lr}
 800834c:	b084      	sub	sp, #16
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
 8008352:	f107 001c 	add.w	r0, r7, #28
 8008356:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800835a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800835e:	2b01      	cmp	r3, #1
 8008360:	d123      	bne.n	80083aa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008366:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008376:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800838a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800838e:	2b01      	cmp	r3, #1
 8008390:	d105      	bne.n	800839e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f001 fae8 	bl	8009974 <USB_CoreReset>
 80083a4:	4603      	mov	r3, r0
 80083a6:	73fb      	strb	r3, [r7, #15]
 80083a8:	e01b      	b.n	80083e2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f001 fadc 	bl	8009974 <USB_CoreReset>
 80083bc:	4603      	mov	r3, r0
 80083be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80083c0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d106      	bne.n	80083d6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	639a      	str	r2, [r3, #56]	@ 0x38
 80083d4:	e005      	b.n	80083e2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083da:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80083e2:	7fbb      	ldrb	r3, [r7, #30]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d10b      	bne.n	8008400 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	f043 0206 	orr.w	r2, r3, #6
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	f043 0220 	orr.w	r2, r3, #32
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008400:	7bfb      	ldrb	r3, [r7, #15]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800840c:	b004      	add	sp, #16
 800840e:	4770      	bx	lr

08008410 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008410:	b480      	push	{r7}
 8008412:	b087      	sub	sp, #28
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	4613      	mov	r3, r2
 800841c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800841e:	79fb      	ldrb	r3, [r7, #7]
 8008420:	2b02      	cmp	r3, #2
 8008422:	d165      	bne.n	80084f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	4a41      	ldr	r2, [pc, #260]	@ (800852c <USB_SetTurnaroundTime+0x11c>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d906      	bls.n	800843a <USB_SetTurnaroundTime+0x2a>
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	4a40      	ldr	r2, [pc, #256]	@ (8008530 <USB_SetTurnaroundTime+0x120>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d202      	bcs.n	800843a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008434:	230f      	movs	r3, #15
 8008436:	617b      	str	r3, [r7, #20]
 8008438:	e062      	b.n	8008500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	4a3c      	ldr	r2, [pc, #240]	@ (8008530 <USB_SetTurnaroundTime+0x120>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d306      	bcc.n	8008450 <USB_SetTurnaroundTime+0x40>
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	4a3b      	ldr	r2, [pc, #236]	@ (8008534 <USB_SetTurnaroundTime+0x124>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d202      	bcs.n	8008450 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800844a:	230e      	movs	r3, #14
 800844c:	617b      	str	r3, [r7, #20]
 800844e:	e057      	b.n	8008500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	4a38      	ldr	r2, [pc, #224]	@ (8008534 <USB_SetTurnaroundTime+0x124>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d306      	bcc.n	8008466 <USB_SetTurnaroundTime+0x56>
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	4a37      	ldr	r2, [pc, #220]	@ (8008538 <USB_SetTurnaroundTime+0x128>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d202      	bcs.n	8008466 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008460:	230d      	movs	r3, #13
 8008462:	617b      	str	r3, [r7, #20]
 8008464:	e04c      	b.n	8008500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	4a33      	ldr	r2, [pc, #204]	@ (8008538 <USB_SetTurnaroundTime+0x128>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d306      	bcc.n	800847c <USB_SetTurnaroundTime+0x6c>
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	4a32      	ldr	r2, [pc, #200]	@ (800853c <USB_SetTurnaroundTime+0x12c>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d802      	bhi.n	800847c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008476:	230c      	movs	r3, #12
 8008478:	617b      	str	r3, [r7, #20]
 800847a:	e041      	b.n	8008500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	4a2f      	ldr	r2, [pc, #188]	@ (800853c <USB_SetTurnaroundTime+0x12c>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d906      	bls.n	8008492 <USB_SetTurnaroundTime+0x82>
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	4a2e      	ldr	r2, [pc, #184]	@ (8008540 <USB_SetTurnaroundTime+0x130>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d802      	bhi.n	8008492 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800848c:	230b      	movs	r3, #11
 800848e:	617b      	str	r3, [r7, #20]
 8008490:	e036      	b.n	8008500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	4a2a      	ldr	r2, [pc, #168]	@ (8008540 <USB_SetTurnaroundTime+0x130>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d906      	bls.n	80084a8 <USB_SetTurnaroundTime+0x98>
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	4a29      	ldr	r2, [pc, #164]	@ (8008544 <USB_SetTurnaroundTime+0x134>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d802      	bhi.n	80084a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80084a2:	230a      	movs	r3, #10
 80084a4:	617b      	str	r3, [r7, #20]
 80084a6:	e02b      	b.n	8008500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	4a26      	ldr	r2, [pc, #152]	@ (8008544 <USB_SetTurnaroundTime+0x134>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d906      	bls.n	80084be <USB_SetTurnaroundTime+0xae>
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	4a25      	ldr	r2, [pc, #148]	@ (8008548 <USB_SetTurnaroundTime+0x138>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d202      	bcs.n	80084be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80084b8:	2309      	movs	r3, #9
 80084ba:	617b      	str	r3, [r7, #20]
 80084bc:	e020      	b.n	8008500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	4a21      	ldr	r2, [pc, #132]	@ (8008548 <USB_SetTurnaroundTime+0x138>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d306      	bcc.n	80084d4 <USB_SetTurnaroundTime+0xc4>
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	4a20      	ldr	r2, [pc, #128]	@ (800854c <USB_SetTurnaroundTime+0x13c>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d802      	bhi.n	80084d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80084ce:	2308      	movs	r3, #8
 80084d0:	617b      	str	r3, [r7, #20]
 80084d2:	e015      	b.n	8008500 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	4a1d      	ldr	r2, [pc, #116]	@ (800854c <USB_SetTurnaroundTime+0x13c>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d906      	bls.n	80084ea <USB_SetTurnaroundTime+0xda>
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	4a1c      	ldr	r2, [pc, #112]	@ (8008550 <USB_SetTurnaroundTime+0x140>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d202      	bcs.n	80084ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80084e4:	2307      	movs	r3, #7
 80084e6:	617b      	str	r3, [r7, #20]
 80084e8:	e00a      	b.n	8008500 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80084ea:	2306      	movs	r3, #6
 80084ec:	617b      	str	r3, [r7, #20]
 80084ee:	e007      	b.n	8008500 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80084f0:	79fb      	ldrb	r3, [r7, #7]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d102      	bne.n	80084fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80084f6:	2309      	movs	r3, #9
 80084f8:	617b      	str	r3, [r7, #20]
 80084fa:	e001      	b.n	8008500 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80084fc:	2309      	movs	r3, #9
 80084fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	68da      	ldr	r2, [r3, #12]
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	029b      	lsls	r3, r3, #10
 8008514:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008518:	431a      	orrs	r2, r3
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	371c      	adds	r7, #28
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr
 800852c:	00d8acbf 	.word	0x00d8acbf
 8008530:	00e4e1c0 	.word	0x00e4e1c0
 8008534:	00f42400 	.word	0x00f42400
 8008538:	01067380 	.word	0x01067380
 800853c:	011a499f 	.word	0x011a499f
 8008540:	01312cff 	.word	0x01312cff
 8008544:	014ca43f 	.word	0x014ca43f
 8008548:	016e3600 	.word	0x016e3600
 800854c:	01a6ab1f 	.word	0x01a6ab1f
 8008550:	01e84800 	.word	0x01e84800

08008554 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	f043 0201 	orr.w	r2, r3, #1
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	370c      	adds	r7, #12
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr

08008576 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008576:	b480      	push	{r7}
 8008578:	b083      	sub	sp, #12
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	f023 0201 	bic.w	r2, r3, #1
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	460b      	mov	r3, r1
 80085a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80085a4:	2300      	movs	r3, #0
 80085a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80085b4:	78fb      	ldrb	r3, [r7, #3]
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d115      	bne.n	80085e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80085c6:	200a      	movs	r0, #10
 80085c8:	f7fa fe2c 	bl	8003224 <HAL_Delay>
      ms += 10U;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	330a      	adds	r3, #10
 80085d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f001 f93f 	bl	8009856 <USB_GetMode>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d01e      	beq.n	800861c <USB_SetCurrentMode+0x84>
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2bc7      	cmp	r3, #199	@ 0xc7
 80085e2:	d9f0      	bls.n	80085c6 <USB_SetCurrentMode+0x2e>
 80085e4:	e01a      	b.n	800861c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80085e6:	78fb      	ldrb	r3, [r7, #3]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d115      	bne.n	8008618 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80085f8:	200a      	movs	r0, #10
 80085fa:	f7fa fe13 	bl	8003224 <HAL_Delay>
      ms += 10U;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	330a      	adds	r3, #10
 8008602:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f001 f926 	bl	8009856 <USB_GetMode>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d005      	beq.n	800861c <USB_SetCurrentMode+0x84>
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2bc7      	cmp	r3, #199	@ 0xc7
 8008614:	d9f0      	bls.n	80085f8 <USB_SetCurrentMode+0x60>
 8008616:	e001      	b.n	800861c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	e005      	b.n	8008628 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2bc8      	cmp	r3, #200	@ 0xc8
 8008620:	d101      	bne.n	8008626 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	e000      	b.n	8008628 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008630:	b084      	sub	sp, #16
 8008632:	b580      	push	{r7, lr}
 8008634:	b086      	sub	sp, #24
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
 800863a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800863e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008642:	2300      	movs	r3, #0
 8008644:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800864a:	2300      	movs	r3, #0
 800864c:	613b      	str	r3, [r7, #16]
 800864e:	e009      	b.n	8008664 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	3340      	adds	r3, #64	@ 0x40
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	4413      	add	r3, r2
 800865a:	2200      	movs	r2, #0
 800865c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	3301      	adds	r3, #1
 8008662:	613b      	str	r3, [r7, #16]
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	2b0e      	cmp	r3, #14
 8008668:	d9f2      	bls.n	8008650 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800866a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800866e:	2b00      	cmp	r3, #0
 8008670:	d11c      	bne.n	80086ac <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008680:	f043 0302 	orr.w	r3, r3, #2
 8008684:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800868a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008696:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086a2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80086aa:	e00b      	b.n	80086c4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086b0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086bc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80086ca:	461a      	mov	r2, r3
 80086cc:	2300      	movs	r3, #0
 80086ce:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80086d0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d10d      	bne.n	80086f4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80086d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d104      	bne.n	80086ea <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80086e0:	2100      	movs	r1, #0
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f968 	bl	80089b8 <USB_SetDevSpeed>
 80086e8:	e008      	b.n	80086fc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80086ea:	2101      	movs	r1, #1
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 f963 	bl	80089b8 <USB_SetDevSpeed>
 80086f2:	e003      	b.n	80086fc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80086f4:	2103      	movs	r1, #3
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 f95e 	bl	80089b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80086fc:	2110      	movs	r1, #16
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 f8fa 	bl	80088f8 <USB_FlushTxFifo>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d001      	beq.n	800870e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 f924 	bl	800895c <USB_FlushRxFifo>
 8008714:	4603      	mov	r3, r0
 8008716:	2b00      	cmp	r3, #0
 8008718:	d001      	beq.n	800871e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008724:	461a      	mov	r2, r3
 8008726:	2300      	movs	r3, #0
 8008728:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008730:	461a      	mov	r2, r3
 8008732:	2300      	movs	r3, #0
 8008734:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800873c:	461a      	mov	r2, r3
 800873e:	2300      	movs	r3, #0
 8008740:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008742:	2300      	movs	r3, #0
 8008744:	613b      	str	r3, [r7, #16]
 8008746:	e043      	b.n	80087d0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	015a      	lsls	r2, r3, #5
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	4413      	add	r3, r2
 8008750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800875a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800875e:	d118      	bne.n	8008792 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d10a      	bne.n	800877c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	015a      	lsls	r2, r3, #5
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	4413      	add	r3, r2
 800876e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008772:	461a      	mov	r2, r3
 8008774:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008778:	6013      	str	r3, [r2, #0]
 800877a:	e013      	b.n	80087a4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	015a      	lsls	r2, r3, #5
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	4413      	add	r3, r2
 8008784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008788:	461a      	mov	r2, r3
 800878a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800878e:	6013      	str	r3, [r2, #0]
 8008790:	e008      	b.n	80087a4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	015a      	lsls	r2, r3, #5
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	4413      	add	r3, r2
 800879a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800879e:	461a      	mov	r2, r3
 80087a0:	2300      	movs	r3, #0
 80087a2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	015a      	lsls	r2, r3, #5
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	4413      	add	r3, r2
 80087ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087b0:	461a      	mov	r2, r3
 80087b2:	2300      	movs	r3, #0
 80087b4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	015a      	lsls	r2, r3, #5
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	4413      	add	r3, r2
 80087be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087c2:	461a      	mov	r2, r3
 80087c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80087c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	3301      	adds	r3, #1
 80087ce:	613b      	str	r3, [r7, #16]
 80087d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80087d4:	461a      	mov	r2, r3
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	4293      	cmp	r3, r2
 80087da:	d3b5      	bcc.n	8008748 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087dc:	2300      	movs	r3, #0
 80087de:	613b      	str	r3, [r7, #16]
 80087e0:	e043      	b.n	800886a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	015a      	lsls	r2, r3, #5
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	4413      	add	r3, r2
 80087ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80087f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80087f8:	d118      	bne.n	800882c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d10a      	bne.n	8008816 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	015a      	lsls	r2, r3, #5
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	4413      	add	r3, r2
 8008808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800880c:	461a      	mov	r2, r3
 800880e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008812:	6013      	str	r3, [r2, #0]
 8008814:	e013      	b.n	800883e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	015a      	lsls	r2, r3, #5
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	4413      	add	r3, r2
 800881e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008822:	461a      	mov	r2, r3
 8008824:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008828:	6013      	str	r3, [r2, #0]
 800882a:	e008      	b.n	800883e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	015a      	lsls	r2, r3, #5
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	4413      	add	r3, r2
 8008834:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008838:	461a      	mov	r2, r3
 800883a:	2300      	movs	r3, #0
 800883c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	015a      	lsls	r2, r3, #5
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	4413      	add	r3, r2
 8008846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800884a:	461a      	mov	r2, r3
 800884c:	2300      	movs	r3, #0
 800884e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	015a      	lsls	r2, r3, #5
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	4413      	add	r3, r2
 8008858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800885c:	461a      	mov	r2, r3
 800885e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008862:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	3301      	adds	r3, #1
 8008868:	613b      	str	r3, [r7, #16]
 800886a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800886e:	461a      	mov	r2, r3
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	4293      	cmp	r3, r2
 8008874:	d3b5      	bcc.n	80087e2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008884:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008888:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2200      	movs	r2, #0
 800888e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008896:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008898:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800889c:	2b00      	cmp	r3, #0
 800889e:	d105      	bne.n	80088ac <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	699b      	ldr	r3, [r3, #24]
 80088a4:	f043 0210 	orr.w	r2, r3, #16
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	699a      	ldr	r2, [r3, #24]
 80088b0:	4b10      	ldr	r3, [pc, #64]	@ (80088f4 <USB_DevInit+0x2c4>)
 80088b2:	4313      	orrs	r3, r2
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80088b8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d005      	beq.n	80088cc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	f043 0208 	orr.w	r2, r3, #8
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80088cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d107      	bne.n	80088e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	699b      	ldr	r3, [r3, #24]
 80088d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80088dc:	f043 0304 	orr.w	r3, r3, #4
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80088e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3718      	adds	r7, #24
 80088ea:	46bd      	mov	sp, r7
 80088ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80088f0:	b004      	add	sp, #16
 80088f2:	4770      	bx	lr
 80088f4:	803c3800 	.word	0x803c3800

080088f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008902:	2300      	movs	r3, #0
 8008904:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	3301      	adds	r3, #1
 800890a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008912:	d901      	bls.n	8008918 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008914:	2303      	movs	r3, #3
 8008916:	e01b      	b.n	8008950 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	2b00      	cmp	r3, #0
 800891e:	daf2      	bge.n	8008906 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008920:	2300      	movs	r3, #0
 8008922:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	019b      	lsls	r3, r3, #6
 8008928:	f043 0220 	orr.w	r2, r3, #32
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	3301      	adds	r3, #1
 8008934:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800893c:	d901      	bls.n	8008942 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800893e:	2303      	movs	r3, #3
 8008940:	e006      	b.n	8008950 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	f003 0320 	and.w	r3, r3, #32
 800894a:	2b20      	cmp	r3, #32
 800894c:	d0f0      	beq.n	8008930 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3714      	adds	r7, #20
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008964:	2300      	movs	r3, #0
 8008966:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	3301      	adds	r3, #1
 800896c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008974:	d901      	bls.n	800897a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008976:	2303      	movs	r3, #3
 8008978:	e018      	b.n	80089ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	691b      	ldr	r3, [r3, #16]
 800897e:	2b00      	cmp	r3, #0
 8008980:	daf2      	bge.n	8008968 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008982:	2300      	movs	r3, #0
 8008984:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2210      	movs	r2, #16
 800898a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	3301      	adds	r3, #1
 8008990:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008998:	d901      	bls.n	800899e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800899a:	2303      	movs	r3, #3
 800899c:	e006      	b.n	80089ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	f003 0310 	and.w	r3, r3, #16
 80089a6:	2b10      	cmp	r3, #16
 80089a8:	d0f0      	beq.n	800898c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3714      	adds	r7, #20
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b085      	sub	sp, #20
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	460b      	mov	r3, r1
 80089c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089ce:	681a      	ldr	r2, [r3, #0]
 80089d0:	78fb      	ldrb	r3, [r7, #3]
 80089d2:	68f9      	ldr	r1, [r7, #12]
 80089d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80089d8:	4313      	orrs	r3, r2
 80089da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3714      	adds	r7, #20
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr

080089ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80089ea:	b480      	push	{r7}
 80089ec:	b087      	sub	sp, #28
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	f003 0306 	and.w	r3, r3, #6
 8008a02:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d102      	bne.n	8008a10 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	75fb      	strb	r3, [r7, #23]
 8008a0e:	e00a      	b.n	8008a26 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2b02      	cmp	r3, #2
 8008a14:	d002      	beq.n	8008a1c <USB_GetDevSpeed+0x32>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2b06      	cmp	r3, #6
 8008a1a:	d102      	bne.n	8008a22 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008a1c:	2302      	movs	r3, #2
 8008a1e:	75fb      	strb	r3, [r7, #23]
 8008a20:	e001      	b.n	8008a26 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008a22:	230f      	movs	r3, #15
 8008a24:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	371c      	adds	r7, #28
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b085      	sub	sp, #20
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	785b      	ldrb	r3, [r3, #1]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d13a      	bne.n	8008ac6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a56:	69da      	ldr	r2, [r3, #28]
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	f003 030f 	and.w	r3, r3, #15
 8008a60:	2101      	movs	r1, #1
 8008a62:	fa01 f303 	lsl.w	r3, r1, r3
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	68f9      	ldr	r1, [r7, #12]
 8008a6a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	015a      	lsls	r2, r3, #5
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	4413      	add	r3, r2
 8008a7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d155      	bne.n	8008b34 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	015a      	lsls	r2, r3, #5
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	4413      	add	r3, r2
 8008a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	791b      	ldrb	r3, [r3, #4]
 8008aa2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008aa4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	059b      	lsls	r3, r3, #22
 8008aaa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008aac:	4313      	orrs	r3, r2
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	0151      	lsls	r1, r2, #5
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	440a      	add	r2, r1
 8008ab6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008aba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008abe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ac2:	6013      	str	r3, [r2, #0]
 8008ac4:	e036      	b.n	8008b34 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008acc:	69da      	ldr	r2, [r3, #28]
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	f003 030f 	and.w	r3, r3, #15
 8008ad6:	2101      	movs	r1, #1
 8008ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8008adc:	041b      	lsls	r3, r3, #16
 8008ade:	68f9      	ldr	r1, [r7, #12]
 8008ae0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	015a      	lsls	r2, r3, #5
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	4413      	add	r3, r2
 8008af0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d11a      	bne.n	8008b34 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	015a      	lsls	r2, r3, #5
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	4413      	add	r3, r2
 8008b06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	791b      	ldrb	r3, [r3, #4]
 8008b18:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008b1a:	430b      	orrs	r3, r1
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	68ba      	ldr	r2, [r7, #8]
 8008b20:	0151      	lsls	r1, r2, #5
 8008b22:	68fa      	ldr	r2, [r7, #12]
 8008b24:	440a      	add	r2, r1
 8008b26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b32:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3714      	adds	r7, #20
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr
	...

08008b44 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b085      	sub	sp, #20
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	785b      	ldrb	r3, [r3, #1]
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d161      	bne.n	8008c24 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	015a      	lsls	r2, r3, #5
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	4413      	add	r3, r2
 8008b68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b76:	d11f      	bne.n	8008bb8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	015a      	lsls	r2, r3, #5
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	4413      	add	r3, r2
 8008b80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	0151      	lsls	r1, r2, #5
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	440a      	add	r2, r1
 8008b8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b92:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008b96:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	015a      	lsls	r2, r3, #5
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68ba      	ldr	r2, [r7, #8]
 8008ba8:	0151      	lsls	r1, r2, #5
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	440a      	add	r2, r1
 8008bae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008bb2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008bb6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	f003 030f 	and.w	r3, r3, #15
 8008bc8:	2101      	movs	r1, #1
 8008bca:	fa01 f303 	lsl.w	r3, r1, r3
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	43db      	mvns	r3, r3
 8008bd2:	68f9      	ldr	r1, [r7, #12]
 8008bd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008bd8:	4013      	ands	r3, r2
 8008bda:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008be2:	69da      	ldr	r2, [r3, #28]
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	f003 030f 	and.w	r3, r3, #15
 8008bec:	2101      	movs	r1, #1
 8008bee:	fa01 f303 	lsl.w	r3, r1, r3
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	43db      	mvns	r3, r3
 8008bf6:	68f9      	ldr	r1, [r7, #12]
 8008bf8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008bfc:	4013      	ands	r3, r2
 8008bfe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	015a      	lsls	r2, r3, #5
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	4413      	add	r3, r2
 8008c08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	0159      	lsls	r1, r3, #5
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	440b      	add	r3, r1
 8008c16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	4b35      	ldr	r3, [pc, #212]	@ (8008cf4 <USB_DeactivateEndpoint+0x1b0>)
 8008c1e:	4013      	ands	r3, r2
 8008c20:	600b      	str	r3, [r1, #0]
 8008c22:	e060      	b.n	8008ce6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	015a      	lsls	r2, r3, #5
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c3a:	d11f      	bne.n	8008c7c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	015a      	lsls	r2, r3, #5
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	4413      	add	r3, r2
 8008c44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	0151      	lsls	r1, r2, #5
 8008c4e:	68fa      	ldr	r2, [r7, #12]
 8008c50:	440a      	add	r2, r1
 8008c52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c56:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008c5a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	015a      	lsls	r2, r3, #5
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	4413      	add	r3, r2
 8008c64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	68ba      	ldr	r2, [r7, #8]
 8008c6c:	0151      	lsls	r1, r2, #5
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	440a      	add	r2, r1
 8008c72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c76:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008c7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	f003 030f 	and.w	r3, r3, #15
 8008c8c:	2101      	movs	r1, #1
 8008c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8008c92:	041b      	lsls	r3, r3, #16
 8008c94:	43db      	mvns	r3, r3
 8008c96:	68f9      	ldr	r1, [r7, #12]
 8008c98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008c9c:	4013      	ands	r3, r2
 8008c9e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ca6:	69da      	ldr	r2, [r3, #28]
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	f003 030f 	and.w	r3, r3, #15
 8008cb0:	2101      	movs	r1, #1
 8008cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8008cb6:	041b      	lsls	r3, r3, #16
 8008cb8:	43db      	mvns	r3, r3
 8008cba:	68f9      	ldr	r1, [r7, #12]
 8008cbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008cc0:	4013      	ands	r3, r2
 8008cc2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	015a      	lsls	r2, r3, #5
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	4413      	add	r3, r2
 8008ccc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	0159      	lsls	r1, r3, #5
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	440b      	add	r3, r1
 8008cda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cde:	4619      	mov	r1, r3
 8008ce0:	4b05      	ldr	r3, [pc, #20]	@ (8008cf8 <USB_DeactivateEndpoint+0x1b4>)
 8008ce2:	4013      	ands	r3, r2
 8008ce4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3714      	adds	r7, #20
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr
 8008cf4:	ec337800 	.word	0xec337800
 8008cf8:	eff37800 	.word	0xeff37800

08008cfc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b08a      	sub	sp, #40	@ 0x28
 8008d00:	af02      	add	r7, sp, #8
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	4613      	mov	r3, r2
 8008d08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	785b      	ldrb	r3, [r3, #1]
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	f040 817f 	bne.w	800901c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	691b      	ldr	r3, [r3, #16]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d132      	bne.n	8008d8c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	015a      	lsls	r2, r3, #5
 8008d2a:	69fb      	ldr	r3, [r7, #28]
 8008d2c:	4413      	add	r3, r2
 8008d2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	69ba      	ldr	r2, [r7, #24]
 8008d36:	0151      	lsls	r1, r2, #5
 8008d38:	69fa      	ldr	r2, [r7, #28]
 8008d3a:	440a      	add	r2, r1
 8008d3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d40:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008d44:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008d48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	015a      	lsls	r2, r3, #5
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	4413      	add	r3, r2
 8008d52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d56:	691b      	ldr	r3, [r3, #16]
 8008d58:	69ba      	ldr	r2, [r7, #24]
 8008d5a:	0151      	lsls	r1, r2, #5
 8008d5c:	69fa      	ldr	r2, [r7, #28]
 8008d5e:	440a      	add	r2, r1
 8008d60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d64:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008d68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008d6a:	69bb      	ldr	r3, [r7, #24]
 8008d6c:	015a      	lsls	r2, r3, #5
 8008d6e:	69fb      	ldr	r3, [r7, #28]
 8008d70:	4413      	add	r3, r2
 8008d72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	69ba      	ldr	r2, [r7, #24]
 8008d7a:	0151      	lsls	r1, r2, #5
 8008d7c:	69fa      	ldr	r2, [r7, #28]
 8008d7e:	440a      	add	r2, r1
 8008d80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d84:	0cdb      	lsrs	r3, r3, #19
 8008d86:	04db      	lsls	r3, r3, #19
 8008d88:	6113      	str	r3, [r2, #16]
 8008d8a:	e097      	b.n	8008ebc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	015a      	lsls	r2, r3, #5
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	4413      	add	r3, r2
 8008d94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	69ba      	ldr	r2, [r7, #24]
 8008d9c:	0151      	lsls	r1, r2, #5
 8008d9e:	69fa      	ldr	r2, [r7, #28]
 8008da0:	440a      	add	r2, r1
 8008da2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008da6:	0cdb      	lsrs	r3, r3, #19
 8008da8:	04db      	lsls	r3, r3, #19
 8008daa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008dac:	69bb      	ldr	r3, [r7, #24]
 8008dae:	015a      	lsls	r2, r3, #5
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	4413      	add	r3, r2
 8008db4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008db8:	691b      	ldr	r3, [r3, #16]
 8008dba:	69ba      	ldr	r2, [r7, #24]
 8008dbc:	0151      	lsls	r1, r2, #5
 8008dbe:	69fa      	ldr	r2, [r7, #28]
 8008dc0:	440a      	add	r2, r1
 8008dc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008dc6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008dca:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008dce:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008dd0:	69bb      	ldr	r3, [r7, #24]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d11a      	bne.n	8008e0c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	691a      	ldr	r2, [r3, #16]
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d903      	bls.n	8008dea <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	689a      	ldr	r2, [r3, #8]
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	015a      	lsls	r2, r3, #5
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	4413      	add	r3, r2
 8008df2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008df6:	691b      	ldr	r3, [r3, #16]
 8008df8:	69ba      	ldr	r2, [r7, #24]
 8008dfa:	0151      	lsls	r1, r2, #5
 8008dfc:	69fa      	ldr	r2, [r7, #28]
 8008dfe:	440a      	add	r2, r1
 8008e00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008e08:	6113      	str	r3, [r2, #16]
 8008e0a:	e044      	b.n	8008e96 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	691a      	ldr	r2, [r3, #16]
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	4413      	add	r3, r2
 8008e16:	1e5a      	subs	r2, r3, #1
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e20:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	015a      	lsls	r2, r3, #5
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	4413      	add	r3, r2
 8008e2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e2e:	691a      	ldr	r2, [r3, #16]
 8008e30:	8afb      	ldrh	r3, [r7, #22]
 8008e32:	04d9      	lsls	r1, r3, #19
 8008e34:	4ba4      	ldr	r3, [pc, #656]	@ (80090c8 <USB_EPStartXfer+0x3cc>)
 8008e36:	400b      	ands	r3, r1
 8008e38:	69b9      	ldr	r1, [r7, #24]
 8008e3a:	0148      	lsls	r0, r1, #5
 8008e3c:	69f9      	ldr	r1, [r7, #28]
 8008e3e:	4401      	add	r1, r0
 8008e40:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008e44:	4313      	orrs	r3, r2
 8008e46:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	791b      	ldrb	r3, [r3, #4]
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d122      	bne.n	8008e96 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	015a      	lsls	r2, r3, #5
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	4413      	add	r3, r2
 8008e58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	69ba      	ldr	r2, [r7, #24]
 8008e60:	0151      	lsls	r1, r2, #5
 8008e62:	69fa      	ldr	r2, [r7, #28]
 8008e64:	440a      	add	r2, r1
 8008e66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e6a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008e6e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	015a      	lsls	r2, r3, #5
 8008e74:	69fb      	ldr	r3, [r7, #28]
 8008e76:	4413      	add	r3, r2
 8008e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e7c:	691a      	ldr	r2, [r3, #16]
 8008e7e:	8afb      	ldrh	r3, [r7, #22]
 8008e80:	075b      	lsls	r3, r3, #29
 8008e82:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008e86:	69b9      	ldr	r1, [r7, #24]
 8008e88:	0148      	lsls	r0, r1, #5
 8008e8a:	69f9      	ldr	r1, [r7, #28]
 8008e8c:	4401      	add	r1, r0
 8008e8e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008e92:	4313      	orrs	r3, r2
 8008e94:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	015a      	lsls	r2, r3, #5
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ea2:	691a      	ldr	r2, [r3, #16]
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008eac:	69b9      	ldr	r1, [r7, #24]
 8008eae:	0148      	lsls	r0, r1, #5
 8008eb0:	69f9      	ldr	r1, [r7, #28]
 8008eb2:	4401      	add	r1, r0
 8008eb4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008ebc:	79fb      	ldrb	r3, [r7, #7]
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d14b      	bne.n	8008f5a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	69db      	ldr	r3, [r3, #28]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d009      	beq.n	8008ede <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	015a      	lsls	r2, r3, #5
 8008ece:	69fb      	ldr	r3, [r7, #28]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	69db      	ldr	r3, [r3, #28]
 8008edc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	791b      	ldrb	r3, [r3, #4]
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d128      	bne.n	8008f38 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008ee6:	69fb      	ldr	r3, [r7, #28]
 8008ee8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d110      	bne.n	8008f18 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	015a      	lsls	r2, r3, #5
 8008efa:	69fb      	ldr	r3, [r7, #28]
 8008efc:	4413      	add	r3, r2
 8008efe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	69ba      	ldr	r2, [r7, #24]
 8008f06:	0151      	lsls	r1, r2, #5
 8008f08:	69fa      	ldr	r2, [r7, #28]
 8008f0a:	440a      	add	r2, r1
 8008f0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f10:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008f14:	6013      	str	r3, [r2, #0]
 8008f16:	e00f      	b.n	8008f38 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008f18:	69bb      	ldr	r3, [r7, #24]
 8008f1a:	015a      	lsls	r2, r3, #5
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	4413      	add	r3, r2
 8008f20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	69ba      	ldr	r2, [r7, #24]
 8008f28:	0151      	lsls	r1, r2, #5
 8008f2a:	69fa      	ldr	r2, [r7, #28]
 8008f2c:	440a      	add	r2, r1
 8008f2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f36:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	015a      	lsls	r2, r3, #5
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	4413      	add	r3, r2
 8008f40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	69ba      	ldr	r2, [r7, #24]
 8008f48:	0151      	lsls	r1, r2, #5
 8008f4a:	69fa      	ldr	r2, [r7, #28]
 8008f4c:	440a      	add	r2, r1
 8008f4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f52:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008f56:	6013      	str	r3, [r2, #0]
 8008f58:	e166      	b.n	8009228 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	015a      	lsls	r2, r3, #5
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	4413      	add	r3, r2
 8008f62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	69ba      	ldr	r2, [r7, #24]
 8008f6a:	0151      	lsls	r1, r2, #5
 8008f6c:	69fa      	ldr	r2, [r7, #28]
 8008f6e:	440a      	add	r2, r1
 8008f70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f74:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008f78:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	791b      	ldrb	r3, [r3, #4]
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d015      	beq.n	8008fae <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	f000 814e 	beq.w	8009228 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	f003 030f 	and.w	r3, r3, #15
 8008f9c:	2101      	movs	r1, #1
 8008f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8008fa2:	69f9      	ldr	r1, [r7, #28]
 8008fa4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	634b      	str	r3, [r1, #52]	@ 0x34
 8008fac:	e13c      	b.n	8009228 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d110      	bne.n	8008fe0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	015a      	lsls	r2, r3, #5
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	69ba      	ldr	r2, [r7, #24]
 8008fce:	0151      	lsls	r1, r2, #5
 8008fd0:	69fa      	ldr	r2, [r7, #28]
 8008fd2:	440a      	add	r2, r1
 8008fd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fd8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008fdc:	6013      	str	r3, [r2, #0]
 8008fde:	e00f      	b.n	8009000 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	015a      	lsls	r2, r3, #5
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	69ba      	ldr	r2, [r7, #24]
 8008ff0:	0151      	lsls	r1, r2, #5
 8008ff2:	69fa      	ldr	r2, [r7, #28]
 8008ff4:	440a      	add	r2, r1
 8008ff6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ffa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ffe:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	68d9      	ldr	r1, [r3, #12]
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	781a      	ldrb	r2, [r3, #0]
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	691b      	ldr	r3, [r3, #16]
 800900c:	b298      	uxth	r0, r3
 800900e:	79fb      	ldrb	r3, [r7, #7]
 8009010:	9300      	str	r3, [sp, #0]
 8009012:	4603      	mov	r3, r0
 8009014:	68f8      	ldr	r0, [r7, #12]
 8009016:	f000 f9b9 	bl	800938c <USB_WritePacket>
 800901a:	e105      	b.n	8009228 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800901c:	69bb      	ldr	r3, [r7, #24]
 800901e:	015a      	lsls	r2, r3, #5
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	4413      	add	r3, r2
 8009024:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	69ba      	ldr	r2, [r7, #24]
 800902c:	0151      	lsls	r1, r2, #5
 800902e:	69fa      	ldr	r2, [r7, #28]
 8009030:	440a      	add	r2, r1
 8009032:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009036:	0cdb      	lsrs	r3, r3, #19
 8009038:	04db      	lsls	r3, r3, #19
 800903a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	015a      	lsls	r2, r3, #5
 8009040:	69fb      	ldr	r3, [r7, #28]
 8009042:	4413      	add	r3, r2
 8009044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	69ba      	ldr	r2, [r7, #24]
 800904c:	0151      	lsls	r1, r2, #5
 800904e:	69fa      	ldr	r2, [r7, #28]
 8009050:	440a      	add	r2, r1
 8009052:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009056:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800905a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800905e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d132      	bne.n	80090cc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	691b      	ldr	r3, [r3, #16]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d003      	beq.n	8009076 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	689a      	ldr	r2, [r3, #8]
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	689a      	ldr	r2, [r3, #8]
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	015a      	lsls	r2, r3, #5
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	4413      	add	r3, r2
 8009086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800908a:	691a      	ldr	r2, [r3, #16]
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	6a1b      	ldr	r3, [r3, #32]
 8009090:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009094:	69b9      	ldr	r1, [r7, #24]
 8009096:	0148      	lsls	r0, r1, #5
 8009098:	69f9      	ldr	r1, [r7, #28]
 800909a:	4401      	add	r1, r0
 800909c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80090a0:	4313      	orrs	r3, r2
 80090a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80090a4:	69bb      	ldr	r3, [r7, #24]
 80090a6:	015a      	lsls	r2, r3, #5
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	4413      	add	r3, r2
 80090ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	69ba      	ldr	r2, [r7, #24]
 80090b4:	0151      	lsls	r1, r2, #5
 80090b6:	69fa      	ldr	r2, [r7, #28]
 80090b8:	440a      	add	r2, r1
 80090ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80090be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80090c2:	6113      	str	r3, [r2, #16]
 80090c4:	e062      	b.n	800918c <USB_EPStartXfer+0x490>
 80090c6:	bf00      	nop
 80090c8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	691b      	ldr	r3, [r3, #16]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d123      	bne.n	800911c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80090d4:	69bb      	ldr	r3, [r7, #24]
 80090d6:	015a      	lsls	r2, r3, #5
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	4413      	add	r3, r2
 80090dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090e0:	691a      	ldr	r2, [r3, #16]
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090ea:	69b9      	ldr	r1, [r7, #24]
 80090ec:	0148      	lsls	r0, r1, #5
 80090ee:	69f9      	ldr	r1, [r7, #28]
 80090f0:	4401      	add	r1, r0
 80090f2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80090f6:	4313      	orrs	r3, r2
 80090f8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	015a      	lsls	r2, r3, #5
 80090fe:	69fb      	ldr	r3, [r7, #28]
 8009100:	4413      	add	r3, r2
 8009102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009106:	691b      	ldr	r3, [r3, #16]
 8009108:	69ba      	ldr	r2, [r7, #24]
 800910a:	0151      	lsls	r1, r2, #5
 800910c:	69fa      	ldr	r2, [r7, #28]
 800910e:	440a      	add	r2, r1
 8009110:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009114:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009118:	6113      	str	r3, [r2, #16]
 800911a:	e037      	b.n	800918c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	691a      	ldr	r2, [r3, #16]
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	4413      	add	r3, r2
 8009126:	1e5a      	subs	r2, r3, #1
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009130:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	8afa      	ldrh	r2, [r7, #22]
 8009138:	fb03 f202 	mul.w	r2, r3, r2
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	015a      	lsls	r2, r3, #5
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	4413      	add	r3, r2
 8009148:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800914c:	691a      	ldr	r2, [r3, #16]
 800914e:	8afb      	ldrh	r3, [r7, #22]
 8009150:	04d9      	lsls	r1, r3, #19
 8009152:	4b38      	ldr	r3, [pc, #224]	@ (8009234 <USB_EPStartXfer+0x538>)
 8009154:	400b      	ands	r3, r1
 8009156:	69b9      	ldr	r1, [r7, #24]
 8009158:	0148      	lsls	r0, r1, #5
 800915a:	69f9      	ldr	r1, [r7, #28]
 800915c:	4401      	add	r1, r0
 800915e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009162:	4313      	orrs	r3, r2
 8009164:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009166:	69bb      	ldr	r3, [r7, #24]
 8009168:	015a      	lsls	r2, r3, #5
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	4413      	add	r3, r2
 800916e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009172:	691a      	ldr	r2, [r3, #16]
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	6a1b      	ldr	r3, [r3, #32]
 8009178:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800917c:	69b9      	ldr	r1, [r7, #24]
 800917e:	0148      	lsls	r0, r1, #5
 8009180:	69f9      	ldr	r1, [r7, #28]
 8009182:	4401      	add	r1, r0
 8009184:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009188:	4313      	orrs	r3, r2
 800918a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800918c:	79fb      	ldrb	r3, [r7, #7]
 800918e:	2b01      	cmp	r3, #1
 8009190:	d10d      	bne.n	80091ae <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d009      	beq.n	80091ae <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	68d9      	ldr	r1, [r3, #12]
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	015a      	lsls	r2, r3, #5
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	4413      	add	r3, r2
 80091a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091aa:	460a      	mov	r2, r1
 80091ac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	791b      	ldrb	r3, [r3, #4]
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d128      	bne.n	8009208 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80091b6:	69fb      	ldr	r3, [r7, #28]
 80091b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d110      	bne.n	80091e8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	015a      	lsls	r2, r3, #5
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	4413      	add	r3, r2
 80091ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	69ba      	ldr	r2, [r7, #24]
 80091d6:	0151      	lsls	r1, r2, #5
 80091d8:	69fa      	ldr	r2, [r7, #28]
 80091da:	440a      	add	r2, r1
 80091dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80091e4:	6013      	str	r3, [r2, #0]
 80091e6:	e00f      	b.n	8009208 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80091e8:	69bb      	ldr	r3, [r7, #24]
 80091ea:	015a      	lsls	r2, r3, #5
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	4413      	add	r3, r2
 80091f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	69ba      	ldr	r2, [r7, #24]
 80091f8:	0151      	lsls	r1, r2, #5
 80091fa:	69fa      	ldr	r2, [r7, #28]
 80091fc:	440a      	add	r2, r1
 80091fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009202:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009206:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009208:	69bb      	ldr	r3, [r7, #24]
 800920a:	015a      	lsls	r2, r3, #5
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	4413      	add	r3, r2
 8009210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	69ba      	ldr	r2, [r7, #24]
 8009218:	0151      	lsls	r1, r2, #5
 800921a:	69fa      	ldr	r2, [r7, #28]
 800921c:	440a      	add	r2, r1
 800921e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009222:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009226:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3720      	adds	r7, #32
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	1ff80000 	.word	0x1ff80000

08009238 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009238:	b480      	push	{r7}
 800923a:	b087      	sub	sp, #28
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009242:	2300      	movs	r3, #0
 8009244:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009246:	2300      	movs	r3, #0
 8009248:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	785b      	ldrb	r3, [r3, #1]
 8009252:	2b01      	cmp	r3, #1
 8009254:	d14a      	bne.n	80092ec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	015a      	lsls	r2, r3, #5
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	4413      	add	r3, r2
 8009260:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800926a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800926e:	f040 8086 	bne.w	800937e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	015a      	lsls	r2, r3, #5
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	4413      	add	r3, r2
 800927c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	683a      	ldr	r2, [r7, #0]
 8009284:	7812      	ldrb	r2, [r2, #0]
 8009286:	0151      	lsls	r1, r2, #5
 8009288:	693a      	ldr	r2, [r7, #16]
 800928a:	440a      	add	r2, r1
 800928c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009290:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009294:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	015a      	lsls	r2, r3, #5
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	4413      	add	r3, r2
 80092a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	683a      	ldr	r2, [r7, #0]
 80092a8:	7812      	ldrb	r2, [r2, #0]
 80092aa:	0151      	lsls	r1, r2, #5
 80092ac:	693a      	ldr	r2, [r7, #16]
 80092ae:	440a      	add	r2, r1
 80092b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80092b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	3301      	adds	r3, #1
 80092be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d902      	bls.n	80092d0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	75fb      	strb	r3, [r7, #23]
          break;
 80092ce:	e056      	b.n	800937e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	015a      	lsls	r2, r3, #5
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	4413      	add	r3, r2
 80092da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80092e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80092e8:	d0e7      	beq.n	80092ba <USB_EPStopXfer+0x82>
 80092ea:	e048      	b.n	800937e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	015a      	lsls	r2, r3, #5
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	4413      	add	r3, r2
 80092f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009300:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009304:	d13b      	bne.n	800937e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	015a      	lsls	r2, r3, #5
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	4413      	add	r3, r2
 8009310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	683a      	ldr	r2, [r7, #0]
 8009318:	7812      	ldrb	r2, [r2, #0]
 800931a:	0151      	lsls	r1, r2, #5
 800931c:	693a      	ldr	r2, [r7, #16]
 800931e:	440a      	add	r2, r1
 8009320:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009324:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009328:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	015a      	lsls	r2, r3, #5
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	4413      	add	r3, r2
 8009334:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	683a      	ldr	r2, [r7, #0]
 800933c:	7812      	ldrb	r2, [r2, #0]
 800933e:	0151      	lsls	r1, r2, #5
 8009340:	693a      	ldr	r2, [r7, #16]
 8009342:	440a      	add	r2, r1
 8009344:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009348:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800934c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	3301      	adds	r3, #1
 8009352:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f242 7210 	movw	r2, #10000	@ 0x2710
 800935a:	4293      	cmp	r3, r2
 800935c:	d902      	bls.n	8009364 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	75fb      	strb	r3, [r7, #23]
          break;
 8009362:	e00c      	b.n	800937e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	015a      	lsls	r2, r3, #5
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	4413      	add	r3, r2
 800936e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009378:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800937c:	d0e7      	beq.n	800934e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800937e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009380:	4618      	mov	r0, r3
 8009382:	371c      	adds	r7, #28
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800938c:	b480      	push	{r7}
 800938e:	b089      	sub	sp, #36	@ 0x24
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	4611      	mov	r1, r2
 8009398:	461a      	mov	r2, r3
 800939a:	460b      	mov	r3, r1
 800939c:	71fb      	strb	r3, [r7, #7]
 800939e:	4613      	mov	r3, r2
 80093a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80093aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d123      	bne.n	80093fa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80093b2:	88bb      	ldrh	r3, [r7, #4]
 80093b4:	3303      	adds	r3, #3
 80093b6:	089b      	lsrs	r3, r3, #2
 80093b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80093ba:	2300      	movs	r3, #0
 80093bc:	61bb      	str	r3, [r7, #24]
 80093be:	e018      	b.n	80093f2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80093c0:	79fb      	ldrb	r3, [r7, #7]
 80093c2:	031a      	lsls	r2, r3, #12
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	4413      	add	r3, r2
 80093c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80093cc:	461a      	mov	r2, r3
 80093ce:	69fb      	ldr	r3, [r7, #28]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	3301      	adds	r3, #1
 80093d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	3301      	adds	r3, #1
 80093de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	3301      	adds	r3, #1
 80093e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80093e6:	69fb      	ldr	r3, [r7, #28]
 80093e8:	3301      	adds	r3, #1
 80093ea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	3301      	adds	r3, #1
 80093f0:	61bb      	str	r3, [r7, #24]
 80093f2:	69ba      	ldr	r2, [r7, #24]
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d3e2      	bcc.n	80093c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3724      	adds	r7, #36	@ 0x24
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009408:	b480      	push	{r7}
 800940a:	b08b      	sub	sp, #44	@ 0x2c
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	4613      	mov	r3, r2
 8009414:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800941e:	88fb      	ldrh	r3, [r7, #6]
 8009420:	089b      	lsrs	r3, r3, #2
 8009422:	b29b      	uxth	r3, r3
 8009424:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009426:	88fb      	ldrh	r3, [r7, #6]
 8009428:	f003 0303 	and.w	r3, r3, #3
 800942c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800942e:	2300      	movs	r3, #0
 8009430:	623b      	str	r3, [r7, #32]
 8009432:	e014      	b.n	800945e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800943e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009442:	3301      	adds	r3, #1
 8009444:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009448:	3301      	adds	r3, #1
 800944a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800944c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800944e:	3301      	adds	r3, #1
 8009450:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009454:	3301      	adds	r3, #1
 8009456:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009458:	6a3b      	ldr	r3, [r7, #32]
 800945a:	3301      	adds	r3, #1
 800945c:	623b      	str	r3, [r7, #32]
 800945e:	6a3a      	ldr	r2, [r7, #32]
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	429a      	cmp	r2, r3
 8009464:	d3e6      	bcc.n	8009434 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009466:	8bfb      	ldrh	r3, [r7, #30]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d01e      	beq.n	80094aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800946c:	2300      	movs	r3, #0
 800946e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009476:	461a      	mov	r2, r3
 8009478:	f107 0310 	add.w	r3, r7, #16
 800947c:	6812      	ldr	r2, [r2, #0]
 800947e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009480:	693a      	ldr	r2, [r7, #16]
 8009482:	6a3b      	ldr	r3, [r7, #32]
 8009484:	b2db      	uxtb	r3, r3
 8009486:	00db      	lsls	r3, r3, #3
 8009488:	fa22 f303 	lsr.w	r3, r2, r3
 800948c:	b2da      	uxtb	r2, r3
 800948e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009490:	701a      	strb	r2, [r3, #0]
      i++;
 8009492:	6a3b      	ldr	r3, [r7, #32]
 8009494:	3301      	adds	r3, #1
 8009496:	623b      	str	r3, [r7, #32]
      pDest++;
 8009498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800949a:	3301      	adds	r3, #1
 800949c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800949e:	8bfb      	ldrh	r3, [r7, #30]
 80094a0:	3b01      	subs	r3, #1
 80094a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80094a4:	8bfb      	ldrh	r3, [r7, #30]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d1ea      	bne.n	8009480 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80094aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	372c      	adds	r7, #44	@ 0x2c
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b085      	sub	sp, #20
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	785b      	ldrb	r3, [r3, #1]
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d12c      	bne.n	800952e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	015a      	lsls	r2, r3, #5
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	4413      	add	r3, r2
 80094dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	db12      	blt.n	800950c <USB_EPSetStall+0x54>
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d00f      	beq.n	800950c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	015a      	lsls	r2, r3, #5
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	4413      	add	r3, r2
 80094f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	68ba      	ldr	r2, [r7, #8]
 80094fc:	0151      	lsls	r1, r2, #5
 80094fe:	68fa      	ldr	r2, [r7, #12]
 8009500:	440a      	add	r2, r1
 8009502:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009506:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800950a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	015a      	lsls	r2, r3, #5
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	4413      	add	r3, r2
 8009514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	68ba      	ldr	r2, [r7, #8]
 800951c:	0151      	lsls	r1, r2, #5
 800951e:	68fa      	ldr	r2, [r7, #12]
 8009520:	440a      	add	r2, r1
 8009522:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009526:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800952a:	6013      	str	r3, [r2, #0]
 800952c:	e02b      	b.n	8009586 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	015a      	lsls	r2, r3, #5
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	4413      	add	r3, r2
 8009536:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	db12      	blt.n	8009566 <USB_EPSetStall+0xae>
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d00f      	beq.n	8009566 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	015a      	lsls	r2, r3, #5
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	4413      	add	r3, r2
 800954e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	68ba      	ldr	r2, [r7, #8]
 8009556:	0151      	lsls	r1, r2, #5
 8009558:	68fa      	ldr	r2, [r7, #12]
 800955a:	440a      	add	r2, r1
 800955c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009560:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009564:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	015a      	lsls	r2, r3, #5
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	4413      	add	r3, r2
 800956e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	68ba      	ldr	r2, [r7, #8]
 8009576:	0151      	lsls	r1, r2, #5
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	440a      	add	r2, r1
 800957c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009580:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009584:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009586:	2300      	movs	r3, #0
}
 8009588:	4618      	mov	r0, r3
 800958a:	3714      	adds	r7, #20
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009594:	b480      	push	{r7}
 8009596:	b085      	sub	sp, #20
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	785b      	ldrb	r3, [r3, #1]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d128      	bne.n	8009602 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	015a      	lsls	r2, r3, #5
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	4413      	add	r3, r2
 80095b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	68ba      	ldr	r2, [r7, #8]
 80095c0:	0151      	lsls	r1, r2, #5
 80095c2:	68fa      	ldr	r2, [r7, #12]
 80095c4:	440a      	add	r2, r1
 80095c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80095ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	791b      	ldrb	r3, [r3, #4]
 80095d4:	2b03      	cmp	r3, #3
 80095d6:	d003      	beq.n	80095e0 <USB_EPClearStall+0x4c>
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	791b      	ldrb	r3, [r3, #4]
 80095dc:	2b02      	cmp	r3, #2
 80095de:	d138      	bne.n	8009652 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	015a      	lsls	r2, r3, #5
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	4413      	add	r3, r2
 80095e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68ba      	ldr	r2, [r7, #8]
 80095f0:	0151      	lsls	r1, r2, #5
 80095f2:	68fa      	ldr	r2, [r7, #12]
 80095f4:	440a      	add	r2, r1
 80095f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80095fe:	6013      	str	r3, [r2, #0]
 8009600:	e027      	b.n	8009652 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	015a      	lsls	r2, r3, #5
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	4413      	add	r3, r2
 800960a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	68ba      	ldr	r2, [r7, #8]
 8009612:	0151      	lsls	r1, r2, #5
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	440a      	add	r2, r1
 8009618:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800961c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009620:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	791b      	ldrb	r3, [r3, #4]
 8009626:	2b03      	cmp	r3, #3
 8009628:	d003      	beq.n	8009632 <USB_EPClearStall+0x9e>
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	791b      	ldrb	r3, [r3, #4]
 800962e:	2b02      	cmp	r3, #2
 8009630:	d10f      	bne.n	8009652 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	015a      	lsls	r2, r3, #5
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	4413      	add	r3, r2
 800963a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	68ba      	ldr	r2, [r7, #8]
 8009642:	0151      	lsls	r1, r2, #5
 8009644:	68fa      	ldr	r2, [r7, #12]
 8009646:	440a      	add	r2, r1
 8009648:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800964c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009650:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009652:	2300      	movs	r3, #0
}
 8009654:	4618      	mov	r0, r3
 8009656:	3714      	adds	r7, #20
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009660:	b480      	push	{r7}
 8009662:	b085      	sub	sp, #20
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	460b      	mov	r3, r1
 800966a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	68fa      	ldr	r2, [r7, #12]
 800967a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800967e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009682:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	78fb      	ldrb	r3, [r7, #3]
 800968e:	011b      	lsls	r3, r3, #4
 8009690:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009694:	68f9      	ldr	r1, [r7, #12]
 8009696:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800969a:	4313      	orrs	r3, r2
 800969c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800969e:	2300      	movs	r3, #0
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3714      	adds	r7, #20
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b085      	sub	sp, #20
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	68fa      	ldr	r2, [r7, #12]
 80096c2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80096c6:	f023 0303 	bic.w	r3, r3, #3
 80096ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80096da:	f023 0302 	bic.w	r3, r3, #2
 80096de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80096e0:	2300      	movs	r3, #0
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3714      	adds	r7, #20
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr

080096ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80096ee:	b480      	push	{r7}
 80096f0:	b085      	sub	sp, #20
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009708:	f023 0303 	bic.w	r3, r3, #3
 800970c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	68fa      	ldr	r2, [r7, #12]
 8009718:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800971c:	f043 0302 	orr.w	r3, r3, #2
 8009720:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	3714      	adds	r7, #20
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009730:	b480      	push	{r7}
 8009732:	b085      	sub	sp, #20
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	695b      	ldr	r3, [r3, #20]
 800973c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	699b      	ldr	r3, [r3, #24]
 8009742:	68fa      	ldr	r2, [r7, #12]
 8009744:	4013      	ands	r3, r2
 8009746:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009748:	68fb      	ldr	r3, [r7, #12]
}
 800974a:	4618      	mov	r0, r3
 800974c:	3714      	adds	r7, #20
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr

08009756 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009756:	b480      	push	{r7}
 8009758:	b085      	sub	sp, #20
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009768:	699b      	ldr	r3, [r3, #24]
 800976a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009772:	69db      	ldr	r3, [r3, #28]
 8009774:	68ba      	ldr	r2, [r7, #8]
 8009776:	4013      	ands	r3, r2
 8009778:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	0c1b      	lsrs	r3, r3, #16
}
 800977e:	4618      	mov	r0, r3
 8009780:	3714      	adds	r7, #20
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr

0800978a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800978a:	b480      	push	{r7}
 800978c:	b085      	sub	sp, #20
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800979c:	699b      	ldr	r3, [r3, #24]
 800979e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097a6:	69db      	ldr	r3, [r3, #28]
 80097a8:	68ba      	ldr	r2, [r7, #8]
 80097aa:	4013      	ands	r3, r2
 80097ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	b29b      	uxth	r3, r3
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3714      	adds	r7, #20
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr

080097be <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80097be:	b480      	push	{r7}
 80097c0:	b085      	sub	sp, #20
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
 80097c6:	460b      	mov	r3, r1
 80097c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80097ce:	78fb      	ldrb	r3, [r7, #3]
 80097d0:	015a      	lsls	r2, r3, #5
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	4413      	add	r3, r2
 80097d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097e4:	695b      	ldr	r3, [r3, #20]
 80097e6:	68ba      	ldr	r2, [r7, #8]
 80097e8:	4013      	ands	r3, r2
 80097ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80097ec:	68bb      	ldr	r3, [r7, #8]
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3714      	adds	r7, #20
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr

080097fa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80097fa:	b480      	push	{r7}
 80097fc:	b087      	sub	sp, #28
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
 8009802:	460b      	mov	r3, r1
 8009804:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009810:	691b      	ldr	r3, [r3, #16]
 8009812:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800981a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800981c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800981e:	78fb      	ldrb	r3, [r7, #3]
 8009820:	f003 030f 	and.w	r3, r3, #15
 8009824:	68fa      	ldr	r2, [r7, #12]
 8009826:	fa22 f303 	lsr.w	r3, r2, r3
 800982a:	01db      	lsls	r3, r3, #7
 800982c:	b2db      	uxtb	r3, r3
 800982e:	693a      	ldr	r2, [r7, #16]
 8009830:	4313      	orrs	r3, r2
 8009832:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009834:	78fb      	ldrb	r3, [r7, #3]
 8009836:	015a      	lsls	r2, r3, #5
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	4413      	add	r3, r2
 800983c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	693a      	ldr	r2, [r7, #16]
 8009844:	4013      	ands	r3, r2
 8009846:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009848:	68bb      	ldr	r3, [r7, #8]
}
 800984a:	4618      	mov	r0, r3
 800984c:	371c      	adds	r7, #28
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr

08009856 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009856:	b480      	push	{r7}
 8009858:	b083      	sub	sp, #12
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	695b      	ldr	r3, [r3, #20]
 8009862:	f003 0301 	and.w	r3, r3, #1
}
 8009866:	4618      	mov	r0, r3
 8009868:	370c      	adds	r7, #12
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr

08009872 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009872:	b480      	push	{r7}
 8009874:	b085      	sub	sp, #20
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	68fa      	ldr	r2, [r7, #12]
 8009888:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800988c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009890:	f023 0307 	bic.w	r3, r3, #7
 8009894:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	68fa      	ldr	r2, [r7, #12]
 80098a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80098a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80098a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3714      	adds	r7, #20
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b087      	sub	sp, #28
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	460b      	mov	r3, r1
 80098c2:	607a      	str	r2, [r7, #4]
 80098c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	333c      	adds	r3, #60	@ 0x3c
 80098ce:	3304      	adds	r3, #4
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	4a26      	ldr	r2, [pc, #152]	@ (8009970 <USB_EP0_OutStart+0xb8>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d90a      	bls.n	80098f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80098e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80098ec:	d101      	bne.n	80098f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80098ee:	2300      	movs	r3, #0
 80098f0:	e037      	b.n	8009962 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098f8:	461a      	mov	r2, r3
 80098fa:	2300      	movs	r3, #0
 80098fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	697a      	ldr	r2, [r7, #20]
 8009908:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800990c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009910:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009918:	691b      	ldr	r3, [r3, #16]
 800991a:	697a      	ldr	r2, [r7, #20]
 800991c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009920:	f043 0318 	orr.w	r3, r3, #24
 8009924:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800992c:	691b      	ldr	r3, [r3, #16]
 800992e:	697a      	ldr	r2, [r7, #20]
 8009930:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009934:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009938:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800993a:	7afb      	ldrb	r3, [r7, #11]
 800993c:	2b01      	cmp	r3, #1
 800993e:	d10f      	bne.n	8009960 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009946:	461a      	mov	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	697a      	ldr	r2, [r7, #20]
 8009956:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800995a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800995e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	371c      	adds	r7, #28
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	4f54300a 	.word	0x4f54300a

08009974 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009974:	b480      	push	{r7}
 8009976:	b085      	sub	sp, #20
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800997c:	2300      	movs	r3, #0
 800997e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	3301      	adds	r3, #1
 8009984:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800998c:	d901      	bls.n	8009992 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800998e:	2303      	movs	r3, #3
 8009990:	e022      	b.n	80099d8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	691b      	ldr	r3, [r3, #16]
 8009996:	2b00      	cmp	r3, #0
 8009998:	daf2      	bge.n	8009980 <USB_CoreReset+0xc>

  count = 10U;
 800999a:	230a      	movs	r3, #10
 800999c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800999e:	e002      	b.n	80099a6 <USB_CoreReset+0x32>
  {
    count--;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	3b01      	subs	r3, #1
 80099a4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1f9      	bne.n	80099a0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	691b      	ldr	r3, [r3, #16]
 80099b0:	f043 0201 	orr.w	r2, r3, #1
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	3301      	adds	r3, #1
 80099bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80099c4:	d901      	bls.n	80099ca <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80099c6:	2303      	movs	r3, #3
 80099c8:	e006      	b.n	80099d8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	691b      	ldr	r3, [r3, #16]
 80099ce:	f003 0301 	and.w	r3, r3, #1
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d0f0      	beq.n	80099b8 <USB_CoreReset+0x44>

  return HAL_OK;
 80099d6:	2300      	movs	r3, #0
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3714      	adds	r7, #20
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	460b      	mov	r3, r1
 80099ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80099f0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80099f4:	f005 fb34 	bl	800f060 <USBD_static_malloc>
 80099f8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d109      	bne.n	8009a14 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	32b0      	adds	r2, #176	@ 0xb0
 8009a0a:	2100      	movs	r1, #0
 8009a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009a10:	2302      	movs	r3, #2
 8009a12:	e0d4      	b.n	8009bbe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009a14:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009a18:	2100      	movs	r1, #0
 8009a1a:	68f8      	ldr	r0, [r7, #12]
 8009a1c:	f006 f9eb 	bl	800fdf6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	32b0      	adds	r2, #176	@ 0xb0
 8009a2a:	68f9      	ldr	r1, [r7, #12]
 8009a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	32b0      	adds	r2, #176	@ 0xb0
 8009a3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	7c1b      	ldrb	r3, [r3, #16]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d138      	bne.n	8009abe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009a4c:	4b5e      	ldr	r3, [pc, #376]	@ (8009bc8 <USBD_CDC_Init+0x1e4>)
 8009a4e:	7819      	ldrb	r1, [r3, #0]
 8009a50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a54:	2202      	movs	r2, #2
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f005 f9df 	bl	800ee1a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009a5c:	4b5a      	ldr	r3, [pc, #360]	@ (8009bc8 <USBD_CDC_Init+0x1e4>)
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	f003 020f 	and.w	r2, r3, #15
 8009a64:	6879      	ldr	r1, [r7, #4]
 8009a66:	4613      	mov	r3, r2
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	4413      	add	r3, r2
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	440b      	add	r3, r1
 8009a70:	3323      	adds	r3, #35	@ 0x23
 8009a72:	2201      	movs	r2, #1
 8009a74:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009a76:	4b55      	ldr	r3, [pc, #340]	@ (8009bcc <USBD_CDC_Init+0x1e8>)
 8009a78:	7819      	ldrb	r1, [r3, #0]
 8009a7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a7e:	2202      	movs	r2, #2
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f005 f9ca 	bl	800ee1a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009a86:	4b51      	ldr	r3, [pc, #324]	@ (8009bcc <USBD_CDC_Init+0x1e8>)
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	f003 020f 	and.w	r2, r3, #15
 8009a8e:	6879      	ldr	r1, [r7, #4]
 8009a90:	4613      	mov	r3, r2
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	4413      	add	r3, r2
 8009a96:	009b      	lsls	r3, r3, #2
 8009a98:	440b      	add	r3, r1
 8009a9a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009aa2:	4b4b      	ldr	r3, [pc, #300]	@ (8009bd0 <USBD_CDC_Init+0x1ec>)
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	f003 020f 	and.w	r2, r3, #15
 8009aaa:	6879      	ldr	r1, [r7, #4]
 8009aac:	4613      	mov	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4413      	add	r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	440b      	add	r3, r1
 8009ab6:	331c      	adds	r3, #28
 8009ab8:	2210      	movs	r2, #16
 8009aba:	601a      	str	r2, [r3, #0]
 8009abc:	e035      	b.n	8009b2a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009abe:	4b42      	ldr	r3, [pc, #264]	@ (8009bc8 <USBD_CDC_Init+0x1e4>)
 8009ac0:	7819      	ldrb	r1, [r3, #0]
 8009ac2:	2340      	movs	r3, #64	@ 0x40
 8009ac4:	2202      	movs	r2, #2
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f005 f9a7 	bl	800ee1a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009acc:	4b3e      	ldr	r3, [pc, #248]	@ (8009bc8 <USBD_CDC_Init+0x1e4>)
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	f003 020f 	and.w	r2, r3, #15
 8009ad4:	6879      	ldr	r1, [r7, #4]
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	4413      	add	r3, r2
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	440b      	add	r3, r1
 8009ae0:	3323      	adds	r3, #35	@ 0x23
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009ae6:	4b39      	ldr	r3, [pc, #228]	@ (8009bcc <USBD_CDC_Init+0x1e8>)
 8009ae8:	7819      	ldrb	r1, [r3, #0]
 8009aea:	2340      	movs	r3, #64	@ 0x40
 8009aec:	2202      	movs	r2, #2
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f005 f993 	bl	800ee1a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009af4:	4b35      	ldr	r3, [pc, #212]	@ (8009bcc <USBD_CDC_Init+0x1e8>)
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	f003 020f 	and.w	r2, r3, #15
 8009afc:	6879      	ldr	r1, [r7, #4]
 8009afe:	4613      	mov	r3, r2
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	4413      	add	r3, r2
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	440b      	add	r3, r1
 8009b08:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009b10:	4b2f      	ldr	r3, [pc, #188]	@ (8009bd0 <USBD_CDC_Init+0x1ec>)
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	f003 020f 	and.w	r2, r3, #15
 8009b18:	6879      	ldr	r1, [r7, #4]
 8009b1a:	4613      	mov	r3, r2
 8009b1c:	009b      	lsls	r3, r3, #2
 8009b1e:	4413      	add	r3, r2
 8009b20:	009b      	lsls	r3, r3, #2
 8009b22:	440b      	add	r3, r1
 8009b24:	331c      	adds	r3, #28
 8009b26:	2210      	movs	r2, #16
 8009b28:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009b2a:	4b29      	ldr	r3, [pc, #164]	@ (8009bd0 <USBD_CDC_Init+0x1ec>)
 8009b2c:	7819      	ldrb	r1, [r3, #0]
 8009b2e:	2308      	movs	r3, #8
 8009b30:	2203      	movs	r2, #3
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f005 f971 	bl	800ee1a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009b38:	4b25      	ldr	r3, [pc, #148]	@ (8009bd0 <USBD_CDC_Init+0x1ec>)
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	f003 020f 	and.w	r2, r3, #15
 8009b40:	6879      	ldr	r1, [r7, #4]
 8009b42:	4613      	mov	r3, r2
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	4413      	add	r3, r2
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	440b      	add	r3, r1
 8009b4c:	3323      	adds	r3, #35	@ 0x23
 8009b4e:	2201      	movs	r2, #1
 8009b50:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2200      	movs	r2, #0
 8009b56:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	33b0      	adds	r3, #176	@ 0xb0
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	4413      	add	r3, r2
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2200      	movs	r2, #0
 8009b72:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d101      	bne.n	8009b8c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009b88:	2302      	movs	r3, #2
 8009b8a:	e018      	b.n	8009bbe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	7c1b      	ldrb	r3, [r3, #16]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d10a      	bne.n	8009baa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009b94:	4b0d      	ldr	r3, [pc, #52]	@ (8009bcc <USBD_CDC_Init+0x1e8>)
 8009b96:	7819      	ldrb	r1, [r3, #0]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009b9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f005 fa28 	bl	800eff8 <USBD_LL_PrepareReceive>
 8009ba8:	e008      	b.n	8009bbc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009baa:	4b08      	ldr	r3, [pc, #32]	@ (8009bcc <USBD_CDC_Init+0x1e8>)
 8009bac:	7819      	ldrb	r1, [r3, #0]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009bb4:	2340      	movs	r3, #64	@ 0x40
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f005 fa1e 	bl	800eff8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009bbc:	2300      	movs	r3, #0
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	20000123 	.word	0x20000123
 8009bcc:	20000124 	.word	0x20000124
 8009bd0:	20000125 	.word	0x20000125

08009bd4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	460b      	mov	r3, r1
 8009bde:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009be0:	4b3a      	ldr	r3, [pc, #232]	@ (8009ccc <USBD_CDC_DeInit+0xf8>)
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	4619      	mov	r1, r3
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f005 f93d 	bl	800ee66 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009bec:	4b37      	ldr	r3, [pc, #220]	@ (8009ccc <USBD_CDC_DeInit+0xf8>)
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	f003 020f 	and.w	r2, r3, #15
 8009bf4:	6879      	ldr	r1, [r7, #4]
 8009bf6:	4613      	mov	r3, r2
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	4413      	add	r3, r2
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	440b      	add	r3, r1
 8009c00:	3323      	adds	r3, #35	@ 0x23
 8009c02:	2200      	movs	r2, #0
 8009c04:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009c06:	4b32      	ldr	r3, [pc, #200]	@ (8009cd0 <USBD_CDC_DeInit+0xfc>)
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f005 f92a 	bl	800ee66 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009c12:	4b2f      	ldr	r3, [pc, #188]	@ (8009cd0 <USBD_CDC_DeInit+0xfc>)
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	f003 020f 	and.w	r2, r3, #15
 8009c1a:	6879      	ldr	r1, [r7, #4]
 8009c1c:	4613      	mov	r3, r2
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	4413      	add	r3, r2
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	440b      	add	r3, r1
 8009c26:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009c2e:	4b29      	ldr	r3, [pc, #164]	@ (8009cd4 <USBD_CDC_DeInit+0x100>)
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	4619      	mov	r1, r3
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f005 f916 	bl	800ee66 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009c3a:	4b26      	ldr	r3, [pc, #152]	@ (8009cd4 <USBD_CDC_DeInit+0x100>)
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	f003 020f 	and.w	r2, r3, #15
 8009c42:	6879      	ldr	r1, [r7, #4]
 8009c44:	4613      	mov	r3, r2
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	4413      	add	r3, r2
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	440b      	add	r3, r1
 8009c4e:	3323      	adds	r3, #35	@ 0x23
 8009c50:	2200      	movs	r2, #0
 8009c52:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009c54:	4b1f      	ldr	r3, [pc, #124]	@ (8009cd4 <USBD_CDC_DeInit+0x100>)
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	f003 020f 	and.w	r2, r3, #15
 8009c5c:	6879      	ldr	r1, [r7, #4]
 8009c5e:	4613      	mov	r3, r2
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	4413      	add	r3, r2
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	440b      	add	r3, r1
 8009c68:	331c      	adds	r3, #28
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	32b0      	adds	r2, #176	@ 0xb0
 8009c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d01f      	beq.n	8009cc0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	33b0      	adds	r3, #176	@ 0xb0
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	4413      	add	r3, r2
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	32b0      	adds	r2, #176	@ 0xb0
 8009c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f005 f9ea 	bl	800f07c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	32b0      	adds	r2, #176	@ 0xb0
 8009cb2:	2100      	movs	r1, #0
 8009cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009cc0:	2300      	movs	r3, #0
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3708      	adds	r7, #8
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	20000123 	.word	0x20000123
 8009cd0:	20000124 	.word	0x20000124
 8009cd4:	20000125 	.word	0x20000125

08009cd8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b086      	sub	sp, #24
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	32b0      	adds	r2, #176	@ 0xb0
 8009cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cf0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d101      	bne.n	8009d08 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009d04:	2303      	movs	r3, #3
 8009d06:	e0bf      	b.n	8009e88 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d050      	beq.n	8009db6 <USBD_CDC_Setup+0xde>
 8009d14:	2b20      	cmp	r3, #32
 8009d16:	f040 80af 	bne.w	8009e78 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	88db      	ldrh	r3, [r3, #6]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d03a      	beq.n	8009d98 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	b25b      	sxtb	r3, r3
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	da1b      	bge.n	8009d64 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	33b0      	adds	r3, #176	@ 0xb0
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	4413      	add	r3, r2
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	683a      	ldr	r2, [r7, #0]
 8009d40:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009d42:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009d44:	683a      	ldr	r2, [r7, #0]
 8009d46:	88d2      	ldrh	r2, [r2, #6]
 8009d48:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	88db      	ldrh	r3, [r3, #6]
 8009d4e:	2b07      	cmp	r3, #7
 8009d50:	bf28      	it	cs
 8009d52:	2307      	movcs	r3, #7
 8009d54:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	89fa      	ldrh	r2, [r7, #14]
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f001 fda9 	bl	800b8b4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009d62:	e090      	b.n	8009e86 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	785a      	ldrb	r2, [r3, #1]
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	88db      	ldrh	r3, [r3, #6]
 8009d72:	2b3f      	cmp	r3, #63	@ 0x3f
 8009d74:	d803      	bhi.n	8009d7e <USBD_CDC_Setup+0xa6>
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	88db      	ldrh	r3, [r3, #6]
 8009d7a:	b2da      	uxtb	r2, r3
 8009d7c:	e000      	b.n	8009d80 <USBD_CDC_Setup+0xa8>
 8009d7e:	2240      	movs	r2, #64	@ 0x40
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009d86:	6939      	ldr	r1, [r7, #16]
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009d8e:	461a      	mov	r2, r3
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f001 fdbe 	bl	800b912 <USBD_CtlPrepareRx>
      break;
 8009d96:	e076      	b.n	8009e86 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	33b0      	adds	r3, #176	@ 0xb0
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	4413      	add	r3, r2
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	683a      	ldr	r2, [r7, #0]
 8009dac:	7850      	ldrb	r0, [r2, #1]
 8009dae:	2200      	movs	r2, #0
 8009db0:	6839      	ldr	r1, [r7, #0]
 8009db2:	4798      	blx	r3
      break;
 8009db4:	e067      	b.n	8009e86 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	785b      	ldrb	r3, [r3, #1]
 8009dba:	2b0b      	cmp	r3, #11
 8009dbc:	d851      	bhi.n	8009e62 <USBD_CDC_Setup+0x18a>
 8009dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8009dc4 <USBD_CDC_Setup+0xec>)
 8009dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc4:	08009df5 	.word	0x08009df5
 8009dc8:	08009e71 	.word	0x08009e71
 8009dcc:	08009e63 	.word	0x08009e63
 8009dd0:	08009e63 	.word	0x08009e63
 8009dd4:	08009e63 	.word	0x08009e63
 8009dd8:	08009e63 	.word	0x08009e63
 8009ddc:	08009e63 	.word	0x08009e63
 8009de0:	08009e63 	.word	0x08009e63
 8009de4:	08009e63 	.word	0x08009e63
 8009de8:	08009e63 	.word	0x08009e63
 8009dec:	08009e1f 	.word	0x08009e1f
 8009df0:	08009e49 	.word	0x08009e49
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	2b03      	cmp	r3, #3
 8009dfe:	d107      	bne.n	8009e10 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009e00:	f107 030a 	add.w	r3, r7, #10
 8009e04:	2202      	movs	r2, #2
 8009e06:	4619      	mov	r1, r3
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f001 fd53 	bl	800b8b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e0e:	e032      	b.n	8009e76 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009e10:	6839      	ldr	r1, [r7, #0]
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f001 fcd1 	bl	800b7ba <USBD_CtlError>
            ret = USBD_FAIL;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	75fb      	strb	r3, [r7, #23]
          break;
 8009e1c:	e02b      	b.n	8009e76 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	2b03      	cmp	r3, #3
 8009e28:	d107      	bne.n	8009e3a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009e2a:	f107 030d 	add.w	r3, r7, #13
 8009e2e:	2201      	movs	r2, #1
 8009e30:	4619      	mov	r1, r3
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f001 fd3e 	bl	800b8b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e38:	e01d      	b.n	8009e76 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009e3a:	6839      	ldr	r1, [r7, #0]
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f001 fcbc 	bl	800b7ba <USBD_CtlError>
            ret = USBD_FAIL;
 8009e42:	2303      	movs	r3, #3
 8009e44:	75fb      	strb	r3, [r7, #23]
          break;
 8009e46:	e016      	b.n	8009e76 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	2b03      	cmp	r3, #3
 8009e52:	d00f      	beq.n	8009e74 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009e54:	6839      	ldr	r1, [r7, #0]
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f001 fcaf 	bl	800b7ba <USBD_CtlError>
            ret = USBD_FAIL;
 8009e5c:	2303      	movs	r3, #3
 8009e5e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009e60:	e008      	b.n	8009e74 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009e62:	6839      	ldr	r1, [r7, #0]
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f001 fca8 	bl	800b7ba <USBD_CtlError>
          ret = USBD_FAIL;
 8009e6a:	2303      	movs	r3, #3
 8009e6c:	75fb      	strb	r3, [r7, #23]
          break;
 8009e6e:	e002      	b.n	8009e76 <USBD_CDC_Setup+0x19e>
          break;
 8009e70:	bf00      	nop
 8009e72:	e008      	b.n	8009e86 <USBD_CDC_Setup+0x1ae>
          break;
 8009e74:	bf00      	nop
      }
      break;
 8009e76:	e006      	b.n	8009e86 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009e78:	6839      	ldr	r1, [r7, #0]
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f001 fc9d 	bl	800b7ba <USBD_CtlError>
      ret = USBD_FAIL;
 8009e80:	2303      	movs	r3, #3
 8009e82:	75fb      	strb	r3, [r7, #23]
      break;
 8009e84:	bf00      	nop
  }

  return (uint8_t)ret;
 8009e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3718      	adds	r7, #24
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	460b      	mov	r3, r1
 8009e9a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009ea2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	32b0      	adds	r2, #176	@ 0xb0
 8009eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d101      	bne.n	8009eba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009eb6:	2303      	movs	r3, #3
 8009eb8:	e065      	b.n	8009f86 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	32b0      	adds	r2, #176	@ 0xb0
 8009ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ec8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009eca:	78fb      	ldrb	r3, [r7, #3]
 8009ecc:	f003 020f 	and.w	r2, r3, #15
 8009ed0:	6879      	ldr	r1, [r7, #4]
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	4413      	add	r3, r2
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	440b      	add	r3, r1
 8009edc:	3314      	adds	r3, #20
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d02f      	beq.n	8009f44 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009ee4:	78fb      	ldrb	r3, [r7, #3]
 8009ee6:	f003 020f 	and.w	r2, r3, #15
 8009eea:	6879      	ldr	r1, [r7, #4]
 8009eec:	4613      	mov	r3, r2
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	4413      	add	r3, r2
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	440b      	add	r3, r1
 8009ef6:	3314      	adds	r3, #20
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	78fb      	ldrb	r3, [r7, #3]
 8009efc:	f003 010f 	and.w	r1, r3, #15
 8009f00:	68f8      	ldr	r0, [r7, #12]
 8009f02:	460b      	mov	r3, r1
 8009f04:	00db      	lsls	r3, r3, #3
 8009f06:	440b      	add	r3, r1
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	4403      	add	r3, r0
 8009f0c:	331c      	adds	r3, #28
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	fbb2 f1f3 	udiv	r1, r2, r3
 8009f14:	fb01 f303 	mul.w	r3, r1, r3
 8009f18:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d112      	bne.n	8009f44 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009f1e:	78fb      	ldrb	r3, [r7, #3]
 8009f20:	f003 020f 	and.w	r2, r3, #15
 8009f24:	6879      	ldr	r1, [r7, #4]
 8009f26:	4613      	mov	r3, r2
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	4413      	add	r3, r2
 8009f2c:	009b      	lsls	r3, r3, #2
 8009f2e:	440b      	add	r3, r1
 8009f30:	3314      	adds	r3, #20
 8009f32:	2200      	movs	r2, #0
 8009f34:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009f36:	78f9      	ldrb	r1, [r7, #3]
 8009f38:	2300      	movs	r3, #0
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f005 f83a 	bl	800efb6 <USBD_LL_Transmit>
 8009f42:	e01f      	b.n	8009f84 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	2200      	movs	r2, #0
 8009f48:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	33b0      	adds	r3, #176	@ 0xb0
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	4413      	add	r3, r2
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	691b      	ldr	r3, [r3, #16]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d010      	beq.n	8009f84 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	33b0      	adds	r3, #176	@ 0xb0
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	4413      	add	r3, r2
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	691b      	ldr	r3, [r3, #16]
 8009f74:	68ba      	ldr	r2, [r7, #8]
 8009f76:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009f7a:	68ba      	ldr	r2, [r7, #8]
 8009f7c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009f80:	78fa      	ldrb	r2, [r7, #3]
 8009f82:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3710      	adds	r7, #16
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}

08009f8e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f8e:	b580      	push	{r7, lr}
 8009f90:	b084      	sub	sp, #16
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
 8009f96:	460b      	mov	r3, r1
 8009f98:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	32b0      	adds	r2, #176	@ 0xb0
 8009fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fa8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	32b0      	adds	r2, #176	@ 0xb0
 8009fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d101      	bne.n	8009fc0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009fbc:	2303      	movs	r3, #3
 8009fbe:	e01a      	b.n	8009ff6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009fc0:	78fb      	ldrb	r3, [r7, #3]
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f005 f838 	bl	800f03a <USBD_LL_GetRxDataSize>
 8009fca:	4602      	mov	r2, r0
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	33b0      	adds	r3, #176	@ 0xb0
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	4413      	add	r3, r2
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009fea:	68fa      	ldr	r2, [r7, #12]
 8009fec:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009ff0:	4611      	mov	r1, r2
 8009ff2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009ff4:	2300      	movs	r3, #0
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3710      	adds	r7, #16
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}

08009ffe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b084      	sub	sp, #16
 800a002:	af00      	add	r7, sp, #0
 800a004:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	32b0      	adds	r2, #176	@ 0xb0
 800a010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a014:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d101      	bne.n	800a020 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a01c:	2303      	movs	r3, #3
 800a01e:	e024      	b.n	800a06a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	33b0      	adds	r3, #176	@ 0xb0
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	4413      	add	r3, r2
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d019      	beq.n	800a068 <USBD_CDC_EP0_RxReady+0x6a>
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a03a:	2bff      	cmp	r3, #255	@ 0xff
 800a03c:	d014      	beq.n	800a068 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	33b0      	adds	r3, #176	@ 0xb0
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	4413      	add	r3, r2
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	68fa      	ldr	r2, [r7, #12]
 800a052:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a056:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a05e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	22ff      	movs	r2, #255	@ 0xff
 800a064:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a068:	2300      	movs	r3, #0
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3710      	adds	r7, #16
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
	...

0800a074 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b086      	sub	sp, #24
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a07c:	2182      	movs	r1, #130	@ 0x82
 800a07e:	4818      	ldr	r0, [pc, #96]	@ (800a0e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a080:	f000 fd62 	bl	800ab48 <USBD_GetEpDesc>
 800a084:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a086:	2101      	movs	r1, #1
 800a088:	4815      	ldr	r0, [pc, #84]	@ (800a0e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a08a:	f000 fd5d 	bl	800ab48 <USBD_GetEpDesc>
 800a08e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a090:	2181      	movs	r1, #129	@ 0x81
 800a092:	4813      	ldr	r0, [pc, #76]	@ (800a0e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a094:	f000 fd58 	bl	800ab48 <USBD_GetEpDesc>
 800a098:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d002      	beq.n	800a0a6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	2210      	movs	r2, #16
 800a0a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d006      	beq.n	800a0ba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a0b4:	711a      	strb	r2, [r3, #4]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d006      	beq.n	800a0ce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a0c8:	711a      	strb	r2, [r3, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2243      	movs	r2, #67	@ 0x43
 800a0d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a0d4:	4b02      	ldr	r3, [pc, #8]	@ (800a0e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3718      	adds	r7, #24
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	200000e0 	.word	0x200000e0

0800a0e4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b086      	sub	sp, #24
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a0ec:	2182      	movs	r1, #130	@ 0x82
 800a0ee:	4818      	ldr	r0, [pc, #96]	@ (800a150 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a0f0:	f000 fd2a 	bl	800ab48 <USBD_GetEpDesc>
 800a0f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a0f6:	2101      	movs	r1, #1
 800a0f8:	4815      	ldr	r0, [pc, #84]	@ (800a150 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a0fa:	f000 fd25 	bl	800ab48 <USBD_GetEpDesc>
 800a0fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a100:	2181      	movs	r1, #129	@ 0x81
 800a102:	4813      	ldr	r0, [pc, #76]	@ (800a150 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a104:	f000 fd20 	bl	800ab48 <USBD_GetEpDesc>
 800a108:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d002      	beq.n	800a116 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	2210      	movs	r2, #16
 800a114:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d006      	beq.n	800a12a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	2200      	movs	r2, #0
 800a120:	711a      	strb	r2, [r3, #4]
 800a122:	2200      	movs	r2, #0
 800a124:	f042 0202 	orr.w	r2, r2, #2
 800a128:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d006      	beq.n	800a13e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2200      	movs	r2, #0
 800a134:	711a      	strb	r2, [r3, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	f042 0202 	orr.w	r2, r2, #2
 800a13c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2243      	movs	r2, #67	@ 0x43
 800a142:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a144:	4b02      	ldr	r3, [pc, #8]	@ (800a150 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a146:	4618      	mov	r0, r3
 800a148:	3718      	adds	r7, #24
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	200000e0 	.word	0x200000e0

0800a154 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b086      	sub	sp, #24
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a15c:	2182      	movs	r1, #130	@ 0x82
 800a15e:	4818      	ldr	r0, [pc, #96]	@ (800a1c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a160:	f000 fcf2 	bl	800ab48 <USBD_GetEpDesc>
 800a164:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a166:	2101      	movs	r1, #1
 800a168:	4815      	ldr	r0, [pc, #84]	@ (800a1c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a16a:	f000 fced 	bl	800ab48 <USBD_GetEpDesc>
 800a16e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a170:	2181      	movs	r1, #129	@ 0x81
 800a172:	4813      	ldr	r0, [pc, #76]	@ (800a1c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a174:	f000 fce8 	bl	800ab48 <USBD_GetEpDesc>
 800a178:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d002      	beq.n	800a186 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	2210      	movs	r2, #16
 800a184:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d006      	beq.n	800a19a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	2200      	movs	r2, #0
 800a190:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a194:	711a      	strb	r2, [r3, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d006      	beq.n	800a1ae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a1a8:	711a      	strb	r2, [r3, #4]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2243      	movs	r2, #67	@ 0x43
 800a1b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a1b4:	4b02      	ldr	r3, [pc, #8]	@ (800a1c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3718      	adds	r7, #24
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	200000e0 	.word	0x200000e0

0800a1c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	220a      	movs	r2, #10
 800a1d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a1d2:	4b03      	ldr	r3, [pc, #12]	@ (800a1e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	370c      	adds	r7, #12
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr
 800a1e0:	2000009c 	.word	0x2000009c

0800a1e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d101      	bne.n	800a1f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a1f4:	2303      	movs	r3, #3
 800a1f6:	e009      	b.n	800a20c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	33b0      	adds	r3, #176	@ 0xb0
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	4413      	add	r3, r2
 800a206:	683a      	ldr	r2, [r7, #0]
 800a208:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a218:	b480      	push	{r7}
 800a21a:	b087      	sub	sp, #28
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	32b0      	adds	r2, #176	@ 0xb0
 800a22e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a232:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d101      	bne.n	800a23e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a23a:	2303      	movs	r3, #3
 800a23c:	e008      	b.n	800a250 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	68ba      	ldr	r2, [r7, #8]
 800a242:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	687a      	ldr	r2, [r7, #4]
 800a24a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a24e:	2300      	movs	r3, #0
}
 800a250:	4618      	mov	r0, r3
 800a252:	371c      	adds	r7, #28
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr

0800a25c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b085      	sub	sp, #20
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	32b0      	adds	r2, #176	@ 0xb0
 800a270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a274:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d101      	bne.n	800a280 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a27c:	2303      	movs	r3, #3
 800a27e:	e004      	b.n	800a28a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	683a      	ldr	r2, [r7, #0]
 800a284:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a288:	2300      	movs	r3, #0
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3714      	adds	r7, #20
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr
	...

0800a298 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	32b0      	adds	r2, #176	@ 0xb0
 800a2aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2ae:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d101      	bne.n	800a2be <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	e025      	b.n	800a30a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d11f      	bne.n	800a308 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a2d0:	4b10      	ldr	r3, [pc, #64]	@ (800a314 <USBD_CDC_TransmitPacket+0x7c>)
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	f003 020f 	and.w	r2, r3, #15
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	4613      	mov	r3, r2
 800a2e2:	009b      	lsls	r3, r3, #2
 800a2e4:	4413      	add	r3, r2
 800a2e6:	009b      	lsls	r3, r3, #2
 800a2e8:	4403      	add	r3, r0
 800a2ea:	3314      	adds	r3, #20
 800a2ec:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a2ee:	4b09      	ldr	r3, [pc, #36]	@ (800a314 <USBD_CDC_TransmitPacket+0x7c>)
 800a2f0:	7819      	ldrb	r1, [r3, #0]
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f004 fe59 	bl	800efb6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a304:	2300      	movs	r3, #0
 800a306:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a308:	7bfb      	ldrb	r3, [r7, #15]
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3710      	adds	r7, #16
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
 800a312:	bf00      	nop
 800a314:	20000123 	.word	0x20000123

0800a318 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	32b0      	adds	r2, #176	@ 0xb0
 800a32a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a32e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	32b0      	adds	r2, #176	@ 0xb0
 800a33a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d101      	bne.n	800a346 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a342:	2303      	movs	r3, #3
 800a344:	e018      	b.n	800a378 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	7c1b      	ldrb	r3, [r3, #16]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d10a      	bne.n	800a364 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a34e:	4b0c      	ldr	r3, [pc, #48]	@ (800a380 <USBD_CDC_ReceivePacket+0x68>)
 800a350:	7819      	ldrb	r1, [r3, #0]
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a358:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f004 fe4b 	bl	800eff8 <USBD_LL_PrepareReceive>
 800a362:	e008      	b.n	800a376 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a364:	4b06      	ldr	r3, [pc, #24]	@ (800a380 <USBD_CDC_ReceivePacket+0x68>)
 800a366:	7819      	ldrb	r1, [r3, #0]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a36e:	2340      	movs	r3, #64	@ 0x40
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f004 fe41 	bl	800eff8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a376:	2300      	movs	r3, #0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3710      	adds	r7, #16
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	20000124 	.word	0x20000124

0800a384 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b086      	sub	sp, #24
 800a388:	af00      	add	r7, sp, #0
 800a38a:	60f8      	str	r0, [r7, #12]
 800a38c:	60b9      	str	r1, [r7, #8]
 800a38e:	4613      	mov	r3, r2
 800a390:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d101      	bne.n	800a39c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a398:	2303      	movs	r3, #3
 800a39a:	e01f      	b.n	800a3dc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d003      	beq.n	800a3c2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	68ba      	ldr	r2, [r7, #8]
 800a3be:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	79fa      	ldrb	r2, [r7, #7]
 800a3ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a3d0:	68f8      	ldr	r0, [r7, #12]
 800a3d2:	f004 fcbb 	bl	800ed4c <USBD_LL_Init>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a3da:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3718      	adds	r7, #24
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d101      	bne.n	800a3fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a3f8:	2303      	movs	r3, #3
 800a3fa:	e025      	b.n	800a448 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	683a      	ldr	r2, [r7, #0]
 800a400:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	32ae      	adds	r2, #174	@ 0xae
 800a40e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a414:	2b00      	cmp	r3, #0
 800a416:	d00f      	beq.n	800a438 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	32ae      	adds	r2, #174	@ 0xae
 800a422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a428:	f107 020e 	add.w	r2, r7, #14
 800a42c:	4610      	mov	r0, r2
 800a42e:	4798      	blx	r3
 800a430:	4602      	mov	r2, r0
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a43e:	1c5a      	adds	r2, r3, #1
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a446:	2300      	movs	r3, #0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3710      	adds	r7, #16
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f004 fcc3 	bl	800ede4 <USBD_LL_Start>
 800a45e:	4603      	mov	r3, r0
}
 800a460:	4618      	mov	r0, r3
 800a462:	3708      	adds	r7, #8
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a468:	b480      	push	{r7}
 800a46a:	b083      	sub	sp, #12
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a470:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a472:	4618      	mov	r0, r3
 800a474:	370c      	adds	r7, #12
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr

0800a47e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a47e:	b580      	push	{r7, lr}
 800a480:	b084      	sub	sp, #16
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
 800a486:	460b      	mov	r3, r1
 800a488:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a48a:	2300      	movs	r3, #0
 800a48c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a494:	2b00      	cmp	r3, #0
 800a496:	d009      	beq.n	800a4ac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	78fa      	ldrb	r2, [r7, #3]
 800a4a2:	4611      	mov	r1, r2
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	4798      	blx	r3
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a4ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b084      	sub	sp, #16
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
 800a4be:	460b      	mov	r3, r1
 800a4c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	78fa      	ldrb	r2, [r7, #3]
 800a4d0:	4611      	mov	r1, r2
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	4798      	blx	r3
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d001      	beq.n	800a4e0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a4dc:	2303      	movs	r3, #3
 800a4de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3710      	adds	r7, #16
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}

0800a4ea <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b084      	sub	sp, #16
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
 800a4f2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a4fa:	6839      	ldr	r1, [r7, #0]
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f001 f922 	bl	800b746 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2201      	movs	r2, #1
 800a506:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a510:	461a      	mov	r2, r3
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a51e:	f003 031f 	and.w	r3, r3, #31
 800a522:	2b02      	cmp	r3, #2
 800a524:	d01a      	beq.n	800a55c <USBD_LL_SetupStage+0x72>
 800a526:	2b02      	cmp	r3, #2
 800a528:	d822      	bhi.n	800a570 <USBD_LL_SetupStage+0x86>
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d002      	beq.n	800a534 <USBD_LL_SetupStage+0x4a>
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d00a      	beq.n	800a548 <USBD_LL_SetupStage+0x5e>
 800a532:	e01d      	b.n	800a570 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a53a:	4619      	mov	r1, r3
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 fb77 	bl	800ac30 <USBD_StdDevReq>
 800a542:	4603      	mov	r3, r0
 800a544:	73fb      	strb	r3, [r7, #15]
      break;
 800a546:	e020      	b.n	800a58a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a54e:	4619      	mov	r1, r3
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 fbdf 	bl	800ad14 <USBD_StdItfReq>
 800a556:	4603      	mov	r3, r0
 800a558:	73fb      	strb	r3, [r7, #15]
      break;
 800a55a:	e016      	b.n	800a58a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a562:	4619      	mov	r1, r3
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 fc41 	bl	800adec <USBD_StdEPReq>
 800a56a:	4603      	mov	r3, r0
 800a56c:	73fb      	strb	r3, [r7, #15]
      break;
 800a56e:	e00c      	b.n	800a58a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a576:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	4619      	mov	r1, r3
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f004 fc90 	bl	800eea4 <USBD_LL_StallEP>
 800a584:	4603      	mov	r3, r0
 800a586:	73fb      	strb	r3, [r7, #15]
      break;
 800a588:	bf00      	nop
  }

  return ret;
 800a58a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3710      	adds	r7, #16
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b086      	sub	sp, #24
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	460b      	mov	r3, r1
 800a59e:	607a      	str	r2, [r7, #4]
 800a5a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800a5a6:	7afb      	ldrb	r3, [r7, #11]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d177      	bne.n	800a69c <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a5b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a5ba:	2b03      	cmp	r3, #3
 800a5bc:	f040 80a1 	bne.w	800a702 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	693a      	ldr	r2, [r7, #16]
 800a5c6:	8992      	ldrh	r2, [r2, #12]
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d91c      	bls.n	800a606 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	693a      	ldr	r2, [r7, #16]
 800a5d2:	8992      	ldrh	r2, [r2, #12]
 800a5d4:	1a9a      	subs	r2, r3, r2
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	691b      	ldr	r3, [r3, #16]
 800a5de:	693a      	ldr	r2, [r7, #16]
 800a5e0:	8992      	ldrh	r2, [r2, #12]
 800a5e2:	441a      	add	r2, r3
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	6919      	ldr	r1, [r3, #16]
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	899b      	ldrh	r3, [r3, #12]
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	bf38      	it	cc
 800a5fa:	4613      	movcc	r3, r2
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	68f8      	ldr	r0, [r7, #12]
 800a600:	f001 f9a8 	bl	800b954 <USBD_CtlContinueRx>
 800a604:	e07d      	b.n	800a702 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a60c:	f003 031f 	and.w	r3, r3, #31
 800a610:	2b02      	cmp	r3, #2
 800a612:	d014      	beq.n	800a63e <USBD_LL_DataOutStage+0xaa>
 800a614:	2b02      	cmp	r3, #2
 800a616:	d81d      	bhi.n	800a654 <USBD_LL_DataOutStage+0xc0>
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d002      	beq.n	800a622 <USBD_LL_DataOutStage+0x8e>
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d003      	beq.n	800a628 <USBD_LL_DataOutStage+0x94>
 800a620:	e018      	b.n	800a654 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a622:	2300      	movs	r3, #0
 800a624:	75bb      	strb	r3, [r7, #22]
            break;
 800a626:	e018      	b.n	800a65a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a62e:	b2db      	uxtb	r3, r3
 800a630:	4619      	mov	r1, r3
 800a632:	68f8      	ldr	r0, [r7, #12]
 800a634:	f000 fa6e 	bl	800ab14 <USBD_CoreFindIF>
 800a638:	4603      	mov	r3, r0
 800a63a:	75bb      	strb	r3, [r7, #22]
            break;
 800a63c:	e00d      	b.n	800a65a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a644:	b2db      	uxtb	r3, r3
 800a646:	4619      	mov	r1, r3
 800a648:	68f8      	ldr	r0, [r7, #12]
 800a64a:	f000 fa70 	bl	800ab2e <USBD_CoreFindEP>
 800a64e:	4603      	mov	r3, r0
 800a650:	75bb      	strb	r3, [r7, #22]
            break;
 800a652:	e002      	b.n	800a65a <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a654:	2300      	movs	r3, #0
 800a656:	75bb      	strb	r3, [r7, #22]
            break;
 800a658:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a65a:	7dbb      	ldrb	r3, [r7, #22]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d119      	bne.n	800a694 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a666:	b2db      	uxtb	r3, r3
 800a668:	2b03      	cmp	r3, #3
 800a66a:	d113      	bne.n	800a694 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a66c:	7dba      	ldrb	r2, [r7, #22]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	32ae      	adds	r2, #174	@ 0xae
 800a672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a676:	691b      	ldr	r3, [r3, #16]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d00b      	beq.n	800a694 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800a67c:	7dba      	ldrb	r2, [r7, #22]
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a684:	7dba      	ldrb	r2, [r7, #22]
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	32ae      	adds	r2, #174	@ 0xae
 800a68a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a68e:	691b      	ldr	r3, [r3, #16]
 800a690:	68f8      	ldr	r0, [r7, #12]
 800a692:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f001 f96e 	bl	800b976 <USBD_CtlSendStatus>
 800a69a:	e032      	b.n	800a702 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a69c:	7afb      	ldrb	r3, [r7, #11]
 800a69e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	68f8      	ldr	r0, [r7, #12]
 800a6a8:	f000 fa41 	bl	800ab2e <USBD_CoreFindEP>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a6b0:	7dbb      	ldrb	r3, [r7, #22]
 800a6b2:	2bff      	cmp	r3, #255	@ 0xff
 800a6b4:	d025      	beq.n	800a702 <USBD_LL_DataOutStage+0x16e>
 800a6b6:	7dbb      	ldrb	r3, [r7, #22]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d122      	bne.n	800a702 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	2b03      	cmp	r3, #3
 800a6c6:	d117      	bne.n	800a6f8 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a6c8:	7dba      	ldrb	r2, [r7, #22]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	32ae      	adds	r2, #174	@ 0xae
 800a6ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6d2:	699b      	ldr	r3, [r3, #24]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d00f      	beq.n	800a6f8 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800a6d8:	7dba      	ldrb	r2, [r7, #22]
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a6e0:	7dba      	ldrb	r2, [r7, #22]
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	32ae      	adds	r2, #174	@ 0xae
 800a6e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6ea:	699b      	ldr	r3, [r3, #24]
 800a6ec:	7afa      	ldrb	r2, [r7, #11]
 800a6ee:	4611      	mov	r1, r2
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	4798      	blx	r3
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a6f8:	7dfb      	ldrb	r3, [r7, #23]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d001      	beq.n	800a702 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800a6fe:	7dfb      	ldrb	r3, [r7, #23]
 800a700:	e000      	b.n	800a704 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800a702:	2300      	movs	r3, #0
}
 800a704:	4618      	mov	r0, r3
 800a706:	3718      	adds	r7, #24
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b086      	sub	sp, #24
 800a710:	af00      	add	r7, sp, #0
 800a712:	60f8      	str	r0, [r7, #12]
 800a714:	460b      	mov	r3, r1
 800a716:	607a      	str	r2, [r7, #4]
 800a718:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800a71a:	7afb      	ldrb	r3, [r7, #11]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d178      	bne.n	800a812 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	3314      	adds	r3, #20
 800a724:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a72c:	2b02      	cmp	r3, #2
 800a72e:	d163      	bne.n	800a7f8 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	693a      	ldr	r2, [r7, #16]
 800a736:	8992      	ldrh	r2, [r2, #12]
 800a738:	4293      	cmp	r3, r2
 800a73a:	d91c      	bls.n	800a776 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	693a      	ldr	r2, [r7, #16]
 800a742:	8992      	ldrh	r2, [r2, #12]
 800a744:	1a9a      	subs	r2, r3, r2
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	691b      	ldr	r3, [r3, #16]
 800a74e:	693a      	ldr	r2, [r7, #16]
 800a750:	8992      	ldrh	r2, [r2, #12]
 800a752:	441a      	add	r2, r3
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	6919      	ldr	r1, [r3, #16]
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	461a      	mov	r2, r3
 800a762:	68f8      	ldr	r0, [r7, #12]
 800a764:	f001 f8c4 	bl	800b8f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a768:	2300      	movs	r3, #0
 800a76a:	2200      	movs	r2, #0
 800a76c:	2100      	movs	r1, #0
 800a76e:	68f8      	ldr	r0, [r7, #12]
 800a770:	f004 fc42 	bl	800eff8 <USBD_LL_PrepareReceive>
 800a774:	e040      	b.n	800a7f8 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	899b      	ldrh	r3, [r3, #12]
 800a77a:	461a      	mov	r2, r3
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	429a      	cmp	r2, r3
 800a782:	d11c      	bne.n	800a7be <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	693a      	ldr	r2, [r7, #16]
 800a78a:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d316      	bcc.n	800a7be <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	681a      	ldr	r2, [r3, #0]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d20f      	bcs.n	800a7be <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a79e:	2200      	movs	r2, #0
 800a7a0:	2100      	movs	r1, #0
 800a7a2:	68f8      	ldr	r0, [r7, #12]
 800a7a4:	f001 f8a4 	bl	800b8f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	68f8      	ldr	r0, [r7, #12]
 800a7b8:	f004 fc1e 	bl	800eff8 <USBD_LL_PrepareReceive>
 800a7bc:	e01c      	b.n	800a7f8 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	2b03      	cmp	r3, #3
 800a7c8:	d10f      	bne.n	800a7ea <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d009      	beq.n	800a7ea <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7e4:	68db      	ldr	r3, [r3, #12]
 800a7e6:	68f8      	ldr	r0, [r7, #12]
 800a7e8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7ea:	2180      	movs	r1, #128	@ 0x80
 800a7ec:	68f8      	ldr	r0, [r7, #12]
 800a7ee:	f004 fb59 	bl	800eea4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a7f2:	68f8      	ldr	r0, [r7, #12]
 800a7f4:	f001 f8d2 	bl	800b99c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d03a      	beq.n	800a878 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f7ff fe30 	bl	800a468 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a810:	e032      	b.n	800a878 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a812:	7afb      	ldrb	r3, [r7, #11]
 800a814:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	4619      	mov	r1, r3
 800a81c:	68f8      	ldr	r0, [r7, #12]
 800a81e:	f000 f986 	bl	800ab2e <USBD_CoreFindEP>
 800a822:	4603      	mov	r3, r0
 800a824:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a826:	7dfb      	ldrb	r3, [r7, #23]
 800a828:	2bff      	cmp	r3, #255	@ 0xff
 800a82a:	d025      	beq.n	800a878 <USBD_LL_DataInStage+0x16c>
 800a82c:	7dfb      	ldrb	r3, [r7, #23]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d122      	bne.n	800a878 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a838:	b2db      	uxtb	r3, r3
 800a83a:	2b03      	cmp	r3, #3
 800a83c:	d11c      	bne.n	800a878 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a83e:	7dfa      	ldrb	r2, [r7, #23]
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	32ae      	adds	r2, #174	@ 0xae
 800a844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a848:	695b      	ldr	r3, [r3, #20]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d014      	beq.n	800a878 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800a84e:	7dfa      	ldrb	r2, [r7, #23]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a856:	7dfa      	ldrb	r2, [r7, #23]
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	32ae      	adds	r2, #174	@ 0xae
 800a85c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a860:	695b      	ldr	r3, [r3, #20]
 800a862:	7afa      	ldrb	r2, [r7, #11]
 800a864:	4611      	mov	r1, r2
 800a866:	68f8      	ldr	r0, [r7, #12]
 800a868:	4798      	blx	r3
 800a86a:	4603      	mov	r3, r0
 800a86c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a86e:	7dbb      	ldrb	r3, [r7, #22]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d001      	beq.n	800a878 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800a874:	7dbb      	ldrb	r3, [r7, #22]
 800a876:	e000      	b.n	800a87a <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800a878:	2300      	movs	r3, #0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3718      	adds	r7, #24
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}

0800a882 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a882:	b580      	push	{r7, lr}
 800a884:	b084      	sub	sp, #16
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a88a:	2300      	movs	r3, #0
 800a88c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2201      	movs	r2, #1
 800a892:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2200      	movs	r2, #0
 800a89a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d014      	beq.n	800a8e8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d00e      	beq.n	800a8e8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	6852      	ldr	r2, [r2, #4]
 800a8d6:	b2d2      	uxtb	r2, r2
 800a8d8:	4611      	mov	r1, r2
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	4798      	blx	r3
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d001      	beq.n	800a8e8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a8e4:	2303      	movs	r3, #3
 800a8e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a8e8:	2340      	movs	r3, #64	@ 0x40
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	2100      	movs	r1, #0
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f004 fa93 	bl	800ee1a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2240      	movs	r2, #64	@ 0x40
 800a900:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a904:	2340      	movs	r3, #64	@ 0x40
 800a906:	2200      	movs	r2, #0
 800a908:	2180      	movs	r1, #128	@ 0x80
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f004 fa85 	bl	800ee1a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2201      	movs	r2, #1
 800a914:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2240      	movs	r2, #64	@ 0x40
 800a91c:	841a      	strh	r2, [r3, #32]

  return ret;
 800a91e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a920:	4618      	mov	r0, r3
 800a922:	3710      	adds	r7, #16
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	460b      	mov	r3, r1
 800a932:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	78fa      	ldrb	r2, [r7, #3]
 800a938:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a93a:	2300      	movs	r3, #0
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	370c      	adds	r7, #12
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a948:	b480      	push	{r7}
 800a94a:	b083      	sub	sp, #12
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a956:	b2db      	uxtb	r3, r3
 800a958:	2b04      	cmp	r3, #4
 800a95a:	d006      	beq.n	800a96a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a962:	b2da      	uxtb	r2, r3
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2204      	movs	r2, #4
 800a96e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a972:	2300      	movs	r3, #0
}
 800a974:	4618      	mov	r0, r3
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	2b04      	cmp	r3, #4
 800a992:	d106      	bne.n	800a9a2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a99a:	b2da      	uxtb	r2, r3
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a9a2:	2300      	movs	r3, #0
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	370c      	adds	r7, #12
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b082      	sub	sp, #8
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	2b03      	cmp	r3, #3
 800a9c2:	d110      	bne.n	800a9e6 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d00b      	beq.n	800a9e6 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9d4:	69db      	ldr	r3, [r3, #28]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d005      	beq.n	800a9e6 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9e0:	69db      	ldr	r3, [r3, #28]
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a9e6:	2300      	movs	r3, #0
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3708      	adds	r7, #8
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b082      	sub	sp, #8
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	460b      	mov	r3, r1
 800a9fa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	32ae      	adds	r2, #174	@ 0xae
 800aa06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d101      	bne.n	800aa12 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800aa0e:	2303      	movs	r3, #3
 800aa10:	e01c      	b.n	800aa4c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	2b03      	cmp	r3, #3
 800aa1c:	d115      	bne.n	800aa4a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	32ae      	adds	r2, #174	@ 0xae
 800aa28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa2c:	6a1b      	ldr	r3, [r3, #32]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d00b      	beq.n	800aa4a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	32ae      	adds	r2, #174	@ 0xae
 800aa3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa40:	6a1b      	ldr	r3, [r3, #32]
 800aa42:	78fa      	ldrb	r2, [r7, #3]
 800aa44:	4611      	mov	r1, r2
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aa4a:	2300      	movs	r3, #0
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3708      	adds	r7, #8
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	32ae      	adds	r2, #174	@ 0xae
 800aa6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d101      	bne.n	800aa76 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800aa72:	2303      	movs	r3, #3
 800aa74:	e01c      	b.n	800aab0 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	2b03      	cmp	r3, #3
 800aa80:	d115      	bne.n	800aaae <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	32ae      	adds	r2, #174	@ 0xae
 800aa8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d00b      	beq.n	800aaae <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	32ae      	adds	r2, #174	@ 0xae
 800aaa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaa6:	78fa      	ldrb	r2, [r7, #3]
 800aaa8:	4611      	mov	r1, r2
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aaae:	2300      	movs	r3, #0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3708      	adds	r7, #8
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aac0:	2300      	movs	r3, #0
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	370c      	adds	r7, #12
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr

0800aace <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800aace:	b580      	push	{r7, lr}
 800aad0:	b084      	sub	sp, #16
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800aad6:	2300      	movs	r3, #0
 800aad8:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2201      	movs	r2, #1
 800aade:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d00e      	beq.n	800ab0a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	6852      	ldr	r2, [r2, #4]
 800aaf8:	b2d2      	uxtb	r2, r2
 800aafa:	4611      	mov	r1, r2
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	4798      	blx	r3
 800ab00:	4603      	mov	r3, r0
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d001      	beq.n	800ab0a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ab06:	2303      	movs	r3, #3
 800ab08:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ab0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3710      	adds	r7, #16
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b083      	sub	sp, #12
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ab20:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	370c      	adds	r7, #12
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr

0800ab2e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ab2e:	b480      	push	{r7}
 800ab30:	b083      	sub	sp, #12
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
 800ab36:	460b      	mov	r3, r1
 800ab38:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ab3a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b086      	sub	sp, #24
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	460b      	mov	r3, r1
 800ab52:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	885b      	ldrh	r3, [r3, #2]
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	68fa      	ldr	r2, [r7, #12]
 800ab68:	7812      	ldrb	r2, [r2, #0]
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d91f      	bls.n	800abae <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ab74:	e013      	b.n	800ab9e <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ab76:	f107 030a 	add.w	r3, r7, #10
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	6978      	ldr	r0, [r7, #20]
 800ab7e:	f000 f81b 	bl	800abb8 <USBD_GetNextDesc>
 800ab82:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	785b      	ldrb	r3, [r3, #1]
 800ab88:	2b05      	cmp	r3, #5
 800ab8a:	d108      	bne.n	800ab9e <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	789b      	ldrb	r3, [r3, #2]
 800ab94:	78fa      	ldrb	r2, [r7, #3]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d008      	beq.n	800abac <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	885b      	ldrh	r3, [r3, #2]
 800aba2:	b29a      	uxth	r2, r3
 800aba4:	897b      	ldrh	r3, [r7, #10]
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d8e5      	bhi.n	800ab76 <USBD_GetEpDesc+0x2e>
 800abaa:	e000      	b.n	800abae <USBD_GetEpDesc+0x66>
          break;
 800abac:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800abae:	693b      	ldr	r3, [r7, #16]
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3718      	adds	r7, #24
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800abb8:	b480      	push	{r7}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	881b      	ldrh	r3, [r3, #0]
 800abca:	68fa      	ldr	r2, [r7, #12]
 800abcc:	7812      	ldrb	r2, [r2, #0]
 800abce:	4413      	add	r3, r2
 800abd0:	b29a      	uxth	r2, r3
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	461a      	mov	r2, r3
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	4413      	add	r3, r2
 800abe0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800abe2:	68fb      	ldr	r3, [r7, #12]
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3714      	adds	r7, #20
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b087      	sub	sp, #28
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	3301      	adds	r3, #1
 800ac06:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ac0e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ac12:	021b      	lsls	r3, r3, #8
 800ac14:	b21a      	sxth	r2, r3
 800ac16:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	b21b      	sxth	r3, r3
 800ac1e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ac20:	89fb      	ldrh	r3, [r7, #14]
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	371c      	adds	r7, #28
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr
	...

0800ac30 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b084      	sub	sp, #16
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ac46:	2b40      	cmp	r3, #64	@ 0x40
 800ac48:	d005      	beq.n	800ac56 <USBD_StdDevReq+0x26>
 800ac4a:	2b40      	cmp	r3, #64	@ 0x40
 800ac4c:	d857      	bhi.n	800acfe <USBD_StdDevReq+0xce>
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d00f      	beq.n	800ac72 <USBD_StdDevReq+0x42>
 800ac52:	2b20      	cmp	r3, #32
 800ac54:	d153      	bne.n	800acfe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	32ae      	adds	r2, #174	@ 0xae
 800ac60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	6839      	ldr	r1, [r7, #0]
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	4798      	blx	r3
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	73fb      	strb	r3, [r7, #15]
      break;
 800ac70:	e04a      	b.n	800ad08 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	785b      	ldrb	r3, [r3, #1]
 800ac76:	2b09      	cmp	r3, #9
 800ac78:	d83b      	bhi.n	800acf2 <USBD_StdDevReq+0xc2>
 800ac7a:	a201      	add	r2, pc, #4	@ (adr r2, 800ac80 <USBD_StdDevReq+0x50>)
 800ac7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac80:	0800acd5 	.word	0x0800acd5
 800ac84:	0800ace9 	.word	0x0800ace9
 800ac88:	0800acf3 	.word	0x0800acf3
 800ac8c:	0800acdf 	.word	0x0800acdf
 800ac90:	0800acf3 	.word	0x0800acf3
 800ac94:	0800acb3 	.word	0x0800acb3
 800ac98:	0800aca9 	.word	0x0800aca9
 800ac9c:	0800acf3 	.word	0x0800acf3
 800aca0:	0800accb 	.word	0x0800accb
 800aca4:	0800acbd 	.word	0x0800acbd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aca8:	6839      	ldr	r1, [r7, #0]
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 fa3e 	bl	800b12c <USBD_GetDescriptor>
          break;
 800acb0:	e024      	b.n	800acfc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800acb2:	6839      	ldr	r1, [r7, #0]
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 fba3 	bl	800b400 <USBD_SetAddress>
          break;
 800acba:	e01f      	b.n	800acfc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800acbc:	6839      	ldr	r1, [r7, #0]
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 fbe2 	bl	800b488 <USBD_SetConfig>
 800acc4:	4603      	mov	r3, r0
 800acc6:	73fb      	strb	r3, [r7, #15]
          break;
 800acc8:	e018      	b.n	800acfc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800acca:	6839      	ldr	r1, [r7, #0]
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 fc85 	bl	800b5dc <USBD_GetConfig>
          break;
 800acd2:	e013      	b.n	800acfc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800acd4:	6839      	ldr	r1, [r7, #0]
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 fcb6 	bl	800b648 <USBD_GetStatus>
          break;
 800acdc:	e00e      	b.n	800acfc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800acde:	6839      	ldr	r1, [r7, #0]
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 fce5 	bl	800b6b0 <USBD_SetFeature>
          break;
 800ace6:	e009      	b.n	800acfc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ace8:	6839      	ldr	r1, [r7, #0]
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 fd09 	bl	800b702 <USBD_ClrFeature>
          break;
 800acf0:	e004      	b.n	800acfc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800acf2:	6839      	ldr	r1, [r7, #0]
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f000 fd60 	bl	800b7ba <USBD_CtlError>
          break;
 800acfa:	bf00      	nop
      }
      break;
 800acfc:	e004      	b.n	800ad08 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800acfe:	6839      	ldr	r1, [r7, #0]
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f000 fd5a 	bl	800b7ba <USBD_CtlError>
      break;
 800ad06:	bf00      	nop
  }

  return ret;
 800ad08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3710      	adds	r7, #16
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	bf00      	nop

0800ad14 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ad2a:	2b40      	cmp	r3, #64	@ 0x40
 800ad2c:	d005      	beq.n	800ad3a <USBD_StdItfReq+0x26>
 800ad2e:	2b40      	cmp	r3, #64	@ 0x40
 800ad30:	d852      	bhi.n	800add8 <USBD_StdItfReq+0xc4>
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d001      	beq.n	800ad3a <USBD_StdItfReq+0x26>
 800ad36:	2b20      	cmp	r3, #32
 800ad38:	d14e      	bne.n	800add8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	3b01      	subs	r3, #1
 800ad44:	2b02      	cmp	r3, #2
 800ad46:	d840      	bhi.n	800adca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	889b      	ldrh	r3, [r3, #4]
 800ad4c:	b2db      	uxtb	r3, r3
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d836      	bhi.n	800adc0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	889b      	ldrh	r3, [r3, #4]
 800ad56:	b2db      	uxtb	r3, r3
 800ad58:	4619      	mov	r1, r3
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f7ff feda 	bl	800ab14 <USBD_CoreFindIF>
 800ad60:	4603      	mov	r3, r0
 800ad62:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad64:	7bbb      	ldrb	r3, [r7, #14]
 800ad66:	2bff      	cmp	r3, #255	@ 0xff
 800ad68:	d01d      	beq.n	800ada6 <USBD_StdItfReq+0x92>
 800ad6a:	7bbb      	ldrb	r3, [r7, #14]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d11a      	bne.n	800ada6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ad70:	7bba      	ldrb	r2, [r7, #14]
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	32ae      	adds	r2, #174	@ 0xae
 800ad76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad7a:	689b      	ldr	r3, [r3, #8]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d00f      	beq.n	800ada0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ad80:	7bba      	ldrb	r2, [r7, #14]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ad88:	7bba      	ldrb	r2, [r7, #14]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	32ae      	adds	r2, #174	@ 0xae
 800ad8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad92:	689b      	ldr	r3, [r3, #8]
 800ad94:	6839      	ldr	r1, [r7, #0]
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	4798      	blx	r3
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ad9e:	e004      	b.n	800adaa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ada0:	2303      	movs	r3, #3
 800ada2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ada4:	e001      	b.n	800adaa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ada6:	2303      	movs	r3, #3
 800ada8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	88db      	ldrh	r3, [r3, #6]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d110      	bne.n	800add4 <USBD_StdItfReq+0xc0>
 800adb2:	7bfb      	ldrb	r3, [r7, #15]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d10d      	bne.n	800add4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f000 fddc 	bl	800b976 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800adbe:	e009      	b.n	800add4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800adc0:	6839      	ldr	r1, [r7, #0]
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 fcf9 	bl	800b7ba <USBD_CtlError>
          break;
 800adc8:	e004      	b.n	800add4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800adca:	6839      	ldr	r1, [r7, #0]
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 fcf4 	bl	800b7ba <USBD_CtlError>
          break;
 800add2:	e000      	b.n	800add6 <USBD_StdItfReq+0xc2>
          break;
 800add4:	bf00      	nop
      }
      break;
 800add6:	e004      	b.n	800ade2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800add8:	6839      	ldr	r1, [r7, #0]
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 fced 	bl	800b7ba <USBD_CtlError>
      break;
 800ade0:	bf00      	nop
  }

  return ret;
 800ade2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3710      	adds	r7, #16
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800adf6:	2300      	movs	r3, #0
 800adf8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	889b      	ldrh	r3, [r3, #4]
 800adfe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	781b      	ldrb	r3, [r3, #0]
 800ae04:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ae08:	2b40      	cmp	r3, #64	@ 0x40
 800ae0a:	d007      	beq.n	800ae1c <USBD_StdEPReq+0x30>
 800ae0c:	2b40      	cmp	r3, #64	@ 0x40
 800ae0e:	f200 8181 	bhi.w	800b114 <USBD_StdEPReq+0x328>
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d02a      	beq.n	800ae6c <USBD_StdEPReq+0x80>
 800ae16:	2b20      	cmp	r3, #32
 800ae18:	f040 817c 	bne.w	800b114 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ae1c:	7bbb      	ldrb	r3, [r7, #14]
 800ae1e:	4619      	mov	r1, r3
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f7ff fe84 	bl	800ab2e <USBD_CoreFindEP>
 800ae26:	4603      	mov	r3, r0
 800ae28:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae2a:	7b7b      	ldrb	r3, [r7, #13]
 800ae2c:	2bff      	cmp	r3, #255	@ 0xff
 800ae2e:	f000 8176 	beq.w	800b11e <USBD_StdEPReq+0x332>
 800ae32:	7b7b      	ldrb	r3, [r7, #13]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	f040 8172 	bne.w	800b11e <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800ae3a:	7b7a      	ldrb	r2, [r7, #13]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ae42:	7b7a      	ldrb	r2, [r7, #13]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	32ae      	adds	r2, #174	@ 0xae
 800ae48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae4c:	689b      	ldr	r3, [r3, #8]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	f000 8165 	beq.w	800b11e <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ae54:	7b7a      	ldrb	r2, [r7, #13]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	32ae      	adds	r2, #174	@ 0xae
 800ae5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae5e:	689b      	ldr	r3, [r3, #8]
 800ae60:	6839      	ldr	r1, [r7, #0]
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	4798      	blx	r3
 800ae66:	4603      	mov	r3, r0
 800ae68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ae6a:	e158      	b.n	800b11e <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	785b      	ldrb	r3, [r3, #1]
 800ae70:	2b03      	cmp	r3, #3
 800ae72:	d008      	beq.n	800ae86 <USBD_StdEPReq+0x9a>
 800ae74:	2b03      	cmp	r3, #3
 800ae76:	f300 8147 	bgt.w	800b108 <USBD_StdEPReq+0x31c>
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	f000 809b 	beq.w	800afb6 <USBD_StdEPReq+0x1ca>
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d03c      	beq.n	800aefe <USBD_StdEPReq+0x112>
 800ae84:	e140      	b.n	800b108 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	2b02      	cmp	r3, #2
 800ae90:	d002      	beq.n	800ae98 <USBD_StdEPReq+0xac>
 800ae92:	2b03      	cmp	r3, #3
 800ae94:	d016      	beq.n	800aec4 <USBD_StdEPReq+0xd8>
 800ae96:	e02c      	b.n	800aef2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae98:	7bbb      	ldrb	r3, [r7, #14]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d00d      	beq.n	800aeba <USBD_StdEPReq+0xce>
 800ae9e:	7bbb      	ldrb	r3, [r7, #14]
 800aea0:	2b80      	cmp	r3, #128	@ 0x80
 800aea2:	d00a      	beq.n	800aeba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aea4:	7bbb      	ldrb	r3, [r7, #14]
 800aea6:	4619      	mov	r1, r3
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f003 fffb 	bl	800eea4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aeae:	2180      	movs	r1, #128	@ 0x80
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f003 fff7 	bl	800eea4 <USBD_LL_StallEP>
 800aeb6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aeb8:	e020      	b.n	800aefc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800aeba:	6839      	ldr	r1, [r7, #0]
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 fc7c 	bl	800b7ba <USBD_CtlError>
              break;
 800aec2:	e01b      	b.n	800aefc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	885b      	ldrh	r3, [r3, #2]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d10e      	bne.n	800aeea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aecc:	7bbb      	ldrb	r3, [r7, #14]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d00b      	beq.n	800aeea <USBD_StdEPReq+0xfe>
 800aed2:	7bbb      	ldrb	r3, [r7, #14]
 800aed4:	2b80      	cmp	r3, #128	@ 0x80
 800aed6:	d008      	beq.n	800aeea <USBD_StdEPReq+0xfe>
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	88db      	ldrh	r3, [r3, #6]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d104      	bne.n	800aeea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aee0:	7bbb      	ldrb	r3, [r7, #14]
 800aee2:	4619      	mov	r1, r3
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f003 ffdd 	bl	800eea4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 fd43 	bl	800b976 <USBD_CtlSendStatus>

              break;
 800aef0:	e004      	b.n	800aefc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800aef2:	6839      	ldr	r1, [r7, #0]
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 fc60 	bl	800b7ba <USBD_CtlError>
              break;
 800aefa:	bf00      	nop
          }
          break;
 800aefc:	e109      	b.n	800b112 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af04:	b2db      	uxtb	r3, r3
 800af06:	2b02      	cmp	r3, #2
 800af08:	d002      	beq.n	800af10 <USBD_StdEPReq+0x124>
 800af0a:	2b03      	cmp	r3, #3
 800af0c:	d016      	beq.n	800af3c <USBD_StdEPReq+0x150>
 800af0e:	e04b      	b.n	800afa8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af10:	7bbb      	ldrb	r3, [r7, #14]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d00d      	beq.n	800af32 <USBD_StdEPReq+0x146>
 800af16:	7bbb      	ldrb	r3, [r7, #14]
 800af18:	2b80      	cmp	r3, #128	@ 0x80
 800af1a:	d00a      	beq.n	800af32 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af1c:	7bbb      	ldrb	r3, [r7, #14]
 800af1e:	4619      	mov	r1, r3
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f003 ffbf 	bl	800eea4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af26:	2180      	movs	r1, #128	@ 0x80
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f003 ffbb 	bl	800eea4 <USBD_LL_StallEP>
 800af2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af30:	e040      	b.n	800afb4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800af32:	6839      	ldr	r1, [r7, #0]
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f000 fc40 	bl	800b7ba <USBD_CtlError>
              break;
 800af3a:	e03b      	b.n	800afb4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	885b      	ldrh	r3, [r3, #2]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d136      	bne.n	800afb2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800af44:	7bbb      	ldrb	r3, [r7, #14]
 800af46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d004      	beq.n	800af58 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800af4e:	7bbb      	ldrb	r3, [r7, #14]
 800af50:	4619      	mov	r1, r3
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f003 ffc5 	bl	800eee2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f000 fd0c 	bl	800b976 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800af5e:	7bbb      	ldrb	r3, [r7, #14]
 800af60:	4619      	mov	r1, r3
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f7ff fde3 	bl	800ab2e <USBD_CoreFindEP>
 800af68:	4603      	mov	r3, r0
 800af6a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af6c:	7b7b      	ldrb	r3, [r7, #13]
 800af6e:	2bff      	cmp	r3, #255	@ 0xff
 800af70:	d01f      	beq.n	800afb2 <USBD_StdEPReq+0x1c6>
 800af72:	7b7b      	ldrb	r3, [r7, #13]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d11c      	bne.n	800afb2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800af78:	7b7a      	ldrb	r2, [r7, #13]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800af80:	7b7a      	ldrb	r2, [r7, #13]
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	32ae      	adds	r2, #174	@ 0xae
 800af86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af8a:	689b      	ldr	r3, [r3, #8]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d010      	beq.n	800afb2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800af90:	7b7a      	ldrb	r2, [r7, #13]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	32ae      	adds	r2, #174	@ 0xae
 800af96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af9a:	689b      	ldr	r3, [r3, #8]
 800af9c:	6839      	ldr	r1, [r7, #0]
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	4798      	blx	r3
 800afa2:	4603      	mov	r3, r0
 800afa4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800afa6:	e004      	b.n	800afb2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800afa8:	6839      	ldr	r1, [r7, #0]
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 fc05 	bl	800b7ba <USBD_CtlError>
              break;
 800afb0:	e000      	b.n	800afb4 <USBD_StdEPReq+0x1c8>
              break;
 800afb2:	bf00      	nop
          }
          break;
 800afb4:	e0ad      	b.n	800b112 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afbc:	b2db      	uxtb	r3, r3
 800afbe:	2b02      	cmp	r3, #2
 800afc0:	d002      	beq.n	800afc8 <USBD_StdEPReq+0x1dc>
 800afc2:	2b03      	cmp	r3, #3
 800afc4:	d033      	beq.n	800b02e <USBD_StdEPReq+0x242>
 800afc6:	e099      	b.n	800b0fc <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afc8:	7bbb      	ldrb	r3, [r7, #14]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d007      	beq.n	800afde <USBD_StdEPReq+0x1f2>
 800afce:	7bbb      	ldrb	r3, [r7, #14]
 800afd0:	2b80      	cmp	r3, #128	@ 0x80
 800afd2:	d004      	beq.n	800afde <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800afd4:	6839      	ldr	r1, [r7, #0]
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 fbef 	bl	800b7ba <USBD_CtlError>
                break;
 800afdc:	e093      	b.n	800b106 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	da0b      	bge.n	800affe <USBD_StdEPReq+0x212>
 800afe6:	7bbb      	ldrb	r3, [r7, #14]
 800afe8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800afec:	4613      	mov	r3, r2
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	4413      	add	r3, r2
 800aff2:	009b      	lsls	r3, r3, #2
 800aff4:	3310      	adds	r3, #16
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	4413      	add	r3, r2
 800affa:	3304      	adds	r3, #4
 800affc:	e00b      	b.n	800b016 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800affe:	7bbb      	ldrb	r3, [r7, #14]
 800b000:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b004:	4613      	mov	r3, r2
 800b006:	009b      	lsls	r3, r3, #2
 800b008:	4413      	add	r3, r2
 800b00a:	009b      	lsls	r3, r3, #2
 800b00c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	4413      	add	r3, r2
 800b014:	3304      	adds	r3, #4
 800b016:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	2200      	movs	r2, #0
 800b01c:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	330e      	adds	r3, #14
 800b022:	2202      	movs	r2, #2
 800b024:	4619      	mov	r1, r3
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 fc44 	bl	800b8b4 <USBD_CtlSendData>
              break;
 800b02c:	e06b      	b.n	800b106 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b02e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b032:	2b00      	cmp	r3, #0
 800b034:	da11      	bge.n	800b05a <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b036:	7bbb      	ldrb	r3, [r7, #14]
 800b038:	f003 020f 	and.w	r2, r3, #15
 800b03c:	6879      	ldr	r1, [r7, #4]
 800b03e:	4613      	mov	r3, r2
 800b040:	009b      	lsls	r3, r3, #2
 800b042:	4413      	add	r3, r2
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	440b      	add	r3, r1
 800b048:	3323      	adds	r3, #35	@ 0x23
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d117      	bne.n	800b080 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800b050:	6839      	ldr	r1, [r7, #0]
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 fbb1 	bl	800b7ba <USBD_CtlError>
                  break;
 800b058:	e055      	b.n	800b106 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b05a:	7bbb      	ldrb	r3, [r7, #14]
 800b05c:	f003 020f 	and.w	r2, r3, #15
 800b060:	6879      	ldr	r1, [r7, #4]
 800b062:	4613      	mov	r3, r2
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	4413      	add	r3, r2
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	440b      	add	r3, r1
 800b06c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d104      	bne.n	800b080 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800b076:	6839      	ldr	r1, [r7, #0]
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f000 fb9e 	bl	800b7ba <USBD_CtlError>
                  break;
 800b07e:	e042      	b.n	800b106 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b080:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b084:	2b00      	cmp	r3, #0
 800b086:	da0b      	bge.n	800b0a0 <USBD_StdEPReq+0x2b4>
 800b088:	7bbb      	ldrb	r3, [r7, #14]
 800b08a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b08e:	4613      	mov	r3, r2
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	4413      	add	r3, r2
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	3310      	adds	r3, #16
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	4413      	add	r3, r2
 800b09c:	3304      	adds	r3, #4
 800b09e:	e00b      	b.n	800b0b8 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b0a0:	7bbb      	ldrb	r3, [r7, #14]
 800b0a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0a6:	4613      	mov	r3, r2
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	4413      	add	r3, r2
 800b0ac:	009b      	lsls	r3, r3, #2
 800b0ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	4413      	add	r3, r2
 800b0b6:	3304      	adds	r3, #4
 800b0b8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b0ba:	7bbb      	ldrb	r3, [r7, #14]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d002      	beq.n	800b0c6 <USBD_StdEPReq+0x2da>
 800b0c0:	7bbb      	ldrb	r3, [r7, #14]
 800b0c2:	2b80      	cmp	r3, #128	@ 0x80
 800b0c4:	d103      	bne.n	800b0ce <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	739a      	strb	r2, [r3, #14]
 800b0cc:	e00e      	b.n	800b0ec <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b0ce:	7bbb      	ldrb	r3, [r7, #14]
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f003 ff24 	bl	800ef20 <USBD_LL_IsStallEP>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d003      	beq.n	800b0e6 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	2201      	movs	r2, #1
 800b0e2:	739a      	strb	r2, [r3, #14]
 800b0e4:	e002      	b.n	800b0ec <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	330e      	adds	r3, #14
 800b0f0:	2202      	movs	r2, #2
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f000 fbdd 	bl	800b8b4 <USBD_CtlSendData>
              break;
 800b0fa:	e004      	b.n	800b106 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800b0fc:	6839      	ldr	r1, [r7, #0]
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 fb5b 	bl	800b7ba <USBD_CtlError>
              break;
 800b104:	bf00      	nop
          }
          break;
 800b106:	e004      	b.n	800b112 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800b108:	6839      	ldr	r1, [r7, #0]
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 fb55 	bl	800b7ba <USBD_CtlError>
          break;
 800b110:	bf00      	nop
      }
      break;
 800b112:	e005      	b.n	800b120 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800b114:	6839      	ldr	r1, [r7, #0]
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f000 fb4f 	bl	800b7ba <USBD_CtlError>
      break;
 800b11c:	e000      	b.n	800b120 <USBD_StdEPReq+0x334>
      break;
 800b11e:	bf00      	nop
  }

  return ret;
 800b120:	7bfb      	ldrb	r3, [r7, #15]
}
 800b122:	4618      	mov	r0, r3
 800b124:	3710      	adds	r7, #16
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
	...

0800b12c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b136:	2300      	movs	r3, #0
 800b138:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b13a:	2300      	movs	r3, #0
 800b13c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b13e:	2300      	movs	r3, #0
 800b140:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	885b      	ldrh	r3, [r3, #2]
 800b146:	0a1b      	lsrs	r3, r3, #8
 800b148:	b29b      	uxth	r3, r3
 800b14a:	3b01      	subs	r3, #1
 800b14c:	2b06      	cmp	r3, #6
 800b14e:	f200 8128 	bhi.w	800b3a2 <USBD_GetDescriptor+0x276>
 800b152:	a201      	add	r2, pc, #4	@ (adr r2, 800b158 <USBD_GetDescriptor+0x2c>)
 800b154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b158:	0800b175 	.word	0x0800b175
 800b15c:	0800b18d 	.word	0x0800b18d
 800b160:	0800b1cd 	.word	0x0800b1cd
 800b164:	0800b3a3 	.word	0x0800b3a3
 800b168:	0800b3a3 	.word	0x0800b3a3
 800b16c:	0800b343 	.word	0x0800b343
 800b170:	0800b36f 	.word	0x0800b36f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	687a      	ldr	r2, [r7, #4]
 800b17e:	7c12      	ldrb	r2, [r2, #16]
 800b180:	f107 0108 	add.w	r1, r7, #8
 800b184:	4610      	mov	r0, r2
 800b186:	4798      	blx	r3
 800b188:	60f8      	str	r0, [r7, #12]
      break;
 800b18a:	e112      	b.n	800b3b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	7c1b      	ldrb	r3, [r3, #16]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d10d      	bne.n	800b1b0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b19a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b19c:	f107 0208 	add.w	r2, r7, #8
 800b1a0:	4610      	mov	r0, r2
 800b1a2:	4798      	blx	r3
 800b1a4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	2202      	movs	r2, #2
 800b1ac:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b1ae:	e100      	b.n	800b3b2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1b8:	f107 0208 	add.w	r2, r7, #8
 800b1bc:	4610      	mov	r0, r2
 800b1be:	4798      	blx	r3
 800b1c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	3301      	adds	r3, #1
 800b1c6:	2202      	movs	r2, #2
 800b1c8:	701a      	strb	r2, [r3, #0]
      break;
 800b1ca:	e0f2      	b.n	800b3b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	885b      	ldrh	r3, [r3, #2]
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	2b05      	cmp	r3, #5
 800b1d4:	f200 80ac 	bhi.w	800b330 <USBD_GetDescriptor+0x204>
 800b1d8:	a201      	add	r2, pc, #4	@ (adr r2, 800b1e0 <USBD_GetDescriptor+0xb4>)
 800b1da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1de:	bf00      	nop
 800b1e0:	0800b1f9 	.word	0x0800b1f9
 800b1e4:	0800b22d 	.word	0x0800b22d
 800b1e8:	0800b261 	.word	0x0800b261
 800b1ec:	0800b295 	.word	0x0800b295
 800b1f0:	0800b2c9 	.word	0x0800b2c9
 800b1f4:	0800b2fd 	.word	0x0800b2fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d00b      	beq.n	800b21c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	687a      	ldr	r2, [r7, #4]
 800b20e:	7c12      	ldrb	r2, [r2, #16]
 800b210:	f107 0108 	add.w	r1, r7, #8
 800b214:	4610      	mov	r0, r2
 800b216:	4798      	blx	r3
 800b218:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b21a:	e091      	b.n	800b340 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b21c:	6839      	ldr	r1, [r7, #0]
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 facb 	bl	800b7ba <USBD_CtlError>
            err++;
 800b224:	7afb      	ldrb	r3, [r7, #11]
 800b226:	3301      	adds	r3, #1
 800b228:	72fb      	strb	r3, [r7, #11]
          break;
 800b22a:	e089      	b.n	800b340 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b232:	689b      	ldr	r3, [r3, #8]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d00b      	beq.n	800b250 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b23e:	689b      	ldr	r3, [r3, #8]
 800b240:	687a      	ldr	r2, [r7, #4]
 800b242:	7c12      	ldrb	r2, [r2, #16]
 800b244:	f107 0108 	add.w	r1, r7, #8
 800b248:	4610      	mov	r0, r2
 800b24a:	4798      	blx	r3
 800b24c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b24e:	e077      	b.n	800b340 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b250:	6839      	ldr	r1, [r7, #0]
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 fab1 	bl	800b7ba <USBD_CtlError>
            err++;
 800b258:	7afb      	ldrb	r3, [r7, #11]
 800b25a:	3301      	adds	r3, #1
 800b25c:	72fb      	strb	r3, [r7, #11]
          break;
 800b25e:	e06f      	b.n	800b340 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b266:	68db      	ldr	r3, [r3, #12]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d00b      	beq.n	800b284 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b272:	68db      	ldr	r3, [r3, #12]
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	7c12      	ldrb	r2, [r2, #16]
 800b278:	f107 0108 	add.w	r1, r7, #8
 800b27c:	4610      	mov	r0, r2
 800b27e:	4798      	blx	r3
 800b280:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b282:	e05d      	b.n	800b340 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b284:	6839      	ldr	r1, [r7, #0]
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 fa97 	bl	800b7ba <USBD_CtlError>
            err++;
 800b28c:	7afb      	ldrb	r3, [r7, #11]
 800b28e:	3301      	adds	r3, #1
 800b290:	72fb      	strb	r3, [r7, #11]
          break;
 800b292:	e055      	b.n	800b340 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b29a:	691b      	ldr	r3, [r3, #16]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d00b      	beq.n	800b2b8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2a6:	691b      	ldr	r3, [r3, #16]
 800b2a8:	687a      	ldr	r2, [r7, #4]
 800b2aa:	7c12      	ldrb	r2, [r2, #16]
 800b2ac:	f107 0108 	add.w	r1, r7, #8
 800b2b0:	4610      	mov	r0, r2
 800b2b2:	4798      	blx	r3
 800b2b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2b6:	e043      	b.n	800b340 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2b8:	6839      	ldr	r1, [r7, #0]
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 fa7d 	bl	800b7ba <USBD_CtlError>
            err++;
 800b2c0:	7afb      	ldrb	r3, [r7, #11]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	72fb      	strb	r3, [r7, #11]
          break;
 800b2c6:	e03b      	b.n	800b340 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2ce:	695b      	ldr	r3, [r3, #20]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d00b      	beq.n	800b2ec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2da:	695b      	ldr	r3, [r3, #20]
 800b2dc:	687a      	ldr	r2, [r7, #4]
 800b2de:	7c12      	ldrb	r2, [r2, #16]
 800b2e0:	f107 0108 	add.w	r1, r7, #8
 800b2e4:	4610      	mov	r0, r2
 800b2e6:	4798      	blx	r3
 800b2e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2ea:	e029      	b.n	800b340 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2ec:	6839      	ldr	r1, [r7, #0]
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 fa63 	bl	800b7ba <USBD_CtlError>
            err++;
 800b2f4:	7afb      	ldrb	r3, [r7, #11]
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	72fb      	strb	r3, [r7, #11]
          break;
 800b2fa:	e021      	b.n	800b340 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b302:	699b      	ldr	r3, [r3, #24]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d00b      	beq.n	800b320 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b30e:	699b      	ldr	r3, [r3, #24]
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	7c12      	ldrb	r2, [r2, #16]
 800b314:	f107 0108 	add.w	r1, r7, #8
 800b318:	4610      	mov	r0, r2
 800b31a:	4798      	blx	r3
 800b31c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b31e:	e00f      	b.n	800b340 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b320:	6839      	ldr	r1, [r7, #0]
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f000 fa49 	bl	800b7ba <USBD_CtlError>
            err++;
 800b328:	7afb      	ldrb	r3, [r7, #11]
 800b32a:	3301      	adds	r3, #1
 800b32c:	72fb      	strb	r3, [r7, #11]
          break;
 800b32e:	e007      	b.n	800b340 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b330:	6839      	ldr	r1, [r7, #0]
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f000 fa41 	bl	800b7ba <USBD_CtlError>
          err++;
 800b338:	7afb      	ldrb	r3, [r7, #11]
 800b33a:	3301      	adds	r3, #1
 800b33c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b33e:	bf00      	nop
      }
      break;
 800b340:	e037      	b.n	800b3b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	7c1b      	ldrb	r3, [r3, #16]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d109      	bne.n	800b35e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b352:	f107 0208 	add.w	r2, r7, #8
 800b356:	4610      	mov	r0, r2
 800b358:	4798      	blx	r3
 800b35a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b35c:	e029      	b.n	800b3b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b35e:	6839      	ldr	r1, [r7, #0]
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 fa2a 	bl	800b7ba <USBD_CtlError>
        err++;
 800b366:	7afb      	ldrb	r3, [r7, #11]
 800b368:	3301      	adds	r3, #1
 800b36a:	72fb      	strb	r3, [r7, #11]
      break;
 800b36c:	e021      	b.n	800b3b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	7c1b      	ldrb	r3, [r3, #16]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d10d      	bne.n	800b392 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b37c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b37e:	f107 0208 	add.w	r2, r7, #8
 800b382:	4610      	mov	r0, r2
 800b384:	4798      	blx	r3
 800b386:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	3301      	adds	r3, #1
 800b38c:	2207      	movs	r2, #7
 800b38e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b390:	e00f      	b.n	800b3b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b392:	6839      	ldr	r1, [r7, #0]
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f000 fa10 	bl	800b7ba <USBD_CtlError>
        err++;
 800b39a:	7afb      	ldrb	r3, [r7, #11]
 800b39c:	3301      	adds	r3, #1
 800b39e:	72fb      	strb	r3, [r7, #11]
      break;
 800b3a0:	e007      	b.n	800b3b2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b3a2:	6839      	ldr	r1, [r7, #0]
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f000 fa08 	bl	800b7ba <USBD_CtlError>
      err++;
 800b3aa:	7afb      	ldrb	r3, [r7, #11]
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	72fb      	strb	r3, [r7, #11]
      break;
 800b3b0:	bf00      	nop
  }

  if (err != 0U)
 800b3b2:	7afb      	ldrb	r3, [r7, #11]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d11e      	bne.n	800b3f6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	88db      	ldrh	r3, [r3, #6]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d016      	beq.n	800b3ee <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b3c0:	893b      	ldrh	r3, [r7, #8]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d00e      	beq.n	800b3e4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	88da      	ldrh	r2, [r3, #6]
 800b3ca:	893b      	ldrh	r3, [r7, #8]
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	bf28      	it	cs
 800b3d0:	4613      	movcs	r3, r2
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b3d6:	893b      	ldrh	r3, [r7, #8]
 800b3d8:	461a      	mov	r2, r3
 800b3da:	68f9      	ldr	r1, [r7, #12]
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f000 fa69 	bl	800b8b4 <USBD_CtlSendData>
 800b3e2:	e009      	b.n	800b3f8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b3e4:	6839      	ldr	r1, [r7, #0]
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 f9e7 	bl	800b7ba <USBD_CtlError>
 800b3ec:	e004      	b.n	800b3f8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 fac1 	bl	800b976 <USBD_CtlSendStatus>
 800b3f4:	e000      	b.n	800b3f8 <USBD_GetDescriptor+0x2cc>
    return;
 800b3f6:	bf00      	nop
  }
}
 800b3f8:	3710      	adds	r7, #16
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}
 800b3fe:	bf00      	nop

0800b400 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	889b      	ldrh	r3, [r3, #4]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d131      	bne.n	800b476 <USBD_SetAddress+0x76>
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	88db      	ldrh	r3, [r3, #6]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d12d      	bne.n	800b476 <USBD_SetAddress+0x76>
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	885b      	ldrh	r3, [r3, #2]
 800b41e:	2b7f      	cmp	r3, #127	@ 0x7f
 800b420:	d829      	bhi.n	800b476 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	885b      	ldrh	r3, [r3, #2]
 800b426:	b2db      	uxtb	r3, r3
 800b428:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b42c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b434:	b2db      	uxtb	r3, r3
 800b436:	2b03      	cmp	r3, #3
 800b438:	d104      	bne.n	800b444 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b43a:	6839      	ldr	r1, [r7, #0]
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f000 f9bc 	bl	800b7ba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b442:	e01d      	b.n	800b480 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	7bfa      	ldrb	r2, [r7, #15]
 800b448:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b44c:	7bfb      	ldrb	r3, [r7, #15]
 800b44e:	4619      	mov	r1, r3
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f003 fd91 	bl	800ef78 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 fa8d 	bl	800b976 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b45c:	7bfb      	ldrb	r3, [r7, #15]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d004      	beq.n	800b46c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2202      	movs	r2, #2
 800b466:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b46a:	e009      	b.n	800b480 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2201      	movs	r2, #1
 800b470:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b474:	e004      	b.n	800b480 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b476:	6839      	ldr	r1, [r7, #0]
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f000 f99e 	bl	800b7ba <USBD_CtlError>
  }
}
 800b47e:	bf00      	nop
 800b480:	bf00      	nop
 800b482:	3710      	adds	r7, #16
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b492:	2300      	movs	r3, #0
 800b494:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	885b      	ldrh	r3, [r3, #2]
 800b49a:	b2da      	uxtb	r2, r3
 800b49c:	4b4e      	ldr	r3, [pc, #312]	@ (800b5d8 <USBD_SetConfig+0x150>)
 800b49e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b4a0:	4b4d      	ldr	r3, [pc, #308]	@ (800b5d8 <USBD_SetConfig+0x150>)
 800b4a2:	781b      	ldrb	r3, [r3, #0]
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d905      	bls.n	800b4b4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b4a8:	6839      	ldr	r1, [r7, #0]
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 f985 	bl	800b7ba <USBD_CtlError>
    return USBD_FAIL;
 800b4b0:	2303      	movs	r3, #3
 800b4b2:	e08c      	b.n	800b5ce <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	2b02      	cmp	r3, #2
 800b4be:	d002      	beq.n	800b4c6 <USBD_SetConfig+0x3e>
 800b4c0:	2b03      	cmp	r3, #3
 800b4c2:	d029      	beq.n	800b518 <USBD_SetConfig+0x90>
 800b4c4:	e075      	b.n	800b5b2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b4c6:	4b44      	ldr	r3, [pc, #272]	@ (800b5d8 <USBD_SetConfig+0x150>)
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d020      	beq.n	800b510 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b4ce:	4b42      	ldr	r3, [pc, #264]	@ (800b5d8 <USBD_SetConfig+0x150>)
 800b4d0:	781b      	ldrb	r3, [r3, #0]
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b4d8:	4b3f      	ldr	r3, [pc, #252]	@ (800b5d8 <USBD_SetConfig+0x150>)
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	4619      	mov	r1, r3
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f7fe ffcd 	bl	800a47e <USBD_SetClassConfig>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b4e8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d008      	beq.n	800b500 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b4ee:	6839      	ldr	r1, [r7, #0]
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f000 f962 	bl	800b7ba <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2202      	movs	r2, #2
 800b4fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b4fe:	e065      	b.n	800b5cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f000 fa38 	bl	800b976 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2203      	movs	r2, #3
 800b50a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b50e:	e05d      	b.n	800b5cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f000 fa30 	bl	800b976 <USBD_CtlSendStatus>
      break;
 800b516:	e059      	b.n	800b5cc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b518:	4b2f      	ldr	r3, [pc, #188]	@ (800b5d8 <USBD_SetConfig+0x150>)
 800b51a:	781b      	ldrb	r3, [r3, #0]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d112      	bne.n	800b546 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2202      	movs	r2, #2
 800b524:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b528:	4b2b      	ldr	r3, [pc, #172]	@ (800b5d8 <USBD_SetConfig+0x150>)
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	461a      	mov	r2, r3
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b532:	4b29      	ldr	r3, [pc, #164]	@ (800b5d8 <USBD_SetConfig+0x150>)
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	4619      	mov	r1, r3
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f7fe ffbc 	bl	800a4b6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 fa19 	bl	800b976 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b544:	e042      	b.n	800b5cc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b546:	4b24      	ldr	r3, [pc, #144]	@ (800b5d8 <USBD_SetConfig+0x150>)
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	461a      	mov	r2, r3
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	429a      	cmp	r2, r3
 800b552:	d02a      	beq.n	800b5aa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	685b      	ldr	r3, [r3, #4]
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	4619      	mov	r1, r3
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f7fe ffaa 	bl	800a4b6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b562:	4b1d      	ldr	r3, [pc, #116]	@ (800b5d8 <USBD_SetConfig+0x150>)
 800b564:	781b      	ldrb	r3, [r3, #0]
 800b566:	461a      	mov	r2, r3
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b56c:	4b1a      	ldr	r3, [pc, #104]	@ (800b5d8 <USBD_SetConfig+0x150>)
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	4619      	mov	r1, r3
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f7fe ff83 	bl	800a47e <USBD_SetClassConfig>
 800b578:	4603      	mov	r3, r0
 800b57a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b57c:	7bfb      	ldrb	r3, [r7, #15]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d00f      	beq.n	800b5a2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b582:	6839      	ldr	r1, [r7, #0]
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 f918 	bl	800b7ba <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	b2db      	uxtb	r3, r3
 800b590:	4619      	mov	r1, r3
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f7fe ff8f 	bl	800a4b6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2202      	movs	r2, #2
 800b59c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b5a0:	e014      	b.n	800b5cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f000 f9e7 	bl	800b976 <USBD_CtlSendStatus>
      break;
 800b5a8:	e010      	b.n	800b5cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 f9e3 	bl	800b976 <USBD_CtlSendStatus>
      break;
 800b5b0:	e00c      	b.n	800b5cc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b5b2:	6839      	ldr	r1, [r7, #0]
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 f900 	bl	800b7ba <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b5ba:	4b07      	ldr	r3, [pc, #28]	@ (800b5d8 <USBD_SetConfig+0x150>)
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	4619      	mov	r1, r3
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f7fe ff78 	bl	800a4b6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b5c6:	2303      	movs	r3, #3
 800b5c8:	73fb      	strb	r3, [r7, #15]
      break;
 800b5ca:	bf00      	nop
  }

  return ret;
 800b5cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3710      	adds	r7, #16
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
 800b5d6:	bf00      	nop
 800b5d8:	200006f0 	.word	0x200006f0

0800b5dc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	88db      	ldrh	r3, [r3, #6]
 800b5ea:	2b01      	cmp	r3, #1
 800b5ec:	d004      	beq.n	800b5f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b5ee:	6839      	ldr	r1, [r7, #0]
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 f8e2 	bl	800b7ba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b5f6:	e023      	b.n	800b640 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	2b02      	cmp	r3, #2
 800b602:	dc02      	bgt.n	800b60a <USBD_GetConfig+0x2e>
 800b604:	2b00      	cmp	r3, #0
 800b606:	dc03      	bgt.n	800b610 <USBD_GetConfig+0x34>
 800b608:	e015      	b.n	800b636 <USBD_GetConfig+0x5a>
 800b60a:	2b03      	cmp	r3, #3
 800b60c:	d00b      	beq.n	800b626 <USBD_GetConfig+0x4a>
 800b60e:	e012      	b.n	800b636 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2200      	movs	r2, #0
 800b614:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	3308      	adds	r3, #8
 800b61a:	2201      	movs	r2, #1
 800b61c:	4619      	mov	r1, r3
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 f948 	bl	800b8b4 <USBD_CtlSendData>
        break;
 800b624:	e00c      	b.n	800b640 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	3304      	adds	r3, #4
 800b62a:	2201      	movs	r2, #1
 800b62c:	4619      	mov	r1, r3
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 f940 	bl	800b8b4 <USBD_CtlSendData>
        break;
 800b634:	e004      	b.n	800b640 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b636:	6839      	ldr	r1, [r7, #0]
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 f8be 	bl	800b7ba <USBD_CtlError>
        break;
 800b63e:	bf00      	nop
}
 800b640:	bf00      	nop
 800b642:	3708      	adds	r7, #8
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b658:	b2db      	uxtb	r3, r3
 800b65a:	3b01      	subs	r3, #1
 800b65c:	2b02      	cmp	r3, #2
 800b65e:	d81e      	bhi.n	800b69e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	88db      	ldrh	r3, [r3, #6]
 800b664:	2b02      	cmp	r3, #2
 800b666:	d004      	beq.n	800b672 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b668:	6839      	ldr	r1, [r7, #0]
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 f8a5 	bl	800b7ba <USBD_CtlError>
        break;
 800b670:	e01a      	b.n	800b6a8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2201      	movs	r2, #1
 800b676:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d005      	beq.n	800b68e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	68db      	ldr	r3, [r3, #12]
 800b686:	f043 0202 	orr.w	r2, r3, #2
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	330c      	adds	r3, #12
 800b692:	2202      	movs	r2, #2
 800b694:	4619      	mov	r1, r3
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 f90c 	bl	800b8b4 <USBD_CtlSendData>
      break;
 800b69c:	e004      	b.n	800b6a8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b69e:	6839      	ldr	r1, [r7, #0]
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 f88a 	bl	800b7ba <USBD_CtlError>
      break;
 800b6a6:	bf00      	nop
  }
}
 800b6a8:	bf00      	nop
 800b6aa:	3708      	adds	r7, #8
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b082      	sub	sp, #8
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	885b      	ldrh	r3, [r3, #2]
 800b6be:	2b01      	cmp	r3, #1
 800b6c0:	d107      	bne.n	800b6d2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f000 f953 	bl	800b976 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b6d0:	e013      	b.n	800b6fa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	885b      	ldrh	r3, [r3, #2]
 800b6d6:	2b02      	cmp	r3, #2
 800b6d8:	d10b      	bne.n	800b6f2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	889b      	ldrh	r3, [r3, #4]
 800b6de:	0a1b      	lsrs	r3, r3, #8
 800b6e0:	b29b      	uxth	r3, r3
 800b6e2:	b2da      	uxtb	r2, r3
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 f943 	bl	800b976 <USBD_CtlSendStatus>
}
 800b6f0:	e003      	b.n	800b6fa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b6f2:	6839      	ldr	r1, [r7, #0]
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 f860 	bl	800b7ba <USBD_CtlError>
}
 800b6fa:	bf00      	nop
 800b6fc:	3708      	adds	r7, #8
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}

0800b702 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b702:	b580      	push	{r7, lr}
 800b704:	b082      	sub	sp, #8
 800b706:	af00      	add	r7, sp, #0
 800b708:	6078      	str	r0, [r7, #4]
 800b70a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b712:	b2db      	uxtb	r3, r3
 800b714:	3b01      	subs	r3, #1
 800b716:	2b02      	cmp	r3, #2
 800b718:	d80b      	bhi.n	800b732 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	885b      	ldrh	r3, [r3, #2]
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d10c      	bne.n	800b73c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2200      	movs	r2, #0
 800b726:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 f923 	bl	800b976 <USBD_CtlSendStatus>
      }
      break;
 800b730:	e004      	b.n	800b73c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b732:	6839      	ldr	r1, [r7, #0]
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f000 f840 	bl	800b7ba <USBD_CtlError>
      break;
 800b73a:	e000      	b.n	800b73e <USBD_ClrFeature+0x3c>
      break;
 800b73c:	bf00      	nop
  }
}
 800b73e:	bf00      	nop
 800b740:	3708      	adds	r7, #8
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}

0800b746 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b746:	b580      	push	{r7, lr}
 800b748:	b084      	sub	sp, #16
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	6078      	str	r0, [r7, #4]
 800b74e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	781a      	ldrb	r2, [r3, #0]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	3301      	adds	r3, #1
 800b760:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	781a      	ldrb	r2, [r3, #0]
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	3301      	adds	r3, #1
 800b76e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b770:	68f8      	ldr	r0, [r7, #12]
 800b772:	f7ff fa3d 	bl	800abf0 <SWAPBYTE>
 800b776:	4603      	mov	r3, r0
 800b778:	461a      	mov	r2, r3
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	3301      	adds	r3, #1
 800b782:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	3301      	adds	r3, #1
 800b788:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b78a:	68f8      	ldr	r0, [r7, #12]
 800b78c:	f7ff fa30 	bl	800abf0 <SWAPBYTE>
 800b790:	4603      	mov	r3, r0
 800b792:	461a      	mov	r2, r3
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	3301      	adds	r3, #1
 800b79c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	3301      	adds	r3, #1
 800b7a2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b7a4:	68f8      	ldr	r0, [r7, #12]
 800b7a6:	f7ff fa23 	bl	800abf0 <SWAPBYTE>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	80da      	strh	r2, [r3, #6]
}
 800b7b2:	bf00      	nop
 800b7b4:	3710      	adds	r7, #16
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}

0800b7ba <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7ba:	b580      	push	{r7, lr}
 800b7bc:	b082      	sub	sp, #8
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	6078      	str	r0, [r7, #4]
 800b7c2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b7c4:	2180      	movs	r1, #128	@ 0x80
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f003 fb6c 	bl	800eea4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b7cc:	2100      	movs	r1, #0
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f003 fb68 	bl	800eea4 <USBD_LL_StallEP>
}
 800b7d4:	bf00      	nop
 800b7d6:	3708      	adds	r7, #8
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b086      	sub	sp, #24
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d042      	beq.n	800b878 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b7f6:	6938      	ldr	r0, [r7, #16]
 800b7f8:	f000 f842 	bl	800b880 <USBD_GetLen>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	3301      	adds	r3, #1
 800b800:	005b      	lsls	r3, r3, #1
 800b802:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b806:	d808      	bhi.n	800b81a <USBD_GetString+0x3e>
 800b808:	6938      	ldr	r0, [r7, #16]
 800b80a:	f000 f839 	bl	800b880 <USBD_GetLen>
 800b80e:	4603      	mov	r3, r0
 800b810:	3301      	adds	r3, #1
 800b812:	b29b      	uxth	r3, r3
 800b814:	005b      	lsls	r3, r3, #1
 800b816:	b29a      	uxth	r2, r3
 800b818:	e001      	b.n	800b81e <USBD_GetString+0x42>
 800b81a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b822:	7dfb      	ldrb	r3, [r7, #23]
 800b824:	68ba      	ldr	r2, [r7, #8]
 800b826:	4413      	add	r3, r2
 800b828:	687a      	ldr	r2, [r7, #4]
 800b82a:	7812      	ldrb	r2, [r2, #0]
 800b82c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b82e:	7dfb      	ldrb	r3, [r7, #23]
 800b830:	3301      	adds	r3, #1
 800b832:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b834:	7dfb      	ldrb	r3, [r7, #23]
 800b836:	68ba      	ldr	r2, [r7, #8]
 800b838:	4413      	add	r3, r2
 800b83a:	2203      	movs	r2, #3
 800b83c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b83e:	7dfb      	ldrb	r3, [r7, #23]
 800b840:	3301      	adds	r3, #1
 800b842:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b844:	e013      	b.n	800b86e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b846:	7dfb      	ldrb	r3, [r7, #23]
 800b848:	68ba      	ldr	r2, [r7, #8]
 800b84a:	4413      	add	r3, r2
 800b84c:	693a      	ldr	r2, [r7, #16]
 800b84e:	7812      	ldrb	r2, [r2, #0]
 800b850:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	3301      	adds	r3, #1
 800b856:	613b      	str	r3, [r7, #16]
    idx++;
 800b858:	7dfb      	ldrb	r3, [r7, #23]
 800b85a:	3301      	adds	r3, #1
 800b85c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b85e:	7dfb      	ldrb	r3, [r7, #23]
 800b860:	68ba      	ldr	r2, [r7, #8]
 800b862:	4413      	add	r3, r2
 800b864:	2200      	movs	r2, #0
 800b866:	701a      	strb	r2, [r3, #0]
    idx++;
 800b868:	7dfb      	ldrb	r3, [r7, #23]
 800b86a:	3301      	adds	r3, #1
 800b86c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	781b      	ldrb	r3, [r3, #0]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d1e7      	bne.n	800b846 <USBD_GetString+0x6a>
 800b876:	e000      	b.n	800b87a <USBD_GetString+0x9e>
    return;
 800b878:	bf00      	nop
  }
}
 800b87a:	3718      	adds	r7, #24
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}

0800b880 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b880:	b480      	push	{r7}
 800b882:	b085      	sub	sp, #20
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b888:	2300      	movs	r3, #0
 800b88a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b890:	e005      	b.n	800b89e <USBD_GetLen+0x1e>
  {
    len++;
 800b892:	7bfb      	ldrb	r3, [r7, #15]
 800b894:	3301      	adds	r3, #1
 800b896:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	3301      	adds	r3, #1
 800b89c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	781b      	ldrb	r3, [r3, #0]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d1f5      	bne.n	800b892 <USBD_GetLen+0x12>
  }

  return len;
 800b8a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3714      	adds	r7, #20
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr

0800b8b4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	60f8      	str	r0, [r7, #12]
 800b8bc:	60b9      	str	r1, [r7, #8]
 800b8be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2202      	movs	r2, #2
 800b8c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	687a      	ldr	r2, [r7, #4]
 800b8cc:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	68ba      	ldr	r2, [r7, #8]
 800b8d2:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	68ba      	ldr	r2, [r7, #8]
 800b8de:	2100      	movs	r1, #0
 800b8e0:	68f8      	ldr	r0, [r7, #12]
 800b8e2:	f003 fb68 	bl	800efb6 <USBD_LL_Transmit>

  return USBD_OK;
 800b8e6:	2300      	movs	r3, #0
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3710      	adds	r7, #16
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b084      	sub	sp, #16
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	60b9      	str	r1, [r7, #8]
 800b8fa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	68ba      	ldr	r2, [r7, #8]
 800b900:	2100      	movs	r1, #0
 800b902:	68f8      	ldr	r0, [r7, #12]
 800b904:	f003 fb57 	bl	800efb6 <USBD_LL_Transmit>

  return USBD_OK;
 800b908:	2300      	movs	r3, #0
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3710      	adds	r7, #16
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}

0800b912 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b912:	b580      	push	{r7, lr}
 800b914:	b084      	sub	sp, #16
 800b916:	af00      	add	r7, sp, #0
 800b918:	60f8      	str	r0, [r7, #12]
 800b91a:	60b9      	str	r1, [r7, #8]
 800b91c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2203      	movs	r2, #3
 800b922:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	68ba      	ldr	r2, [r7, #8]
 800b932:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	687a      	ldr	r2, [r7, #4]
 800b93a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	68ba      	ldr	r2, [r7, #8]
 800b942:	2100      	movs	r1, #0
 800b944:	68f8      	ldr	r0, [r7, #12]
 800b946:	f003 fb57 	bl	800eff8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b94a:	2300      	movs	r3, #0
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3710      	adds	r7, #16
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b084      	sub	sp, #16
 800b958:	af00      	add	r7, sp, #0
 800b95a:	60f8      	str	r0, [r7, #12]
 800b95c:	60b9      	str	r1, [r7, #8]
 800b95e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	68ba      	ldr	r2, [r7, #8]
 800b964:	2100      	movs	r1, #0
 800b966:	68f8      	ldr	r0, [r7, #12]
 800b968:	f003 fb46 	bl	800eff8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b96c:	2300      	movs	r3, #0
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3710      	adds	r7, #16
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}

0800b976 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b976:	b580      	push	{r7, lr}
 800b978:	b082      	sub	sp, #8
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2204      	movs	r2, #4
 800b982:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b986:	2300      	movs	r3, #0
 800b988:	2200      	movs	r2, #0
 800b98a:	2100      	movs	r1, #0
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f003 fb12 	bl	800efb6 <USBD_LL_Transmit>

  return USBD_OK;
 800b992:	2300      	movs	r3, #0
}
 800b994:	4618      	mov	r0, r3
 800b996:	3708      	adds	r7, #8
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b082      	sub	sp, #8
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2205      	movs	r2, #5
 800b9a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	2100      	movs	r1, #0
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f003 fb20 	bl	800eff8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9b8:	2300      	movs	r3, #0
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3708      	adds	r7, #8
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
	...

0800b9c4 <__NVIC_SetPriority>:
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b083      	sub	sp, #12
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	6039      	str	r1, [r7, #0]
 800b9ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b9d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	db0a      	blt.n	800b9ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	b2da      	uxtb	r2, r3
 800b9dc:	490c      	ldr	r1, [pc, #48]	@ (800ba10 <__NVIC_SetPriority+0x4c>)
 800b9de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9e2:	0112      	lsls	r2, r2, #4
 800b9e4:	b2d2      	uxtb	r2, r2
 800b9e6:	440b      	add	r3, r1
 800b9e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b9ec:	e00a      	b.n	800ba04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	b2da      	uxtb	r2, r3
 800b9f2:	4908      	ldr	r1, [pc, #32]	@ (800ba14 <__NVIC_SetPriority+0x50>)
 800b9f4:	79fb      	ldrb	r3, [r7, #7]
 800b9f6:	f003 030f 	and.w	r3, r3, #15
 800b9fa:	3b04      	subs	r3, #4
 800b9fc:	0112      	lsls	r2, r2, #4
 800b9fe:	b2d2      	uxtb	r2, r2
 800ba00:	440b      	add	r3, r1
 800ba02:	761a      	strb	r2, [r3, #24]
}
 800ba04:	bf00      	nop
 800ba06:	370c      	adds	r7, #12
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr
 800ba10:	e000e100 	.word	0xe000e100
 800ba14:	e000ed00 	.word	0xe000ed00

0800ba18 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ba1c:	4b05      	ldr	r3, [pc, #20]	@ (800ba34 <SysTick_Handler+0x1c>)
 800ba1e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ba20:	f001 fcfc 	bl	800d41c <xTaskGetSchedulerState>
 800ba24:	4603      	mov	r3, r0
 800ba26:	2b01      	cmp	r3, #1
 800ba28:	d001      	beq.n	800ba2e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ba2a:	f002 fbcd 	bl	800e1c8 <xPortSysTickHandler>
  }
}
 800ba2e:	bf00      	nop
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	e000e010 	.word	0xe000e010

0800ba38 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ba3c:	2100      	movs	r1, #0
 800ba3e:	f06f 0004 	mvn.w	r0, #4
 800ba42:	f7ff ffbf 	bl	800b9c4 <__NVIC_SetPriority>
#endif
}
 800ba46:	bf00      	nop
 800ba48:	bd80      	pop	{r7, pc}
	...

0800ba4c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ba4c:	b480      	push	{r7}
 800ba4e:	b083      	sub	sp, #12
 800ba50:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba52:	f3ef 8305 	mrs	r3, IPSR
 800ba56:	603b      	str	r3, [r7, #0]
  return(result);
 800ba58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d003      	beq.n	800ba66 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ba5e:	f06f 0305 	mvn.w	r3, #5
 800ba62:	607b      	str	r3, [r7, #4]
 800ba64:	e00c      	b.n	800ba80 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ba66:	4b0a      	ldr	r3, [pc, #40]	@ (800ba90 <osKernelInitialize+0x44>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d105      	bne.n	800ba7a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ba6e:	4b08      	ldr	r3, [pc, #32]	@ (800ba90 <osKernelInitialize+0x44>)
 800ba70:	2201      	movs	r2, #1
 800ba72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ba74:	2300      	movs	r3, #0
 800ba76:	607b      	str	r3, [r7, #4]
 800ba78:	e002      	b.n	800ba80 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ba7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ba7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ba80:	687b      	ldr	r3, [r7, #4]
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	370c      	adds	r7, #12
 800ba86:	46bd      	mov	sp, r7
 800ba88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8c:	4770      	bx	lr
 800ba8e:	bf00      	nop
 800ba90:	200006f4 	.word	0x200006f4

0800ba94 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba9a:	f3ef 8305 	mrs	r3, IPSR
 800ba9e:	603b      	str	r3, [r7, #0]
  return(result);
 800baa0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d003      	beq.n	800baae <osKernelStart+0x1a>
    stat = osErrorISR;
 800baa6:	f06f 0305 	mvn.w	r3, #5
 800baaa:	607b      	str	r3, [r7, #4]
 800baac:	e010      	b.n	800bad0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800baae:	4b0b      	ldr	r3, [pc, #44]	@ (800badc <osKernelStart+0x48>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	2b01      	cmp	r3, #1
 800bab4:	d109      	bne.n	800baca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bab6:	f7ff ffbf 	bl	800ba38 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800baba:	4b08      	ldr	r3, [pc, #32]	@ (800badc <osKernelStart+0x48>)
 800babc:	2202      	movs	r2, #2
 800babe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bac0:	f001 f85e 	bl	800cb80 <vTaskStartScheduler>
      stat = osOK;
 800bac4:	2300      	movs	r3, #0
 800bac6:	607b      	str	r3, [r7, #4]
 800bac8:	e002      	b.n	800bad0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800baca:	f04f 33ff 	mov.w	r3, #4294967295
 800bace:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bad0:	687b      	ldr	r3, [r7, #4]
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3708      	adds	r7, #8
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}
 800bada:	bf00      	nop
 800badc:	200006f4 	.word	0x200006f4

0800bae0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b08e      	sub	sp, #56	@ 0x38
 800bae4:	af04      	add	r7, sp, #16
 800bae6:	60f8      	str	r0, [r7, #12]
 800bae8:	60b9      	str	r1, [r7, #8]
 800baea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800baec:	2300      	movs	r3, #0
 800baee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800baf0:	f3ef 8305 	mrs	r3, IPSR
 800baf4:	617b      	str	r3, [r7, #20]
  return(result);
 800baf6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d17e      	bne.n	800bbfa <osThreadNew+0x11a>
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d07b      	beq.n	800bbfa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bb02:	2380      	movs	r3, #128	@ 0x80
 800bb04:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bb06:	2318      	movs	r3, #24
 800bb08:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bb0e:	f04f 33ff 	mov.w	r3, #4294967295
 800bb12:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d045      	beq.n	800bba6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d002      	beq.n	800bb28 <osThreadNew+0x48>
        name = attr->name;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	699b      	ldr	r3, [r3, #24]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d002      	beq.n	800bb36 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	699b      	ldr	r3, [r3, #24]
 800bb34:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bb36:	69fb      	ldr	r3, [r7, #28]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d008      	beq.n	800bb4e <osThreadNew+0x6e>
 800bb3c:	69fb      	ldr	r3, [r7, #28]
 800bb3e:	2b38      	cmp	r3, #56	@ 0x38
 800bb40:	d805      	bhi.n	800bb4e <osThreadNew+0x6e>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	f003 0301 	and.w	r3, r3, #1
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d001      	beq.n	800bb52 <osThreadNew+0x72>
        return (NULL);
 800bb4e:	2300      	movs	r3, #0
 800bb50:	e054      	b.n	800bbfc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	695b      	ldr	r3, [r3, #20]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d003      	beq.n	800bb62 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	695b      	ldr	r3, [r3, #20]
 800bb5e:	089b      	lsrs	r3, r3, #2
 800bb60:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	689b      	ldr	r3, [r3, #8]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d00e      	beq.n	800bb88 <osThreadNew+0xa8>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	68db      	ldr	r3, [r3, #12]
 800bb6e:	2b5b      	cmp	r3, #91	@ 0x5b
 800bb70:	d90a      	bls.n	800bb88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d006      	beq.n	800bb88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	695b      	ldr	r3, [r3, #20]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d002      	beq.n	800bb88 <osThreadNew+0xa8>
        mem = 1;
 800bb82:	2301      	movs	r3, #1
 800bb84:	61bb      	str	r3, [r7, #24]
 800bb86:	e010      	b.n	800bbaa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	689b      	ldr	r3, [r3, #8]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d10c      	bne.n	800bbaa <osThreadNew+0xca>
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	68db      	ldr	r3, [r3, #12]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d108      	bne.n	800bbaa <osThreadNew+0xca>
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	691b      	ldr	r3, [r3, #16]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d104      	bne.n	800bbaa <osThreadNew+0xca>
          mem = 0;
 800bba0:	2300      	movs	r3, #0
 800bba2:	61bb      	str	r3, [r7, #24]
 800bba4:	e001      	b.n	800bbaa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bba6:	2300      	movs	r3, #0
 800bba8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bbaa:	69bb      	ldr	r3, [r7, #24]
 800bbac:	2b01      	cmp	r3, #1
 800bbae:	d110      	bne.n	800bbd2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bbb8:	9202      	str	r2, [sp, #8]
 800bbba:	9301      	str	r3, [sp, #4]
 800bbbc:	69fb      	ldr	r3, [r7, #28]
 800bbbe:	9300      	str	r3, [sp, #0]
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	6a3a      	ldr	r2, [r7, #32]
 800bbc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bbc6:	68f8      	ldr	r0, [r7, #12]
 800bbc8:	f000 fdfe 	bl	800c7c8 <xTaskCreateStatic>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	613b      	str	r3, [r7, #16]
 800bbd0:	e013      	b.n	800bbfa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bbd2:	69bb      	ldr	r3, [r7, #24]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d110      	bne.n	800bbfa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bbd8:	6a3b      	ldr	r3, [r7, #32]
 800bbda:	b29a      	uxth	r2, r3
 800bbdc:	f107 0310 	add.w	r3, r7, #16
 800bbe0:	9301      	str	r3, [sp, #4]
 800bbe2:	69fb      	ldr	r3, [r7, #28]
 800bbe4:	9300      	str	r3, [sp, #0]
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bbea:	68f8      	ldr	r0, [r7, #12]
 800bbec:	f000 fe4c 	bl	800c888 <xTaskCreate>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d001      	beq.n	800bbfa <osThreadNew+0x11a>
            hTask = NULL;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bbfa:	693b      	ldr	r3, [r7, #16]
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3728      	adds	r7, #40	@ 0x28
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bc04:	b480      	push	{r7}
 800bc06:	b085      	sub	sp, #20
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	60f8      	str	r0, [r7, #12]
 800bc0c:	60b9      	str	r1, [r7, #8]
 800bc0e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	4a07      	ldr	r2, [pc, #28]	@ (800bc30 <vApplicationGetIdleTaskMemory+0x2c>)
 800bc14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	4a06      	ldr	r2, [pc, #24]	@ (800bc34 <vApplicationGetIdleTaskMemory+0x30>)
 800bc1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2280      	movs	r2, #128	@ 0x80
 800bc20:	601a      	str	r2, [r3, #0]
}
 800bc22:	bf00      	nop
 800bc24:	3714      	adds	r7, #20
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr
 800bc2e:	bf00      	nop
 800bc30:	200006f8 	.word	0x200006f8
 800bc34:	20000754 	.word	0x20000754

0800bc38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bc38:	b480      	push	{r7}
 800bc3a:	b085      	sub	sp, #20
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	4a07      	ldr	r2, [pc, #28]	@ (800bc64 <vApplicationGetTimerTaskMemory+0x2c>)
 800bc48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	4a06      	ldr	r2, [pc, #24]	@ (800bc68 <vApplicationGetTimerTaskMemory+0x30>)
 800bc4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bc56:	601a      	str	r2, [r3, #0]
}
 800bc58:	bf00      	nop
 800bc5a:	3714      	adds	r7, #20
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr
 800bc64:	20000954 	.word	0x20000954
 800bc68:	200009b0 	.word	0x200009b0

0800bc6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b083      	sub	sp, #12
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f103 0208 	add.w	r2, r3, #8
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f04f 32ff 	mov.w	r2, #4294967295
 800bc84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f103 0208 	add.w	r2, r3, #8
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f103 0208 	add.w	r2, r3, #8
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bca0:	bf00      	nop
 800bca2:	370c      	adds	r7, #12
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr

0800bcac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bcac:	b480      	push	{r7}
 800bcae:	b083      	sub	sp, #12
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bcba:	bf00      	nop
 800bcbc:	370c      	adds	r7, #12
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr

0800bcc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bcc6:	b480      	push	{r7}
 800bcc8:	b085      	sub	sp, #20
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	6078      	str	r0, [r7, #4]
 800bcce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	68fa      	ldr	r2, [r7, #12]
 800bcda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	689a      	ldr	r2, [r3, #8]
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	689b      	ldr	r3, [r3, #8]
 800bce8:	683a      	ldr	r2, [r7, #0]
 800bcea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	683a      	ldr	r2, [r7, #0]
 800bcf0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	687a      	ldr	r2, [r7, #4]
 800bcf6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	1c5a      	adds	r2, r3, #1
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	601a      	str	r2, [r3, #0]
}
 800bd02:	bf00      	nop
 800bd04:	3714      	adds	r7, #20
 800bd06:	46bd      	mov	sp, r7
 800bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0c:	4770      	bx	lr

0800bd0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bd0e:	b480      	push	{r7}
 800bd10:	b085      	sub	sp, #20
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
 800bd16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd24:	d103      	bne.n	800bd2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	691b      	ldr	r3, [r3, #16]
 800bd2a:	60fb      	str	r3, [r7, #12]
 800bd2c:	e00c      	b.n	800bd48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	3308      	adds	r3, #8
 800bd32:	60fb      	str	r3, [r7, #12]
 800bd34:	e002      	b.n	800bd3c <vListInsert+0x2e>
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	60fb      	str	r3, [r7, #12]
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	68ba      	ldr	r2, [r7, #8]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d2f6      	bcs.n	800bd36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	685a      	ldr	r2, [r3, #4]
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	683a      	ldr	r2, [r7, #0]
 800bd56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	68fa      	ldr	r2, [r7, #12]
 800bd5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	683a      	ldr	r2, [r7, #0]
 800bd62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	687a      	ldr	r2, [r7, #4]
 800bd68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	1c5a      	adds	r2, r3, #1
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	601a      	str	r2, [r3, #0]
}
 800bd74:	bf00      	nop
 800bd76:	3714      	adds	r7, #20
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr

0800bd80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bd80:	b480      	push	{r7}
 800bd82:	b085      	sub	sp, #20
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	691b      	ldr	r3, [r3, #16]
 800bd8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	687a      	ldr	r2, [r7, #4]
 800bd94:	6892      	ldr	r2, [r2, #8]
 800bd96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	689b      	ldr	r3, [r3, #8]
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	6852      	ldr	r2, [r2, #4]
 800bda0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	685b      	ldr	r3, [r3, #4]
 800bda6:	687a      	ldr	r2, [r7, #4]
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	d103      	bne.n	800bdb4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	689a      	ldr	r2, [r3, #8]
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	1e5a      	subs	r2, r3, #1
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3714      	adds	r7, #20
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr

0800bdd4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d10b      	bne.n	800be00 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bde8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdec:	f383 8811 	msr	BASEPRI, r3
 800bdf0:	f3bf 8f6f 	isb	sy
 800bdf4:	f3bf 8f4f 	dsb	sy
 800bdf8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bdfa:	bf00      	nop
 800bdfc:	bf00      	nop
 800bdfe:	e7fd      	b.n	800bdfc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800be00:	f002 f952 	bl	800e0a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681a      	ldr	r2, [r3, #0]
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be0c:	68f9      	ldr	r1, [r7, #12]
 800be0e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800be10:	fb01 f303 	mul.w	r3, r1, r3
 800be14:	441a      	add	r2, r3
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	2200      	movs	r2, #0
 800be1e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681a      	ldr	r2, [r3, #0]
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be30:	3b01      	subs	r3, #1
 800be32:	68f9      	ldr	r1, [r7, #12]
 800be34:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800be36:	fb01 f303 	mul.w	r3, r1, r3
 800be3a:	441a      	add	r2, r3
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	22ff      	movs	r2, #255	@ 0xff
 800be44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	22ff      	movs	r2, #255	@ 0xff
 800be4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d114      	bne.n	800be80 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	691b      	ldr	r3, [r3, #16]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d01a      	beq.n	800be94 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	3310      	adds	r3, #16
 800be62:	4618      	mov	r0, r3
 800be64:	f001 f91a 	bl	800d09c <xTaskRemoveFromEventList>
 800be68:	4603      	mov	r3, r0
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d012      	beq.n	800be94 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800be6e:	4b0d      	ldr	r3, [pc, #52]	@ (800bea4 <xQueueGenericReset+0xd0>)
 800be70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be74:	601a      	str	r2, [r3, #0]
 800be76:	f3bf 8f4f 	dsb	sy
 800be7a:	f3bf 8f6f 	isb	sy
 800be7e:	e009      	b.n	800be94 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	3310      	adds	r3, #16
 800be84:	4618      	mov	r0, r3
 800be86:	f7ff fef1 	bl	800bc6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	3324      	adds	r3, #36	@ 0x24
 800be8e:	4618      	mov	r0, r3
 800be90:	f7ff feec 	bl	800bc6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800be94:	f002 f93a 	bl	800e10c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800be98:	2301      	movs	r3, #1
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3710      	adds	r7, #16
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}
 800bea2:	bf00      	nop
 800bea4:	e000ed04 	.word	0xe000ed04

0800bea8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b08e      	sub	sp, #56	@ 0x38
 800beac:	af02      	add	r7, sp, #8
 800beae:	60f8      	str	r0, [r7, #12]
 800beb0:	60b9      	str	r1, [r7, #8]
 800beb2:	607a      	str	r2, [r7, #4]
 800beb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d10b      	bne.n	800bed4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800bebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bec0:	f383 8811 	msr	BASEPRI, r3
 800bec4:	f3bf 8f6f 	isb	sy
 800bec8:	f3bf 8f4f 	dsb	sy
 800becc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bece:	bf00      	nop
 800bed0:	bf00      	nop
 800bed2:	e7fd      	b.n	800bed0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d10b      	bne.n	800bef2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800beda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bede:	f383 8811 	msr	BASEPRI, r3
 800bee2:	f3bf 8f6f 	isb	sy
 800bee6:	f3bf 8f4f 	dsb	sy
 800beea:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800beec:	bf00      	nop
 800beee:	bf00      	nop
 800bef0:	e7fd      	b.n	800beee <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d002      	beq.n	800befe <xQueueGenericCreateStatic+0x56>
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d001      	beq.n	800bf02 <xQueueGenericCreateStatic+0x5a>
 800befe:	2301      	movs	r3, #1
 800bf00:	e000      	b.n	800bf04 <xQueueGenericCreateStatic+0x5c>
 800bf02:	2300      	movs	r3, #0
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d10b      	bne.n	800bf20 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800bf08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf0c:	f383 8811 	msr	BASEPRI, r3
 800bf10:	f3bf 8f6f 	isb	sy
 800bf14:	f3bf 8f4f 	dsb	sy
 800bf18:	623b      	str	r3, [r7, #32]
}
 800bf1a:	bf00      	nop
 800bf1c:	bf00      	nop
 800bf1e:	e7fd      	b.n	800bf1c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d102      	bne.n	800bf2c <xQueueGenericCreateStatic+0x84>
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d101      	bne.n	800bf30 <xQueueGenericCreateStatic+0x88>
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	e000      	b.n	800bf32 <xQueueGenericCreateStatic+0x8a>
 800bf30:	2300      	movs	r3, #0
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d10b      	bne.n	800bf4e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800bf36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf3a:	f383 8811 	msr	BASEPRI, r3
 800bf3e:	f3bf 8f6f 	isb	sy
 800bf42:	f3bf 8f4f 	dsb	sy
 800bf46:	61fb      	str	r3, [r7, #28]
}
 800bf48:	bf00      	nop
 800bf4a:	bf00      	nop
 800bf4c:	e7fd      	b.n	800bf4a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bf4e:	2350      	movs	r3, #80	@ 0x50
 800bf50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	2b50      	cmp	r3, #80	@ 0x50
 800bf56:	d00b      	beq.n	800bf70 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800bf58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf5c:	f383 8811 	msr	BASEPRI, r3
 800bf60:	f3bf 8f6f 	isb	sy
 800bf64:	f3bf 8f4f 	dsb	sy
 800bf68:	61bb      	str	r3, [r7, #24]
}
 800bf6a:	bf00      	nop
 800bf6c:	bf00      	nop
 800bf6e:	e7fd      	b.n	800bf6c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bf70:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800bf76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d00d      	beq.n	800bf98 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bf7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf7e:	2201      	movs	r2, #1
 800bf80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bf84:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800bf88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf8a:	9300      	str	r3, [sp, #0]
 800bf8c:	4613      	mov	r3, r2
 800bf8e:	687a      	ldr	r2, [r7, #4]
 800bf90:	68b9      	ldr	r1, [r7, #8]
 800bf92:	68f8      	ldr	r0, [r7, #12]
 800bf94:	f000 f805 	bl	800bfa2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bf98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3730      	adds	r7, #48	@ 0x30
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}

0800bfa2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bfa2:	b580      	push	{r7, lr}
 800bfa4:	b084      	sub	sp, #16
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	60f8      	str	r0, [r7, #12]
 800bfaa:	60b9      	str	r1, [r7, #8]
 800bfac:	607a      	str	r2, [r7, #4]
 800bfae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d103      	bne.n	800bfbe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bfb6:	69bb      	ldr	r3, [r7, #24]
 800bfb8:	69ba      	ldr	r2, [r7, #24]
 800bfba:	601a      	str	r2, [r3, #0]
 800bfbc:	e002      	b.n	800bfc4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bfbe:	69bb      	ldr	r3, [r7, #24]
 800bfc0:	687a      	ldr	r2, [r7, #4]
 800bfc2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bfc4:	69bb      	ldr	r3, [r7, #24]
 800bfc6:	68fa      	ldr	r2, [r7, #12]
 800bfc8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bfca:	69bb      	ldr	r3, [r7, #24]
 800bfcc:	68ba      	ldr	r2, [r7, #8]
 800bfce:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bfd0:	2101      	movs	r1, #1
 800bfd2:	69b8      	ldr	r0, [r7, #24]
 800bfd4:	f7ff fefe 	bl	800bdd4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bfd8:	69bb      	ldr	r3, [r7, #24]
 800bfda:	78fa      	ldrb	r2, [r7, #3]
 800bfdc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bfe0:	bf00      	nop
 800bfe2:	3710      	adds	r7, #16
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}

0800bfe8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b08e      	sub	sp, #56	@ 0x38
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	60b9      	str	r1, [r7, #8]
 800bff2:	607a      	str	r2, [r7, #4]
 800bff4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bff6:	2300      	movs	r3, #0
 800bff8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c000:	2b00      	cmp	r3, #0
 800c002:	d10b      	bne.n	800c01c <xQueueGenericSend+0x34>
	__asm volatile
 800c004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c008:	f383 8811 	msr	BASEPRI, r3
 800c00c:	f3bf 8f6f 	isb	sy
 800c010:	f3bf 8f4f 	dsb	sy
 800c014:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c016:	bf00      	nop
 800c018:	bf00      	nop
 800c01a:	e7fd      	b.n	800c018 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d103      	bne.n	800c02a <xQueueGenericSend+0x42>
 800c022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c026:	2b00      	cmp	r3, #0
 800c028:	d101      	bne.n	800c02e <xQueueGenericSend+0x46>
 800c02a:	2301      	movs	r3, #1
 800c02c:	e000      	b.n	800c030 <xQueueGenericSend+0x48>
 800c02e:	2300      	movs	r3, #0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d10b      	bne.n	800c04c <xQueueGenericSend+0x64>
	__asm volatile
 800c034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c038:	f383 8811 	msr	BASEPRI, r3
 800c03c:	f3bf 8f6f 	isb	sy
 800c040:	f3bf 8f4f 	dsb	sy
 800c044:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c046:	bf00      	nop
 800c048:	bf00      	nop
 800c04a:	e7fd      	b.n	800c048 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	2b02      	cmp	r3, #2
 800c050:	d103      	bne.n	800c05a <xQueueGenericSend+0x72>
 800c052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c056:	2b01      	cmp	r3, #1
 800c058:	d101      	bne.n	800c05e <xQueueGenericSend+0x76>
 800c05a:	2301      	movs	r3, #1
 800c05c:	e000      	b.n	800c060 <xQueueGenericSend+0x78>
 800c05e:	2300      	movs	r3, #0
 800c060:	2b00      	cmp	r3, #0
 800c062:	d10b      	bne.n	800c07c <xQueueGenericSend+0x94>
	__asm volatile
 800c064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c068:	f383 8811 	msr	BASEPRI, r3
 800c06c:	f3bf 8f6f 	isb	sy
 800c070:	f3bf 8f4f 	dsb	sy
 800c074:	623b      	str	r3, [r7, #32]
}
 800c076:	bf00      	nop
 800c078:	bf00      	nop
 800c07a:	e7fd      	b.n	800c078 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c07c:	f001 f9ce 	bl	800d41c <xTaskGetSchedulerState>
 800c080:	4603      	mov	r3, r0
 800c082:	2b00      	cmp	r3, #0
 800c084:	d102      	bne.n	800c08c <xQueueGenericSend+0xa4>
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d101      	bne.n	800c090 <xQueueGenericSend+0xa8>
 800c08c:	2301      	movs	r3, #1
 800c08e:	e000      	b.n	800c092 <xQueueGenericSend+0xaa>
 800c090:	2300      	movs	r3, #0
 800c092:	2b00      	cmp	r3, #0
 800c094:	d10b      	bne.n	800c0ae <xQueueGenericSend+0xc6>
	__asm volatile
 800c096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c09a:	f383 8811 	msr	BASEPRI, r3
 800c09e:	f3bf 8f6f 	isb	sy
 800c0a2:	f3bf 8f4f 	dsb	sy
 800c0a6:	61fb      	str	r3, [r7, #28]
}
 800c0a8:	bf00      	nop
 800c0aa:	bf00      	nop
 800c0ac:	e7fd      	b.n	800c0aa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c0ae:	f001 fffb 	bl	800e0a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c0b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d302      	bcc.n	800c0c4 <xQueueGenericSend+0xdc>
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	2b02      	cmp	r3, #2
 800c0c2:	d129      	bne.n	800c118 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c0c4:	683a      	ldr	r2, [r7, #0]
 800c0c6:	68b9      	ldr	r1, [r7, #8]
 800c0c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c0ca:	f000 fa0f 	bl	800c4ec <prvCopyDataToQueue>
 800c0ce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d010      	beq.n	800c0fa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0da:	3324      	adds	r3, #36	@ 0x24
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f000 ffdd 	bl	800d09c <xTaskRemoveFromEventList>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d013      	beq.n	800c110 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c0e8:	4b3f      	ldr	r3, [pc, #252]	@ (800c1e8 <xQueueGenericSend+0x200>)
 800c0ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0ee:	601a      	str	r2, [r3, #0]
 800c0f0:	f3bf 8f4f 	dsb	sy
 800c0f4:	f3bf 8f6f 	isb	sy
 800c0f8:	e00a      	b.n	800c110 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c0fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d007      	beq.n	800c110 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c100:	4b39      	ldr	r3, [pc, #228]	@ (800c1e8 <xQueueGenericSend+0x200>)
 800c102:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c106:	601a      	str	r2, [r3, #0]
 800c108:	f3bf 8f4f 	dsb	sy
 800c10c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c110:	f001 fffc 	bl	800e10c <vPortExitCritical>
				return pdPASS;
 800c114:	2301      	movs	r3, #1
 800c116:	e063      	b.n	800c1e0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d103      	bne.n	800c126 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c11e:	f001 fff5 	bl	800e10c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c122:	2300      	movs	r3, #0
 800c124:	e05c      	b.n	800c1e0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d106      	bne.n	800c13a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c12c:	f107 0314 	add.w	r3, r7, #20
 800c130:	4618      	mov	r0, r3
 800c132:	f001 f817 	bl	800d164 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c136:	2301      	movs	r3, #1
 800c138:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c13a:	f001 ffe7 	bl	800e10c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c13e:	f000 fd87 	bl	800cc50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c142:	f001 ffb1 	bl	800e0a8 <vPortEnterCritical>
 800c146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c148:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c14c:	b25b      	sxtb	r3, r3
 800c14e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c152:	d103      	bne.n	800c15c <xQueueGenericSend+0x174>
 800c154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c156:	2200      	movs	r2, #0
 800c158:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c15e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c162:	b25b      	sxtb	r3, r3
 800c164:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c168:	d103      	bne.n	800c172 <xQueueGenericSend+0x18a>
 800c16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c16c:	2200      	movs	r2, #0
 800c16e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c172:	f001 ffcb 	bl	800e10c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c176:	1d3a      	adds	r2, r7, #4
 800c178:	f107 0314 	add.w	r3, r7, #20
 800c17c:	4611      	mov	r1, r2
 800c17e:	4618      	mov	r0, r3
 800c180:	f001 f806 	bl	800d190 <xTaskCheckForTimeOut>
 800c184:	4603      	mov	r3, r0
 800c186:	2b00      	cmp	r3, #0
 800c188:	d124      	bne.n	800c1d4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c18a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c18c:	f000 faa6 	bl	800c6dc <prvIsQueueFull>
 800c190:	4603      	mov	r3, r0
 800c192:	2b00      	cmp	r3, #0
 800c194:	d018      	beq.n	800c1c8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c198:	3310      	adds	r3, #16
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	4611      	mov	r1, r2
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f000 ff2a 	bl	800cff8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c1a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c1a6:	f000 fa31 	bl	800c60c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c1aa:	f000 fd5f 	bl	800cc6c <xTaskResumeAll>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	f47f af7c 	bne.w	800c0ae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c1b6:	4b0c      	ldr	r3, [pc, #48]	@ (800c1e8 <xQueueGenericSend+0x200>)
 800c1b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1bc:	601a      	str	r2, [r3, #0]
 800c1be:	f3bf 8f4f 	dsb	sy
 800c1c2:	f3bf 8f6f 	isb	sy
 800c1c6:	e772      	b.n	800c0ae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c1c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c1ca:	f000 fa1f 	bl	800c60c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c1ce:	f000 fd4d 	bl	800cc6c <xTaskResumeAll>
 800c1d2:	e76c      	b.n	800c0ae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c1d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c1d6:	f000 fa19 	bl	800c60c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c1da:	f000 fd47 	bl	800cc6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c1de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3738      	adds	r7, #56	@ 0x38
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}
 800c1e8:	e000ed04 	.word	0xe000ed04

0800c1ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b090      	sub	sp, #64	@ 0x40
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	60f8      	str	r0, [r7, #12]
 800c1f4:	60b9      	str	r1, [r7, #8]
 800c1f6:	607a      	str	r2, [r7, #4]
 800c1f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c1fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c200:	2b00      	cmp	r3, #0
 800c202:	d10b      	bne.n	800c21c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c208:	f383 8811 	msr	BASEPRI, r3
 800c20c:	f3bf 8f6f 	isb	sy
 800c210:	f3bf 8f4f 	dsb	sy
 800c214:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c216:	bf00      	nop
 800c218:	bf00      	nop
 800c21a:	e7fd      	b.n	800c218 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d103      	bne.n	800c22a <xQueueGenericSendFromISR+0x3e>
 800c222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c226:	2b00      	cmp	r3, #0
 800c228:	d101      	bne.n	800c22e <xQueueGenericSendFromISR+0x42>
 800c22a:	2301      	movs	r3, #1
 800c22c:	e000      	b.n	800c230 <xQueueGenericSendFromISR+0x44>
 800c22e:	2300      	movs	r3, #0
 800c230:	2b00      	cmp	r3, #0
 800c232:	d10b      	bne.n	800c24c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c238:	f383 8811 	msr	BASEPRI, r3
 800c23c:	f3bf 8f6f 	isb	sy
 800c240:	f3bf 8f4f 	dsb	sy
 800c244:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c246:	bf00      	nop
 800c248:	bf00      	nop
 800c24a:	e7fd      	b.n	800c248 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	2b02      	cmp	r3, #2
 800c250:	d103      	bne.n	800c25a <xQueueGenericSendFromISR+0x6e>
 800c252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c256:	2b01      	cmp	r3, #1
 800c258:	d101      	bne.n	800c25e <xQueueGenericSendFromISR+0x72>
 800c25a:	2301      	movs	r3, #1
 800c25c:	e000      	b.n	800c260 <xQueueGenericSendFromISR+0x74>
 800c25e:	2300      	movs	r3, #0
 800c260:	2b00      	cmp	r3, #0
 800c262:	d10b      	bne.n	800c27c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c268:	f383 8811 	msr	BASEPRI, r3
 800c26c:	f3bf 8f6f 	isb	sy
 800c270:	f3bf 8f4f 	dsb	sy
 800c274:	623b      	str	r3, [r7, #32]
}
 800c276:	bf00      	nop
 800c278:	bf00      	nop
 800c27a:	e7fd      	b.n	800c278 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c27c:	f001 fff4 	bl	800e268 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c280:	f3ef 8211 	mrs	r2, BASEPRI
 800c284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c288:	f383 8811 	msr	BASEPRI, r3
 800c28c:	f3bf 8f6f 	isb	sy
 800c290:	f3bf 8f4f 	dsb	sy
 800c294:	61fa      	str	r2, [r7, #28]
 800c296:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c298:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c29a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c29e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c2a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d302      	bcc.n	800c2ae <xQueueGenericSendFromISR+0xc2>
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	2b02      	cmp	r3, #2
 800c2ac:	d12f      	bne.n	800c30e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c2ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c2b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c2be:	683a      	ldr	r2, [r7, #0]
 800c2c0:	68b9      	ldr	r1, [r7, #8]
 800c2c2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c2c4:	f000 f912 	bl	800c4ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c2c8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c2cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2d0:	d112      	bne.n	800c2f8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d016      	beq.n	800c308 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2dc:	3324      	adds	r3, #36	@ 0x24
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f000 fedc 	bl	800d09c <xTaskRemoveFromEventList>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d00e      	beq.n	800c308 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d00b      	beq.n	800c308 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2201      	movs	r2, #1
 800c2f4:	601a      	str	r2, [r3, #0]
 800c2f6:	e007      	b.n	800c308 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c2f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c2fc:	3301      	adds	r3, #1
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	b25a      	sxtb	r2, r3
 800c302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c304:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c308:	2301      	movs	r3, #1
 800c30a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c30c:	e001      	b.n	800c312 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c30e:	2300      	movs	r3, #0
 800c310:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c314:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c31c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c31e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c320:	4618      	mov	r0, r3
 800c322:	3740      	adds	r7, #64	@ 0x40
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}

0800c328 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b08c      	sub	sp, #48	@ 0x30
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c334:	2300      	movs	r3, #0
 800c336:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c33c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d10b      	bne.n	800c35a <xQueueReceive+0x32>
	__asm volatile
 800c342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c346:	f383 8811 	msr	BASEPRI, r3
 800c34a:	f3bf 8f6f 	isb	sy
 800c34e:	f3bf 8f4f 	dsb	sy
 800c352:	623b      	str	r3, [r7, #32]
}
 800c354:	bf00      	nop
 800c356:	bf00      	nop
 800c358:	e7fd      	b.n	800c356 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d103      	bne.n	800c368 <xQueueReceive+0x40>
 800c360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c364:	2b00      	cmp	r3, #0
 800c366:	d101      	bne.n	800c36c <xQueueReceive+0x44>
 800c368:	2301      	movs	r3, #1
 800c36a:	e000      	b.n	800c36e <xQueueReceive+0x46>
 800c36c:	2300      	movs	r3, #0
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d10b      	bne.n	800c38a <xQueueReceive+0x62>
	__asm volatile
 800c372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c376:	f383 8811 	msr	BASEPRI, r3
 800c37a:	f3bf 8f6f 	isb	sy
 800c37e:	f3bf 8f4f 	dsb	sy
 800c382:	61fb      	str	r3, [r7, #28]
}
 800c384:	bf00      	nop
 800c386:	bf00      	nop
 800c388:	e7fd      	b.n	800c386 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c38a:	f001 f847 	bl	800d41c <xTaskGetSchedulerState>
 800c38e:	4603      	mov	r3, r0
 800c390:	2b00      	cmp	r3, #0
 800c392:	d102      	bne.n	800c39a <xQueueReceive+0x72>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d101      	bne.n	800c39e <xQueueReceive+0x76>
 800c39a:	2301      	movs	r3, #1
 800c39c:	e000      	b.n	800c3a0 <xQueueReceive+0x78>
 800c39e:	2300      	movs	r3, #0
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d10b      	bne.n	800c3bc <xQueueReceive+0x94>
	__asm volatile
 800c3a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3a8:	f383 8811 	msr	BASEPRI, r3
 800c3ac:	f3bf 8f6f 	isb	sy
 800c3b0:	f3bf 8f4f 	dsb	sy
 800c3b4:	61bb      	str	r3, [r7, #24]
}
 800c3b6:	bf00      	nop
 800c3b8:	bf00      	nop
 800c3ba:	e7fd      	b.n	800c3b8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3bc:	f001 fe74 	bl	800e0a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3c4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d01f      	beq.n	800c40c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c3cc:	68b9      	ldr	r1, [r7, #8]
 800c3ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c3d0:	f000 f8f6 	bl	800c5c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3d6:	1e5a      	subs	r2, r3, #1
 800c3d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3da:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3de:	691b      	ldr	r3, [r3, #16]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d00f      	beq.n	800c404 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3e6:	3310      	adds	r3, #16
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f000 fe57 	bl	800d09c <xTaskRemoveFromEventList>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d007      	beq.n	800c404 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c3f4:	4b3c      	ldr	r3, [pc, #240]	@ (800c4e8 <xQueueReceive+0x1c0>)
 800c3f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3fa:	601a      	str	r2, [r3, #0]
 800c3fc:	f3bf 8f4f 	dsb	sy
 800c400:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c404:	f001 fe82 	bl	800e10c <vPortExitCritical>
				return pdPASS;
 800c408:	2301      	movs	r3, #1
 800c40a:	e069      	b.n	800c4e0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d103      	bne.n	800c41a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c412:	f001 fe7b 	bl	800e10c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c416:	2300      	movs	r3, #0
 800c418:	e062      	b.n	800c4e0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c41a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d106      	bne.n	800c42e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c420:	f107 0310 	add.w	r3, r7, #16
 800c424:	4618      	mov	r0, r3
 800c426:	f000 fe9d 	bl	800d164 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c42a:	2301      	movs	r3, #1
 800c42c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c42e:	f001 fe6d 	bl	800e10c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c432:	f000 fc0d 	bl	800cc50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c436:	f001 fe37 	bl	800e0a8 <vPortEnterCritical>
 800c43a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c43c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c440:	b25b      	sxtb	r3, r3
 800c442:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c446:	d103      	bne.n	800c450 <xQueueReceive+0x128>
 800c448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c44a:	2200      	movs	r2, #0
 800c44c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c452:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c456:	b25b      	sxtb	r3, r3
 800c458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c45c:	d103      	bne.n	800c466 <xQueueReceive+0x13e>
 800c45e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c460:	2200      	movs	r2, #0
 800c462:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c466:	f001 fe51 	bl	800e10c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c46a:	1d3a      	adds	r2, r7, #4
 800c46c:	f107 0310 	add.w	r3, r7, #16
 800c470:	4611      	mov	r1, r2
 800c472:	4618      	mov	r0, r3
 800c474:	f000 fe8c 	bl	800d190 <xTaskCheckForTimeOut>
 800c478:	4603      	mov	r3, r0
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d123      	bne.n	800c4c6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c47e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c480:	f000 f916 	bl	800c6b0 <prvIsQueueEmpty>
 800c484:	4603      	mov	r3, r0
 800c486:	2b00      	cmp	r3, #0
 800c488:	d017      	beq.n	800c4ba <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c48a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c48c:	3324      	adds	r3, #36	@ 0x24
 800c48e:	687a      	ldr	r2, [r7, #4]
 800c490:	4611      	mov	r1, r2
 800c492:	4618      	mov	r0, r3
 800c494:	f000 fdb0 	bl	800cff8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c498:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c49a:	f000 f8b7 	bl	800c60c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c49e:	f000 fbe5 	bl	800cc6c <xTaskResumeAll>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d189      	bne.n	800c3bc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c4a8:	4b0f      	ldr	r3, [pc, #60]	@ (800c4e8 <xQueueReceive+0x1c0>)
 800c4aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4ae:	601a      	str	r2, [r3, #0]
 800c4b0:	f3bf 8f4f 	dsb	sy
 800c4b4:	f3bf 8f6f 	isb	sy
 800c4b8:	e780      	b.n	800c3bc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c4ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4bc:	f000 f8a6 	bl	800c60c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4c0:	f000 fbd4 	bl	800cc6c <xTaskResumeAll>
 800c4c4:	e77a      	b.n	800c3bc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c4c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4c8:	f000 f8a0 	bl	800c60c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c4cc:	f000 fbce 	bl	800cc6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c4d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4d2:	f000 f8ed 	bl	800c6b0 <prvIsQueueEmpty>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	f43f af6f 	beq.w	800c3bc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c4de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3730      	adds	r7, #48	@ 0x30
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}
 800c4e8:	e000ed04 	.word	0xe000ed04

0800c4ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b086      	sub	sp, #24
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	60f8      	str	r0, [r7, #12]
 800c4f4:	60b9      	str	r1, [r7, #8]
 800c4f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c500:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c506:	2b00      	cmp	r3, #0
 800c508:	d10d      	bne.n	800c526 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d14d      	bne.n	800c5ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	689b      	ldr	r3, [r3, #8]
 800c516:	4618      	mov	r0, r3
 800c518:	f000 ff9e 	bl	800d458 <xTaskPriorityDisinherit>
 800c51c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	2200      	movs	r2, #0
 800c522:	609a      	str	r2, [r3, #8]
 800c524:	e043      	b.n	800c5ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d119      	bne.n	800c560 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	6858      	ldr	r0, [r3, #4]
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c534:	461a      	mov	r2, r3
 800c536:	68b9      	ldr	r1, [r7, #8]
 800c538:	f003 fcdd 	bl	800fef6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	685a      	ldr	r2, [r3, #4]
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c544:	441a      	add	r2, r3
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	685a      	ldr	r2, [r3, #4]
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	689b      	ldr	r3, [r3, #8]
 800c552:	429a      	cmp	r2, r3
 800c554:	d32b      	bcc.n	800c5ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681a      	ldr	r2, [r3, #0]
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	605a      	str	r2, [r3, #4]
 800c55e:	e026      	b.n	800c5ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	68d8      	ldr	r0, [r3, #12]
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c568:	461a      	mov	r2, r3
 800c56a:	68b9      	ldr	r1, [r7, #8]
 800c56c:	f003 fcc3 	bl	800fef6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	68da      	ldr	r2, [r3, #12]
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c578:	425b      	negs	r3, r3
 800c57a:	441a      	add	r2, r3
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	68da      	ldr	r2, [r3, #12]
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	429a      	cmp	r2, r3
 800c58a:	d207      	bcs.n	800c59c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	689a      	ldr	r2, [r3, #8]
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c594:	425b      	negs	r3, r3
 800c596:	441a      	add	r2, r3
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2b02      	cmp	r3, #2
 800c5a0:	d105      	bne.n	800c5ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d002      	beq.n	800c5ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	3b01      	subs	r3, #1
 800c5ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	1c5a      	adds	r2, r3, #1
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c5b6:	697b      	ldr	r3, [r7, #20]
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3718      	adds	r7, #24
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}

0800c5c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b082      	sub	sp, #8
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d018      	beq.n	800c604 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	68da      	ldr	r2, [r3, #12]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5da:	441a      	add	r2, r3
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	68da      	ldr	r2, [r3, #12]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	689b      	ldr	r3, [r3, #8]
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d303      	bcc.n	800c5f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681a      	ldr	r2, [r3, #0]
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	68d9      	ldr	r1, [r3, #12]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5fc:	461a      	mov	r2, r3
 800c5fe:	6838      	ldr	r0, [r7, #0]
 800c600:	f003 fc79 	bl	800fef6 <memcpy>
	}
}
 800c604:	bf00      	nop
 800c606:	3708      	adds	r7, #8
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}

0800c60c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b084      	sub	sp, #16
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c614:	f001 fd48 	bl	800e0a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c61e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c620:	e011      	b.n	800c646 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c626:	2b00      	cmp	r3, #0
 800c628:	d012      	beq.n	800c650 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	3324      	adds	r3, #36	@ 0x24
 800c62e:	4618      	mov	r0, r3
 800c630:	f000 fd34 	bl	800d09c <xTaskRemoveFromEventList>
 800c634:	4603      	mov	r3, r0
 800c636:	2b00      	cmp	r3, #0
 800c638:	d001      	beq.n	800c63e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c63a:	f000 fe0d 	bl	800d258 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c63e:	7bfb      	ldrb	r3, [r7, #15]
 800c640:	3b01      	subs	r3, #1
 800c642:	b2db      	uxtb	r3, r3
 800c644:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	dce9      	bgt.n	800c622 <prvUnlockQueue+0x16>
 800c64e:	e000      	b.n	800c652 <prvUnlockQueue+0x46>
					break;
 800c650:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	22ff      	movs	r2, #255	@ 0xff
 800c656:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c65a:	f001 fd57 	bl	800e10c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c65e:	f001 fd23 	bl	800e0a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c668:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c66a:	e011      	b.n	800c690 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	691b      	ldr	r3, [r3, #16]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d012      	beq.n	800c69a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	3310      	adds	r3, #16
 800c678:	4618      	mov	r0, r3
 800c67a:	f000 fd0f 	bl	800d09c <xTaskRemoveFromEventList>
 800c67e:	4603      	mov	r3, r0
 800c680:	2b00      	cmp	r3, #0
 800c682:	d001      	beq.n	800c688 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c684:	f000 fde8 	bl	800d258 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c688:	7bbb      	ldrb	r3, [r7, #14]
 800c68a:	3b01      	subs	r3, #1
 800c68c:	b2db      	uxtb	r3, r3
 800c68e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c690:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c694:	2b00      	cmp	r3, #0
 800c696:	dce9      	bgt.n	800c66c <prvUnlockQueue+0x60>
 800c698:	e000      	b.n	800c69c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c69a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	22ff      	movs	r2, #255	@ 0xff
 800c6a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c6a4:	f001 fd32 	bl	800e10c <vPortExitCritical>
}
 800c6a8:	bf00      	nop
 800c6aa:	3710      	adds	r7, #16
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}

0800c6b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b084      	sub	sp, #16
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c6b8:	f001 fcf6 	bl	800e0a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d102      	bne.n	800c6ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	60fb      	str	r3, [r7, #12]
 800c6c8:	e001      	b.n	800c6ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c6ce:	f001 fd1d 	bl	800e10c <vPortExitCritical>

	return xReturn;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3710      	adds	r7, #16
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b084      	sub	sp, #16
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c6e4:	f001 fce0 	bl	800e0a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d102      	bne.n	800c6fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	60fb      	str	r3, [r7, #12]
 800c6f8:	e001      	b.n	800c6fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c6fe:	f001 fd05 	bl	800e10c <vPortExitCritical>

	return xReturn;
 800c702:	68fb      	ldr	r3, [r7, #12]
}
 800c704:	4618      	mov	r0, r3
 800c706:	3710      	adds	r7, #16
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}

0800c70c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c70c:	b480      	push	{r7}
 800c70e:	b085      	sub	sp, #20
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c716:	2300      	movs	r3, #0
 800c718:	60fb      	str	r3, [r7, #12]
 800c71a:	e014      	b.n	800c746 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c71c:	4a0f      	ldr	r2, [pc, #60]	@ (800c75c <vQueueAddToRegistry+0x50>)
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d10b      	bne.n	800c740 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c728:	490c      	ldr	r1, [pc, #48]	@ (800c75c <vQueueAddToRegistry+0x50>)
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	683a      	ldr	r2, [r7, #0]
 800c72e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c732:	4a0a      	ldr	r2, [pc, #40]	@ (800c75c <vQueueAddToRegistry+0x50>)
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	00db      	lsls	r3, r3, #3
 800c738:	4413      	add	r3, r2
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c73e:	e006      	b.n	800c74e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	3301      	adds	r3, #1
 800c744:	60fb      	str	r3, [r7, #12]
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	2b07      	cmp	r3, #7
 800c74a:	d9e7      	bls.n	800c71c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c74c:	bf00      	nop
 800c74e:	bf00      	nop
 800c750:	3714      	adds	r7, #20
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr
 800c75a:	bf00      	nop
 800c75c:	20000db0 	.word	0x20000db0

0800c760 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c760:	b580      	push	{r7, lr}
 800c762:	b086      	sub	sp, #24
 800c764:	af00      	add	r7, sp, #0
 800c766:	60f8      	str	r0, [r7, #12]
 800c768:	60b9      	str	r1, [r7, #8]
 800c76a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c770:	f001 fc9a 	bl	800e0a8 <vPortEnterCritical>
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c77a:	b25b      	sxtb	r3, r3
 800c77c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c780:	d103      	bne.n	800c78a <vQueueWaitForMessageRestricted+0x2a>
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	2200      	movs	r2, #0
 800c786:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c790:	b25b      	sxtb	r3, r3
 800c792:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c796:	d103      	bne.n	800c7a0 <vQueueWaitForMessageRestricted+0x40>
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	2200      	movs	r2, #0
 800c79c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c7a0:	f001 fcb4 	bl	800e10c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d106      	bne.n	800c7ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	3324      	adds	r3, #36	@ 0x24
 800c7b0:	687a      	ldr	r2, [r7, #4]
 800c7b2:	68b9      	ldr	r1, [r7, #8]
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f000 fc45 	bl	800d044 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c7ba:	6978      	ldr	r0, [r7, #20]
 800c7bc:	f7ff ff26 	bl	800c60c <prvUnlockQueue>
	}
 800c7c0:	bf00      	nop
 800c7c2:	3718      	adds	r7, #24
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}

0800c7c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b08e      	sub	sp, #56	@ 0x38
 800c7cc:	af04      	add	r7, sp, #16
 800c7ce:	60f8      	str	r0, [r7, #12]
 800c7d0:	60b9      	str	r1, [r7, #8]
 800c7d2:	607a      	str	r2, [r7, #4]
 800c7d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c7d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d10b      	bne.n	800c7f4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800c7dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7e0:	f383 8811 	msr	BASEPRI, r3
 800c7e4:	f3bf 8f6f 	isb	sy
 800c7e8:	f3bf 8f4f 	dsb	sy
 800c7ec:	623b      	str	r3, [r7, #32]
}
 800c7ee:	bf00      	nop
 800c7f0:	bf00      	nop
 800c7f2:	e7fd      	b.n	800c7f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c7f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d10b      	bne.n	800c812 <xTaskCreateStatic+0x4a>
	__asm volatile
 800c7fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7fe:	f383 8811 	msr	BASEPRI, r3
 800c802:	f3bf 8f6f 	isb	sy
 800c806:	f3bf 8f4f 	dsb	sy
 800c80a:	61fb      	str	r3, [r7, #28]
}
 800c80c:	bf00      	nop
 800c80e:	bf00      	nop
 800c810:	e7fd      	b.n	800c80e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c812:	235c      	movs	r3, #92	@ 0x5c
 800c814:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c816:	693b      	ldr	r3, [r7, #16]
 800c818:	2b5c      	cmp	r3, #92	@ 0x5c
 800c81a:	d00b      	beq.n	800c834 <xTaskCreateStatic+0x6c>
	__asm volatile
 800c81c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c820:	f383 8811 	msr	BASEPRI, r3
 800c824:	f3bf 8f6f 	isb	sy
 800c828:	f3bf 8f4f 	dsb	sy
 800c82c:	61bb      	str	r3, [r7, #24]
}
 800c82e:	bf00      	nop
 800c830:	bf00      	nop
 800c832:	e7fd      	b.n	800c830 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c834:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d01e      	beq.n	800c87a <xTaskCreateStatic+0xb2>
 800c83c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d01b      	beq.n	800c87a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c844:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c848:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c84a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c84c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c84e:	2202      	movs	r2, #2
 800c850:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c854:	2300      	movs	r3, #0
 800c856:	9303      	str	r3, [sp, #12]
 800c858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c85a:	9302      	str	r3, [sp, #8]
 800c85c:	f107 0314 	add.w	r3, r7, #20
 800c860:	9301      	str	r3, [sp, #4]
 800c862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c864:	9300      	str	r3, [sp, #0]
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	687a      	ldr	r2, [r7, #4]
 800c86a:	68b9      	ldr	r1, [r7, #8]
 800c86c:	68f8      	ldr	r0, [r7, #12]
 800c86e:	f000 f850 	bl	800c912 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c872:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c874:	f000 f8de 	bl	800ca34 <prvAddNewTaskToReadyList>
 800c878:	e001      	b.n	800c87e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c87a:	2300      	movs	r3, #0
 800c87c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c87e:	697b      	ldr	r3, [r7, #20]
	}
 800c880:	4618      	mov	r0, r3
 800c882:	3728      	adds	r7, #40	@ 0x28
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}

0800c888 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b08c      	sub	sp, #48	@ 0x30
 800c88c:	af04      	add	r7, sp, #16
 800c88e:	60f8      	str	r0, [r7, #12]
 800c890:	60b9      	str	r1, [r7, #8]
 800c892:	603b      	str	r3, [r7, #0]
 800c894:	4613      	mov	r3, r2
 800c896:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c898:	88fb      	ldrh	r3, [r7, #6]
 800c89a:	009b      	lsls	r3, r3, #2
 800c89c:	4618      	mov	r0, r3
 800c89e:	f001 fd25 	bl	800e2ec <pvPortMalloc>
 800c8a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d00e      	beq.n	800c8c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c8aa:	205c      	movs	r0, #92	@ 0x5c
 800c8ac:	f001 fd1e 	bl	800e2ec <pvPortMalloc>
 800c8b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c8b2:	69fb      	ldr	r3, [r7, #28]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d003      	beq.n	800c8c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c8b8:	69fb      	ldr	r3, [r7, #28]
 800c8ba:	697a      	ldr	r2, [r7, #20]
 800c8bc:	631a      	str	r2, [r3, #48]	@ 0x30
 800c8be:	e005      	b.n	800c8cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c8c0:	6978      	ldr	r0, [r7, #20]
 800c8c2:	f001 fde1 	bl	800e488 <vPortFree>
 800c8c6:	e001      	b.n	800c8cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c8cc:	69fb      	ldr	r3, [r7, #28]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d017      	beq.n	800c902 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c8d2:	69fb      	ldr	r3, [r7, #28]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c8da:	88fa      	ldrh	r2, [r7, #6]
 800c8dc:	2300      	movs	r3, #0
 800c8de:	9303      	str	r3, [sp, #12]
 800c8e0:	69fb      	ldr	r3, [r7, #28]
 800c8e2:	9302      	str	r3, [sp, #8]
 800c8e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8e6:	9301      	str	r3, [sp, #4]
 800c8e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ea:	9300      	str	r3, [sp, #0]
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	68b9      	ldr	r1, [r7, #8]
 800c8f0:	68f8      	ldr	r0, [r7, #12]
 800c8f2:	f000 f80e 	bl	800c912 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c8f6:	69f8      	ldr	r0, [r7, #28]
 800c8f8:	f000 f89c 	bl	800ca34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	61bb      	str	r3, [r7, #24]
 800c900:	e002      	b.n	800c908 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c902:	f04f 33ff 	mov.w	r3, #4294967295
 800c906:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c908:	69bb      	ldr	r3, [r7, #24]
	}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3720      	adds	r7, #32
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}

0800c912 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c912:	b580      	push	{r7, lr}
 800c914:	b088      	sub	sp, #32
 800c916:	af00      	add	r7, sp, #0
 800c918:	60f8      	str	r0, [r7, #12]
 800c91a:	60b9      	str	r1, [r7, #8]
 800c91c:	607a      	str	r2, [r7, #4]
 800c91e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c922:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	009b      	lsls	r3, r3, #2
 800c928:	461a      	mov	r2, r3
 800c92a:	21a5      	movs	r1, #165	@ 0xa5
 800c92c:	f003 fa63 	bl	800fdf6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c932:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c93a:	3b01      	subs	r3, #1
 800c93c:	009b      	lsls	r3, r3, #2
 800c93e:	4413      	add	r3, r2
 800c940:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c942:	69bb      	ldr	r3, [r7, #24]
 800c944:	f023 0307 	bic.w	r3, r3, #7
 800c948:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c94a:	69bb      	ldr	r3, [r7, #24]
 800c94c:	f003 0307 	and.w	r3, r3, #7
 800c950:	2b00      	cmp	r3, #0
 800c952:	d00b      	beq.n	800c96c <prvInitialiseNewTask+0x5a>
	__asm volatile
 800c954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c958:	f383 8811 	msr	BASEPRI, r3
 800c95c:	f3bf 8f6f 	isb	sy
 800c960:	f3bf 8f4f 	dsb	sy
 800c964:	617b      	str	r3, [r7, #20]
}
 800c966:	bf00      	nop
 800c968:	bf00      	nop
 800c96a:	e7fd      	b.n	800c968 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d01f      	beq.n	800c9b2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c972:	2300      	movs	r3, #0
 800c974:	61fb      	str	r3, [r7, #28]
 800c976:	e012      	b.n	800c99e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c978:	68ba      	ldr	r2, [r7, #8]
 800c97a:	69fb      	ldr	r3, [r7, #28]
 800c97c:	4413      	add	r3, r2
 800c97e:	7819      	ldrb	r1, [r3, #0]
 800c980:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c982:	69fb      	ldr	r3, [r7, #28]
 800c984:	4413      	add	r3, r2
 800c986:	3334      	adds	r3, #52	@ 0x34
 800c988:	460a      	mov	r2, r1
 800c98a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c98c:	68ba      	ldr	r2, [r7, #8]
 800c98e:	69fb      	ldr	r3, [r7, #28]
 800c990:	4413      	add	r3, r2
 800c992:	781b      	ldrb	r3, [r3, #0]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d006      	beq.n	800c9a6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c998:	69fb      	ldr	r3, [r7, #28]
 800c99a:	3301      	adds	r3, #1
 800c99c:	61fb      	str	r3, [r7, #28]
 800c99e:	69fb      	ldr	r3, [r7, #28]
 800c9a0:	2b0f      	cmp	r3, #15
 800c9a2:	d9e9      	bls.n	800c978 <prvInitialiseNewTask+0x66>
 800c9a4:	e000      	b.n	800c9a8 <prvInitialiseNewTask+0x96>
			{
				break;
 800c9a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c9a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c9b0:	e003      	b.n	800c9ba <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c9b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c9ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9bc:	2b37      	cmp	r3, #55	@ 0x37
 800c9be:	d901      	bls.n	800c9c4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c9c0:	2337      	movs	r3, #55	@ 0x37
 800c9c2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c9c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c9c8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c9ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c9ce:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c9d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c9d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9d8:	3304      	adds	r3, #4
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7ff f966 	bl	800bcac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c9e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9e2:	3318      	adds	r3, #24
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f7ff f961 	bl	800bcac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c9ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9f2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c9f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c9fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9fe:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ca00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca02:	2200      	movs	r2, #0
 800ca04:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ca06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca08:	2200      	movs	r2, #0
 800ca0a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ca0e:	683a      	ldr	r2, [r7, #0]
 800ca10:	68f9      	ldr	r1, [r7, #12]
 800ca12:	69b8      	ldr	r0, [r7, #24]
 800ca14:	f001 fa1a 	bl	800de4c <pxPortInitialiseStack>
 800ca18:	4602      	mov	r2, r0
 800ca1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca1c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ca1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d002      	beq.n	800ca2a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ca24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca2a:	bf00      	nop
 800ca2c:	3720      	adds	r7, #32
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}
	...

0800ca34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b082      	sub	sp, #8
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ca3c:	f001 fb34 	bl	800e0a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ca40:	4b2d      	ldr	r3, [pc, #180]	@ (800caf8 <prvAddNewTaskToReadyList+0xc4>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	3301      	adds	r3, #1
 800ca46:	4a2c      	ldr	r2, [pc, #176]	@ (800caf8 <prvAddNewTaskToReadyList+0xc4>)
 800ca48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ca4a:	4b2c      	ldr	r3, [pc, #176]	@ (800cafc <prvAddNewTaskToReadyList+0xc8>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d109      	bne.n	800ca66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ca52:	4a2a      	ldr	r2, [pc, #168]	@ (800cafc <prvAddNewTaskToReadyList+0xc8>)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ca58:	4b27      	ldr	r3, [pc, #156]	@ (800caf8 <prvAddNewTaskToReadyList+0xc4>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	2b01      	cmp	r3, #1
 800ca5e:	d110      	bne.n	800ca82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ca60:	f000 fc1e 	bl	800d2a0 <prvInitialiseTaskLists>
 800ca64:	e00d      	b.n	800ca82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ca66:	4b26      	ldr	r3, [pc, #152]	@ (800cb00 <prvAddNewTaskToReadyList+0xcc>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d109      	bne.n	800ca82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ca6e:	4b23      	ldr	r3, [pc, #140]	@ (800cafc <prvAddNewTaskToReadyList+0xc8>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d802      	bhi.n	800ca82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ca7c:	4a1f      	ldr	r2, [pc, #124]	@ (800cafc <prvAddNewTaskToReadyList+0xc8>)
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ca82:	4b20      	ldr	r3, [pc, #128]	@ (800cb04 <prvAddNewTaskToReadyList+0xd0>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	3301      	adds	r3, #1
 800ca88:	4a1e      	ldr	r2, [pc, #120]	@ (800cb04 <prvAddNewTaskToReadyList+0xd0>)
 800ca8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ca8c:	4b1d      	ldr	r3, [pc, #116]	@ (800cb04 <prvAddNewTaskToReadyList+0xd0>)
 800ca8e:	681a      	ldr	r2, [r3, #0]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca98:	4b1b      	ldr	r3, [pc, #108]	@ (800cb08 <prvAddNewTaskToReadyList+0xd4>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	d903      	bls.n	800caa8 <prvAddNewTaskToReadyList+0x74>
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800caa4:	4a18      	ldr	r2, [pc, #96]	@ (800cb08 <prvAddNewTaskToReadyList+0xd4>)
 800caa6:	6013      	str	r3, [r2, #0]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800caac:	4613      	mov	r3, r2
 800caae:	009b      	lsls	r3, r3, #2
 800cab0:	4413      	add	r3, r2
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	4a15      	ldr	r2, [pc, #84]	@ (800cb0c <prvAddNewTaskToReadyList+0xd8>)
 800cab6:	441a      	add	r2, r3
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	3304      	adds	r3, #4
 800cabc:	4619      	mov	r1, r3
 800cabe:	4610      	mov	r0, r2
 800cac0:	f7ff f901 	bl	800bcc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cac4:	f001 fb22 	bl	800e10c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cac8:	4b0d      	ldr	r3, [pc, #52]	@ (800cb00 <prvAddNewTaskToReadyList+0xcc>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d00e      	beq.n	800caee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cad0:	4b0a      	ldr	r3, [pc, #40]	@ (800cafc <prvAddNewTaskToReadyList+0xc8>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cada:	429a      	cmp	r2, r3
 800cadc:	d207      	bcs.n	800caee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cade:	4b0c      	ldr	r3, [pc, #48]	@ (800cb10 <prvAddNewTaskToReadyList+0xdc>)
 800cae0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cae4:	601a      	str	r2, [r3, #0]
 800cae6:	f3bf 8f4f 	dsb	sy
 800caea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800caee:	bf00      	nop
 800caf0:	3708      	adds	r7, #8
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
 800caf6:	bf00      	nop
 800caf8:	200012c4 	.word	0x200012c4
 800cafc:	20000df0 	.word	0x20000df0
 800cb00:	200012d0 	.word	0x200012d0
 800cb04:	200012e0 	.word	0x200012e0
 800cb08:	200012cc 	.word	0x200012cc
 800cb0c:	20000df4 	.word	0x20000df4
 800cb10:	e000ed04 	.word	0xe000ed04

0800cb14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b084      	sub	sp, #16
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d018      	beq.n	800cb58 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cb26:	4b14      	ldr	r3, [pc, #80]	@ (800cb78 <vTaskDelay+0x64>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d00b      	beq.n	800cb46 <vTaskDelay+0x32>
	__asm volatile
 800cb2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb32:	f383 8811 	msr	BASEPRI, r3
 800cb36:	f3bf 8f6f 	isb	sy
 800cb3a:	f3bf 8f4f 	dsb	sy
 800cb3e:	60bb      	str	r3, [r7, #8]
}
 800cb40:	bf00      	nop
 800cb42:	bf00      	nop
 800cb44:	e7fd      	b.n	800cb42 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cb46:	f000 f883 	bl	800cc50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cb4a:	2100      	movs	r1, #0
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f000 fdcf 	bl	800d6f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cb52:	f000 f88b 	bl	800cc6c <xTaskResumeAll>
 800cb56:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d107      	bne.n	800cb6e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800cb5e:	4b07      	ldr	r3, [pc, #28]	@ (800cb7c <vTaskDelay+0x68>)
 800cb60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb64:	601a      	str	r2, [r3, #0]
 800cb66:	f3bf 8f4f 	dsb	sy
 800cb6a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cb6e:	bf00      	nop
 800cb70:	3710      	adds	r7, #16
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}
 800cb76:	bf00      	nop
 800cb78:	200012ec 	.word	0x200012ec
 800cb7c:	e000ed04 	.word	0xe000ed04

0800cb80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b08a      	sub	sp, #40	@ 0x28
 800cb84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cb86:	2300      	movs	r3, #0
 800cb88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cb8e:	463a      	mov	r2, r7
 800cb90:	1d39      	adds	r1, r7, #4
 800cb92:	f107 0308 	add.w	r3, r7, #8
 800cb96:	4618      	mov	r0, r3
 800cb98:	f7ff f834 	bl	800bc04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cb9c:	6839      	ldr	r1, [r7, #0]
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	68ba      	ldr	r2, [r7, #8]
 800cba2:	9202      	str	r2, [sp, #8]
 800cba4:	9301      	str	r3, [sp, #4]
 800cba6:	2300      	movs	r3, #0
 800cba8:	9300      	str	r3, [sp, #0]
 800cbaa:	2300      	movs	r3, #0
 800cbac:	460a      	mov	r2, r1
 800cbae:	4922      	ldr	r1, [pc, #136]	@ (800cc38 <vTaskStartScheduler+0xb8>)
 800cbb0:	4822      	ldr	r0, [pc, #136]	@ (800cc3c <vTaskStartScheduler+0xbc>)
 800cbb2:	f7ff fe09 	bl	800c7c8 <xTaskCreateStatic>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	4a21      	ldr	r2, [pc, #132]	@ (800cc40 <vTaskStartScheduler+0xc0>)
 800cbba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cbbc:	4b20      	ldr	r3, [pc, #128]	@ (800cc40 <vTaskStartScheduler+0xc0>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d002      	beq.n	800cbca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	617b      	str	r3, [r7, #20]
 800cbc8:	e001      	b.n	800cbce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	2b01      	cmp	r3, #1
 800cbd2:	d102      	bne.n	800cbda <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cbd4:	f000 fde0 	bl	800d798 <xTimerCreateTimerTask>
 800cbd8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	2b01      	cmp	r3, #1
 800cbde:	d116      	bne.n	800cc0e <vTaskStartScheduler+0x8e>
	__asm volatile
 800cbe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbe4:	f383 8811 	msr	BASEPRI, r3
 800cbe8:	f3bf 8f6f 	isb	sy
 800cbec:	f3bf 8f4f 	dsb	sy
 800cbf0:	613b      	str	r3, [r7, #16]
}
 800cbf2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cbf4:	4b13      	ldr	r3, [pc, #76]	@ (800cc44 <vTaskStartScheduler+0xc4>)
 800cbf6:	f04f 32ff 	mov.w	r2, #4294967295
 800cbfa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cbfc:	4b12      	ldr	r3, [pc, #72]	@ (800cc48 <vTaskStartScheduler+0xc8>)
 800cbfe:	2201      	movs	r2, #1
 800cc00:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cc02:	4b12      	ldr	r3, [pc, #72]	@ (800cc4c <vTaskStartScheduler+0xcc>)
 800cc04:	2200      	movs	r2, #0
 800cc06:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cc08:	f001 f9aa 	bl	800df60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cc0c:	e00f      	b.n	800cc2e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc14:	d10b      	bne.n	800cc2e <vTaskStartScheduler+0xae>
	__asm volatile
 800cc16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc1a:	f383 8811 	msr	BASEPRI, r3
 800cc1e:	f3bf 8f6f 	isb	sy
 800cc22:	f3bf 8f4f 	dsb	sy
 800cc26:	60fb      	str	r3, [r7, #12]
}
 800cc28:	bf00      	nop
 800cc2a:	bf00      	nop
 800cc2c:	e7fd      	b.n	800cc2a <vTaskStartScheduler+0xaa>
}
 800cc2e:	bf00      	nop
 800cc30:	3718      	adds	r7, #24
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	080128bc 	.word	0x080128bc
 800cc3c:	0800d271 	.word	0x0800d271
 800cc40:	200012e8 	.word	0x200012e8
 800cc44:	200012e4 	.word	0x200012e4
 800cc48:	200012d0 	.word	0x200012d0
 800cc4c:	200012c8 	.word	0x200012c8

0800cc50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cc50:	b480      	push	{r7}
 800cc52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cc54:	4b04      	ldr	r3, [pc, #16]	@ (800cc68 <vTaskSuspendAll+0x18>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	3301      	adds	r3, #1
 800cc5a:	4a03      	ldr	r2, [pc, #12]	@ (800cc68 <vTaskSuspendAll+0x18>)
 800cc5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cc5e:	bf00      	nop
 800cc60:	46bd      	mov	sp, r7
 800cc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc66:	4770      	bx	lr
 800cc68:	200012ec 	.word	0x200012ec

0800cc6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b084      	sub	sp, #16
 800cc70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cc72:	2300      	movs	r3, #0
 800cc74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cc76:	2300      	movs	r3, #0
 800cc78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cc7a:	4b42      	ldr	r3, [pc, #264]	@ (800cd84 <xTaskResumeAll+0x118>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d10b      	bne.n	800cc9a <xTaskResumeAll+0x2e>
	__asm volatile
 800cc82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc86:	f383 8811 	msr	BASEPRI, r3
 800cc8a:	f3bf 8f6f 	isb	sy
 800cc8e:	f3bf 8f4f 	dsb	sy
 800cc92:	603b      	str	r3, [r7, #0]
}
 800cc94:	bf00      	nop
 800cc96:	bf00      	nop
 800cc98:	e7fd      	b.n	800cc96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cc9a:	f001 fa05 	bl	800e0a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cc9e:	4b39      	ldr	r3, [pc, #228]	@ (800cd84 <xTaskResumeAll+0x118>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	3b01      	subs	r3, #1
 800cca4:	4a37      	ldr	r2, [pc, #220]	@ (800cd84 <xTaskResumeAll+0x118>)
 800cca6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cca8:	4b36      	ldr	r3, [pc, #216]	@ (800cd84 <xTaskResumeAll+0x118>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d162      	bne.n	800cd76 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ccb0:	4b35      	ldr	r3, [pc, #212]	@ (800cd88 <xTaskResumeAll+0x11c>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d05e      	beq.n	800cd76 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ccb8:	e02f      	b.n	800cd1a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccba:	4b34      	ldr	r3, [pc, #208]	@ (800cd8c <xTaskResumeAll+0x120>)
 800ccbc:	68db      	ldr	r3, [r3, #12]
 800ccbe:	68db      	ldr	r3, [r3, #12]
 800ccc0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	3318      	adds	r3, #24
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f7ff f85a 	bl	800bd80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	3304      	adds	r3, #4
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f7ff f855 	bl	800bd80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccda:	4b2d      	ldr	r3, [pc, #180]	@ (800cd90 <xTaskResumeAll+0x124>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	429a      	cmp	r2, r3
 800cce0:	d903      	bls.n	800ccea <xTaskResumeAll+0x7e>
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cce6:	4a2a      	ldr	r2, [pc, #168]	@ (800cd90 <xTaskResumeAll+0x124>)
 800cce8:	6013      	str	r3, [r2, #0]
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccee:	4613      	mov	r3, r2
 800ccf0:	009b      	lsls	r3, r3, #2
 800ccf2:	4413      	add	r3, r2
 800ccf4:	009b      	lsls	r3, r3, #2
 800ccf6:	4a27      	ldr	r2, [pc, #156]	@ (800cd94 <xTaskResumeAll+0x128>)
 800ccf8:	441a      	add	r2, r3
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	3304      	adds	r3, #4
 800ccfe:	4619      	mov	r1, r3
 800cd00:	4610      	mov	r0, r2
 800cd02:	f7fe ffe0 	bl	800bcc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd0a:	4b23      	ldr	r3, [pc, #140]	@ (800cd98 <xTaskResumeAll+0x12c>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d302      	bcc.n	800cd1a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800cd14:	4b21      	ldr	r3, [pc, #132]	@ (800cd9c <xTaskResumeAll+0x130>)
 800cd16:	2201      	movs	r2, #1
 800cd18:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cd1a:	4b1c      	ldr	r3, [pc, #112]	@ (800cd8c <xTaskResumeAll+0x120>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d1cb      	bne.n	800ccba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d001      	beq.n	800cd2c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cd28:	f000 fb58 	bl	800d3dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cd2c:	4b1c      	ldr	r3, [pc, #112]	@ (800cda0 <xTaskResumeAll+0x134>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d010      	beq.n	800cd5a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cd38:	f000 f846 	bl	800cdc8 <xTaskIncrementTick>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d002      	beq.n	800cd48 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800cd42:	4b16      	ldr	r3, [pc, #88]	@ (800cd9c <xTaskResumeAll+0x130>)
 800cd44:	2201      	movs	r2, #1
 800cd46:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	3b01      	subs	r3, #1
 800cd4c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d1f1      	bne.n	800cd38 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800cd54:	4b12      	ldr	r3, [pc, #72]	@ (800cda0 <xTaskResumeAll+0x134>)
 800cd56:	2200      	movs	r2, #0
 800cd58:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cd5a:	4b10      	ldr	r3, [pc, #64]	@ (800cd9c <xTaskResumeAll+0x130>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d009      	beq.n	800cd76 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cd62:	2301      	movs	r3, #1
 800cd64:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cd66:	4b0f      	ldr	r3, [pc, #60]	@ (800cda4 <xTaskResumeAll+0x138>)
 800cd68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd6c:	601a      	str	r2, [r3, #0]
 800cd6e:	f3bf 8f4f 	dsb	sy
 800cd72:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cd76:	f001 f9c9 	bl	800e10c <vPortExitCritical>

	return xAlreadyYielded;
 800cd7a:	68bb      	ldr	r3, [r7, #8]
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3710      	adds	r7, #16
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}
 800cd84:	200012ec 	.word	0x200012ec
 800cd88:	200012c4 	.word	0x200012c4
 800cd8c:	20001284 	.word	0x20001284
 800cd90:	200012cc 	.word	0x200012cc
 800cd94:	20000df4 	.word	0x20000df4
 800cd98:	20000df0 	.word	0x20000df0
 800cd9c:	200012d8 	.word	0x200012d8
 800cda0:	200012d4 	.word	0x200012d4
 800cda4:	e000ed04 	.word	0xe000ed04

0800cda8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cda8:	b480      	push	{r7}
 800cdaa:	b083      	sub	sp, #12
 800cdac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cdae:	4b05      	ldr	r3, [pc, #20]	@ (800cdc4 <xTaskGetTickCount+0x1c>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cdb4:	687b      	ldr	r3, [r7, #4]
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	370c      	adds	r7, #12
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr
 800cdc2:	bf00      	nop
 800cdc4:	200012c8 	.word	0x200012c8

0800cdc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b086      	sub	sp, #24
 800cdcc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cdd2:	4b4f      	ldr	r3, [pc, #316]	@ (800cf10 <xTaskIncrementTick+0x148>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	f040 8090 	bne.w	800cefc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cddc:	4b4d      	ldr	r3, [pc, #308]	@ (800cf14 <xTaskIncrementTick+0x14c>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	3301      	adds	r3, #1
 800cde2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cde4:	4a4b      	ldr	r2, [pc, #300]	@ (800cf14 <xTaskIncrementTick+0x14c>)
 800cde6:	693b      	ldr	r3, [r7, #16]
 800cde8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d121      	bne.n	800ce34 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800cdf0:	4b49      	ldr	r3, [pc, #292]	@ (800cf18 <xTaskIncrementTick+0x150>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d00b      	beq.n	800ce12 <xTaskIncrementTick+0x4a>
	__asm volatile
 800cdfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdfe:	f383 8811 	msr	BASEPRI, r3
 800ce02:	f3bf 8f6f 	isb	sy
 800ce06:	f3bf 8f4f 	dsb	sy
 800ce0a:	603b      	str	r3, [r7, #0]
}
 800ce0c:	bf00      	nop
 800ce0e:	bf00      	nop
 800ce10:	e7fd      	b.n	800ce0e <xTaskIncrementTick+0x46>
 800ce12:	4b41      	ldr	r3, [pc, #260]	@ (800cf18 <xTaskIncrementTick+0x150>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	60fb      	str	r3, [r7, #12]
 800ce18:	4b40      	ldr	r3, [pc, #256]	@ (800cf1c <xTaskIncrementTick+0x154>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	4a3e      	ldr	r2, [pc, #248]	@ (800cf18 <xTaskIncrementTick+0x150>)
 800ce1e:	6013      	str	r3, [r2, #0]
 800ce20:	4a3e      	ldr	r2, [pc, #248]	@ (800cf1c <xTaskIncrementTick+0x154>)
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	6013      	str	r3, [r2, #0]
 800ce26:	4b3e      	ldr	r3, [pc, #248]	@ (800cf20 <xTaskIncrementTick+0x158>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	4a3c      	ldr	r2, [pc, #240]	@ (800cf20 <xTaskIncrementTick+0x158>)
 800ce2e:	6013      	str	r3, [r2, #0]
 800ce30:	f000 fad4 	bl	800d3dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ce34:	4b3b      	ldr	r3, [pc, #236]	@ (800cf24 <xTaskIncrementTick+0x15c>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	693a      	ldr	r2, [r7, #16]
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d349      	bcc.n	800ced2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ce3e:	4b36      	ldr	r3, [pc, #216]	@ (800cf18 <xTaskIncrementTick+0x150>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d104      	bne.n	800ce52 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce48:	4b36      	ldr	r3, [pc, #216]	@ (800cf24 <xTaskIncrementTick+0x15c>)
 800ce4a:	f04f 32ff 	mov.w	r2, #4294967295
 800ce4e:	601a      	str	r2, [r3, #0]
					break;
 800ce50:	e03f      	b.n	800ced2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce52:	4b31      	ldr	r3, [pc, #196]	@ (800cf18 <xTaskIncrementTick+0x150>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	68db      	ldr	r3, [r3, #12]
 800ce58:	68db      	ldr	r3, [r3, #12]
 800ce5a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	685b      	ldr	r3, [r3, #4]
 800ce60:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ce62:	693a      	ldr	r2, [r7, #16]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	429a      	cmp	r2, r3
 800ce68:	d203      	bcs.n	800ce72 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ce6a:	4a2e      	ldr	r2, [pc, #184]	@ (800cf24 <xTaskIncrementTick+0x15c>)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ce70:	e02f      	b.n	800ced2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	3304      	adds	r3, #4
 800ce76:	4618      	mov	r0, r3
 800ce78:	f7fe ff82 	bl	800bd80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d004      	beq.n	800ce8e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	3318      	adds	r3, #24
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7fe ff79 	bl	800bd80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ce8e:	68bb      	ldr	r3, [r7, #8]
 800ce90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce92:	4b25      	ldr	r3, [pc, #148]	@ (800cf28 <xTaskIncrementTick+0x160>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	429a      	cmp	r2, r3
 800ce98:	d903      	bls.n	800cea2 <xTaskIncrementTick+0xda>
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce9e:	4a22      	ldr	r2, [pc, #136]	@ (800cf28 <xTaskIncrementTick+0x160>)
 800cea0:	6013      	str	r3, [r2, #0]
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cea6:	4613      	mov	r3, r2
 800cea8:	009b      	lsls	r3, r3, #2
 800ceaa:	4413      	add	r3, r2
 800ceac:	009b      	lsls	r3, r3, #2
 800ceae:	4a1f      	ldr	r2, [pc, #124]	@ (800cf2c <xTaskIncrementTick+0x164>)
 800ceb0:	441a      	add	r2, r3
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	3304      	adds	r3, #4
 800ceb6:	4619      	mov	r1, r3
 800ceb8:	4610      	mov	r0, r2
 800ceba:	f7fe ff04 	bl	800bcc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cec2:	4b1b      	ldr	r3, [pc, #108]	@ (800cf30 <xTaskIncrementTick+0x168>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d3b8      	bcc.n	800ce3e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800cecc:	2301      	movs	r3, #1
 800cece:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ced0:	e7b5      	b.n	800ce3e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ced2:	4b17      	ldr	r3, [pc, #92]	@ (800cf30 <xTaskIncrementTick+0x168>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ced8:	4914      	ldr	r1, [pc, #80]	@ (800cf2c <xTaskIncrementTick+0x164>)
 800ceda:	4613      	mov	r3, r2
 800cedc:	009b      	lsls	r3, r3, #2
 800cede:	4413      	add	r3, r2
 800cee0:	009b      	lsls	r3, r3, #2
 800cee2:	440b      	add	r3, r1
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	2b01      	cmp	r3, #1
 800cee8:	d901      	bls.n	800ceee <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800ceea:	2301      	movs	r3, #1
 800ceec:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ceee:	4b11      	ldr	r3, [pc, #68]	@ (800cf34 <xTaskIncrementTick+0x16c>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d007      	beq.n	800cf06 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800cef6:	2301      	movs	r3, #1
 800cef8:	617b      	str	r3, [r7, #20]
 800cefa:	e004      	b.n	800cf06 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cefc:	4b0e      	ldr	r3, [pc, #56]	@ (800cf38 <xTaskIncrementTick+0x170>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	3301      	adds	r3, #1
 800cf02:	4a0d      	ldr	r2, [pc, #52]	@ (800cf38 <xTaskIncrementTick+0x170>)
 800cf04:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cf06:	697b      	ldr	r3, [r7, #20]
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	3718      	adds	r7, #24
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}
 800cf10:	200012ec 	.word	0x200012ec
 800cf14:	200012c8 	.word	0x200012c8
 800cf18:	2000127c 	.word	0x2000127c
 800cf1c:	20001280 	.word	0x20001280
 800cf20:	200012dc 	.word	0x200012dc
 800cf24:	200012e4 	.word	0x200012e4
 800cf28:	200012cc 	.word	0x200012cc
 800cf2c:	20000df4 	.word	0x20000df4
 800cf30:	20000df0 	.word	0x20000df0
 800cf34:	200012d8 	.word	0x200012d8
 800cf38:	200012d4 	.word	0x200012d4

0800cf3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b085      	sub	sp, #20
 800cf40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cf42:	4b28      	ldr	r3, [pc, #160]	@ (800cfe4 <vTaskSwitchContext+0xa8>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d003      	beq.n	800cf52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cf4a:	4b27      	ldr	r3, [pc, #156]	@ (800cfe8 <vTaskSwitchContext+0xac>)
 800cf4c:	2201      	movs	r2, #1
 800cf4e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cf50:	e042      	b.n	800cfd8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800cf52:	4b25      	ldr	r3, [pc, #148]	@ (800cfe8 <vTaskSwitchContext+0xac>)
 800cf54:	2200      	movs	r2, #0
 800cf56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf58:	4b24      	ldr	r3, [pc, #144]	@ (800cfec <vTaskSwitchContext+0xb0>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	60fb      	str	r3, [r7, #12]
 800cf5e:	e011      	b.n	800cf84 <vTaskSwitchContext+0x48>
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d10b      	bne.n	800cf7e <vTaskSwitchContext+0x42>
	__asm volatile
 800cf66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf6a:	f383 8811 	msr	BASEPRI, r3
 800cf6e:	f3bf 8f6f 	isb	sy
 800cf72:	f3bf 8f4f 	dsb	sy
 800cf76:	607b      	str	r3, [r7, #4]
}
 800cf78:	bf00      	nop
 800cf7a:	bf00      	nop
 800cf7c:	e7fd      	b.n	800cf7a <vTaskSwitchContext+0x3e>
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	3b01      	subs	r3, #1
 800cf82:	60fb      	str	r3, [r7, #12]
 800cf84:	491a      	ldr	r1, [pc, #104]	@ (800cff0 <vTaskSwitchContext+0xb4>)
 800cf86:	68fa      	ldr	r2, [r7, #12]
 800cf88:	4613      	mov	r3, r2
 800cf8a:	009b      	lsls	r3, r3, #2
 800cf8c:	4413      	add	r3, r2
 800cf8e:	009b      	lsls	r3, r3, #2
 800cf90:	440b      	add	r3, r1
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d0e3      	beq.n	800cf60 <vTaskSwitchContext+0x24>
 800cf98:	68fa      	ldr	r2, [r7, #12]
 800cf9a:	4613      	mov	r3, r2
 800cf9c:	009b      	lsls	r3, r3, #2
 800cf9e:	4413      	add	r3, r2
 800cfa0:	009b      	lsls	r3, r3, #2
 800cfa2:	4a13      	ldr	r2, [pc, #76]	@ (800cff0 <vTaskSwitchContext+0xb4>)
 800cfa4:	4413      	add	r3, r2
 800cfa6:	60bb      	str	r3, [r7, #8]
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	685b      	ldr	r3, [r3, #4]
 800cfac:	685a      	ldr	r2, [r3, #4]
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	605a      	str	r2, [r3, #4]
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	685a      	ldr	r2, [r3, #4]
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	3308      	adds	r3, #8
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d104      	bne.n	800cfc8 <vTaskSwitchContext+0x8c>
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	685b      	ldr	r3, [r3, #4]
 800cfc2:	685a      	ldr	r2, [r3, #4]
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	605a      	str	r2, [r3, #4]
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	685b      	ldr	r3, [r3, #4]
 800cfcc:	68db      	ldr	r3, [r3, #12]
 800cfce:	4a09      	ldr	r2, [pc, #36]	@ (800cff4 <vTaskSwitchContext+0xb8>)
 800cfd0:	6013      	str	r3, [r2, #0]
 800cfd2:	4a06      	ldr	r2, [pc, #24]	@ (800cfec <vTaskSwitchContext+0xb0>)
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	6013      	str	r3, [r2, #0]
}
 800cfd8:	bf00      	nop
 800cfda:	3714      	adds	r7, #20
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe2:	4770      	bx	lr
 800cfe4:	200012ec 	.word	0x200012ec
 800cfe8:	200012d8 	.word	0x200012d8
 800cfec:	200012cc 	.word	0x200012cc
 800cff0:	20000df4 	.word	0x20000df4
 800cff4:	20000df0 	.word	0x20000df0

0800cff8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b084      	sub	sp, #16
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d10b      	bne.n	800d020 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d00c:	f383 8811 	msr	BASEPRI, r3
 800d010:	f3bf 8f6f 	isb	sy
 800d014:	f3bf 8f4f 	dsb	sy
 800d018:	60fb      	str	r3, [r7, #12]
}
 800d01a:	bf00      	nop
 800d01c:	bf00      	nop
 800d01e:	e7fd      	b.n	800d01c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d020:	4b07      	ldr	r3, [pc, #28]	@ (800d040 <vTaskPlaceOnEventList+0x48>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	3318      	adds	r3, #24
 800d026:	4619      	mov	r1, r3
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f7fe fe70 	bl	800bd0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d02e:	2101      	movs	r1, #1
 800d030:	6838      	ldr	r0, [r7, #0]
 800d032:	f000 fb5d 	bl	800d6f0 <prvAddCurrentTaskToDelayedList>
}
 800d036:	bf00      	nop
 800d038:	3710      	adds	r7, #16
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}
 800d03e:	bf00      	nop
 800d040:	20000df0 	.word	0x20000df0

0800d044 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d044:	b580      	push	{r7, lr}
 800d046:	b086      	sub	sp, #24
 800d048:	af00      	add	r7, sp, #0
 800d04a:	60f8      	str	r0, [r7, #12]
 800d04c:	60b9      	str	r1, [r7, #8]
 800d04e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d10b      	bne.n	800d06e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d05a:	f383 8811 	msr	BASEPRI, r3
 800d05e:	f3bf 8f6f 	isb	sy
 800d062:	f3bf 8f4f 	dsb	sy
 800d066:	617b      	str	r3, [r7, #20]
}
 800d068:	bf00      	nop
 800d06a:	bf00      	nop
 800d06c:	e7fd      	b.n	800d06a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d06e:	4b0a      	ldr	r3, [pc, #40]	@ (800d098 <vTaskPlaceOnEventListRestricted+0x54>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	3318      	adds	r3, #24
 800d074:	4619      	mov	r1, r3
 800d076:	68f8      	ldr	r0, [r7, #12]
 800d078:	f7fe fe25 	bl	800bcc6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d002      	beq.n	800d088 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d082:	f04f 33ff 	mov.w	r3, #4294967295
 800d086:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d088:	6879      	ldr	r1, [r7, #4]
 800d08a:	68b8      	ldr	r0, [r7, #8]
 800d08c:	f000 fb30 	bl	800d6f0 <prvAddCurrentTaskToDelayedList>
	}
 800d090:	bf00      	nop
 800d092:	3718      	adds	r7, #24
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}
 800d098:	20000df0 	.word	0x20000df0

0800d09c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b086      	sub	sp, #24
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	68db      	ldr	r3, [r3, #12]
 800d0a8:	68db      	ldr	r3, [r3, #12]
 800d0aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d10b      	bne.n	800d0ca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d0b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0b6:	f383 8811 	msr	BASEPRI, r3
 800d0ba:	f3bf 8f6f 	isb	sy
 800d0be:	f3bf 8f4f 	dsb	sy
 800d0c2:	60fb      	str	r3, [r7, #12]
}
 800d0c4:	bf00      	nop
 800d0c6:	bf00      	nop
 800d0c8:	e7fd      	b.n	800d0c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	3318      	adds	r3, #24
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f7fe fe56 	bl	800bd80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0d4:	4b1d      	ldr	r3, [pc, #116]	@ (800d14c <xTaskRemoveFromEventList+0xb0>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d11d      	bne.n	800d118 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d0dc:	693b      	ldr	r3, [r7, #16]
 800d0de:	3304      	adds	r3, #4
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f7fe fe4d 	bl	800bd80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0ea:	4b19      	ldr	r3, [pc, #100]	@ (800d150 <xTaskRemoveFromEventList+0xb4>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d903      	bls.n	800d0fa <xTaskRemoveFromEventList+0x5e>
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0f6:	4a16      	ldr	r2, [pc, #88]	@ (800d150 <xTaskRemoveFromEventList+0xb4>)
 800d0f8:	6013      	str	r3, [r2, #0]
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0fe:	4613      	mov	r3, r2
 800d100:	009b      	lsls	r3, r3, #2
 800d102:	4413      	add	r3, r2
 800d104:	009b      	lsls	r3, r3, #2
 800d106:	4a13      	ldr	r2, [pc, #76]	@ (800d154 <xTaskRemoveFromEventList+0xb8>)
 800d108:	441a      	add	r2, r3
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	3304      	adds	r3, #4
 800d10e:	4619      	mov	r1, r3
 800d110:	4610      	mov	r0, r2
 800d112:	f7fe fdd8 	bl	800bcc6 <vListInsertEnd>
 800d116:	e005      	b.n	800d124 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	3318      	adds	r3, #24
 800d11c:	4619      	mov	r1, r3
 800d11e:	480e      	ldr	r0, [pc, #56]	@ (800d158 <xTaskRemoveFromEventList+0xbc>)
 800d120:	f7fe fdd1 	bl	800bcc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d124:	693b      	ldr	r3, [r7, #16]
 800d126:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d128:	4b0c      	ldr	r3, [pc, #48]	@ (800d15c <xTaskRemoveFromEventList+0xc0>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d12e:	429a      	cmp	r2, r3
 800d130:	d905      	bls.n	800d13e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d132:	2301      	movs	r3, #1
 800d134:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d136:	4b0a      	ldr	r3, [pc, #40]	@ (800d160 <xTaskRemoveFromEventList+0xc4>)
 800d138:	2201      	movs	r2, #1
 800d13a:	601a      	str	r2, [r3, #0]
 800d13c:	e001      	b.n	800d142 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d13e:	2300      	movs	r3, #0
 800d140:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d142:	697b      	ldr	r3, [r7, #20]
}
 800d144:	4618      	mov	r0, r3
 800d146:	3718      	adds	r7, #24
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}
 800d14c:	200012ec 	.word	0x200012ec
 800d150:	200012cc 	.word	0x200012cc
 800d154:	20000df4 	.word	0x20000df4
 800d158:	20001284 	.word	0x20001284
 800d15c:	20000df0 	.word	0x20000df0
 800d160:	200012d8 	.word	0x200012d8

0800d164 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d164:	b480      	push	{r7}
 800d166:	b083      	sub	sp, #12
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d16c:	4b06      	ldr	r3, [pc, #24]	@ (800d188 <vTaskInternalSetTimeOutState+0x24>)
 800d16e:	681a      	ldr	r2, [r3, #0]
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d174:	4b05      	ldr	r3, [pc, #20]	@ (800d18c <vTaskInternalSetTimeOutState+0x28>)
 800d176:	681a      	ldr	r2, [r3, #0]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	605a      	str	r2, [r3, #4]
}
 800d17c:	bf00      	nop
 800d17e:	370c      	adds	r7, #12
 800d180:	46bd      	mov	sp, r7
 800d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d186:	4770      	bx	lr
 800d188:	200012dc 	.word	0x200012dc
 800d18c:	200012c8 	.word	0x200012c8

0800d190 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b088      	sub	sp, #32
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
 800d198:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d10b      	bne.n	800d1b8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d1a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1a4:	f383 8811 	msr	BASEPRI, r3
 800d1a8:	f3bf 8f6f 	isb	sy
 800d1ac:	f3bf 8f4f 	dsb	sy
 800d1b0:	613b      	str	r3, [r7, #16]
}
 800d1b2:	bf00      	nop
 800d1b4:	bf00      	nop
 800d1b6:	e7fd      	b.n	800d1b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d10b      	bne.n	800d1d6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d1be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1c2:	f383 8811 	msr	BASEPRI, r3
 800d1c6:	f3bf 8f6f 	isb	sy
 800d1ca:	f3bf 8f4f 	dsb	sy
 800d1ce:	60fb      	str	r3, [r7, #12]
}
 800d1d0:	bf00      	nop
 800d1d2:	bf00      	nop
 800d1d4:	e7fd      	b.n	800d1d2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d1d6:	f000 ff67 	bl	800e0a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d1da:	4b1d      	ldr	r3, [pc, #116]	@ (800d250 <xTaskCheckForTimeOut+0xc0>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	685b      	ldr	r3, [r3, #4]
 800d1e4:	69ba      	ldr	r2, [r7, #24]
 800d1e6:	1ad3      	subs	r3, r2, r3
 800d1e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1f2:	d102      	bne.n	800d1fa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	61fb      	str	r3, [r7, #28]
 800d1f8:	e023      	b.n	800d242 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681a      	ldr	r2, [r3, #0]
 800d1fe:	4b15      	ldr	r3, [pc, #84]	@ (800d254 <xTaskCheckForTimeOut+0xc4>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	429a      	cmp	r2, r3
 800d204:	d007      	beq.n	800d216 <xTaskCheckForTimeOut+0x86>
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	685b      	ldr	r3, [r3, #4]
 800d20a:	69ba      	ldr	r2, [r7, #24]
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d302      	bcc.n	800d216 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d210:	2301      	movs	r3, #1
 800d212:	61fb      	str	r3, [r7, #28]
 800d214:	e015      	b.n	800d242 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	697a      	ldr	r2, [r7, #20]
 800d21c:	429a      	cmp	r2, r3
 800d21e:	d20b      	bcs.n	800d238 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	681a      	ldr	r2, [r3, #0]
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	1ad2      	subs	r2, r2, r3
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f7ff ff99 	bl	800d164 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d232:	2300      	movs	r3, #0
 800d234:	61fb      	str	r3, [r7, #28]
 800d236:	e004      	b.n	800d242 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	2200      	movs	r2, #0
 800d23c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d23e:	2301      	movs	r3, #1
 800d240:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d242:	f000 ff63 	bl	800e10c <vPortExitCritical>

	return xReturn;
 800d246:	69fb      	ldr	r3, [r7, #28]
}
 800d248:	4618      	mov	r0, r3
 800d24a:	3720      	adds	r7, #32
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bd80      	pop	{r7, pc}
 800d250:	200012c8 	.word	0x200012c8
 800d254:	200012dc 	.word	0x200012dc

0800d258 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d258:	b480      	push	{r7}
 800d25a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d25c:	4b03      	ldr	r3, [pc, #12]	@ (800d26c <vTaskMissedYield+0x14>)
 800d25e:	2201      	movs	r2, #1
 800d260:	601a      	str	r2, [r3, #0]
}
 800d262:	bf00      	nop
 800d264:	46bd      	mov	sp, r7
 800d266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26a:	4770      	bx	lr
 800d26c:	200012d8 	.word	0x200012d8

0800d270 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b082      	sub	sp, #8
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d278:	f000 f852 	bl	800d320 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d27c:	4b06      	ldr	r3, [pc, #24]	@ (800d298 <prvIdleTask+0x28>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	2b01      	cmp	r3, #1
 800d282:	d9f9      	bls.n	800d278 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d284:	4b05      	ldr	r3, [pc, #20]	@ (800d29c <prvIdleTask+0x2c>)
 800d286:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d28a:	601a      	str	r2, [r3, #0]
 800d28c:	f3bf 8f4f 	dsb	sy
 800d290:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d294:	e7f0      	b.n	800d278 <prvIdleTask+0x8>
 800d296:	bf00      	nop
 800d298:	20000df4 	.word	0x20000df4
 800d29c:	e000ed04 	.word	0xe000ed04

0800d2a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b082      	sub	sp, #8
 800d2a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	607b      	str	r3, [r7, #4]
 800d2aa:	e00c      	b.n	800d2c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d2ac:	687a      	ldr	r2, [r7, #4]
 800d2ae:	4613      	mov	r3, r2
 800d2b0:	009b      	lsls	r3, r3, #2
 800d2b2:	4413      	add	r3, r2
 800d2b4:	009b      	lsls	r3, r3, #2
 800d2b6:	4a12      	ldr	r2, [pc, #72]	@ (800d300 <prvInitialiseTaskLists+0x60>)
 800d2b8:	4413      	add	r3, r2
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f7fe fcd6 	bl	800bc6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	3301      	adds	r3, #1
 800d2c4:	607b      	str	r3, [r7, #4]
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2b37      	cmp	r3, #55	@ 0x37
 800d2ca:	d9ef      	bls.n	800d2ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d2cc:	480d      	ldr	r0, [pc, #52]	@ (800d304 <prvInitialiseTaskLists+0x64>)
 800d2ce:	f7fe fccd 	bl	800bc6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d2d2:	480d      	ldr	r0, [pc, #52]	@ (800d308 <prvInitialiseTaskLists+0x68>)
 800d2d4:	f7fe fcca 	bl	800bc6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d2d8:	480c      	ldr	r0, [pc, #48]	@ (800d30c <prvInitialiseTaskLists+0x6c>)
 800d2da:	f7fe fcc7 	bl	800bc6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d2de:	480c      	ldr	r0, [pc, #48]	@ (800d310 <prvInitialiseTaskLists+0x70>)
 800d2e0:	f7fe fcc4 	bl	800bc6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d2e4:	480b      	ldr	r0, [pc, #44]	@ (800d314 <prvInitialiseTaskLists+0x74>)
 800d2e6:	f7fe fcc1 	bl	800bc6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d2ea:	4b0b      	ldr	r3, [pc, #44]	@ (800d318 <prvInitialiseTaskLists+0x78>)
 800d2ec:	4a05      	ldr	r2, [pc, #20]	@ (800d304 <prvInitialiseTaskLists+0x64>)
 800d2ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d2f0:	4b0a      	ldr	r3, [pc, #40]	@ (800d31c <prvInitialiseTaskLists+0x7c>)
 800d2f2:	4a05      	ldr	r2, [pc, #20]	@ (800d308 <prvInitialiseTaskLists+0x68>)
 800d2f4:	601a      	str	r2, [r3, #0]
}
 800d2f6:	bf00      	nop
 800d2f8:	3708      	adds	r7, #8
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}
 800d2fe:	bf00      	nop
 800d300:	20000df4 	.word	0x20000df4
 800d304:	20001254 	.word	0x20001254
 800d308:	20001268 	.word	0x20001268
 800d30c:	20001284 	.word	0x20001284
 800d310:	20001298 	.word	0x20001298
 800d314:	200012b0 	.word	0x200012b0
 800d318:	2000127c 	.word	0x2000127c
 800d31c:	20001280 	.word	0x20001280

0800d320 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b082      	sub	sp, #8
 800d324:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d326:	e019      	b.n	800d35c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d328:	f000 febe 	bl	800e0a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d32c:	4b10      	ldr	r3, [pc, #64]	@ (800d370 <prvCheckTasksWaitingTermination+0x50>)
 800d32e:	68db      	ldr	r3, [r3, #12]
 800d330:	68db      	ldr	r3, [r3, #12]
 800d332:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	3304      	adds	r3, #4
 800d338:	4618      	mov	r0, r3
 800d33a:	f7fe fd21 	bl	800bd80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d33e:	4b0d      	ldr	r3, [pc, #52]	@ (800d374 <prvCheckTasksWaitingTermination+0x54>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	3b01      	subs	r3, #1
 800d344:	4a0b      	ldr	r2, [pc, #44]	@ (800d374 <prvCheckTasksWaitingTermination+0x54>)
 800d346:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d348:	4b0b      	ldr	r3, [pc, #44]	@ (800d378 <prvCheckTasksWaitingTermination+0x58>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	3b01      	subs	r3, #1
 800d34e:	4a0a      	ldr	r2, [pc, #40]	@ (800d378 <prvCheckTasksWaitingTermination+0x58>)
 800d350:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d352:	f000 fedb 	bl	800e10c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f000 f810 	bl	800d37c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d35c:	4b06      	ldr	r3, [pc, #24]	@ (800d378 <prvCheckTasksWaitingTermination+0x58>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d1e1      	bne.n	800d328 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d364:	bf00      	nop
 800d366:	bf00      	nop
 800d368:	3708      	adds	r7, #8
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
 800d36e:	bf00      	nop
 800d370:	20001298 	.word	0x20001298
 800d374:	200012c4 	.word	0x200012c4
 800d378:	200012ac 	.word	0x200012ac

0800d37c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b084      	sub	sp, #16
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d108      	bne.n	800d3a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d392:	4618      	mov	r0, r3
 800d394:	f001 f878 	bl	800e488 <vPortFree>
				vPortFree( pxTCB );
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f001 f875 	bl	800e488 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d39e:	e019      	b.n	800d3d4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d3a6:	2b01      	cmp	r3, #1
 800d3a8:	d103      	bne.n	800d3b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f001 f86c 	bl	800e488 <vPortFree>
	}
 800d3b0:	e010      	b.n	800d3d4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d3b8:	2b02      	cmp	r3, #2
 800d3ba:	d00b      	beq.n	800d3d4 <prvDeleteTCB+0x58>
	__asm volatile
 800d3bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3c0:	f383 8811 	msr	BASEPRI, r3
 800d3c4:	f3bf 8f6f 	isb	sy
 800d3c8:	f3bf 8f4f 	dsb	sy
 800d3cc:	60fb      	str	r3, [r7, #12]
}
 800d3ce:	bf00      	nop
 800d3d0:	bf00      	nop
 800d3d2:	e7fd      	b.n	800d3d0 <prvDeleteTCB+0x54>
	}
 800d3d4:	bf00      	nop
 800d3d6:	3710      	adds	r7, #16
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}

0800d3dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d3dc:	b480      	push	{r7}
 800d3de:	b083      	sub	sp, #12
 800d3e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d3e2:	4b0c      	ldr	r3, [pc, #48]	@ (800d414 <prvResetNextTaskUnblockTime+0x38>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d104      	bne.n	800d3f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d3ec:	4b0a      	ldr	r3, [pc, #40]	@ (800d418 <prvResetNextTaskUnblockTime+0x3c>)
 800d3ee:	f04f 32ff 	mov.w	r2, #4294967295
 800d3f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d3f4:	e008      	b.n	800d408 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3f6:	4b07      	ldr	r3, [pc, #28]	@ (800d414 <prvResetNextTaskUnblockTime+0x38>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	68db      	ldr	r3, [r3, #12]
 800d3fc:	68db      	ldr	r3, [r3, #12]
 800d3fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	685b      	ldr	r3, [r3, #4]
 800d404:	4a04      	ldr	r2, [pc, #16]	@ (800d418 <prvResetNextTaskUnblockTime+0x3c>)
 800d406:	6013      	str	r3, [r2, #0]
}
 800d408:	bf00      	nop
 800d40a:	370c      	adds	r7, #12
 800d40c:	46bd      	mov	sp, r7
 800d40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d412:	4770      	bx	lr
 800d414:	2000127c 	.word	0x2000127c
 800d418:	200012e4 	.word	0x200012e4

0800d41c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d41c:	b480      	push	{r7}
 800d41e:	b083      	sub	sp, #12
 800d420:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d422:	4b0b      	ldr	r3, [pc, #44]	@ (800d450 <xTaskGetSchedulerState+0x34>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d102      	bne.n	800d430 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d42a:	2301      	movs	r3, #1
 800d42c:	607b      	str	r3, [r7, #4]
 800d42e:	e008      	b.n	800d442 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d430:	4b08      	ldr	r3, [pc, #32]	@ (800d454 <xTaskGetSchedulerState+0x38>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d102      	bne.n	800d43e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d438:	2302      	movs	r3, #2
 800d43a:	607b      	str	r3, [r7, #4]
 800d43c:	e001      	b.n	800d442 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d43e:	2300      	movs	r3, #0
 800d440:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d442:	687b      	ldr	r3, [r7, #4]
	}
 800d444:	4618      	mov	r0, r3
 800d446:	370c      	adds	r7, #12
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr
 800d450:	200012d0 	.word	0x200012d0
 800d454:	200012ec 	.word	0x200012ec

0800d458 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b086      	sub	sp, #24
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d464:	2300      	movs	r3, #0
 800d466:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d058      	beq.n	800d520 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d46e:	4b2f      	ldr	r3, [pc, #188]	@ (800d52c <xTaskPriorityDisinherit+0xd4>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	693a      	ldr	r2, [r7, #16]
 800d474:	429a      	cmp	r2, r3
 800d476:	d00b      	beq.n	800d490 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d47c:	f383 8811 	msr	BASEPRI, r3
 800d480:	f3bf 8f6f 	isb	sy
 800d484:	f3bf 8f4f 	dsb	sy
 800d488:	60fb      	str	r3, [r7, #12]
}
 800d48a:	bf00      	nop
 800d48c:	bf00      	nop
 800d48e:	e7fd      	b.n	800d48c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d494:	2b00      	cmp	r3, #0
 800d496:	d10b      	bne.n	800d4b0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d49c:	f383 8811 	msr	BASEPRI, r3
 800d4a0:	f3bf 8f6f 	isb	sy
 800d4a4:	f3bf 8f4f 	dsb	sy
 800d4a8:	60bb      	str	r3, [r7, #8]
}
 800d4aa:	bf00      	nop
 800d4ac:	bf00      	nop
 800d4ae:	e7fd      	b.n	800d4ac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d4b0:	693b      	ldr	r3, [r7, #16]
 800d4b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d4b4:	1e5a      	subs	r2, r3, #1
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	d02c      	beq.n	800d520 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d4c6:	693b      	ldr	r3, [r7, #16]
 800d4c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d128      	bne.n	800d520 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	3304      	adds	r3, #4
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f7fe fc54 	bl	800bd80 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d4ec:	693b      	ldr	r3, [r7, #16]
 800d4ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4f0:	4b0f      	ldr	r3, [pc, #60]	@ (800d530 <xTaskPriorityDisinherit+0xd8>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d903      	bls.n	800d500 <xTaskPriorityDisinherit+0xa8>
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4fc:	4a0c      	ldr	r2, [pc, #48]	@ (800d530 <xTaskPriorityDisinherit+0xd8>)
 800d4fe:	6013      	str	r3, [r2, #0]
 800d500:	693b      	ldr	r3, [r7, #16]
 800d502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d504:	4613      	mov	r3, r2
 800d506:	009b      	lsls	r3, r3, #2
 800d508:	4413      	add	r3, r2
 800d50a:	009b      	lsls	r3, r3, #2
 800d50c:	4a09      	ldr	r2, [pc, #36]	@ (800d534 <xTaskPriorityDisinherit+0xdc>)
 800d50e:	441a      	add	r2, r3
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	3304      	adds	r3, #4
 800d514:	4619      	mov	r1, r3
 800d516:	4610      	mov	r0, r2
 800d518:	f7fe fbd5 	bl	800bcc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d51c:	2301      	movs	r3, #1
 800d51e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d520:	697b      	ldr	r3, [r7, #20]
	}
 800d522:	4618      	mov	r0, r3
 800d524:	3718      	adds	r7, #24
 800d526:	46bd      	mov	sp, r7
 800d528:	bd80      	pop	{r7, pc}
 800d52a:	bf00      	nop
 800d52c:	20000df0 	.word	0x20000df0
 800d530:	200012cc 	.word	0x200012cc
 800d534:	20000df4 	.word	0x20000df4

0800d538 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b084      	sub	sp, #16
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800d542:	f000 fdb1 	bl	800e0a8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800d546:	4b1e      	ldr	r3, [pc, #120]	@ (800d5c0 <ulTaskNotifyTake+0x88>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d113      	bne.n	800d578 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d550:	4b1b      	ldr	r3, [pc, #108]	@ (800d5c0 <ulTaskNotifyTake+0x88>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	2201      	movs	r2, #1
 800d556:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d00b      	beq.n	800d578 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d560:	2101      	movs	r1, #1
 800d562:	6838      	ldr	r0, [r7, #0]
 800d564:	f000 f8c4 	bl	800d6f0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d568:	4b16      	ldr	r3, [pc, #88]	@ (800d5c4 <ulTaskNotifyTake+0x8c>)
 800d56a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d56e:	601a      	str	r2, [r3, #0]
 800d570:	f3bf 8f4f 	dsb	sy
 800d574:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d578:	f000 fdc8 	bl	800e10c <vPortExitCritical>

		taskENTER_CRITICAL();
 800d57c:	f000 fd94 	bl	800e0a8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800d580:	4b0f      	ldr	r3, [pc, #60]	@ (800d5c0 <ulTaskNotifyTake+0x88>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d586:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d00c      	beq.n	800d5a8 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d004      	beq.n	800d59e <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800d594:	4b0a      	ldr	r3, [pc, #40]	@ (800d5c0 <ulTaskNotifyTake+0x88>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	2200      	movs	r2, #0
 800d59a:	655a      	str	r2, [r3, #84]	@ 0x54
 800d59c:	e004      	b.n	800d5a8 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800d59e:	4b08      	ldr	r3, [pc, #32]	@ (800d5c0 <ulTaskNotifyTake+0x88>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	68fa      	ldr	r2, [r7, #12]
 800d5a4:	3a01      	subs	r2, #1
 800d5a6:	655a      	str	r2, [r3, #84]	@ 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d5a8:	4b05      	ldr	r3, [pc, #20]	@ (800d5c0 <ulTaskNotifyTake+0x88>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 800d5b2:	f000 fdab 	bl	800e10c <vPortExitCritical>

		return ulReturn;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
	}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3710      	adds	r7, #16
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}
 800d5c0:	20000df0 	.word	0x20000df0
 800d5c4:	e000ed04 	.word	0xe000ed04

0800d5c8 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b08a      	sub	sp, #40	@ 0x28
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d10b      	bne.n	800d5f0 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800d5d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5dc:	f383 8811 	msr	BASEPRI, r3
 800d5e0:	f3bf 8f6f 	isb	sy
 800d5e4:	f3bf 8f4f 	dsb	sy
 800d5e8:	61bb      	str	r3, [r7, #24]
}
 800d5ea:	bf00      	nop
 800d5ec:	bf00      	nop
 800d5ee:	e7fd      	b.n	800d5ec <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d5f0:	f000 fe3a 	bl	800e268 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800d5f8:	f3ef 8211 	mrs	r2, BASEPRI
 800d5fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d600:	f383 8811 	msr	BASEPRI, r3
 800d604:	f3bf 8f6f 	isb	sy
 800d608:	f3bf 8f4f 	dsb	sy
 800d60c:	617a      	str	r2, [r7, #20]
 800d60e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d610:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d612:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d616:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800d61a:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d61c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d61e:	2202      	movs	r2, #2
 800d620:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800d624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d628:	1c5a      	adds	r2, r3, #1
 800d62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d62c:	655a      	str	r2, [r3, #84]	@ 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d62e:	7ffb      	ldrb	r3, [r7, #31]
 800d630:	2b01      	cmp	r3, #1
 800d632:	d147      	bne.n	800d6c4 <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d00b      	beq.n	800d654 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 800d63c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d640:	f383 8811 	msr	BASEPRI, r3
 800d644:	f3bf 8f6f 	isb	sy
 800d648:	f3bf 8f4f 	dsb	sy
 800d64c:	60fb      	str	r3, [r7, #12]
}
 800d64e:	bf00      	nop
 800d650:	bf00      	nop
 800d652:	e7fd      	b.n	800d650 <vTaskNotifyGiveFromISR+0x88>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d654:	4b20      	ldr	r3, [pc, #128]	@ (800d6d8 <vTaskNotifyGiveFromISR+0x110>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d11d      	bne.n	800d698 <vTaskNotifyGiveFromISR+0xd0>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d65c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d65e:	3304      	adds	r3, #4
 800d660:	4618      	mov	r0, r3
 800d662:	f7fe fb8d 	bl	800bd80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d66a:	4b1c      	ldr	r3, [pc, #112]	@ (800d6dc <vTaskNotifyGiveFromISR+0x114>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	429a      	cmp	r2, r3
 800d670:	d903      	bls.n	800d67a <vTaskNotifyGiveFromISR+0xb2>
 800d672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d676:	4a19      	ldr	r2, [pc, #100]	@ (800d6dc <vTaskNotifyGiveFromISR+0x114>)
 800d678:	6013      	str	r3, [r2, #0]
 800d67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d67c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d67e:	4613      	mov	r3, r2
 800d680:	009b      	lsls	r3, r3, #2
 800d682:	4413      	add	r3, r2
 800d684:	009b      	lsls	r3, r3, #2
 800d686:	4a16      	ldr	r2, [pc, #88]	@ (800d6e0 <vTaskNotifyGiveFromISR+0x118>)
 800d688:	441a      	add	r2, r3
 800d68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d68c:	3304      	adds	r3, #4
 800d68e:	4619      	mov	r1, r3
 800d690:	4610      	mov	r0, r2
 800d692:	f7fe fb18 	bl	800bcc6 <vListInsertEnd>
 800d696:	e005      	b.n	800d6a4 <vTaskNotifyGiveFromISR+0xdc>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800d698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d69a:	3318      	adds	r3, #24
 800d69c:	4619      	mov	r1, r3
 800d69e:	4811      	ldr	r0, [pc, #68]	@ (800d6e4 <vTaskNotifyGiveFromISR+0x11c>)
 800d6a0:	f7fe fb11 	bl	800bcc6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6a8:	4b0f      	ldr	r3, [pc, #60]	@ (800d6e8 <vTaskNotifyGiveFromISR+0x120>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d908      	bls.n	800d6c4 <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d002      	beq.n	800d6be <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	2201      	movs	r2, #1
 800d6bc:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800d6be:	4b0b      	ldr	r3, [pc, #44]	@ (800d6ec <vTaskNotifyGiveFromISR+0x124>)
 800d6c0:	2201      	movs	r2, #1
 800d6c2:	601a      	str	r2, [r3, #0]
 800d6c4:	6a3b      	ldr	r3, [r7, #32]
 800d6c6:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	f383 8811 	msr	BASEPRI, r3
}
 800d6ce:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800d6d0:	bf00      	nop
 800d6d2:	3728      	adds	r7, #40	@ 0x28
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}
 800d6d8:	200012ec 	.word	0x200012ec
 800d6dc:	200012cc 	.word	0x200012cc
 800d6e0:	20000df4 	.word	0x20000df4
 800d6e4:	20001284 	.word	0x20001284
 800d6e8:	20000df0 	.word	0x20000df0
 800d6ec:	200012d8 	.word	0x200012d8

0800d6f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b084      	sub	sp, #16
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d6fa:	4b21      	ldr	r3, [pc, #132]	@ (800d780 <prvAddCurrentTaskToDelayedList+0x90>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d700:	4b20      	ldr	r3, [pc, #128]	@ (800d784 <prvAddCurrentTaskToDelayedList+0x94>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	3304      	adds	r3, #4
 800d706:	4618      	mov	r0, r3
 800d708:	f7fe fb3a 	bl	800bd80 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d712:	d10a      	bne.n	800d72a <prvAddCurrentTaskToDelayedList+0x3a>
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d007      	beq.n	800d72a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d71a:	4b1a      	ldr	r3, [pc, #104]	@ (800d784 <prvAddCurrentTaskToDelayedList+0x94>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	3304      	adds	r3, #4
 800d720:	4619      	mov	r1, r3
 800d722:	4819      	ldr	r0, [pc, #100]	@ (800d788 <prvAddCurrentTaskToDelayedList+0x98>)
 800d724:	f7fe facf 	bl	800bcc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d728:	e026      	b.n	800d778 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d72a:	68fa      	ldr	r2, [r7, #12]
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	4413      	add	r3, r2
 800d730:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d732:	4b14      	ldr	r3, [pc, #80]	@ (800d784 <prvAddCurrentTaskToDelayedList+0x94>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	68ba      	ldr	r2, [r7, #8]
 800d738:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d73a:	68ba      	ldr	r2, [r7, #8]
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	429a      	cmp	r2, r3
 800d740:	d209      	bcs.n	800d756 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d742:	4b12      	ldr	r3, [pc, #72]	@ (800d78c <prvAddCurrentTaskToDelayedList+0x9c>)
 800d744:	681a      	ldr	r2, [r3, #0]
 800d746:	4b0f      	ldr	r3, [pc, #60]	@ (800d784 <prvAddCurrentTaskToDelayedList+0x94>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	3304      	adds	r3, #4
 800d74c:	4619      	mov	r1, r3
 800d74e:	4610      	mov	r0, r2
 800d750:	f7fe fadd 	bl	800bd0e <vListInsert>
}
 800d754:	e010      	b.n	800d778 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d756:	4b0e      	ldr	r3, [pc, #56]	@ (800d790 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d758:	681a      	ldr	r2, [r3, #0]
 800d75a:	4b0a      	ldr	r3, [pc, #40]	@ (800d784 <prvAddCurrentTaskToDelayedList+0x94>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	3304      	adds	r3, #4
 800d760:	4619      	mov	r1, r3
 800d762:	4610      	mov	r0, r2
 800d764:	f7fe fad3 	bl	800bd0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d768:	4b0a      	ldr	r3, [pc, #40]	@ (800d794 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	68ba      	ldr	r2, [r7, #8]
 800d76e:	429a      	cmp	r2, r3
 800d770:	d202      	bcs.n	800d778 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d772:	4a08      	ldr	r2, [pc, #32]	@ (800d794 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	6013      	str	r3, [r2, #0]
}
 800d778:	bf00      	nop
 800d77a:	3710      	adds	r7, #16
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}
 800d780:	200012c8 	.word	0x200012c8
 800d784:	20000df0 	.word	0x20000df0
 800d788:	200012b0 	.word	0x200012b0
 800d78c:	20001280 	.word	0x20001280
 800d790:	2000127c 	.word	0x2000127c
 800d794:	200012e4 	.word	0x200012e4

0800d798 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b08a      	sub	sp, #40	@ 0x28
 800d79c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d7a2:	f000 fb13 	bl	800ddcc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d7a6:	4b1d      	ldr	r3, [pc, #116]	@ (800d81c <xTimerCreateTimerTask+0x84>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d021      	beq.n	800d7f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d7b6:	1d3a      	adds	r2, r7, #4
 800d7b8:	f107 0108 	add.w	r1, r7, #8
 800d7bc:	f107 030c 	add.w	r3, r7, #12
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f7fe fa39 	bl	800bc38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d7c6:	6879      	ldr	r1, [r7, #4]
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	68fa      	ldr	r2, [r7, #12]
 800d7cc:	9202      	str	r2, [sp, #8]
 800d7ce:	9301      	str	r3, [sp, #4]
 800d7d0:	2302      	movs	r3, #2
 800d7d2:	9300      	str	r3, [sp, #0]
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	460a      	mov	r2, r1
 800d7d8:	4911      	ldr	r1, [pc, #68]	@ (800d820 <xTimerCreateTimerTask+0x88>)
 800d7da:	4812      	ldr	r0, [pc, #72]	@ (800d824 <xTimerCreateTimerTask+0x8c>)
 800d7dc:	f7fe fff4 	bl	800c7c8 <xTaskCreateStatic>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	4a11      	ldr	r2, [pc, #68]	@ (800d828 <xTimerCreateTimerTask+0x90>)
 800d7e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d7e6:	4b10      	ldr	r3, [pc, #64]	@ (800d828 <xTimerCreateTimerTask+0x90>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d001      	beq.n	800d7f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d10b      	bne.n	800d810 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d7f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7fc:	f383 8811 	msr	BASEPRI, r3
 800d800:	f3bf 8f6f 	isb	sy
 800d804:	f3bf 8f4f 	dsb	sy
 800d808:	613b      	str	r3, [r7, #16]
}
 800d80a:	bf00      	nop
 800d80c:	bf00      	nop
 800d80e:	e7fd      	b.n	800d80c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d810:	697b      	ldr	r3, [r7, #20]
}
 800d812:	4618      	mov	r0, r3
 800d814:	3718      	adds	r7, #24
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}
 800d81a:	bf00      	nop
 800d81c:	20001320 	.word	0x20001320
 800d820:	080128c4 	.word	0x080128c4
 800d824:	0800d965 	.word	0x0800d965
 800d828:	20001324 	.word	0x20001324

0800d82c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b08a      	sub	sp, #40	@ 0x28
 800d830:	af00      	add	r7, sp, #0
 800d832:	60f8      	str	r0, [r7, #12]
 800d834:	60b9      	str	r1, [r7, #8]
 800d836:	607a      	str	r2, [r7, #4]
 800d838:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d83a:	2300      	movs	r3, #0
 800d83c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d10b      	bne.n	800d85c <xTimerGenericCommand+0x30>
	__asm volatile
 800d844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d848:	f383 8811 	msr	BASEPRI, r3
 800d84c:	f3bf 8f6f 	isb	sy
 800d850:	f3bf 8f4f 	dsb	sy
 800d854:	623b      	str	r3, [r7, #32]
}
 800d856:	bf00      	nop
 800d858:	bf00      	nop
 800d85a:	e7fd      	b.n	800d858 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d85c:	4b19      	ldr	r3, [pc, #100]	@ (800d8c4 <xTimerGenericCommand+0x98>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d02a      	beq.n	800d8ba <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	2b05      	cmp	r3, #5
 800d874:	dc18      	bgt.n	800d8a8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d876:	f7ff fdd1 	bl	800d41c <xTaskGetSchedulerState>
 800d87a:	4603      	mov	r3, r0
 800d87c:	2b02      	cmp	r3, #2
 800d87e:	d109      	bne.n	800d894 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d880:	4b10      	ldr	r3, [pc, #64]	@ (800d8c4 <xTimerGenericCommand+0x98>)
 800d882:	6818      	ldr	r0, [r3, #0]
 800d884:	f107 0110 	add.w	r1, r7, #16
 800d888:	2300      	movs	r3, #0
 800d88a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d88c:	f7fe fbac 	bl	800bfe8 <xQueueGenericSend>
 800d890:	6278      	str	r0, [r7, #36]	@ 0x24
 800d892:	e012      	b.n	800d8ba <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d894:	4b0b      	ldr	r3, [pc, #44]	@ (800d8c4 <xTimerGenericCommand+0x98>)
 800d896:	6818      	ldr	r0, [r3, #0]
 800d898:	f107 0110 	add.w	r1, r7, #16
 800d89c:	2300      	movs	r3, #0
 800d89e:	2200      	movs	r2, #0
 800d8a0:	f7fe fba2 	bl	800bfe8 <xQueueGenericSend>
 800d8a4:	6278      	str	r0, [r7, #36]	@ 0x24
 800d8a6:	e008      	b.n	800d8ba <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d8a8:	4b06      	ldr	r3, [pc, #24]	@ (800d8c4 <xTimerGenericCommand+0x98>)
 800d8aa:	6818      	ldr	r0, [r3, #0]
 800d8ac:	f107 0110 	add.w	r1, r7, #16
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	683a      	ldr	r2, [r7, #0]
 800d8b4:	f7fe fc9a 	bl	800c1ec <xQueueGenericSendFromISR>
 800d8b8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	3728      	adds	r7, #40	@ 0x28
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}
 800d8c4:	20001320 	.word	0x20001320

0800d8c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b088      	sub	sp, #32
 800d8cc:	af02      	add	r7, sp, #8
 800d8ce:	6078      	str	r0, [r7, #4]
 800d8d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8d2:	4b23      	ldr	r3, [pc, #140]	@ (800d960 <prvProcessExpiredTimer+0x98>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	68db      	ldr	r3, [r3, #12]
 800d8d8:	68db      	ldr	r3, [r3, #12]
 800d8da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d8dc:	697b      	ldr	r3, [r7, #20]
 800d8de:	3304      	adds	r3, #4
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f7fe fa4d 	bl	800bd80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d8ec:	f003 0304 	and.w	r3, r3, #4
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d023      	beq.n	800d93c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d8f4:	697b      	ldr	r3, [r7, #20]
 800d8f6:	699a      	ldr	r2, [r3, #24]
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	18d1      	adds	r1, r2, r3
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	683a      	ldr	r2, [r7, #0]
 800d900:	6978      	ldr	r0, [r7, #20]
 800d902:	f000 f8d5 	bl	800dab0 <prvInsertTimerInActiveList>
 800d906:	4603      	mov	r3, r0
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d020      	beq.n	800d94e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d90c:	2300      	movs	r3, #0
 800d90e:	9300      	str	r3, [sp, #0]
 800d910:	2300      	movs	r3, #0
 800d912:	687a      	ldr	r2, [r7, #4]
 800d914:	2100      	movs	r1, #0
 800d916:	6978      	ldr	r0, [r7, #20]
 800d918:	f7ff ff88 	bl	800d82c <xTimerGenericCommand>
 800d91c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d91e:	693b      	ldr	r3, [r7, #16]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d114      	bne.n	800d94e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d928:	f383 8811 	msr	BASEPRI, r3
 800d92c:	f3bf 8f6f 	isb	sy
 800d930:	f3bf 8f4f 	dsb	sy
 800d934:	60fb      	str	r3, [r7, #12]
}
 800d936:	bf00      	nop
 800d938:	bf00      	nop
 800d93a:	e7fd      	b.n	800d938 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d93c:	697b      	ldr	r3, [r7, #20]
 800d93e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d942:	f023 0301 	bic.w	r3, r3, #1
 800d946:	b2da      	uxtb	r2, r3
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	6a1b      	ldr	r3, [r3, #32]
 800d952:	6978      	ldr	r0, [r7, #20]
 800d954:	4798      	blx	r3
}
 800d956:	bf00      	nop
 800d958:	3718      	adds	r7, #24
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}
 800d95e:	bf00      	nop
 800d960:	20001318 	.word	0x20001318

0800d964 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b084      	sub	sp, #16
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d96c:	f107 0308 	add.w	r3, r7, #8
 800d970:	4618      	mov	r0, r3
 800d972:	f000 f859 	bl	800da28 <prvGetNextExpireTime>
 800d976:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	4619      	mov	r1, r3
 800d97c:	68f8      	ldr	r0, [r7, #12]
 800d97e:	f000 f805 	bl	800d98c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d982:	f000 f8d7 	bl	800db34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d986:	bf00      	nop
 800d988:	e7f0      	b.n	800d96c <prvTimerTask+0x8>
	...

0800d98c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b084      	sub	sp, #16
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d996:	f7ff f95b 	bl	800cc50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d99a:	f107 0308 	add.w	r3, r7, #8
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f000 f866 	bl	800da70 <prvSampleTimeNow>
 800d9a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d130      	bne.n	800da0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d10a      	bne.n	800d9c8 <prvProcessTimerOrBlockTask+0x3c>
 800d9b2:	687a      	ldr	r2, [r7, #4]
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	d806      	bhi.n	800d9c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d9ba:	f7ff f957 	bl	800cc6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d9be:	68f9      	ldr	r1, [r7, #12]
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f7ff ff81 	bl	800d8c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d9c6:	e024      	b.n	800da12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d008      	beq.n	800d9e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d9ce:	4b13      	ldr	r3, [pc, #76]	@ (800da1c <prvProcessTimerOrBlockTask+0x90>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d101      	bne.n	800d9dc <prvProcessTimerOrBlockTask+0x50>
 800d9d8:	2301      	movs	r3, #1
 800d9da:	e000      	b.n	800d9de <prvProcessTimerOrBlockTask+0x52>
 800d9dc:	2300      	movs	r3, #0
 800d9de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d9e0:	4b0f      	ldr	r3, [pc, #60]	@ (800da20 <prvProcessTimerOrBlockTask+0x94>)
 800d9e2:	6818      	ldr	r0, [r3, #0]
 800d9e4:	687a      	ldr	r2, [r7, #4]
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	1ad3      	subs	r3, r2, r3
 800d9ea:	683a      	ldr	r2, [r7, #0]
 800d9ec:	4619      	mov	r1, r3
 800d9ee:	f7fe feb7 	bl	800c760 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d9f2:	f7ff f93b 	bl	800cc6c <xTaskResumeAll>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d10a      	bne.n	800da12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d9fc:	4b09      	ldr	r3, [pc, #36]	@ (800da24 <prvProcessTimerOrBlockTask+0x98>)
 800d9fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da02:	601a      	str	r2, [r3, #0]
 800da04:	f3bf 8f4f 	dsb	sy
 800da08:	f3bf 8f6f 	isb	sy
}
 800da0c:	e001      	b.n	800da12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800da0e:	f7ff f92d 	bl	800cc6c <xTaskResumeAll>
}
 800da12:	bf00      	nop
 800da14:	3710      	adds	r7, #16
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}
 800da1a:	bf00      	nop
 800da1c:	2000131c 	.word	0x2000131c
 800da20:	20001320 	.word	0x20001320
 800da24:	e000ed04 	.word	0xe000ed04

0800da28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800da28:	b480      	push	{r7}
 800da2a:	b085      	sub	sp, #20
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800da30:	4b0e      	ldr	r3, [pc, #56]	@ (800da6c <prvGetNextExpireTime+0x44>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d101      	bne.n	800da3e <prvGetNextExpireTime+0x16>
 800da3a:	2201      	movs	r2, #1
 800da3c:	e000      	b.n	800da40 <prvGetNextExpireTime+0x18>
 800da3e:	2200      	movs	r2, #0
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d105      	bne.n	800da58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800da4c:	4b07      	ldr	r3, [pc, #28]	@ (800da6c <prvGetNextExpireTime+0x44>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	68db      	ldr	r3, [r3, #12]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	60fb      	str	r3, [r7, #12]
 800da56:	e001      	b.n	800da5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800da58:	2300      	movs	r3, #0
 800da5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800da5c:	68fb      	ldr	r3, [r7, #12]
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3714      	adds	r7, #20
 800da62:	46bd      	mov	sp, r7
 800da64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da68:	4770      	bx	lr
 800da6a:	bf00      	nop
 800da6c:	20001318 	.word	0x20001318

0800da70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b084      	sub	sp, #16
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800da78:	f7ff f996 	bl	800cda8 <xTaskGetTickCount>
 800da7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800da7e:	4b0b      	ldr	r3, [pc, #44]	@ (800daac <prvSampleTimeNow+0x3c>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	68fa      	ldr	r2, [r7, #12]
 800da84:	429a      	cmp	r2, r3
 800da86:	d205      	bcs.n	800da94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800da88:	f000 f93a 	bl	800dd00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2201      	movs	r2, #1
 800da90:	601a      	str	r2, [r3, #0]
 800da92:	e002      	b.n	800da9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2200      	movs	r2, #0
 800da98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800da9a:	4a04      	ldr	r2, [pc, #16]	@ (800daac <prvSampleTimeNow+0x3c>)
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800daa0:	68fb      	ldr	r3, [r7, #12]
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3710      	adds	r7, #16
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}
 800daaa:	bf00      	nop
 800daac:	20001328 	.word	0x20001328

0800dab0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b086      	sub	sp, #24
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	60f8      	str	r0, [r7, #12]
 800dab8:	60b9      	str	r1, [r7, #8]
 800daba:	607a      	str	r2, [r7, #4]
 800dabc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dabe:	2300      	movs	r3, #0
 800dac0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	68ba      	ldr	r2, [r7, #8]
 800dac6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	68fa      	ldr	r2, [r7, #12]
 800dacc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dace:	68ba      	ldr	r2, [r7, #8]
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	429a      	cmp	r2, r3
 800dad4:	d812      	bhi.n	800dafc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dad6:	687a      	ldr	r2, [r7, #4]
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	1ad2      	subs	r2, r2, r3
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	699b      	ldr	r3, [r3, #24]
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d302      	bcc.n	800daea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dae4:	2301      	movs	r3, #1
 800dae6:	617b      	str	r3, [r7, #20]
 800dae8:	e01b      	b.n	800db22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800daea:	4b10      	ldr	r3, [pc, #64]	@ (800db2c <prvInsertTimerInActiveList+0x7c>)
 800daec:	681a      	ldr	r2, [r3, #0]
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	3304      	adds	r3, #4
 800daf2:	4619      	mov	r1, r3
 800daf4:	4610      	mov	r0, r2
 800daf6:	f7fe f90a 	bl	800bd0e <vListInsert>
 800dafa:	e012      	b.n	800db22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dafc:	687a      	ldr	r2, [r7, #4]
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	429a      	cmp	r2, r3
 800db02:	d206      	bcs.n	800db12 <prvInsertTimerInActiveList+0x62>
 800db04:	68ba      	ldr	r2, [r7, #8]
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	429a      	cmp	r2, r3
 800db0a:	d302      	bcc.n	800db12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800db0c:	2301      	movs	r3, #1
 800db0e:	617b      	str	r3, [r7, #20]
 800db10:	e007      	b.n	800db22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800db12:	4b07      	ldr	r3, [pc, #28]	@ (800db30 <prvInsertTimerInActiveList+0x80>)
 800db14:	681a      	ldr	r2, [r3, #0]
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	3304      	adds	r3, #4
 800db1a:	4619      	mov	r1, r3
 800db1c:	4610      	mov	r0, r2
 800db1e:	f7fe f8f6 	bl	800bd0e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800db22:	697b      	ldr	r3, [r7, #20]
}
 800db24:	4618      	mov	r0, r3
 800db26:	3718      	adds	r7, #24
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}
 800db2c:	2000131c 	.word	0x2000131c
 800db30:	20001318 	.word	0x20001318

0800db34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b08e      	sub	sp, #56	@ 0x38
 800db38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800db3a:	e0ce      	b.n	800dcda <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	da19      	bge.n	800db76 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800db42:	1d3b      	adds	r3, r7, #4
 800db44:	3304      	adds	r3, #4
 800db46:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800db48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d10b      	bne.n	800db66 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800db4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db52:	f383 8811 	msr	BASEPRI, r3
 800db56:	f3bf 8f6f 	isb	sy
 800db5a:	f3bf 8f4f 	dsb	sy
 800db5e:	61fb      	str	r3, [r7, #28]
}
 800db60:	bf00      	nop
 800db62:	bf00      	nop
 800db64:	e7fd      	b.n	800db62 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800db66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800db6c:	6850      	ldr	r0, [r2, #4]
 800db6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800db70:	6892      	ldr	r2, [r2, #8]
 800db72:	4611      	mov	r1, r2
 800db74:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	f2c0 80ae 	blt.w	800dcda <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800db82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db84:	695b      	ldr	r3, [r3, #20]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d004      	beq.n	800db94 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800db8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db8c:	3304      	adds	r3, #4
 800db8e:	4618      	mov	r0, r3
 800db90:	f7fe f8f6 	bl	800bd80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800db94:	463b      	mov	r3, r7
 800db96:	4618      	mov	r0, r3
 800db98:	f7ff ff6a 	bl	800da70 <prvSampleTimeNow>
 800db9c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2b09      	cmp	r3, #9
 800dba2:	f200 8097 	bhi.w	800dcd4 <prvProcessReceivedCommands+0x1a0>
 800dba6:	a201      	add	r2, pc, #4	@ (adr r2, 800dbac <prvProcessReceivedCommands+0x78>)
 800dba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbac:	0800dbd5 	.word	0x0800dbd5
 800dbb0:	0800dbd5 	.word	0x0800dbd5
 800dbb4:	0800dbd5 	.word	0x0800dbd5
 800dbb8:	0800dc4b 	.word	0x0800dc4b
 800dbbc:	0800dc5f 	.word	0x0800dc5f
 800dbc0:	0800dcab 	.word	0x0800dcab
 800dbc4:	0800dbd5 	.word	0x0800dbd5
 800dbc8:	0800dbd5 	.word	0x0800dbd5
 800dbcc:	0800dc4b 	.word	0x0800dc4b
 800dbd0:	0800dc5f 	.word	0x0800dc5f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dbd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dbda:	f043 0301 	orr.w	r3, r3, #1
 800dbde:	b2da      	uxtb	r2, r3
 800dbe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbe2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dbe6:	68ba      	ldr	r2, [r7, #8]
 800dbe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbea:	699b      	ldr	r3, [r3, #24]
 800dbec:	18d1      	adds	r1, r2, r3
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dbf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dbf4:	f7ff ff5c 	bl	800dab0 <prvInsertTimerInActiveList>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d06c      	beq.n	800dcd8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dbfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc00:	6a1b      	ldr	r3, [r3, #32]
 800dc02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc04:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dc06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dc0c:	f003 0304 	and.w	r3, r3, #4
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d061      	beq.n	800dcd8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dc14:	68ba      	ldr	r2, [r7, #8]
 800dc16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc18:	699b      	ldr	r3, [r3, #24]
 800dc1a:	441a      	add	r2, r3
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	9300      	str	r3, [sp, #0]
 800dc20:	2300      	movs	r3, #0
 800dc22:	2100      	movs	r1, #0
 800dc24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc26:	f7ff fe01 	bl	800d82c <xTimerGenericCommand>
 800dc2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dc2c:	6a3b      	ldr	r3, [r7, #32]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d152      	bne.n	800dcd8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800dc32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc36:	f383 8811 	msr	BASEPRI, r3
 800dc3a:	f3bf 8f6f 	isb	sy
 800dc3e:	f3bf 8f4f 	dsb	sy
 800dc42:	61bb      	str	r3, [r7, #24]
}
 800dc44:	bf00      	nop
 800dc46:	bf00      	nop
 800dc48:	e7fd      	b.n	800dc46 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dc4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dc50:	f023 0301 	bic.w	r3, r3, #1
 800dc54:	b2da      	uxtb	r2, r3
 800dc56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc58:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800dc5c:	e03d      	b.n	800dcda <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dc5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dc64:	f043 0301 	orr.w	r3, r3, #1
 800dc68:	b2da      	uxtb	r2, r3
 800dc6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dc70:	68ba      	ldr	r2, [r7, #8]
 800dc72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc74:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dc76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc78:	699b      	ldr	r3, [r3, #24]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d10b      	bne.n	800dc96 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800dc7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc82:	f383 8811 	msr	BASEPRI, r3
 800dc86:	f3bf 8f6f 	isb	sy
 800dc8a:	f3bf 8f4f 	dsb	sy
 800dc8e:	617b      	str	r3, [r7, #20]
}
 800dc90:	bf00      	nop
 800dc92:	bf00      	nop
 800dc94:	e7fd      	b.n	800dc92 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dc96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc98:	699a      	ldr	r2, [r3, #24]
 800dc9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc9c:	18d1      	adds	r1, r2, r3
 800dc9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dca0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dca2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dca4:	f7ff ff04 	bl	800dab0 <prvInsertTimerInActiveList>
					break;
 800dca8:	e017      	b.n	800dcda <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dcaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dcb0:	f003 0302 	and.w	r3, r3, #2
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d103      	bne.n	800dcc0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800dcb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dcba:	f000 fbe5 	bl	800e488 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dcbe:	e00c      	b.n	800dcda <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dcc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dcc6:	f023 0301 	bic.w	r3, r3, #1
 800dcca:	b2da      	uxtb	r2, r3
 800dccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800dcd2:	e002      	b.n	800dcda <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800dcd4:	bf00      	nop
 800dcd6:	e000      	b.n	800dcda <prvProcessReceivedCommands+0x1a6>
					break;
 800dcd8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dcda:	4b08      	ldr	r3, [pc, #32]	@ (800dcfc <prvProcessReceivedCommands+0x1c8>)
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	1d39      	adds	r1, r7, #4
 800dce0:	2200      	movs	r2, #0
 800dce2:	4618      	mov	r0, r3
 800dce4:	f7fe fb20 	bl	800c328 <xQueueReceive>
 800dce8:	4603      	mov	r3, r0
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	f47f af26 	bne.w	800db3c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800dcf0:	bf00      	nop
 800dcf2:	bf00      	nop
 800dcf4:	3730      	adds	r7, #48	@ 0x30
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	20001320 	.word	0x20001320

0800dd00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b088      	sub	sp, #32
 800dd04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dd06:	e049      	b.n	800dd9c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dd08:	4b2e      	ldr	r3, [pc, #184]	@ (800ddc4 <prvSwitchTimerLists+0xc4>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	68db      	ldr	r3, [r3, #12]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd12:	4b2c      	ldr	r3, [pc, #176]	@ (800ddc4 <prvSwitchTimerLists+0xc4>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	68db      	ldr	r3, [r3, #12]
 800dd18:	68db      	ldr	r3, [r3, #12]
 800dd1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	3304      	adds	r3, #4
 800dd20:	4618      	mov	r0, r3
 800dd22:	f7fe f82d 	bl	800bd80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	6a1b      	ldr	r3, [r3, #32]
 800dd2a:	68f8      	ldr	r0, [r7, #12]
 800dd2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dd34:	f003 0304 	and.w	r3, r3, #4
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d02f      	beq.n	800dd9c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	699b      	ldr	r3, [r3, #24]
 800dd40:	693a      	ldr	r2, [r7, #16]
 800dd42:	4413      	add	r3, r2
 800dd44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dd46:	68ba      	ldr	r2, [r7, #8]
 800dd48:	693b      	ldr	r3, [r7, #16]
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	d90e      	bls.n	800dd6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	68ba      	ldr	r2, [r7, #8]
 800dd52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	68fa      	ldr	r2, [r7, #12]
 800dd58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dd5a:	4b1a      	ldr	r3, [pc, #104]	@ (800ddc4 <prvSwitchTimerLists+0xc4>)
 800dd5c:	681a      	ldr	r2, [r3, #0]
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	3304      	adds	r3, #4
 800dd62:	4619      	mov	r1, r3
 800dd64:	4610      	mov	r0, r2
 800dd66:	f7fd ffd2 	bl	800bd0e <vListInsert>
 800dd6a:	e017      	b.n	800dd9c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	9300      	str	r3, [sp, #0]
 800dd70:	2300      	movs	r3, #0
 800dd72:	693a      	ldr	r2, [r7, #16]
 800dd74:	2100      	movs	r1, #0
 800dd76:	68f8      	ldr	r0, [r7, #12]
 800dd78:	f7ff fd58 	bl	800d82c <xTimerGenericCommand>
 800dd7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d10b      	bne.n	800dd9c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800dd84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd88:	f383 8811 	msr	BASEPRI, r3
 800dd8c:	f3bf 8f6f 	isb	sy
 800dd90:	f3bf 8f4f 	dsb	sy
 800dd94:	603b      	str	r3, [r7, #0]
}
 800dd96:	bf00      	nop
 800dd98:	bf00      	nop
 800dd9a:	e7fd      	b.n	800dd98 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dd9c:	4b09      	ldr	r3, [pc, #36]	@ (800ddc4 <prvSwitchTimerLists+0xc4>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d1b0      	bne.n	800dd08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dda6:	4b07      	ldr	r3, [pc, #28]	@ (800ddc4 <prvSwitchTimerLists+0xc4>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ddac:	4b06      	ldr	r3, [pc, #24]	@ (800ddc8 <prvSwitchTimerLists+0xc8>)
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	4a04      	ldr	r2, [pc, #16]	@ (800ddc4 <prvSwitchTimerLists+0xc4>)
 800ddb2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ddb4:	4a04      	ldr	r2, [pc, #16]	@ (800ddc8 <prvSwitchTimerLists+0xc8>)
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	6013      	str	r3, [r2, #0]
}
 800ddba:	bf00      	nop
 800ddbc:	3718      	adds	r7, #24
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}
 800ddc2:	bf00      	nop
 800ddc4:	20001318 	.word	0x20001318
 800ddc8:	2000131c 	.word	0x2000131c

0800ddcc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b082      	sub	sp, #8
 800ddd0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ddd2:	f000 f969 	bl	800e0a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ddd6:	4b15      	ldr	r3, [pc, #84]	@ (800de2c <prvCheckForValidListAndQueue+0x60>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d120      	bne.n	800de20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ddde:	4814      	ldr	r0, [pc, #80]	@ (800de30 <prvCheckForValidListAndQueue+0x64>)
 800dde0:	f7fd ff44 	bl	800bc6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dde4:	4813      	ldr	r0, [pc, #76]	@ (800de34 <prvCheckForValidListAndQueue+0x68>)
 800dde6:	f7fd ff41 	bl	800bc6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ddea:	4b13      	ldr	r3, [pc, #76]	@ (800de38 <prvCheckForValidListAndQueue+0x6c>)
 800ddec:	4a10      	ldr	r2, [pc, #64]	@ (800de30 <prvCheckForValidListAndQueue+0x64>)
 800ddee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ddf0:	4b12      	ldr	r3, [pc, #72]	@ (800de3c <prvCheckForValidListAndQueue+0x70>)
 800ddf2:	4a10      	ldr	r2, [pc, #64]	@ (800de34 <prvCheckForValidListAndQueue+0x68>)
 800ddf4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	9300      	str	r3, [sp, #0]
 800ddfa:	4b11      	ldr	r3, [pc, #68]	@ (800de40 <prvCheckForValidListAndQueue+0x74>)
 800ddfc:	4a11      	ldr	r2, [pc, #68]	@ (800de44 <prvCheckForValidListAndQueue+0x78>)
 800ddfe:	2110      	movs	r1, #16
 800de00:	200a      	movs	r0, #10
 800de02:	f7fe f851 	bl	800bea8 <xQueueGenericCreateStatic>
 800de06:	4603      	mov	r3, r0
 800de08:	4a08      	ldr	r2, [pc, #32]	@ (800de2c <prvCheckForValidListAndQueue+0x60>)
 800de0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800de0c:	4b07      	ldr	r3, [pc, #28]	@ (800de2c <prvCheckForValidListAndQueue+0x60>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d005      	beq.n	800de20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800de14:	4b05      	ldr	r3, [pc, #20]	@ (800de2c <prvCheckForValidListAndQueue+0x60>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	490b      	ldr	r1, [pc, #44]	@ (800de48 <prvCheckForValidListAndQueue+0x7c>)
 800de1a:	4618      	mov	r0, r3
 800de1c:	f7fe fc76 	bl	800c70c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800de20:	f000 f974 	bl	800e10c <vPortExitCritical>
}
 800de24:	bf00      	nop
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}
 800de2a:	bf00      	nop
 800de2c:	20001320 	.word	0x20001320
 800de30:	200012f0 	.word	0x200012f0
 800de34:	20001304 	.word	0x20001304
 800de38:	20001318 	.word	0x20001318
 800de3c:	2000131c 	.word	0x2000131c
 800de40:	200013cc 	.word	0x200013cc
 800de44:	2000132c 	.word	0x2000132c
 800de48:	080128cc 	.word	0x080128cc

0800de4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800de4c:	b480      	push	{r7}
 800de4e:	b085      	sub	sp, #20
 800de50:	af00      	add	r7, sp, #0
 800de52:	60f8      	str	r0, [r7, #12]
 800de54:	60b9      	str	r1, [r7, #8]
 800de56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	3b04      	subs	r3, #4
 800de5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800de64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	3b04      	subs	r3, #4
 800de6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	f023 0201 	bic.w	r2, r3, #1
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	3b04      	subs	r3, #4
 800de7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800de7c:	4a0c      	ldr	r2, [pc, #48]	@ (800deb0 <pxPortInitialiseStack+0x64>)
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	3b14      	subs	r3, #20
 800de86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800de88:	687a      	ldr	r2, [r7, #4]
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	3b04      	subs	r3, #4
 800de92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	f06f 0202 	mvn.w	r2, #2
 800de9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	3b20      	subs	r3, #32
 800dea0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dea2:	68fb      	ldr	r3, [r7, #12]
}
 800dea4:	4618      	mov	r0, r3
 800dea6:	3714      	adds	r7, #20
 800dea8:	46bd      	mov	sp, r7
 800deaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deae:	4770      	bx	lr
 800deb0:	0800deb5 	.word	0x0800deb5

0800deb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800deb4:	b480      	push	{r7}
 800deb6:	b085      	sub	sp, #20
 800deb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800deba:	2300      	movs	r3, #0
 800debc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800debe:	4b13      	ldr	r3, [pc, #76]	@ (800df0c <prvTaskExitError+0x58>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dec6:	d00b      	beq.n	800dee0 <prvTaskExitError+0x2c>
	__asm volatile
 800dec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800decc:	f383 8811 	msr	BASEPRI, r3
 800ded0:	f3bf 8f6f 	isb	sy
 800ded4:	f3bf 8f4f 	dsb	sy
 800ded8:	60fb      	str	r3, [r7, #12]
}
 800deda:	bf00      	nop
 800dedc:	bf00      	nop
 800dede:	e7fd      	b.n	800dedc <prvTaskExitError+0x28>
	__asm volatile
 800dee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dee4:	f383 8811 	msr	BASEPRI, r3
 800dee8:	f3bf 8f6f 	isb	sy
 800deec:	f3bf 8f4f 	dsb	sy
 800def0:	60bb      	str	r3, [r7, #8]
}
 800def2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800def4:	bf00      	nop
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d0fc      	beq.n	800def6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800defc:	bf00      	nop
 800defe:	bf00      	nop
 800df00:	3714      	adds	r7, #20
 800df02:	46bd      	mov	sp, r7
 800df04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df08:	4770      	bx	lr
 800df0a:	bf00      	nop
 800df0c:	20000128 	.word	0x20000128

0800df10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800df10:	4b07      	ldr	r3, [pc, #28]	@ (800df30 <pxCurrentTCBConst2>)
 800df12:	6819      	ldr	r1, [r3, #0]
 800df14:	6808      	ldr	r0, [r1, #0]
 800df16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df1a:	f380 8809 	msr	PSP, r0
 800df1e:	f3bf 8f6f 	isb	sy
 800df22:	f04f 0000 	mov.w	r0, #0
 800df26:	f380 8811 	msr	BASEPRI, r0
 800df2a:	4770      	bx	lr
 800df2c:	f3af 8000 	nop.w

0800df30 <pxCurrentTCBConst2>:
 800df30:	20000df0 	.word	0x20000df0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800df34:	bf00      	nop
 800df36:	bf00      	nop

0800df38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800df38:	4808      	ldr	r0, [pc, #32]	@ (800df5c <prvPortStartFirstTask+0x24>)
 800df3a:	6800      	ldr	r0, [r0, #0]
 800df3c:	6800      	ldr	r0, [r0, #0]
 800df3e:	f380 8808 	msr	MSP, r0
 800df42:	f04f 0000 	mov.w	r0, #0
 800df46:	f380 8814 	msr	CONTROL, r0
 800df4a:	b662      	cpsie	i
 800df4c:	b661      	cpsie	f
 800df4e:	f3bf 8f4f 	dsb	sy
 800df52:	f3bf 8f6f 	isb	sy
 800df56:	df00      	svc	0
 800df58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800df5a:	bf00      	nop
 800df5c:	e000ed08 	.word	0xe000ed08

0800df60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b086      	sub	sp, #24
 800df64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800df66:	4b47      	ldr	r3, [pc, #284]	@ (800e084 <xPortStartScheduler+0x124>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	4a47      	ldr	r2, [pc, #284]	@ (800e088 <xPortStartScheduler+0x128>)
 800df6c:	4293      	cmp	r3, r2
 800df6e:	d10b      	bne.n	800df88 <xPortStartScheduler+0x28>
	__asm volatile
 800df70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df74:	f383 8811 	msr	BASEPRI, r3
 800df78:	f3bf 8f6f 	isb	sy
 800df7c:	f3bf 8f4f 	dsb	sy
 800df80:	60fb      	str	r3, [r7, #12]
}
 800df82:	bf00      	nop
 800df84:	bf00      	nop
 800df86:	e7fd      	b.n	800df84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800df88:	4b3e      	ldr	r3, [pc, #248]	@ (800e084 <xPortStartScheduler+0x124>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	4a3f      	ldr	r2, [pc, #252]	@ (800e08c <xPortStartScheduler+0x12c>)
 800df8e:	4293      	cmp	r3, r2
 800df90:	d10b      	bne.n	800dfaa <xPortStartScheduler+0x4a>
	__asm volatile
 800df92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df96:	f383 8811 	msr	BASEPRI, r3
 800df9a:	f3bf 8f6f 	isb	sy
 800df9e:	f3bf 8f4f 	dsb	sy
 800dfa2:	613b      	str	r3, [r7, #16]
}
 800dfa4:	bf00      	nop
 800dfa6:	bf00      	nop
 800dfa8:	e7fd      	b.n	800dfa6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dfaa:	4b39      	ldr	r3, [pc, #228]	@ (800e090 <xPortStartScheduler+0x130>)
 800dfac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	781b      	ldrb	r3, [r3, #0]
 800dfb2:	b2db      	uxtb	r3, r3
 800dfb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	22ff      	movs	r2, #255	@ 0xff
 800dfba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	781b      	ldrb	r3, [r3, #0]
 800dfc0:	b2db      	uxtb	r3, r3
 800dfc2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dfc4:	78fb      	ldrb	r3, [r7, #3]
 800dfc6:	b2db      	uxtb	r3, r3
 800dfc8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800dfcc:	b2da      	uxtb	r2, r3
 800dfce:	4b31      	ldr	r3, [pc, #196]	@ (800e094 <xPortStartScheduler+0x134>)
 800dfd0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dfd2:	4b31      	ldr	r3, [pc, #196]	@ (800e098 <xPortStartScheduler+0x138>)
 800dfd4:	2207      	movs	r2, #7
 800dfd6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dfd8:	e009      	b.n	800dfee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800dfda:	4b2f      	ldr	r3, [pc, #188]	@ (800e098 <xPortStartScheduler+0x138>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	3b01      	subs	r3, #1
 800dfe0:	4a2d      	ldr	r2, [pc, #180]	@ (800e098 <xPortStartScheduler+0x138>)
 800dfe2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dfe4:	78fb      	ldrb	r3, [r7, #3]
 800dfe6:	b2db      	uxtb	r3, r3
 800dfe8:	005b      	lsls	r3, r3, #1
 800dfea:	b2db      	uxtb	r3, r3
 800dfec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dfee:	78fb      	ldrb	r3, [r7, #3]
 800dff0:	b2db      	uxtb	r3, r3
 800dff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dff6:	2b80      	cmp	r3, #128	@ 0x80
 800dff8:	d0ef      	beq.n	800dfda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dffa:	4b27      	ldr	r3, [pc, #156]	@ (800e098 <xPortStartScheduler+0x138>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	f1c3 0307 	rsb	r3, r3, #7
 800e002:	2b04      	cmp	r3, #4
 800e004:	d00b      	beq.n	800e01e <xPortStartScheduler+0xbe>
	__asm volatile
 800e006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e00a:	f383 8811 	msr	BASEPRI, r3
 800e00e:	f3bf 8f6f 	isb	sy
 800e012:	f3bf 8f4f 	dsb	sy
 800e016:	60bb      	str	r3, [r7, #8]
}
 800e018:	bf00      	nop
 800e01a:	bf00      	nop
 800e01c:	e7fd      	b.n	800e01a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e01e:	4b1e      	ldr	r3, [pc, #120]	@ (800e098 <xPortStartScheduler+0x138>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	021b      	lsls	r3, r3, #8
 800e024:	4a1c      	ldr	r2, [pc, #112]	@ (800e098 <xPortStartScheduler+0x138>)
 800e026:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e028:	4b1b      	ldr	r3, [pc, #108]	@ (800e098 <xPortStartScheduler+0x138>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e030:	4a19      	ldr	r2, [pc, #100]	@ (800e098 <xPortStartScheduler+0x138>)
 800e032:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	b2da      	uxtb	r2, r3
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e03c:	4b17      	ldr	r3, [pc, #92]	@ (800e09c <xPortStartScheduler+0x13c>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	4a16      	ldr	r2, [pc, #88]	@ (800e09c <xPortStartScheduler+0x13c>)
 800e042:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e046:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e048:	4b14      	ldr	r3, [pc, #80]	@ (800e09c <xPortStartScheduler+0x13c>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	4a13      	ldr	r2, [pc, #76]	@ (800e09c <xPortStartScheduler+0x13c>)
 800e04e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e052:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e054:	f000 f8da 	bl	800e20c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e058:	4b11      	ldr	r3, [pc, #68]	@ (800e0a0 <xPortStartScheduler+0x140>)
 800e05a:	2200      	movs	r2, #0
 800e05c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e05e:	f000 f8f9 	bl	800e254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e062:	4b10      	ldr	r3, [pc, #64]	@ (800e0a4 <xPortStartScheduler+0x144>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	4a0f      	ldr	r2, [pc, #60]	@ (800e0a4 <xPortStartScheduler+0x144>)
 800e068:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e06c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e06e:	f7ff ff63 	bl	800df38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e072:	f7fe ff63 	bl	800cf3c <vTaskSwitchContext>
	prvTaskExitError();
 800e076:	f7ff ff1d 	bl	800deb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e07a:	2300      	movs	r3, #0
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3718      	adds	r7, #24
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}
 800e084:	e000ed00 	.word	0xe000ed00
 800e088:	410fc271 	.word	0x410fc271
 800e08c:	410fc270 	.word	0x410fc270
 800e090:	e000e400 	.word	0xe000e400
 800e094:	2000141c 	.word	0x2000141c
 800e098:	20001420 	.word	0x20001420
 800e09c:	e000ed20 	.word	0xe000ed20
 800e0a0:	20000128 	.word	0x20000128
 800e0a4:	e000ef34 	.word	0xe000ef34

0800e0a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b083      	sub	sp, #12
 800e0ac:	af00      	add	r7, sp, #0
	__asm volatile
 800e0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0b2:	f383 8811 	msr	BASEPRI, r3
 800e0b6:	f3bf 8f6f 	isb	sy
 800e0ba:	f3bf 8f4f 	dsb	sy
 800e0be:	607b      	str	r3, [r7, #4]
}
 800e0c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e0c2:	4b10      	ldr	r3, [pc, #64]	@ (800e104 <vPortEnterCritical+0x5c>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	3301      	adds	r3, #1
 800e0c8:	4a0e      	ldr	r2, [pc, #56]	@ (800e104 <vPortEnterCritical+0x5c>)
 800e0ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e0cc:	4b0d      	ldr	r3, [pc, #52]	@ (800e104 <vPortEnterCritical+0x5c>)
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	2b01      	cmp	r3, #1
 800e0d2:	d110      	bne.n	800e0f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e0d4:	4b0c      	ldr	r3, [pc, #48]	@ (800e108 <vPortEnterCritical+0x60>)
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	b2db      	uxtb	r3, r3
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d00b      	beq.n	800e0f6 <vPortEnterCritical+0x4e>
	__asm volatile
 800e0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0e2:	f383 8811 	msr	BASEPRI, r3
 800e0e6:	f3bf 8f6f 	isb	sy
 800e0ea:	f3bf 8f4f 	dsb	sy
 800e0ee:	603b      	str	r3, [r7, #0]
}
 800e0f0:	bf00      	nop
 800e0f2:	bf00      	nop
 800e0f4:	e7fd      	b.n	800e0f2 <vPortEnterCritical+0x4a>
	}
}
 800e0f6:	bf00      	nop
 800e0f8:	370c      	adds	r7, #12
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e100:	4770      	bx	lr
 800e102:	bf00      	nop
 800e104:	20000128 	.word	0x20000128
 800e108:	e000ed04 	.word	0xe000ed04

0800e10c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e10c:	b480      	push	{r7}
 800e10e:	b083      	sub	sp, #12
 800e110:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e112:	4b12      	ldr	r3, [pc, #72]	@ (800e15c <vPortExitCritical+0x50>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d10b      	bne.n	800e132 <vPortExitCritical+0x26>
	__asm volatile
 800e11a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e11e:	f383 8811 	msr	BASEPRI, r3
 800e122:	f3bf 8f6f 	isb	sy
 800e126:	f3bf 8f4f 	dsb	sy
 800e12a:	607b      	str	r3, [r7, #4]
}
 800e12c:	bf00      	nop
 800e12e:	bf00      	nop
 800e130:	e7fd      	b.n	800e12e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e132:	4b0a      	ldr	r3, [pc, #40]	@ (800e15c <vPortExitCritical+0x50>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	3b01      	subs	r3, #1
 800e138:	4a08      	ldr	r2, [pc, #32]	@ (800e15c <vPortExitCritical+0x50>)
 800e13a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e13c:	4b07      	ldr	r3, [pc, #28]	@ (800e15c <vPortExitCritical+0x50>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d105      	bne.n	800e150 <vPortExitCritical+0x44>
 800e144:	2300      	movs	r3, #0
 800e146:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	f383 8811 	msr	BASEPRI, r3
}
 800e14e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e150:	bf00      	nop
 800e152:	370c      	adds	r7, #12
 800e154:	46bd      	mov	sp, r7
 800e156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15a:	4770      	bx	lr
 800e15c:	20000128 	.word	0x20000128

0800e160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e160:	f3ef 8009 	mrs	r0, PSP
 800e164:	f3bf 8f6f 	isb	sy
 800e168:	4b15      	ldr	r3, [pc, #84]	@ (800e1c0 <pxCurrentTCBConst>)
 800e16a:	681a      	ldr	r2, [r3, #0]
 800e16c:	f01e 0f10 	tst.w	lr, #16
 800e170:	bf08      	it	eq
 800e172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e17a:	6010      	str	r0, [r2, #0]
 800e17c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e180:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e184:	f380 8811 	msr	BASEPRI, r0
 800e188:	f3bf 8f4f 	dsb	sy
 800e18c:	f3bf 8f6f 	isb	sy
 800e190:	f7fe fed4 	bl	800cf3c <vTaskSwitchContext>
 800e194:	f04f 0000 	mov.w	r0, #0
 800e198:	f380 8811 	msr	BASEPRI, r0
 800e19c:	bc09      	pop	{r0, r3}
 800e19e:	6819      	ldr	r1, [r3, #0]
 800e1a0:	6808      	ldr	r0, [r1, #0]
 800e1a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1a6:	f01e 0f10 	tst.w	lr, #16
 800e1aa:	bf08      	it	eq
 800e1ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e1b0:	f380 8809 	msr	PSP, r0
 800e1b4:	f3bf 8f6f 	isb	sy
 800e1b8:	4770      	bx	lr
 800e1ba:	bf00      	nop
 800e1bc:	f3af 8000 	nop.w

0800e1c0 <pxCurrentTCBConst>:
 800e1c0:	20000df0 	.word	0x20000df0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e1c4:	bf00      	nop
 800e1c6:	bf00      	nop

0800e1c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b082      	sub	sp, #8
 800e1cc:	af00      	add	r7, sp, #0
	__asm volatile
 800e1ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1d2:	f383 8811 	msr	BASEPRI, r3
 800e1d6:	f3bf 8f6f 	isb	sy
 800e1da:	f3bf 8f4f 	dsb	sy
 800e1de:	607b      	str	r3, [r7, #4]
}
 800e1e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e1e2:	f7fe fdf1 	bl	800cdc8 <xTaskIncrementTick>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d003      	beq.n	800e1f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e1ec:	4b06      	ldr	r3, [pc, #24]	@ (800e208 <xPortSysTickHandler+0x40>)
 800e1ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e1f2:	601a      	str	r2, [r3, #0]
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	f383 8811 	msr	BASEPRI, r3
}
 800e1fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e200:	bf00      	nop
 800e202:	3708      	adds	r7, #8
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}
 800e208:	e000ed04 	.word	0xe000ed04

0800e20c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e20c:	b480      	push	{r7}
 800e20e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e210:	4b0b      	ldr	r3, [pc, #44]	@ (800e240 <vPortSetupTimerInterrupt+0x34>)
 800e212:	2200      	movs	r2, #0
 800e214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e216:	4b0b      	ldr	r3, [pc, #44]	@ (800e244 <vPortSetupTimerInterrupt+0x38>)
 800e218:	2200      	movs	r2, #0
 800e21a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e21c:	4b0a      	ldr	r3, [pc, #40]	@ (800e248 <vPortSetupTimerInterrupt+0x3c>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	4a0a      	ldr	r2, [pc, #40]	@ (800e24c <vPortSetupTimerInterrupt+0x40>)
 800e222:	fba2 2303 	umull	r2, r3, r2, r3
 800e226:	099b      	lsrs	r3, r3, #6
 800e228:	4a09      	ldr	r2, [pc, #36]	@ (800e250 <vPortSetupTimerInterrupt+0x44>)
 800e22a:	3b01      	subs	r3, #1
 800e22c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e22e:	4b04      	ldr	r3, [pc, #16]	@ (800e240 <vPortSetupTimerInterrupt+0x34>)
 800e230:	2207      	movs	r2, #7
 800e232:	601a      	str	r2, [r3, #0]
}
 800e234:	bf00      	nop
 800e236:	46bd      	mov	sp, r7
 800e238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23c:	4770      	bx	lr
 800e23e:	bf00      	nop
 800e240:	e000e010 	.word	0xe000e010
 800e244:	e000e018 	.word	0xe000e018
 800e248:	20000090 	.word	0x20000090
 800e24c:	10624dd3 	.word	0x10624dd3
 800e250:	e000e014 	.word	0xe000e014

0800e254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e254:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e264 <vPortEnableVFP+0x10>
 800e258:	6801      	ldr	r1, [r0, #0]
 800e25a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e25e:	6001      	str	r1, [r0, #0]
 800e260:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e262:	bf00      	nop
 800e264:	e000ed88 	.word	0xe000ed88

0800e268 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e268:	b480      	push	{r7}
 800e26a:	b085      	sub	sp, #20
 800e26c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e26e:	f3ef 8305 	mrs	r3, IPSR
 800e272:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	2b0f      	cmp	r3, #15
 800e278:	d915      	bls.n	800e2a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e27a:	4a18      	ldr	r2, [pc, #96]	@ (800e2dc <vPortValidateInterruptPriority+0x74>)
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	4413      	add	r3, r2
 800e280:	781b      	ldrb	r3, [r3, #0]
 800e282:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e284:	4b16      	ldr	r3, [pc, #88]	@ (800e2e0 <vPortValidateInterruptPriority+0x78>)
 800e286:	781b      	ldrb	r3, [r3, #0]
 800e288:	7afa      	ldrb	r2, [r7, #11]
 800e28a:	429a      	cmp	r2, r3
 800e28c:	d20b      	bcs.n	800e2a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e28e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e292:	f383 8811 	msr	BASEPRI, r3
 800e296:	f3bf 8f6f 	isb	sy
 800e29a:	f3bf 8f4f 	dsb	sy
 800e29e:	607b      	str	r3, [r7, #4]
}
 800e2a0:	bf00      	nop
 800e2a2:	bf00      	nop
 800e2a4:	e7fd      	b.n	800e2a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e2a6:	4b0f      	ldr	r3, [pc, #60]	@ (800e2e4 <vPortValidateInterruptPriority+0x7c>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e2ae:	4b0e      	ldr	r3, [pc, #56]	@ (800e2e8 <vPortValidateInterruptPriority+0x80>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	d90b      	bls.n	800e2ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e2b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2ba:	f383 8811 	msr	BASEPRI, r3
 800e2be:	f3bf 8f6f 	isb	sy
 800e2c2:	f3bf 8f4f 	dsb	sy
 800e2c6:	603b      	str	r3, [r7, #0]
}
 800e2c8:	bf00      	nop
 800e2ca:	bf00      	nop
 800e2cc:	e7fd      	b.n	800e2ca <vPortValidateInterruptPriority+0x62>
	}
 800e2ce:	bf00      	nop
 800e2d0:	3714      	adds	r7, #20
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d8:	4770      	bx	lr
 800e2da:	bf00      	nop
 800e2dc:	e000e3f0 	.word	0xe000e3f0
 800e2e0:	2000141c 	.word	0x2000141c
 800e2e4:	e000ed0c 	.word	0xe000ed0c
 800e2e8:	20001420 	.word	0x20001420

0800e2ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b08a      	sub	sp, #40	@ 0x28
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e2f8:	f7fe fcaa 	bl	800cc50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e2fc:	4b5c      	ldr	r3, [pc, #368]	@ (800e470 <pvPortMalloc+0x184>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d101      	bne.n	800e308 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e304:	f000 f924 	bl	800e550 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e308:	4b5a      	ldr	r3, [pc, #360]	@ (800e474 <pvPortMalloc+0x188>)
 800e30a:	681a      	ldr	r2, [r3, #0]
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	4013      	ands	r3, r2
 800e310:	2b00      	cmp	r3, #0
 800e312:	f040 8095 	bne.w	800e440 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d01e      	beq.n	800e35a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e31c:	2208      	movs	r2, #8
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	4413      	add	r3, r2
 800e322:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f003 0307 	and.w	r3, r3, #7
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d015      	beq.n	800e35a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f023 0307 	bic.w	r3, r3, #7
 800e334:	3308      	adds	r3, #8
 800e336:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f003 0307 	and.w	r3, r3, #7
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d00b      	beq.n	800e35a <pvPortMalloc+0x6e>
	__asm volatile
 800e342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e346:	f383 8811 	msr	BASEPRI, r3
 800e34a:	f3bf 8f6f 	isb	sy
 800e34e:	f3bf 8f4f 	dsb	sy
 800e352:	617b      	str	r3, [r7, #20]
}
 800e354:	bf00      	nop
 800e356:	bf00      	nop
 800e358:	e7fd      	b.n	800e356 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d06f      	beq.n	800e440 <pvPortMalloc+0x154>
 800e360:	4b45      	ldr	r3, [pc, #276]	@ (800e478 <pvPortMalloc+0x18c>)
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	687a      	ldr	r2, [r7, #4]
 800e366:	429a      	cmp	r2, r3
 800e368:	d86a      	bhi.n	800e440 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e36a:	4b44      	ldr	r3, [pc, #272]	@ (800e47c <pvPortMalloc+0x190>)
 800e36c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e36e:	4b43      	ldr	r3, [pc, #268]	@ (800e47c <pvPortMalloc+0x190>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e374:	e004      	b.n	800e380 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e378:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e382:	685b      	ldr	r3, [r3, #4]
 800e384:	687a      	ldr	r2, [r7, #4]
 800e386:	429a      	cmp	r2, r3
 800e388:	d903      	bls.n	800e392 <pvPortMalloc+0xa6>
 800e38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d1f1      	bne.n	800e376 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e392:	4b37      	ldr	r3, [pc, #220]	@ (800e470 <pvPortMalloc+0x184>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e398:	429a      	cmp	r2, r3
 800e39a:	d051      	beq.n	800e440 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e39c:	6a3b      	ldr	r3, [r7, #32]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	2208      	movs	r2, #8
 800e3a2:	4413      	add	r3, r2
 800e3a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3a8:	681a      	ldr	r2, [r3, #0]
 800e3aa:	6a3b      	ldr	r3, [r7, #32]
 800e3ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e3ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3b0:	685a      	ldr	r2, [r3, #4]
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	1ad2      	subs	r2, r2, r3
 800e3b6:	2308      	movs	r3, #8
 800e3b8:	005b      	lsls	r3, r3, #1
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	d920      	bls.n	800e400 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e3be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	4413      	add	r3, r2
 800e3c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e3c6:	69bb      	ldr	r3, [r7, #24]
 800e3c8:	f003 0307 	and.w	r3, r3, #7
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d00b      	beq.n	800e3e8 <pvPortMalloc+0xfc>
	__asm volatile
 800e3d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3d4:	f383 8811 	msr	BASEPRI, r3
 800e3d8:	f3bf 8f6f 	isb	sy
 800e3dc:	f3bf 8f4f 	dsb	sy
 800e3e0:	613b      	str	r3, [r7, #16]
}
 800e3e2:	bf00      	nop
 800e3e4:	bf00      	nop
 800e3e6:	e7fd      	b.n	800e3e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3ea:	685a      	ldr	r2, [r3, #4]
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	1ad2      	subs	r2, r2, r3
 800e3f0:	69bb      	ldr	r3, [r7, #24]
 800e3f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3f6:	687a      	ldr	r2, [r7, #4]
 800e3f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e3fa:	69b8      	ldr	r0, [r7, #24]
 800e3fc:	f000 f90a 	bl	800e614 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e400:	4b1d      	ldr	r3, [pc, #116]	@ (800e478 <pvPortMalloc+0x18c>)
 800e402:	681a      	ldr	r2, [r3, #0]
 800e404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e406:	685b      	ldr	r3, [r3, #4]
 800e408:	1ad3      	subs	r3, r2, r3
 800e40a:	4a1b      	ldr	r2, [pc, #108]	@ (800e478 <pvPortMalloc+0x18c>)
 800e40c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e40e:	4b1a      	ldr	r3, [pc, #104]	@ (800e478 <pvPortMalloc+0x18c>)
 800e410:	681a      	ldr	r2, [r3, #0]
 800e412:	4b1b      	ldr	r3, [pc, #108]	@ (800e480 <pvPortMalloc+0x194>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	429a      	cmp	r2, r3
 800e418:	d203      	bcs.n	800e422 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e41a:	4b17      	ldr	r3, [pc, #92]	@ (800e478 <pvPortMalloc+0x18c>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	4a18      	ldr	r2, [pc, #96]	@ (800e480 <pvPortMalloc+0x194>)
 800e420:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e424:	685a      	ldr	r2, [r3, #4]
 800e426:	4b13      	ldr	r3, [pc, #76]	@ (800e474 <pvPortMalloc+0x188>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	431a      	orrs	r2, r3
 800e42c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e42e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e432:	2200      	movs	r2, #0
 800e434:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e436:	4b13      	ldr	r3, [pc, #76]	@ (800e484 <pvPortMalloc+0x198>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	3301      	adds	r3, #1
 800e43c:	4a11      	ldr	r2, [pc, #68]	@ (800e484 <pvPortMalloc+0x198>)
 800e43e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e440:	f7fe fc14 	bl	800cc6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e444:	69fb      	ldr	r3, [r7, #28]
 800e446:	f003 0307 	and.w	r3, r3, #7
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d00b      	beq.n	800e466 <pvPortMalloc+0x17a>
	__asm volatile
 800e44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e452:	f383 8811 	msr	BASEPRI, r3
 800e456:	f3bf 8f6f 	isb	sy
 800e45a:	f3bf 8f4f 	dsb	sy
 800e45e:	60fb      	str	r3, [r7, #12]
}
 800e460:	bf00      	nop
 800e462:	bf00      	nop
 800e464:	e7fd      	b.n	800e462 <pvPortMalloc+0x176>
	return pvReturn;
 800e466:	69fb      	ldr	r3, [r7, #28]
}
 800e468:	4618      	mov	r0, r3
 800e46a:	3728      	adds	r7, #40	@ 0x28
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}
 800e470:	2000502c 	.word	0x2000502c
 800e474:	20005040 	.word	0x20005040
 800e478:	20005030 	.word	0x20005030
 800e47c:	20005024 	.word	0x20005024
 800e480:	20005034 	.word	0x20005034
 800e484:	20005038 	.word	0x20005038

0800e488 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b086      	sub	sp, #24
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d04f      	beq.n	800e53a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e49a:	2308      	movs	r3, #8
 800e49c:	425b      	negs	r3, r3
 800e49e:	697a      	ldr	r2, [r7, #20]
 800e4a0:	4413      	add	r3, r2
 800e4a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e4a4:	697b      	ldr	r3, [r7, #20]
 800e4a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e4a8:	693b      	ldr	r3, [r7, #16]
 800e4aa:	685a      	ldr	r2, [r3, #4]
 800e4ac:	4b25      	ldr	r3, [pc, #148]	@ (800e544 <vPortFree+0xbc>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	4013      	ands	r3, r2
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d10b      	bne.n	800e4ce <vPortFree+0x46>
	__asm volatile
 800e4b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4ba:	f383 8811 	msr	BASEPRI, r3
 800e4be:	f3bf 8f6f 	isb	sy
 800e4c2:	f3bf 8f4f 	dsb	sy
 800e4c6:	60fb      	str	r3, [r7, #12]
}
 800e4c8:	bf00      	nop
 800e4ca:	bf00      	nop
 800e4cc:	e7fd      	b.n	800e4ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e4ce:	693b      	ldr	r3, [r7, #16]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d00b      	beq.n	800e4ee <vPortFree+0x66>
	__asm volatile
 800e4d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4da:	f383 8811 	msr	BASEPRI, r3
 800e4de:	f3bf 8f6f 	isb	sy
 800e4e2:	f3bf 8f4f 	dsb	sy
 800e4e6:	60bb      	str	r3, [r7, #8]
}
 800e4e8:	bf00      	nop
 800e4ea:	bf00      	nop
 800e4ec:	e7fd      	b.n	800e4ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e4ee:	693b      	ldr	r3, [r7, #16]
 800e4f0:	685a      	ldr	r2, [r3, #4]
 800e4f2:	4b14      	ldr	r3, [pc, #80]	@ (800e544 <vPortFree+0xbc>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	4013      	ands	r3, r2
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d01e      	beq.n	800e53a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e4fc:	693b      	ldr	r3, [r7, #16]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d11a      	bne.n	800e53a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e504:	693b      	ldr	r3, [r7, #16]
 800e506:	685a      	ldr	r2, [r3, #4]
 800e508:	4b0e      	ldr	r3, [pc, #56]	@ (800e544 <vPortFree+0xbc>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	43db      	mvns	r3, r3
 800e50e:	401a      	ands	r2, r3
 800e510:	693b      	ldr	r3, [r7, #16]
 800e512:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e514:	f7fe fb9c 	bl	800cc50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	685a      	ldr	r2, [r3, #4]
 800e51c:	4b0a      	ldr	r3, [pc, #40]	@ (800e548 <vPortFree+0xc0>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	4413      	add	r3, r2
 800e522:	4a09      	ldr	r2, [pc, #36]	@ (800e548 <vPortFree+0xc0>)
 800e524:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e526:	6938      	ldr	r0, [r7, #16]
 800e528:	f000 f874 	bl	800e614 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e52c:	4b07      	ldr	r3, [pc, #28]	@ (800e54c <vPortFree+0xc4>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	3301      	adds	r3, #1
 800e532:	4a06      	ldr	r2, [pc, #24]	@ (800e54c <vPortFree+0xc4>)
 800e534:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e536:	f7fe fb99 	bl	800cc6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e53a:	bf00      	nop
 800e53c:	3718      	adds	r7, #24
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}
 800e542:	bf00      	nop
 800e544:	20005040 	.word	0x20005040
 800e548:	20005030 	.word	0x20005030
 800e54c:	2000503c 	.word	0x2000503c

0800e550 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e550:	b480      	push	{r7}
 800e552:	b085      	sub	sp, #20
 800e554:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e556:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800e55a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e55c:	4b27      	ldr	r3, [pc, #156]	@ (800e5fc <prvHeapInit+0xac>)
 800e55e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	f003 0307 	and.w	r3, r3, #7
 800e566:	2b00      	cmp	r3, #0
 800e568:	d00c      	beq.n	800e584 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	3307      	adds	r3, #7
 800e56e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	f023 0307 	bic.w	r3, r3, #7
 800e576:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e578:	68ba      	ldr	r2, [r7, #8]
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	1ad3      	subs	r3, r2, r3
 800e57e:	4a1f      	ldr	r2, [pc, #124]	@ (800e5fc <prvHeapInit+0xac>)
 800e580:	4413      	add	r3, r2
 800e582:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e588:	4a1d      	ldr	r2, [pc, #116]	@ (800e600 <prvHeapInit+0xb0>)
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e58e:	4b1c      	ldr	r3, [pc, #112]	@ (800e600 <prvHeapInit+0xb0>)
 800e590:	2200      	movs	r2, #0
 800e592:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	68ba      	ldr	r2, [r7, #8]
 800e598:	4413      	add	r3, r2
 800e59a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e59c:	2208      	movs	r2, #8
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	1a9b      	subs	r3, r3, r2
 800e5a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	f023 0307 	bic.w	r3, r3, #7
 800e5aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	4a15      	ldr	r2, [pc, #84]	@ (800e604 <prvHeapInit+0xb4>)
 800e5b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e5b2:	4b14      	ldr	r3, [pc, #80]	@ (800e604 <prvHeapInit+0xb4>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e5ba:	4b12      	ldr	r3, [pc, #72]	@ (800e604 <prvHeapInit+0xb4>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	2200      	movs	r2, #0
 800e5c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	68fa      	ldr	r2, [r7, #12]
 800e5ca:	1ad2      	subs	r2, r2, r3
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e5d0:	4b0c      	ldr	r3, [pc, #48]	@ (800e604 <prvHeapInit+0xb4>)
 800e5d2:	681a      	ldr	r2, [r3, #0]
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	685b      	ldr	r3, [r3, #4]
 800e5dc:	4a0a      	ldr	r2, [pc, #40]	@ (800e608 <prvHeapInit+0xb8>)
 800e5de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	685b      	ldr	r3, [r3, #4]
 800e5e4:	4a09      	ldr	r2, [pc, #36]	@ (800e60c <prvHeapInit+0xbc>)
 800e5e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e5e8:	4b09      	ldr	r3, [pc, #36]	@ (800e610 <prvHeapInit+0xc0>)
 800e5ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e5ee:	601a      	str	r2, [r3, #0]
}
 800e5f0:	bf00      	nop
 800e5f2:	3714      	adds	r7, #20
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fa:	4770      	bx	lr
 800e5fc:	20001424 	.word	0x20001424
 800e600:	20005024 	.word	0x20005024
 800e604:	2000502c 	.word	0x2000502c
 800e608:	20005034 	.word	0x20005034
 800e60c:	20005030 	.word	0x20005030
 800e610:	20005040 	.word	0x20005040

0800e614 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e614:	b480      	push	{r7}
 800e616:	b085      	sub	sp, #20
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e61c:	4b28      	ldr	r3, [pc, #160]	@ (800e6c0 <prvInsertBlockIntoFreeList+0xac>)
 800e61e:	60fb      	str	r3, [r7, #12]
 800e620:	e002      	b.n	800e628 <prvInsertBlockIntoFreeList+0x14>
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	60fb      	str	r3, [r7, #12]
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	687a      	ldr	r2, [r7, #4]
 800e62e:	429a      	cmp	r2, r3
 800e630:	d8f7      	bhi.n	800e622 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	685b      	ldr	r3, [r3, #4]
 800e63a:	68ba      	ldr	r2, [r7, #8]
 800e63c:	4413      	add	r3, r2
 800e63e:	687a      	ldr	r2, [r7, #4]
 800e640:	429a      	cmp	r2, r3
 800e642:	d108      	bne.n	800e656 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	685a      	ldr	r2, [r3, #4]
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	685b      	ldr	r3, [r3, #4]
 800e64c:	441a      	add	r2, r3
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	685b      	ldr	r3, [r3, #4]
 800e65e:	68ba      	ldr	r2, [r7, #8]
 800e660:	441a      	add	r2, r3
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	429a      	cmp	r2, r3
 800e668:	d118      	bne.n	800e69c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	681a      	ldr	r2, [r3, #0]
 800e66e:	4b15      	ldr	r3, [pc, #84]	@ (800e6c4 <prvInsertBlockIntoFreeList+0xb0>)
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	429a      	cmp	r2, r3
 800e674:	d00d      	beq.n	800e692 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	685a      	ldr	r2, [r3, #4]
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	685b      	ldr	r3, [r3, #4]
 800e680:	441a      	add	r2, r3
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	681a      	ldr	r2, [r3, #0]
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	601a      	str	r2, [r3, #0]
 800e690:	e008      	b.n	800e6a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e692:	4b0c      	ldr	r3, [pc, #48]	@ (800e6c4 <prvInsertBlockIntoFreeList+0xb0>)
 800e694:	681a      	ldr	r2, [r3, #0]
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	601a      	str	r2, [r3, #0]
 800e69a:	e003      	b.n	800e6a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	681a      	ldr	r2, [r3, #0]
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e6a4:	68fa      	ldr	r2, [r7, #12]
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	d002      	beq.n	800e6b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	687a      	ldr	r2, [r7, #4]
 800e6b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e6b2:	bf00      	nop
 800e6b4:	3714      	adds	r7, #20
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6bc:	4770      	bx	lr
 800e6be:	bf00      	nop
 800e6c0:	20005024 	.word	0x20005024
 800e6c4:	2000502c 	.word	0x2000502c

0800e6c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	4912      	ldr	r1, [pc, #72]	@ (800e718 <MX_USB_DEVICE_Init+0x50>)
 800e6d0:	4812      	ldr	r0, [pc, #72]	@ (800e71c <MX_USB_DEVICE_Init+0x54>)
 800e6d2:	f7fb fe57 	bl	800a384 <USBD_Init>
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d001      	beq.n	800e6e0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e6dc:	f7f3 fe3c 	bl	8002358 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e6e0:	490f      	ldr	r1, [pc, #60]	@ (800e720 <MX_USB_DEVICE_Init+0x58>)
 800e6e2:	480e      	ldr	r0, [pc, #56]	@ (800e71c <MX_USB_DEVICE_Init+0x54>)
 800e6e4:	f7fb fe7e 	bl	800a3e4 <USBD_RegisterClass>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d001      	beq.n	800e6f2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e6ee:	f7f3 fe33 	bl	8002358 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e6f2:	490c      	ldr	r1, [pc, #48]	@ (800e724 <MX_USB_DEVICE_Init+0x5c>)
 800e6f4:	4809      	ldr	r0, [pc, #36]	@ (800e71c <MX_USB_DEVICE_Init+0x54>)
 800e6f6:	f7fb fd75 	bl	800a1e4 <USBD_CDC_RegisterInterface>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d001      	beq.n	800e704 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e700:	f7f3 fe2a 	bl	8002358 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e704:	4805      	ldr	r0, [pc, #20]	@ (800e71c <MX_USB_DEVICE_Init+0x54>)
 800e706:	f7fb fea3 	bl	800a450 <USBD_Start>
 800e70a:	4603      	mov	r3, r0
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d001      	beq.n	800e714 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e710:	f7f3 fe22 	bl	8002358 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e714:	bf00      	nop
 800e716:	bd80      	pop	{r7, pc}
 800e718:	20000140 	.word	0x20000140
 800e71c:	20005044 	.word	0x20005044
 800e720:	200000a8 	.word	0x200000a8
 800e724:	2000012c 	.word	0x2000012c

0800e728 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e72c:	2200      	movs	r2, #0
 800e72e:	4905      	ldr	r1, [pc, #20]	@ (800e744 <CDC_Init_FS+0x1c>)
 800e730:	4805      	ldr	r0, [pc, #20]	@ (800e748 <CDC_Init_FS+0x20>)
 800e732:	f7fb fd71 	bl	800a218 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e736:	4905      	ldr	r1, [pc, #20]	@ (800e74c <CDC_Init_FS+0x24>)
 800e738:	4803      	ldr	r0, [pc, #12]	@ (800e748 <CDC_Init_FS+0x20>)
 800e73a:	f7fb fd8f 	bl	800a25c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e73e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e740:	4618      	mov	r0, r3
 800e742:	bd80      	pop	{r7, pc}
 800e744:	20005720 	.word	0x20005720
 800e748:	20005044 	.word	0x20005044
 800e74c:	20005320 	.word	0x20005320

0800e750 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e750:	b480      	push	{r7}
 800e752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e754:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e756:	4618      	mov	r0, r3
 800e758:	46bd      	mov	sp, r7
 800e75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75e:	4770      	bx	lr

0800e760 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e760:	b480      	push	{r7}
 800e762:	b083      	sub	sp, #12
 800e764:	af00      	add	r7, sp, #0
 800e766:	4603      	mov	r3, r0
 800e768:	6039      	str	r1, [r7, #0]
 800e76a:	71fb      	strb	r3, [r7, #7]
 800e76c:	4613      	mov	r3, r2
 800e76e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e770:	79fb      	ldrb	r3, [r7, #7]
 800e772:	2b23      	cmp	r3, #35	@ 0x23
 800e774:	d84a      	bhi.n	800e80c <CDC_Control_FS+0xac>
 800e776:	a201      	add	r2, pc, #4	@ (adr r2, 800e77c <CDC_Control_FS+0x1c>)
 800e778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e77c:	0800e80d 	.word	0x0800e80d
 800e780:	0800e80d 	.word	0x0800e80d
 800e784:	0800e80d 	.word	0x0800e80d
 800e788:	0800e80d 	.word	0x0800e80d
 800e78c:	0800e80d 	.word	0x0800e80d
 800e790:	0800e80d 	.word	0x0800e80d
 800e794:	0800e80d 	.word	0x0800e80d
 800e798:	0800e80d 	.word	0x0800e80d
 800e79c:	0800e80d 	.word	0x0800e80d
 800e7a0:	0800e80d 	.word	0x0800e80d
 800e7a4:	0800e80d 	.word	0x0800e80d
 800e7a8:	0800e80d 	.word	0x0800e80d
 800e7ac:	0800e80d 	.word	0x0800e80d
 800e7b0:	0800e80d 	.word	0x0800e80d
 800e7b4:	0800e80d 	.word	0x0800e80d
 800e7b8:	0800e80d 	.word	0x0800e80d
 800e7bc:	0800e80d 	.word	0x0800e80d
 800e7c0:	0800e80d 	.word	0x0800e80d
 800e7c4:	0800e80d 	.word	0x0800e80d
 800e7c8:	0800e80d 	.word	0x0800e80d
 800e7cc:	0800e80d 	.word	0x0800e80d
 800e7d0:	0800e80d 	.word	0x0800e80d
 800e7d4:	0800e80d 	.word	0x0800e80d
 800e7d8:	0800e80d 	.word	0x0800e80d
 800e7dc:	0800e80d 	.word	0x0800e80d
 800e7e0:	0800e80d 	.word	0x0800e80d
 800e7e4:	0800e80d 	.word	0x0800e80d
 800e7e8:	0800e80d 	.word	0x0800e80d
 800e7ec:	0800e80d 	.word	0x0800e80d
 800e7f0:	0800e80d 	.word	0x0800e80d
 800e7f4:	0800e80d 	.word	0x0800e80d
 800e7f8:	0800e80d 	.word	0x0800e80d
 800e7fc:	0800e80d 	.word	0x0800e80d
 800e800:	0800e80d 	.word	0x0800e80d
 800e804:	0800e80d 	.word	0x0800e80d
 800e808:	0800e80d 	.word	0x0800e80d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e80c:	bf00      	nop
  }

  return (USBD_OK);
 800e80e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e810:	4618      	mov	r0, r3
 800e812:	370c      	adds	r7, #12
 800e814:	46bd      	mov	sp, r7
 800e816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81a:	4770      	bx	lr

0800e81c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b082      	sub	sp, #8
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
 800e824:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e826:	6879      	ldr	r1, [r7, #4]
 800e828:	4805      	ldr	r0, [pc, #20]	@ (800e840 <CDC_Receive_FS+0x24>)
 800e82a:	f7fb fd17 	bl	800a25c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e82e:	4804      	ldr	r0, [pc, #16]	@ (800e840 <CDC_Receive_FS+0x24>)
 800e830:	f7fb fd72 	bl	800a318 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e834:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e836:	4618      	mov	r0, r3
 800e838:	3708      	adds	r7, #8
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bd80      	pop	{r7, pc}
 800e83e:	bf00      	nop
 800e840:	20005044 	.word	0x20005044

0800e844 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b084      	sub	sp, #16
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
 800e84c:	460b      	mov	r3, r1
 800e84e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e850:	2300      	movs	r3, #0
 800e852:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e854:	4b0d      	ldr	r3, [pc, #52]	@ (800e88c <CDC_Transmit_FS+0x48>)
 800e856:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e85a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e862:	2b00      	cmp	r3, #0
 800e864:	d001      	beq.n	800e86a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e866:	2301      	movs	r3, #1
 800e868:	e00b      	b.n	800e882 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e86a:	887b      	ldrh	r3, [r7, #2]
 800e86c:	461a      	mov	r2, r3
 800e86e:	6879      	ldr	r1, [r7, #4]
 800e870:	4806      	ldr	r0, [pc, #24]	@ (800e88c <CDC_Transmit_FS+0x48>)
 800e872:	f7fb fcd1 	bl	800a218 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e876:	4805      	ldr	r0, [pc, #20]	@ (800e88c <CDC_Transmit_FS+0x48>)
 800e878:	f7fb fd0e 	bl	800a298 <USBD_CDC_TransmitPacket>
 800e87c:	4603      	mov	r3, r0
 800e87e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e880:	7bfb      	ldrb	r3, [r7, #15]
}
 800e882:	4618      	mov	r0, r3
 800e884:	3710      	adds	r7, #16
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}
 800e88a:	bf00      	nop
 800e88c:	20005044 	.word	0x20005044

0800e890 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e890:	b480      	push	{r7}
 800e892:	b087      	sub	sp, #28
 800e894:	af00      	add	r7, sp, #0
 800e896:	60f8      	str	r0, [r7, #12]
 800e898:	60b9      	str	r1, [r7, #8]
 800e89a:	4613      	mov	r3, r2
 800e89c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e89e:	2300      	movs	r3, #0
 800e8a0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e8a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	371c      	adds	r7, #28
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b0:	4770      	bx	lr
	...

0800e8b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8b4:	b480      	push	{r7}
 800e8b6:	b083      	sub	sp, #12
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	6039      	str	r1, [r7, #0]
 800e8be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	2212      	movs	r2, #18
 800e8c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e8c6:	4b03      	ldr	r3, [pc, #12]	@ (800e8d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	370c      	adds	r7, #12
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d2:	4770      	bx	lr
 800e8d4:	2000015c 	.word	0x2000015c

0800e8d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8d8:	b480      	push	{r7}
 800e8da:	b083      	sub	sp, #12
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	4603      	mov	r3, r0
 800e8e0:	6039      	str	r1, [r7, #0]
 800e8e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	2204      	movs	r2, #4
 800e8e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e8ea:	4b03      	ldr	r3, [pc, #12]	@ (800e8f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	370c      	adds	r7, #12
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f6:	4770      	bx	lr
 800e8f8:	20000170 	.word	0x20000170

0800e8fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b082      	sub	sp, #8
 800e900:	af00      	add	r7, sp, #0
 800e902:	4603      	mov	r3, r0
 800e904:	6039      	str	r1, [r7, #0]
 800e906:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e908:	79fb      	ldrb	r3, [r7, #7]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d105      	bne.n	800e91a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e90e:	683a      	ldr	r2, [r7, #0]
 800e910:	4907      	ldr	r1, [pc, #28]	@ (800e930 <USBD_FS_ProductStrDescriptor+0x34>)
 800e912:	4808      	ldr	r0, [pc, #32]	@ (800e934 <USBD_FS_ProductStrDescriptor+0x38>)
 800e914:	f7fc ff62 	bl	800b7dc <USBD_GetString>
 800e918:	e004      	b.n	800e924 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e91a:	683a      	ldr	r2, [r7, #0]
 800e91c:	4904      	ldr	r1, [pc, #16]	@ (800e930 <USBD_FS_ProductStrDescriptor+0x34>)
 800e91e:	4805      	ldr	r0, [pc, #20]	@ (800e934 <USBD_FS_ProductStrDescriptor+0x38>)
 800e920:	f7fc ff5c 	bl	800b7dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800e924:	4b02      	ldr	r3, [pc, #8]	@ (800e930 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e926:	4618      	mov	r0, r3
 800e928:	3708      	adds	r7, #8
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}
 800e92e:	bf00      	nop
 800e930:	20005b20 	.word	0x20005b20
 800e934:	080128d4 	.word	0x080128d4

0800e938 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b082      	sub	sp, #8
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	4603      	mov	r3, r0
 800e940:	6039      	str	r1, [r7, #0]
 800e942:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e944:	683a      	ldr	r2, [r7, #0]
 800e946:	4904      	ldr	r1, [pc, #16]	@ (800e958 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e948:	4804      	ldr	r0, [pc, #16]	@ (800e95c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e94a:	f7fc ff47 	bl	800b7dc <USBD_GetString>
  return USBD_StrDesc;
 800e94e:	4b02      	ldr	r3, [pc, #8]	@ (800e958 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e950:	4618      	mov	r0, r3
 800e952:	3708      	adds	r7, #8
 800e954:	46bd      	mov	sp, r7
 800e956:	bd80      	pop	{r7, pc}
 800e958:	20005b20 	.word	0x20005b20
 800e95c:	080128ec 	.word	0x080128ec

0800e960 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b082      	sub	sp, #8
 800e964:	af00      	add	r7, sp, #0
 800e966:	4603      	mov	r3, r0
 800e968:	6039      	str	r1, [r7, #0]
 800e96a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	221a      	movs	r2, #26
 800e970:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e972:	f000 f843 	bl	800e9fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e976:	4b02      	ldr	r3, [pc, #8]	@ (800e980 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e978:	4618      	mov	r0, r3
 800e97a:	3708      	adds	r7, #8
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bd80      	pop	{r7, pc}
 800e980:	20000174 	.word	0x20000174

0800e984 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b082      	sub	sp, #8
 800e988:	af00      	add	r7, sp, #0
 800e98a:	4603      	mov	r3, r0
 800e98c:	6039      	str	r1, [r7, #0]
 800e98e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e990:	79fb      	ldrb	r3, [r7, #7]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d105      	bne.n	800e9a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e996:	683a      	ldr	r2, [r7, #0]
 800e998:	4907      	ldr	r1, [pc, #28]	@ (800e9b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e99a:	4808      	ldr	r0, [pc, #32]	@ (800e9bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800e99c:	f7fc ff1e 	bl	800b7dc <USBD_GetString>
 800e9a0:	e004      	b.n	800e9ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e9a2:	683a      	ldr	r2, [r7, #0]
 800e9a4:	4904      	ldr	r1, [pc, #16]	@ (800e9b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e9a6:	4805      	ldr	r0, [pc, #20]	@ (800e9bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800e9a8:	f7fc ff18 	bl	800b7dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800e9ac:	4b02      	ldr	r3, [pc, #8]	@ (800e9b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	3708      	adds	r7, #8
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bd80      	pop	{r7, pc}
 800e9b6:	bf00      	nop
 800e9b8:	20005b20 	.word	0x20005b20
 800e9bc:	08012900 	.word	0x08012900

0800e9c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b082      	sub	sp, #8
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	6039      	str	r1, [r7, #0]
 800e9ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e9cc:	79fb      	ldrb	r3, [r7, #7]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d105      	bne.n	800e9de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e9d2:	683a      	ldr	r2, [r7, #0]
 800e9d4:	4907      	ldr	r1, [pc, #28]	@ (800e9f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e9d6:	4808      	ldr	r0, [pc, #32]	@ (800e9f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e9d8:	f7fc ff00 	bl	800b7dc <USBD_GetString>
 800e9dc:	e004      	b.n	800e9e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e9de:	683a      	ldr	r2, [r7, #0]
 800e9e0:	4904      	ldr	r1, [pc, #16]	@ (800e9f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e9e2:	4805      	ldr	r0, [pc, #20]	@ (800e9f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e9e4:	f7fc fefa 	bl	800b7dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800e9e8:	4b02      	ldr	r3, [pc, #8]	@ (800e9f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	3708      	adds	r7, #8
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bd80      	pop	{r7, pc}
 800e9f2:	bf00      	nop
 800e9f4:	20005b20 	.word	0x20005b20
 800e9f8:	0801290c 	.word	0x0801290c

0800e9fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b084      	sub	sp, #16
 800ea00:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ea02:	4b0f      	ldr	r3, [pc, #60]	@ (800ea40 <Get_SerialNum+0x44>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ea08:	4b0e      	ldr	r3, [pc, #56]	@ (800ea44 <Get_SerialNum+0x48>)
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ea0e:	4b0e      	ldr	r3, [pc, #56]	@ (800ea48 <Get_SerialNum+0x4c>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ea14:	68fa      	ldr	r2, [r7, #12]
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	4413      	add	r3, r2
 800ea1a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d009      	beq.n	800ea36 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ea22:	2208      	movs	r2, #8
 800ea24:	4909      	ldr	r1, [pc, #36]	@ (800ea4c <Get_SerialNum+0x50>)
 800ea26:	68f8      	ldr	r0, [r7, #12]
 800ea28:	f000 f814 	bl	800ea54 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ea2c:	2204      	movs	r2, #4
 800ea2e:	4908      	ldr	r1, [pc, #32]	@ (800ea50 <Get_SerialNum+0x54>)
 800ea30:	68b8      	ldr	r0, [r7, #8]
 800ea32:	f000 f80f 	bl	800ea54 <IntToUnicode>
  }
}
 800ea36:	bf00      	nop
 800ea38:	3710      	adds	r7, #16
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}
 800ea3e:	bf00      	nop
 800ea40:	1fff7a10 	.word	0x1fff7a10
 800ea44:	1fff7a14 	.word	0x1fff7a14
 800ea48:	1fff7a18 	.word	0x1fff7a18
 800ea4c:	20000176 	.word	0x20000176
 800ea50:	20000186 	.word	0x20000186

0800ea54 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ea54:	b480      	push	{r7}
 800ea56:	b087      	sub	sp, #28
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	60f8      	str	r0, [r7, #12]
 800ea5c:	60b9      	str	r1, [r7, #8]
 800ea5e:	4613      	mov	r3, r2
 800ea60:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ea62:	2300      	movs	r3, #0
 800ea64:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ea66:	2300      	movs	r3, #0
 800ea68:	75fb      	strb	r3, [r7, #23]
 800ea6a:	e027      	b.n	800eabc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	0f1b      	lsrs	r3, r3, #28
 800ea70:	2b09      	cmp	r3, #9
 800ea72:	d80b      	bhi.n	800ea8c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	0f1b      	lsrs	r3, r3, #28
 800ea78:	b2da      	uxtb	r2, r3
 800ea7a:	7dfb      	ldrb	r3, [r7, #23]
 800ea7c:	005b      	lsls	r3, r3, #1
 800ea7e:	4619      	mov	r1, r3
 800ea80:	68bb      	ldr	r3, [r7, #8]
 800ea82:	440b      	add	r3, r1
 800ea84:	3230      	adds	r2, #48	@ 0x30
 800ea86:	b2d2      	uxtb	r2, r2
 800ea88:	701a      	strb	r2, [r3, #0]
 800ea8a:	e00a      	b.n	800eaa2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	0f1b      	lsrs	r3, r3, #28
 800ea90:	b2da      	uxtb	r2, r3
 800ea92:	7dfb      	ldrb	r3, [r7, #23]
 800ea94:	005b      	lsls	r3, r3, #1
 800ea96:	4619      	mov	r1, r3
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	440b      	add	r3, r1
 800ea9c:	3237      	adds	r2, #55	@ 0x37
 800ea9e:	b2d2      	uxtb	r2, r2
 800eaa0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	011b      	lsls	r3, r3, #4
 800eaa6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800eaa8:	7dfb      	ldrb	r3, [r7, #23]
 800eaaa:	005b      	lsls	r3, r3, #1
 800eaac:	3301      	adds	r3, #1
 800eaae:	68ba      	ldr	r2, [r7, #8]
 800eab0:	4413      	add	r3, r2
 800eab2:	2200      	movs	r2, #0
 800eab4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800eab6:	7dfb      	ldrb	r3, [r7, #23]
 800eab8:	3301      	adds	r3, #1
 800eaba:	75fb      	strb	r3, [r7, #23]
 800eabc:	7dfa      	ldrb	r2, [r7, #23]
 800eabe:	79fb      	ldrb	r3, [r7, #7]
 800eac0:	429a      	cmp	r2, r3
 800eac2:	d3d3      	bcc.n	800ea6c <IntToUnicode+0x18>
  }
}
 800eac4:	bf00      	nop
 800eac6:	bf00      	nop
 800eac8:	371c      	adds	r7, #28
 800eaca:	46bd      	mov	sp, r7
 800eacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead0:	4770      	bx	lr
	...

0800ead4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b08a      	sub	sp, #40	@ 0x28
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eadc:	f107 0314 	add.w	r3, r7, #20
 800eae0:	2200      	movs	r2, #0
 800eae2:	601a      	str	r2, [r3, #0]
 800eae4:	605a      	str	r2, [r3, #4]
 800eae6:	609a      	str	r2, [r3, #8]
 800eae8:	60da      	str	r2, [r3, #12]
 800eaea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800eaf4:	d13a      	bne.n	800eb6c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	613b      	str	r3, [r7, #16]
 800eafa:	4b1e      	ldr	r3, [pc, #120]	@ (800eb74 <HAL_PCD_MspInit+0xa0>)
 800eafc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eafe:	4a1d      	ldr	r2, [pc, #116]	@ (800eb74 <HAL_PCD_MspInit+0xa0>)
 800eb00:	f043 0301 	orr.w	r3, r3, #1
 800eb04:	6313      	str	r3, [r2, #48]	@ 0x30
 800eb06:	4b1b      	ldr	r3, [pc, #108]	@ (800eb74 <HAL_PCD_MspInit+0xa0>)
 800eb08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb0a:	f003 0301 	and.w	r3, r3, #1
 800eb0e:	613b      	str	r3, [r7, #16]
 800eb10:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800eb12:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800eb16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eb18:	2302      	movs	r3, #2
 800eb1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eb20:	2303      	movs	r3, #3
 800eb22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800eb24:	230a      	movs	r3, #10
 800eb26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eb28:	f107 0314 	add.w	r3, r7, #20
 800eb2c:	4619      	mov	r1, r3
 800eb2e:	4812      	ldr	r0, [pc, #72]	@ (800eb78 <HAL_PCD_MspInit+0xa4>)
 800eb30:	f7f4 fcf0 	bl	8003514 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800eb34:	4b0f      	ldr	r3, [pc, #60]	@ (800eb74 <HAL_PCD_MspInit+0xa0>)
 800eb36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb38:	4a0e      	ldr	r2, [pc, #56]	@ (800eb74 <HAL_PCD_MspInit+0xa0>)
 800eb3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb3e:	6353      	str	r3, [r2, #52]	@ 0x34
 800eb40:	2300      	movs	r3, #0
 800eb42:	60fb      	str	r3, [r7, #12]
 800eb44:	4b0b      	ldr	r3, [pc, #44]	@ (800eb74 <HAL_PCD_MspInit+0xa0>)
 800eb46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb48:	4a0a      	ldr	r2, [pc, #40]	@ (800eb74 <HAL_PCD_MspInit+0xa0>)
 800eb4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800eb4e:	6453      	str	r3, [r2, #68]	@ 0x44
 800eb50:	4b08      	ldr	r3, [pc, #32]	@ (800eb74 <HAL_PCD_MspInit+0xa0>)
 800eb52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800eb58:	60fb      	str	r3, [r7, #12]
 800eb5a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	2105      	movs	r1, #5
 800eb60:	2043      	movs	r0, #67	@ 0x43
 800eb62:	f7f4 fc3b 	bl	80033dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800eb66:	2043      	movs	r0, #67	@ 0x43
 800eb68:	f7f4 fc54 	bl	8003414 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800eb6c:	bf00      	nop
 800eb6e:	3728      	adds	r7, #40	@ 0x28
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}
 800eb74:	40023800 	.word	0x40023800
 800eb78:	40020000 	.word	0x40020000

0800eb7c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b082      	sub	sp, #8
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800eb90:	4619      	mov	r1, r3
 800eb92:	4610      	mov	r0, r2
 800eb94:	f7fb fca9 	bl	800a4ea <USBD_LL_SetupStage>
}
 800eb98:	bf00      	nop
 800eb9a:	3708      	adds	r7, #8
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}

0800eba0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b082      	sub	sp, #8
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
 800eba8:	460b      	mov	r3, r1
 800ebaa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ebb2:	78fa      	ldrb	r2, [r7, #3]
 800ebb4:	6879      	ldr	r1, [r7, #4]
 800ebb6:	4613      	mov	r3, r2
 800ebb8:	00db      	lsls	r3, r3, #3
 800ebba:	4413      	add	r3, r2
 800ebbc:	009b      	lsls	r3, r3, #2
 800ebbe:	440b      	add	r3, r1
 800ebc0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ebc4:	681a      	ldr	r2, [r3, #0]
 800ebc6:	78fb      	ldrb	r3, [r7, #3]
 800ebc8:	4619      	mov	r1, r3
 800ebca:	f7fb fce3 	bl	800a594 <USBD_LL_DataOutStage>
}
 800ebce:	bf00      	nop
 800ebd0:	3708      	adds	r7, #8
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd80      	pop	{r7, pc}

0800ebd6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebd6:	b580      	push	{r7, lr}
 800ebd8:	b082      	sub	sp, #8
 800ebda:	af00      	add	r7, sp, #0
 800ebdc:	6078      	str	r0, [r7, #4]
 800ebde:	460b      	mov	r3, r1
 800ebe0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ebe8:	78fa      	ldrb	r2, [r7, #3]
 800ebea:	6879      	ldr	r1, [r7, #4]
 800ebec:	4613      	mov	r3, r2
 800ebee:	00db      	lsls	r3, r3, #3
 800ebf0:	4413      	add	r3, r2
 800ebf2:	009b      	lsls	r3, r3, #2
 800ebf4:	440b      	add	r3, r1
 800ebf6:	3320      	adds	r3, #32
 800ebf8:	681a      	ldr	r2, [r3, #0]
 800ebfa:	78fb      	ldrb	r3, [r7, #3]
 800ebfc:	4619      	mov	r1, r3
 800ebfe:	f7fb fd85 	bl	800a70c <USBD_LL_DataInStage>
}
 800ec02:	bf00      	nop
 800ec04:	3708      	adds	r7, #8
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd80      	pop	{r7, pc}

0800ec0a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec0a:	b580      	push	{r7, lr}
 800ec0c:	b082      	sub	sp, #8
 800ec0e:	af00      	add	r7, sp, #0
 800ec10:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f7fb fec9 	bl	800a9b0 <USBD_LL_SOF>
}
 800ec1e:	bf00      	nop
 800ec20:	3708      	adds	r7, #8
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}

0800ec26 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec26:	b580      	push	{r7, lr}
 800ec28:	b084      	sub	sp, #16
 800ec2a:	af00      	add	r7, sp, #0
 800ec2c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ec2e:	2301      	movs	r3, #1
 800ec30:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	79db      	ldrb	r3, [r3, #7]
 800ec36:	2b02      	cmp	r3, #2
 800ec38:	d001      	beq.n	800ec3e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ec3a:	f7f3 fb8d 	bl	8002358 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ec44:	7bfa      	ldrb	r2, [r7, #15]
 800ec46:	4611      	mov	r1, r2
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f7fb fe6d 	bl	800a928 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ec54:	4618      	mov	r0, r3
 800ec56:	f7fb fe14 	bl	800a882 <USBD_LL_Reset>
}
 800ec5a:	bf00      	nop
 800ec5c:	3710      	adds	r7, #16
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}
	...

0800ec64 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b082      	sub	sp, #8
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ec72:	4618      	mov	r0, r3
 800ec74:	f7fb fe68 	bl	800a948 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	687a      	ldr	r2, [r7, #4]
 800ec84:	6812      	ldr	r2, [r2, #0]
 800ec86:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ec8a:	f043 0301 	orr.w	r3, r3, #1
 800ec8e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	7adb      	ldrb	r3, [r3, #11]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d005      	beq.n	800eca4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ec98:	4b04      	ldr	r3, [pc, #16]	@ (800ecac <HAL_PCD_SuspendCallback+0x48>)
 800ec9a:	691b      	ldr	r3, [r3, #16]
 800ec9c:	4a03      	ldr	r2, [pc, #12]	@ (800ecac <HAL_PCD_SuspendCallback+0x48>)
 800ec9e:	f043 0306 	orr.w	r3, r3, #6
 800eca2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800eca4:	bf00      	nop
 800eca6:	3708      	adds	r7, #8
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}
 800ecac:	e000ed00 	.word	0xe000ed00

0800ecb0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b082      	sub	sp, #8
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f7fb fe5e 	bl	800a980 <USBD_LL_Resume>
}
 800ecc4:	bf00      	nop
 800ecc6:	3708      	adds	r7, #8
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	bd80      	pop	{r7, pc}

0800eccc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b082      	sub	sp, #8
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
 800ecd4:	460b      	mov	r3, r1
 800ecd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ecde:	78fa      	ldrb	r2, [r7, #3]
 800ece0:	4611      	mov	r1, r2
 800ece2:	4618      	mov	r0, r3
 800ece4:	f7fb feb6 	bl	800aa54 <USBD_LL_IsoOUTIncomplete>
}
 800ece8:	bf00      	nop
 800ecea:	3708      	adds	r7, #8
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}

0800ecf0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b082      	sub	sp, #8
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
 800ecf8:	460b      	mov	r3, r1
 800ecfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ed02:	78fa      	ldrb	r2, [r7, #3]
 800ed04:	4611      	mov	r1, r2
 800ed06:	4618      	mov	r0, r3
 800ed08:	f7fb fe72 	bl	800a9f0 <USBD_LL_IsoINIncomplete>
}
 800ed0c:	bf00      	nop
 800ed0e:	3708      	adds	r7, #8
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd80      	pop	{r7, pc}

0800ed14 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b082      	sub	sp, #8
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ed22:	4618      	mov	r0, r3
 800ed24:	f7fb fec8 	bl	800aab8 <USBD_LL_DevConnected>
}
 800ed28:	bf00      	nop
 800ed2a:	3708      	adds	r7, #8
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd80      	pop	{r7, pc}

0800ed30 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b082      	sub	sp, #8
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f7fb fec5 	bl	800aace <USBD_LL_DevDisconnected>
}
 800ed44:	bf00      	nop
 800ed46:	3708      	adds	r7, #8
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bd80      	pop	{r7, pc}

0800ed4c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b082      	sub	sp, #8
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	781b      	ldrb	r3, [r3, #0]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d13c      	bne.n	800edd6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ed5c:	4a20      	ldr	r2, [pc, #128]	@ (800ede0 <USBD_LL_Init+0x94>)
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	4a1e      	ldr	r2, [pc, #120]	@ (800ede0 <USBD_LL_Init+0x94>)
 800ed68:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ed6c:	4b1c      	ldr	r3, [pc, #112]	@ (800ede0 <USBD_LL_Init+0x94>)
 800ed6e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ed72:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ed74:	4b1a      	ldr	r3, [pc, #104]	@ (800ede0 <USBD_LL_Init+0x94>)
 800ed76:	2204      	movs	r2, #4
 800ed78:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ed7a:	4b19      	ldr	r3, [pc, #100]	@ (800ede0 <USBD_LL_Init+0x94>)
 800ed7c:	2202      	movs	r2, #2
 800ed7e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ed80:	4b17      	ldr	r3, [pc, #92]	@ (800ede0 <USBD_LL_Init+0x94>)
 800ed82:	2200      	movs	r2, #0
 800ed84:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ed86:	4b16      	ldr	r3, [pc, #88]	@ (800ede0 <USBD_LL_Init+0x94>)
 800ed88:	2202      	movs	r2, #2
 800ed8a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ed8c:	4b14      	ldr	r3, [pc, #80]	@ (800ede0 <USBD_LL_Init+0x94>)
 800ed8e:	2200      	movs	r2, #0
 800ed90:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ed92:	4b13      	ldr	r3, [pc, #76]	@ (800ede0 <USBD_LL_Init+0x94>)
 800ed94:	2200      	movs	r2, #0
 800ed96:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ed98:	4b11      	ldr	r3, [pc, #68]	@ (800ede0 <USBD_LL_Init+0x94>)
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ed9e:	4b10      	ldr	r3, [pc, #64]	@ (800ede0 <USBD_LL_Init+0x94>)
 800eda0:	2200      	movs	r2, #0
 800eda2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800eda4:	4b0e      	ldr	r3, [pc, #56]	@ (800ede0 <USBD_LL_Init+0x94>)
 800eda6:	2200      	movs	r2, #0
 800eda8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800edaa:	480d      	ldr	r0, [pc, #52]	@ (800ede0 <USBD_LL_Init+0x94>)
 800edac:	f7f5 fd8c 	bl	80048c8 <HAL_PCD_Init>
 800edb0:	4603      	mov	r3, r0
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d001      	beq.n	800edba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800edb6:	f7f3 facf 	bl	8002358 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800edba:	2180      	movs	r1, #128	@ 0x80
 800edbc:	4808      	ldr	r0, [pc, #32]	@ (800ede0 <USBD_LL_Init+0x94>)
 800edbe:	f7f6 ffb8 	bl	8005d32 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800edc2:	2240      	movs	r2, #64	@ 0x40
 800edc4:	2100      	movs	r1, #0
 800edc6:	4806      	ldr	r0, [pc, #24]	@ (800ede0 <USBD_LL_Init+0x94>)
 800edc8:	f7f6 ff6c 	bl	8005ca4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800edcc:	2280      	movs	r2, #128	@ 0x80
 800edce:	2101      	movs	r1, #1
 800edd0:	4803      	ldr	r0, [pc, #12]	@ (800ede0 <USBD_LL_Init+0x94>)
 800edd2:	f7f6 ff67 	bl	8005ca4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800edd6:	2300      	movs	r3, #0
}
 800edd8:	4618      	mov	r0, r3
 800edda:	3708      	adds	r7, #8
 800eddc:	46bd      	mov	sp, r7
 800edde:	bd80      	pop	{r7, pc}
 800ede0:	20005d20 	.word	0x20005d20

0800ede4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b084      	sub	sp, #16
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edec:	2300      	movs	r3, #0
 800edee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edf0:	2300      	movs	r3, #0
 800edf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800edfa:	4618      	mov	r0, r3
 800edfc:	f7f5 fe73 	bl	8004ae6 <HAL_PCD_Start>
 800ee00:	4603      	mov	r3, r0
 800ee02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee04:	7bfb      	ldrb	r3, [r7, #15]
 800ee06:	4618      	mov	r0, r3
 800ee08:	f000 f942 	bl	800f090 <USBD_Get_USB_Status>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee10:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee12:	4618      	mov	r0, r3
 800ee14:	3710      	adds	r7, #16
 800ee16:	46bd      	mov	sp, r7
 800ee18:	bd80      	pop	{r7, pc}

0800ee1a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ee1a:	b580      	push	{r7, lr}
 800ee1c:	b084      	sub	sp, #16
 800ee1e:	af00      	add	r7, sp, #0
 800ee20:	6078      	str	r0, [r7, #4]
 800ee22:	4608      	mov	r0, r1
 800ee24:	4611      	mov	r1, r2
 800ee26:	461a      	mov	r2, r3
 800ee28:	4603      	mov	r3, r0
 800ee2a:	70fb      	strb	r3, [r7, #3]
 800ee2c:	460b      	mov	r3, r1
 800ee2e:	70bb      	strb	r3, [r7, #2]
 800ee30:	4613      	mov	r3, r2
 800ee32:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee34:	2300      	movs	r3, #0
 800ee36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ee42:	78bb      	ldrb	r3, [r7, #2]
 800ee44:	883a      	ldrh	r2, [r7, #0]
 800ee46:	78f9      	ldrb	r1, [r7, #3]
 800ee48:	f7f6 fb47 	bl	80054da <HAL_PCD_EP_Open>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee50:	7bfb      	ldrb	r3, [r7, #15]
 800ee52:	4618      	mov	r0, r3
 800ee54:	f000 f91c 	bl	800f090 <USBD_Get_USB_Status>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	3710      	adds	r7, #16
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}

0800ee66 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee66:	b580      	push	{r7, lr}
 800ee68:	b084      	sub	sp, #16
 800ee6a:	af00      	add	r7, sp, #0
 800ee6c:	6078      	str	r0, [r7, #4]
 800ee6e:	460b      	mov	r3, r1
 800ee70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee72:	2300      	movs	r3, #0
 800ee74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee76:	2300      	movs	r3, #0
 800ee78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ee80:	78fa      	ldrb	r2, [r7, #3]
 800ee82:	4611      	mov	r1, r2
 800ee84:	4618      	mov	r0, r3
 800ee86:	f7f6 fb92 	bl	80055ae <HAL_PCD_EP_Close>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee8e:	7bfb      	ldrb	r3, [r7, #15]
 800ee90:	4618      	mov	r0, r3
 800ee92:	f000 f8fd 	bl	800f090 <USBD_Get_USB_Status>
 800ee96:	4603      	mov	r3, r0
 800ee98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3710      	adds	r7, #16
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}

0800eea4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b084      	sub	sp, #16
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
 800eeac:	460b      	mov	r3, r1
 800eeae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800eebe:	78fa      	ldrb	r2, [r7, #3]
 800eec0:	4611      	mov	r1, r2
 800eec2:	4618      	mov	r0, r3
 800eec4:	f7f6 fc4a 	bl	800575c <HAL_PCD_EP_SetStall>
 800eec8:	4603      	mov	r3, r0
 800eeca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eecc:	7bfb      	ldrb	r3, [r7, #15]
 800eece:	4618      	mov	r0, r3
 800eed0:	f000 f8de 	bl	800f090 <USBD_Get_USB_Status>
 800eed4:	4603      	mov	r3, r0
 800eed6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eed8:	7bbb      	ldrb	r3, [r7, #14]
}
 800eeda:	4618      	mov	r0, r3
 800eedc:	3710      	adds	r7, #16
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}

0800eee2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eee2:	b580      	push	{r7, lr}
 800eee4:	b084      	sub	sp, #16
 800eee6:	af00      	add	r7, sp, #0
 800eee8:	6078      	str	r0, [r7, #4]
 800eeea:	460b      	mov	r3, r1
 800eeec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eeee:	2300      	movs	r3, #0
 800eef0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eef2:	2300      	movs	r3, #0
 800eef4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800eefc:	78fa      	ldrb	r2, [r7, #3]
 800eefe:	4611      	mov	r1, r2
 800ef00:	4618      	mov	r0, r3
 800ef02:	f7f6 fc8e 	bl	8005822 <HAL_PCD_EP_ClrStall>
 800ef06:	4603      	mov	r3, r0
 800ef08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef0a:	7bfb      	ldrb	r3, [r7, #15]
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f000 f8bf 	bl	800f090 <USBD_Get_USB_Status>
 800ef12:	4603      	mov	r3, r0
 800ef14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef16:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef18:	4618      	mov	r0, r3
 800ef1a:	3710      	adds	r7, #16
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd80      	pop	{r7, pc}

0800ef20 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef20:	b480      	push	{r7}
 800ef22:	b085      	sub	sp, #20
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
 800ef28:	460b      	mov	r3, r1
 800ef2a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ef32:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ef34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	da0b      	bge.n	800ef54 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ef3c:	78fb      	ldrb	r3, [r7, #3]
 800ef3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ef42:	68f9      	ldr	r1, [r7, #12]
 800ef44:	4613      	mov	r3, r2
 800ef46:	00db      	lsls	r3, r3, #3
 800ef48:	4413      	add	r3, r2
 800ef4a:	009b      	lsls	r3, r3, #2
 800ef4c:	440b      	add	r3, r1
 800ef4e:	3316      	adds	r3, #22
 800ef50:	781b      	ldrb	r3, [r3, #0]
 800ef52:	e00b      	b.n	800ef6c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ef54:	78fb      	ldrb	r3, [r7, #3]
 800ef56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ef5a:	68f9      	ldr	r1, [r7, #12]
 800ef5c:	4613      	mov	r3, r2
 800ef5e:	00db      	lsls	r3, r3, #3
 800ef60:	4413      	add	r3, r2
 800ef62:	009b      	lsls	r3, r3, #2
 800ef64:	440b      	add	r3, r1
 800ef66:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ef6a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	3714      	adds	r7, #20
 800ef70:	46bd      	mov	sp, r7
 800ef72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef76:	4770      	bx	lr

0800ef78 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b084      	sub	sp, #16
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
 800ef80:	460b      	mov	r3, r1
 800ef82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef84:	2300      	movs	r3, #0
 800ef86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef88:	2300      	movs	r3, #0
 800ef8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ef92:	78fa      	ldrb	r2, [r7, #3]
 800ef94:	4611      	mov	r1, r2
 800ef96:	4618      	mov	r0, r3
 800ef98:	f7f6 fa7b 	bl	8005492 <HAL_PCD_SetAddress>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800efa0:	7bfb      	ldrb	r3, [r7, #15]
 800efa2:	4618      	mov	r0, r3
 800efa4:	f000 f874 	bl	800f090 <USBD_Get_USB_Status>
 800efa8:	4603      	mov	r3, r0
 800efaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800efac:	7bbb      	ldrb	r3, [r7, #14]
}
 800efae:	4618      	mov	r0, r3
 800efb0:	3710      	adds	r7, #16
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}

0800efb6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800efb6:	b580      	push	{r7, lr}
 800efb8:	b086      	sub	sp, #24
 800efba:	af00      	add	r7, sp, #0
 800efbc:	60f8      	str	r0, [r7, #12]
 800efbe:	607a      	str	r2, [r7, #4]
 800efc0:	603b      	str	r3, [r7, #0]
 800efc2:	460b      	mov	r3, r1
 800efc4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efc6:	2300      	movs	r3, #0
 800efc8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efca:	2300      	movs	r3, #0
 800efcc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800efd4:	7af9      	ldrb	r1, [r7, #11]
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	687a      	ldr	r2, [r7, #4]
 800efda:	f7f6 fb85 	bl	80056e8 <HAL_PCD_EP_Transmit>
 800efde:	4603      	mov	r3, r0
 800efe0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800efe2:	7dfb      	ldrb	r3, [r7, #23]
 800efe4:	4618      	mov	r0, r3
 800efe6:	f000 f853 	bl	800f090 <USBD_Get_USB_Status>
 800efea:	4603      	mov	r3, r0
 800efec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800efee:	7dbb      	ldrb	r3, [r7, #22]
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	3718      	adds	r7, #24
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}

0800eff8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b086      	sub	sp, #24
 800effc:	af00      	add	r7, sp, #0
 800effe:	60f8      	str	r0, [r7, #12]
 800f000:	607a      	str	r2, [r7, #4]
 800f002:	603b      	str	r3, [r7, #0]
 800f004:	460b      	mov	r3, r1
 800f006:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f008:	2300      	movs	r3, #0
 800f00a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f00c:	2300      	movs	r3, #0
 800f00e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f016:	7af9      	ldrb	r1, [r7, #11]
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	687a      	ldr	r2, [r7, #4]
 800f01c:	f7f6 fb11 	bl	8005642 <HAL_PCD_EP_Receive>
 800f020:	4603      	mov	r3, r0
 800f022:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f024:	7dfb      	ldrb	r3, [r7, #23]
 800f026:	4618      	mov	r0, r3
 800f028:	f000 f832 	bl	800f090 <USBD_Get_USB_Status>
 800f02c:	4603      	mov	r3, r0
 800f02e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f030:	7dbb      	ldrb	r3, [r7, #22]
}
 800f032:	4618      	mov	r0, r3
 800f034:	3718      	adds	r7, #24
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}

0800f03a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f03a:	b580      	push	{r7, lr}
 800f03c:	b082      	sub	sp, #8
 800f03e:	af00      	add	r7, sp, #0
 800f040:	6078      	str	r0, [r7, #4]
 800f042:	460b      	mov	r3, r1
 800f044:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f04c:	78fa      	ldrb	r2, [r7, #3]
 800f04e:	4611      	mov	r1, r2
 800f050:	4618      	mov	r0, r3
 800f052:	f7f6 fb31 	bl	80056b8 <HAL_PCD_EP_GetRxCount>
 800f056:	4603      	mov	r3, r0
}
 800f058:	4618      	mov	r0, r3
 800f05a:	3708      	adds	r7, #8
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}

0800f060 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f060:	b480      	push	{r7}
 800f062:	b083      	sub	sp, #12
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f068:	4b03      	ldr	r3, [pc, #12]	@ (800f078 <USBD_static_malloc+0x18>)
}
 800f06a:	4618      	mov	r0, r3
 800f06c:	370c      	adds	r7, #12
 800f06e:	46bd      	mov	sp, r7
 800f070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f074:	4770      	bx	lr
 800f076:	bf00      	nop
 800f078:	20006204 	.word	0x20006204

0800f07c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f07c:	b480      	push	{r7}
 800f07e:	b083      	sub	sp, #12
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]

}
 800f084:	bf00      	nop
 800f086:	370c      	adds	r7, #12
 800f088:	46bd      	mov	sp, r7
 800f08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08e:	4770      	bx	lr

0800f090 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f090:	b480      	push	{r7}
 800f092:	b085      	sub	sp, #20
 800f094:	af00      	add	r7, sp, #0
 800f096:	4603      	mov	r3, r0
 800f098:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f09a:	2300      	movs	r3, #0
 800f09c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f09e:	79fb      	ldrb	r3, [r7, #7]
 800f0a0:	2b03      	cmp	r3, #3
 800f0a2:	d817      	bhi.n	800f0d4 <USBD_Get_USB_Status+0x44>
 800f0a4:	a201      	add	r2, pc, #4	@ (adr r2, 800f0ac <USBD_Get_USB_Status+0x1c>)
 800f0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0aa:	bf00      	nop
 800f0ac:	0800f0bd 	.word	0x0800f0bd
 800f0b0:	0800f0c3 	.word	0x0800f0c3
 800f0b4:	0800f0c9 	.word	0x0800f0c9
 800f0b8:	0800f0cf 	.word	0x0800f0cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f0bc:	2300      	movs	r3, #0
 800f0be:	73fb      	strb	r3, [r7, #15]
    break;
 800f0c0:	e00b      	b.n	800f0da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f0c2:	2303      	movs	r3, #3
 800f0c4:	73fb      	strb	r3, [r7, #15]
    break;
 800f0c6:	e008      	b.n	800f0da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f0c8:	2301      	movs	r3, #1
 800f0ca:	73fb      	strb	r3, [r7, #15]
    break;
 800f0cc:	e005      	b.n	800f0da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f0ce:	2303      	movs	r3, #3
 800f0d0:	73fb      	strb	r3, [r7, #15]
    break;
 800f0d2:	e002      	b.n	800f0da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f0d4:	2303      	movs	r3, #3
 800f0d6:	73fb      	strb	r3, [r7, #15]
    break;
 800f0d8:	bf00      	nop
  }
  return usb_status;
 800f0da:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0dc:	4618      	mov	r0, r3
 800f0de:	3714      	adds	r7, #20
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e6:	4770      	bx	lr

0800f0e8 <__itoa>:
 800f0e8:	1e93      	subs	r3, r2, #2
 800f0ea:	2b22      	cmp	r3, #34	@ 0x22
 800f0ec:	b510      	push	{r4, lr}
 800f0ee:	460c      	mov	r4, r1
 800f0f0:	d904      	bls.n	800f0fc <__itoa+0x14>
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	700b      	strb	r3, [r1, #0]
 800f0f6:	461c      	mov	r4, r3
 800f0f8:	4620      	mov	r0, r4
 800f0fa:	bd10      	pop	{r4, pc}
 800f0fc:	2a0a      	cmp	r2, #10
 800f0fe:	d109      	bne.n	800f114 <__itoa+0x2c>
 800f100:	2800      	cmp	r0, #0
 800f102:	da07      	bge.n	800f114 <__itoa+0x2c>
 800f104:	232d      	movs	r3, #45	@ 0x2d
 800f106:	700b      	strb	r3, [r1, #0]
 800f108:	4240      	negs	r0, r0
 800f10a:	2101      	movs	r1, #1
 800f10c:	4421      	add	r1, r4
 800f10e:	f000 f87d 	bl	800f20c <__utoa>
 800f112:	e7f1      	b.n	800f0f8 <__itoa+0x10>
 800f114:	2100      	movs	r1, #0
 800f116:	e7f9      	b.n	800f10c <__itoa+0x24>

0800f118 <itoa>:
 800f118:	f7ff bfe6 	b.w	800f0e8 <__itoa>

0800f11c <_strtoul_l.isra.0>:
 800f11c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f120:	4e34      	ldr	r6, [pc, #208]	@ (800f1f4 <_strtoul_l.isra.0+0xd8>)
 800f122:	4686      	mov	lr, r0
 800f124:	460d      	mov	r5, r1
 800f126:	4628      	mov	r0, r5
 800f128:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f12c:	5d37      	ldrb	r7, [r6, r4]
 800f12e:	f017 0708 	ands.w	r7, r7, #8
 800f132:	d1f8      	bne.n	800f126 <_strtoul_l.isra.0+0xa>
 800f134:	2c2d      	cmp	r4, #45	@ 0x2d
 800f136:	d110      	bne.n	800f15a <_strtoul_l.isra.0+0x3e>
 800f138:	782c      	ldrb	r4, [r5, #0]
 800f13a:	2701      	movs	r7, #1
 800f13c:	1c85      	adds	r5, r0, #2
 800f13e:	f033 0010 	bics.w	r0, r3, #16
 800f142:	d115      	bne.n	800f170 <_strtoul_l.isra.0+0x54>
 800f144:	2c30      	cmp	r4, #48	@ 0x30
 800f146:	d10d      	bne.n	800f164 <_strtoul_l.isra.0+0x48>
 800f148:	7828      	ldrb	r0, [r5, #0]
 800f14a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800f14e:	2858      	cmp	r0, #88	@ 0x58
 800f150:	d108      	bne.n	800f164 <_strtoul_l.isra.0+0x48>
 800f152:	786c      	ldrb	r4, [r5, #1]
 800f154:	3502      	adds	r5, #2
 800f156:	2310      	movs	r3, #16
 800f158:	e00a      	b.n	800f170 <_strtoul_l.isra.0+0x54>
 800f15a:	2c2b      	cmp	r4, #43	@ 0x2b
 800f15c:	bf04      	itt	eq
 800f15e:	782c      	ldrbeq	r4, [r5, #0]
 800f160:	1c85      	addeq	r5, r0, #2
 800f162:	e7ec      	b.n	800f13e <_strtoul_l.isra.0+0x22>
 800f164:	2b00      	cmp	r3, #0
 800f166:	d1f6      	bne.n	800f156 <_strtoul_l.isra.0+0x3a>
 800f168:	2c30      	cmp	r4, #48	@ 0x30
 800f16a:	bf14      	ite	ne
 800f16c:	230a      	movne	r3, #10
 800f16e:	2308      	moveq	r3, #8
 800f170:	f04f 38ff 	mov.w	r8, #4294967295
 800f174:	2600      	movs	r6, #0
 800f176:	fbb8 f8f3 	udiv	r8, r8, r3
 800f17a:	fb03 f908 	mul.w	r9, r3, r8
 800f17e:	ea6f 0909 	mvn.w	r9, r9
 800f182:	4630      	mov	r0, r6
 800f184:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800f188:	f1bc 0f09 	cmp.w	ip, #9
 800f18c:	d810      	bhi.n	800f1b0 <_strtoul_l.isra.0+0x94>
 800f18e:	4664      	mov	r4, ip
 800f190:	42a3      	cmp	r3, r4
 800f192:	dd1e      	ble.n	800f1d2 <_strtoul_l.isra.0+0xb6>
 800f194:	f1b6 3fff 	cmp.w	r6, #4294967295
 800f198:	d007      	beq.n	800f1aa <_strtoul_l.isra.0+0x8e>
 800f19a:	4580      	cmp	r8, r0
 800f19c:	d316      	bcc.n	800f1cc <_strtoul_l.isra.0+0xb0>
 800f19e:	d101      	bne.n	800f1a4 <_strtoul_l.isra.0+0x88>
 800f1a0:	45a1      	cmp	r9, r4
 800f1a2:	db13      	blt.n	800f1cc <_strtoul_l.isra.0+0xb0>
 800f1a4:	fb00 4003 	mla	r0, r0, r3, r4
 800f1a8:	2601      	movs	r6, #1
 800f1aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f1ae:	e7e9      	b.n	800f184 <_strtoul_l.isra.0+0x68>
 800f1b0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800f1b4:	f1bc 0f19 	cmp.w	ip, #25
 800f1b8:	d801      	bhi.n	800f1be <_strtoul_l.isra.0+0xa2>
 800f1ba:	3c37      	subs	r4, #55	@ 0x37
 800f1bc:	e7e8      	b.n	800f190 <_strtoul_l.isra.0+0x74>
 800f1be:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800f1c2:	f1bc 0f19 	cmp.w	ip, #25
 800f1c6:	d804      	bhi.n	800f1d2 <_strtoul_l.isra.0+0xb6>
 800f1c8:	3c57      	subs	r4, #87	@ 0x57
 800f1ca:	e7e1      	b.n	800f190 <_strtoul_l.isra.0+0x74>
 800f1cc:	f04f 36ff 	mov.w	r6, #4294967295
 800f1d0:	e7eb      	b.n	800f1aa <_strtoul_l.isra.0+0x8e>
 800f1d2:	1c73      	adds	r3, r6, #1
 800f1d4:	d106      	bne.n	800f1e4 <_strtoul_l.isra.0+0xc8>
 800f1d6:	2322      	movs	r3, #34	@ 0x22
 800f1d8:	f8ce 3000 	str.w	r3, [lr]
 800f1dc:	4630      	mov	r0, r6
 800f1de:	b932      	cbnz	r2, 800f1ee <_strtoul_l.isra.0+0xd2>
 800f1e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1e4:	b107      	cbz	r7, 800f1e8 <_strtoul_l.isra.0+0xcc>
 800f1e6:	4240      	negs	r0, r0
 800f1e8:	2a00      	cmp	r2, #0
 800f1ea:	d0f9      	beq.n	800f1e0 <_strtoul_l.isra.0+0xc4>
 800f1ec:	b106      	cbz	r6, 800f1f0 <_strtoul_l.isra.0+0xd4>
 800f1ee:	1e69      	subs	r1, r5, #1
 800f1f0:	6011      	str	r1, [r2, #0]
 800f1f2:	e7f5      	b.n	800f1e0 <_strtoul_l.isra.0+0xc4>
 800f1f4:	08012b37 	.word	0x08012b37

0800f1f8 <strtoul>:
 800f1f8:	4613      	mov	r3, r2
 800f1fa:	460a      	mov	r2, r1
 800f1fc:	4601      	mov	r1, r0
 800f1fe:	4802      	ldr	r0, [pc, #8]	@ (800f208 <strtoul+0x10>)
 800f200:	6800      	ldr	r0, [r0, #0]
 800f202:	f7ff bf8b 	b.w	800f11c <_strtoul_l.isra.0>
 800f206:	bf00      	nop
 800f208:	2000019c 	.word	0x2000019c

0800f20c <__utoa>:
 800f20c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f20e:	4c1f      	ldr	r4, [pc, #124]	@ (800f28c <__utoa+0x80>)
 800f210:	b08b      	sub	sp, #44	@ 0x2c
 800f212:	4605      	mov	r5, r0
 800f214:	460b      	mov	r3, r1
 800f216:	466e      	mov	r6, sp
 800f218:	f104 0c20 	add.w	ip, r4, #32
 800f21c:	6820      	ldr	r0, [r4, #0]
 800f21e:	6861      	ldr	r1, [r4, #4]
 800f220:	4637      	mov	r7, r6
 800f222:	c703      	stmia	r7!, {r0, r1}
 800f224:	3408      	adds	r4, #8
 800f226:	4564      	cmp	r4, ip
 800f228:	463e      	mov	r6, r7
 800f22a:	d1f7      	bne.n	800f21c <__utoa+0x10>
 800f22c:	7921      	ldrb	r1, [r4, #4]
 800f22e:	7139      	strb	r1, [r7, #4]
 800f230:	1e91      	subs	r1, r2, #2
 800f232:	6820      	ldr	r0, [r4, #0]
 800f234:	6038      	str	r0, [r7, #0]
 800f236:	2922      	cmp	r1, #34	@ 0x22
 800f238:	f04f 0100 	mov.w	r1, #0
 800f23c:	d904      	bls.n	800f248 <__utoa+0x3c>
 800f23e:	7019      	strb	r1, [r3, #0]
 800f240:	460b      	mov	r3, r1
 800f242:	4618      	mov	r0, r3
 800f244:	b00b      	add	sp, #44	@ 0x2c
 800f246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f248:	1e58      	subs	r0, r3, #1
 800f24a:	4684      	mov	ip, r0
 800f24c:	fbb5 f7f2 	udiv	r7, r5, r2
 800f250:	fb02 5617 	mls	r6, r2, r7, r5
 800f254:	3628      	adds	r6, #40	@ 0x28
 800f256:	446e      	add	r6, sp
 800f258:	460c      	mov	r4, r1
 800f25a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800f25e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800f262:	462e      	mov	r6, r5
 800f264:	42b2      	cmp	r2, r6
 800f266:	f101 0101 	add.w	r1, r1, #1
 800f26a:	463d      	mov	r5, r7
 800f26c:	d9ee      	bls.n	800f24c <__utoa+0x40>
 800f26e:	2200      	movs	r2, #0
 800f270:	545a      	strb	r2, [r3, r1]
 800f272:	1919      	adds	r1, r3, r4
 800f274:	1aa5      	subs	r5, r4, r2
 800f276:	42aa      	cmp	r2, r5
 800f278:	dae3      	bge.n	800f242 <__utoa+0x36>
 800f27a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800f27e:	780e      	ldrb	r6, [r1, #0]
 800f280:	7006      	strb	r6, [r0, #0]
 800f282:	3201      	adds	r2, #1
 800f284:	f801 5901 	strb.w	r5, [r1], #-1
 800f288:	e7f4      	b.n	800f274 <__utoa+0x68>
 800f28a:	bf00      	nop
 800f28c:	080129a0 	.word	0x080129a0

0800f290 <__cvt>:
 800f290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f294:	ec57 6b10 	vmov	r6, r7, d0
 800f298:	2f00      	cmp	r7, #0
 800f29a:	460c      	mov	r4, r1
 800f29c:	4619      	mov	r1, r3
 800f29e:	463b      	mov	r3, r7
 800f2a0:	bfbb      	ittet	lt
 800f2a2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f2a6:	461f      	movlt	r7, r3
 800f2a8:	2300      	movge	r3, #0
 800f2aa:	232d      	movlt	r3, #45	@ 0x2d
 800f2ac:	700b      	strb	r3, [r1, #0]
 800f2ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f2b0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f2b4:	4691      	mov	r9, r2
 800f2b6:	f023 0820 	bic.w	r8, r3, #32
 800f2ba:	bfbc      	itt	lt
 800f2bc:	4632      	movlt	r2, r6
 800f2be:	4616      	movlt	r6, r2
 800f2c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f2c4:	d005      	beq.n	800f2d2 <__cvt+0x42>
 800f2c6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f2ca:	d100      	bne.n	800f2ce <__cvt+0x3e>
 800f2cc:	3401      	adds	r4, #1
 800f2ce:	2102      	movs	r1, #2
 800f2d0:	e000      	b.n	800f2d4 <__cvt+0x44>
 800f2d2:	2103      	movs	r1, #3
 800f2d4:	ab03      	add	r3, sp, #12
 800f2d6:	9301      	str	r3, [sp, #4]
 800f2d8:	ab02      	add	r3, sp, #8
 800f2da:	9300      	str	r3, [sp, #0]
 800f2dc:	ec47 6b10 	vmov	d0, r6, r7
 800f2e0:	4653      	mov	r3, sl
 800f2e2:	4622      	mov	r2, r4
 800f2e4:	f000 fea0 	bl	8010028 <_dtoa_r>
 800f2e8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f2ec:	4605      	mov	r5, r0
 800f2ee:	d119      	bne.n	800f324 <__cvt+0x94>
 800f2f0:	f019 0f01 	tst.w	r9, #1
 800f2f4:	d00e      	beq.n	800f314 <__cvt+0x84>
 800f2f6:	eb00 0904 	add.w	r9, r0, r4
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	4630      	mov	r0, r6
 800f300:	4639      	mov	r1, r7
 800f302:	f7f1 fbe9 	bl	8000ad8 <__aeabi_dcmpeq>
 800f306:	b108      	cbz	r0, 800f30c <__cvt+0x7c>
 800f308:	f8cd 900c 	str.w	r9, [sp, #12]
 800f30c:	2230      	movs	r2, #48	@ 0x30
 800f30e:	9b03      	ldr	r3, [sp, #12]
 800f310:	454b      	cmp	r3, r9
 800f312:	d31e      	bcc.n	800f352 <__cvt+0xc2>
 800f314:	9b03      	ldr	r3, [sp, #12]
 800f316:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f318:	1b5b      	subs	r3, r3, r5
 800f31a:	4628      	mov	r0, r5
 800f31c:	6013      	str	r3, [r2, #0]
 800f31e:	b004      	add	sp, #16
 800f320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f324:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f328:	eb00 0904 	add.w	r9, r0, r4
 800f32c:	d1e5      	bne.n	800f2fa <__cvt+0x6a>
 800f32e:	7803      	ldrb	r3, [r0, #0]
 800f330:	2b30      	cmp	r3, #48	@ 0x30
 800f332:	d10a      	bne.n	800f34a <__cvt+0xba>
 800f334:	2200      	movs	r2, #0
 800f336:	2300      	movs	r3, #0
 800f338:	4630      	mov	r0, r6
 800f33a:	4639      	mov	r1, r7
 800f33c:	f7f1 fbcc 	bl	8000ad8 <__aeabi_dcmpeq>
 800f340:	b918      	cbnz	r0, 800f34a <__cvt+0xba>
 800f342:	f1c4 0401 	rsb	r4, r4, #1
 800f346:	f8ca 4000 	str.w	r4, [sl]
 800f34a:	f8da 3000 	ldr.w	r3, [sl]
 800f34e:	4499      	add	r9, r3
 800f350:	e7d3      	b.n	800f2fa <__cvt+0x6a>
 800f352:	1c59      	adds	r1, r3, #1
 800f354:	9103      	str	r1, [sp, #12]
 800f356:	701a      	strb	r2, [r3, #0]
 800f358:	e7d9      	b.n	800f30e <__cvt+0x7e>

0800f35a <__exponent>:
 800f35a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f35c:	2900      	cmp	r1, #0
 800f35e:	bfba      	itte	lt
 800f360:	4249      	neglt	r1, r1
 800f362:	232d      	movlt	r3, #45	@ 0x2d
 800f364:	232b      	movge	r3, #43	@ 0x2b
 800f366:	2909      	cmp	r1, #9
 800f368:	7002      	strb	r2, [r0, #0]
 800f36a:	7043      	strb	r3, [r0, #1]
 800f36c:	dd29      	ble.n	800f3c2 <__exponent+0x68>
 800f36e:	f10d 0307 	add.w	r3, sp, #7
 800f372:	461d      	mov	r5, r3
 800f374:	270a      	movs	r7, #10
 800f376:	461a      	mov	r2, r3
 800f378:	fbb1 f6f7 	udiv	r6, r1, r7
 800f37c:	fb07 1416 	mls	r4, r7, r6, r1
 800f380:	3430      	adds	r4, #48	@ 0x30
 800f382:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f386:	460c      	mov	r4, r1
 800f388:	2c63      	cmp	r4, #99	@ 0x63
 800f38a:	f103 33ff 	add.w	r3, r3, #4294967295
 800f38e:	4631      	mov	r1, r6
 800f390:	dcf1      	bgt.n	800f376 <__exponent+0x1c>
 800f392:	3130      	adds	r1, #48	@ 0x30
 800f394:	1e94      	subs	r4, r2, #2
 800f396:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f39a:	1c41      	adds	r1, r0, #1
 800f39c:	4623      	mov	r3, r4
 800f39e:	42ab      	cmp	r3, r5
 800f3a0:	d30a      	bcc.n	800f3b8 <__exponent+0x5e>
 800f3a2:	f10d 0309 	add.w	r3, sp, #9
 800f3a6:	1a9b      	subs	r3, r3, r2
 800f3a8:	42ac      	cmp	r4, r5
 800f3aa:	bf88      	it	hi
 800f3ac:	2300      	movhi	r3, #0
 800f3ae:	3302      	adds	r3, #2
 800f3b0:	4403      	add	r3, r0
 800f3b2:	1a18      	subs	r0, r3, r0
 800f3b4:	b003      	add	sp, #12
 800f3b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3b8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f3bc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f3c0:	e7ed      	b.n	800f39e <__exponent+0x44>
 800f3c2:	2330      	movs	r3, #48	@ 0x30
 800f3c4:	3130      	adds	r1, #48	@ 0x30
 800f3c6:	7083      	strb	r3, [r0, #2]
 800f3c8:	70c1      	strb	r1, [r0, #3]
 800f3ca:	1d03      	adds	r3, r0, #4
 800f3cc:	e7f1      	b.n	800f3b2 <__exponent+0x58>
	...

0800f3d0 <_printf_float>:
 800f3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3d4:	b08d      	sub	sp, #52	@ 0x34
 800f3d6:	460c      	mov	r4, r1
 800f3d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f3dc:	4616      	mov	r6, r2
 800f3de:	461f      	mov	r7, r3
 800f3e0:	4605      	mov	r5, r0
 800f3e2:	f000 fd11 	bl	800fe08 <_localeconv_r>
 800f3e6:	6803      	ldr	r3, [r0, #0]
 800f3e8:	9304      	str	r3, [sp, #16]
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f7f0 ff48 	bl	8000280 <strlen>
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800f3f4:	f8d8 3000 	ldr.w	r3, [r8]
 800f3f8:	9005      	str	r0, [sp, #20]
 800f3fa:	3307      	adds	r3, #7
 800f3fc:	f023 0307 	bic.w	r3, r3, #7
 800f400:	f103 0208 	add.w	r2, r3, #8
 800f404:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f408:	f8d4 b000 	ldr.w	fp, [r4]
 800f40c:	f8c8 2000 	str.w	r2, [r8]
 800f410:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f414:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f418:	9307      	str	r3, [sp, #28]
 800f41a:	f8cd 8018 	str.w	r8, [sp, #24]
 800f41e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f422:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f426:	4b9c      	ldr	r3, [pc, #624]	@ (800f698 <_printf_float+0x2c8>)
 800f428:	f04f 32ff 	mov.w	r2, #4294967295
 800f42c:	f7f1 fb86 	bl	8000b3c <__aeabi_dcmpun>
 800f430:	bb70      	cbnz	r0, 800f490 <_printf_float+0xc0>
 800f432:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f436:	4b98      	ldr	r3, [pc, #608]	@ (800f698 <_printf_float+0x2c8>)
 800f438:	f04f 32ff 	mov.w	r2, #4294967295
 800f43c:	f7f1 fb60 	bl	8000b00 <__aeabi_dcmple>
 800f440:	bb30      	cbnz	r0, 800f490 <_printf_float+0xc0>
 800f442:	2200      	movs	r2, #0
 800f444:	2300      	movs	r3, #0
 800f446:	4640      	mov	r0, r8
 800f448:	4649      	mov	r1, r9
 800f44a:	f7f1 fb4f 	bl	8000aec <__aeabi_dcmplt>
 800f44e:	b110      	cbz	r0, 800f456 <_printf_float+0x86>
 800f450:	232d      	movs	r3, #45	@ 0x2d
 800f452:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f456:	4a91      	ldr	r2, [pc, #580]	@ (800f69c <_printf_float+0x2cc>)
 800f458:	4b91      	ldr	r3, [pc, #580]	@ (800f6a0 <_printf_float+0x2d0>)
 800f45a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f45e:	bf8c      	ite	hi
 800f460:	4690      	movhi	r8, r2
 800f462:	4698      	movls	r8, r3
 800f464:	2303      	movs	r3, #3
 800f466:	6123      	str	r3, [r4, #16]
 800f468:	f02b 0304 	bic.w	r3, fp, #4
 800f46c:	6023      	str	r3, [r4, #0]
 800f46e:	f04f 0900 	mov.w	r9, #0
 800f472:	9700      	str	r7, [sp, #0]
 800f474:	4633      	mov	r3, r6
 800f476:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f478:	4621      	mov	r1, r4
 800f47a:	4628      	mov	r0, r5
 800f47c:	f000 f9d2 	bl	800f824 <_printf_common>
 800f480:	3001      	adds	r0, #1
 800f482:	f040 808d 	bne.w	800f5a0 <_printf_float+0x1d0>
 800f486:	f04f 30ff 	mov.w	r0, #4294967295
 800f48a:	b00d      	add	sp, #52	@ 0x34
 800f48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f490:	4642      	mov	r2, r8
 800f492:	464b      	mov	r3, r9
 800f494:	4640      	mov	r0, r8
 800f496:	4649      	mov	r1, r9
 800f498:	f7f1 fb50 	bl	8000b3c <__aeabi_dcmpun>
 800f49c:	b140      	cbz	r0, 800f4b0 <_printf_float+0xe0>
 800f49e:	464b      	mov	r3, r9
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	bfbc      	itt	lt
 800f4a4:	232d      	movlt	r3, #45	@ 0x2d
 800f4a6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f4aa:	4a7e      	ldr	r2, [pc, #504]	@ (800f6a4 <_printf_float+0x2d4>)
 800f4ac:	4b7e      	ldr	r3, [pc, #504]	@ (800f6a8 <_printf_float+0x2d8>)
 800f4ae:	e7d4      	b.n	800f45a <_printf_float+0x8a>
 800f4b0:	6863      	ldr	r3, [r4, #4]
 800f4b2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f4b6:	9206      	str	r2, [sp, #24]
 800f4b8:	1c5a      	adds	r2, r3, #1
 800f4ba:	d13b      	bne.n	800f534 <_printf_float+0x164>
 800f4bc:	2306      	movs	r3, #6
 800f4be:	6063      	str	r3, [r4, #4]
 800f4c0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	6022      	str	r2, [r4, #0]
 800f4c8:	9303      	str	r3, [sp, #12]
 800f4ca:	ab0a      	add	r3, sp, #40	@ 0x28
 800f4cc:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f4d0:	ab09      	add	r3, sp, #36	@ 0x24
 800f4d2:	9300      	str	r3, [sp, #0]
 800f4d4:	6861      	ldr	r1, [r4, #4]
 800f4d6:	ec49 8b10 	vmov	d0, r8, r9
 800f4da:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f4de:	4628      	mov	r0, r5
 800f4e0:	f7ff fed6 	bl	800f290 <__cvt>
 800f4e4:	9b06      	ldr	r3, [sp, #24]
 800f4e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f4e8:	2b47      	cmp	r3, #71	@ 0x47
 800f4ea:	4680      	mov	r8, r0
 800f4ec:	d129      	bne.n	800f542 <_printf_float+0x172>
 800f4ee:	1cc8      	adds	r0, r1, #3
 800f4f0:	db02      	blt.n	800f4f8 <_printf_float+0x128>
 800f4f2:	6863      	ldr	r3, [r4, #4]
 800f4f4:	4299      	cmp	r1, r3
 800f4f6:	dd41      	ble.n	800f57c <_printf_float+0x1ac>
 800f4f8:	f1aa 0a02 	sub.w	sl, sl, #2
 800f4fc:	fa5f fa8a 	uxtb.w	sl, sl
 800f500:	3901      	subs	r1, #1
 800f502:	4652      	mov	r2, sl
 800f504:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f508:	9109      	str	r1, [sp, #36]	@ 0x24
 800f50a:	f7ff ff26 	bl	800f35a <__exponent>
 800f50e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f510:	1813      	adds	r3, r2, r0
 800f512:	2a01      	cmp	r2, #1
 800f514:	4681      	mov	r9, r0
 800f516:	6123      	str	r3, [r4, #16]
 800f518:	dc02      	bgt.n	800f520 <_printf_float+0x150>
 800f51a:	6822      	ldr	r2, [r4, #0]
 800f51c:	07d2      	lsls	r2, r2, #31
 800f51e:	d501      	bpl.n	800f524 <_printf_float+0x154>
 800f520:	3301      	adds	r3, #1
 800f522:	6123      	str	r3, [r4, #16]
 800f524:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d0a2      	beq.n	800f472 <_printf_float+0xa2>
 800f52c:	232d      	movs	r3, #45	@ 0x2d
 800f52e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f532:	e79e      	b.n	800f472 <_printf_float+0xa2>
 800f534:	9a06      	ldr	r2, [sp, #24]
 800f536:	2a47      	cmp	r2, #71	@ 0x47
 800f538:	d1c2      	bne.n	800f4c0 <_printf_float+0xf0>
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d1c0      	bne.n	800f4c0 <_printf_float+0xf0>
 800f53e:	2301      	movs	r3, #1
 800f540:	e7bd      	b.n	800f4be <_printf_float+0xee>
 800f542:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f546:	d9db      	bls.n	800f500 <_printf_float+0x130>
 800f548:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f54c:	d118      	bne.n	800f580 <_printf_float+0x1b0>
 800f54e:	2900      	cmp	r1, #0
 800f550:	6863      	ldr	r3, [r4, #4]
 800f552:	dd0b      	ble.n	800f56c <_printf_float+0x19c>
 800f554:	6121      	str	r1, [r4, #16]
 800f556:	b913      	cbnz	r3, 800f55e <_printf_float+0x18e>
 800f558:	6822      	ldr	r2, [r4, #0]
 800f55a:	07d0      	lsls	r0, r2, #31
 800f55c:	d502      	bpl.n	800f564 <_printf_float+0x194>
 800f55e:	3301      	adds	r3, #1
 800f560:	440b      	add	r3, r1
 800f562:	6123      	str	r3, [r4, #16]
 800f564:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f566:	f04f 0900 	mov.w	r9, #0
 800f56a:	e7db      	b.n	800f524 <_printf_float+0x154>
 800f56c:	b913      	cbnz	r3, 800f574 <_printf_float+0x1a4>
 800f56e:	6822      	ldr	r2, [r4, #0]
 800f570:	07d2      	lsls	r2, r2, #31
 800f572:	d501      	bpl.n	800f578 <_printf_float+0x1a8>
 800f574:	3302      	adds	r3, #2
 800f576:	e7f4      	b.n	800f562 <_printf_float+0x192>
 800f578:	2301      	movs	r3, #1
 800f57a:	e7f2      	b.n	800f562 <_printf_float+0x192>
 800f57c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f580:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f582:	4299      	cmp	r1, r3
 800f584:	db05      	blt.n	800f592 <_printf_float+0x1c2>
 800f586:	6823      	ldr	r3, [r4, #0]
 800f588:	6121      	str	r1, [r4, #16]
 800f58a:	07d8      	lsls	r0, r3, #31
 800f58c:	d5ea      	bpl.n	800f564 <_printf_float+0x194>
 800f58e:	1c4b      	adds	r3, r1, #1
 800f590:	e7e7      	b.n	800f562 <_printf_float+0x192>
 800f592:	2900      	cmp	r1, #0
 800f594:	bfd4      	ite	le
 800f596:	f1c1 0202 	rsble	r2, r1, #2
 800f59a:	2201      	movgt	r2, #1
 800f59c:	4413      	add	r3, r2
 800f59e:	e7e0      	b.n	800f562 <_printf_float+0x192>
 800f5a0:	6823      	ldr	r3, [r4, #0]
 800f5a2:	055a      	lsls	r2, r3, #21
 800f5a4:	d407      	bmi.n	800f5b6 <_printf_float+0x1e6>
 800f5a6:	6923      	ldr	r3, [r4, #16]
 800f5a8:	4642      	mov	r2, r8
 800f5aa:	4631      	mov	r1, r6
 800f5ac:	4628      	mov	r0, r5
 800f5ae:	47b8      	blx	r7
 800f5b0:	3001      	adds	r0, #1
 800f5b2:	d12b      	bne.n	800f60c <_printf_float+0x23c>
 800f5b4:	e767      	b.n	800f486 <_printf_float+0xb6>
 800f5b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f5ba:	f240 80dd 	bls.w	800f778 <_printf_float+0x3a8>
 800f5be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	f7f1 fa87 	bl	8000ad8 <__aeabi_dcmpeq>
 800f5ca:	2800      	cmp	r0, #0
 800f5cc:	d033      	beq.n	800f636 <_printf_float+0x266>
 800f5ce:	4a37      	ldr	r2, [pc, #220]	@ (800f6ac <_printf_float+0x2dc>)
 800f5d0:	2301      	movs	r3, #1
 800f5d2:	4631      	mov	r1, r6
 800f5d4:	4628      	mov	r0, r5
 800f5d6:	47b8      	blx	r7
 800f5d8:	3001      	adds	r0, #1
 800f5da:	f43f af54 	beq.w	800f486 <_printf_float+0xb6>
 800f5de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f5e2:	4543      	cmp	r3, r8
 800f5e4:	db02      	blt.n	800f5ec <_printf_float+0x21c>
 800f5e6:	6823      	ldr	r3, [r4, #0]
 800f5e8:	07d8      	lsls	r0, r3, #31
 800f5ea:	d50f      	bpl.n	800f60c <_printf_float+0x23c>
 800f5ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f5f0:	4631      	mov	r1, r6
 800f5f2:	4628      	mov	r0, r5
 800f5f4:	47b8      	blx	r7
 800f5f6:	3001      	adds	r0, #1
 800f5f8:	f43f af45 	beq.w	800f486 <_printf_float+0xb6>
 800f5fc:	f04f 0900 	mov.w	r9, #0
 800f600:	f108 38ff 	add.w	r8, r8, #4294967295
 800f604:	f104 0a1a 	add.w	sl, r4, #26
 800f608:	45c8      	cmp	r8, r9
 800f60a:	dc09      	bgt.n	800f620 <_printf_float+0x250>
 800f60c:	6823      	ldr	r3, [r4, #0]
 800f60e:	079b      	lsls	r3, r3, #30
 800f610:	f100 8103 	bmi.w	800f81a <_printf_float+0x44a>
 800f614:	68e0      	ldr	r0, [r4, #12]
 800f616:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f618:	4298      	cmp	r0, r3
 800f61a:	bfb8      	it	lt
 800f61c:	4618      	movlt	r0, r3
 800f61e:	e734      	b.n	800f48a <_printf_float+0xba>
 800f620:	2301      	movs	r3, #1
 800f622:	4652      	mov	r2, sl
 800f624:	4631      	mov	r1, r6
 800f626:	4628      	mov	r0, r5
 800f628:	47b8      	blx	r7
 800f62a:	3001      	adds	r0, #1
 800f62c:	f43f af2b 	beq.w	800f486 <_printf_float+0xb6>
 800f630:	f109 0901 	add.w	r9, r9, #1
 800f634:	e7e8      	b.n	800f608 <_printf_float+0x238>
 800f636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f638:	2b00      	cmp	r3, #0
 800f63a:	dc39      	bgt.n	800f6b0 <_printf_float+0x2e0>
 800f63c:	4a1b      	ldr	r2, [pc, #108]	@ (800f6ac <_printf_float+0x2dc>)
 800f63e:	2301      	movs	r3, #1
 800f640:	4631      	mov	r1, r6
 800f642:	4628      	mov	r0, r5
 800f644:	47b8      	blx	r7
 800f646:	3001      	adds	r0, #1
 800f648:	f43f af1d 	beq.w	800f486 <_printf_float+0xb6>
 800f64c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f650:	ea59 0303 	orrs.w	r3, r9, r3
 800f654:	d102      	bne.n	800f65c <_printf_float+0x28c>
 800f656:	6823      	ldr	r3, [r4, #0]
 800f658:	07d9      	lsls	r1, r3, #31
 800f65a:	d5d7      	bpl.n	800f60c <_printf_float+0x23c>
 800f65c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f660:	4631      	mov	r1, r6
 800f662:	4628      	mov	r0, r5
 800f664:	47b8      	blx	r7
 800f666:	3001      	adds	r0, #1
 800f668:	f43f af0d 	beq.w	800f486 <_printf_float+0xb6>
 800f66c:	f04f 0a00 	mov.w	sl, #0
 800f670:	f104 0b1a 	add.w	fp, r4, #26
 800f674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f676:	425b      	negs	r3, r3
 800f678:	4553      	cmp	r3, sl
 800f67a:	dc01      	bgt.n	800f680 <_printf_float+0x2b0>
 800f67c:	464b      	mov	r3, r9
 800f67e:	e793      	b.n	800f5a8 <_printf_float+0x1d8>
 800f680:	2301      	movs	r3, #1
 800f682:	465a      	mov	r2, fp
 800f684:	4631      	mov	r1, r6
 800f686:	4628      	mov	r0, r5
 800f688:	47b8      	blx	r7
 800f68a:	3001      	adds	r0, #1
 800f68c:	f43f aefb 	beq.w	800f486 <_printf_float+0xb6>
 800f690:	f10a 0a01 	add.w	sl, sl, #1
 800f694:	e7ee      	b.n	800f674 <_printf_float+0x2a4>
 800f696:	bf00      	nop
 800f698:	7fefffff 	.word	0x7fefffff
 800f69c:	080129c9 	.word	0x080129c9
 800f6a0:	080129c5 	.word	0x080129c5
 800f6a4:	080129d1 	.word	0x080129d1
 800f6a8:	080129cd 	.word	0x080129cd
 800f6ac:	080129d5 	.word	0x080129d5
 800f6b0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f6b2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f6b6:	4553      	cmp	r3, sl
 800f6b8:	bfa8      	it	ge
 800f6ba:	4653      	movge	r3, sl
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	4699      	mov	r9, r3
 800f6c0:	dc36      	bgt.n	800f730 <_printf_float+0x360>
 800f6c2:	f04f 0b00 	mov.w	fp, #0
 800f6c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f6ca:	f104 021a 	add.w	r2, r4, #26
 800f6ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f6d0:	9306      	str	r3, [sp, #24]
 800f6d2:	eba3 0309 	sub.w	r3, r3, r9
 800f6d6:	455b      	cmp	r3, fp
 800f6d8:	dc31      	bgt.n	800f73e <_printf_float+0x36e>
 800f6da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6dc:	459a      	cmp	sl, r3
 800f6de:	dc3a      	bgt.n	800f756 <_printf_float+0x386>
 800f6e0:	6823      	ldr	r3, [r4, #0]
 800f6e2:	07da      	lsls	r2, r3, #31
 800f6e4:	d437      	bmi.n	800f756 <_printf_float+0x386>
 800f6e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6e8:	ebaa 0903 	sub.w	r9, sl, r3
 800f6ec:	9b06      	ldr	r3, [sp, #24]
 800f6ee:	ebaa 0303 	sub.w	r3, sl, r3
 800f6f2:	4599      	cmp	r9, r3
 800f6f4:	bfa8      	it	ge
 800f6f6:	4699      	movge	r9, r3
 800f6f8:	f1b9 0f00 	cmp.w	r9, #0
 800f6fc:	dc33      	bgt.n	800f766 <_printf_float+0x396>
 800f6fe:	f04f 0800 	mov.w	r8, #0
 800f702:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f706:	f104 0b1a 	add.w	fp, r4, #26
 800f70a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f70c:	ebaa 0303 	sub.w	r3, sl, r3
 800f710:	eba3 0309 	sub.w	r3, r3, r9
 800f714:	4543      	cmp	r3, r8
 800f716:	f77f af79 	ble.w	800f60c <_printf_float+0x23c>
 800f71a:	2301      	movs	r3, #1
 800f71c:	465a      	mov	r2, fp
 800f71e:	4631      	mov	r1, r6
 800f720:	4628      	mov	r0, r5
 800f722:	47b8      	blx	r7
 800f724:	3001      	adds	r0, #1
 800f726:	f43f aeae 	beq.w	800f486 <_printf_float+0xb6>
 800f72a:	f108 0801 	add.w	r8, r8, #1
 800f72e:	e7ec      	b.n	800f70a <_printf_float+0x33a>
 800f730:	4642      	mov	r2, r8
 800f732:	4631      	mov	r1, r6
 800f734:	4628      	mov	r0, r5
 800f736:	47b8      	blx	r7
 800f738:	3001      	adds	r0, #1
 800f73a:	d1c2      	bne.n	800f6c2 <_printf_float+0x2f2>
 800f73c:	e6a3      	b.n	800f486 <_printf_float+0xb6>
 800f73e:	2301      	movs	r3, #1
 800f740:	4631      	mov	r1, r6
 800f742:	4628      	mov	r0, r5
 800f744:	9206      	str	r2, [sp, #24]
 800f746:	47b8      	blx	r7
 800f748:	3001      	adds	r0, #1
 800f74a:	f43f ae9c 	beq.w	800f486 <_printf_float+0xb6>
 800f74e:	9a06      	ldr	r2, [sp, #24]
 800f750:	f10b 0b01 	add.w	fp, fp, #1
 800f754:	e7bb      	b.n	800f6ce <_printf_float+0x2fe>
 800f756:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f75a:	4631      	mov	r1, r6
 800f75c:	4628      	mov	r0, r5
 800f75e:	47b8      	blx	r7
 800f760:	3001      	adds	r0, #1
 800f762:	d1c0      	bne.n	800f6e6 <_printf_float+0x316>
 800f764:	e68f      	b.n	800f486 <_printf_float+0xb6>
 800f766:	9a06      	ldr	r2, [sp, #24]
 800f768:	464b      	mov	r3, r9
 800f76a:	4442      	add	r2, r8
 800f76c:	4631      	mov	r1, r6
 800f76e:	4628      	mov	r0, r5
 800f770:	47b8      	blx	r7
 800f772:	3001      	adds	r0, #1
 800f774:	d1c3      	bne.n	800f6fe <_printf_float+0x32e>
 800f776:	e686      	b.n	800f486 <_printf_float+0xb6>
 800f778:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f77c:	f1ba 0f01 	cmp.w	sl, #1
 800f780:	dc01      	bgt.n	800f786 <_printf_float+0x3b6>
 800f782:	07db      	lsls	r3, r3, #31
 800f784:	d536      	bpl.n	800f7f4 <_printf_float+0x424>
 800f786:	2301      	movs	r3, #1
 800f788:	4642      	mov	r2, r8
 800f78a:	4631      	mov	r1, r6
 800f78c:	4628      	mov	r0, r5
 800f78e:	47b8      	blx	r7
 800f790:	3001      	adds	r0, #1
 800f792:	f43f ae78 	beq.w	800f486 <_printf_float+0xb6>
 800f796:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f79a:	4631      	mov	r1, r6
 800f79c:	4628      	mov	r0, r5
 800f79e:	47b8      	blx	r7
 800f7a0:	3001      	adds	r0, #1
 800f7a2:	f43f ae70 	beq.w	800f486 <_printf_float+0xb6>
 800f7a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f7b2:	f7f1 f991 	bl	8000ad8 <__aeabi_dcmpeq>
 800f7b6:	b9c0      	cbnz	r0, 800f7ea <_printf_float+0x41a>
 800f7b8:	4653      	mov	r3, sl
 800f7ba:	f108 0201 	add.w	r2, r8, #1
 800f7be:	4631      	mov	r1, r6
 800f7c0:	4628      	mov	r0, r5
 800f7c2:	47b8      	blx	r7
 800f7c4:	3001      	adds	r0, #1
 800f7c6:	d10c      	bne.n	800f7e2 <_printf_float+0x412>
 800f7c8:	e65d      	b.n	800f486 <_printf_float+0xb6>
 800f7ca:	2301      	movs	r3, #1
 800f7cc:	465a      	mov	r2, fp
 800f7ce:	4631      	mov	r1, r6
 800f7d0:	4628      	mov	r0, r5
 800f7d2:	47b8      	blx	r7
 800f7d4:	3001      	adds	r0, #1
 800f7d6:	f43f ae56 	beq.w	800f486 <_printf_float+0xb6>
 800f7da:	f108 0801 	add.w	r8, r8, #1
 800f7de:	45d0      	cmp	r8, sl
 800f7e0:	dbf3      	blt.n	800f7ca <_printf_float+0x3fa>
 800f7e2:	464b      	mov	r3, r9
 800f7e4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f7e8:	e6df      	b.n	800f5aa <_printf_float+0x1da>
 800f7ea:	f04f 0800 	mov.w	r8, #0
 800f7ee:	f104 0b1a 	add.w	fp, r4, #26
 800f7f2:	e7f4      	b.n	800f7de <_printf_float+0x40e>
 800f7f4:	2301      	movs	r3, #1
 800f7f6:	4642      	mov	r2, r8
 800f7f8:	e7e1      	b.n	800f7be <_printf_float+0x3ee>
 800f7fa:	2301      	movs	r3, #1
 800f7fc:	464a      	mov	r2, r9
 800f7fe:	4631      	mov	r1, r6
 800f800:	4628      	mov	r0, r5
 800f802:	47b8      	blx	r7
 800f804:	3001      	adds	r0, #1
 800f806:	f43f ae3e 	beq.w	800f486 <_printf_float+0xb6>
 800f80a:	f108 0801 	add.w	r8, r8, #1
 800f80e:	68e3      	ldr	r3, [r4, #12]
 800f810:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f812:	1a5b      	subs	r3, r3, r1
 800f814:	4543      	cmp	r3, r8
 800f816:	dcf0      	bgt.n	800f7fa <_printf_float+0x42a>
 800f818:	e6fc      	b.n	800f614 <_printf_float+0x244>
 800f81a:	f04f 0800 	mov.w	r8, #0
 800f81e:	f104 0919 	add.w	r9, r4, #25
 800f822:	e7f4      	b.n	800f80e <_printf_float+0x43e>

0800f824 <_printf_common>:
 800f824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f828:	4616      	mov	r6, r2
 800f82a:	4698      	mov	r8, r3
 800f82c:	688a      	ldr	r2, [r1, #8]
 800f82e:	690b      	ldr	r3, [r1, #16]
 800f830:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f834:	4293      	cmp	r3, r2
 800f836:	bfb8      	it	lt
 800f838:	4613      	movlt	r3, r2
 800f83a:	6033      	str	r3, [r6, #0]
 800f83c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f840:	4607      	mov	r7, r0
 800f842:	460c      	mov	r4, r1
 800f844:	b10a      	cbz	r2, 800f84a <_printf_common+0x26>
 800f846:	3301      	adds	r3, #1
 800f848:	6033      	str	r3, [r6, #0]
 800f84a:	6823      	ldr	r3, [r4, #0]
 800f84c:	0699      	lsls	r1, r3, #26
 800f84e:	bf42      	ittt	mi
 800f850:	6833      	ldrmi	r3, [r6, #0]
 800f852:	3302      	addmi	r3, #2
 800f854:	6033      	strmi	r3, [r6, #0]
 800f856:	6825      	ldr	r5, [r4, #0]
 800f858:	f015 0506 	ands.w	r5, r5, #6
 800f85c:	d106      	bne.n	800f86c <_printf_common+0x48>
 800f85e:	f104 0a19 	add.w	sl, r4, #25
 800f862:	68e3      	ldr	r3, [r4, #12]
 800f864:	6832      	ldr	r2, [r6, #0]
 800f866:	1a9b      	subs	r3, r3, r2
 800f868:	42ab      	cmp	r3, r5
 800f86a:	dc26      	bgt.n	800f8ba <_printf_common+0x96>
 800f86c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f870:	6822      	ldr	r2, [r4, #0]
 800f872:	3b00      	subs	r3, #0
 800f874:	bf18      	it	ne
 800f876:	2301      	movne	r3, #1
 800f878:	0692      	lsls	r2, r2, #26
 800f87a:	d42b      	bmi.n	800f8d4 <_printf_common+0xb0>
 800f87c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f880:	4641      	mov	r1, r8
 800f882:	4638      	mov	r0, r7
 800f884:	47c8      	blx	r9
 800f886:	3001      	adds	r0, #1
 800f888:	d01e      	beq.n	800f8c8 <_printf_common+0xa4>
 800f88a:	6823      	ldr	r3, [r4, #0]
 800f88c:	6922      	ldr	r2, [r4, #16]
 800f88e:	f003 0306 	and.w	r3, r3, #6
 800f892:	2b04      	cmp	r3, #4
 800f894:	bf02      	ittt	eq
 800f896:	68e5      	ldreq	r5, [r4, #12]
 800f898:	6833      	ldreq	r3, [r6, #0]
 800f89a:	1aed      	subeq	r5, r5, r3
 800f89c:	68a3      	ldr	r3, [r4, #8]
 800f89e:	bf0c      	ite	eq
 800f8a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f8a4:	2500      	movne	r5, #0
 800f8a6:	4293      	cmp	r3, r2
 800f8a8:	bfc4      	itt	gt
 800f8aa:	1a9b      	subgt	r3, r3, r2
 800f8ac:	18ed      	addgt	r5, r5, r3
 800f8ae:	2600      	movs	r6, #0
 800f8b0:	341a      	adds	r4, #26
 800f8b2:	42b5      	cmp	r5, r6
 800f8b4:	d11a      	bne.n	800f8ec <_printf_common+0xc8>
 800f8b6:	2000      	movs	r0, #0
 800f8b8:	e008      	b.n	800f8cc <_printf_common+0xa8>
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	4652      	mov	r2, sl
 800f8be:	4641      	mov	r1, r8
 800f8c0:	4638      	mov	r0, r7
 800f8c2:	47c8      	blx	r9
 800f8c4:	3001      	adds	r0, #1
 800f8c6:	d103      	bne.n	800f8d0 <_printf_common+0xac>
 800f8c8:	f04f 30ff 	mov.w	r0, #4294967295
 800f8cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8d0:	3501      	adds	r5, #1
 800f8d2:	e7c6      	b.n	800f862 <_printf_common+0x3e>
 800f8d4:	18e1      	adds	r1, r4, r3
 800f8d6:	1c5a      	adds	r2, r3, #1
 800f8d8:	2030      	movs	r0, #48	@ 0x30
 800f8da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f8de:	4422      	add	r2, r4
 800f8e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f8e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f8e8:	3302      	adds	r3, #2
 800f8ea:	e7c7      	b.n	800f87c <_printf_common+0x58>
 800f8ec:	2301      	movs	r3, #1
 800f8ee:	4622      	mov	r2, r4
 800f8f0:	4641      	mov	r1, r8
 800f8f2:	4638      	mov	r0, r7
 800f8f4:	47c8      	blx	r9
 800f8f6:	3001      	adds	r0, #1
 800f8f8:	d0e6      	beq.n	800f8c8 <_printf_common+0xa4>
 800f8fa:	3601      	adds	r6, #1
 800f8fc:	e7d9      	b.n	800f8b2 <_printf_common+0x8e>
	...

0800f900 <_printf_i>:
 800f900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f904:	7e0f      	ldrb	r7, [r1, #24]
 800f906:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f908:	2f78      	cmp	r7, #120	@ 0x78
 800f90a:	4691      	mov	r9, r2
 800f90c:	4680      	mov	r8, r0
 800f90e:	460c      	mov	r4, r1
 800f910:	469a      	mov	sl, r3
 800f912:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f916:	d807      	bhi.n	800f928 <_printf_i+0x28>
 800f918:	2f62      	cmp	r7, #98	@ 0x62
 800f91a:	d80a      	bhi.n	800f932 <_printf_i+0x32>
 800f91c:	2f00      	cmp	r7, #0
 800f91e:	f000 80d1 	beq.w	800fac4 <_printf_i+0x1c4>
 800f922:	2f58      	cmp	r7, #88	@ 0x58
 800f924:	f000 80b8 	beq.w	800fa98 <_printf_i+0x198>
 800f928:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f92c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f930:	e03a      	b.n	800f9a8 <_printf_i+0xa8>
 800f932:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f936:	2b15      	cmp	r3, #21
 800f938:	d8f6      	bhi.n	800f928 <_printf_i+0x28>
 800f93a:	a101      	add	r1, pc, #4	@ (adr r1, 800f940 <_printf_i+0x40>)
 800f93c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f940:	0800f999 	.word	0x0800f999
 800f944:	0800f9ad 	.word	0x0800f9ad
 800f948:	0800f929 	.word	0x0800f929
 800f94c:	0800f929 	.word	0x0800f929
 800f950:	0800f929 	.word	0x0800f929
 800f954:	0800f929 	.word	0x0800f929
 800f958:	0800f9ad 	.word	0x0800f9ad
 800f95c:	0800f929 	.word	0x0800f929
 800f960:	0800f929 	.word	0x0800f929
 800f964:	0800f929 	.word	0x0800f929
 800f968:	0800f929 	.word	0x0800f929
 800f96c:	0800faab 	.word	0x0800faab
 800f970:	0800f9d7 	.word	0x0800f9d7
 800f974:	0800fa65 	.word	0x0800fa65
 800f978:	0800f929 	.word	0x0800f929
 800f97c:	0800f929 	.word	0x0800f929
 800f980:	0800facd 	.word	0x0800facd
 800f984:	0800f929 	.word	0x0800f929
 800f988:	0800f9d7 	.word	0x0800f9d7
 800f98c:	0800f929 	.word	0x0800f929
 800f990:	0800f929 	.word	0x0800f929
 800f994:	0800fa6d 	.word	0x0800fa6d
 800f998:	6833      	ldr	r3, [r6, #0]
 800f99a:	1d1a      	adds	r2, r3, #4
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	6032      	str	r2, [r6, #0]
 800f9a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f9a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f9a8:	2301      	movs	r3, #1
 800f9aa:	e09c      	b.n	800fae6 <_printf_i+0x1e6>
 800f9ac:	6833      	ldr	r3, [r6, #0]
 800f9ae:	6820      	ldr	r0, [r4, #0]
 800f9b0:	1d19      	adds	r1, r3, #4
 800f9b2:	6031      	str	r1, [r6, #0]
 800f9b4:	0606      	lsls	r6, r0, #24
 800f9b6:	d501      	bpl.n	800f9bc <_printf_i+0xbc>
 800f9b8:	681d      	ldr	r5, [r3, #0]
 800f9ba:	e003      	b.n	800f9c4 <_printf_i+0xc4>
 800f9bc:	0645      	lsls	r5, r0, #25
 800f9be:	d5fb      	bpl.n	800f9b8 <_printf_i+0xb8>
 800f9c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f9c4:	2d00      	cmp	r5, #0
 800f9c6:	da03      	bge.n	800f9d0 <_printf_i+0xd0>
 800f9c8:	232d      	movs	r3, #45	@ 0x2d
 800f9ca:	426d      	negs	r5, r5
 800f9cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f9d0:	4858      	ldr	r0, [pc, #352]	@ (800fb34 <_printf_i+0x234>)
 800f9d2:	230a      	movs	r3, #10
 800f9d4:	e011      	b.n	800f9fa <_printf_i+0xfa>
 800f9d6:	6821      	ldr	r1, [r4, #0]
 800f9d8:	6833      	ldr	r3, [r6, #0]
 800f9da:	0608      	lsls	r0, r1, #24
 800f9dc:	f853 5b04 	ldr.w	r5, [r3], #4
 800f9e0:	d402      	bmi.n	800f9e8 <_printf_i+0xe8>
 800f9e2:	0649      	lsls	r1, r1, #25
 800f9e4:	bf48      	it	mi
 800f9e6:	b2ad      	uxthmi	r5, r5
 800f9e8:	2f6f      	cmp	r7, #111	@ 0x6f
 800f9ea:	4852      	ldr	r0, [pc, #328]	@ (800fb34 <_printf_i+0x234>)
 800f9ec:	6033      	str	r3, [r6, #0]
 800f9ee:	bf14      	ite	ne
 800f9f0:	230a      	movne	r3, #10
 800f9f2:	2308      	moveq	r3, #8
 800f9f4:	2100      	movs	r1, #0
 800f9f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f9fa:	6866      	ldr	r6, [r4, #4]
 800f9fc:	60a6      	str	r6, [r4, #8]
 800f9fe:	2e00      	cmp	r6, #0
 800fa00:	db05      	blt.n	800fa0e <_printf_i+0x10e>
 800fa02:	6821      	ldr	r1, [r4, #0]
 800fa04:	432e      	orrs	r6, r5
 800fa06:	f021 0104 	bic.w	r1, r1, #4
 800fa0a:	6021      	str	r1, [r4, #0]
 800fa0c:	d04b      	beq.n	800faa6 <_printf_i+0x1a6>
 800fa0e:	4616      	mov	r6, r2
 800fa10:	fbb5 f1f3 	udiv	r1, r5, r3
 800fa14:	fb03 5711 	mls	r7, r3, r1, r5
 800fa18:	5dc7      	ldrb	r7, [r0, r7]
 800fa1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fa1e:	462f      	mov	r7, r5
 800fa20:	42bb      	cmp	r3, r7
 800fa22:	460d      	mov	r5, r1
 800fa24:	d9f4      	bls.n	800fa10 <_printf_i+0x110>
 800fa26:	2b08      	cmp	r3, #8
 800fa28:	d10b      	bne.n	800fa42 <_printf_i+0x142>
 800fa2a:	6823      	ldr	r3, [r4, #0]
 800fa2c:	07df      	lsls	r7, r3, #31
 800fa2e:	d508      	bpl.n	800fa42 <_printf_i+0x142>
 800fa30:	6923      	ldr	r3, [r4, #16]
 800fa32:	6861      	ldr	r1, [r4, #4]
 800fa34:	4299      	cmp	r1, r3
 800fa36:	bfde      	ittt	le
 800fa38:	2330      	movle	r3, #48	@ 0x30
 800fa3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fa3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fa42:	1b92      	subs	r2, r2, r6
 800fa44:	6122      	str	r2, [r4, #16]
 800fa46:	f8cd a000 	str.w	sl, [sp]
 800fa4a:	464b      	mov	r3, r9
 800fa4c:	aa03      	add	r2, sp, #12
 800fa4e:	4621      	mov	r1, r4
 800fa50:	4640      	mov	r0, r8
 800fa52:	f7ff fee7 	bl	800f824 <_printf_common>
 800fa56:	3001      	adds	r0, #1
 800fa58:	d14a      	bne.n	800faf0 <_printf_i+0x1f0>
 800fa5a:	f04f 30ff 	mov.w	r0, #4294967295
 800fa5e:	b004      	add	sp, #16
 800fa60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa64:	6823      	ldr	r3, [r4, #0]
 800fa66:	f043 0320 	orr.w	r3, r3, #32
 800fa6a:	6023      	str	r3, [r4, #0]
 800fa6c:	4832      	ldr	r0, [pc, #200]	@ (800fb38 <_printf_i+0x238>)
 800fa6e:	2778      	movs	r7, #120	@ 0x78
 800fa70:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fa74:	6823      	ldr	r3, [r4, #0]
 800fa76:	6831      	ldr	r1, [r6, #0]
 800fa78:	061f      	lsls	r7, r3, #24
 800fa7a:	f851 5b04 	ldr.w	r5, [r1], #4
 800fa7e:	d402      	bmi.n	800fa86 <_printf_i+0x186>
 800fa80:	065f      	lsls	r7, r3, #25
 800fa82:	bf48      	it	mi
 800fa84:	b2ad      	uxthmi	r5, r5
 800fa86:	6031      	str	r1, [r6, #0]
 800fa88:	07d9      	lsls	r1, r3, #31
 800fa8a:	bf44      	itt	mi
 800fa8c:	f043 0320 	orrmi.w	r3, r3, #32
 800fa90:	6023      	strmi	r3, [r4, #0]
 800fa92:	b11d      	cbz	r5, 800fa9c <_printf_i+0x19c>
 800fa94:	2310      	movs	r3, #16
 800fa96:	e7ad      	b.n	800f9f4 <_printf_i+0xf4>
 800fa98:	4826      	ldr	r0, [pc, #152]	@ (800fb34 <_printf_i+0x234>)
 800fa9a:	e7e9      	b.n	800fa70 <_printf_i+0x170>
 800fa9c:	6823      	ldr	r3, [r4, #0]
 800fa9e:	f023 0320 	bic.w	r3, r3, #32
 800faa2:	6023      	str	r3, [r4, #0]
 800faa4:	e7f6      	b.n	800fa94 <_printf_i+0x194>
 800faa6:	4616      	mov	r6, r2
 800faa8:	e7bd      	b.n	800fa26 <_printf_i+0x126>
 800faaa:	6833      	ldr	r3, [r6, #0]
 800faac:	6825      	ldr	r5, [r4, #0]
 800faae:	6961      	ldr	r1, [r4, #20]
 800fab0:	1d18      	adds	r0, r3, #4
 800fab2:	6030      	str	r0, [r6, #0]
 800fab4:	062e      	lsls	r6, r5, #24
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	d501      	bpl.n	800fabe <_printf_i+0x1be>
 800faba:	6019      	str	r1, [r3, #0]
 800fabc:	e002      	b.n	800fac4 <_printf_i+0x1c4>
 800fabe:	0668      	lsls	r0, r5, #25
 800fac0:	d5fb      	bpl.n	800faba <_printf_i+0x1ba>
 800fac2:	8019      	strh	r1, [r3, #0]
 800fac4:	2300      	movs	r3, #0
 800fac6:	6123      	str	r3, [r4, #16]
 800fac8:	4616      	mov	r6, r2
 800faca:	e7bc      	b.n	800fa46 <_printf_i+0x146>
 800facc:	6833      	ldr	r3, [r6, #0]
 800face:	1d1a      	adds	r2, r3, #4
 800fad0:	6032      	str	r2, [r6, #0]
 800fad2:	681e      	ldr	r6, [r3, #0]
 800fad4:	6862      	ldr	r2, [r4, #4]
 800fad6:	2100      	movs	r1, #0
 800fad8:	4630      	mov	r0, r6
 800fada:	f7f0 fb81 	bl	80001e0 <memchr>
 800fade:	b108      	cbz	r0, 800fae4 <_printf_i+0x1e4>
 800fae0:	1b80      	subs	r0, r0, r6
 800fae2:	6060      	str	r0, [r4, #4]
 800fae4:	6863      	ldr	r3, [r4, #4]
 800fae6:	6123      	str	r3, [r4, #16]
 800fae8:	2300      	movs	r3, #0
 800faea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800faee:	e7aa      	b.n	800fa46 <_printf_i+0x146>
 800faf0:	6923      	ldr	r3, [r4, #16]
 800faf2:	4632      	mov	r2, r6
 800faf4:	4649      	mov	r1, r9
 800faf6:	4640      	mov	r0, r8
 800faf8:	47d0      	blx	sl
 800fafa:	3001      	adds	r0, #1
 800fafc:	d0ad      	beq.n	800fa5a <_printf_i+0x15a>
 800fafe:	6823      	ldr	r3, [r4, #0]
 800fb00:	079b      	lsls	r3, r3, #30
 800fb02:	d413      	bmi.n	800fb2c <_printf_i+0x22c>
 800fb04:	68e0      	ldr	r0, [r4, #12]
 800fb06:	9b03      	ldr	r3, [sp, #12]
 800fb08:	4298      	cmp	r0, r3
 800fb0a:	bfb8      	it	lt
 800fb0c:	4618      	movlt	r0, r3
 800fb0e:	e7a6      	b.n	800fa5e <_printf_i+0x15e>
 800fb10:	2301      	movs	r3, #1
 800fb12:	4632      	mov	r2, r6
 800fb14:	4649      	mov	r1, r9
 800fb16:	4640      	mov	r0, r8
 800fb18:	47d0      	blx	sl
 800fb1a:	3001      	adds	r0, #1
 800fb1c:	d09d      	beq.n	800fa5a <_printf_i+0x15a>
 800fb1e:	3501      	adds	r5, #1
 800fb20:	68e3      	ldr	r3, [r4, #12]
 800fb22:	9903      	ldr	r1, [sp, #12]
 800fb24:	1a5b      	subs	r3, r3, r1
 800fb26:	42ab      	cmp	r3, r5
 800fb28:	dcf2      	bgt.n	800fb10 <_printf_i+0x210>
 800fb2a:	e7eb      	b.n	800fb04 <_printf_i+0x204>
 800fb2c:	2500      	movs	r5, #0
 800fb2e:	f104 0619 	add.w	r6, r4, #25
 800fb32:	e7f5      	b.n	800fb20 <_printf_i+0x220>
 800fb34:	080129d7 	.word	0x080129d7
 800fb38:	080129e8 	.word	0x080129e8

0800fb3c <std>:
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	b510      	push	{r4, lr}
 800fb40:	4604      	mov	r4, r0
 800fb42:	e9c0 3300 	strd	r3, r3, [r0]
 800fb46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fb4a:	6083      	str	r3, [r0, #8]
 800fb4c:	8181      	strh	r1, [r0, #12]
 800fb4e:	6643      	str	r3, [r0, #100]	@ 0x64
 800fb50:	81c2      	strh	r2, [r0, #14]
 800fb52:	6183      	str	r3, [r0, #24]
 800fb54:	4619      	mov	r1, r3
 800fb56:	2208      	movs	r2, #8
 800fb58:	305c      	adds	r0, #92	@ 0x5c
 800fb5a:	f000 f94c 	bl	800fdf6 <memset>
 800fb5e:	4b0d      	ldr	r3, [pc, #52]	@ (800fb94 <std+0x58>)
 800fb60:	6263      	str	r3, [r4, #36]	@ 0x24
 800fb62:	4b0d      	ldr	r3, [pc, #52]	@ (800fb98 <std+0x5c>)
 800fb64:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fb66:	4b0d      	ldr	r3, [pc, #52]	@ (800fb9c <std+0x60>)
 800fb68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fb6a:	4b0d      	ldr	r3, [pc, #52]	@ (800fba0 <std+0x64>)
 800fb6c:	6323      	str	r3, [r4, #48]	@ 0x30
 800fb6e:	4b0d      	ldr	r3, [pc, #52]	@ (800fba4 <std+0x68>)
 800fb70:	6224      	str	r4, [r4, #32]
 800fb72:	429c      	cmp	r4, r3
 800fb74:	d006      	beq.n	800fb84 <std+0x48>
 800fb76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fb7a:	4294      	cmp	r4, r2
 800fb7c:	d002      	beq.n	800fb84 <std+0x48>
 800fb7e:	33d0      	adds	r3, #208	@ 0xd0
 800fb80:	429c      	cmp	r4, r3
 800fb82:	d105      	bne.n	800fb90 <std+0x54>
 800fb84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fb88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb8c:	f000 b9b0 	b.w	800fef0 <__retarget_lock_init_recursive>
 800fb90:	bd10      	pop	{r4, pc}
 800fb92:	bf00      	nop
 800fb94:	0800fd71 	.word	0x0800fd71
 800fb98:	0800fd93 	.word	0x0800fd93
 800fb9c:	0800fdcb 	.word	0x0800fdcb
 800fba0:	0800fdef 	.word	0x0800fdef
 800fba4:	20006424 	.word	0x20006424

0800fba8 <stdio_exit_handler>:
 800fba8:	4a02      	ldr	r2, [pc, #8]	@ (800fbb4 <stdio_exit_handler+0xc>)
 800fbaa:	4903      	ldr	r1, [pc, #12]	@ (800fbb8 <stdio_exit_handler+0x10>)
 800fbac:	4803      	ldr	r0, [pc, #12]	@ (800fbbc <stdio_exit_handler+0x14>)
 800fbae:	f000 b869 	b.w	800fc84 <_fwalk_sglue>
 800fbb2:	bf00      	nop
 800fbb4:	20000190 	.word	0x20000190
 800fbb8:	08011875 	.word	0x08011875
 800fbbc:	200001a0 	.word	0x200001a0

0800fbc0 <cleanup_stdio>:
 800fbc0:	6841      	ldr	r1, [r0, #4]
 800fbc2:	4b0c      	ldr	r3, [pc, #48]	@ (800fbf4 <cleanup_stdio+0x34>)
 800fbc4:	4299      	cmp	r1, r3
 800fbc6:	b510      	push	{r4, lr}
 800fbc8:	4604      	mov	r4, r0
 800fbca:	d001      	beq.n	800fbd0 <cleanup_stdio+0x10>
 800fbcc:	f001 fe52 	bl	8011874 <_fflush_r>
 800fbd0:	68a1      	ldr	r1, [r4, #8]
 800fbd2:	4b09      	ldr	r3, [pc, #36]	@ (800fbf8 <cleanup_stdio+0x38>)
 800fbd4:	4299      	cmp	r1, r3
 800fbd6:	d002      	beq.n	800fbde <cleanup_stdio+0x1e>
 800fbd8:	4620      	mov	r0, r4
 800fbda:	f001 fe4b 	bl	8011874 <_fflush_r>
 800fbde:	68e1      	ldr	r1, [r4, #12]
 800fbe0:	4b06      	ldr	r3, [pc, #24]	@ (800fbfc <cleanup_stdio+0x3c>)
 800fbe2:	4299      	cmp	r1, r3
 800fbe4:	d004      	beq.n	800fbf0 <cleanup_stdio+0x30>
 800fbe6:	4620      	mov	r0, r4
 800fbe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbec:	f001 be42 	b.w	8011874 <_fflush_r>
 800fbf0:	bd10      	pop	{r4, pc}
 800fbf2:	bf00      	nop
 800fbf4:	20006424 	.word	0x20006424
 800fbf8:	2000648c 	.word	0x2000648c
 800fbfc:	200064f4 	.word	0x200064f4

0800fc00 <global_stdio_init.part.0>:
 800fc00:	b510      	push	{r4, lr}
 800fc02:	4b0b      	ldr	r3, [pc, #44]	@ (800fc30 <global_stdio_init.part.0+0x30>)
 800fc04:	4c0b      	ldr	r4, [pc, #44]	@ (800fc34 <global_stdio_init.part.0+0x34>)
 800fc06:	4a0c      	ldr	r2, [pc, #48]	@ (800fc38 <global_stdio_init.part.0+0x38>)
 800fc08:	601a      	str	r2, [r3, #0]
 800fc0a:	4620      	mov	r0, r4
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	2104      	movs	r1, #4
 800fc10:	f7ff ff94 	bl	800fb3c <std>
 800fc14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fc18:	2201      	movs	r2, #1
 800fc1a:	2109      	movs	r1, #9
 800fc1c:	f7ff ff8e 	bl	800fb3c <std>
 800fc20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fc24:	2202      	movs	r2, #2
 800fc26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc2a:	2112      	movs	r1, #18
 800fc2c:	f7ff bf86 	b.w	800fb3c <std>
 800fc30:	2000655c 	.word	0x2000655c
 800fc34:	20006424 	.word	0x20006424
 800fc38:	0800fba9 	.word	0x0800fba9

0800fc3c <__sfp_lock_acquire>:
 800fc3c:	4801      	ldr	r0, [pc, #4]	@ (800fc44 <__sfp_lock_acquire+0x8>)
 800fc3e:	f000 b958 	b.w	800fef2 <__retarget_lock_acquire_recursive>
 800fc42:	bf00      	nop
 800fc44:	20006565 	.word	0x20006565

0800fc48 <__sfp_lock_release>:
 800fc48:	4801      	ldr	r0, [pc, #4]	@ (800fc50 <__sfp_lock_release+0x8>)
 800fc4a:	f000 b953 	b.w	800fef4 <__retarget_lock_release_recursive>
 800fc4e:	bf00      	nop
 800fc50:	20006565 	.word	0x20006565

0800fc54 <__sinit>:
 800fc54:	b510      	push	{r4, lr}
 800fc56:	4604      	mov	r4, r0
 800fc58:	f7ff fff0 	bl	800fc3c <__sfp_lock_acquire>
 800fc5c:	6a23      	ldr	r3, [r4, #32]
 800fc5e:	b11b      	cbz	r3, 800fc68 <__sinit+0x14>
 800fc60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc64:	f7ff bff0 	b.w	800fc48 <__sfp_lock_release>
 800fc68:	4b04      	ldr	r3, [pc, #16]	@ (800fc7c <__sinit+0x28>)
 800fc6a:	6223      	str	r3, [r4, #32]
 800fc6c:	4b04      	ldr	r3, [pc, #16]	@ (800fc80 <__sinit+0x2c>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d1f5      	bne.n	800fc60 <__sinit+0xc>
 800fc74:	f7ff ffc4 	bl	800fc00 <global_stdio_init.part.0>
 800fc78:	e7f2      	b.n	800fc60 <__sinit+0xc>
 800fc7a:	bf00      	nop
 800fc7c:	0800fbc1 	.word	0x0800fbc1
 800fc80:	2000655c 	.word	0x2000655c

0800fc84 <_fwalk_sglue>:
 800fc84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc88:	4607      	mov	r7, r0
 800fc8a:	4688      	mov	r8, r1
 800fc8c:	4614      	mov	r4, r2
 800fc8e:	2600      	movs	r6, #0
 800fc90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fc94:	f1b9 0901 	subs.w	r9, r9, #1
 800fc98:	d505      	bpl.n	800fca6 <_fwalk_sglue+0x22>
 800fc9a:	6824      	ldr	r4, [r4, #0]
 800fc9c:	2c00      	cmp	r4, #0
 800fc9e:	d1f7      	bne.n	800fc90 <_fwalk_sglue+0xc>
 800fca0:	4630      	mov	r0, r6
 800fca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fca6:	89ab      	ldrh	r3, [r5, #12]
 800fca8:	2b01      	cmp	r3, #1
 800fcaa:	d907      	bls.n	800fcbc <_fwalk_sglue+0x38>
 800fcac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fcb0:	3301      	adds	r3, #1
 800fcb2:	d003      	beq.n	800fcbc <_fwalk_sglue+0x38>
 800fcb4:	4629      	mov	r1, r5
 800fcb6:	4638      	mov	r0, r7
 800fcb8:	47c0      	blx	r8
 800fcba:	4306      	orrs	r6, r0
 800fcbc:	3568      	adds	r5, #104	@ 0x68
 800fcbe:	e7e9      	b.n	800fc94 <_fwalk_sglue+0x10>

0800fcc0 <sniprintf>:
 800fcc0:	b40c      	push	{r2, r3}
 800fcc2:	b530      	push	{r4, r5, lr}
 800fcc4:	4b18      	ldr	r3, [pc, #96]	@ (800fd28 <sniprintf+0x68>)
 800fcc6:	1e0c      	subs	r4, r1, #0
 800fcc8:	681d      	ldr	r5, [r3, #0]
 800fcca:	b09d      	sub	sp, #116	@ 0x74
 800fccc:	da08      	bge.n	800fce0 <sniprintf+0x20>
 800fcce:	238b      	movs	r3, #139	@ 0x8b
 800fcd0:	602b      	str	r3, [r5, #0]
 800fcd2:	f04f 30ff 	mov.w	r0, #4294967295
 800fcd6:	b01d      	add	sp, #116	@ 0x74
 800fcd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fcdc:	b002      	add	sp, #8
 800fcde:	4770      	bx	lr
 800fce0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fce4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fce8:	f04f 0300 	mov.w	r3, #0
 800fcec:	931b      	str	r3, [sp, #108]	@ 0x6c
 800fcee:	bf14      	ite	ne
 800fcf0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fcf4:	4623      	moveq	r3, r4
 800fcf6:	9304      	str	r3, [sp, #16]
 800fcf8:	9307      	str	r3, [sp, #28]
 800fcfa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fcfe:	9002      	str	r0, [sp, #8]
 800fd00:	9006      	str	r0, [sp, #24]
 800fd02:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fd06:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fd08:	ab21      	add	r3, sp, #132	@ 0x84
 800fd0a:	a902      	add	r1, sp, #8
 800fd0c:	4628      	mov	r0, r5
 800fd0e:	9301      	str	r3, [sp, #4]
 800fd10:	f001 fc30 	bl	8011574 <_svfiprintf_r>
 800fd14:	1c43      	adds	r3, r0, #1
 800fd16:	bfbc      	itt	lt
 800fd18:	238b      	movlt	r3, #139	@ 0x8b
 800fd1a:	602b      	strlt	r3, [r5, #0]
 800fd1c:	2c00      	cmp	r4, #0
 800fd1e:	d0da      	beq.n	800fcd6 <sniprintf+0x16>
 800fd20:	9b02      	ldr	r3, [sp, #8]
 800fd22:	2200      	movs	r2, #0
 800fd24:	701a      	strb	r2, [r3, #0]
 800fd26:	e7d6      	b.n	800fcd6 <sniprintf+0x16>
 800fd28:	2000019c 	.word	0x2000019c

0800fd2c <siprintf>:
 800fd2c:	b40e      	push	{r1, r2, r3}
 800fd2e:	b510      	push	{r4, lr}
 800fd30:	b09d      	sub	sp, #116	@ 0x74
 800fd32:	ab1f      	add	r3, sp, #124	@ 0x7c
 800fd34:	9002      	str	r0, [sp, #8]
 800fd36:	9006      	str	r0, [sp, #24]
 800fd38:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fd3c:	480a      	ldr	r0, [pc, #40]	@ (800fd68 <siprintf+0x3c>)
 800fd3e:	9107      	str	r1, [sp, #28]
 800fd40:	9104      	str	r1, [sp, #16]
 800fd42:	490a      	ldr	r1, [pc, #40]	@ (800fd6c <siprintf+0x40>)
 800fd44:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd48:	9105      	str	r1, [sp, #20]
 800fd4a:	2400      	movs	r4, #0
 800fd4c:	a902      	add	r1, sp, #8
 800fd4e:	6800      	ldr	r0, [r0, #0]
 800fd50:	9301      	str	r3, [sp, #4]
 800fd52:	941b      	str	r4, [sp, #108]	@ 0x6c
 800fd54:	f001 fc0e 	bl	8011574 <_svfiprintf_r>
 800fd58:	9b02      	ldr	r3, [sp, #8]
 800fd5a:	701c      	strb	r4, [r3, #0]
 800fd5c:	b01d      	add	sp, #116	@ 0x74
 800fd5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd62:	b003      	add	sp, #12
 800fd64:	4770      	bx	lr
 800fd66:	bf00      	nop
 800fd68:	2000019c 	.word	0x2000019c
 800fd6c:	ffff0208 	.word	0xffff0208

0800fd70 <__sread>:
 800fd70:	b510      	push	{r4, lr}
 800fd72:	460c      	mov	r4, r1
 800fd74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd78:	f000 f86c 	bl	800fe54 <_read_r>
 800fd7c:	2800      	cmp	r0, #0
 800fd7e:	bfab      	itete	ge
 800fd80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fd82:	89a3      	ldrhlt	r3, [r4, #12]
 800fd84:	181b      	addge	r3, r3, r0
 800fd86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fd8a:	bfac      	ite	ge
 800fd8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fd8e:	81a3      	strhlt	r3, [r4, #12]
 800fd90:	bd10      	pop	{r4, pc}

0800fd92 <__swrite>:
 800fd92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd96:	461f      	mov	r7, r3
 800fd98:	898b      	ldrh	r3, [r1, #12]
 800fd9a:	05db      	lsls	r3, r3, #23
 800fd9c:	4605      	mov	r5, r0
 800fd9e:	460c      	mov	r4, r1
 800fda0:	4616      	mov	r6, r2
 800fda2:	d505      	bpl.n	800fdb0 <__swrite+0x1e>
 800fda4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fda8:	2302      	movs	r3, #2
 800fdaa:	2200      	movs	r2, #0
 800fdac:	f000 f840 	bl	800fe30 <_lseek_r>
 800fdb0:	89a3      	ldrh	r3, [r4, #12]
 800fdb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fdb6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fdba:	81a3      	strh	r3, [r4, #12]
 800fdbc:	4632      	mov	r2, r6
 800fdbe:	463b      	mov	r3, r7
 800fdc0:	4628      	mov	r0, r5
 800fdc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fdc6:	f000 b857 	b.w	800fe78 <_write_r>

0800fdca <__sseek>:
 800fdca:	b510      	push	{r4, lr}
 800fdcc:	460c      	mov	r4, r1
 800fdce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdd2:	f000 f82d 	bl	800fe30 <_lseek_r>
 800fdd6:	1c43      	adds	r3, r0, #1
 800fdd8:	89a3      	ldrh	r3, [r4, #12]
 800fdda:	bf15      	itete	ne
 800fddc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fdde:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fde2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fde6:	81a3      	strheq	r3, [r4, #12]
 800fde8:	bf18      	it	ne
 800fdea:	81a3      	strhne	r3, [r4, #12]
 800fdec:	bd10      	pop	{r4, pc}

0800fdee <__sclose>:
 800fdee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdf2:	f000 b80d 	b.w	800fe10 <_close_r>

0800fdf6 <memset>:
 800fdf6:	4402      	add	r2, r0
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	4293      	cmp	r3, r2
 800fdfc:	d100      	bne.n	800fe00 <memset+0xa>
 800fdfe:	4770      	bx	lr
 800fe00:	f803 1b01 	strb.w	r1, [r3], #1
 800fe04:	e7f9      	b.n	800fdfa <memset+0x4>
	...

0800fe08 <_localeconv_r>:
 800fe08:	4800      	ldr	r0, [pc, #0]	@ (800fe0c <_localeconv_r+0x4>)
 800fe0a:	4770      	bx	lr
 800fe0c:	200002dc 	.word	0x200002dc

0800fe10 <_close_r>:
 800fe10:	b538      	push	{r3, r4, r5, lr}
 800fe12:	4d06      	ldr	r5, [pc, #24]	@ (800fe2c <_close_r+0x1c>)
 800fe14:	2300      	movs	r3, #0
 800fe16:	4604      	mov	r4, r0
 800fe18:	4608      	mov	r0, r1
 800fe1a:	602b      	str	r3, [r5, #0]
 800fe1c:	f7f3 f91a 	bl	8003054 <_close>
 800fe20:	1c43      	adds	r3, r0, #1
 800fe22:	d102      	bne.n	800fe2a <_close_r+0x1a>
 800fe24:	682b      	ldr	r3, [r5, #0]
 800fe26:	b103      	cbz	r3, 800fe2a <_close_r+0x1a>
 800fe28:	6023      	str	r3, [r4, #0]
 800fe2a:	bd38      	pop	{r3, r4, r5, pc}
 800fe2c:	20006560 	.word	0x20006560

0800fe30 <_lseek_r>:
 800fe30:	b538      	push	{r3, r4, r5, lr}
 800fe32:	4d07      	ldr	r5, [pc, #28]	@ (800fe50 <_lseek_r+0x20>)
 800fe34:	4604      	mov	r4, r0
 800fe36:	4608      	mov	r0, r1
 800fe38:	4611      	mov	r1, r2
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	602a      	str	r2, [r5, #0]
 800fe3e:	461a      	mov	r2, r3
 800fe40:	f7f3 f92f 	bl	80030a2 <_lseek>
 800fe44:	1c43      	adds	r3, r0, #1
 800fe46:	d102      	bne.n	800fe4e <_lseek_r+0x1e>
 800fe48:	682b      	ldr	r3, [r5, #0]
 800fe4a:	b103      	cbz	r3, 800fe4e <_lseek_r+0x1e>
 800fe4c:	6023      	str	r3, [r4, #0]
 800fe4e:	bd38      	pop	{r3, r4, r5, pc}
 800fe50:	20006560 	.word	0x20006560

0800fe54 <_read_r>:
 800fe54:	b538      	push	{r3, r4, r5, lr}
 800fe56:	4d07      	ldr	r5, [pc, #28]	@ (800fe74 <_read_r+0x20>)
 800fe58:	4604      	mov	r4, r0
 800fe5a:	4608      	mov	r0, r1
 800fe5c:	4611      	mov	r1, r2
 800fe5e:	2200      	movs	r2, #0
 800fe60:	602a      	str	r2, [r5, #0]
 800fe62:	461a      	mov	r2, r3
 800fe64:	f7f3 f8bd 	bl	8002fe2 <_read>
 800fe68:	1c43      	adds	r3, r0, #1
 800fe6a:	d102      	bne.n	800fe72 <_read_r+0x1e>
 800fe6c:	682b      	ldr	r3, [r5, #0]
 800fe6e:	b103      	cbz	r3, 800fe72 <_read_r+0x1e>
 800fe70:	6023      	str	r3, [r4, #0]
 800fe72:	bd38      	pop	{r3, r4, r5, pc}
 800fe74:	20006560 	.word	0x20006560

0800fe78 <_write_r>:
 800fe78:	b538      	push	{r3, r4, r5, lr}
 800fe7a:	4d07      	ldr	r5, [pc, #28]	@ (800fe98 <_write_r+0x20>)
 800fe7c:	4604      	mov	r4, r0
 800fe7e:	4608      	mov	r0, r1
 800fe80:	4611      	mov	r1, r2
 800fe82:	2200      	movs	r2, #0
 800fe84:	602a      	str	r2, [r5, #0]
 800fe86:	461a      	mov	r2, r3
 800fe88:	f7f3 f8c8 	bl	800301c <_write>
 800fe8c:	1c43      	adds	r3, r0, #1
 800fe8e:	d102      	bne.n	800fe96 <_write_r+0x1e>
 800fe90:	682b      	ldr	r3, [r5, #0]
 800fe92:	b103      	cbz	r3, 800fe96 <_write_r+0x1e>
 800fe94:	6023      	str	r3, [r4, #0]
 800fe96:	bd38      	pop	{r3, r4, r5, pc}
 800fe98:	20006560 	.word	0x20006560

0800fe9c <__errno>:
 800fe9c:	4b01      	ldr	r3, [pc, #4]	@ (800fea4 <__errno+0x8>)
 800fe9e:	6818      	ldr	r0, [r3, #0]
 800fea0:	4770      	bx	lr
 800fea2:	bf00      	nop
 800fea4:	2000019c 	.word	0x2000019c

0800fea8 <__libc_init_array>:
 800fea8:	b570      	push	{r4, r5, r6, lr}
 800feaa:	4d0d      	ldr	r5, [pc, #52]	@ (800fee0 <__libc_init_array+0x38>)
 800feac:	4c0d      	ldr	r4, [pc, #52]	@ (800fee4 <__libc_init_array+0x3c>)
 800feae:	1b64      	subs	r4, r4, r5
 800feb0:	10a4      	asrs	r4, r4, #2
 800feb2:	2600      	movs	r6, #0
 800feb4:	42a6      	cmp	r6, r4
 800feb6:	d109      	bne.n	800fecc <__libc_init_array+0x24>
 800feb8:	4d0b      	ldr	r5, [pc, #44]	@ (800fee8 <__libc_init_array+0x40>)
 800feba:	4c0c      	ldr	r4, [pc, #48]	@ (800feec <__libc_init_array+0x44>)
 800febc:	f002 fbd6 	bl	801266c <_init>
 800fec0:	1b64      	subs	r4, r4, r5
 800fec2:	10a4      	asrs	r4, r4, #2
 800fec4:	2600      	movs	r6, #0
 800fec6:	42a6      	cmp	r6, r4
 800fec8:	d105      	bne.n	800fed6 <__libc_init_array+0x2e>
 800feca:	bd70      	pop	{r4, r5, r6, pc}
 800fecc:	f855 3b04 	ldr.w	r3, [r5], #4
 800fed0:	4798      	blx	r3
 800fed2:	3601      	adds	r6, #1
 800fed4:	e7ee      	b.n	800feb4 <__libc_init_array+0xc>
 800fed6:	f855 3b04 	ldr.w	r3, [r5], #4
 800feda:	4798      	blx	r3
 800fedc:	3601      	adds	r6, #1
 800fede:	e7f2      	b.n	800fec6 <__libc_init_array+0x1e>
 800fee0:	08012dc0 	.word	0x08012dc0
 800fee4:	08012dc0 	.word	0x08012dc0
 800fee8:	08012dc0 	.word	0x08012dc0
 800feec:	08012dc4 	.word	0x08012dc4

0800fef0 <__retarget_lock_init_recursive>:
 800fef0:	4770      	bx	lr

0800fef2 <__retarget_lock_acquire_recursive>:
 800fef2:	4770      	bx	lr

0800fef4 <__retarget_lock_release_recursive>:
 800fef4:	4770      	bx	lr

0800fef6 <memcpy>:
 800fef6:	440a      	add	r2, r1
 800fef8:	4291      	cmp	r1, r2
 800fefa:	f100 33ff 	add.w	r3, r0, #4294967295
 800fefe:	d100      	bne.n	800ff02 <memcpy+0xc>
 800ff00:	4770      	bx	lr
 800ff02:	b510      	push	{r4, lr}
 800ff04:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff08:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ff0c:	4291      	cmp	r1, r2
 800ff0e:	d1f9      	bne.n	800ff04 <memcpy+0xe>
 800ff10:	bd10      	pop	{r4, pc}

0800ff12 <quorem>:
 800ff12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff16:	6903      	ldr	r3, [r0, #16]
 800ff18:	690c      	ldr	r4, [r1, #16]
 800ff1a:	42a3      	cmp	r3, r4
 800ff1c:	4607      	mov	r7, r0
 800ff1e:	db7e      	blt.n	801001e <quorem+0x10c>
 800ff20:	3c01      	subs	r4, #1
 800ff22:	f101 0814 	add.w	r8, r1, #20
 800ff26:	00a3      	lsls	r3, r4, #2
 800ff28:	f100 0514 	add.w	r5, r0, #20
 800ff2c:	9300      	str	r3, [sp, #0]
 800ff2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ff32:	9301      	str	r3, [sp, #4]
 800ff34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ff38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ff3c:	3301      	adds	r3, #1
 800ff3e:	429a      	cmp	r2, r3
 800ff40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ff44:	fbb2 f6f3 	udiv	r6, r2, r3
 800ff48:	d32e      	bcc.n	800ffa8 <quorem+0x96>
 800ff4a:	f04f 0a00 	mov.w	sl, #0
 800ff4e:	46c4      	mov	ip, r8
 800ff50:	46ae      	mov	lr, r5
 800ff52:	46d3      	mov	fp, sl
 800ff54:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ff58:	b298      	uxth	r0, r3
 800ff5a:	fb06 a000 	mla	r0, r6, r0, sl
 800ff5e:	0c02      	lsrs	r2, r0, #16
 800ff60:	0c1b      	lsrs	r3, r3, #16
 800ff62:	fb06 2303 	mla	r3, r6, r3, r2
 800ff66:	f8de 2000 	ldr.w	r2, [lr]
 800ff6a:	b280      	uxth	r0, r0
 800ff6c:	b292      	uxth	r2, r2
 800ff6e:	1a12      	subs	r2, r2, r0
 800ff70:	445a      	add	r2, fp
 800ff72:	f8de 0000 	ldr.w	r0, [lr]
 800ff76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ff7a:	b29b      	uxth	r3, r3
 800ff7c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ff80:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ff84:	b292      	uxth	r2, r2
 800ff86:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ff8a:	45e1      	cmp	r9, ip
 800ff8c:	f84e 2b04 	str.w	r2, [lr], #4
 800ff90:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ff94:	d2de      	bcs.n	800ff54 <quorem+0x42>
 800ff96:	9b00      	ldr	r3, [sp, #0]
 800ff98:	58eb      	ldr	r3, [r5, r3]
 800ff9a:	b92b      	cbnz	r3, 800ffa8 <quorem+0x96>
 800ff9c:	9b01      	ldr	r3, [sp, #4]
 800ff9e:	3b04      	subs	r3, #4
 800ffa0:	429d      	cmp	r5, r3
 800ffa2:	461a      	mov	r2, r3
 800ffa4:	d32f      	bcc.n	8010006 <quorem+0xf4>
 800ffa6:	613c      	str	r4, [r7, #16]
 800ffa8:	4638      	mov	r0, r7
 800ffaa:	f001 f97f 	bl	80112ac <__mcmp>
 800ffae:	2800      	cmp	r0, #0
 800ffb0:	db25      	blt.n	800fffe <quorem+0xec>
 800ffb2:	4629      	mov	r1, r5
 800ffb4:	2000      	movs	r0, #0
 800ffb6:	f858 2b04 	ldr.w	r2, [r8], #4
 800ffba:	f8d1 c000 	ldr.w	ip, [r1]
 800ffbe:	fa1f fe82 	uxth.w	lr, r2
 800ffc2:	fa1f f38c 	uxth.w	r3, ip
 800ffc6:	eba3 030e 	sub.w	r3, r3, lr
 800ffca:	4403      	add	r3, r0
 800ffcc:	0c12      	lsrs	r2, r2, #16
 800ffce:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ffd2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ffd6:	b29b      	uxth	r3, r3
 800ffd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ffdc:	45c1      	cmp	r9, r8
 800ffde:	f841 3b04 	str.w	r3, [r1], #4
 800ffe2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ffe6:	d2e6      	bcs.n	800ffb6 <quorem+0xa4>
 800ffe8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ffec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fff0:	b922      	cbnz	r2, 800fffc <quorem+0xea>
 800fff2:	3b04      	subs	r3, #4
 800fff4:	429d      	cmp	r5, r3
 800fff6:	461a      	mov	r2, r3
 800fff8:	d30b      	bcc.n	8010012 <quorem+0x100>
 800fffa:	613c      	str	r4, [r7, #16]
 800fffc:	3601      	adds	r6, #1
 800fffe:	4630      	mov	r0, r6
 8010000:	b003      	add	sp, #12
 8010002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010006:	6812      	ldr	r2, [r2, #0]
 8010008:	3b04      	subs	r3, #4
 801000a:	2a00      	cmp	r2, #0
 801000c:	d1cb      	bne.n	800ffa6 <quorem+0x94>
 801000e:	3c01      	subs	r4, #1
 8010010:	e7c6      	b.n	800ffa0 <quorem+0x8e>
 8010012:	6812      	ldr	r2, [r2, #0]
 8010014:	3b04      	subs	r3, #4
 8010016:	2a00      	cmp	r2, #0
 8010018:	d1ef      	bne.n	800fffa <quorem+0xe8>
 801001a:	3c01      	subs	r4, #1
 801001c:	e7ea      	b.n	800fff4 <quorem+0xe2>
 801001e:	2000      	movs	r0, #0
 8010020:	e7ee      	b.n	8010000 <quorem+0xee>
 8010022:	0000      	movs	r0, r0
 8010024:	0000      	movs	r0, r0
	...

08010028 <_dtoa_r>:
 8010028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801002c:	69c7      	ldr	r7, [r0, #28]
 801002e:	b097      	sub	sp, #92	@ 0x5c
 8010030:	ed8d 0b04 	vstr	d0, [sp, #16]
 8010034:	ec55 4b10 	vmov	r4, r5, d0
 8010038:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801003a:	9107      	str	r1, [sp, #28]
 801003c:	4681      	mov	r9, r0
 801003e:	920c      	str	r2, [sp, #48]	@ 0x30
 8010040:	9311      	str	r3, [sp, #68]	@ 0x44
 8010042:	b97f      	cbnz	r7, 8010064 <_dtoa_r+0x3c>
 8010044:	2010      	movs	r0, #16
 8010046:	f000 fe09 	bl	8010c5c <malloc>
 801004a:	4602      	mov	r2, r0
 801004c:	f8c9 001c 	str.w	r0, [r9, #28]
 8010050:	b920      	cbnz	r0, 801005c <_dtoa_r+0x34>
 8010052:	4ba9      	ldr	r3, [pc, #676]	@ (80102f8 <_dtoa_r+0x2d0>)
 8010054:	21ef      	movs	r1, #239	@ 0xef
 8010056:	48a9      	ldr	r0, [pc, #676]	@ (80102fc <_dtoa_r+0x2d4>)
 8010058:	f001 fc5e 	bl	8011918 <__assert_func>
 801005c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010060:	6007      	str	r7, [r0, #0]
 8010062:	60c7      	str	r7, [r0, #12]
 8010064:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010068:	6819      	ldr	r1, [r3, #0]
 801006a:	b159      	cbz	r1, 8010084 <_dtoa_r+0x5c>
 801006c:	685a      	ldr	r2, [r3, #4]
 801006e:	604a      	str	r2, [r1, #4]
 8010070:	2301      	movs	r3, #1
 8010072:	4093      	lsls	r3, r2
 8010074:	608b      	str	r3, [r1, #8]
 8010076:	4648      	mov	r0, r9
 8010078:	f000 fee6 	bl	8010e48 <_Bfree>
 801007c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010080:	2200      	movs	r2, #0
 8010082:	601a      	str	r2, [r3, #0]
 8010084:	1e2b      	subs	r3, r5, #0
 8010086:	bfb9      	ittee	lt
 8010088:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801008c:	9305      	strlt	r3, [sp, #20]
 801008e:	2300      	movge	r3, #0
 8010090:	6033      	strge	r3, [r6, #0]
 8010092:	9f05      	ldr	r7, [sp, #20]
 8010094:	4b9a      	ldr	r3, [pc, #616]	@ (8010300 <_dtoa_r+0x2d8>)
 8010096:	bfbc      	itt	lt
 8010098:	2201      	movlt	r2, #1
 801009a:	6032      	strlt	r2, [r6, #0]
 801009c:	43bb      	bics	r3, r7
 801009e:	d112      	bne.n	80100c6 <_dtoa_r+0x9e>
 80100a0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80100a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80100a6:	6013      	str	r3, [r2, #0]
 80100a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80100ac:	4323      	orrs	r3, r4
 80100ae:	f000 855a 	beq.w	8010b66 <_dtoa_r+0xb3e>
 80100b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80100b4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8010314 <_dtoa_r+0x2ec>
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	f000 855c 	beq.w	8010b76 <_dtoa_r+0xb4e>
 80100be:	f10a 0303 	add.w	r3, sl, #3
 80100c2:	f000 bd56 	b.w	8010b72 <_dtoa_r+0xb4a>
 80100c6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80100ca:	2200      	movs	r2, #0
 80100cc:	ec51 0b17 	vmov	r0, r1, d7
 80100d0:	2300      	movs	r3, #0
 80100d2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80100d6:	f7f0 fcff 	bl	8000ad8 <__aeabi_dcmpeq>
 80100da:	4680      	mov	r8, r0
 80100dc:	b158      	cbz	r0, 80100f6 <_dtoa_r+0xce>
 80100de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80100e0:	2301      	movs	r3, #1
 80100e2:	6013      	str	r3, [r2, #0]
 80100e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80100e6:	b113      	cbz	r3, 80100ee <_dtoa_r+0xc6>
 80100e8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80100ea:	4b86      	ldr	r3, [pc, #536]	@ (8010304 <_dtoa_r+0x2dc>)
 80100ec:	6013      	str	r3, [r2, #0]
 80100ee:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8010318 <_dtoa_r+0x2f0>
 80100f2:	f000 bd40 	b.w	8010b76 <_dtoa_r+0xb4e>
 80100f6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80100fa:	aa14      	add	r2, sp, #80	@ 0x50
 80100fc:	a915      	add	r1, sp, #84	@ 0x54
 80100fe:	4648      	mov	r0, r9
 8010100:	f001 f984 	bl	801140c <__d2b>
 8010104:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010108:	9002      	str	r0, [sp, #8]
 801010a:	2e00      	cmp	r6, #0
 801010c:	d078      	beq.n	8010200 <_dtoa_r+0x1d8>
 801010e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010110:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8010114:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010118:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801011c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010120:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010124:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010128:	4619      	mov	r1, r3
 801012a:	2200      	movs	r2, #0
 801012c:	4b76      	ldr	r3, [pc, #472]	@ (8010308 <_dtoa_r+0x2e0>)
 801012e:	f7f0 f8b3 	bl	8000298 <__aeabi_dsub>
 8010132:	a36b      	add	r3, pc, #428	@ (adr r3, 80102e0 <_dtoa_r+0x2b8>)
 8010134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010138:	f7f0 fa66 	bl	8000608 <__aeabi_dmul>
 801013c:	a36a      	add	r3, pc, #424	@ (adr r3, 80102e8 <_dtoa_r+0x2c0>)
 801013e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010142:	f7f0 f8ab 	bl	800029c <__adddf3>
 8010146:	4604      	mov	r4, r0
 8010148:	4630      	mov	r0, r6
 801014a:	460d      	mov	r5, r1
 801014c:	f7f0 f9f2 	bl	8000534 <__aeabi_i2d>
 8010150:	a367      	add	r3, pc, #412	@ (adr r3, 80102f0 <_dtoa_r+0x2c8>)
 8010152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010156:	f7f0 fa57 	bl	8000608 <__aeabi_dmul>
 801015a:	4602      	mov	r2, r0
 801015c:	460b      	mov	r3, r1
 801015e:	4620      	mov	r0, r4
 8010160:	4629      	mov	r1, r5
 8010162:	f7f0 f89b 	bl	800029c <__adddf3>
 8010166:	4604      	mov	r4, r0
 8010168:	460d      	mov	r5, r1
 801016a:	f7f0 fcfd 	bl	8000b68 <__aeabi_d2iz>
 801016e:	2200      	movs	r2, #0
 8010170:	4607      	mov	r7, r0
 8010172:	2300      	movs	r3, #0
 8010174:	4620      	mov	r0, r4
 8010176:	4629      	mov	r1, r5
 8010178:	f7f0 fcb8 	bl	8000aec <__aeabi_dcmplt>
 801017c:	b140      	cbz	r0, 8010190 <_dtoa_r+0x168>
 801017e:	4638      	mov	r0, r7
 8010180:	f7f0 f9d8 	bl	8000534 <__aeabi_i2d>
 8010184:	4622      	mov	r2, r4
 8010186:	462b      	mov	r3, r5
 8010188:	f7f0 fca6 	bl	8000ad8 <__aeabi_dcmpeq>
 801018c:	b900      	cbnz	r0, 8010190 <_dtoa_r+0x168>
 801018e:	3f01      	subs	r7, #1
 8010190:	2f16      	cmp	r7, #22
 8010192:	d852      	bhi.n	801023a <_dtoa_r+0x212>
 8010194:	4b5d      	ldr	r3, [pc, #372]	@ (801030c <_dtoa_r+0x2e4>)
 8010196:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801019a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801019e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80101a2:	f7f0 fca3 	bl	8000aec <__aeabi_dcmplt>
 80101a6:	2800      	cmp	r0, #0
 80101a8:	d049      	beq.n	801023e <_dtoa_r+0x216>
 80101aa:	3f01      	subs	r7, #1
 80101ac:	2300      	movs	r3, #0
 80101ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80101b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80101b2:	1b9b      	subs	r3, r3, r6
 80101b4:	1e5a      	subs	r2, r3, #1
 80101b6:	bf45      	ittet	mi
 80101b8:	f1c3 0301 	rsbmi	r3, r3, #1
 80101bc:	9300      	strmi	r3, [sp, #0]
 80101be:	2300      	movpl	r3, #0
 80101c0:	2300      	movmi	r3, #0
 80101c2:	9206      	str	r2, [sp, #24]
 80101c4:	bf54      	ite	pl
 80101c6:	9300      	strpl	r3, [sp, #0]
 80101c8:	9306      	strmi	r3, [sp, #24]
 80101ca:	2f00      	cmp	r7, #0
 80101cc:	db39      	blt.n	8010242 <_dtoa_r+0x21a>
 80101ce:	9b06      	ldr	r3, [sp, #24]
 80101d0:	970d      	str	r7, [sp, #52]	@ 0x34
 80101d2:	443b      	add	r3, r7
 80101d4:	9306      	str	r3, [sp, #24]
 80101d6:	2300      	movs	r3, #0
 80101d8:	9308      	str	r3, [sp, #32]
 80101da:	9b07      	ldr	r3, [sp, #28]
 80101dc:	2b09      	cmp	r3, #9
 80101de:	d863      	bhi.n	80102a8 <_dtoa_r+0x280>
 80101e0:	2b05      	cmp	r3, #5
 80101e2:	bfc4      	itt	gt
 80101e4:	3b04      	subgt	r3, #4
 80101e6:	9307      	strgt	r3, [sp, #28]
 80101e8:	9b07      	ldr	r3, [sp, #28]
 80101ea:	f1a3 0302 	sub.w	r3, r3, #2
 80101ee:	bfcc      	ite	gt
 80101f0:	2400      	movgt	r4, #0
 80101f2:	2401      	movle	r4, #1
 80101f4:	2b03      	cmp	r3, #3
 80101f6:	d863      	bhi.n	80102c0 <_dtoa_r+0x298>
 80101f8:	e8df f003 	tbb	[pc, r3]
 80101fc:	2b375452 	.word	0x2b375452
 8010200:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8010204:	441e      	add	r6, r3
 8010206:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801020a:	2b20      	cmp	r3, #32
 801020c:	bfc1      	itttt	gt
 801020e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010212:	409f      	lslgt	r7, r3
 8010214:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010218:	fa24 f303 	lsrgt.w	r3, r4, r3
 801021c:	bfd6      	itet	le
 801021e:	f1c3 0320 	rsble	r3, r3, #32
 8010222:	ea47 0003 	orrgt.w	r0, r7, r3
 8010226:	fa04 f003 	lslle.w	r0, r4, r3
 801022a:	f7f0 f973 	bl	8000514 <__aeabi_ui2d>
 801022e:	2201      	movs	r2, #1
 8010230:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010234:	3e01      	subs	r6, #1
 8010236:	9212      	str	r2, [sp, #72]	@ 0x48
 8010238:	e776      	b.n	8010128 <_dtoa_r+0x100>
 801023a:	2301      	movs	r3, #1
 801023c:	e7b7      	b.n	80101ae <_dtoa_r+0x186>
 801023e:	9010      	str	r0, [sp, #64]	@ 0x40
 8010240:	e7b6      	b.n	80101b0 <_dtoa_r+0x188>
 8010242:	9b00      	ldr	r3, [sp, #0]
 8010244:	1bdb      	subs	r3, r3, r7
 8010246:	9300      	str	r3, [sp, #0]
 8010248:	427b      	negs	r3, r7
 801024a:	9308      	str	r3, [sp, #32]
 801024c:	2300      	movs	r3, #0
 801024e:	930d      	str	r3, [sp, #52]	@ 0x34
 8010250:	e7c3      	b.n	80101da <_dtoa_r+0x1b2>
 8010252:	2301      	movs	r3, #1
 8010254:	9309      	str	r3, [sp, #36]	@ 0x24
 8010256:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010258:	eb07 0b03 	add.w	fp, r7, r3
 801025c:	f10b 0301 	add.w	r3, fp, #1
 8010260:	2b01      	cmp	r3, #1
 8010262:	9303      	str	r3, [sp, #12]
 8010264:	bfb8      	it	lt
 8010266:	2301      	movlt	r3, #1
 8010268:	e006      	b.n	8010278 <_dtoa_r+0x250>
 801026a:	2301      	movs	r3, #1
 801026c:	9309      	str	r3, [sp, #36]	@ 0x24
 801026e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010270:	2b00      	cmp	r3, #0
 8010272:	dd28      	ble.n	80102c6 <_dtoa_r+0x29e>
 8010274:	469b      	mov	fp, r3
 8010276:	9303      	str	r3, [sp, #12]
 8010278:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801027c:	2100      	movs	r1, #0
 801027e:	2204      	movs	r2, #4
 8010280:	f102 0514 	add.w	r5, r2, #20
 8010284:	429d      	cmp	r5, r3
 8010286:	d926      	bls.n	80102d6 <_dtoa_r+0x2ae>
 8010288:	6041      	str	r1, [r0, #4]
 801028a:	4648      	mov	r0, r9
 801028c:	f000 fd9c 	bl	8010dc8 <_Balloc>
 8010290:	4682      	mov	sl, r0
 8010292:	2800      	cmp	r0, #0
 8010294:	d142      	bne.n	801031c <_dtoa_r+0x2f4>
 8010296:	4b1e      	ldr	r3, [pc, #120]	@ (8010310 <_dtoa_r+0x2e8>)
 8010298:	4602      	mov	r2, r0
 801029a:	f240 11af 	movw	r1, #431	@ 0x1af
 801029e:	e6da      	b.n	8010056 <_dtoa_r+0x2e>
 80102a0:	2300      	movs	r3, #0
 80102a2:	e7e3      	b.n	801026c <_dtoa_r+0x244>
 80102a4:	2300      	movs	r3, #0
 80102a6:	e7d5      	b.n	8010254 <_dtoa_r+0x22c>
 80102a8:	2401      	movs	r4, #1
 80102aa:	2300      	movs	r3, #0
 80102ac:	9307      	str	r3, [sp, #28]
 80102ae:	9409      	str	r4, [sp, #36]	@ 0x24
 80102b0:	f04f 3bff 	mov.w	fp, #4294967295
 80102b4:	2200      	movs	r2, #0
 80102b6:	f8cd b00c 	str.w	fp, [sp, #12]
 80102ba:	2312      	movs	r3, #18
 80102bc:	920c      	str	r2, [sp, #48]	@ 0x30
 80102be:	e7db      	b.n	8010278 <_dtoa_r+0x250>
 80102c0:	2301      	movs	r3, #1
 80102c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80102c4:	e7f4      	b.n	80102b0 <_dtoa_r+0x288>
 80102c6:	f04f 0b01 	mov.w	fp, #1
 80102ca:	f8cd b00c 	str.w	fp, [sp, #12]
 80102ce:	465b      	mov	r3, fp
 80102d0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80102d4:	e7d0      	b.n	8010278 <_dtoa_r+0x250>
 80102d6:	3101      	adds	r1, #1
 80102d8:	0052      	lsls	r2, r2, #1
 80102da:	e7d1      	b.n	8010280 <_dtoa_r+0x258>
 80102dc:	f3af 8000 	nop.w
 80102e0:	636f4361 	.word	0x636f4361
 80102e4:	3fd287a7 	.word	0x3fd287a7
 80102e8:	8b60c8b3 	.word	0x8b60c8b3
 80102ec:	3fc68a28 	.word	0x3fc68a28
 80102f0:	509f79fb 	.word	0x509f79fb
 80102f4:	3fd34413 	.word	0x3fd34413
 80102f8:	08012a06 	.word	0x08012a06
 80102fc:	08012a1d 	.word	0x08012a1d
 8010300:	7ff00000 	.word	0x7ff00000
 8010304:	080129d6 	.word	0x080129d6
 8010308:	3ff80000 	.word	0x3ff80000
 801030c:	08012c70 	.word	0x08012c70
 8010310:	08012a75 	.word	0x08012a75
 8010314:	08012a02 	.word	0x08012a02
 8010318:	080129d5 	.word	0x080129d5
 801031c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010320:	6018      	str	r0, [r3, #0]
 8010322:	9b03      	ldr	r3, [sp, #12]
 8010324:	2b0e      	cmp	r3, #14
 8010326:	f200 80a1 	bhi.w	801046c <_dtoa_r+0x444>
 801032a:	2c00      	cmp	r4, #0
 801032c:	f000 809e 	beq.w	801046c <_dtoa_r+0x444>
 8010330:	2f00      	cmp	r7, #0
 8010332:	dd33      	ble.n	801039c <_dtoa_r+0x374>
 8010334:	4b9c      	ldr	r3, [pc, #624]	@ (80105a8 <_dtoa_r+0x580>)
 8010336:	f007 020f 	and.w	r2, r7, #15
 801033a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801033e:	ed93 7b00 	vldr	d7, [r3]
 8010342:	05f8      	lsls	r0, r7, #23
 8010344:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8010348:	ea4f 1427 	mov.w	r4, r7, asr #4
 801034c:	d516      	bpl.n	801037c <_dtoa_r+0x354>
 801034e:	4b97      	ldr	r3, [pc, #604]	@ (80105ac <_dtoa_r+0x584>)
 8010350:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8010354:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010358:	f7f0 fa80 	bl	800085c <__aeabi_ddiv>
 801035c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010360:	f004 040f 	and.w	r4, r4, #15
 8010364:	2603      	movs	r6, #3
 8010366:	4d91      	ldr	r5, [pc, #580]	@ (80105ac <_dtoa_r+0x584>)
 8010368:	b954      	cbnz	r4, 8010380 <_dtoa_r+0x358>
 801036a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801036e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010372:	f7f0 fa73 	bl	800085c <__aeabi_ddiv>
 8010376:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801037a:	e028      	b.n	80103ce <_dtoa_r+0x3a6>
 801037c:	2602      	movs	r6, #2
 801037e:	e7f2      	b.n	8010366 <_dtoa_r+0x33e>
 8010380:	07e1      	lsls	r1, r4, #31
 8010382:	d508      	bpl.n	8010396 <_dtoa_r+0x36e>
 8010384:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010388:	e9d5 2300 	ldrd	r2, r3, [r5]
 801038c:	f7f0 f93c 	bl	8000608 <__aeabi_dmul>
 8010390:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010394:	3601      	adds	r6, #1
 8010396:	1064      	asrs	r4, r4, #1
 8010398:	3508      	adds	r5, #8
 801039a:	e7e5      	b.n	8010368 <_dtoa_r+0x340>
 801039c:	f000 80af 	beq.w	80104fe <_dtoa_r+0x4d6>
 80103a0:	427c      	negs	r4, r7
 80103a2:	4b81      	ldr	r3, [pc, #516]	@ (80105a8 <_dtoa_r+0x580>)
 80103a4:	4d81      	ldr	r5, [pc, #516]	@ (80105ac <_dtoa_r+0x584>)
 80103a6:	f004 020f 	and.w	r2, r4, #15
 80103aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80103ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80103b6:	f7f0 f927 	bl	8000608 <__aeabi_dmul>
 80103ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80103be:	1124      	asrs	r4, r4, #4
 80103c0:	2300      	movs	r3, #0
 80103c2:	2602      	movs	r6, #2
 80103c4:	2c00      	cmp	r4, #0
 80103c6:	f040 808f 	bne.w	80104e8 <_dtoa_r+0x4c0>
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d1d3      	bne.n	8010376 <_dtoa_r+0x34e>
 80103ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80103d0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	f000 8094 	beq.w	8010502 <_dtoa_r+0x4da>
 80103da:	4b75      	ldr	r3, [pc, #468]	@ (80105b0 <_dtoa_r+0x588>)
 80103dc:	2200      	movs	r2, #0
 80103de:	4620      	mov	r0, r4
 80103e0:	4629      	mov	r1, r5
 80103e2:	f7f0 fb83 	bl	8000aec <__aeabi_dcmplt>
 80103e6:	2800      	cmp	r0, #0
 80103e8:	f000 808b 	beq.w	8010502 <_dtoa_r+0x4da>
 80103ec:	9b03      	ldr	r3, [sp, #12]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	f000 8087 	beq.w	8010502 <_dtoa_r+0x4da>
 80103f4:	f1bb 0f00 	cmp.w	fp, #0
 80103f8:	dd34      	ble.n	8010464 <_dtoa_r+0x43c>
 80103fa:	4620      	mov	r0, r4
 80103fc:	4b6d      	ldr	r3, [pc, #436]	@ (80105b4 <_dtoa_r+0x58c>)
 80103fe:	2200      	movs	r2, #0
 8010400:	4629      	mov	r1, r5
 8010402:	f7f0 f901 	bl	8000608 <__aeabi_dmul>
 8010406:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801040a:	f107 38ff 	add.w	r8, r7, #4294967295
 801040e:	3601      	adds	r6, #1
 8010410:	465c      	mov	r4, fp
 8010412:	4630      	mov	r0, r6
 8010414:	f7f0 f88e 	bl	8000534 <__aeabi_i2d>
 8010418:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801041c:	f7f0 f8f4 	bl	8000608 <__aeabi_dmul>
 8010420:	4b65      	ldr	r3, [pc, #404]	@ (80105b8 <_dtoa_r+0x590>)
 8010422:	2200      	movs	r2, #0
 8010424:	f7ef ff3a 	bl	800029c <__adddf3>
 8010428:	4605      	mov	r5, r0
 801042a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801042e:	2c00      	cmp	r4, #0
 8010430:	d16a      	bne.n	8010508 <_dtoa_r+0x4e0>
 8010432:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010436:	4b61      	ldr	r3, [pc, #388]	@ (80105bc <_dtoa_r+0x594>)
 8010438:	2200      	movs	r2, #0
 801043a:	f7ef ff2d 	bl	8000298 <__aeabi_dsub>
 801043e:	4602      	mov	r2, r0
 8010440:	460b      	mov	r3, r1
 8010442:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010446:	462a      	mov	r2, r5
 8010448:	4633      	mov	r3, r6
 801044a:	f7f0 fb6d 	bl	8000b28 <__aeabi_dcmpgt>
 801044e:	2800      	cmp	r0, #0
 8010450:	f040 8298 	bne.w	8010984 <_dtoa_r+0x95c>
 8010454:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010458:	462a      	mov	r2, r5
 801045a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801045e:	f7f0 fb45 	bl	8000aec <__aeabi_dcmplt>
 8010462:	bb38      	cbnz	r0, 80104b4 <_dtoa_r+0x48c>
 8010464:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8010468:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801046c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801046e:	2b00      	cmp	r3, #0
 8010470:	f2c0 8157 	blt.w	8010722 <_dtoa_r+0x6fa>
 8010474:	2f0e      	cmp	r7, #14
 8010476:	f300 8154 	bgt.w	8010722 <_dtoa_r+0x6fa>
 801047a:	4b4b      	ldr	r3, [pc, #300]	@ (80105a8 <_dtoa_r+0x580>)
 801047c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010480:	ed93 7b00 	vldr	d7, [r3]
 8010484:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010486:	2b00      	cmp	r3, #0
 8010488:	ed8d 7b00 	vstr	d7, [sp]
 801048c:	f280 80e5 	bge.w	801065a <_dtoa_r+0x632>
 8010490:	9b03      	ldr	r3, [sp, #12]
 8010492:	2b00      	cmp	r3, #0
 8010494:	f300 80e1 	bgt.w	801065a <_dtoa_r+0x632>
 8010498:	d10c      	bne.n	80104b4 <_dtoa_r+0x48c>
 801049a:	4b48      	ldr	r3, [pc, #288]	@ (80105bc <_dtoa_r+0x594>)
 801049c:	2200      	movs	r2, #0
 801049e:	ec51 0b17 	vmov	r0, r1, d7
 80104a2:	f7f0 f8b1 	bl	8000608 <__aeabi_dmul>
 80104a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80104aa:	f7f0 fb33 	bl	8000b14 <__aeabi_dcmpge>
 80104ae:	2800      	cmp	r0, #0
 80104b0:	f000 8266 	beq.w	8010980 <_dtoa_r+0x958>
 80104b4:	2400      	movs	r4, #0
 80104b6:	4625      	mov	r5, r4
 80104b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80104ba:	4656      	mov	r6, sl
 80104bc:	ea6f 0803 	mvn.w	r8, r3
 80104c0:	2700      	movs	r7, #0
 80104c2:	4621      	mov	r1, r4
 80104c4:	4648      	mov	r0, r9
 80104c6:	f000 fcbf 	bl	8010e48 <_Bfree>
 80104ca:	2d00      	cmp	r5, #0
 80104cc:	f000 80bd 	beq.w	801064a <_dtoa_r+0x622>
 80104d0:	b12f      	cbz	r7, 80104de <_dtoa_r+0x4b6>
 80104d2:	42af      	cmp	r7, r5
 80104d4:	d003      	beq.n	80104de <_dtoa_r+0x4b6>
 80104d6:	4639      	mov	r1, r7
 80104d8:	4648      	mov	r0, r9
 80104da:	f000 fcb5 	bl	8010e48 <_Bfree>
 80104de:	4629      	mov	r1, r5
 80104e0:	4648      	mov	r0, r9
 80104e2:	f000 fcb1 	bl	8010e48 <_Bfree>
 80104e6:	e0b0      	b.n	801064a <_dtoa_r+0x622>
 80104e8:	07e2      	lsls	r2, r4, #31
 80104ea:	d505      	bpl.n	80104f8 <_dtoa_r+0x4d0>
 80104ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80104f0:	f7f0 f88a 	bl	8000608 <__aeabi_dmul>
 80104f4:	3601      	adds	r6, #1
 80104f6:	2301      	movs	r3, #1
 80104f8:	1064      	asrs	r4, r4, #1
 80104fa:	3508      	adds	r5, #8
 80104fc:	e762      	b.n	80103c4 <_dtoa_r+0x39c>
 80104fe:	2602      	movs	r6, #2
 8010500:	e765      	b.n	80103ce <_dtoa_r+0x3a6>
 8010502:	9c03      	ldr	r4, [sp, #12]
 8010504:	46b8      	mov	r8, r7
 8010506:	e784      	b.n	8010412 <_dtoa_r+0x3ea>
 8010508:	4b27      	ldr	r3, [pc, #156]	@ (80105a8 <_dtoa_r+0x580>)
 801050a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801050c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010510:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010514:	4454      	add	r4, sl
 8010516:	2900      	cmp	r1, #0
 8010518:	d054      	beq.n	80105c4 <_dtoa_r+0x59c>
 801051a:	4929      	ldr	r1, [pc, #164]	@ (80105c0 <_dtoa_r+0x598>)
 801051c:	2000      	movs	r0, #0
 801051e:	f7f0 f99d 	bl	800085c <__aeabi_ddiv>
 8010522:	4633      	mov	r3, r6
 8010524:	462a      	mov	r2, r5
 8010526:	f7ef feb7 	bl	8000298 <__aeabi_dsub>
 801052a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801052e:	4656      	mov	r6, sl
 8010530:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010534:	f7f0 fb18 	bl	8000b68 <__aeabi_d2iz>
 8010538:	4605      	mov	r5, r0
 801053a:	f7ef fffb 	bl	8000534 <__aeabi_i2d>
 801053e:	4602      	mov	r2, r0
 8010540:	460b      	mov	r3, r1
 8010542:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010546:	f7ef fea7 	bl	8000298 <__aeabi_dsub>
 801054a:	3530      	adds	r5, #48	@ 0x30
 801054c:	4602      	mov	r2, r0
 801054e:	460b      	mov	r3, r1
 8010550:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010554:	f806 5b01 	strb.w	r5, [r6], #1
 8010558:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801055c:	f7f0 fac6 	bl	8000aec <__aeabi_dcmplt>
 8010560:	2800      	cmp	r0, #0
 8010562:	d172      	bne.n	801064a <_dtoa_r+0x622>
 8010564:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010568:	4911      	ldr	r1, [pc, #68]	@ (80105b0 <_dtoa_r+0x588>)
 801056a:	2000      	movs	r0, #0
 801056c:	f7ef fe94 	bl	8000298 <__aeabi_dsub>
 8010570:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010574:	f7f0 faba 	bl	8000aec <__aeabi_dcmplt>
 8010578:	2800      	cmp	r0, #0
 801057a:	f040 80b4 	bne.w	80106e6 <_dtoa_r+0x6be>
 801057e:	42a6      	cmp	r6, r4
 8010580:	f43f af70 	beq.w	8010464 <_dtoa_r+0x43c>
 8010584:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010588:	4b0a      	ldr	r3, [pc, #40]	@ (80105b4 <_dtoa_r+0x58c>)
 801058a:	2200      	movs	r2, #0
 801058c:	f7f0 f83c 	bl	8000608 <__aeabi_dmul>
 8010590:	4b08      	ldr	r3, [pc, #32]	@ (80105b4 <_dtoa_r+0x58c>)
 8010592:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010596:	2200      	movs	r2, #0
 8010598:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801059c:	f7f0 f834 	bl	8000608 <__aeabi_dmul>
 80105a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80105a4:	e7c4      	b.n	8010530 <_dtoa_r+0x508>
 80105a6:	bf00      	nop
 80105a8:	08012c70 	.word	0x08012c70
 80105ac:	08012c48 	.word	0x08012c48
 80105b0:	3ff00000 	.word	0x3ff00000
 80105b4:	40240000 	.word	0x40240000
 80105b8:	401c0000 	.word	0x401c0000
 80105bc:	40140000 	.word	0x40140000
 80105c0:	3fe00000 	.word	0x3fe00000
 80105c4:	4631      	mov	r1, r6
 80105c6:	4628      	mov	r0, r5
 80105c8:	f7f0 f81e 	bl	8000608 <__aeabi_dmul>
 80105cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80105d0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80105d2:	4656      	mov	r6, sl
 80105d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80105d8:	f7f0 fac6 	bl	8000b68 <__aeabi_d2iz>
 80105dc:	4605      	mov	r5, r0
 80105de:	f7ef ffa9 	bl	8000534 <__aeabi_i2d>
 80105e2:	4602      	mov	r2, r0
 80105e4:	460b      	mov	r3, r1
 80105e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80105ea:	f7ef fe55 	bl	8000298 <__aeabi_dsub>
 80105ee:	3530      	adds	r5, #48	@ 0x30
 80105f0:	f806 5b01 	strb.w	r5, [r6], #1
 80105f4:	4602      	mov	r2, r0
 80105f6:	460b      	mov	r3, r1
 80105f8:	42a6      	cmp	r6, r4
 80105fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80105fe:	f04f 0200 	mov.w	r2, #0
 8010602:	d124      	bne.n	801064e <_dtoa_r+0x626>
 8010604:	4baf      	ldr	r3, [pc, #700]	@ (80108c4 <_dtoa_r+0x89c>)
 8010606:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801060a:	f7ef fe47 	bl	800029c <__adddf3>
 801060e:	4602      	mov	r2, r0
 8010610:	460b      	mov	r3, r1
 8010612:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010616:	f7f0 fa87 	bl	8000b28 <__aeabi_dcmpgt>
 801061a:	2800      	cmp	r0, #0
 801061c:	d163      	bne.n	80106e6 <_dtoa_r+0x6be>
 801061e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010622:	49a8      	ldr	r1, [pc, #672]	@ (80108c4 <_dtoa_r+0x89c>)
 8010624:	2000      	movs	r0, #0
 8010626:	f7ef fe37 	bl	8000298 <__aeabi_dsub>
 801062a:	4602      	mov	r2, r0
 801062c:	460b      	mov	r3, r1
 801062e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010632:	f7f0 fa5b 	bl	8000aec <__aeabi_dcmplt>
 8010636:	2800      	cmp	r0, #0
 8010638:	f43f af14 	beq.w	8010464 <_dtoa_r+0x43c>
 801063c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801063e:	1e73      	subs	r3, r6, #1
 8010640:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010642:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010646:	2b30      	cmp	r3, #48	@ 0x30
 8010648:	d0f8      	beq.n	801063c <_dtoa_r+0x614>
 801064a:	4647      	mov	r7, r8
 801064c:	e03b      	b.n	80106c6 <_dtoa_r+0x69e>
 801064e:	4b9e      	ldr	r3, [pc, #632]	@ (80108c8 <_dtoa_r+0x8a0>)
 8010650:	f7ef ffda 	bl	8000608 <__aeabi_dmul>
 8010654:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010658:	e7bc      	b.n	80105d4 <_dtoa_r+0x5ac>
 801065a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801065e:	4656      	mov	r6, sl
 8010660:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010664:	4620      	mov	r0, r4
 8010666:	4629      	mov	r1, r5
 8010668:	f7f0 f8f8 	bl	800085c <__aeabi_ddiv>
 801066c:	f7f0 fa7c 	bl	8000b68 <__aeabi_d2iz>
 8010670:	4680      	mov	r8, r0
 8010672:	f7ef ff5f 	bl	8000534 <__aeabi_i2d>
 8010676:	e9dd 2300 	ldrd	r2, r3, [sp]
 801067a:	f7ef ffc5 	bl	8000608 <__aeabi_dmul>
 801067e:	4602      	mov	r2, r0
 8010680:	460b      	mov	r3, r1
 8010682:	4620      	mov	r0, r4
 8010684:	4629      	mov	r1, r5
 8010686:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801068a:	f7ef fe05 	bl	8000298 <__aeabi_dsub>
 801068e:	f806 4b01 	strb.w	r4, [r6], #1
 8010692:	9d03      	ldr	r5, [sp, #12]
 8010694:	eba6 040a 	sub.w	r4, r6, sl
 8010698:	42a5      	cmp	r5, r4
 801069a:	4602      	mov	r2, r0
 801069c:	460b      	mov	r3, r1
 801069e:	d133      	bne.n	8010708 <_dtoa_r+0x6e0>
 80106a0:	f7ef fdfc 	bl	800029c <__adddf3>
 80106a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80106a8:	4604      	mov	r4, r0
 80106aa:	460d      	mov	r5, r1
 80106ac:	f7f0 fa3c 	bl	8000b28 <__aeabi_dcmpgt>
 80106b0:	b9c0      	cbnz	r0, 80106e4 <_dtoa_r+0x6bc>
 80106b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80106b6:	4620      	mov	r0, r4
 80106b8:	4629      	mov	r1, r5
 80106ba:	f7f0 fa0d 	bl	8000ad8 <__aeabi_dcmpeq>
 80106be:	b110      	cbz	r0, 80106c6 <_dtoa_r+0x69e>
 80106c0:	f018 0f01 	tst.w	r8, #1
 80106c4:	d10e      	bne.n	80106e4 <_dtoa_r+0x6bc>
 80106c6:	9902      	ldr	r1, [sp, #8]
 80106c8:	4648      	mov	r0, r9
 80106ca:	f000 fbbd 	bl	8010e48 <_Bfree>
 80106ce:	2300      	movs	r3, #0
 80106d0:	7033      	strb	r3, [r6, #0]
 80106d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80106d4:	3701      	adds	r7, #1
 80106d6:	601f      	str	r7, [r3, #0]
 80106d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80106da:	2b00      	cmp	r3, #0
 80106dc:	f000 824b 	beq.w	8010b76 <_dtoa_r+0xb4e>
 80106e0:	601e      	str	r6, [r3, #0]
 80106e2:	e248      	b.n	8010b76 <_dtoa_r+0xb4e>
 80106e4:	46b8      	mov	r8, r7
 80106e6:	4633      	mov	r3, r6
 80106e8:	461e      	mov	r6, r3
 80106ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80106ee:	2a39      	cmp	r2, #57	@ 0x39
 80106f0:	d106      	bne.n	8010700 <_dtoa_r+0x6d8>
 80106f2:	459a      	cmp	sl, r3
 80106f4:	d1f8      	bne.n	80106e8 <_dtoa_r+0x6c0>
 80106f6:	2230      	movs	r2, #48	@ 0x30
 80106f8:	f108 0801 	add.w	r8, r8, #1
 80106fc:	f88a 2000 	strb.w	r2, [sl]
 8010700:	781a      	ldrb	r2, [r3, #0]
 8010702:	3201      	adds	r2, #1
 8010704:	701a      	strb	r2, [r3, #0]
 8010706:	e7a0      	b.n	801064a <_dtoa_r+0x622>
 8010708:	4b6f      	ldr	r3, [pc, #444]	@ (80108c8 <_dtoa_r+0x8a0>)
 801070a:	2200      	movs	r2, #0
 801070c:	f7ef ff7c 	bl	8000608 <__aeabi_dmul>
 8010710:	2200      	movs	r2, #0
 8010712:	2300      	movs	r3, #0
 8010714:	4604      	mov	r4, r0
 8010716:	460d      	mov	r5, r1
 8010718:	f7f0 f9de 	bl	8000ad8 <__aeabi_dcmpeq>
 801071c:	2800      	cmp	r0, #0
 801071e:	d09f      	beq.n	8010660 <_dtoa_r+0x638>
 8010720:	e7d1      	b.n	80106c6 <_dtoa_r+0x69e>
 8010722:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010724:	2a00      	cmp	r2, #0
 8010726:	f000 80ea 	beq.w	80108fe <_dtoa_r+0x8d6>
 801072a:	9a07      	ldr	r2, [sp, #28]
 801072c:	2a01      	cmp	r2, #1
 801072e:	f300 80cd 	bgt.w	80108cc <_dtoa_r+0x8a4>
 8010732:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010734:	2a00      	cmp	r2, #0
 8010736:	f000 80c1 	beq.w	80108bc <_dtoa_r+0x894>
 801073a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801073e:	9c08      	ldr	r4, [sp, #32]
 8010740:	9e00      	ldr	r6, [sp, #0]
 8010742:	9a00      	ldr	r2, [sp, #0]
 8010744:	441a      	add	r2, r3
 8010746:	9200      	str	r2, [sp, #0]
 8010748:	9a06      	ldr	r2, [sp, #24]
 801074a:	2101      	movs	r1, #1
 801074c:	441a      	add	r2, r3
 801074e:	4648      	mov	r0, r9
 8010750:	9206      	str	r2, [sp, #24]
 8010752:	f000 fc2d 	bl	8010fb0 <__i2b>
 8010756:	4605      	mov	r5, r0
 8010758:	b166      	cbz	r6, 8010774 <_dtoa_r+0x74c>
 801075a:	9b06      	ldr	r3, [sp, #24]
 801075c:	2b00      	cmp	r3, #0
 801075e:	dd09      	ble.n	8010774 <_dtoa_r+0x74c>
 8010760:	42b3      	cmp	r3, r6
 8010762:	9a00      	ldr	r2, [sp, #0]
 8010764:	bfa8      	it	ge
 8010766:	4633      	movge	r3, r6
 8010768:	1ad2      	subs	r2, r2, r3
 801076a:	9200      	str	r2, [sp, #0]
 801076c:	9a06      	ldr	r2, [sp, #24]
 801076e:	1af6      	subs	r6, r6, r3
 8010770:	1ad3      	subs	r3, r2, r3
 8010772:	9306      	str	r3, [sp, #24]
 8010774:	9b08      	ldr	r3, [sp, #32]
 8010776:	b30b      	cbz	r3, 80107bc <_dtoa_r+0x794>
 8010778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801077a:	2b00      	cmp	r3, #0
 801077c:	f000 80c6 	beq.w	801090c <_dtoa_r+0x8e4>
 8010780:	2c00      	cmp	r4, #0
 8010782:	f000 80c0 	beq.w	8010906 <_dtoa_r+0x8de>
 8010786:	4629      	mov	r1, r5
 8010788:	4622      	mov	r2, r4
 801078a:	4648      	mov	r0, r9
 801078c:	f000 fcc8 	bl	8011120 <__pow5mult>
 8010790:	9a02      	ldr	r2, [sp, #8]
 8010792:	4601      	mov	r1, r0
 8010794:	4605      	mov	r5, r0
 8010796:	4648      	mov	r0, r9
 8010798:	f000 fc20 	bl	8010fdc <__multiply>
 801079c:	9902      	ldr	r1, [sp, #8]
 801079e:	4680      	mov	r8, r0
 80107a0:	4648      	mov	r0, r9
 80107a2:	f000 fb51 	bl	8010e48 <_Bfree>
 80107a6:	9b08      	ldr	r3, [sp, #32]
 80107a8:	1b1b      	subs	r3, r3, r4
 80107aa:	9308      	str	r3, [sp, #32]
 80107ac:	f000 80b1 	beq.w	8010912 <_dtoa_r+0x8ea>
 80107b0:	9a08      	ldr	r2, [sp, #32]
 80107b2:	4641      	mov	r1, r8
 80107b4:	4648      	mov	r0, r9
 80107b6:	f000 fcb3 	bl	8011120 <__pow5mult>
 80107ba:	9002      	str	r0, [sp, #8]
 80107bc:	2101      	movs	r1, #1
 80107be:	4648      	mov	r0, r9
 80107c0:	f000 fbf6 	bl	8010fb0 <__i2b>
 80107c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80107c6:	4604      	mov	r4, r0
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	f000 81d8 	beq.w	8010b7e <_dtoa_r+0xb56>
 80107ce:	461a      	mov	r2, r3
 80107d0:	4601      	mov	r1, r0
 80107d2:	4648      	mov	r0, r9
 80107d4:	f000 fca4 	bl	8011120 <__pow5mult>
 80107d8:	9b07      	ldr	r3, [sp, #28]
 80107da:	2b01      	cmp	r3, #1
 80107dc:	4604      	mov	r4, r0
 80107de:	f300 809f 	bgt.w	8010920 <_dtoa_r+0x8f8>
 80107e2:	9b04      	ldr	r3, [sp, #16]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	f040 8097 	bne.w	8010918 <_dtoa_r+0x8f0>
 80107ea:	9b05      	ldr	r3, [sp, #20]
 80107ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	f040 8093 	bne.w	801091c <_dtoa_r+0x8f4>
 80107f6:	9b05      	ldr	r3, [sp, #20]
 80107f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80107fc:	0d1b      	lsrs	r3, r3, #20
 80107fe:	051b      	lsls	r3, r3, #20
 8010800:	b133      	cbz	r3, 8010810 <_dtoa_r+0x7e8>
 8010802:	9b00      	ldr	r3, [sp, #0]
 8010804:	3301      	adds	r3, #1
 8010806:	9300      	str	r3, [sp, #0]
 8010808:	9b06      	ldr	r3, [sp, #24]
 801080a:	3301      	adds	r3, #1
 801080c:	9306      	str	r3, [sp, #24]
 801080e:	2301      	movs	r3, #1
 8010810:	9308      	str	r3, [sp, #32]
 8010812:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010814:	2b00      	cmp	r3, #0
 8010816:	f000 81b8 	beq.w	8010b8a <_dtoa_r+0xb62>
 801081a:	6923      	ldr	r3, [r4, #16]
 801081c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010820:	6918      	ldr	r0, [r3, #16]
 8010822:	f000 fb79 	bl	8010f18 <__hi0bits>
 8010826:	f1c0 0020 	rsb	r0, r0, #32
 801082a:	9b06      	ldr	r3, [sp, #24]
 801082c:	4418      	add	r0, r3
 801082e:	f010 001f 	ands.w	r0, r0, #31
 8010832:	f000 8082 	beq.w	801093a <_dtoa_r+0x912>
 8010836:	f1c0 0320 	rsb	r3, r0, #32
 801083a:	2b04      	cmp	r3, #4
 801083c:	dd73      	ble.n	8010926 <_dtoa_r+0x8fe>
 801083e:	9b00      	ldr	r3, [sp, #0]
 8010840:	f1c0 001c 	rsb	r0, r0, #28
 8010844:	4403      	add	r3, r0
 8010846:	9300      	str	r3, [sp, #0]
 8010848:	9b06      	ldr	r3, [sp, #24]
 801084a:	4403      	add	r3, r0
 801084c:	4406      	add	r6, r0
 801084e:	9306      	str	r3, [sp, #24]
 8010850:	9b00      	ldr	r3, [sp, #0]
 8010852:	2b00      	cmp	r3, #0
 8010854:	dd05      	ble.n	8010862 <_dtoa_r+0x83a>
 8010856:	9902      	ldr	r1, [sp, #8]
 8010858:	461a      	mov	r2, r3
 801085a:	4648      	mov	r0, r9
 801085c:	f000 fcba 	bl	80111d4 <__lshift>
 8010860:	9002      	str	r0, [sp, #8]
 8010862:	9b06      	ldr	r3, [sp, #24]
 8010864:	2b00      	cmp	r3, #0
 8010866:	dd05      	ble.n	8010874 <_dtoa_r+0x84c>
 8010868:	4621      	mov	r1, r4
 801086a:	461a      	mov	r2, r3
 801086c:	4648      	mov	r0, r9
 801086e:	f000 fcb1 	bl	80111d4 <__lshift>
 8010872:	4604      	mov	r4, r0
 8010874:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010876:	2b00      	cmp	r3, #0
 8010878:	d061      	beq.n	801093e <_dtoa_r+0x916>
 801087a:	9802      	ldr	r0, [sp, #8]
 801087c:	4621      	mov	r1, r4
 801087e:	f000 fd15 	bl	80112ac <__mcmp>
 8010882:	2800      	cmp	r0, #0
 8010884:	da5b      	bge.n	801093e <_dtoa_r+0x916>
 8010886:	2300      	movs	r3, #0
 8010888:	9902      	ldr	r1, [sp, #8]
 801088a:	220a      	movs	r2, #10
 801088c:	4648      	mov	r0, r9
 801088e:	f000 fafd 	bl	8010e8c <__multadd>
 8010892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010894:	9002      	str	r0, [sp, #8]
 8010896:	f107 38ff 	add.w	r8, r7, #4294967295
 801089a:	2b00      	cmp	r3, #0
 801089c:	f000 8177 	beq.w	8010b8e <_dtoa_r+0xb66>
 80108a0:	4629      	mov	r1, r5
 80108a2:	2300      	movs	r3, #0
 80108a4:	220a      	movs	r2, #10
 80108a6:	4648      	mov	r0, r9
 80108a8:	f000 faf0 	bl	8010e8c <__multadd>
 80108ac:	f1bb 0f00 	cmp.w	fp, #0
 80108b0:	4605      	mov	r5, r0
 80108b2:	dc6f      	bgt.n	8010994 <_dtoa_r+0x96c>
 80108b4:	9b07      	ldr	r3, [sp, #28]
 80108b6:	2b02      	cmp	r3, #2
 80108b8:	dc49      	bgt.n	801094e <_dtoa_r+0x926>
 80108ba:	e06b      	b.n	8010994 <_dtoa_r+0x96c>
 80108bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80108be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80108c2:	e73c      	b.n	801073e <_dtoa_r+0x716>
 80108c4:	3fe00000 	.word	0x3fe00000
 80108c8:	40240000 	.word	0x40240000
 80108cc:	9b03      	ldr	r3, [sp, #12]
 80108ce:	1e5c      	subs	r4, r3, #1
 80108d0:	9b08      	ldr	r3, [sp, #32]
 80108d2:	42a3      	cmp	r3, r4
 80108d4:	db09      	blt.n	80108ea <_dtoa_r+0x8c2>
 80108d6:	1b1c      	subs	r4, r3, r4
 80108d8:	9b03      	ldr	r3, [sp, #12]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	f6bf af30 	bge.w	8010740 <_dtoa_r+0x718>
 80108e0:	9b00      	ldr	r3, [sp, #0]
 80108e2:	9a03      	ldr	r2, [sp, #12]
 80108e4:	1a9e      	subs	r6, r3, r2
 80108e6:	2300      	movs	r3, #0
 80108e8:	e72b      	b.n	8010742 <_dtoa_r+0x71a>
 80108ea:	9b08      	ldr	r3, [sp, #32]
 80108ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80108ee:	9408      	str	r4, [sp, #32]
 80108f0:	1ae3      	subs	r3, r4, r3
 80108f2:	441a      	add	r2, r3
 80108f4:	9e00      	ldr	r6, [sp, #0]
 80108f6:	9b03      	ldr	r3, [sp, #12]
 80108f8:	920d      	str	r2, [sp, #52]	@ 0x34
 80108fa:	2400      	movs	r4, #0
 80108fc:	e721      	b.n	8010742 <_dtoa_r+0x71a>
 80108fe:	9c08      	ldr	r4, [sp, #32]
 8010900:	9e00      	ldr	r6, [sp, #0]
 8010902:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8010904:	e728      	b.n	8010758 <_dtoa_r+0x730>
 8010906:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801090a:	e751      	b.n	80107b0 <_dtoa_r+0x788>
 801090c:	9a08      	ldr	r2, [sp, #32]
 801090e:	9902      	ldr	r1, [sp, #8]
 8010910:	e750      	b.n	80107b4 <_dtoa_r+0x78c>
 8010912:	f8cd 8008 	str.w	r8, [sp, #8]
 8010916:	e751      	b.n	80107bc <_dtoa_r+0x794>
 8010918:	2300      	movs	r3, #0
 801091a:	e779      	b.n	8010810 <_dtoa_r+0x7e8>
 801091c:	9b04      	ldr	r3, [sp, #16]
 801091e:	e777      	b.n	8010810 <_dtoa_r+0x7e8>
 8010920:	2300      	movs	r3, #0
 8010922:	9308      	str	r3, [sp, #32]
 8010924:	e779      	b.n	801081a <_dtoa_r+0x7f2>
 8010926:	d093      	beq.n	8010850 <_dtoa_r+0x828>
 8010928:	9a00      	ldr	r2, [sp, #0]
 801092a:	331c      	adds	r3, #28
 801092c:	441a      	add	r2, r3
 801092e:	9200      	str	r2, [sp, #0]
 8010930:	9a06      	ldr	r2, [sp, #24]
 8010932:	441a      	add	r2, r3
 8010934:	441e      	add	r6, r3
 8010936:	9206      	str	r2, [sp, #24]
 8010938:	e78a      	b.n	8010850 <_dtoa_r+0x828>
 801093a:	4603      	mov	r3, r0
 801093c:	e7f4      	b.n	8010928 <_dtoa_r+0x900>
 801093e:	9b03      	ldr	r3, [sp, #12]
 8010940:	2b00      	cmp	r3, #0
 8010942:	46b8      	mov	r8, r7
 8010944:	dc20      	bgt.n	8010988 <_dtoa_r+0x960>
 8010946:	469b      	mov	fp, r3
 8010948:	9b07      	ldr	r3, [sp, #28]
 801094a:	2b02      	cmp	r3, #2
 801094c:	dd1e      	ble.n	801098c <_dtoa_r+0x964>
 801094e:	f1bb 0f00 	cmp.w	fp, #0
 8010952:	f47f adb1 	bne.w	80104b8 <_dtoa_r+0x490>
 8010956:	4621      	mov	r1, r4
 8010958:	465b      	mov	r3, fp
 801095a:	2205      	movs	r2, #5
 801095c:	4648      	mov	r0, r9
 801095e:	f000 fa95 	bl	8010e8c <__multadd>
 8010962:	4601      	mov	r1, r0
 8010964:	4604      	mov	r4, r0
 8010966:	9802      	ldr	r0, [sp, #8]
 8010968:	f000 fca0 	bl	80112ac <__mcmp>
 801096c:	2800      	cmp	r0, #0
 801096e:	f77f ada3 	ble.w	80104b8 <_dtoa_r+0x490>
 8010972:	4656      	mov	r6, sl
 8010974:	2331      	movs	r3, #49	@ 0x31
 8010976:	f806 3b01 	strb.w	r3, [r6], #1
 801097a:	f108 0801 	add.w	r8, r8, #1
 801097e:	e59f      	b.n	80104c0 <_dtoa_r+0x498>
 8010980:	9c03      	ldr	r4, [sp, #12]
 8010982:	46b8      	mov	r8, r7
 8010984:	4625      	mov	r5, r4
 8010986:	e7f4      	b.n	8010972 <_dtoa_r+0x94a>
 8010988:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801098c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801098e:	2b00      	cmp	r3, #0
 8010990:	f000 8101 	beq.w	8010b96 <_dtoa_r+0xb6e>
 8010994:	2e00      	cmp	r6, #0
 8010996:	dd05      	ble.n	80109a4 <_dtoa_r+0x97c>
 8010998:	4629      	mov	r1, r5
 801099a:	4632      	mov	r2, r6
 801099c:	4648      	mov	r0, r9
 801099e:	f000 fc19 	bl	80111d4 <__lshift>
 80109a2:	4605      	mov	r5, r0
 80109a4:	9b08      	ldr	r3, [sp, #32]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d05c      	beq.n	8010a64 <_dtoa_r+0xa3c>
 80109aa:	6869      	ldr	r1, [r5, #4]
 80109ac:	4648      	mov	r0, r9
 80109ae:	f000 fa0b 	bl	8010dc8 <_Balloc>
 80109b2:	4606      	mov	r6, r0
 80109b4:	b928      	cbnz	r0, 80109c2 <_dtoa_r+0x99a>
 80109b6:	4b82      	ldr	r3, [pc, #520]	@ (8010bc0 <_dtoa_r+0xb98>)
 80109b8:	4602      	mov	r2, r0
 80109ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80109be:	f7ff bb4a 	b.w	8010056 <_dtoa_r+0x2e>
 80109c2:	692a      	ldr	r2, [r5, #16]
 80109c4:	3202      	adds	r2, #2
 80109c6:	0092      	lsls	r2, r2, #2
 80109c8:	f105 010c 	add.w	r1, r5, #12
 80109cc:	300c      	adds	r0, #12
 80109ce:	f7ff fa92 	bl	800fef6 <memcpy>
 80109d2:	2201      	movs	r2, #1
 80109d4:	4631      	mov	r1, r6
 80109d6:	4648      	mov	r0, r9
 80109d8:	f000 fbfc 	bl	80111d4 <__lshift>
 80109dc:	f10a 0301 	add.w	r3, sl, #1
 80109e0:	9300      	str	r3, [sp, #0]
 80109e2:	eb0a 030b 	add.w	r3, sl, fp
 80109e6:	9308      	str	r3, [sp, #32]
 80109e8:	9b04      	ldr	r3, [sp, #16]
 80109ea:	f003 0301 	and.w	r3, r3, #1
 80109ee:	462f      	mov	r7, r5
 80109f0:	9306      	str	r3, [sp, #24]
 80109f2:	4605      	mov	r5, r0
 80109f4:	9b00      	ldr	r3, [sp, #0]
 80109f6:	9802      	ldr	r0, [sp, #8]
 80109f8:	4621      	mov	r1, r4
 80109fa:	f103 3bff 	add.w	fp, r3, #4294967295
 80109fe:	f7ff fa88 	bl	800ff12 <quorem>
 8010a02:	4603      	mov	r3, r0
 8010a04:	3330      	adds	r3, #48	@ 0x30
 8010a06:	9003      	str	r0, [sp, #12]
 8010a08:	4639      	mov	r1, r7
 8010a0a:	9802      	ldr	r0, [sp, #8]
 8010a0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a0e:	f000 fc4d 	bl	80112ac <__mcmp>
 8010a12:	462a      	mov	r2, r5
 8010a14:	9004      	str	r0, [sp, #16]
 8010a16:	4621      	mov	r1, r4
 8010a18:	4648      	mov	r0, r9
 8010a1a:	f000 fc63 	bl	80112e4 <__mdiff>
 8010a1e:	68c2      	ldr	r2, [r0, #12]
 8010a20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a22:	4606      	mov	r6, r0
 8010a24:	bb02      	cbnz	r2, 8010a68 <_dtoa_r+0xa40>
 8010a26:	4601      	mov	r1, r0
 8010a28:	9802      	ldr	r0, [sp, #8]
 8010a2a:	f000 fc3f 	bl	80112ac <__mcmp>
 8010a2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a30:	4602      	mov	r2, r0
 8010a32:	4631      	mov	r1, r6
 8010a34:	4648      	mov	r0, r9
 8010a36:	920c      	str	r2, [sp, #48]	@ 0x30
 8010a38:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a3a:	f000 fa05 	bl	8010e48 <_Bfree>
 8010a3e:	9b07      	ldr	r3, [sp, #28]
 8010a40:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010a42:	9e00      	ldr	r6, [sp, #0]
 8010a44:	ea42 0103 	orr.w	r1, r2, r3
 8010a48:	9b06      	ldr	r3, [sp, #24]
 8010a4a:	4319      	orrs	r1, r3
 8010a4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a4e:	d10d      	bne.n	8010a6c <_dtoa_r+0xa44>
 8010a50:	2b39      	cmp	r3, #57	@ 0x39
 8010a52:	d027      	beq.n	8010aa4 <_dtoa_r+0xa7c>
 8010a54:	9a04      	ldr	r2, [sp, #16]
 8010a56:	2a00      	cmp	r2, #0
 8010a58:	dd01      	ble.n	8010a5e <_dtoa_r+0xa36>
 8010a5a:	9b03      	ldr	r3, [sp, #12]
 8010a5c:	3331      	adds	r3, #49	@ 0x31
 8010a5e:	f88b 3000 	strb.w	r3, [fp]
 8010a62:	e52e      	b.n	80104c2 <_dtoa_r+0x49a>
 8010a64:	4628      	mov	r0, r5
 8010a66:	e7b9      	b.n	80109dc <_dtoa_r+0x9b4>
 8010a68:	2201      	movs	r2, #1
 8010a6a:	e7e2      	b.n	8010a32 <_dtoa_r+0xa0a>
 8010a6c:	9904      	ldr	r1, [sp, #16]
 8010a6e:	2900      	cmp	r1, #0
 8010a70:	db04      	blt.n	8010a7c <_dtoa_r+0xa54>
 8010a72:	9807      	ldr	r0, [sp, #28]
 8010a74:	4301      	orrs	r1, r0
 8010a76:	9806      	ldr	r0, [sp, #24]
 8010a78:	4301      	orrs	r1, r0
 8010a7a:	d120      	bne.n	8010abe <_dtoa_r+0xa96>
 8010a7c:	2a00      	cmp	r2, #0
 8010a7e:	ddee      	ble.n	8010a5e <_dtoa_r+0xa36>
 8010a80:	9902      	ldr	r1, [sp, #8]
 8010a82:	9300      	str	r3, [sp, #0]
 8010a84:	2201      	movs	r2, #1
 8010a86:	4648      	mov	r0, r9
 8010a88:	f000 fba4 	bl	80111d4 <__lshift>
 8010a8c:	4621      	mov	r1, r4
 8010a8e:	9002      	str	r0, [sp, #8]
 8010a90:	f000 fc0c 	bl	80112ac <__mcmp>
 8010a94:	2800      	cmp	r0, #0
 8010a96:	9b00      	ldr	r3, [sp, #0]
 8010a98:	dc02      	bgt.n	8010aa0 <_dtoa_r+0xa78>
 8010a9a:	d1e0      	bne.n	8010a5e <_dtoa_r+0xa36>
 8010a9c:	07da      	lsls	r2, r3, #31
 8010a9e:	d5de      	bpl.n	8010a5e <_dtoa_r+0xa36>
 8010aa0:	2b39      	cmp	r3, #57	@ 0x39
 8010aa2:	d1da      	bne.n	8010a5a <_dtoa_r+0xa32>
 8010aa4:	2339      	movs	r3, #57	@ 0x39
 8010aa6:	f88b 3000 	strb.w	r3, [fp]
 8010aaa:	4633      	mov	r3, r6
 8010aac:	461e      	mov	r6, r3
 8010aae:	3b01      	subs	r3, #1
 8010ab0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010ab4:	2a39      	cmp	r2, #57	@ 0x39
 8010ab6:	d04e      	beq.n	8010b56 <_dtoa_r+0xb2e>
 8010ab8:	3201      	adds	r2, #1
 8010aba:	701a      	strb	r2, [r3, #0]
 8010abc:	e501      	b.n	80104c2 <_dtoa_r+0x49a>
 8010abe:	2a00      	cmp	r2, #0
 8010ac0:	dd03      	ble.n	8010aca <_dtoa_r+0xaa2>
 8010ac2:	2b39      	cmp	r3, #57	@ 0x39
 8010ac4:	d0ee      	beq.n	8010aa4 <_dtoa_r+0xa7c>
 8010ac6:	3301      	adds	r3, #1
 8010ac8:	e7c9      	b.n	8010a5e <_dtoa_r+0xa36>
 8010aca:	9a00      	ldr	r2, [sp, #0]
 8010acc:	9908      	ldr	r1, [sp, #32]
 8010ace:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010ad2:	428a      	cmp	r2, r1
 8010ad4:	d028      	beq.n	8010b28 <_dtoa_r+0xb00>
 8010ad6:	9902      	ldr	r1, [sp, #8]
 8010ad8:	2300      	movs	r3, #0
 8010ada:	220a      	movs	r2, #10
 8010adc:	4648      	mov	r0, r9
 8010ade:	f000 f9d5 	bl	8010e8c <__multadd>
 8010ae2:	42af      	cmp	r7, r5
 8010ae4:	9002      	str	r0, [sp, #8]
 8010ae6:	f04f 0300 	mov.w	r3, #0
 8010aea:	f04f 020a 	mov.w	r2, #10
 8010aee:	4639      	mov	r1, r7
 8010af0:	4648      	mov	r0, r9
 8010af2:	d107      	bne.n	8010b04 <_dtoa_r+0xadc>
 8010af4:	f000 f9ca 	bl	8010e8c <__multadd>
 8010af8:	4607      	mov	r7, r0
 8010afa:	4605      	mov	r5, r0
 8010afc:	9b00      	ldr	r3, [sp, #0]
 8010afe:	3301      	adds	r3, #1
 8010b00:	9300      	str	r3, [sp, #0]
 8010b02:	e777      	b.n	80109f4 <_dtoa_r+0x9cc>
 8010b04:	f000 f9c2 	bl	8010e8c <__multadd>
 8010b08:	4629      	mov	r1, r5
 8010b0a:	4607      	mov	r7, r0
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	220a      	movs	r2, #10
 8010b10:	4648      	mov	r0, r9
 8010b12:	f000 f9bb 	bl	8010e8c <__multadd>
 8010b16:	4605      	mov	r5, r0
 8010b18:	e7f0      	b.n	8010afc <_dtoa_r+0xad4>
 8010b1a:	f1bb 0f00 	cmp.w	fp, #0
 8010b1e:	bfcc      	ite	gt
 8010b20:	465e      	movgt	r6, fp
 8010b22:	2601      	movle	r6, #1
 8010b24:	4456      	add	r6, sl
 8010b26:	2700      	movs	r7, #0
 8010b28:	9902      	ldr	r1, [sp, #8]
 8010b2a:	9300      	str	r3, [sp, #0]
 8010b2c:	2201      	movs	r2, #1
 8010b2e:	4648      	mov	r0, r9
 8010b30:	f000 fb50 	bl	80111d4 <__lshift>
 8010b34:	4621      	mov	r1, r4
 8010b36:	9002      	str	r0, [sp, #8]
 8010b38:	f000 fbb8 	bl	80112ac <__mcmp>
 8010b3c:	2800      	cmp	r0, #0
 8010b3e:	dcb4      	bgt.n	8010aaa <_dtoa_r+0xa82>
 8010b40:	d102      	bne.n	8010b48 <_dtoa_r+0xb20>
 8010b42:	9b00      	ldr	r3, [sp, #0]
 8010b44:	07db      	lsls	r3, r3, #31
 8010b46:	d4b0      	bmi.n	8010aaa <_dtoa_r+0xa82>
 8010b48:	4633      	mov	r3, r6
 8010b4a:	461e      	mov	r6, r3
 8010b4c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010b50:	2a30      	cmp	r2, #48	@ 0x30
 8010b52:	d0fa      	beq.n	8010b4a <_dtoa_r+0xb22>
 8010b54:	e4b5      	b.n	80104c2 <_dtoa_r+0x49a>
 8010b56:	459a      	cmp	sl, r3
 8010b58:	d1a8      	bne.n	8010aac <_dtoa_r+0xa84>
 8010b5a:	2331      	movs	r3, #49	@ 0x31
 8010b5c:	f108 0801 	add.w	r8, r8, #1
 8010b60:	f88a 3000 	strb.w	r3, [sl]
 8010b64:	e4ad      	b.n	80104c2 <_dtoa_r+0x49a>
 8010b66:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010b68:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8010bc4 <_dtoa_r+0xb9c>
 8010b6c:	b11b      	cbz	r3, 8010b76 <_dtoa_r+0xb4e>
 8010b6e:	f10a 0308 	add.w	r3, sl, #8
 8010b72:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010b74:	6013      	str	r3, [r2, #0]
 8010b76:	4650      	mov	r0, sl
 8010b78:	b017      	add	sp, #92	@ 0x5c
 8010b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b7e:	9b07      	ldr	r3, [sp, #28]
 8010b80:	2b01      	cmp	r3, #1
 8010b82:	f77f ae2e 	ble.w	80107e2 <_dtoa_r+0x7ba>
 8010b86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010b88:	9308      	str	r3, [sp, #32]
 8010b8a:	2001      	movs	r0, #1
 8010b8c:	e64d      	b.n	801082a <_dtoa_r+0x802>
 8010b8e:	f1bb 0f00 	cmp.w	fp, #0
 8010b92:	f77f aed9 	ble.w	8010948 <_dtoa_r+0x920>
 8010b96:	4656      	mov	r6, sl
 8010b98:	9802      	ldr	r0, [sp, #8]
 8010b9a:	4621      	mov	r1, r4
 8010b9c:	f7ff f9b9 	bl	800ff12 <quorem>
 8010ba0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8010ba4:	f806 3b01 	strb.w	r3, [r6], #1
 8010ba8:	eba6 020a 	sub.w	r2, r6, sl
 8010bac:	4593      	cmp	fp, r2
 8010bae:	ddb4      	ble.n	8010b1a <_dtoa_r+0xaf2>
 8010bb0:	9902      	ldr	r1, [sp, #8]
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	220a      	movs	r2, #10
 8010bb6:	4648      	mov	r0, r9
 8010bb8:	f000 f968 	bl	8010e8c <__multadd>
 8010bbc:	9002      	str	r0, [sp, #8]
 8010bbe:	e7eb      	b.n	8010b98 <_dtoa_r+0xb70>
 8010bc0:	08012a75 	.word	0x08012a75
 8010bc4:	080129f9 	.word	0x080129f9

08010bc8 <_free_r>:
 8010bc8:	b538      	push	{r3, r4, r5, lr}
 8010bca:	4605      	mov	r5, r0
 8010bcc:	2900      	cmp	r1, #0
 8010bce:	d041      	beq.n	8010c54 <_free_r+0x8c>
 8010bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010bd4:	1f0c      	subs	r4, r1, #4
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	bfb8      	it	lt
 8010bda:	18e4      	addlt	r4, r4, r3
 8010bdc:	f000 f8e8 	bl	8010db0 <__malloc_lock>
 8010be0:	4a1d      	ldr	r2, [pc, #116]	@ (8010c58 <_free_r+0x90>)
 8010be2:	6813      	ldr	r3, [r2, #0]
 8010be4:	b933      	cbnz	r3, 8010bf4 <_free_r+0x2c>
 8010be6:	6063      	str	r3, [r4, #4]
 8010be8:	6014      	str	r4, [r2, #0]
 8010bea:	4628      	mov	r0, r5
 8010bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010bf0:	f000 b8e4 	b.w	8010dbc <__malloc_unlock>
 8010bf4:	42a3      	cmp	r3, r4
 8010bf6:	d908      	bls.n	8010c0a <_free_r+0x42>
 8010bf8:	6820      	ldr	r0, [r4, #0]
 8010bfa:	1821      	adds	r1, r4, r0
 8010bfc:	428b      	cmp	r3, r1
 8010bfe:	bf01      	itttt	eq
 8010c00:	6819      	ldreq	r1, [r3, #0]
 8010c02:	685b      	ldreq	r3, [r3, #4]
 8010c04:	1809      	addeq	r1, r1, r0
 8010c06:	6021      	streq	r1, [r4, #0]
 8010c08:	e7ed      	b.n	8010be6 <_free_r+0x1e>
 8010c0a:	461a      	mov	r2, r3
 8010c0c:	685b      	ldr	r3, [r3, #4]
 8010c0e:	b10b      	cbz	r3, 8010c14 <_free_r+0x4c>
 8010c10:	42a3      	cmp	r3, r4
 8010c12:	d9fa      	bls.n	8010c0a <_free_r+0x42>
 8010c14:	6811      	ldr	r1, [r2, #0]
 8010c16:	1850      	adds	r0, r2, r1
 8010c18:	42a0      	cmp	r0, r4
 8010c1a:	d10b      	bne.n	8010c34 <_free_r+0x6c>
 8010c1c:	6820      	ldr	r0, [r4, #0]
 8010c1e:	4401      	add	r1, r0
 8010c20:	1850      	adds	r0, r2, r1
 8010c22:	4283      	cmp	r3, r0
 8010c24:	6011      	str	r1, [r2, #0]
 8010c26:	d1e0      	bne.n	8010bea <_free_r+0x22>
 8010c28:	6818      	ldr	r0, [r3, #0]
 8010c2a:	685b      	ldr	r3, [r3, #4]
 8010c2c:	6053      	str	r3, [r2, #4]
 8010c2e:	4408      	add	r0, r1
 8010c30:	6010      	str	r0, [r2, #0]
 8010c32:	e7da      	b.n	8010bea <_free_r+0x22>
 8010c34:	d902      	bls.n	8010c3c <_free_r+0x74>
 8010c36:	230c      	movs	r3, #12
 8010c38:	602b      	str	r3, [r5, #0]
 8010c3a:	e7d6      	b.n	8010bea <_free_r+0x22>
 8010c3c:	6820      	ldr	r0, [r4, #0]
 8010c3e:	1821      	adds	r1, r4, r0
 8010c40:	428b      	cmp	r3, r1
 8010c42:	bf04      	itt	eq
 8010c44:	6819      	ldreq	r1, [r3, #0]
 8010c46:	685b      	ldreq	r3, [r3, #4]
 8010c48:	6063      	str	r3, [r4, #4]
 8010c4a:	bf04      	itt	eq
 8010c4c:	1809      	addeq	r1, r1, r0
 8010c4e:	6021      	streq	r1, [r4, #0]
 8010c50:	6054      	str	r4, [r2, #4]
 8010c52:	e7ca      	b.n	8010bea <_free_r+0x22>
 8010c54:	bd38      	pop	{r3, r4, r5, pc}
 8010c56:	bf00      	nop
 8010c58:	2000656c 	.word	0x2000656c

08010c5c <malloc>:
 8010c5c:	4b02      	ldr	r3, [pc, #8]	@ (8010c68 <malloc+0xc>)
 8010c5e:	4601      	mov	r1, r0
 8010c60:	6818      	ldr	r0, [r3, #0]
 8010c62:	f000 b825 	b.w	8010cb0 <_malloc_r>
 8010c66:	bf00      	nop
 8010c68:	2000019c 	.word	0x2000019c

08010c6c <sbrk_aligned>:
 8010c6c:	b570      	push	{r4, r5, r6, lr}
 8010c6e:	4e0f      	ldr	r6, [pc, #60]	@ (8010cac <sbrk_aligned+0x40>)
 8010c70:	460c      	mov	r4, r1
 8010c72:	6831      	ldr	r1, [r6, #0]
 8010c74:	4605      	mov	r5, r0
 8010c76:	b911      	cbnz	r1, 8010c7e <sbrk_aligned+0x12>
 8010c78:	f000 fe3e 	bl	80118f8 <_sbrk_r>
 8010c7c:	6030      	str	r0, [r6, #0]
 8010c7e:	4621      	mov	r1, r4
 8010c80:	4628      	mov	r0, r5
 8010c82:	f000 fe39 	bl	80118f8 <_sbrk_r>
 8010c86:	1c43      	adds	r3, r0, #1
 8010c88:	d103      	bne.n	8010c92 <sbrk_aligned+0x26>
 8010c8a:	f04f 34ff 	mov.w	r4, #4294967295
 8010c8e:	4620      	mov	r0, r4
 8010c90:	bd70      	pop	{r4, r5, r6, pc}
 8010c92:	1cc4      	adds	r4, r0, #3
 8010c94:	f024 0403 	bic.w	r4, r4, #3
 8010c98:	42a0      	cmp	r0, r4
 8010c9a:	d0f8      	beq.n	8010c8e <sbrk_aligned+0x22>
 8010c9c:	1a21      	subs	r1, r4, r0
 8010c9e:	4628      	mov	r0, r5
 8010ca0:	f000 fe2a 	bl	80118f8 <_sbrk_r>
 8010ca4:	3001      	adds	r0, #1
 8010ca6:	d1f2      	bne.n	8010c8e <sbrk_aligned+0x22>
 8010ca8:	e7ef      	b.n	8010c8a <sbrk_aligned+0x1e>
 8010caa:	bf00      	nop
 8010cac:	20006568 	.word	0x20006568

08010cb0 <_malloc_r>:
 8010cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010cb4:	1ccd      	adds	r5, r1, #3
 8010cb6:	f025 0503 	bic.w	r5, r5, #3
 8010cba:	3508      	adds	r5, #8
 8010cbc:	2d0c      	cmp	r5, #12
 8010cbe:	bf38      	it	cc
 8010cc0:	250c      	movcc	r5, #12
 8010cc2:	2d00      	cmp	r5, #0
 8010cc4:	4606      	mov	r6, r0
 8010cc6:	db01      	blt.n	8010ccc <_malloc_r+0x1c>
 8010cc8:	42a9      	cmp	r1, r5
 8010cca:	d904      	bls.n	8010cd6 <_malloc_r+0x26>
 8010ccc:	230c      	movs	r3, #12
 8010cce:	6033      	str	r3, [r6, #0]
 8010cd0:	2000      	movs	r0, #0
 8010cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010cd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010dac <_malloc_r+0xfc>
 8010cda:	f000 f869 	bl	8010db0 <__malloc_lock>
 8010cde:	f8d8 3000 	ldr.w	r3, [r8]
 8010ce2:	461c      	mov	r4, r3
 8010ce4:	bb44      	cbnz	r4, 8010d38 <_malloc_r+0x88>
 8010ce6:	4629      	mov	r1, r5
 8010ce8:	4630      	mov	r0, r6
 8010cea:	f7ff ffbf 	bl	8010c6c <sbrk_aligned>
 8010cee:	1c43      	adds	r3, r0, #1
 8010cf0:	4604      	mov	r4, r0
 8010cf2:	d158      	bne.n	8010da6 <_malloc_r+0xf6>
 8010cf4:	f8d8 4000 	ldr.w	r4, [r8]
 8010cf8:	4627      	mov	r7, r4
 8010cfa:	2f00      	cmp	r7, #0
 8010cfc:	d143      	bne.n	8010d86 <_malloc_r+0xd6>
 8010cfe:	2c00      	cmp	r4, #0
 8010d00:	d04b      	beq.n	8010d9a <_malloc_r+0xea>
 8010d02:	6823      	ldr	r3, [r4, #0]
 8010d04:	4639      	mov	r1, r7
 8010d06:	4630      	mov	r0, r6
 8010d08:	eb04 0903 	add.w	r9, r4, r3
 8010d0c:	f000 fdf4 	bl	80118f8 <_sbrk_r>
 8010d10:	4581      	cmp	r9, r0
 8010d12:	d142      	bne.n	8010d9a <_malloc_r+0xea>
 8010d14:	6821      	ldr	r1, [r4, #0]
 8010d16:	1a6d      	subs	r5, r5, r1
 8010d18:	4629      	mov	r1, r5
 8010d1a:	4630      	mov	r0, r6
 8010d1c:	f7ff ffa6 	bl	8010c6c <sbrk_aligned>
 8010d20:	3001      	adds	r0, #1
 8010d22:	d03a      	beq.n	8010d9a <_malloc_r+0xea>
 8010d24:	6823      	ldr	r3, [r4, #0]
 8010d26:	442b      	add	r3, r5
 8010d28:	6023      	str	r3, [r4, #0]
 8010d2a:	f8d8 3000 	ldr.w	r3, [r8]
 8010d2e:	685a      	ldr	r2, [r3, #4]
 8010d30:	bb62      	cbnz	r2, 8010d8c <_malloc_r+0xdc>
 8010d32:	f8c8 7000 	str.w	r7, [r8]
 8010d36:	e00f      	b.n	8010d58 <_malloc_r+0xa8>
 8010d38:	6822      	ldr	r2, [r4, #0]
 8010d3a:	1b52      	subs	r2, r2, r5
 8010d3c:	d420      	bmi.n	8010d80 <_malloc_r+0xd0>
 8010d3e:	2a0b      	cmp	r2, #11
 8010d40:	d917      	bls.n	8010d72 <_malloc_r+0xc2>
 8010d42:	1961      	adds	r1, r4, r5
 8010d44:	42a3      	cmp	r3, r4
 8010d46:	6025      	str	r5, [r4, #0]
 8010d48:	bf18      	it	ne
 8010d4a:	6059      	strne	r1, [r3, #4]
 8010d4c:	6863      	ldr	r3, [r4, #4]
 8010d4e:	bf08      	it	eq
 8010d50:	f8c8 1000 	streq.w	r1, [r8]
 8010d54:	5162      	str	r2, [r4, r5]
 8010d56:	604b      	str	r3, [r1, #4]
 8010d58:	4630      	mov	r0, r6
 8010d5a:	f000 f82f 	bl	8010dbc <__malloc_unlock>
 8010d5e:	f104 000b 	add.w	r0, r4, #11
 8010d62:	1d23      	adds	r3, r4, #4
 8010d64:	f020 0007 	bic.w	r0, r0, #7
 8010d68:	1ac2      	subs	r2, r0, r3
 8010d6a:	bf1c      	itt	ne
 8010d6c:	1a1b      	subne	r3, r3, r0
 8010d6e:	50a3      	strne	r3, [r4, r2]
 8010d70:	e7af      	b.n	8010cd2 <_malloc_r+0x22>
 8010d72:	6862      	ldr	r2, [r4, #4]
 8010d74:	42a3      	cmp	r3, r4
 8010d76:	bf0c      	ite	eq
 8010d78:	f8c8 2000 	streq.w	r2, [r8]
 8010d7c:	605a      	strne	r2, [r3, #4]
 8010d7e:	e7eb      	b.n	8010d58 <_malloc_r+0xa8>
 8010d80:	4623      	mov	r3, r4
 8010d82:	6864      	ldr	r4, [r4, #4]
 8010d84:	e7ae      	b.n	8010ce4 <_malloc_r+0x34>
 8010d86:	463c      	mov	r4, r7
 8010d88:	687f      	ldr	r7, [r7, #4]
 8010d8a:	e7b6      	b.n	8010cfa <_malloc_r+0x4a>
 8010d8c:	461a      	mov	r2, r3
 8010d8e:	685b      	ldr	r3, [r3, #4]
 8010d90:	42a3      	cmp	r3, r4
 8010d92:	d1fb      	bne.n	8010d8c <_malloc_r+0xdc>
 8010d94:	2300      	movs	r3, #0
 8010d96:	6053      	str	r3, [r2, #4]
 8010d98:	e7de      	b.n	8010d58 <_malloc_r+0xa8>
 8010d9a:	230c      	movs	r3, #12
 8010d9c:	6033      	str	r3, [r6, #0]
 8010d9e:	4630      	mov	r0, r6
 8010da0:	f000 f80c 	bl	8010dbc <__malloc_unlock>
 8010da4:	e794      	b.n	8010cd0 <_malloc_r+0x20>
 8010da6:	6005      	str	r5, [r0, #0]
 8010da8:	e7d6      	b.n	8010d58 <_malloc_r+0xa8>
 8010daa:	bf00      	nop
 8010dac:	2000656c 	.word	0x2000656c

08010db0 <__malloc_lock>:
 8010db0:	4801      	ldr	r0, [pc, #4]	@ (8010db8 <__malloc_lock+0x8>)
 8010db2:	f7ff b89e 	b.w	800fef2 <__retarget_lock_acquire_recursive>
 8010db6:	bf00      	nop
 8010db8:	20006564 	.word	0x20006564

08010dbc <__malloc_unlock>:
 8010dbc:	4801      	ldr	r0, [pc, #4]	@ (8010dc4 <__malloc_unlock+0x8>)
 8010dbe:	f7ff b899 	b.w	800fef4 <__retarget_lock_release_recursive>
 8010dc2:	bf00      	nop
 8010dc4:	20006564 	.word	0x20006564

08010dc8 <_Balloc>:
 8010dc8:	b570      	push	{r4, r5, r6, lr}
 8010dca:	69c6      	ldr	r6, [r0, #28]
 8010dcc:	4604      	mov	r4, r0
 8010dce:	460d      	mov	r5, r1
 8010dd0:	b976      	cbnz	r6, 8010df0 <_Balloc+0x28>
 8010dd2:	2010      	movs	r0, #16
 8010dd4:	f7ff ff42 	bl	8010c5c <malloc>
 8010dd8:	4602      	mov	r2, r0
 8010dda:	61e0      	str	r0, [r4, #28]
 8010ddc:	b920      	cbnz	r0, 8010de8 <_Balloc+0x20>
 8010dde:	4b18      	ldr	r3, [pc, #96]	@ (8010e40 <_Balloc+0x78>)
 8010de0:	4818      	ldr	r0, [pc, #96]	@ (8010e44 <_Balloc+0x7c>)
 8010de2:	216b      	movs	r1, #107	@ 0x6b
 8010de4:	f000 fd98 	bl	8011918 <__assert_func>
 8010de8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010dec:	6006      	str	r6, [r0, #0]
 8010dee:	60c6      	str	r6, [r0, #12]
 8010df0:	69e6      	ldr	r6, [r4, #28]
 8010df2:	68f3      	ldr	r3, [r6, #12]
 8010df4:	b183      	cbz	r3, 8010e18 <_Balloc+0x50>
 8010df6:	69e3      	ldr	r3, [r4, #28]
 8010df8:	68db      	ldr	r3, [r3, #12]
 8010dfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010dfe:	b9b8      	cbnz	r0, 8010e30 <_Balloc+0x68>
 8010e00:	2101      	movs	r1, #1
 8010e02:	fa01 f605 	lsl.w	r6, r1, r5
 8010e06:	1d72      	adds	r2, r6, #5
 8010e08:	0092      	lsls	r2, r2, #2
 8010e0a:	4620      	mov	r0, r4
 8010e0c:	f000 fda2 	bl	8011954 <_calloc_r>
 8010e10:	b160      	cbz	r0, 8010e2c <_Balloc+0x64>
 8010e12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010e16:	e00e      	b.n	8010e36 <_Balloc+0x6e>
 8010e18:	2221      	movs	r2, #33	@ 0x21
 8010e1a:	2104      	movs	r1, #4
 8010e1c:	4620      	mov	r0, r4
 8010e1e:	f000 fd99 	bl	8011954 <_calloc_r>
 8010e22:	69e3      	ldr	r3, [r4, #28]
 8010e24:	60f0      	str	r0, [r6, #12]
 8010e26:	68db      	ldr	r3, [r3, #12]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d1e4      	bne.n	8010df6 <_Balloc+0x2e>
 8010e2c:	2000      	movs	r0, #0
 8010e2e:	bd70      	pop	{r4, r5, r6, pc}
 8010e30:	6802      	ldr	r2, [r0, #0]
 8010e32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010e36:	2300      	movs	r3, #0
 8010e38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010e3c:	e7f7      	b.n	8010e2e <_Balloc+0x66>
 8010e3e:	bf00      	nop
 8010e40:	08012a06 	.word	0x08012a06
 8010e44:	08012a86 	.word	0x08012a86

08010e48 <_Bfree>:
 8010e48:	b570      	push	{r4, r5, r6, lr}
 8010e4a:	69c6      	ldr	r6, [r0, #28]
 8010e4c:	4605      	mov	r5, r0
 8010e4e:	460c      	mov	r4, r1
 8010e50:	b976      	cbnz	r6, 8010e70 <_Bfree+0x28>
 8010e52:	2010      	movs	r0, #16
 8010e54:	f7ff ff02 	bl	8010c5c <malloc>
 8010e58:	4602      	mov	r2, r0
 8010e5a:	61e8      	str	r0, [r5, #28]
 8010e5c:	b920      	cbnz	r0, 8010e68 <_Bfree+0x20>
 8010e5e:	4b09      	ldr	r3, [pc, #36]	@ (8010e84 <_Bfree+0x3c>)
 8010e60:	4809      	ldr	r0, [pc, #36]	@ (8010e88 <_Bfree+0x40>)
 8010e62:	218f      	movs	r1, #143	@ 0x8f
 8010e64:	f000 fd58 	bl	8011918 <__assert_func>
 8010e68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010e6c:	6006      	str	r6, [r0, #0]
 8010e6e:	60c6      	str	r6, [r0, #12]
 8010e70:	b13c      	cbz	r4, 8010e82 <_Bfree+0x3a>
 8010e72:	69eb      	ldr	r3, [r5, #28]
 8010e74:	6862      	ldr	r2, [r4, #4]
 8010e76:	68db      	ldr	r3, [r3, #12]
 8010e78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010e7c:	6021      	str	r1, [r4, #0]
 8010e7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010e82:	bd70      	pop	{r4, r5, r6, pc}
 8010e84:	08012a06 	.word	0x08012a06
 8010e88:	08012a86 	.word	0x08012a86

08010e8c <__multadd>:
 8010e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e90:	690d      	ldr	r5, [r1, #16]
 8010e92:	4607      	mov	r7, r0
 8010e94:	460c      	mov	r4, r1
 8010e96:	461e      	mov	r6, r3
 8010e98:	f101 0c14 	add.w	ip, r1, #20
 8010e9c:	2000      	movs	r0, #0
 8010e9e:	f8dc 3000 	ldr.w	r3, [ip]
 8010ea2:	b299      	uxth	r1, r3
 8010ea4:	fb02 6101 	mla	r1, r2, r1, r6
 8010ea8:	0c1e      	lsrs	r6, r3, #16
 8010eaa:	0c0b      	lsrs	r3, r1, #16
 8010eac:	fb02 3306 	mla	r3, r2, r6, r3
 8010eb0:	b289      	uxth	r1, r1
 8010eb2:	3001      	adds	r0, #1
 8010eb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010eb8:	4285      	cmp	r5, r0
 8010eba:	f84c 1b04 	str.w	r1, [ip], #4
 8010ebe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010ec2:	dcec      	bgt.n	8010e9e <__multadd+0x12>
 8010ec4:	b30e      	cbz	r6, 8010f0a <__multadd+0x7e>
 8010ec6:	68a3      	ldr	r3, [r4, #8]
 8010ec8:	42ab      	cmp	r3, r5
 8010eca:	dc19      	bgt.n	8010f00 <__multadd+0x74>
 8010ecc:	6861      	ldr	r1, [r4, #4]
 8010ece:	4638      	mov	r0, r7
 8010ed0:	3101      	adds	r1, #1
 8010ed2:	f7ff ff79 	bl	8010dc8 <_Balloc>
 8010ed6:	4680      	mov	r8, r0
 8010ed8:	b928      	cbnz	r0, 8010ee6 <__multadd+0x5a>
 8010eda:	4602      	mov	r2, r0
 8010edc:	4b0c      	ldr	r3, [pc, #48]	@ (8010f10 <__multadd+0x84>)
 8010ede:	480d      	ldr	r0, [pc, #52]	@ (8010f14 <__multadd+0x88>)
 8010ee0:	21ba      	movs	r1, #186	@ 0xba
 8010ee2:	f000 fd19 	bl	8011918 <__assert_func>
 8010ee6:	6922      	ldr	r2, [r4, #16]
 8010ee8:	3202      	adds	r2, #2
 8010eea:	f104 010c 	add.w	r1, r4, #12
 8010eee:	0092      	lsls	r2, r2, #2
 8010ef0:	300c      	adds	r0, #12
 8010ef2:	f7ff f800 	bl	800fef6 <memcpy>
 8010ef6:	4621      	mov	r1, r4
 8010ef8:	4638      	mov	r0, r7
 8010efa:	f7ff ffa5 	bl	8010e48 <_Bfree>
 8010efe:	4644      	mov	r4, r8
 8010f00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010f04:	3501      	adds	r5, #1
 8010f06:	615e      	str	r6, [r3, #20]
 8010f08:	6125      	str	r5, [r4, #16]
 8010f0a:	4620      	mov	r0, r4
 8010f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f10:	08012a75 	.word	0x08012a75
 8010f14:	08012a86 	.word	0x08012a86

08010f18 <__hi0bits>:
 8010f18:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010f1c:	4603      	mov	r3, r0
 8010f1e:	bf36      	itet	cc
 8010f20:	0403      	lslcc	r3, r0, #16
 8010f22:	2000      	movcs	r0, #0
 8010f24:	2010      	movcc	r0, #16
 8010f26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010f2a:	bf3c      	itt	cc
 8010f2c:	021b      	lslcc	r3, r3, #8
 8010f2e:	3008      	addcc	r0, #8
 8010f30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010f34:	bf3c      	itt	cc
 8010f36:	011b      	lslcc	r3, r3, #4
 8010f38:	3004      	addcc	r0, #4
 8010f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010f3e:	bf3c      	itt	cc
 8010f40:	009b      	lslcc	r3, r3, #2
 8010f42:	3002      	addcc	r0, #2
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	db05      	blt.n	8010f54 <__hi0bits+0x3c>
 8010f48:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010f4c:	f100 0001 	add.w	r0, r0, #1
 8010f50:	bf08      	it	eq
 8010f52:	2020      	moveq	r0, #32
 8010f54:	4770      	bx	lr

08010f56 <__lo0bits>:
 8010f56:	6803      	ldr	r3, [r0, #0]
 8010f58:	4602      	mov	r2, r0
 8010f5a:	f013 0007 	ands.w	r0, r3, #7
 8010f5e:	d00b      	beq.n	8010f78 <__lo0bits+0x22>
 8010f60:	07d9      	lsls	r1, r3, #31
 8010f62:	d421      	bmi.n	8010fa8 <__lo0bits+0x52>
 8010f64:	0798      	lsls	r0, r3, #30
 8010f66:	bf49      	itett	mi
 8010f68:	085b      	lsrmi	r3, r3, #1
 8010f6a:	089b      	lsrpl	r3, r3, #2
 8010f6c:	2001      	movmi	r0, #1
 8010f6e:	6013      	strmi	r3, [r2, #0]
 8010f70:	bf5c      	itt	pl
 8010f72:	6013      	strpl	r3, [r2, #0]
 8010f74:	2002      	movpl	r0, #2
 8010f76:	4770      	bx	lr
 8010f78:	b299      	uxth	r1, r3
 8010f7a:	b909      	cbnz	r1, 8010f80 <__lo0bits+0x2a>
 8010f7c:	0c1b      	lsrs	r3, r3, #16
 8010f7e:	2010      	movs	r0, #16
 8010f80:	b2d9      	uxtb	r1, r3
 8010f82:	b909      	cbnz	r1, 8010f88 <__lo0bits+0x32>
 8010f84:	3008      	adds	r0, #8
 8010f86:	0a1b      	lsrs	r3, r3, #8
 8010f88:	0719      	lsls	r1, r3, #28
 8010f8a:	bf04      	itt	eq
 8010f8c:	091b      	lsreq	r3, r3, #4
 8010f8e:	3004      	addeq	r0, #4
 8010f90:	0799      	lsls	r1, r3, #30
 8010f92:	bf04      	itt	eq
 8010f94:	089b      	lsreq	r3, r3, #2
 8010f96:	3002      	addeq	r0, #2
 8010f98:	07d9      	lsls	r1, r3, #31
 8010f9a:	d403      	bmi.n	8010fa4 <__lo0bits+0x4e>
 8010f9c:	085b      	lsrs	r3, r3, #1
 8010f9e:	f100 0001 	add.w	r0, r0, #1
 8010fa2:	d003      	beq.n	8010fac <__lo0bits+0x56>
 8010fa4:	6013      	str	r3, [r2, #0]
 8010fa6:	4770      	bx	lr
 8010fa8:	2000      	movs	r0, #0
 8010faa:	4770      	bx	lr
 8010fac:	2020      	movs	r0, #32
 8010fae:	4770      	bx	lr

08010fb0 <__i2b>:
 8010fb0:	b510      	push	{r4, lr}
 8010fb2:	460c      	mov	r4, r1
 8010fb4:	2101      	movs	r1, #1
 8010fb6:	f7ff ff07 	bl	8010dc8 <_Balloc>
 8010fba:	4602      	mov	r2, r0
 8010fbc:	b928      	cbnz	r0, 8010fca <__i2b+0x1a>
 8010fbe:	4b05      	ldr	r3, [pc, #20]	@ (8010fd4 <__i2b+0x24>)
 8010fc0:	4805      	ldr	r0, [pc, #20]	@ (8010fd8 <__i2b+0x28>)
 8010fc2:	f240 1145 	movw	r1, #325	@ 0x145
 8010fc6:	f000 fca7 	bl	8011918 <__assert_func>
 8010fca:	2301      	movs	r3, #1
 8010fcc:	6144      	str	r4, [r0, #20]
 8010fce:	6103      	str	r3, [r0, #16]
 8010fd0:	bd10      	pop	{r4, pc}
 8010fd2:	bf00      	nop
 8010fd4:	08012a75 	.word	0x08012a75
 8010fd8:	08012a86 	.word	0x08012a86

08010fdc <__multiply>:
 8010fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fe0:	4617      	mov	r7, r2
 8010fe2:	690a      	ldr	r2, [r1, #16]
 8010fe4:	693b      	ldr	r3, [r7, #16]
 8010fe6:	429a      	cmp	r2, r3
 8010fe8:	bfa8      	it	ge
 8010fea:	463b      	movge	r3, r7
 8010fec:	4689      	mov	r9, r1
 8010fee:	bfa4      	itt	ge
 8010ff0:	460f      	movge	r7, r1
 8010ff2:	4699      	movge	r9, r3
 8010ff4:	693d      	ldr	r5, [r7, #16]
 8010ff6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010ffa:	68bb      	ldr	r3, [r7, #8]
 8010ffc:	6879      	ldr	r1, [r7, #4]
 8010ffe:	eb05 060a 	add.w	r6, r5, sl
 8011002:	42b3      	cmp	r3, r6
 8011004:	b085      	sub	sp, #20
 8011006:	bfb8      	it	lt
 8011008:	3101      	addlt	r1, #1
 801100a:	f7ff fedd 	bl	8010dc8 <_Balloc>
 801100e:	b930      	cbnz	r0, 801101e <__multiply+0x42>
 8011010:	4602      	mov	r2, r0
 8011012:	4b41      	ldr	r3, [pc, #260]	@ (8011118 <__multiply+0x13c>)
 8011014:	4841      	ldr	r0, [pc, #260]	@ (801111c <__multiply+0x140>)
 8011016:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801101a:	f000 fc7d 	bl	8011918 <__assert_func>
 801101e:	f100 0414 	add.w	r4, r0, #20
 8011022:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8011026:	4623      	mov	r3, r4
 8011028:	2200      	movs	r2, #0
 801102a:	4573      	cmp	r3, lr
 801102c:	d320      	bcc.n	8011070 <__multiply+0x94>
 801102e:	f107 0814 	add.w	r8, r7, #20
 8011032:	f109 0114 	add.w	r1, r9, #20
 8011036:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801103a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801103e:	9302      	str	r3, [sp, #8]
 8011040:	1beb      	subs	r3, r5, r7
 8011042:	3b15      	subs	r3, #21
 8011044:	f023 0303 	bic.w	r3, r3, #3
 8011048:	3304      	adds	r3, #4
 801104a:	3715      	adds	r7, #21
 801104c:	42bd      	cmp	r5, r7
 801104e:	bf38      	it	cc
 8011050:	2304      	movcc	r3, #4
 8011052:	9301      	str	r3, [sp, #4]
 8011054:	9b02      	ldr	r3, [sp, #8]
 8011056:	9103      	str	r1, [sp, #12]
 8011058:	428b      	cmp	r3, r1
 801105a:	d80c      	bhi.n	8011076 <__multiply+0x9a>
 801105c:	2e00      	cmp	r6, #0
 801105e:	dd03      	ble.n	8011068 <__multiply+0x8c>
 8011060:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011064:	2b00      	cmp	r3, #0
 8011066:	d055      	beq.n	8011114 <__multiply+0x138>
 8011068:	6106      	str	r6, [r0, #16]
 801106a:	b005      	add	sp, #20
 801106c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011070:	f843 2b04 	str.w	r2, [r3], #4
 8011074:	e7d9      	b.n	801102a <__multiply+0x4e>
 8011076:	f8b1 a000 	ldrh.w	sl, [r1]
 801107a:	f1ba 0f00 	cmp.w	sl, #0
 801107e:	d01f      	beq.n	80110c0 <__multiply+0xe4>
 8011080:	46c4      	mov	ip, r8
 8011082:	46a1      	mov	r9, r4
 8011084:	2700      	movs	r7, #0
 8011086:	f85c 2b04 	ldr.w	r2, [ip], #4
 801108a:	f8d9 3000 	ldr.w	r3, [r9]
 801108e:	fa1f fb82 	uxth.w	fp, r2
 8011092:	b29b      	uxth	r3, r3
 8011094:	fb0a 330b 	mla	r3, sl, fp, r3
 8011098:	443b      	add	r3, r7
 801109a:	f8d9 7000 	ldr.w	r7, [r9]
 801109e:	0c12      	lsrs	r2, r2, #16
 80110a0:	0c3f      	lsrs	r7, r7, #16
 80110a2:	fb0a 7202 	mla	r2, sl, r2, r7
 80110a6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80110aa:	b29b      	uxth	r3, r3
 80110ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80110b0:	4565      	cmp	r5, ip
 80110b2:	f849 3b04 	str.w	r3, [r9], #4
 80110b6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80110ba:	d8e4      	bhi.n	8011086 <__multiply+0xaa>
 80110bc:	9b01      	ldr	r3, [sp, #4]
 80110be:	50e7      	str	r7, [r4, r3]
 80110c0:	9b03      	ldr	r3, [sp, #12]
 80110c2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80110c6:	3104      	adds	r1, #4
 80110c8:	f1b9 0f00 	cmp.w	r9, #0
 80110cc:	d020      	beq.n	8011110 <__multiply+0x134>
 80110ce:	6823      	ldr	r3, [r4, #0]
 80110d0:	4647      	mov	r7, r8
 80110d2:	46a4      	mov	ip, r4
 80110d4:	f04f 0a00 	mov.w	sl, #0
 80110d8:	f8b7 b000 	ldrh.w	fp, [r7]
 80110dc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80110e0:	fb09 220b 	mla	r2, r9, fp, r2
 80110e4:	4452      	add	r2, sl
 80110e6:	b29b      	uxth	r3, r3
 80110e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80110ec:	f84c 3b04 	str.w	r3, [ip], #4
 80110f0:	f857 3b04 	ldr.w	r3, [r7], #4
 80110f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80110f8:	f8bc 3000 	ldrh.w	r3, [ip]
 80110fc:	fb09 330a 	mla	r3, r9, sl, r3
 8011100:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8011104:	42bd      	cmp	r5, r7
 8011106:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801110a:	d8e5      	bhi.n	80110d8 <__multiply+0xfc>
 801110c:	9a01      	ldr	r2, [sp, #4]
 801110e:	50a3      	str	r3, [r4, r2]
 8011110:	3404      	adds	r4, #4
 8011112:	e79f      	b.n	8011054 <__multiply+0x78>
 8011114:	3e01      	subs	r6, #1
 8011116:	e7a1      	b.n	801105c <__multiply+0x80>
 8011118:	08012a75 	.word	0x08012a75
 801111c:	08012a86 	.word	0x08012a86

08011120 <__pow5mult>:
 8011120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011124:	4615      	mov	r5, r2
 8011126:	f012 0203 	ands.w	r2, r2, #3
 801112a:	4607      	mov	r7, r0
 801112c:	460e      	mov	r6, r1
 801112e:	d007      	beq.n	8011140 <__pow5mult+0x20>
 8011130:	4c25      	ldr	r4, [pc, #148]	@ (80111c8 <__pow5mult+0xa8>)
 8011132:	3a01      	subs	r2, #1
 8011134:	2300      	movs	r3, #0
 8011136:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801113a:	f7ff fea7 	bl	8010e8c <__multadd>
 801113e:	4606      	mov	r6, r0
 8011140:	10ad      	asrs	r5, r5, #2
 8011142:	d03d      	beq.n	80111c0 <__pow5mult+0xa0>
 8011144:	69fc      	ldr	r4, [r7, #28]
 8011146:	b97c      	cbnz	r4, 8011168 <__pow5mult+0x48>
 8011148:	2010      	movs	r0, #16
 801114a:	f7ff fd87 	bl	8010c5c <malloc>
 801114e:	4602      	mov	r2, r0
 8011150:	61f8      	str	r0, [r7, #28]
 8011152:	b928      	cbnz	r0, 8011160 <__pow5mult+0x40>
 8011154:	4b1d      	ldr	r3, [pc, #116]	@ (80111cc <__pow5mult+0xac>)
 8011156:	481e      	ldr	r0, [pc, #120]	@ (80111d0 <__pow5mult+0xb0>)
 8011158:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801115c:	f000 fbdc 	bl	8011918 <__assert_func>
 8011160:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011164:	6004      	str	r4, [r0, #0]
 8011166:	60c4      	str	r4, [r0, #12]
 8011168:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801116c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011170:	b94c      	cbnz	r4, 8011186 <__pow5mult+0x66>
 8011172:	f240 2171 	movw	r1, #625	@ 0x271
 8011176:	4638      	mov	r0, r7
 8011178:	f7ff ff1a 	bl	8010fb0 <__i2b>
 801117c:	2300      	movs	r3, #0
 801117e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011182:	4604      	mov	r4, r0
 8011184:	6003      	str	r3, [r0, #0]
 8011186:	f04f 0900 	mov.w	r9, #0
 801118a:	07eb      	lsls	r3, r5, #31
 801118c:	d50a      	bpl.n	80111a4 <__pow5mult+0x84>
 801118e:	4631      	mov	r1, r6
 8011190:	4622      	mov	r2, r4
 8011192:	4638      	mov	r0, r7
 8011194:	f7ff ff22 	bl	8010fdc <__multiply>
 8011198:	4631      	mov	r1, r6
 801119a:	4680      	mov	r8, r0
 801119c:	4638      	mov	r0, r7
 801119e:	f7ff fe53 	bl	8010e48 <_Bfree>
 80111a2:	4646      	mov	r6, r8
 80111a4:	106d      	asrs	r5, r5, #1
 80111a6:	d00b      	beq.n	80111c0 <__pow5mult+0xa0>
 80111a8:	6820      	ldr	r0, [r4, #0]
 80111aa:	b938      	cbnz	r0, 80111bc <__pow5mult+0x9c>
 80111ac:	4622      	mov	r2, r4
 80111ae:	4621      	mov	r1, r4
 80111b0:	4638      	mov	r0, r7
 80111b2:	f7ff ff13 	bl	8010fdc <__multiply>
 80111b6:	6020      	str	r0, [r4, #0]
 80111b8:	f8c0 9000 	str.w	r9, [r0]
 80111bc:	4604      	mov	r4, r0
 80111be:	e7e4      	b.n	801118a <__pow5mult+0x6a>
 80111c0:	4630      	mov	r0, r6
 80111c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111c6:	bf00      	nop
 80111c8:	08012c38 	.word	0x08012c38
 80111cc:	08012a06 	.word	0x08012a06
 80111d0:	08012a86 	.word	0x08012a86

080111d4 <__lshift>:
 80111d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111d8:	460c      	mov	r4, r1
 80111da:	6849      	ldr	r1, [r1, #4]
 80111dc:	6923      	ldr	r3, [r4, #16]
 80111de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80111e2:	68a3      	ldr	r3, [r4, #8]
 80111e4:	4607      	mov	r7, r0
 80111e6:	4691      	mov	r9, r2
 80111e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80111ec:	f108 0601 	add.w	r6, r8, #1
 80111f0:	42b3      	cmp	r3, r6
 80111f2:	db0b      	blt.n	801120c <__lshift+0x38>
 80111f4:	4638      	mov	r0, r7
 80111f6:	f7ff fde7 	bl	8010dc8 <_Balloc>
 80111fa:	4605      	mov	r5, r0
 80111fc:	b948      	cbnz	r0, 8011212 <__lshift+0x3e>
 80111fe:	4602      	mov	r2, r0
 8011200:	4b28      	ldr	r3, [pc, #160]	@ (80112a4 <__lshift+0xd0>)
 8011202:	4829      	ldr	r0, [pc, #164]	@ (80112a8 <__lshift+0xd4>)
 8011204:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011208:	f000 fb86 	bl	8011918 <__assert_func>
 801120c:	3101      	adds	r1, #1
 801120e:	005b      	lsls	r3, r3, #1
 8011210:	e7ee      	b.n	80111f0 <__lshift+0x1c>
 8011212:	2300      	movs	r3, #0
 8011214:	f100 0114 	add.w	r1, r0, #20
 8011218:	f100 0210 	add.w	r2, r0, #16
 801121c:	4618      	mov	r0, r3
 801121e:	4553      	cmp	r3, sl
 8011220:	db33      	blt.n	801128a <__lshift+0xb6>
 8011222:	6920      	ldr	r0, [r4, #16]
 8011224:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011228:	f104 0314 	add.w	r3, r4, #20
 801122c:	f019 091f 	ands.w	r9, r9, #31
 8011230:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011234:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011238:	d02b      	beq.n	8011292 <__lshift+0xbe>
 801123a:	f1c9 0e20 	rsb	lr, r9, #32
 801123e:	468a      	mov	sl, r1
 8011240:	2200      	movs	r2, #0
 8011242:	6818      	ldr	r0, [r3, #0]
 8011244:	fa00 f009 	lsl.w	r0, r0, r9
 8011248:	4310      	orrs	r0, r2
 801124a:	f84a 0b04 	str.w	r0, [sl], #4
 801124e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011252:	459c      	cmp	ip, r3
 8011254:	fa22 f20e 	lsr.w	r2, r2, lr
 8011258:	d8f3      	bhi.n	8011242 <__lshift+0x6e>
 801125a:	ebac 0304 	sub.w	r3, ip, r4
 801125e:	3b15      	subs	r3, #21
 8011260:	f023 0303 	bic.w	r3, r3, #3
 8011264:	3304      	adds	r3, #4
 8011266:	f104 0015 	add.w	r0, r4, #21
 801126a:	4560      	cmp	r0, ip
 801126c:	bf88      	it	hi
 801126e:	2304      	movhi	r3, #4
 8011270:	50ca      	str	r2, [r1, r3]
 8011272:	b10a      	cbz	r2, 8011278 <__lshift+0xa4>
 8011274:	f108 0602 	add.w	r6, r8, #2
 8011278:	3e01      	subs	r6, #1
 801127a:	4638      	mov	r0, r7
 801127c:	612e      	str	r6, [r5, #16]
 801127e:	4621      	mov	r1, r4
 8011280:	f7ff fde2 	bl	8010e48 <_Bfree>
 8011284:	4628      	mov	r0, r5
 8011286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801128a:	f842 0f04 	str.w	r0, [r2, #4]!
 801128e:	3301      	adds	r3, #1
 8011290:	e7c5      	b.n	801121e <__lshift+0x4a>
 8011292:	3904      	subs	r1, #4
 8011294:	f853 2b04 	ldr.w	r2, [r3], #4
 8011298:	f841 2f04 	str.w	r2, [r1, #4]!
 801129c:	459c      	cmp	ip, r3
 801129e:	d8f9      	bhi.n	8011294 <__lshift+0xc0>
 80112a0:	e7ea      	b.n	8011278 <__lshift+0xa4>
 80112a2:	bf00      	nop
 80112a4:	08012a75 	.word	0x08012a75
 80112a8:	08012a86 	.word	0x08012a86

080112ac <__mcmp>:
 80112ac:	690a      	ldr	r2, [r1, #16]
 80112ae:	4603      	mov	r3, r0
 80112b0:	6900      	ldr	r0, [r0, #16]
 80112b2:	1a80      	subs	r0, r0, r2
 80112b4:	b530      	push	{r4, r5, lr}
 80112b6:	d10e      	bne.n	80112d6 <__mcmp+0x2a>
 80112b8:	3314      	adds	r3, #20
 80112ba:	3114      	adds	r1, #20
 80112bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80112c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80112c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80112c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80112cc:	4295      	cmp	r5, r2
 80112ce:	d003      	beq.n	80112d8 <__mcmp+0x2c>
 80112d0:	d205      	bcs.n	80112de <__mcmp+0x32>
 80112d2:	f04f 30ff 	mov.w	r0, #4294967295
 80112d6:	bd30      	pop	{r4, r5, pc}
 80112d8:	42a3      	cmp	r3, r4
 80112da:	d3f3      	bcc.n	80112c4 <__mcmp+0x18>
 80112dc:	e7fb      	b.n	80112d6 <__mcmp+0x2a>
 80112de:	2001      	movs	r0, #1
 80112e0:	e7f9      	b.n	80112d6 <__mcmp+0x2a>
	...

080112e4 <__mdiff>:
 80112e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112e8:	4689      	mov	r9, r1
 80112ea:	4606      	mov	r6, r0
 80112ec:	4611      	mov	r1, r2
 80112ee:	4648      	mov	r0, r9
 80112f0:	4614      	mov	r4, r2
 80112f2:	f7ff ffdb 	bl	80112ac <__mcmp>
 80112f6:	1e05      	subs	r5, r0, #0
 80112f8:	d112      	bne.n	8011320 <__mdiff+0x3c>
 80112fa:	4629      	mov	r1, r5
 80112fc:	4630      	mov	r0, r6
 80112fe:	f7ff fd63 	bl	8010dc8 <_Balloc>
 8011302:	4602      	mov	r2, r0
 8011304:	b928      	cbnz	r0, 8011312 <__mdiff+0x2e>
 8011306:	4b3f      	ldr	r3, [pc, #252]	@ (8011404 <__mdiff+0x120>)
 8011308:	f240 2137 	movw	r1, #567	@ 0x237
 801130c:	483e      	ldr	r0, [pc, #248]	@ (8011408 <__mdiff+0x124>)
 801130e:	f000 fb03 	bl	8011918 <__assert_func>
 8011312:	2301      	movs	r3, #1
 8011314:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011318:	4610      	mov	r0, r2
 801131a:	b003      	add	sp, #12
 801131c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011320:	bfbc      	itt	lt
 8011322:	464b      	movlt	r3, r9
 8011324:	46a1      	movlt	r9, r4
 8011326:	4630      	mov	r0, r6
 8011328:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801132c:	bfba      	itte	lt
 801132e:	461c      	movlt	r4, r3
 8011330:	2501      	movlt	r5, #1
 8011332:	2500      	movge	r5, #0
 8011334:	f7ff fd48 	bl	8010dc8 <_Balloc>
 8011338:	4602      	mov	r2, r0
 801133a:	b918      	cbnz	r0, 8011344 <__mdiff+0x60>
 801133c:	4b31      	ldr	r3, [pc, #196]	@ (8011404 <__mdiff+0x120>)
 801133e:	f240 2145 	movw	r1, #581	@ 0x245
 8011342:	e7e3      	b.n	801130c <__mdiff+0x28>
 8011344:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011348:	6926      	ldr	r6, [r4, #16]
 801134a:	60c5      	str	r5, [r0, #12]
 801134c:	f109 0310 	add.w	r3, r9, #16
 8011350:	f109 0514 	add.w	r5, r9, #20
 8011354:	f104 0e14 	add.w	lr, r4, #20
 8011358:	f100 0b14 	add.w	fp, r0, #20
 801135c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011360:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011364:	9301      	str	r3, [sp, #4]
 8011366:	46d9      	mov	r9, fp
 8011368:	f04f 0c00 	mov.w	ip, #0
 801136c:	9b01      	ldr	r3, [sp, #4]
 801136e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011372:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011376:	9301      	str	r3, [sp, #4]
 8011378:	fa1f f38a 	uxth.w	r3, sl
 801137c:	4619      	mov	r1, r3
 801137e:	b283      	uxth	r3, r0
 8011380:	1acb      	subs	r3, r1, r3
 8011382:	0c00      	lsrs	r0, r0, #16
 8011384:	4463      	add	r3, ip
 8011386:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801138a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801138e:	b29b      	uxth	r3, r3
 8011390:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011394:	4576      	cmp	r6, lr
 8011396:	f849 3b04 	str.w	r3, [r9], #4
 801139a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801139e:	d8e5      	bhi.n	801136c <__mdiff+0x88>
 80113a0:	1b33      	subs	r3, r6, r4
 80113a2:	3b15      	subs	r3, #21
 80113a4:	f023 0303 	bic.w	r3, r3, #3
 80113a8:	3415      	adds	r4, #21
 80113aa:	3304      	adds	r3, #4
 80113ac:	42a6      	cmp	r6, r4
 80113ae:	bf38      	it	cc
 80113b0:	2304      	movcc	r3, #4
 80113b2:	441d      	add	r5, r3
 80113b4:	445b      	add	r3, fp
 80113b6:	461e      	mov	r6, r3
 80113b8:	462c      	mov	r4, r5
 80113ba:	4544      	cmp	r4, r8
 80113bc:	d30e      	bcc.n	80113dc <__mdiff+0xf8>
 80113be:	f108 0103 	add.w	r1, r8, #3
 80113c2:	1b49      	subs	r1, r1, r5
 80113c4:	f021 0103 	bic.w	r1, r1, #3
 80113c8:	3d03      	subs	r5, #3
 80113ca:	45a8      	cmp	r8, r5
 80113cc:	bf38      	it	cc
 80113ce:	2100      	movcc	r1, #0
 80113d0:	440b      	add	r3, r1
 80113d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80113d6:	b191      	cbz	r1, 80113fe <__mdiff+0x11a>
 80113d8:	6117      	str	r7, [r2, #16]
 80113da:	e79d      	b.n	8011318 <__mdiff+0x34>
 80113dc:	f854 1b04 	ldr.w	r1, [r4], #4
 80113e0:	46e6      	mov	lr, ip
 80113e2:	0c08      	lsrs	r0, r1, #16
 80113e4:	fa1c fc81 	uxtah	ip, ip, r1
 80113e8:	4471      	add	r1, lr
 80113ea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80113ee:	b289      	uxth	r1, r1
 80113f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80113f4:	f846 1b04 	str.w	r1, [r6], #4
 80113f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80113fc:	e7dd      	b.n	80113ba <__mdiff+0xd6>
 80113fe:	3f01      	subs	r7, #1
 8011400:	e7e7      	b.n	80113d2 <__mdiff+0xee>
 8011402:	bf00      	nop
 8011404:	08012a75 	.word	0x08012a75
 8011408:	08012a86 	.word	0x08012a86

0801140c <__d2b>:
 801140c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011410:	460f      	mov	r7, r1
 8011412:	2101      	movs	r1, #1
 8011414:	ec59 8b10 	vmov	r8, r9, d0
 8011418:	4616      	mov	r6, r2
 801141a:	f7ff fcd5 	bl	8010dc8 <_Balloc>
 801141e:	4604      	mov	r4, r0
 8011420:	b930      	cbnz	r0, 8011430 <__d2b+0x24>
 8011422:	4602      	mov	r2, r0
 8011424:	4b23      	ldr	r3, [pc, #140]	@ (80114b4 <__d2b+0xa8>)
 8011426:	4824      	ldr	r0, [pc, #144]	@ (80114b8 <__d2b+0xac>)
 8011428:	f240 310f 	movw	r1, #783	@ 0x30f
 801142c:	f000 fa74 	bl	8011918 <__assert_func>
 8011430:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011434:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011438:	b10d      	cbz	r5, 801143e <__d2b+0x32>
 801143a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801143e:	9301      	str	r3, [sp, #4]
 8011440:	f1b8 0300 	subs.w	r3, r8, #0
 8011444:	d023      	beq.n	801148e <__d2b+0x82>
 8011446:	4668      	mov	r0, sp
 8011448:	9300      	str	r3, [sp, #0]
 801144a:	f7ff fd84 	bl	8010f56 <__lo0bits>
 801144e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011452:	b1d0      	cbz	r0, 801148a <__d2b+0x7e>
 8011454:	f1c0 0320 	rsb	r3, r0, #32
 8011458:	fa02 f303 	lsl.w	r3, r2, r3
 801145c:	430b      	orrs	r3, r1
 801145e:	40c2      	lsrs	r2, r0
 8011460:	6163      	str	r3, [r4, #20]
 8011462:	9201      	str	r2, [sp, #4]
 8011464:	9b01      	ldr	r3, [sp, #4]
 8011466:	61a3      	str	r3, [r4, #24]
 8011468:	2b00      	cmp	r3, #0
 801146a:	bf0c      	ite	eq
 801146c:	2201      	moveq	r2, #1
 801146e:	2202      	movne	r2, #2
 8011470:	6122      	str	r2, [r4, #16]
 8011472:	b1a5      	cbz	r5, 801149e <__d2b+0x92>
 8011474:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011478:	4405      	add	r5, r0
 801147a:	603d      	str	r5, [r7, #0]
 801147c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011480:	6030      	str	r0, [r6, #0]
 8011482:	4620      	mov	r0, r4
 8011484:	b003      	add	sp, #12
 8011486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801148a:	6161      	str	r1, [r4, #20]
 801148c:	e7ea      	b.n	8011464 <__d2b+0x58>
 801148e:	a801      	add	r0, sp, #4
 8011490:	f7ff fd61 	bl	8010f56 <__lo0bits>
 8011494:	9b01      	ldr	r3, [sp, #4]
 8011496:	6163      	str	r3, [r4, #20]
 8011498:	3020      	adds	r0, #32
 801149a:	2201      	movs	r2, #1
 801149c:	e7e8      	b.n	8011470 <__d2b+0x64>
 801149e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80114a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80114a6:	6038      	str	r0, [r7, #0]
 80114a8:	6918      	ldr	r0, [r3, #16]
 80114aa:	f7ff fd35 	bl	8010f18 <__hi0bits>
 80114ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80114b2:	e7e5      	b.n	8011480 <__d2b+0x74>
 80114b4:	08012a75 	.word	0x08012a75
 80114b8:	08012a86 	.word	0x08012a86

080114bc <__ssputs_r>:
 80114bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114c0:	688e      	ldr	r6, [r1, #8]
 80114c2:	461f      	mov	r7, r3
 80114c4:	42be      	cmp	r6, r7
 80114c6:	680b      	ldr	r3, [r1, #0]
 80114c8:	4682      	mov	sl, r0
 80114ca:	460c      	mov	r4, r1
 80114cc:	4690      	mov	r8, r2
 80114ce:	d82d      	bhi.n	801152c <__ssputs_r+0x70>
 80114d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80114d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80114d8:	d026      	beq.n	8011528 <__ssputs_r+0x6c>
 80114da:	6965      	ldr	r5, [r4, #20]
 80114dc:	6909      	ldr	r1, [r1, #16]
 80114de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80114e2:	eba3 0901 	sub.w	r9, r3, r1
 80114e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80114ea:	1c7b      	adds	r3, r7, #1
 80114ec:	444b      	add	r3, r9
 80114ee:	106d      	asrs	r5, r5, #1
 80114f0:	429d      	cmp	r5, r3
 80114f2:	bf38      	it	cc
 80114f4:	461d      	movcc	r5, r3
 80114f6:	0553      	lsls	r3, r2, #21
 80114f8:	d527      	bpl.n	801154a <__ssputs_r+0x8e>
 80114fa:	4629      	mov	r1, r5
 80114fc:	f7ff fbd8 	bl	8010cb0 <_malloc_r>
 8011500:	4606      	mov	r6, r0
 8011502:	b360      	cbz	r0, 801155e <__ssputs_r+0xa2>
 8011504:	6921      	ldr	r1, [r4, #16]
 8011506:	464a      	mov	r2, r9
 8011508:	f7fe fcf5 	bl	800fef6 <memcpy>
 801150c:	89a3      	ldrh	r3, [r4, #12]
 801150e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011516:	81a3      	strh	r3, [r4, #12]
 8011518:	6126      	str	r6, [r4, #16]
 801151a:	6165      	str	r5, [r4, #20]
 801151c:	444e      	add	r6, r9
 801151e:	eba5 0509 	sub.w	r5, r5, r9
 8011522:	6026      	str	r6, [r4, #0]
 8011524:	60a5      	str	r5, [r4, #8]
 8011526:	463e      	mov	r6, r7
 8011528:	42be      	cmp	r6, r7
 801152a:	d900      	bls.n	801152e <__ssputs_r+0x72>
 801152c:	463e      	mov	r6, r7
 801152e:	6820      	ldr	r0, [r4, #0]
 8011530:	4632      	mov	r2, r6
 8011532:	4641      	mov	r1, r8
 8011534:	f000 f9c6 	bl	80118c4 <memmove>
 8011538:	68a3      	ldr	r3, [r4, #8]
 801153a:	1b9b      	subs	r3, r3, r6
 801153c:	60a3      	str	r3, [r4, #8]
 801153e:	6823      	ldr	r3, [r4, #0]
 8011540:	4433      	add	r3, r6
 8011542:	6023      	str	r3, [r4, #0]
 8011544:	2000      	movs	r0, #0
 8011546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801154a:	462a      	mov	r2, r5
 801154c:	f000 fa28 	bl	80119a0 <_realloc_r>
 8011550:	4606      	mov	r6, r0
 8011552:	2800      	cmp	r0, #0
 8011554:	d1e0      	bne.n	8011518 <__ssputs_r+0x5c>
 8011556:	6921      	ldr	r1, [r4, #16]
 8011558:	4650      	mov	r0, sl
 801155a:	f7ff fb35 	bl	8010bc8 <_free_r>
 801155e:	230c      	movs	r3, #12
 8011560:	f8ca 3000 	str.w	r3, [sl]
 8011564:	89a3      	ldrh	r3, [r4, #12]
 8011566:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801156a:	81a3      	strh	r3, [r4, #12]
 801156c:	f04f 30ff 	mov.w	r0, #4294967295
 8011570:	e7e9      	b.n	8011546 <__ssputs_r+0x8a>
	...

08011574 <_svfiprintf_r>:
 8011574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011578:	4698      	mov	r8, r3
 801157a:	898b      	ldrh	r3, [r1, #12]
 801157c:	061b      	lsls	r3, r3, #24
 801157e:	b09d      	sub	sp, #116	@ 0x74
 8011580:	4607      	mov	r7, r0
 8011582:	460d      	mov	r5, r1
 8011584:	4614      	mov	r4, r2
 8011586:	d510      	bpl.n	80115aa <_svfiprintf_r+0x36>
 8011588:	690b      	ldr	r3, [r1, #16]
 801158a:	b973      	cbnz	r3, 80115aa <_svfiprintf_r+0x36>
 801158c:	2140      	movs	r1, #64	@ 0x40
 801158e:	f7ff fb8f 	bl	8010cb0 <_malloc_r>
 8011592:	6028      	str	r0, [r5, #0]
 8011594:	6128      	str	r0, [r5, #16]
 8011596:	b930      	cbnz	r0, 80115a6 <_svfiprintf_r+0x32>
 8011598:	230c      	movs	r3, #12
 801159a:	603b      	str	r3, [r7, #0]
 801159c:	f04f 30ff 	mov.w	r0, #4294967295
 80115a0:	b01d      	add	sp, #116	@ 0x74
 80115a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115a6:	2340      	movs	r3, #64	@ 0x40
 80115a8:	616b      	str	r3, [r5, #20]
 80115aa:	2300      	movs	r3, #0
 80115ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80115ae:	2320      	movs	r3, #32
 80115b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80115b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80115b8:	2330      	movs	r3, #48	@ 0x30
 80115ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011758 <_svfiprintf_r+0x1e4>
 80115be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80115c2:	f04f 0901 	mov.w	r9, #1
 80115c6:	4623      	mov	r3, r4
 80115c8:	469a      	mov	sl, r3
 80115ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80115ce:	b10a      	cbz	r2, 80115d4 <_svfiprintf_r+0x60>
 80115d0:	2a25      	cmp	r2, #37	@ 0x25
 80115d2:	d1f9      	bne.n	80115c8 <_svfiprintf_r+0x54>
 80115d4:	ebba 0b04 	subs.w	fp, sl, r4
 80115d8:	d00b      	beq.n	80115f2 <_svfiprintf_r+0x7e>
 80115da:	465b      	mov	r3, fp
 80115dc:	4622      	mov	r2, r4
 80115de:	4629      	mov	r1, r5
 80115e0:	4638      	mov	r0, r7
 80115e2:	f7ff ff6b 	bl	80114bc <__ssputs_r>
 80115e6:	3001      	adds	r0, #1
 80115e8:	f000 80a7 	beq.w	801173a <_svfiprintf_r+0x1c6>
 80115ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80115ee:	445a      	add	r2, fp
 80115f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80115f2:	f89a 3000 	ldrb.w	r3, [sl]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	f000 809f 	beq.w	801173a <_svfiprintf_r+0x1c6>
 80115fc:	2300      	movs	r3, #0
 80115fe:	f04f 32ff 	mov.w	r2, #4294967295
 8011602:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011606:	f10a 0a01 	add.w	sl, sl, #1
 801160a:	9304      	str	r3, [sp, #16]
 801160c:	9307      	str	r3, [sp, #28]
 801160e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011612:	931a      	str	r3, [sp, #104]	@ 0x68
 8011614:	4654      	mov	r4, sl
 8011616:	2205      	movs	r2, #5
 8011618:	f814 1b01 	ldrb.w	r1, [r4], #1
 801161c:	484e      	ldr	r0, [pc, #312]	@ (8011758 <_svfiprintf_r+0x1e4>)
 801161e:	f7ee fddf 	bl	80001e0 <memchr>
 8011622:	9a04      	ldr	r2, [sp, #16]
 8011624:	b9d8      	cbnz	r0, 801165e <_svfiprintf_r+0xea>
 8011626:	06d0      	lsls	r0, r2, #27
 8011628:	bf44      	itt	mi
 801162a:	2320      	movmi	r3, #32
 801162c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011630:	0711      	lsls	r1, r2, #28
 8011632:	bf44      	itt	mi
 8011634:	232b      	movmi	r3, #43	@ 0x2b
 8011636:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801163a:	f89a 3000 	ldrb.w	r3, [sl]
 801163e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011640:	d015      	beq.n	801166e <_svfiprintf_r+0xfa>
 8011642:	9a07      	ldr	r2, [sp, #28]
 8011644:	4654      	mov	r4, sl
 8011646:	2000      	movs	r0, #0
 8011648:	f04f 0c0a 	mov.w	ip, #10
 801164c:	4621      	mov	r1, r4
 801164e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011652:	3b30      	subs	r3, #48	@ 0x30
 8011654:	2b09      	cmp	r3, #9
 8011656:	d94b      	bls.n	80116f0 <_svfiprintf_r+0x17c>
 8011658:	b1b0      	cbz	r0, 8011688 <_svfiprintf_r+0x114>
 801165a:	9207      	str	r2, [sp, #28]
 801165c:	e014      	b.n	8011688 <_svfiprintf_r+0x114>
 801165e:	eba0 0308 	sub.w	r3, r0, r8
 8011662:	fa09 f303 	lsl.w	r3, r9, r3
 8011666:	4313      	orrs	r3, r2
 8011668:	9304      	str	r3, [sp, #16]
 801166a:	46a2      	mov	sl, r4
 801166c:	e7d2      	b.n	8011614 <_svfiprintf_r+0xa0>
 801166e:	9b03      	ldr	r3, [sp, #12]
 8011670:	1d19      	adds	r1, r3, #4
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	9103      	str	r1, [sp, #12]
 8011676:	2b00      	cmp	r3, #0
 8011678:	bfbb      	ittet	lt
 801167a:	425b      	neglt	r3, r3
 801167c:	f042 0202 	orrlt.w	r2, r2, #2
 8011680:	9307      	strge	r3, [sp, #28]
 8011682:	9307      	strlt	r3, [sp, #28]
 8011684:	bfb8      	it	lt
 8011686:	9204      	strlt	r2, [sp, #16]
 8011688:	7823      	ldrb	r3, [r4, #0]
 801168a:	2b2e      	cmp	r3, #46	@ 0x2e
 801168c:	d10a      	bne.n	80116a4 <_svfiprintf_r+0x130>
 801168e:	7863      	ldrb	r3, [r4, #1]
 8011690:	2b2a      	cmp	r3, #42	@ 0x2a
 8011692:	d132      	bne.n	80116fa <_svfiprintf_r+0x186>
 8011694:	9b03      	ldr	r3, [sp, #12]
 8011696:	1d1a      	adds	r2, r3, #4
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	9203      	str	r2, [sp, #12]
 801169c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80116a0:	3402      	adds	r4, #2
 80116a2:	9305      	str	r3, [sp, #20]
 80116a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011768 <_svfiprintf_r+0x1f4>
 80116a8:	7821      	ldrb	r1, [r4, #0]
 80116aa:	2203      	movs	r2, #3
 80116ac:	4650      	mov	r0, sl
 80116ae:	f7ee fd97 	bl	80001e0 <memchr>
 80116b2:	b138      	cbz	r0, 80116c4 <_svfiprintf_r+0x150>
 80116b4:	9b04      	ldr	r3, [sp, #16]
 80116b6:	eba0 000a 	sub.w	r0, r0, sl
 80116ba:	2240      	movs	r2, #64	@ 0x40
 80116bc:	4082      	lsls	r2, r0
 80116be:	4313      	orrs	r3, r2
 80116c0:	3401      	adds	r4, #1
 80116c2:	9304      	str	r3, [sp, #16]
 80116c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116c8:	4824      	ldr	r0, [pc, #144]	@ (801175c <_svfiprintf_r+0x1e8>)
 80116ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80116ce:	2206      	movs	r2, #6
 80116d0:	f7ee fd86 	bl	80001e0 <memchr>
 80116d4:	2800      	cmp	r0, #0
 80116d6:	d036      	beq.n	8011746 <_svfiprintf_r+0x1d2>
 80116d8:	4b21      	ldr	r3, [pc, #132]	@ (8011760 <_svfiprintf_r+0x1ec>)
 80116da:	bb1b      	cbnz	r3, 8011724 <_svfiprintf_r+0x1b0>
 80116dc:	9b03      	ldr	r3, [sp, #12]
 80116de:	3307      	adds	r3, #7
 80116e0:	f023 0307 	bic.w	r3, r3, #7
 80116e4:	3308      	adds	r3, #8
 80116e6:	9303      	str	r3, [sp, #12]
 80116e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116ea:	4433      	add	r3, r6
 80116ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80116ee:	e76a      	b.n	80115c6 <_svfiprintf_r+0x52>
 80116f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80116f4:	460c      	mov	r4, r1
 80116f6:	2001      	movs	r0, #1
 80116f8:	e7a8      	b.n	801164c <_svfiprintf_r+0xd8>
 80116fa:	2300      	movs	r3, #0
 80116fc:	3401      	adds	r4, #1
 80116fe:	9305      	str	r3, [sp, #20]
 8011700:	4619      	mov	r1, r3
 8011702:	f04f 0c0a 	mov.w	ip, #10
 8011706:	4620      	mov	r0, r4
 8011708:	f810 2b01 	ldrb.w	r2, [r0], #1
 801170c:	3a30      	subs	r2, #48	@ 0x30
 801170e:	2a09      	cmp	r2, #9
 8011710:	d903      	bls.n	801171a <_svfiprintf_r+0x1a6>
 8011712:	2b00      	cmp	r3, #0
 8011714:	d0c6      	beq.n	80116a4 <_svfiprintf_r+0x130>
 8011716:	9105      	str	r1, [sp, #20]
 8011718:	e7c4      	b.n	80116a4 <_svfiprintf_r+0x130>
 801171a:	fb0c 2101 	mla	r1, ip, r1, r2
 801171e:	4604      	mov	r4, r0
 8011720:	2301      	movs	r3, #1
 8011722:	e7f0      	b.n	8011706 <_svfiprintf_r+0x192>
 8011724:	ab03      	add	r3, sp, #12
 8011726:	9300      	str	r3, [sp, #0]
 8011728:	462a      	mov	r2, r5
 801172a:	4b0e      	ldr	r3, [pc, #56]	@ (8011764 <_svfiprintf_r+0x1f0>)
 801172c:	a904      	add	r1, sp, #16
 801172e:	4638      	mov	r0, r7
 8011730:	f7fd fe4e 	bl	800f3d0 <_printf_float>
 8011734:	1c42      	adds	r2, r0, #1
 8011736:	4606      	mov	r6, r0
 8011738:	d1d6      	bne.n	80116e8 <_svfiprintf_r+0x174>
 801173a:	89ab      	ldrh	r3, [r5, #12]
 801173c:	065b      	lsls	r3, r3, #25
 801173e:	f53f af2d 	bmi.w	801159c <_svfiprintf_r+0x28>
 8011742:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011744:	e72c      	b.n	80115a0 <_svfiprintf_r+0x2c>
 8011746:	ab03      	add	r3, sp, #12
 8011748:	9300      	str	r3, [sp, #0]
 801174a:	462a      	mov	r2, r5
 801174c:	4b05      	ldr	r3, [pc, #20]	@ (8011764 <_svfiprintf_r+0x1f0>)
 801174e:	a904      	add	r1, sp, #16
 8011750:	4638      	mov	r0, r7
 8011752:	f7fe f8d5 	bl	800f900 <_printf_i>
 8011756:	e7ed      	b.n	8011734 <_svfiprintf_r+0x1c0>
 8011758:	08012adf 	.word	0x08012adf
 801175c:	08012ae9 	.word	0x08012ae9
 8011760:	0800f3d1 	.word	0x0800f3d1
 8011764:	080114bd 	.word	0x080114bd
 8011768:	08012ae5 	.word	0x08012ae5

0801176c <__sflush_r>:
 801176c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011774:	0716      	lsls	r6, r2, #28
 8011776:	4605      	mov	r5, r0
 8011778:	460c      	mov	r4, r1
 801177a:	d454      	bmi.n	8011826 <__sflush_r+0xba>
 801177c:	684b      	ldr	r3, [r1, #4]
 801177e:	2b00      	cmp	r3, #0
 8011780:	dc02      	bgt.n	8011788 <__sflush_r+0x1c>
 8011782:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011784:	2b00      	cmp	r3, #0
 8011786:	dd48      	ble.n	801181a <__sflush_r+0xae>
 8011788:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801178a:	2e00      	cmp	r6, #0
 801178c:	d045      	beq.n	801181a <__sflush_r+0xae>
 801178e:	2300      	movs	r3, #0
 8011790:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011794:	682f      	ldr	r7, [r5, #0]
 8011796:	6a21      	ldr	r1, [r4, #32]
 8011798:	602b      	str	r3, [r5, #0]
 801179a:	d030      	beq.n	80117fe <__sflush_r+0x92>
 801179c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801179e:	89a3      	ldrh	r3, [r4, #12]
 80117a0:	0759      	lsls	r1, r3, #29
 80117a2:	d505      	bpl.n	80117b0 <__sflush_r+0x44>
 80117a4:	6863      	ldr	r3, [r4, #4]
 80117a6:	1ad2      	subs	r2, r2, r3
 80117a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80117aa:	b10b      	cbz	r3, 80117b0 <__sflush_r+0x44>
 80117ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80117ae:	1ad2      	subs	r2, r2, r3
 80117b0:	2300      	movs	r3, #0
 80117b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80117b4:	6a21      	ldr	r1, [r4, #32]
 80117b6:	4628      	mov	r0, r5
 80117b8:	47b0      	blx	r6
 80117ba:	1c43      	adds	r3, r0, #1
 80117bc:	89a3      	ldrh	r3, [r4, #12]
 80117be:	d106      	bne.n	80117ce <__sflush_r+0x62>
 80117c0:	6829      	ldr	r1, [r5, #0]
 80117c2:	291d      	cmp	r1, #29
 80117c4:	d82b      	bhi.n	801181e <__sflush_r+0xb2>
 80117c6:	4a2a      	ldr	r2, [pc, #168]	@ (8011870 <__sflush_r+0x104>)
 80117c8:	40ca      	lsrs	r2, r1
 80117ca:	07d6      	lsls	r6, r2, #31
 80117cc:	d527      	bpl.n	801181e <__sflush_r+0xb2>
 80117ce:	2200      	movs	r2, #0
 80117d0:	6062      	str	r2, [r4, #4]
 80117d2:	04d9      	lsls	r1, r3, #19
 80117d4:	6922      	ldr	r2, [r4, #16]
 80117d6:	6022      	str	r2, [r4, #0]
 80117d8:	d504      	bpl.n	80117e4 <__sflush_r+0x78>
 80117da:	1c42      	adds	r2, r0, #1
 80117dc:	d101      	bne.n	80117e2 <__sflush_r+0x76>
 80117de:	682b      	ldr	r3, [r5, #0]
 80117e0:	b903      	cbnz	r3, 80117e4 <__sflush_r+0x78>
 80117e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80117e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80117e6:	602f      	str	r7, [r5, #0]
 80117e8:	b1b9      	cbz	r1, 801181a <__sflush_r+0xae>
 80117ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80117ee:	4299      	cmp	r1, r3
 80117f0:	d002      	beq.n	80117f8 <__sflush_r+0x8c>
 80117f2:	4628      	mov	r0, r5
 80117f4:	f7ff f9e8 	bl	8010bc8 <_free_r>
 80117f8:	2300      	movs	r3, #0
 80117fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80117fc:	e00d      	b.n	801181a <__sflush_r+0xae>
 80117fe:	2301      	movs	r3, #1
 8011800:	4628      	mov	r0, r5
 8011802:	47b0      	blx	r6
 8011804:	4602      	mov	r2, r0
 8011806:	1c50      	adds	r0, r2, #1
 8011808:	d1c9      	bne.n	801179e <__sflush_r+0x32>
 801180a:	682b      	ldr	r3, [r5, #0]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d0c6      	beq.n	801179e <__sflush_r+0x32>
 8011810:	2b1d      	cmp	r3, #29
 8011812:	d001      	beq.n	8011818 <__sflush_r+0xac>
 8011814:	2b16      	cmp	r3, #22
 8011816:	d11e      	bne.n	8011856 <__sflush_r+0xea>
 8011818:	602f      	str	r7, [r5, #0]
 801181a:	2000      	movs	r0, #0
 801181c:	e022      	b.n	8011864 <__sflush_r+0xf8>
 801181e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011822:	b21b      	sxth	r3, r3
 8011824:	e01b      	b.n	801185e <__sflush_r+0xf2>
 8011826:	690f      	ldr	r7, [r1, #16]
 8011828:	2f00      	cmp	r7, #0
 801182a:	d0f6      	beq.n	801181a <__sflush_r+0xae>
 801182c:	0793      	lsls	r3, r2, #30
 801182e:	680e      	ldr	r6, [r1, #0]
 8011830:	bf08      	it	eq
 8011832:	694b      	ldreq	r3, [r1, #20]
 8011834:	600f      	str	r7, [r1, #0]
 8011836:	bf18      	it	ne
 8011838:	2300      	movne	r3, #0
 801183a:	eba6 0807 	sub.w	r8, r6, r7
 801183e:	608b      	str	r3, [r1, #8]
 8011840:	f1b8 0f00 	cmp.w	r8, #0
 8011844:	dde9      	ble.n	801181a <__sflush_r+0xae>
 8011846:	6a21      	ldr	r1, [r4, #32]
 8011848:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801184a:	4643      	mov	r3, r8
 801184c:	463a      	mov	r2, r7
 801184e:	4628      	mov	r0, r5
 8011850:	47b0      	blx	r6
 8011852:	2800      	cmp	r0, #0
 8011854:	dc08      	bgt.n	8011868 <__sflush_r+0xfc>
 8011856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801185a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801185e:	81a3      	strh	r3, [r4, #12]
 8011860:	f04f 30ff 	mov.w	r0, #4294967295
 8011864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011868:	4407      	add	r7, r0
 801186a:	eba8 0800 	sub.w	r8, r8, r0
 801186e:	e7e7      	b.n	8011840 <__sflush_r+0xd4>
 8011870:	20400001 	.word	0x20400001

08011874 <_fflush_r>:
 8011874:	b538      	push	{r3, r4, r5, lr}
 8011876:	690b      	ldr	r3, [r1, #16]
 8011878:	4605      	mov	r5, r0
 801187a:	460c      	mov	r4, r1
 801187c:	b913      	cbnz	r3, 8011884 <_fflush_r+0x10>
 801187e:	2500      	movs	r5, #0
 8011880:	4628      	mov	r0, r5
 8011882:	bd38      	pop	{r3, r4, r5, pc}
 8011884:	b118      	cbz	r0, 801188e <_fflush_r+0x1a>
 8011886:	6a03      	ldr	r3, [r0, #32]
 8011888:	b90b      	cbnz	r3, 801188e <_fflush_r+0x1a>
 801188a:	f7fe f9e3 	bl	800fc54 <__sinit>
 801188e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d0f3      	beq.n	801187e <_fflush_r+0xa>
 8011896:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011898:	07d0      	lsls	r0, r2, #31
 801189a:	d404      	bmi.n	80118a6 <_fflush_r+0x32>
 801189c:	0599      	lsls	r1, r3, #22
 801189e:	d402      	bmi.n	80118a6 <_fflush_r+0x32>
 80118a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80118a2:	f7fe fb26 	bl	800fef2 <__retarget_lock_acquire_recursive>
 80118a6:	4628      	mov	r0, r5
 80118a8:	4621      	mov	r1, r4
 80118aa:	f7ff ff5f 	bl	801176c <__sflush_r>
 80118ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80118b0:	07da      	lsls	r2, r3, #31
 80118b2:	4605      	mov	r5, r0
 80118b4:	d4e4      	bmi.n	8011880 <_fflush_r+0xc>
 80118b6:	89a3      	ldrh	r3, [r4, #12]
 80118b8:	059b      	lsls	r3, r3, #22
 80118ba:	d4e1      	bmi.n	8011880 <_fflush_r+0xc>
 80118bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80118be:	f7fe fb19 	bl	800fef4 <__retarget_lock_release_recursive>
 80118c2:	e7dd      	b.n	8011880 <_fflush_r+0xc>

080118c4 <memmove>:
 80118c4:	4288      	cmp	r0, r1
 80118c6:	b510      	push	{r4, lr}
 80118c8:	eb01 0402 	add.w	r4, r1, r2
 80118cc:	d902      	bls.n	80118d4 <memmove+0x10>
 80118ce:	4284      	cmp	r4, r0
 80118d0:	4623      	mov	r3, r4
 80118d2:	d807      	bhi.n	80118e4 <memmove+0x20>
 80118d4:	1e43      	subs	r3, r0, #1
 80118d6:	42a1      	cmp	r1, r4
 80118d8:	d008      	beq.n	80118ec <memmove+0x28>
 80118da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80118de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80118e2:	e7f8      	b.n	80118d6 <memmove+0x12>
 80118e4:	4402      	add	r2, r0
 80118e6:	4601      	mov	r1, r0
 80118e8:	428a      	cmp	r2, r1
 80118ea:	d100      	bne.n	80118ee <memmove+0x2a>
 80118ec:	bd10      	pop	{r4, pc}
 80118ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80118f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80118f6:	e7f7      	b.n	80118e8 <memmove+0x24>

080118f8 <_sbrk_r>:
 80118f8:	b538      	push	{r3, r4, r5, lr}
 80118fa:	4d06      	ldr	r5, [pc, #24]	@ (8011914 <_sbrk_r+0x1c>)
 80118fc:	2300      	movs	r3, #0
 80118fe:	4604      	mov	r4, r0
 8011900:	4608      	mov	r0, r1
 8011902:	602b      	str	r3, [r5, #0]
 8011904:	f7f1 fbda 	bl	80030bc <_sbrk>
 8011908:	1c43      	adds	r3, r0, #1
 801190a:	d102      	bne.n	8011912 <_sbrk_r+0x1a>
 801190c:	682b      	ldr	r3, [r5, #0]
 801190e:	b103      	cbz	r3, 8011912 <_sbrk_r+0x1a>
 8011910:	6023      	str	r3, [r4, #0]
 8011912:	bd38      	pop	{r3, r4, r5, pc}
 8011914:	20006560 	.word	0x20006560

08011918 <__assert_func>:
 8011918:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801191a:	4614      	mov	r4, r2
 801191c:	461a      	mov	r2, r3
 801191e:	4b09      	ldr	r3, [pc, #36]	@ (8011944 <__assert_func+0x2c>)
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	4605      	mov	r5, r0
 8011924:	68d8      	ldr	r0, [r3, #12]
 8011926:	b14c      	cbz	r4, 801193c <__assert_func+0x24>
 8011928:	4b07      	ldr	r3, [pc, #28]	@ (8011948 <__assert_func+0x30>)
 801192a:	9100      	str	r1, [sp, #0]
 801192c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011930:	4906      	ldr	r1, [pc, #24]	@ (801194c <__assert_func+0x34>)
 8011932:	462b      	mov	r3, r5
 8011934:	f000 f870 	bl	8011a18 <fiprintf>
 8011938:	f000 f880 	bl	8011a3c <abort>
 801193c:	4b04      	ldr	r3, [pc, #16]	@ (8011950 <__assert_func+0x38>)
 801193e:	461c      	mov	r4, r3
 8011940:	e7f3      	b.n	801192a <__assert_func+0x12>
 8011942:	bf00      	nop
 8011944:	2000019c 	.word	0x2000019c
 8011948:	08012afa 	.word	0x08012afa
 801194c:	08012b07 	.word	0x08012b07
 8011950:	08012b35 	.word	0x08012b35

08011954 <_calloc_r>:
 8011954:	b570      	push	{r4, r5, r6, lr}
 8011956:	fba1 5402 	umull	r5, r4, r1, r2
 801195a:	b934      	cbnz	r4, 801196a <_calloc_r+0x16>
 801195c:	4629      	mov	r1, r5
 801195e:	f7ff f9a7 	bl	8010cb0 <_malloc_r>
 8011962:	4606      	mov	r6, r0
 8011964:	b928      	cbnz	r0, 8011972 <_calloc_r+0x1e>
 8011966:	4630      	mov	r0, r6
 8011968:	bd70      	pop	{r4, r5, r6, pc}
 801196a:	220c      	movs	r2, #12
 801196c:	6002      	str	r2, [r0, #0]
 801196e:	2600      	movs	r6, #0
 8011970:	e7f9      	b.n	8011966 <_calloc_r+0x12>
 8011972:	462a      	mov	r2, r5
 8011974:	4621      	mov	r1, r4
 8011976:	f7fe fa3e 	bl	800fdf6 <memset>
 801197a:	e7f4      	b.n	8011966 <_calloc_r+0x12>

0801197c <__ascii_mbtowc>:
 801197c:	b082      	sub	sp, #8
 801197e:	b901      	cbnz	r1, 8011982 <__ascii_mbtowc+0x6>
 8011980:	a901      	add	r1, sp, #4
 8011982:	b142      	cbz	r2, 8011996 <__ascii_mbtowc+0x1a>
 8011984:	b14b      	cbz	r3, 801199a <__ascii_mbtowc+0x1e>
 8011986:	7813      	ldrb	r3, [r2, #0]
 8011988:	600b      	str	r3, [r1, #0]
 801198a:	7812      	ldrb	r2, [r2, #0]
 801198c:	1e10      	subs	r0, r2, #0
 801198e:	bf18      	it	ne
 8011990:	2001      	movne	r0, #1
 8011992:	b002      	add	sp, #8
 8011994:	4770      	bx	lr
 8011996:	4610      	mov	r0, r2
 8011998:	e7fb      	b.n	8011992 <__ascii_mbtowc+0x16>
 801199a:	f06f 0001 	mvn.w	r0, #1
 801199e:	e7f8      	b.n	8011992 <__ascii_mbtowc+0x16>

080119a0 <_realloc_r>:
 80119a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119a4:	4607      	mov	r7, r0
 80119a6:	4614      	mov	r4, r2
 80119a8:	460d      	mov	r5, r1
 80119aa:	b921      	cbnz	r1, 80119b6 <_realloc_r+0x16>
 80119ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80119b0:	4611      	mov	r1, r2
 80119b2:	f7ff b97d 	b.w	8010cb0 <_malloc_r>
 80119b6:	b92a      	cbnz	r2, 80119c4 <_realloc_r+0x24>
 80119b8:	f7ff f906 	bl	8010bc8 <_free_r>
 80119bc:	4625      	mov	r5, r4
 80119be:	4628      	mov	r0, r5
 80119c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119c4:	f000 f841 	bl	8011a4a <_malloc_usable_size_r>
 80119c8:	4284      	cmp	r4, r0
 80119ca:	4606      	mov	r6, r0
 80119cc:	d802      	bhi.n	80119d4 <_realloc_r+0x34>
 80119ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80119d2:	d8f4      	bhi.n	80119be <_realloc_r+0x1e>
 80119d4:	4621      	mov	r1, r4
 80119d6:	4638      	mov	r0, r7
 80119d8:	f7ff f96a 	bl	8010cb0 <_malloc_r>
 80119dc:	4680      	mov	r8, r0
 80119de:	b908      	cbnz	r0, 80119e4 <_realloc_r+0x44>
 80119e0:	4645      	mov	r5, r8
 80119e2:	e7ec      	b.n	80119be <_realloc_r+0x1e>
 80119e4:	42b4      	cmp	r4, r6
 80119e6:	4622      	mov	r2, r4
 80119e8:	4629      	mov	r1, r5
 80119ea:	bf28      	it	cs
 80119ec:	4632      	movcs	r2, r6
 80119ee:	f7fe fa82 	bl	800fef6 <memcpy>
 80119f2:	4629      	mov	r1, r5
 80119f4:	4638      	mov	r0, r7
 80119f6:	f7ff f8e7 	bl	8010bc8 <_free_r>
 80119fa:	e7f1      	b.n	80119e0 <_realloc_r+0x40>

080119fc <__ascii_wctomb>:
 80119fc:	4603      	mov	r3, r0
 80119fe:	4608      	mov	r0, r1
 8011a00:	b141      	cbz	r1, 8011a14 <__ascii_wctomb+0x18>
 8011a02:	2aff      	cmp	r2, #255	@ 0xff
 8011a04:	d904      	bls.n	8011a10 <__ascii_wctomb+0x14>
 8011a06:	228a      	movs	r2, #138	@ 0x8a
 8011a08:	601a      	str	r2, [r3, #0]
 8011a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8011a0e:	4770      	bx	lr
 8011a10:	700a      	strb	r2, [r1, #0]
 8011a12:	2001      	movs	r0, #1
 8011a14:	4770      	bx	lr
	...

08011a18 <fiprintf>:
 8011a18:	b40e      	push	{r1, r2, r3}
 8011a1a:	b503      	push	{r0, r1, lr}
 8011a1c:	4601      	mov	r1, r0
 8011a1e:	ab03      	add	r3, sp, #12
 8011a20:	4805      	ldr	r0, [pc, #20]	@ (8011a38 <fiprintf+0x20>)
 8011a22:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a26:	6800      	ldr	r0, [r0, #0]
 8011a28:	9301      	str	r3, [sp, #4]
 8011a2a:	f000 f83f 	bl	8011aac <_vfiprintf_r>
 8011a2e:	b002      	add	sp, #8
 8011a30:	f85d eb04 	ldr.w	lr, [sp], #4
 8011a34:	b003      	add	sp, #12
 8011a36:	4770      	bx	lr
 8011a38:	2000019c 	.word	0x2000019c

08011a3c <abort>:
 8011a3c:	b508      	push	{r3, lr}
 8011a3e:	2006      	movs	r0, #6
 8011a40:	f000 fa08 	bl	8011e54 <raise>
 8011a44:	2001      	movs	r0, #1
 8011a46:	f7f1 fac1 	bl	8002fcc <_exit>

08011a4a <_malloc_usable_size_r>:
 8011a4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a4e:	1f18      	subs	r0, r3, #4
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	bfbc      	itt	lt
 8011a54:	580b      	ldrlt	r3, [r1, r0]
 8011a56:	18c0      	addlt	r0, r0, r3
 8011a58:	4770      	bx	lr

08011a5a <__sfputc_r>:
 8011a5a:	6893      	ldr	r3, [r2, #8]
 8011a5c:	3b01      	subs	r3, #1
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	b410      	push	{r4}
 8011a62:	6093      	str	r3, [r2, #8]
 8011a64:	da08      	bge.n	8011a78 <__sfputc_r+0x1e>
 8011a66:	6994      	ldr	r4, [r2, #24]
 8011a68:	42a3      	cmp	r3, r4
 8011a6a:	db01      	blt.n	8011a70 <__sfputc_r+0x16>
 8011a6c:	290a      	cmp	r1, #10
 8011a6e:	d103      	bne.n	8011a78 <__sfputc_r+0x1e>
 8011a70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a74:	f000 b932 	b.w	8011cdc <__swbuf_r>
 8011a78:	6813      	ldr	r3, [r2, #0]
 8011a7a:	1c58      	adds	r0, r3, #1
 8011a7c:	6010      	str	r0, [r2, #0]
 8011a7e:	7019      	strb	r1, [r3, #0]
 8011a80:	4608      	mov	r0, r1
 8011a82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a86:	4770      	bx	lr

08011a88 <__sfputs_r>:
 8011a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a8a:	4606      	mov	r6, r0
 8011a8c:	460f      	mov	r7, r1
 8011a8e:	4614      	mov	r4, r2
 8011a90:	18d5      	adds	r5, r2, r3
 8011a92:	42ac      	cmp	r4, r5
 8011a94:	d101      	bne.n	8011a9a <__sfputs_r+0x12>
 8011a96:	2000      	movs	r0, #0
 8011a98:	e007      	b.n	8011aaa <__sfputs_r+0x22>
 8011a9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a9e:	463a      	mov	r2, r7
 8011aa0:	4630      	mov	r0, r6
 8011aa2:	f7ff ffda 	bl	8011a5a <__sfputc_r>
 8011aa6:	1c43      	adds	r3, r0, #1
 8011aa8:	d1f3      	bne.n	8011a92 <__sfputs_r+0xa>
 8011aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011aac <_vfiprintf_r>:
 8011aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ab0:	460d      	mov	r5, r1
 8011ab2:	b09d      	sub	sp, #116	@ 0x74
 8011ab4:	4614      	mov	r4, r2
 8011ab6:	4698      	mov	r8, r3
 8011ab8:	4606      	mov	r6, r0
 8011aba:	b118      	cbz	r0, 8011ac4 <_vfiprintf_r+0x18>
 8011abc:	6a03      	ldr	r3, [r0, #32]
 8011abe:	b90b      	cbnz	r3, 8011ac4 <_vfiprintf_r+0x18>
 8011ac0:	f7fe f8c8 	bl	800fc54 <__sinit>
 8011ac4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011ac6:	07d9      	lsls	r1, r3, #31
 8011ac8:	d405      	bmi.n	8011ad6 <_vfiprintf_r+0x2a>
 8011aca:	89ab      	ldrh	r3, [r5, #12]
 8011acc:	059a      	lsls	r2, r3, #22
 8011ace:	d402      	bmi.n	8011ad6 <_vfiprintf_r+0x2a>
 8011ad0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011ad2:	f7fe fa0e 	bl	800fef2 <__retarget_lock_acquire_recursive>
 8011ad6:	89ab      	ldrh	r3, [r5, #12]
 8011ad8:	071b      	lsls	r3, r3, #28
 8011ada:	d501      	bpl.n	8011ae0 <_vfiprintf_r+0x34>
 8011adc:	692b      	ldr	r3, [r5, #16]
 8011ade:	b99b      	cbnz	r3, 8011b08 <_vfiprintf_r+0x5c>
 8011ae0:	4629      	mov	r1, r5
 8011ae2:	4630      	mov	r0, r6
 8011ae4:	f000 f938 	bl	8011d58 <__swsetup_r>
 8011ae8:	b170      	cbz	r0, 8011b08 <_vfiprintf_r+0x5c>
 8011aea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011aec:	07dc      	lsls	r4, r3, #31
 8011aee:	d504      	bpl.n	8011afa <_vfiprintf_r+0x4e>
 8011af0:	f04f 30ff 	mov.w	r0, #4294967295
 8011af4:	b01d      	add	sp, #116	@ 0x74
 8011af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011afa:	89ab      	ldrh	r3, [r5, #12]
 8011afc:	0598      	lsls	r0, r3, #22
 8011afe:	d4f7      	bmi.n	8011af0 <_vfiprintf_r+0x44>
 8011b00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011b02:	f7fe f9f7 	bl	800fef4 <__retarget_lock_release_recursive>
 8011b06:	e7f3      	b.n	8011af0 <_vfiprintf_r+0x44>
 8011b08:	2300      	movs	r3, #0
 8011b0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b0c:	2320      	movs	r3, #32
 8011b0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011b12:	f8cd 800c 	str.w	r8, [sp, #12]
 8011b16:	2330      	movs	r3, #48	@ 0x30
 8011b18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011cc8 <_vfiprintf_r+0x21c>
 8011b1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011b20:	f04f 0901 	mov.w	r9, #1
 8011b24:	4623      	mov	r3, r4
 8011b26:	469a      	mov	sl, r3
 8011b28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b2c:	b10a      	cbz	r2, 8011b32 <_vfiprintf_r+0x86>
 8011b2e:	2a25      	cmp	r2, #37	@ 0x25
 8011b30:	d1f9      	bne.n	8011b26 <_vfiprintf_r+0x7a>
 8011b32:	ebba 0b04 	subs.w	fp, sl, r4
 8011b36:	d00b      	beq.n	8011b50 <_vfiprintf_r+0xa4>
 8011b38:	465b      	mov	r3, fp
 8011b3a:	4622      	mov	r2, r4
 8011b3c:	4629      	mov	r1, r5
 8011b3e:	4630      	mov	r0, r6
 8011b40:	f7ff ffa2 	bl	8011a88 <__sfputs_r>
 8011b44:	3001      	adds	r0, #1
 8011b46:	f000 80a7 	beq.w	8011c98 <_vfiprintf_r+0x1ec>
 8011b4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011b4c:	445a      	add	r2, fp
 8011b4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8011b50:	f89a 3000 	ldrb.w	r3, [sl]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	f000 809f 	beq.w	8011c98 <_vfiprintf_r+0x1ec>
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8011b60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b64:	f10a 0a01 	add.w	sl, sl, #1
 8011b68:	9304      	str	r3, [sp, #16]
 8011b6a:	9307      	str	r3, [sp, #28]
 8011b6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011b70:	931a      	str	r3, [sp, #104]	@ 0x68
 8011b72:	4654      	mov	r4, sl
 8011b74:	2205      	movs	r2, #5
 8011b76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b7a:	4853      	ldr	r0, [pc, #332]	@ (8011cc8 <_vfiprintf_r+0x21c>)
 8011b7c:	f7ee fb30 	bl	80001e0 <memchr>
 8011b80:	9a04      	ldr	r2, [sp, #16]
 8011b82:	b9d8      	cbnz	r0, 8011bbc <_vfiprintf_r+0x110>
 8011b84:	06d1      	lsls	r1, r2, #27
 8011b86:	bf44      	itt	mi
 8011b88:	2320      	movmi	r3, #32
 8011b8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011b8e:	0713      	lsls	r3, r2, #28
 8011b90:	bf44      	itt	mi
 8011b92:	232b      	movmi	r3, #43	@ 0x2b
 8011b94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011b98:	f89a 3000 	ldrb.w	r3, [sl]
 8011b9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b9e:	d015      	beq.n	8011bcc <_vfiprintf_r+0x120>
 8011ba0:	9a07      	ldr	r2, [sp, #28]
 8011ba2:	4654      	mov	r4, sl
 8011ba4:	2000      	movs	r0, #0
 8011ba6:	f04f 0c0a 	mov.w	ip, #10
 8011baa:	4621      	mov	r1, r4
 8011bac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011bb0:	3b30      	subs	r3, #48	@ 0x30
 8011bb2:	2b09      	cmp	r3, #9
 8011bb4:	d94b      	bls.n	8011c4e <_vfiprintf_r+0x1a2>
 8011bb6:	b1b0      	cbz	r0, 8011be6 <_vfiprintf_r+0x13a>
 8011bb8:	9207      	str	r2, [sp, #28]
 8011bba:	e014      	b.n	8011be6 <_vfiprintf_r+0x13a>
 8011bbc:	eba0 0308 	sub.w	r3, r0, r8
 8011bc0:	fa09 f303 	lsl.w	r3, r9, r3
 8011bc4:	4313      	orrs	r3, r2
 8011bc6:	9304      	str	r3, [sp, #16]
 8011bc8:	46a2      	mov	sl, r4
 8011bca:	e7d2      	b.n	8011b72 <_vfiprintf_r+0xc6>
 8011bcc:	9b03      	ldr	r3, [sp, #12]
 8011bce:	1d19      	adds	r1, r3, #4
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	9103      	str	r1, [sp, #12]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	bfbb      	ittet	lt
 8011bd8:	425b      	neglt	r3, r3
 8011bda:	f042 0202 	orrlt.w	r2, r2, #2
 8011bde:	9307      	strge	r3, [sp, #28]
 8011be0:	9307      	strlt	r3, [sp, #28]
 8011be2:	bfb8      	it	lt
 8011be4:	9204      	strlt	r2, [sp, #16]
 8011be6:	7823      	ldrb	r3, [r4, #0]
 8011be8:	2b2e      	cmp	r3, #46	@ 0x2e
 8011bea:	d10a      	bne.n	8011c02 <_vfiprintf_r+0x156>
 8011bec:	7863      	ldrb	r3, [r4, #1]
 8011bee:	2b2a      	cmp	r3, #42	@ 0x2a
 8011bf0:	d132      	bne.n	8011c58 <_vfiprintf_r+0x1ac>
 8011bf2:	9b03      	ldr	r3, [sp, #12]
 8011bf4:	1d1a      	adds	r2, r3, #4
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	9203      	str	r2, [sp, #12]
 8011bfa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011bfe:	3402      	adds	r4, #2
 8011c00:	9305      	str	r3, [sp, #20]
 8011c02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011cd8 <_vfiprintf_r+0x22c>
 8011c06:	7821      	ldrb	r1, [r4, #0]
 8011c08:	2203      	movs	r2, #3
 8011c0a:	4650      	mov	r0, sl
 8011c0c:	f7ee fae8 	bl	80001e0 <memchr>
 8011c10:	b138      	cbz	r0, 8011c22 <_vfiprintf_r+0x176>
 8011c12:	9b04      	ldr	r3, [sp, #16]
 8011c14:	eba0 000a 	sub.w	r0, r0, sl
 8011c18:	2240      	movs	r2, #64	@ 0x40
 8011c1a:	4082      	lsls	r2, r0
 8011c1c:	4313      	orrs	r3, r2
 8011c1e:	3401      	adds	r4, #1
 8011c20:	9304      	str	r3, [sp, #16]
 8011c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c26:	4829      	ldr	r0, [pc, #164]	@ (8011ccc <_vfiprintf_r+0x220>)
 8011c28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011c2c:	2206      	movs	r2, #6
 8011c2e:	f7ee fad7 	bl	80001e0 <memchr>
 8011c32:	2800      	cmp	r0, #0
 8011c34:	d03f      	beq.n	8011cb6 <_vfiprintf_r+0x20a>
 8011c36:	4b26      	ldr	r3, [pc, #152]	@ (8011cd0 <_vfiprintf_r+0x224>)
 8011c38:	bb1b      	cbnz	r3, 8011c82 <_vfiprintf_r+0x1d6>
 8011c3a:	9b03      	ldr	r3, [sp, #12]
 8011c3c:	3307      	adds	r3, #7
 8011c3e:	f023 0307 	bic.w	r3, r3, #7
 8011c42:	3308      	adds	r3, #8
 8011c44:	9303      	str	r3, [sp, #12]
 8011c46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c48:	443b      	add	r3, r7
 8011c4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c4c:	e76a      	b.n	8011b24 <_vfiprintf_r+0x78>
 8011c4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c52:	460c      	mov	r4, r1
 8011c54:	2001      	movs	r0, #1
 8011c56:	e7a8      	b.n	8011baa <_vfiprintf_r+0xfe>
 8011c58:	2300      	movs	r3, #0
 8011c5a:	3401      	adds	r4, #1
 8011c5c:	9305      	str	r3, [sp, #20]
 8011c5e:	4619      	mov	r1, r3
 8011c60:	f04f 0c0a 	mov.w	ip, #10
 8011c64:	4620      	mov	r0, r4
 8011c66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c6a:	3a30      	subs	r2, #48	@ 0x30
 8011c6c:	2a09      	cmp	r2, #9
 8011c6e:	d903      	bls.n	8011c78 <_vfiprintf_r+0x1cc>
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d0c6      	beq.n	8011c02 <_vfiprintf_r+0x156>
 8011c74:	9105      	str	r1, [sp, #20]
 8011c76:	e7c4      	b.n	8011c02 <_vfiprintf_r+0x156>
 8011c78:	fb0c 2101 	mla	r1, ip, r1, r2
 8011c7c:	4604      	mov	r4, r0
 8011c7e:	2301      	movs	r3, #1
 8011c80:	e7f0      	b.n	8011c64 <_vfiprintf_r+0x1b8>
 8011c82:	ab03      	add	r3, sp, #12
 8011c84:	9300      	str	r3, [sp, #0]
 8011c86:	462a      	mov	r2, r5
 8011c88:	4b12      	ldr	r3, [pc, #72]	@ (8011cd4 <_vfiprintf_r+0x228>)
 8011c8a:	a904      	add	r1, sp, #16
 8011c8c:	4630      	mov	r0, r6
 8011c8e:	f7fd fb9f 	bl	800f3d0 <_printf_float>
 8011c92:	4607      	mov	r7, r0
 8011c94:	1c78      	adds	r0, r7, #1
 8011c96:	d1d6      	bne.n	8011c46 <_vfiprintf_r+0x19a>
 8011c98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011c9a:	07d9      	lsls	r1, r3, #31
 8011c9c:	d405      	bmi.n	8011caa <_vfiprintf_r+0x1fe>
 8011c9e:	89ab      	ldrh	r3, [r5, #12]
 8011ca0:	059a      	lsls	r2, r3, #22
 8011ca2:	d402      	bmi.n	8011caa <_vfiprintf_r+0x1fe>
 8011ca4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011ca6:	f7fe f925 	bl	800fef4 <__retarget_lock_release_recursive>
 8011caa:	89ab      	ldrh	r3, [r5, #12]
 8011cac:	065b      	lsls	r3, r3, #25
 8011cae:	f53f af1f 	bmi.w	8011af0 <_vfiprintf_r+0x44>
 8011cb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011cb4:	e71e      	b.n	8011af4 <_vfiprintf_r+0x48>
 8011cb6:	ab03      	add	r3, sp, #12
 8011cb8:	9300      	str	r3, [sp, #0]
 8011cba:	462a      	mov	r2, r5
 8011cbc:	4b05      	ldr	r3, [pc, #20]	@ (8011cd4 <_vfiprintf_r+0x228>)
 8011cbe:	a904      	add	r1, sp, #16
 8011cc0:	4630      	mov	r0, r6
 8011cc2:	f7fd fe1d 	bl	800f900 <_printf_i>
 8011cc6:	e7e4      	b.n	8011c92 <_vfiprintf_r+0x1e6>
 8011cc8:	08012adf 	.word	0x08012adf
 8011ccc:	08012ae9 	.word	0x08012ae9
 8011cd0:	0800f3d1 	.word	0x0800f3d1
 8011cd4:	08011a89 	.word	0x08011a89
 8011cd8:	08012ae5 	.word	0x08012ae5

08011cdc <__swbuf_r>:
 8011cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cde:	460e      	mov	r6, r1
 8011ce0:	4614      	mov	r4, r2
 8011ce2:	4605      	mov	r5, r0
 8011ce4:	b118      	cbz	r0, 8011cee <__swbuf_r+0x12>
 8011ce6:	6a03      	ldr	r3, [r0, #32]
 8011ce8:	b90b      	cbnz	r3, 8011cee <__swbuf_r+0x12>
 8011cea:	f7fd ffb3 	bl	800fc54 <__sinit>
 8011cee:	69a3      	ldr	r3, [r4, #24]
 8011cf0:	60a3      	str	r3, [r4, #8]
 8011cf2:	89a3      	ldrh	r3, [r4, #12]
 8011cf4:	071a      	lsls	r2, r3, #28
 8011cf6:	d501      	bpl.n	8011cfc <__swbuf_r+0x20>
 8011cf8:	6923      	ldr	r3, [r4, #16]
 8011cfa:	b943      	cbnz	r3, 8011d0e <__swbuf_r+0x32>
 8011cfc:	4621      	mov	r1, r4
 8011cfe:	4628      	mov	r0, r5
 8011d00:	f000 f82a 	bl	8011d58 <__swsetup_r>
 8011d04:	b118      	cbz	r0, 8011d0e <__swbuf_r+0x32>
 8011d06:	f04f 37ff 	mov.w	r7, #4294967295
 8011d0a:	4638      	mov	r0, r7
 8011d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d0e:	6823      	ldr	r3, [r4, #0]
 8011d10:	6922      	ldr	r2, [r4, #16]
 8011d12:	1a98      	subs	r0, r3, r2
 8011d14:	6963      	ldr	r3, [r4, #20]
 8011d16:	b2f6      	uxtb	r6, r6
 8011d18:	4283      	cmp	r3, r0
 8011d1a:	4637      	mov	r7, r6
 8011d1c:	dc05      	bgt.n	8011d2a <__swbuf_r+0x4e>
 8011d1e:	4621      	mov	r1, r4
 8011d20:	4628      	mov	r0, r5
 8011d22:	f7ff fda7 	bl	8011874 <_fflush_r>
 8011d26:	2800      	cmp	r0, #0
 8011d28:	d1ed      	bne.n	8011d06 <__swbuf_r+0x2a>
 8011d2a:	68a3      	ldr	r3, [r4, #8]
 8011d2c:	3b01      	subs	r3, #1
 8011d2e:	60a3      	str	r3, [r4, #8]
 8011d30:	6823      	ldr	r3, [r4, #0]
 8011d32:	1c5a      	adds	r2, r3, #1
 8011d34:	6022      	str	r2, [r4, #0]
 8011d36:	701e      	strb	r6, [r3, #0]
 8011d38:	6962      	ldr	r2, [r4, #20]
 8011d3a:	1c43      	adds	r3, r0, #1
 8011d3c:	429a      	cmp	r2, r3
 8011d3e:	d004      	beq.n	8011d4a <__swbuf_r+0x6e>
 8011d40:	89a3      	ldrh	r3, [r4, #12]
 8011d42:	07db      	lsls	r3, r3, #31
 8011d44:	d5e1      	bpl.n	8011d0a <__swbuf_r+0x2e>
 8011d46:	2e0a      	cmp	r6, #10
 8011d48:	d1df      	bne.n	8011d0a <__swbuf_r+0x2e>
 8011d4a:	4621      	mov	r1, r4
 8011d4c:	4628      	mov	r0, r5
 8011d4e:	f7ff fd91 	bl	8011874 <_fflush_r>
 8011d52:	2800      	cmp	r0, #0
 8011d54:	d0d9      	beq.n	8011d0a <__swbuf_r+0x2e>
 8011d56:	e7d6      	b.n	8011d06 <__swbuf_r+0x2a>

08011d58 <__swsetup_r>:
 8011d58:	b538      	push	{r3, r4, r5, lr}
 8011d5a:	4b29      	ldr	r3, [pc, #164]	@ (8011e00 <__swsetup_r+0xa8>)
 8011d5c:	4605      	mov	r5, r0
 8011d5e:	6818      	ldr	r0, [r3, #0]
 8011d60:	460c      	mov	r4, r1
 8011d62:	b118      	cbz	r0, 8011d6c <__swsetup_r+0x14>
 8011d64:	6a03      	ldr	r3, [r0, #32]
 8011d66:	b90b      	cbnz	r3, 8011d6c <__swsetup_r+0x14>
 8011d68:	f7fd ff74 	bl	800fc54 <__sinit>
 8011d6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d70:	0719      	lsls	r1, r3, #28
 8011d72:	d422      	bmi.n	8011dba <__swsetup_r+0x62>
 8011d74:	06da      	lsls	r2, r3, #27
 8011d76:	d407      	bmi.n	8011d88 <__swsetup_r+0x30>
 8011d78:	2209      	movs	r2, #9
 8011d7a:	602a      	str	r2, [r5, #0]
 8011d7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d80:	81a3      	strh	r3, [r4, #12]
 8011d82:	f04f 30ff 	mov.w	r0, #4294967295
 8011d86:	e033      	b.n	8011df0 <__swsetup_r+0x98>
 8011d88:	0758      	lsls	r0, r3, #29
 8011d8a:	d512      	bpl.n	8011db2 <__swsetup_r+0x5a>
 8011d8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011d8e:	b141      	cbz	r1, 8011da2 <__swsetup_r+0x4a>
 8011d90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011d94:	4299      	cmp	r1, r3
 8011d96:	d002      	beq.n	8011d9e <__swsetup_r+0x46>
 8011d98:	4628      	mov	r0, r5
 8011d9a:	f7fe ff15 	bl	8010bc8 <_free_r>
 8011d9e:	2300      	movs	r3, #0
 8011da0:	6363      	str	r3, [r4, #52]	@ 0x34
 8011da2:	89a3      	ldrh	r3, [r4, #12]
 8011da4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011da8:	81a3      	strh	r3, [r4, #12]
 8011daa:	2300      	movs	r3, #0
 8011dac:	6063      	str	r3, [r4, #4]
 8011dae:	6923      	ldr	r3, [r4, #16]
 8011db0:	6023      	str	r3, [r4, #0]
 8011db2:	89a3      	ldrh	r3, [r4, #12]
 8011db4:	f043 0308 	orr.w	r3, r3, #8
 8011db8:	81a3      	strh	r3, [r4, #12]
 8011dba:	6923      	ldr	r3, [r4, #16]
 8011dbc:	b94b      	cbnz	r3, 8011dd2 <__swsetup_r+0x7a>
 8011dbe:	89a3      	ldrh	r3, [r4, #12]
 8011dc0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011dc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011dc8:	d003      	beq.n	8011dd2 <__swsetup_r+0x7a>
 8011dca:	4621      	mov	r1, r4
 8011dcc:	4628      	mov	r0, r5
 8011dce:	f000 f883 	bl	8011ed8 <__smakebuf_r>
 8011dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011dd6:	f013 0201 	ands.w	r2, r3, #1
 8011dda:	d00a      	beq.n	8011df2 <__swsetup_r+0x9a>
 8011ddc:	2200      	movs	r2, #0
 8011dde:	60a2      	str	r2, [r4, #8]
 8011de0:	6962      	ldr	r2, [r4, #20]
 8011de2:	4252      	negs	r2, r2
 8011de4:	61a2      	str	r2, [r4, #24]
 8011de6:	6922      	ldr	r2, [r4, #16]
 8011de8:	b942      	cbnz	r2, 8011dfc <__swsetup_r+0xa4>
 8011dea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011dee:	d1c5      	bne.n	8011d7c <__swsetup_r+0x24>
 8011df0:	bd38      	pop	{r3, r4, r5, pc}
 8011df2:	0799      	lsls	r1, r3, #30
 8011df4:	bf58      	it	pl
 8011df6:	6962      	ldrpl	r2, [r4, #20]
 8011df8:	60a2      	str	r2, [r4, #8]
 8011dfa:	e7f4      	b.n	8011de6 <__swsetup_r+0x8e>
 8011dfc:	2000      	movs	r0, #0
 8011dfe:	e7f7      	b.n	8011df0 <__swsetup_r+0x98>
 8011e00:	2000019c 	.word	0x2000019c

08011e04 <_raise_r>:
 8011e04:	291f      	cmp	r1, #31
 8011e06:	b538      	push	{r3, r4, r5, lr}
 8011e08:	4605      	mov	r5, r0
 8011e0a:	460c      	mov	r4, r1
 8011e0c:	d904      	bls.n	8011e18 <_raise_r+0x14>
 8011e0e:	2316      	movs	r3, #22
 8011e10:	6003      	str	r3, [r0, #0]
 8011e12:	f04f 30ff 	mov.w	r0, #4294967295
 8011e16:	bd38      	pop	{r3, r4, r5, pc}
 8011e18:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011e1a:	b112      	cbz	r2, 8011e22 <_raise_r+0x1e>
 8011e1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011e20:	b94b      	cbnz	r3, 8011e36 <_raise_r+0x32>
 8011e22:	4628      	mov	r0, r5
 8011e24:	f000 f830 	bl	8011e88 <_getpid_r>
 8011e28:	4622      	mov	r2, r4
 8011e2a:	4601      	mov	r1, r0
 8011e2c:	4628      	mov	r0, r5
 8011e2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e32:	f000 b817 	b.w	8011e64 <_kill_r>
 8011e36:	2b01      	cmp	r3, #1
 8011e38:	d00a      	beq.n	8011e50 <_raise_r+0x4c>
 8011e3a:	1c59      	adds	r1, r3, #1
 8011e3c:	d103      	bne.n	8011e46 <_raise_r+0x42>
 8011e3e:	2316      	movs	r3, #22
 8011e40:	6003      	str	r3, [r0, #0]
 8011e42:	2001      	movs	r0, #1
 8011e44:	e7e7      	b.n	8011e16 <_raise_r+0x12>
 8011e46:	2100      	movs	r1, #0
 8011e48:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011e4c:	4620      	mov	r0, r4
 8011e4e:	4798      	blx	r3
 8011e50:	2000      	movs	r0, #0
 8011e52:	e7e0      	b.n	8011e16 <_raise_r+0x12>

08011e54 <raise>:
 8011e54:	4b02      	ldr	r3, [pc, #8]	@ (8011e60 <raise+0xc>)
 8011e56:	4601      	mov	r1, r0
 8011e58:	6818      	ldr	r0, [r3, #0]
 8011e5a:	f7ff bfd3 	b.w	8011e04 <_raise_r>
 8011e5e:	bf00      	nop
 8011e60:	2000019c 	.word	0x2000019c

08011e64 <_kill_r>:
 8011e64:	b538      	push	{r3, r4, r5, lr}
 8011e66:	4d07      	ldr	r5, [pc, #28]	@ (8011e84 <_kill_r+0x20>)
 8011e68:	2300      	movs	r3, #0
 8011e6a:	4604      	mov	r4, r0
 8011e6c:	4608      	mov	r0, r1
 8011e6e:	4611      	mov	r1, r2
 8011e70:	602b      	str	r3, [r5, #0]
 8011e72:	f7f1 f89b 	bl	8002fac <_kill>
 8011e76:	1c43      	adds	r3, r0, #1
 8011e78:	d102      	bne.n	8011e80 <_kill_r+0x1c>
 8011e7a:	682b      	ldr	r3, [r5, #0]
 8011e7c:	b103      	cbz	r3, 8011e80 <_kill_r+0x1c>
 8011e7e:	6023      	str	r3, [r4, #0]
 8011e80:	bd38      	pop	{r3, r4, r5, pc}
 8011e82:	bf00      	nop
 8011e84:	20006560 	.word	0x20006560

08011e88 <_getpid_r>:
 8011e88:	f7f1 b888 	b.w	8002f9c <_getpid>

08011e8c <__swhatbuf_r>:
 8011e8c:	b570      	push	{r4, r5, r6, lr}
 8011e8e:	460c      	mov	r4, r1
 8011e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e94:	2900      	cmp	r1, #0
 8011e96:	b096      	sub	sp, #88	@ 0x58
 8011e98:	4615      	mov	r5, r2
 8011e9a:	461e      	mov	r6, r3
 8011e9c:	da0d      	bge.n	8011eba <__swhatbuf_r+0x2e>
 8011e9e:	89a3      	ldrh	r3, [r4, #12]
 8011ea0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011ea4:	f04f 0100 	mov.w	r1, #0
 8011ea8:	bf14      	ite	ne
 8011eaa:	2340      	movne	r3, #64	@ 0x40
 8011eac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011eb0:	2000      	movs	r0, #0
 8011eb2:	6031      	str	r1, [r6, #0]
 8011eb4:	602b      	str	r3, [r5, #0]
 8011eb6:	b016      	add	sp, #88	@ 0x58
 8011eb8:	bd70      	pop	{r4, r5, r6, pc}
 8011eba:	466a      	mov	r2, sp
 8011ebc:	f000 f848 	bl	8011f50 <_fstat_r>
 8011ec0:	2800      	cmp	r0, #0
 8011ec2:	dbec      	blt.n	8011e9e <__swhatbuf_r+0x12>
 8011ec4:	9901      	ldr	r1, [sp, #4]
 8011ec6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011eca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011ece:	4259      	negs	r1, r3
 8011ed0:	4159      	adcs	r1, r3
 8011ed2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011ed6:	e7eb      	b.n	8011eb0 <__swhatbuf_r+0x24>

08011ed8 <__smakebuf_r>:
 8011ed8:	898b      	ldrh	r3, [r1, #12]
 8011eda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011edc:	079d      	lsls	r5, r3, #30
 8011ede:	4606      	mov	r6, r0
 8011ee0:	460c      	mov	r4, r1
 8011ee2:	d507      	bpl.n	8011ef4 <__smakebuf_r+0x1c>
 8011ee4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011ee8:	6023      	str	r3, [r4, #0]
 8011eea:	6123      	str	r3, [r4, #16]
 8011eec:	2301      	movs	r3, #1
 8011eee:	6163      	str	r3, [r4, #20]
 8011ef0:	b003      	add	sp, #12
 8011ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ef4:	ab01      	add	r3, sp, #4
 8011ef6:	466a      	mov	r2, sp
 8011ef8:	f7ff ffc8 	bl	8011e8c <__swhatbuf_r>
 8011efc:	9f00      	ldr	r7, [sp, #0]
 8011efe:	4605      	mov	r5, r0
 8011f00:	4639      	mov	r1, r7
 8011f02:	4630      	mov	r0, r6
 8011f04:	f7fe fed4 	bl	8010cb0 <_malloc_r>
 8011f08:	b948      	cbnz	r0, 8011f1e <__smakebuf_r+0x46>
 8011f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f0e:	059a      	lsls	r2, r3, #22
 8011f10:	d4ee      	bmi.n	8011ef0 <__smakebuf_r+0x18>
 8011f12:	f023 0303 	bic.w	r3, r3, #3
 8011f16:	f043 0302 	orr.w	r3, r3, #2
 8011f1a:	81a3      	strh	r3, [r4, #12]
 8011f1c:	e7e2      	b.n	8011ee4 <__smakebuf_r+0xc>
 8011f1e:	89a3      	ldrh	r3, [r4, #12]
 8011f20:	6020      	str	r0, [r4, #0]
 8011f22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f26:	81a3      	strh	r3, [r4, #12]
 8011f28:	9b01      	ldr	r3, [sp, #4]
 8011f2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011f2e:	b15b      	cbz	r3, 8011f48 <__smakebuf_r+0x70>
 8011f30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f34:	4630      	mov	r0, r6
 8011f36:	f000 f81d 	bl	8011f74 <_isatty_r>
 8011f3a:	b128      	cbz	r0, 8011f48 <__smakebuf_r+0x70>
 8011f3c:	89a3      	ldrh	r3, [r4, #12]
 8011f3e:	f023 0303 	bic.w	r3, r3, #3
 8011f42:	f043 0301 	orr.w	r3, r3, #1
 8011f46:	81a3      	strh	r3, [r4, #12]
 8011f48:	89a3      	ldrh	r3, [r4, #12]
 8011f4a:	431d      	orrs	r5, r3
 8011f4c:	81a5      	strh	r5, [r4, #12]
 8011f4e:	e7cf      	b.n	8011ef0 <__smakebuf_r+0x18>

08011f50 <_fstat_r>:
 8011f50:	b538      	push	{r3, r4, r5, lr}
 8011f52:	4d07      	ldr	r5, [pc, #28]	@ (8011f70 <_fstat_r+0x20>)
 8011f54:	2300      	movs	r3, #0
 8011f56:	4604      	mov	r4, r0
 8011f58:	4608      	mov	r0, r1
 8011f5a:	4611      	mov	r1, r2
 8011f5c:	602b      	str	r3, [r5, #0]
 8011f5e:	f7f1 f885 	bl	800306c <_fstat>
 8011f62:	1c43      	adds	r3, r0, #1
 8011f64:	d102      	bne.n	8011f6c <_fstat_r+0x1c>
 8011f66:	682b      	ldr	r3, [r5, #0]
 8011f68:	b103      	cbz	r3, 8011f6c <_fstat_r+0x1c>
 8011f6a:	6023      	str	r3, [r4, #0]
 8011f6c:	bd38      	pop	{r3, r4, r5, pc}
 8011f6e:	bf00      	nop
 8011f70:	20006560 	.word	0x20006560

08011f74 <_isatty_r>:
 8011f74:	b538      	push	{r3, r4, r5, lr}
 8011f76:	4d06      	ldr	r5, [pc, #24]	@ (8011f90 <_isatty_r+0x1c>)
 8011f78:	2300      	movs	r3, #0
 8011f7a:	4604      	mov	r4, r0
 8011f7c:	4608      	mov	r0, r1
 8011f7e:	602b      	str	r3, [r5, #0]
 8011f80:	f7f1 f884 	bl	800308c <_isatty>
 8011f84:	1c43      	adds	r3, r0, #1
 8011f86:	d102      	bne.n	8011f8e <_isatty_r+0x1a>
 8011f88:	682b      	ldr	r3, [r5, #0]
 8011f8a:	b103      	cbz	r3, 8011f8e <_isatty_r+0x1a>
 8011f8c:	6023      	str	r3, [r4, #0]
 8011f8e:	bd38      	pop	{r3, r4, r5, pc}
 8011f90:	20006560 	.word	0x20006560

08011f94 <atan2>:
 8011f94:	f000 baa4 	b.w	80124e0 <__ieee754_atan2>

08011f98 <sqrt>:
 8011f98:	b538      	push	{r3, r4, r5, lr}
 8011f9a:	ed2d 8b02 	vpush	{d8}
 8011f9e:	ec55 4b10 	vmov	r4, r5, d0
 8011fa2:	f000 f9c5 	bl	8012330 <__ieee754_sqrt>
 8011fa6:	4622      	mov	r2, r4
 8011fa8:	462b      	mov	r3, r5
 8011faa:	4620      	mov	r0, r4
 8011fac:	4629      	mov	r1, r5
 8011fae:	eeb0 8a40 	vmov.f32	s16, s0
 8011fb2:	eef0 8a60 	vmov.f32	s17, s1
 8011fb6:	f7ee fdc1 	bl	8000b3c <__aeabi_dcmpun>
 8011fba:	b990      	cbnz	r0, 8011fe2 <sqrt+0x4a>
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	4620      	mov	r0, r4
 8011fc2:	4629      	mov	r1, r5
 8011fc4:	f7ee fd92 	bl	8000aec <__aeabi_dcmplt>
 8011fc8:	b158      	cbz	r0, 8011fe2 <sqrt+0x4a>
 8011fca:	f7fd ff67 	bl	800fe9c <__errno>
 8011fce:	2321      	movs	r3, #33	@ 0x21
 8011fd0:	6003      	str	r3, [r0, #0]
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	4610      	mov	r0, r2
 8011fd8:	4619      	mov	r1, r3
 8011fda:	f7ee fc3f 	bl	800085c <__aeabi_ddiv>
 8011fde:	ec41 0b18 	vmov	d8, r0, r1
 8011fe2:	eeb0 0a48 	vmov.f32	s0, s16
 8011fe6:	eef0 0a68 	vmov.f32	s1, s17
 8011fea:	ecbd 8b02 	vpop	{d8}
 8011fee:	bd38      	pop	{r3, r4, r5, pc}

08011ff0 <atan>:
 8011ff0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ff4:	ec55 4b10 	vmov	r4, r5, d0
 8011ff8:	4bbf      	ldr	r3, [pc, #764]	@ (80122f8 <atan+0x308>)
 8011ffa:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8011ffe:	429e      	cmp	r6, r3
 8012000:	46ab      	mov	fp, r5
 8012002:	d918      	bls.n	8012036 <atan+0x46>
 8012004:	4bbd      	ldr	r3, [pc, #756]	@ (80122fc <atan+0x30c>)
 8012006:	429e      	cmp	r6, r3
 8012008:	d801      	bhi.n	801200e <atan+0x1e>
 801200a:	d109      	bne.n	8012020 <atan+0x30>
 801200c:	b144      	cbz	r4, 8012020 <atan+0x30>
 801200e:	4622      	mov	r2, r4
 8012010:	462b      	mov	r3, r5
 8012012:	4620      	mov	r0, r4
 8012014:	4629      	mov	r1, r5
 8012016:	f7ee f941 	bl	800029c <__adddf3>
 801201a:	4604      	mov	r4, r0
 801201c:	460d      	mov	r5, r1
 801201e:	e006      	b.n	801202e <atan+0x3e>
 8012020:	f1bb 0f00 	cmp.w	fp, #0
 8012024:	f340 812b 	ble.w	801227e <atan+0x28e>
 8012028:	a597      	add	r5, pc, #604	@ (adr r5, 8012288 <atan+0x298>)
 801202a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801202e:	ec45 4b10 	vmov	d0, r4, r5
 8012032:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012036:	4bb2      	ldr	r3, [pc, #712]	@ (8012300 <atan+0x310>)
 8012038:	429e      	cmp	r6, r3
 801203a:	d813      	bhi.n	8012064 <atan+0x74>
 801203c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8012040:	429e      	cmp	r6, r3
 8012042:	d80c      	bhi.n	801205e <atan+0x6e>
 8012044:	a392      	add	r3, pc, #584	@ (adr r3, 8012290 <atan+0x2a0>)
 8012046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801204a:	4620      	mov	r0, r4
 801204c:	4629      	mov	r1, r5
 801204e:	f7ee f925 	bl	800029c <__adddf3>
 8012052:	4bac      	ldr	r3, [pc, #688]	@ (8012304 <atan+0x314>)
 8012054:	2200      	movs	r2, #0
 8012056:	f7ee fd67 	bl	8000b28 <__aeabi_dcmpgt>
 801205a:	2800      	cmp	r0, #0
 801205c:	d1e7      	bne.n	801202e <atan+0x3e>
 801205e:	f04f 3aff 	mov.w	sl, #4294967295
 8012062:	e029      	b.n	80120b8 <atan+0xc8>
 8012064:	f000 f95c 	bl	8012320 <fabs>
 8012068:	4ba7      	ldr	r3, [pc, #668]	@ (8012308 <atan+0x318>)
 801206a:	429e      	cmp	r6, r3
 801206c:	ec55 4b10 	vmov	r4, r5, d0
 8012070:	f200 80bc 	bhi.w	80121ec <atan+0x1fc>
 8012074:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8012078:	429e      	cmp	r6, r3
 801207a:	f200 809e 	bhi.w	80121ba <atan+0x1ca>
 801207e:	4622      	mov	r2, r4
 8012080:	462b      	mov	r3, r5
 8012082:	4620      	mov	r0, r4
 8012084:	4629      	mov	r1, r5
 8012086:	f7ee f909 	bl	800029c <__adddf3>
 801208a:	4b9e      	ldr	r3, [pc, #632]	@ (8012304 <atan+0x314>)
 801208c:	2200      	movs	r2, #0
 801208e:	f7ee f903 	bl	8000298 <__aeabi_dsub>
 8012092:	2200      	movs	r2, #0
 8012094:	4606      	mov	r6, r0
 8012096:	460f      	mov	r7, r1
 8012098:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801209c:	4620      	mov	r0, r4
 801209e:	4629      	mov	r1, r5
 80120a0:	f7ee f8fc 	bl	800029c <__adddf3>
 80120a4:	4602      	mov	r2, r0
 80120a6:	460b      	mov	r3, r1
 80120a8:	4630      	mov	r0, r6
 80120aa:	4639      	mov	r1, r7
 80120ac:	f7ee fbd6 	bl	800085c <__aeabi_ddiv>
 80120b0:	f04f 0a00 	mov.w	sl, #0
 80120b4:	4604      	mov	r4, r0
 80120b6:	460d      	mov	r5, r1
 80120b8:	4622      	mov	r2, r4
 80120ba:	462b      	mov	r3, r5
 80120bc:	4620      	mov	r0, r4
 80120be:	4629      	mov	r1, r5
 80120c0:	f7ee faa2 	bl	8000608 <__aeabi_dmul>
 80120c4:	4602      	mov	r2, r0
 80120c6:	460b      	mov	r3, r1
 80120c8:	4680      	mov	r8, r0
 80120ca:	4689      	mov	r9, r1
 80120cc:	f7ee fa9c 	bl	8000608 <__aeabi_dmul>
 80120d0:	a371      	add	r3, pc, #452	@ (adr r3, 8012298 <atan+0x2a8>)
 80120d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120d6:	4606      	mov	r6, r0
 80120d8:	460f      	mov	r7, r1
 80120da:	f7ee fa95 	bl	8000608 <__aeabi_dmul>
 80120de:	a370      	add	r3, pc, #448	@ (adr r3, 80122a0 <atan+0x2b0>)
 80120e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120e4:	f7ee f8da 	bl	800029c <__adddf3>
 80120e8:	4632      	mov	r2, r6
 80120ea:	463b      	mov	r3, r7
 80120ec:	f7ee fa8c 	bl	8000608 <__aeabi_dmul>
 80120f0:	a36d      	add	r3, pc, #436	@ (adr r3, 80122a8 <atan+0x2b8>)
 80120f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120f6:	f7ee f8d1 	bl	800029c <__adddf3>
 80120fa:	4632      	mov	r2, r6
 80120fc:	463b      	mov	r3, r7
 80120fe:	f7ee fa83 	bl	8000608 <__aeabi_dmul>
 8012102:	a36b      	add	r3, pc, #428	@ (adr r3, 80122b0 <atan+0x2c0>)
 8012104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012108:	f7ee f8c8 	bl	800029c <__adddf3>
 801210c:	4632      	mov	r2, r6
 801210e:	463b      	mov	r3, r7
 8012110:	f7ee fa7a 	bl	8000608 <__aeabi_dmul>
 8012114:	a368      	add	r3, pc, #416	@ (adr r3, 80122b8 <atan+0x2c8>)
 8012116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801211a:	f7ee f8bf 	bl	800029c <__adddf3>
 801211e:	4632      	mov	r2, r6
 8012120:	463b      	mov	r3, r7
 8012122:	f7ee fa71 	bl	8000608 <__aeabi_dmul>
 8012126:	a366      	add	r3, pc, #408	@ (adr r3, 80122c0 <atan+0x2d0>)
 8012128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801212c:	f7ee f8b6 	bl	800029c <__adddf3>
 8012130:	4642      	mov	r2, r8
 8012132:	464b      	mov	r3, r9
 8012134:	f7ee fa68 	bl	8000608 <__aeabi_dmul>
 8012138:	a363      	add	r3, pc, #396	@ (adr r3, 80122c8 <atan+0x2d8>)
 801213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801213e:	4680      	mov	r8, r0
 8012140:	4689      	mov	r9, r1
 8012142:	4630      	mov	r0, r6
 8012144:	4639      	mov	r1, r7
 8012146:	f7ee fa5f 	bl	8000608 <__aeabi_dmul>
 801214a:	a361      	add	r3, pc, #388	@ (adr r3, 80122d0 <atan+0x2e0>)
 801214c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012150:	f7ee f8a2 	bl	8000298 <__aeabi_dsub>
 8012154:	4632      	mov	r2, r6
 8012156:	463b      	mov	r3, r7
 8012158:	f7ee fa56 	bl	8000608 <__aeabi_dmul>
 801215c:	a35e      	add	r3, pc, #376	@ (adr r3, 80122d8 <atan+0x2e8>)
 801215e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012162:	f7ee f899 	bl	8000298 <__aeabi_dsub>
 8012166:	4632      	mov	r2, r6
 8012168:	463b      	mov	r3, r7
 801216a:	f7ee fa4d 	bl	8000608 <__aeabi_dmul>
 801216e:	a35c      	add	r3, pc, #368	@ (adr r3, 80122e0 <atan+0x2f0>)
 8012170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012174:	f7ee f890 	bl	8000298 <__aeabi_dsub>
 8012178:	4632      	mov	r2, r6
 801217a:	463b      	mov	r3, r7
 801217c:	f7ee fa44 	bl	8000608 <__aeabi_dmul>
 8012180:	a359      	add	r3, pc, #356	@ (adr r3, 80122e8 <atan+0x2f8>)
 8012182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012186:	f7ee f887 	bl	8000298 <__aeabi_dsub>
 801218a:	4632      	mov	r2, r6
 801218c:	463b      	mov	r3, r7
 801218e:	f7ee fa3b 	bl	8000608 <__aeabi_dmul>
 8012192:	4602      	mov	r2, r0
 8012194:	460b      	mov	r3, r1
 8012196:	4640      	mov	r0, r8
 8012198:	4649      	mov	r1, r9
 801219a:	f7ee f87f 	bl	800029c <__adddf3>
 801219e:	4622      	mov	r2, r4
 80121a0:	462b      	mov	r3, r5
 80121a2:	f7ee fa31 	bl	8000608 <__aeabi_dmul>
 80121a6:	f1ba 3fff 	cmp.w	sl, #4294967295
 80121aa:	4602      	mov	r2, r0
 80121ac:	460b      	mov	r3, r1
 80121ae:	d148      	bne.n	8012242 <atan+0x252>
 80121b0:	4620      	mov	r0, r4
 80121b2:	4629      	mov	r1, r5
 80121b4:	f7ee f870 	bl	8000298 <__aeabi_dsub>
 80121b8:	e72f      	b.n	801201a <atan+0x2a>
 80121ba:	4b52      	ldr	r3, [pc, #328]	@ (8012304 <atan+0x314>)
 80121bc:	2200      	movs	r2, #0
 80121be:	4620      	mov	r0, r4
 80121c0:	4629      	mov	r1, r5
 80121c2:	f7ee f869 	bl	8000298 <__aeabi_dsub>
 80121c6:	4b4f      	ldr	r3, [pc, #316]	@ (8012304 <atan+0x314>)
 80121c8:	4606      	mov	r6, r0
 80121ca:	460f      	mov	r7, r1
 80121cc:	2200      	movs	r2, #0
 80121ce:	4620      	mov	r0, r4
 80121d0:	4629      	mov	r1, r5
 80121d2:	f7ee f863 	bl	800029c <__adddf3>
 80121d6:	4602      	mov	r2, r0
 80121d8:	460b      	mov	r3, r1
 80121da:	4630      	mov	r0, r6
 80121dc:	4639      	mov	r1, r7
 80121de:	f7ee fb3d 	bl	800085c <__aeabi_ddiv>
 80121e2:	f04f 0a01 	mov.w	sl, #1
 80121e6:	4604      	mov	r4, r0
 80121e8:	460d      	mov	r5, r1
 80121ea:	e765      	b.n	80120b8 <atan+0xc8>
 80121ec:	4b47      	ldr	r3, [pc, #284]	@ (801230c <atan+0x31c>)
 80121ee:	429e      	cmp	r6, r3
 80121f0:	d21c      	bcs.n	801222c <atan+0x23c>
 80121f2:	4b47      	ldr	r3, [pc, #284]	@ (8012310 <atan+0x320>)
 80121f4:	2200      	movs	r2, #0
 80121f6:	4620      	mov	r0, r4
 80121f8:	4629      	mov	r1, r5
 80121fa:	f7ee f84d 	bl	8000298 <__aeabi_dsub>
 80121fe:	4b44      	ldr	r3, [pc, #272]	@ (8012310 <atan+0x320>)
 8012200:	4606      	mov	r6, r0
 8012202:	460f      	mov	r7, r1
 8012204:	2200      	movs	r2, #0
 8012206:	4620      	mov	r0, r4
 8012208:	4629      	mov	r1, r5
 801220a:	f7ee f9fd 	bl	8000608 <__aeabi_dmul>
 801220e:	4b3d      	ldr	r3, [pc, #244]	@ (8012304 <atan+0x314>)
 8012210:	2200      	movs	r2, #0
 8012212:	f7ee f843 	bl	800029c <__adddf3>
 8012216:	4602      	mov	r2, r0
 8012218:	460b      	mov	r3, r1
 801221a:	4630      	mov	r0, r6
 801221c:	4639      	mov	r1, r7
 801221e:	f7ee fb1d 	bl	800085c <__aeabi_ddiv>
 8012222:	f04f 0a02 	mov.w	sl, #2
 8012226:	4604      	mov	r4, r0
 8012228:	460d      	mov	r5, r1
 801222a:	e745      	b.n	80120b8 <atan+0xc8>
 801222c:	4622      	mov	r2, r4
 801222e:	462b      	mov	r3, r5
 8012230:	4938      	ldr	r1, [pc, #224]	@ (8012314 <atan+0x324>)
 8012232:	2000      	movs	r0, #0
 8012234:	f7ee fb12 	bl	800085c <__aeabi_ddiv>
 8012238:	f04f 0a03 	mov.w	sl, #3
 801223c:	4604      	mov	r4, r0
 801223e:	460d      	mov	r5, r1
 8012240:	e73a      	b.n	80120b8 <atan+0xc8>
 8012242:	4b35      	ldr	r3, [pc, #212]	@ (8012318 <atan+0x328>)
 8012244:	4e35      	ldr	r6, [pc, #212]	@ (801231c <atan+0x32c>)
 8012246:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801224a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801224e:	f7ee f823 	bl	8000298 <__aeabi_dsub>
 8012252:	4622      	mov	r2, r4
 8012254:	462b      	mov	r3, r5
 8012256:	f7ee f81f 	bl	8000298 <__aeabi_dsub>
 801225a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801225e:	4602      	mov	r2, r0
 8012260:	460b      	mov	r3, r1
 8012262:	e9d6 0100 	ldrd	r0, r1, [r6]
 8012266:	f7ee f817 	bl	8000298 <__aeabi_dsub>
 801226a:	f1bb 0f00 	cmp.w	fp, #0
 801226e:	4604      	mov	r4, r0
 8012270:	460d      	mov	r5, r1
 8012272:	f6bf aedc 	bge.w	801202e <atan+0x3e>
 8012276:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801227a:	461d      	mov	r5, r3
 801227c:	e6d7      	b.n	801202e <atan+0x3e>
 801227e:	a51c      	add	r5, pc, #112	@ (adr r5, 80122f0 <atan+0x300>)
 8012280:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012284:	e6d3      	b.n	801202e <atan+0x3e>
 8012286:	bf00      	nop
 8012288:	54442d18 	.word	0x54442d18
 801228c:	3ff921fb 	.word	0x3ff921fb
 8012290:	8800759c 	.word	0x8800759c
 8012294:	7e37e43c 	.word	0x7e37e43c
 8012298:	e322da11 	.word	0xe322da11
 801229c:	3f90ad3a 	.word	0x3f90ad3a
 80122a0:	24760deb 	.word	0x24760deb
 80122a4:	3fa97b4b 	.word	0x3fa97b4b
 80122a8:	a0d03d51 	.word	0xa0d03d51
 80122ac:	3fb10d66 	.word	0x3fb10d66
 80122b0:	c54c206e 	.word	0xc54c206e
 80122b4:	3fb745cd 	.word	0x3fb745cd
 80122b8:	920083ff 	.word	0x920083ff
 80122bc:	3fc24924 	.word	0x3fc24924
 80122c0:	5555550d 	.word	0x5555550d
 80122c4:	3fd55555 	.word	0x3fd55555
 80122c8:	2c6a6c2f 	.word	0x2c6a6c2f
 80122cc:	bfa2b444 	.word	0xbfa2b444
 80122d0:	52defd9a 	.word	0x52defd9a
 80122d4:	3fadde2d 	.word	0x3fadde2d
 80122d8:	af749a6d 	.word	0xaf749a6d
 80122dc:	3fb3b0f2 	.word	0x3fb3b0f2
 80122e0:	fe231671 	.word	0xfe231671
 80122e4:	3fbc71c6 	.word	0x3fbc71c6
 80122e8:	9998ebc4 	.word	0x9998ebc4
 80122ec:	3fc99999 	.word	0x3fc99999
 80122f0:	54442d18 	.word	0x54442d18
 80122f4:	bff921fb 	.word	0xbff921fb
 80122f8:	440fffff 	.word	0x440fffff
 80122fc:	7ff00000 	.word	0x7ff00000
 8012300:	3fdbffff 	.word	0x3fdbffff
 8012304:	3ff00000 	.word	0x3ff00000
 8012308:	3ff2ffff 	.word	0x3ff2ffff
 801230c:	40038000 	.word	0x40038000
 8012310:	3ff80000 	.word	0x3ff80000
 8012314:	bff00000 	.word	0xbff00000
 8012318:	08012d38 	.word	0x08012d38
 801231c:	08012d58 	.word	0x08012d58

08012320 <fabs>:
 8012320:	ec51 0b10 	vmov	r0, r1, d0
 8012324:	4602      	mov	r2, r0
 8012326:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801232a:	ec43 2b10 	vmov	d0, r2, r3
 801232e:	4770      	bx	lr

08012330 <__ieee754_sqrt>:
 8012330:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012334:	4a66      	ldr	r2, [pc, #408]	@ (80124d0 <__ieee754_sqrt+0x1a0>)
 8012336:	ec55 4b10 	vmov	r4, r5, d0
 801233a:	43aa      	bics	r2, r5
 801233c:	462b      	mov	r3, r5
 801233e:	4621      	mov	r1, r4
 8012340:	d110      	bne.n	8012364 <__ieee754_sqrt+0x34>
 8012342:	4622      	mov	r2, r4
 8012344:	4620      	mov	r0, r4
 8012346:	4629      	mov	r1, r5
 8012348:	f7ee f95e 	bl	8000608 <__aeabi_dmul>
 801234c:	4602      	mov	r2, r0
 801234e:	460b      	mov	r3, r1
 8012350:	4620      	mov	r0, r4
 8012352:	4629      	mov	r1, r5
 8012354:	f7ed ffa2 	bl	800029c <__adddf3>
 8012358:	4604      	mov	r4, r0
 801235a:	460d      	mov	r5, r1
 801235c:	ec45 4b10 	vmov	d0, r4, r5
 8012360:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012364:	2d00      	cmp	r5, #0
 8012366:	dc0e      	bgt.n	8012386 <__ieee754_sqrt+0x56>
 8012368:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801236c:	4322      	orrs	r2, r4
 801236e:	d0f5      	beq.n	801235c <__ieee754_sqrt+0x2c>
 8012370:	b19d      	cbz	r5, 801239a <__ieee754_sqrt+0x6a>
 8012372:	4622      	mov	r2, r4
 8012374:	4620      	mov	r0, r4
 8012376:	4629      	mov	r1, r5
 8012378:	f7ed ff8e 	bl	8000298 <__aeabi_dsub>
 801237c:	4602      	mov	r2, r0
 801237e:	460b      	mov	r3, r1
 8012380:	f7ee fa6c 	bl	800085c <__aeabi_ddiv>
 8012384:	e7e8      	b.n	8012358 <__ieee754_sqrt+0x28>
 8012386:	152a      	asrs	r2, r5, #20
 8012388:	d115      	bne.n	80123b6 <__ieee754_sqrt+0x86>
 801238a:	2000      	movs	r0, #0
 801238c:	e009      	b.n	80123a2 <__ieee754_sqrt+0x72>
 801238e:	0acb      	lsrs	r3, r1, #11
 8012390:	3a15      	subs	r2, #21
 8012392:	0549      	lsls	r1, r1, #21
 8012394:	2b00      	cmp	r3, #0
 8012396:	d0fa      	beq.n	801238e <__ieee754_sqrt+0x5e>
 8012398:	e7f7      	b.n	801238a <__ieee754_sqrt+0x5a>
 801239a:	462a      	mov	r2, r5
 801239c:	e7fa      	b.n	8012394 <__ieee754_sqrt+0x64>
 801239e:	005b      	lsls	r3, r3, #1
 80123a0:	3001      	adds	r0, #1
 80123a2:	02dc      	lsls	r4, r3, #11
 80123a4:	d5fb      	bpl.n	801239e <__ieee754_sqrt+0x6e>
 80123a6:	1e44      	subs	r4, r0, #1
 80123a8:	1b12      	subs	r2, r2, r4
 80123aa:	f1c0 0420 	rsb	r4, r0, #32
 80123ae:	fa21 f404 	lsr.w	r4, r1, r4
 80123b2:	4323      	orrs	r3, r4
 80123b4:	4081      	lsls	r1, r0
 80123b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80123ba:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80123be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80123c2:	07d2      	lsls	r2, r2, #31
 80123c4:	bf5c      	itt	pl
 80123c6:	005b      	lslpl	r3, r3, #1
 80123c8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80123cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80123d0:	bf58      	it	pl
 80123d2:	0049      	lslpl	r1, r1, #1
 80123d4:	2600      	movs	r6, #0
 80123d6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80123da:	107f      	asrs	r7, r7, #1
 80123dc:	0049      	lsls	r1, r1, #1
 80123de:	2016      	movs	r0, #22
 80123e0:	4632      	mov	r2, r6
 80123e2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80123e6:	1915      	adds	r5, r2, r4
 80123e8:	429d      	cmp	r5, r3
 80123ea:	bfde      	ittt	le
 80123ec:	192a      	addle	r2, r5, r4
 80123ee:	1b5b      	suble	r3, r3, r5
 80123f0:	1936      	addle	r6, r6, r4
 80123f2:	0fcd      	lsrs	r5, r1, #31
 80123f4:	3801      	subs	r0, #1
 80123f6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80123fa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80123fe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8012402:	d1f0      	bne.n	80123e6 <__ieee754_sqrt+0xb6>
 8012404:	4605      	mov	r5, r0
 8012406:	2420      	movs	r4, #32
 8012408:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801240c:	4293      	cmp	r3, r2
 801240e:	eb0c 0e00 	add.w	lr, ip, r0
 8012412:	dc02      	bgt.n	801241a <__ieee754_sqrt+0xea>
 8012414:	d113      	bne.n	801243e <__ieee754_sqrt+0x10e>
 8012416:	458e      	cmp	lr, r1
 8012418:	d811      	bhi.n	801243e <__ieee754_sqrt+0x10e>
 801241a:	f1be 0f00 	cmp.w	lr, #0
 801241e:	eb0e 000c 	add.w	r0, lr, ip
 8012422:	da3f      	bge.n	80124a4 <__ieee754_sqrt+0x174>
 8012424:	2800      	cmp	r0, #0
 8012426:	db3d      	blt.n	80124a4 <__ieee754_sqrt+0x174>
 8012428:	f102 0801 	add.w	r8, r2, #1
 801242c:	1a9b      	subs	r3, r3, r2
 801242e:	458e      	cmp	lr, r1
 8012430:	bf88      	it	hi
 8012432:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8012436:	eba1 010e 	sub.w	r1, r1, lr
 801243a:	4465      	add	r5, ip
 801243c:	4642      	mov	r2, r8
 801243e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8012442:	3c01      	subs	r4, #1
 8012444:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8012448:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801244c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8012450:	d1dc      	bne.n	801240c <__ieee754_sqrt+0xdc>
 8012452:	4319      	orrs	r1, r3
 8012454:	d01b      	beq.n	801248e <__ieee754_sqrt+0x15e>
 8012456:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 80124d4 <__ieee754_sqrt+0x1a4>
 801245a:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 80124d8 <__ieee754_sqrt+0x1a8>
 801245e:	e9da 0100 	ldrd	r0, r1, [sl]
 8012462:	e9db 2300 	ldrd	r2, r3, [fp]
 8012466:	f7ed ff17 	bl	8000298 <__aeabi_dsub>
 801246a:	e9da 8900 	ldrd	r8, r9, [sl]
 801246e:	4602      	mov	r2, r0
 8012470:	460b      	mov	r3, r1
 8012472:	4640      	mov	r0, r8
 8012474:	4649      	mov	r1, r9
 8012476:	f7ee fb43 	bl	8000b00 <__aeabi_dcmple>
 801247a:	b140      	cbz	r0, 801248e <__ieee754_sqrt+0x15e>
 801247c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8012480:	e9da 0100 	ldrd	r0, r1, [sl]
 8012484:	e9db 2300 	ldrd	r2, r3, [fp]
 8012488:	d10e      	bne.n	80124a8 <__ieee754_sqrt+0x178>
 801248a:	3601      	adds	r6, #1
 801248c:	4625      	mov	r5, r4
 801248e:	1073      	asrs	r3, r6, #1
 8012490:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8012494:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8012498:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 801249c:	086b      	lsrs	r3, r5, #1
 801249e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 80124a2:	e759      	b.n	8012358 <__ieee754_sqrt+0x28>
 80124a4:	4690      	mov	r8, r2
 80124a6:	e7c1      	b.n	801242c <__ieee754_sqrt+0xfc>
 80124a8:	f7ed fef8 	bl	800029c <__adddf3>
 80124ac:	e9da 8900 	ldrd	r8, r9, [sl]
 80124b0:	4602      	mov	r2, r0
 80124b2:	460b      	mov	r3, r1
 80124b4:	4640      	mov	r0, r8
 80124b6:	4649      	mov	r1, r9
 80124b8:	f7ee fb18 	bl	8000aec <__aeabi_dcmplt>
 80124bc:	b120      	cbz	r0, 80124c8 <__ieee754_sqrt+0x198>
 80124be:	1cab      	adds	r3, r5, #2
 80124c0:	bf08      	it	eq
 80124c2:	3601      	addeq	r6, #1
 80124c4:	3502      	adds	r5, #2
 80124c6:	e7e2      	b.n	801248e <__ieee754_sqrt+0x15e>
 80124c8:	1c6b      	adds	r3, r5, #1
 80124ca:	f023 0501 	bic.w	r5, r3, #1
 80124ce:	e7de      	b.n	801248e <__ieee754_sqrt+0x15e>
 80124d0:	7ff00000 	.word	0x7ff00000
 80124d4:	08012d80 	.word	0x08012d80
 80124d8:	08012d78 	.word	0x08012d78
 80124dc:	00000000 	.word	0x00000000

080124e0 <__ieee754_atan2>:
 80124e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124e4:	ec57 6b11 	vmov	r6, r7, d1
 80124e8:	4273      	negs	r3, r6
 80124ea:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8012668 <__ieee754_atan2+0x188>
 80124ee:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80124f2:	4333      	orrs	r3, r6
 80124f4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80124f8:	4543      	cmp	r3, r8
 80124fa:	ec51 0b10 	vmov	r0, r1, d0
 80124fe:	4635      	mov	r5, r6
 8012500:	d809      	bhi.n	8012516 <__ieee754_atan2+0x36>
 8012502:	4244      	negs	r4, r0
 8012504:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012508:	4304      	orrs	r4, r0
 801250a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801250e:	4544      	cmp	r4, r8
 8012510:	468e      	mov	lr, r1
 8012512:	4681      	mov	r9, r0
 8012514:	d907      	bls.n	8012526 <__ieee754_atan2+0x46>
 8012516:	4632      	mov	r2, r6
 8012518:	463b      	mov	r3, r7
 801251a:	f7ed febf 	bl	800029c <__adddf3>
 801251e:	ec41 0b10 	vmov	d0, r0, r1
 8012522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012526:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801252a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801252e:	4334      	orrs	r4, r6
 8012530:	d103      	bne.n	801253a <__ieee754_atan2+0x5a>
 8012532:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012536:	f7ff bd5b 	b.w	8011ff0 <atan>
 801253a:	17bc      	asrs	r4, r7, #30
 801253c:	f004 0402 	and.w	r4, r4, #2
 8012540:	ea53 0909 	orrs.w	r9, r3, r9
 8012544:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8012548:	d107      	bne.n	801255a <__ieee754_atan2+0x7a>
 801254a:	2c02      	cmp	r4, #2
 801254c:	d05f      	beq.n	801260e <__ieee754_atan2+0x12e>
 801254e:	2c03      	cmp	r4, #3
 8012550:	d1e5      	bne.n	801251e <__ieee754_atan2+0x3e>
 8012552:	a143      	add	r1, pc, #268	@ (adr r1, 8012660 <__ieee754_atan2+0x180>)
 8012554:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012558:	e7e1      	b.n	801251e <__ieee754_atan2+0x3e>
 801255a:	4315      	orrs	r5, r2
 801255c:	d106      	bne.n	801256c <__ieee754_atan2+0x8c>
 801255e:	f1be 0f00 	cmp.w	lr, #0
 8012562:	db5f      	blt.n	8012624 <__ieee754_atan2+0x144>
 8012564:	a136      	add	r1, pc, #216	@ (adr r1, 8012640 <__ieee754_atan2+0x160>)
 8012566:	e9d1 0100 	ldrd	r0, r1, [r1]
 801256a:	e7d8      	b.n	801251e <__ieee754_atan2+0x3e>
 801256c:	4542      	cmp	r2, r8
 801256e:	d10f      	bne.n	8012590 <__ieee754_atan2+0xb0>
 8012570:	4293      	cmp	r3, r2
 8012572:	f104 34ff 	add.w	r4, r4, #4294967295
 8012576:	d107      	bne.n	8012588 <__ieee754_atan2+0xa8>
 8012578:	2c02      	cmp	r4, #2
 801257a:	d84c      	bhi.n	8012616 <__ieee754_atan2+0x136>
 801257c:	4b36      	ldr	r3, [pc, #216]	@ (8012658 <__ieee754_atan2+0x178>)
 801257e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012582:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012586:	e7ca      	b.n	801251e <__ieee754_atan2+0x3e>
 8012588:	2c02      	cmp	r4, #2
 801258a:	d848      	bhi.n	801261e <__ieee754_atan2+0x13e>
 801258c:	4b33      	ldr	r3, [pc, #204]	@ (801265c <__ieee754_atan2+0x17c>)
 801258e:	e7f6      	b.n	801257e <__ieee754_atan2+0x9e>
 8012590:	4543      	cmp	r3, r8
 8012592:	d0e4      	beq.n	801255e <__ieee754_atan2+0x7e>
 8012594:	1a9b      	subs	r3, r3, r2
 8012596:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801259a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801259e:	da1e      	bge.n	80125de <__ieee754_atan2+0xfe>
 80125a0:	2f00      	cmp	r7, #0
 80125a2:	da01      	bge.n	80125a8 <__ieee754_atan2+0xc8>
 80125a4:	323c      	adds	r2, #60	@ 0x3c
 80125a6:	db1e      	blt.n	80125e6 <__ieee754_atan2+0x106>
 80125a8:	4632      	mov	r2, r6
 80125aa:	463b      	mov	r3, r7
 80125ac:	f7ee f956 	bl	800085c <__aeabi_ddiv>
 80125b0:	ec41 0b10 	vmov	d0, r0, r1
 80125b4:	f7ff feb4 	bl	8012320 <fabs>
 80125b8:	f7ff fd1a 	bl	8011ff0 <atan>
 80125bc:	ec51 0b10 	vmov	r0, r1, d0
 80125c0:	2c01      	cmp	r4, #1
 80125c2:	d013      	beq.n	80125ec <__ieee754_atan2+0x10c>
 80125c4:	2c02      	cmp	r4, #2
 80125c6:	d015      	beq.n	80125f4 <__ieee754_atan2+0x114>
 80125c8:	2c00      	cmp	r4, #0
 80125ca:	d0a8      	beq.n	801251e <__ieee754_atan2+0x3e>
 80125cc:	a318      	add	r3, pc, #96	@ (adr r3, 8012630 <__ieee754_atan2+0x150>)
 80125ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125d2:	f7ed fe61 	bl	8000298 <__aeabi_dsub>
 80125d6:	a318      	add	r3, pc, #96	@ (adr r3, 8012638 <__ieee754_atan2+0x158>)
 80125d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125dc:	e014      	b.n	8012608 <__ieee754_atan2+0x128>
 80125de:	a118      	add	r1, pc, #96	@ (adr r1, 8012640 <__ieee754_atan2+0x160>)
 80125e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80125e4:	e7ec      	b.n	80125c0 <__ieee754_atan2+0xe0>
 80125e6:	2000      	movs	r0, #0
 80125e8:	2100      	movs	r1, #0
 80125ea:	e7e9      	b.n	80125c0 <__ieee754_atan2+0xe0>
 80125ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80125f0:	4619      	mov	r1, r3
 80125f2:	e794      	b.n	801251e <__ieee754_atan2+0x3e>
 80125f4:	a30e      	add	r3, pc, #56	@ (adr r3, 8012630 <__ieee754_atan2+0x150>)
 80125f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125fa:	f7ed fe4d 	bl	8000298 <__aeabi_dsub>
 80125fe:	4602      	mov	r2, r0
 8012600:	460b      	mov	r3, r1
 8012602:	a10d      	add	r1, pc, #52	@ (adr r1, 8012638 <__ieee754_atan2+0x158>)
 8012604:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012608:	f7ed fe46 	bl	8000298 <__aeabi_dsub>
 801260c:	e787      	b.n	801251e <__ieee754_atan2+0x3e>
 801260e:	a10a      	add	r1, pc, #40	@ (adr r1, 8012638 <__ieee754_atan2+0x158>)
 8012610:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012614:	e783      	b.n	801251e <__ieee754_atan2+0x3e>
 8012616:	a10c      	add	r1, pc, #48	@ (adr r1, 8012648 <__ieee754_atan2+0x168>)
 8012618:	e9d1 0100 	ldrd	r0, r1, [r1]
 801261c:	e77f      	b.n	801251e <__ieee754_atan2+0x3e>
 801261e:	2000      	movs	r0, #0
 8012620:	2100      	movs	r1, #0
 8012622:	e77c      	b.n	801251e <__ieee754_atan2+0x3e>
 8012624:	a10a      	add	r1, pc, #40	@ (adr r1, 8012650 <__ieee754_atan2+0x170>)
 8012626:	e9d1 0100 	ldrd	r0, r1, [r1]
 801262a:	e778      	b.n	801251e <__ieee754_atan2+0x3e>
 801262c:	f3af 8000 	nop.w
 8012630:	33145c07 	.word	0x33145c07
 8012634:	3ca1a626 	.word	0x3ca1a626
 8012638:	54442d18 	.word	0x54442d18
 801263c:	400921fb 	.word	0x400921fb
 8012640:	54442d18 	.word	0x54442d18
 8012644:	3ff921fb 	.word	0x3ff921fb
 8012648:	54442d18 	.word	0x54442d18
 801264c:	3fe921fb 	.word	0x3fe921fb
 8012650:	54442d18 	.word	0x54442d18
 8012654:	bff921fb 	.word	0xbff921fb
 8012658:	08012da0 	.word	0x08012da0
 801265c:	08012d88 	.word	0x08012d88
 8012660:	54442d18 	.word	0x54442d18
 8012664:	c00921fb 	.word	0xc00921fb
 8012668:	7ff00000 	.word	0x7ff00000

0801266c <_init>:
 801266c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801266e:	bf00      	nop
 8012670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012672:	bc08      	pop	{r3}
 8012674:	469e      	mov	lr, r3
 8012676:	4770      	bx	lr

08012678 <_fini>:
 8012678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801267a:	bf00      	nop
 801267c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801267e:	bc08      	pop	{r3}
 8012680:	469e      	mov	lr, r3
 8012682:	4770      	bx	lr
