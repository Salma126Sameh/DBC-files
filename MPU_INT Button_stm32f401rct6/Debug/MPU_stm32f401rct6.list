
MPU_stm32f401rct6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e184  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  0800e328  0800e328  0000f328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e848  0800e848  00010358  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e848  0800e848  0000f848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e850  0800e850  00010358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e850  0800e850  0000f850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e854  0800e854  0000f854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000358  20000000  0800e858  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005cbc  20000358  0800ebb0  00010358  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20006014  0800ebb0  00011014  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010358  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c3c8  00000000  00000000  00010388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049bd  00000000  00000000  0002c750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019a8  00000000  00000000  00031110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013a9  00000000  00000000  00032ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c59f  00000000  00000000  00033e61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020271  00000000  00000000  00050400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cb1b  00000000  00000000  00070671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d18c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d3c  00000000  00000000  0010d1d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00114f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000358 	.word	0x20000358
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e30c 	.word	0x0800e30c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000035c 	.word	0x2000035c
 80001dc:	0800e30c 	.word	0x0800e30c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4a07      	ldr	r2, [pc, #28]	@ (8000f10 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ef4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	4a06      	ldr	r2, [pc, #24]	@ (8000f14 <vApplicationGetIdleTaskMemory+0x30>)
 8000efa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2280      	movs	r2, #128	@ 0x80
 8000f00:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000374 	.word	0x20000374
 8000f14:	200003c8 	.word	0x200003c8

08000f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f18:	b5b0      	push	{r4, r5, r7, lr}
 8000f1a:	b08e      	sub	sp, #56	@ 0x38
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1e:	f001 f801 	bl	8001f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f22:	f000 f845 	bl	8000fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f26:	f000 f8dd 	bl	80010e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f2a:	f000 f8ad 	bl	8001088 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(3000);
 8000f2e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000f32:	f001 f839 	bl	8001fa8 <HAL_Delay>
    MPU6050_Init(&hi2c1);
 8000f36:	4818      	ldr	r0, [pc, #96]	@ (8000f98 <main+0x80>)
 8000f38:	f000 f9b6 	bl	80012a8 <MPU6050_Init>
    CDC_Transmit_FS((uint8_t*) "MPU6050 Initialized\r\n", strlen("MPU6050 Initialized\r\n"));
 8000f3c:	2115      	movs	r1, #21
 8000f3e:	4817      	ldr	r0, [pc, #92]	@ (8000f9c <main+0x84>)
 8000f40:	f009 fbc8 	bl	800a6d4 <CDC_Transmit_FS>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityRealtime, 0, 256, defaultTaskBuffer, &defaultTaskControlBlock);
 8000f44:	4b16      	ldr	r3, [pc, #88]	@ (8000fa0 <main+0x88>)
 8000f46:	f107 041c 	add.w	r4, r7, #28
 8000f4a:	461d      	mov	r5, r3
 8000f4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000f58:	f107 031c 	add.w	r3, r7, #28
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f007 ffae 	bl	8008ec0 <osThreadCreate>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4a0f      	ldr	r2, [pc, #60]	@ (8000fa4 <main+0x8c>)
 8000f68:	6013      	str	r3, [r2, #0]

  /* definition and creation of ButtonTask */
  osThreadStaticDef(ButtonTask, Button_Task, osPriorityNormal, 0, 128, ButtonTaskBuffer, &ButtonTaskControlBlock);
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa8 <main+0x90>)
 8000f6c:	463c      	mov	r4, r7
 8000f6e:	461d      	mov	r5, r3
 8000f70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ButtonTaskHandle = osThreadCreate(osThread(ButtonTask), NULL);
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f007 ff9d 	bl	8008ec0 <osThreadCreate>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4a08      	ldr	r2, [pc, #32]	@ (8000fac <main+0x94>)
 8000f8a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f8c:	f007 ff91 	bl	8008eb2 <osKernelStart>

    /* USER CODE BEGIN 3 */
	 // MPU6050_Data(&hi2c1, &MPU6050);
	   // HAL_Delay(3000);

	  vTaskDelay(pdMS_TO_TICKS(10));
 8000f90:	200a      	movs	r0, #10
 8000f92:	f008 fa2d 	bl	80093f0 <vTaskDelay>
 8000f96:	e7fb      	b.n	8000f90 <main+0x78>
 8000f98:	200005c8 	.word	0x200005c8
 8000f9c:	0800e328 	.word	0x0800e328
 8000fa0:	0800e34c 	.word	0x0800e34c
 8000fa4:	2000061c 	.word	0x2000061c
 8000fa8:	0800e374 	.word	0x0800e374
 8000fac:	20000a74 	.word	0x20000a74

08000fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b094      	sub	sp, #80	@ 0x50
 8000fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb6:	f107 0320 	add.w	r3, r7, #32
 8000fba:	2230      	movs	r2, #48	@ 0x30
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f00a fd6b 	bl	800ba9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	4b29      	ldr	r3, [pc, #164]	@ (8001080 <SystemClock_Config+0xd0>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fdc:	4a28      	ldr	r2, [pc, #160]	@ (8001080 <SystemClock_Config+0xd0>)
 8000fde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fe4:	4b26      	ldr	r3, [pc, #152]	@ (8001080 <SystemClock_Config+0xd0>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	4b23      	ldr	r3, [pc, #140]	@ (8001084 <SystemClock_Config+0xd4>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ffc:	4a21      	ldr	r2, [pc, #132]	@ (8001084 <SystemClock_Config+0xd4>)
 8000ffe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	4b1f      	ldr	r3, [pc, #124]	@ (8001084 <SystemClock_Config+0xd4>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001010:	2301      	movs	r3, #1
 8001012:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001014:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001018:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101a:	2302      	movs	r3, #2
 800101c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800101e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001022:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001024:	2319      	movs	r3, #25
 8001026:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001028:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800102c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800102e:	2304      	movs	r3, #4
 8001030:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001032:	2307      	movs	r3, #7
 8001034:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001036:	f107 0320 	add.w	r3, r7, #32
 800103a:	4618      	mov	r0, r3
 800103c:	f003 fd00 	bl	8004a40 <HAL_RCC_OscConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001046:	f000 f929 	bl	800129c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104a:	230f      	movs	r3, #15
 800104c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800104e:	2302      	movs	r3, #2
 8001050:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001056:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800105a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800105c:	2300      	movs	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	2102      	movs	r1, #2
 8001066:	4618      	mov	r0, r3
 8001068:	f003 ff62 	bl	8004f30 <HAL_RCC_ClockConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001072:	f000 f913 	bl	800129c <Error_Handler>
  }
}
 8001076:	bf00      	nop
 8001078:	3750      	adds	r7, #80	@ 0x50
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800
 8001084:	40007000 	.word	0x40007000

08001088 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800108c:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <MX_I2C1_Init+0x50>)
 800108e:	4a13      	ldr	r2, [pc, #76]	@ (80010dc <MX_I2C1_Init+0x54>)
 8001090:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001092:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <MX_I2C1_Init+0x50>)
 8001094:	4a12      	ldr	r2, [pc, #72]	@ (80010e0 <MX_I2C1_Init+0x58>)
 8001096:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001098:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <MX_I2C1_Init+0x50>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800109e:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <MX_I2C1_Init+0x50>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <MX_I2C1_Init+0x50>)
 80010a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010ac:	4b0a      	ldr	r3, [pc, #40]	@ (80010d8 <MX_I2C1_Init+0x50>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010b2:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <MX_I2C1_Init+0x50>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b8:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <MX_I2C1_Init+0x50>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010be:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <MX_I2C1_Init+0x50>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c4:	4804      	ldr	r0, [pc, #16]	@ (80010d8 <MX_I2C1_Init+0x50>)
 80010c6:	f001 fa45 	bl	8002554 <HAL_I2C_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010d0:	f000 f8e4 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200005c8 	.word	0x200005c8
 80010dc:	40005400 	.word	0x40005400
 80010e0:	000186a0 	.word	0x000186a0

080010e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	@ 0x28
 80010e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	4b32      	ldr	r3, [pc, #200]	@ (80011c8 <MX_GPIO_Init+0xe4>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	4a31      	ldr	r2, [pc, #196]	@ (80011c8 <MX_GPIO_Init+0xe4>)
 8001104:	f043 0304 	orr.w	r3, r3, #4
 8001108:	6313      	str	r3, [r2, #48]	@ 0x30
 800110a:	4b2f      	ldr	r3, [pc, #188]	@ (80011c8 <MX_GPIO_Init+0xe4>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	f003 0304 	and.w	r3, r3, #4
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b2b      	ldr	r3, [pc, #172]	@ (80011c8 <MX_GPIO_Init+0xe4>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	4a2a      	ldr	r2, [pc, #168]	@ (80011c8 <MX_GPIO_Init+0xe4>)
 8001120:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001124:	6313      	str	r3, [r2, #48]	@ 0x30
 8001126:	4b28      	ldr	r3, [pc, #160]	@ (80011c8 <MX_GPIO_Init+0xe4>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	4b24      	ldr	r3, [pc, #144]	@ (80011c8 <MX_GPIO_Init+0xe4>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	4a23      	ldr	r2, [pc, #140]	@ (80011c8 <MX_GPIO_Init+0xe4>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6313      	str	r3, [r2, #48]	@ 0x30
 8001142:	4b21      	ldr	r3, [pc, #132]	@ (80011c8 <MX_GPIO_Init+0xe4>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	4b1d      	ldr	r3, [pc, #116]	@ (80011c8 <MX_GPIO_Init+0xe4>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	4a1c      	ldr	r2, [pc, #112]	@ (80011c8 <MX_GPIO_Init+0xe4>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	6313      	str	r3, [r2, #48]	@ 0x30
 800115e:	4b1a      	ldr	r3, [pc, #104]	@ (80011c8 <MX_GPIO_Init+0xe4>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800116a:	2201      	movs	r2, #1
 800116c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001170:	4816      	ldr	r0, [pc, #88]	@ (80011cc <MX_GPIO_Init+0xe8>)
 8001172:	f001 f9a3 	bl	80024bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001176:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800117a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2301      	movs	r3, #1
 800117e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4619      	mov	r1, r3
 800118e:	480f      	ldr	r0, [pc, #60]	@ (80011cc <MX_GPIO_Init+0xe8>)
 8001190:	f001 f810 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001194:	2302      	movs	r3, #2
 8001196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001198:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800119c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	4619      	mov	r1, r3
 80011a8:	4809      	ldr	r0, [pc, #36]	@ (80011d0 <MX_GPIO_Init+0xec>)
 80011aa:	f001 f803 	bl	80021b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2105      	movs	r1, #5
 80011b2:	2007      	movs	r0, #7
 80011b4:	f000 ffd4 	bl	8002160 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80011b8:	2007      	movs	r0, #7
 80011ba:	f000 ffed 	bl	8002198 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011be:	bf00      	nop
 80011c0:	3728      	adds	r7, #40	@ 0x28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40020800 	.word	0x40020800
 80011d0:	40020000 	.word	0x40020000

080011d4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_1)
 80011de:	88fb      	ldrh	r3, [r7, #6]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d114      	bne.n	800120e <HAL_GPIO_EXTI_Callback+0x3a>
  {
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
    vTaskNotifyGiveFromISR(ButtonTaskHandle, &xHigherPriorityTaskWoken);
 80011e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <HAL_GPIO_EXTI_Callback+0x44>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f107 020c 	add.w	r2, r7, #12
 80011f0:	4611      	mov	r1, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f008 fc74 	bl	8009ae0 <vTaskNotifyGiveFromISR>
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d007      	beq.n	800120e <HAL_GPIO_EXTI_Callback+0x3a>
 80011fe:	4b07      	ldr	r3, [pc, #28]	@ (800121c <HAL_GPIO_EXTI_Callback+0x48>)
 8001200:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	f3bf 8f4f 	dsb	sy
 800120a:	f3bf 8f6f 	isb	sy
  }
}
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000a74 	.word	0x20000a74
 800121c:	e000ed04 	.word	0xe000ed04

08001220 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001228:	f009 f996 	bl	800a558 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  MPU6050_Data(&hi2c1, &MPU6050);
 800122c:	4904      	ldr	r1, [pc, #16]	@ (8001240 <StartDefaultTask+0x20>)
 800122e:	4805      	ldr	r0, [pc, #20]	@ (8001244 <StartDefaultTask+0x24>)
 8001230:	f000 fc02 	bl	8001a38 <MPU6050_Data>
	 	  	  vTaskDelay(pdMS_TO_TICKS(3000)); // Use FreeRTOS delay
 8001234:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001238:	f008 f8da 	bl	80093f0 <vTaskDelay>
	  MPU6050_Data(&hi2c1, &MPU6050);
 800123c:	bf00      	nop
 800123e:	e7f5      	b.n	800122c <StartDefaultTask+0xc>
 8001240:	20000cd0 	.word	0x20000cd0
 8001244:	200005c8 	.word	0x200005c8

08001248 <Button_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Button_Task */
void Button_Task(void const * argument)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Button_Task */
  /* Infinite loop */
  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001250:	f04f 31ff 	mov.w	r1, #4294967295
 8001254:	2001      	movs	r0, #1
 8001256:	f008 fbfb 	bl	8009a50 <ulTaskNotifyTake>
	      CDC_Transmit_FS((uint8_t*)"Button Pressed via FreeRTOS!\r\n", strlen("Button Pressed via FreeRTOS!\r\n"));
 800125a:	211e      	movs	r1, #30
 800125c:	4804      	ldr	r0, [pc, #16]	@ (8001270 <Button_Task+0x28>)
 800125e:	f009 fa39 	bl	800a6d4 <CDC_Transmit_FS>
	      HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001262:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001266:	4803      	ldr	r0, [pc, #12]	@ (8001274 <Button_Task+0x2c>)
 8001268:	f001 f941 	bl	80024ee <HAL_GPIO_TogglePin>
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800126c:	bf00      	nop
 800126e:	e7ef      	b.n	8001250 <Button_Task+0x8>
 8001270:	0800e390 	.word	0x0800e390
 8001274:	40020800 	.word	0x40020800

08001278 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a04      	ldr	r2, [pc, #16]	@ (8001298 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d101      	bne.n	800128e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800128a:	f000 fe6d 	bl	8001f68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40000400 	.word	0x40000400

0800129c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a0:	b672      	cpsid	i
}
 80012a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <Error_Handler+0x8>

080012a8 <MPU6050_Init>:
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

// Initialize MPU6050
uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af04      	add	r7, sp, #16
 80012ae:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80012b0:	2364      	movs	r3, #100	@ 0x64
 80012b2:	9302      	str	r3, [sp, #8]
 80012b4:	2301      	movs	r3, #1
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	f107 030f 	add.w	r3, r7, #15
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	2301      	movs	r3, #1
 80012c0:	2275      	movs	r2, #117	@ 0x75
 80012c2:	21d0      	movs	r1, #208	@ 0xd0
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f001 fb83 	bl	80029d0 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 is the expected response
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	2b68      	cmp	r3, #104	@ 0x68
 80012ce:	d13d      	bne.n	800134c <MPU6050_Init+0xa4>
    {
        // Wake up the sensor by writing 0 to PWR_MGMT_1 register
        Data = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80012d4:	2364      	movs	r3, #100	@ 0x64
 80012d6:	9302      	str	r3, [sp, #8]
 80012d8:	2301      	movs	r3, #1
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	f107 030e 	add.w	r3, r7, #14
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	2301      	movs	r3, #1
 80012e4:	226b      	movs	r2, #107	@ 0x6b
 80012e6:	21d0      	movs	r1, #208	@ 0xd0
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f001 fa77 	bl	80027dc <HAL_I2C_Mem_Write>

        // Set sample rate to 1 kHz
        Data = 0x07;
 80012ee:	2307      	movs	r3, #7
 80012f0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80012f2:	2364      	movs	r3, #100	@ 0x64
 80012f4:	9302      	str	r3, [sp, #8]
 80012f6:	2301      	movs	r3, #1
 80012f8:	9301      	str	r3, [sp, #4]
 80012fa:	f107 030e 	add.w	r3, r7, #14
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	2301      	movs	r3, #1
 8001302:	2219      	movs	r2, #25
 8001304:	21d0      	movs	r1, #208	@ 0xd0
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f001 fa68 	bl	80027dc <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ±2g range
        Data = 0x00;
 800130c:	2300      	movs	r3, #0
 800130e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001310:	2364      	movs	r3, #100	@ 0x64
 8001312:	9302      	str	r3, [sp, #8]
 8001314:	2301      	movs	r3, #1
 8001316:	9301      	str	r3, [sp, #4]
 8001318:	f107 030e 	add.w	r3, r7, #14
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2301      	movs	r3, #1
 8001320:	221c      	movs	r2, #28
 8001322:	21d0      	movs	r1, #208	@ 0xd0
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f001 fa59 	bl	80027dc <HAL_I2C_Mem_Write>

        // Set Gyro configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ±250 deg/sec range
        Data = 0x00;
 800132a:	2300      	movs	r3, #0
 800132c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800132e:	2364      	movs	r3, #100	@ 0x64
 8001330:	9302      	str	r3, [sp, #8]
 8001332:	2301      	movs	r3, #1
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	f107 030e 	add.w	r3, r7, #14
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2301      	movs	r3, #1
 800133e:	221b      	movs	r2, #27
 8001340:	21d0      	movs	r1, #208	@ 0xd0
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f001 fa4a 	bl	80027dc <HAL_I2C_Mem_Write>
        return 0;  // Initialization successful
 8001348:	2300      	movs	r3, #0
 800134a:	e000      	b.n	800134e <MPU6050_Init+0xa6>
    }
    return 1;  // Initialization failed
 800134c:	2301      	movs	r3, #1
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <MPU6050_Read_All>:
    // Convert raw data to temperature in Celsius
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

// Read all sensor data
void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8001358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800135c:	b094      	sub	sp, #80	@ 0x50
 800135e:	af04      	add	r7, sp, #16
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];  // Buffer for raw data
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001364:	2364      	movs	r3, #100	@ 0x64
 8001366:	9302      	str	r3, [sp, #8]
 8001368:	230e      	movs	r3, #14
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	f107 0308 	add.w	r3, r7, #8
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2301      	movs	r3, #1
 8001374:	223b      	movs	r2, #59	@ 0x3b
 8001376:	21d0      	movs	r1, #208	@ 0xd0
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f001 fb29 	bl	80029d0 <HAL_I2C_Mem_Read>

    // Parse accelerometer data
    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800137e:	7a3b      	ldrb	r3, [r7, #8]
 8001380:	b21b      	sxth	r3, r3
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	b21a      	sxth	r2, r3
 8001386:	7a7b      	ldrb	r3, [r7, #9]
 8001388:	b21b      	sxth	r3, r3
 800138a:	4313      	orrs	r3, r2
 800138c:	b21a      	sxth	r2, r3
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001392:	7abb      	ldrb	r3, [r7, #10]
 8001394:	b21b      	sxth	r3, r3
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	b21a      	sxth	r2, r3
 800139a:	7afb      	ldrb	r3, [r7, #11]
 800139c:	b21b      	sxth	r3, r3
 800139e:	4313      	orrs	r3, r2
 80013a0:	b21a      	sxth	r2, r3
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80013a6:	7b3b      	ldrb	r3, [r7, #12]
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	021b      	lsls	r3, r3, #8
 80013ac:	b21a      	sxth	r2, r3
 80013ae:	7b7b      	ldrb	r3, [r7, #13]
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	4313      	orrs	r3, r2
 80013b4:	b21a      	sxth	r2, r3
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	809a      	strh	r2, [r3, #4]

    // Parse temperature data
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 80013ba:	7bbb      	ldrb	r3, [r7, #14]
 80013bc:	b21b      	sxth	r3, r3
 80013be:	021b      	lsls	r3, r3, #8
 80013c0:	b21a      	sxth	r2, r3
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	4313      	orrs	r3, r2
 80013c8:	86fb      	strh	r3, [r7, #54]	@ 0x36

    // Parse gyroscope data
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 80013ca:	7c3b      	ldrb	r3, [r7, #16]
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	021b      	lsls	r3, r3, #8
 80013d0:	b21a      	sxth	r2, r3
 80013d2:	7c7b      	ldrb	r3, [r7, #17]
 80013d4:	b21b      	sxth	r3, r3
 80013d6:	4313      	orrs	r3, r2
 80013d8:	b21a      	sxth	r2, r3
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 80013de:	7cbb      	ldrb	r3, [r7, #18]
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b21a      	sxth	r2, r3
 80013e6:	7cfb      	ldrb	r3, [r7, #19]
 80013e8:	b21b      	sxth	r3, r3
 80013ea:	4313      	orrs	r3, r2
 80013ec:	b21a      	sxth	r2, r3
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 80013f2:	7d3b      	ldrb	r3, [r7, #20]
 80013f4:	b21b      	sxth	r3, r3
 80013f6:	021b      	lsls	r3, r3, #8
 80013f8:	b21a      	sxth	r2, r3
 80013fa:	7d7b      	ldrb	r3, [r7, #21]
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	4313      	orrs	r3, r2
 8001400:	b21a      	sxth	r2, r3
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	849a      	strh	r2, [r3, #36]	@ 0x24

    // Convert to proper units
    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	f9b3 3000 	ldrsh.w	r3, [r3]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f891 	bl	8000534 <__aeabi_i2d>
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	4bbe      	ldr	r3, [pc, #760]	@ (8001710 <MPU6050_Read_All+0x3b8>)
 8001418:	f7ff fa20 	bl	800085c <__aeabi_ddiv>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	6839      	ldr	r1, [r7, #0]
 8001422:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f881 	bl	8000534 <__aeabi_i2d>
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	4bb6      	ldr	r3, [pc, #728]	@ (8001710 <MPU6050_Read_All+0x3b8>)
 8001438:	f7ff fa10 	bl	800085c <__aeabi_ddiv>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	6839      	ldr	r1, [r7, #0]
 8001442:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff f871 	bl	8000534 <__aeabi_i2d>
 8001452:	a3a9      	add	r3, pc, #676	@ (adr r3, 80016f8 <MPU6050_Read_All+0x3a0>)
 8001454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001458:	f7ff fa00 	bl	800085c <__aeabi_ddiv>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	6839      	ldr	r1, [r7, #0]
 8001462:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8001466:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800146a:	ee07 3a90 	vmov	s15, r3
 800146e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001472:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 8001714 <MPU6050_Read_All+0x3bc>
 8001476:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800147a:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 8001718 <MPU6050_Read_All+0x3c0>
 800147e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff f850 	bl	8000534 <__aeabi_i2d>
 8001494:	a39a      	add	r3, pc, #616	@ (adr r3, 8001700 <MPU6050_Read_All+0x3a8>)
 8001496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149a:	f7ff f9df 	bl	800085c <__aeabi_ddiv>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	6839      	ldr	r1, [r7, #0]
 80014a4:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff f840 	bl	8000534 <__aeabi_i2d>
 80014b4:	a392      	add	r3, pc, #584	@ (adr r3, 8001700 <MPU6050_Read_All+0x3a8>)
 80014b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ba:	f7ff f9cf 	bl	800085c <__aeabi_ddiv>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	6839      	ldr	r1, [r7, #0]
 80014c4:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff f830 	bl	8000534 <__aeabi_i2d>
 80014d4:	a38a      	add	r3, pc, #552	@ (adr r3, 8001700 <MPU6050_Read_All+0x3a8>)
 80014d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014da:	f7ff f9bf 	bl	800085c <__aeabi_ddiv>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	6839      	ldr	r1, [r7, #0]
 80014e4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman filter calculations
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 80014e8:	f000 fd52 	bl	8001f90 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	4b8b      	ldr	r3, [pc, #556]	@ (800171c <MPU6050_Read_All+0x3c4>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f80d 	bl	8000514 <__aeabi_ui2d>
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	4b88      	ldr	r3, [pc, #544]	@ (8001720 <MPU6050_Read_All+0x3c8>)
 8001500:	f7ff f9ac 	bl	800085c <__aeabi_ddiv>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 800150c:	f000 fd40 	bl	8001f90 <HAL_GetTick>
 8001510:	4603      	mov	r3, r0
 8001512:	4a82      	ldr	r2, [pc, #520]	@ (800171c <MPU6050_Read_All+0x3c4>)
 8001514:	6013      	str	r3, [r2, #0]
    double roll;

    // Calculate roll and pitch
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	f9b3 3000 	ldrsh.w	r3, [r3]
 800151c:	461a      	mov	r2, r3
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001524:	fb03 f202 	mul.w	r2, r3, r2
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800152e:	4619      	mov	r1, r3
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001536:	fb01 f303 	mul.w	r3, r1, r3
 800153a:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe fff9 	bl	8000534 <__aeabi_i2d>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	ec43 2b10 	vmov	d0, r2, r3
 800154a:	f00c fb75 	bl	800dc38 <sqrt>
 800154e:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	f04f 0300 	mov.w	r3, #0
 800155a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800155e:	f7ff fabb 	bl	8000ad8 <__aeabi_dcmpeq>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d11f      	bne.n	80015a8 <MPU6050_Read_All+0x250>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe ffe0 	bl	8000534 <__aeabi_i2d>
 8001574:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001578:	f7ff f970 	bl	800085c <__aeabi_ddiv>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	ec43 2b17 	vmov	d7, r2, r3
 8001584:	eeb0 0a47 	vmov.f32	s0, s14
 8001588:	eef0 0a67 	vmov.f32	s1, s15
 800158c:	f00c fb80 	bl	800dc90 <atan>
 8001590:	ec51 0b10 	vmov	r0, r1, d0
 8001594:	a35c      	add	r3, pc, #368	@ (adr r3, 8001708 <MPU6050_Read_All+0x3b0>)
 8001596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159a:	f7ff f835 	bl	8000608 <__aeabi_dmul>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 80015a6:	e005      	b.n	80015b4 <MPU6050_Read_All+0x25c>
    } else {
        roll = 0.0;
 80015a8:	f04f 0200 	mov.w	r2, #0
 80015ac:	f04f 0300 	mov.w	r3, #0
 80015b0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ba:	425b      	negs	r3, r3
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ffb9 	bl	8000534 <__aeabi_i2d>
 80015c2:	4682      	mov	sl, r0
 80015c4:	468b      	mov	fp, r1
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7fe ffb1 	bl	8000534 <__aeabi_i2d>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	ec43 2b11 	vmov	d1, r2, r3
 80015da:	ec4b ab10 	vmov	d0, sl, fp
 80015de:	f00c fb29 	bl	800dc34 <atan2>
 80015e2:	ec51 0b10 	vmov	r0, r1, d0
 80015e6:	a348      	add	r3, pc, #288	@ (adr r3, 8001708 <MPU6050_Read_All+0x3b0>)
 80015e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ec:	f7ff f80c 	bl	8000608 <__aeabi_dmul>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    // Handle pitch discontinuity
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	4b49      	ldr	r3, [pc, #292]	@ (8001724 <MPU6050_Read_All+0x3cc>)
 80015fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001602:	f7ff fa73 	bl	8000aec <__aeabi_dcmplt>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d00a      	beq.n	8001622 <MPU6050_Read_All+0x2ca>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	4b44      	ldr	r3, [pc, #272]	@ (8001728 <MPU6050_Read_All+0x3d0>)
 8001618:	f7ff fa86 	bl	8000b28 <__aeabi_dcmpgt>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d114      	bne.n	800164c <MPU6050_Read_All+0x2f4>
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	4b40      	ldr	r3, [pc, #256]	@ (8001728 <MPU6050_Read_All+0x3d0>)
 8001628:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800162c:	f7ff fa7c 	bl	8000b28 <__aeabi_dcmpgt>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d015      	beq.n	8001662 <MPU6050_Read_All+0x30a>
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	4b38      	ldr	r3, [pc, #224]	@ (8001724 <MPU6050_Read_All+0x3cc>)
 8001642:	f7ff fa53 	bl	8000aec <__aeabi_dcmplt>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00a      	beq.n	8001662 <MPU6050_Read_All+0x30a>
        KalmanY.angle = pitch;
 800164c:	4937      	ldr	r1, [pc, #220]	@ (800172c <MPU6050_Read_All+0x3d4>)
 800164e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001652:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001656:	6839      	ldr	r1, [r7, #0]
 8001658:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800165c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001660:	e014      	b.n	800168c <MPU6050_Read_All+0x334>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8001668:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 800166c:	eeb0 1a47 	vmov.f32	s2, s14
 8001670:	eef0 1a67 	vmov.f32	s3, s15
 8001674:	ed97 0b06 	vldr	d0, [r7, #24]
 8001678:	482c      	ldr	r0, [pc, #176]	@ (800172c <MPU6050_Read_All+0x3d4>)
 800167a:	f000 f85b 	bl	8001734 <Kalman_getAngle>
 800167e:	eeb0 7a40 	vmov.f32	s14, s0
 8001682:	eef0 7a60 	vmov.f32	s15, s1
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }

    // Correct roll direction based on pitch
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8001692:	4690      	mov	r8, r2
 8001694:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	4b22      	ldr	r3, [pc, #136]	@ (8001728 <MPU6050_Read_All+0x3d0>)
 800169e:	4640      	mov	r0, r8
 80016a0:	4649      	mov	r1, r9
 80016a2:	f7ff fa41 	bl	8000b28 <__aeabi_dcmpgt>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d008      	beq.n	80016be <MPU6050_Read_All+0x366>
        DataStruct->Gx = -DataStruct->Gx;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80016b2:	4614      	mov	r4, r2
 80016b4:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 80016c4:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 80016c8:	eeb0 1a47 	vmov.f32	s2, s14
 80016cc:	eef0 1a67 	vmov.f32	s3, s15
 80016d0:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 80016d4:	4816      	ldr	r0, [pc, #88]	@ (8001730 <MPU6050_Read_All+0x3d8>)
 80016d6:	f000 f82d 	bl	8001734 <Kalman_getAngle>
 80016da:	eeb0 7a40 	vmov.f32	s14, s0
 80016de:	eef0 7a60 	vmov.f32	s15, s1
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48

}
 80016e8:	bf00      	nop
 80016ea:	3740      	adds	r7, #64	@ 0x40
 80016ec:	46bd      	mov	sp, r7
 80016ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016f2:	bf00      	nop
 80016f4:	f3af 8000 	nop.w
 80016f8:	00000000 	.word	0x00000000
 80016fc:	40cc2900 	.word	0x40cc2900
 8001700:	00000000 	.word	0x00000000
 8001704:	40606000 	.word	0x40606000
 8001708:	1a63c1f8 	.word	0x1a63c1f8
 800170c:	404ca5dc 	.word	0x404ca5dc
 8001710:	40d00000 	.word	0x40d00000
 8001714:	43aa0000 	.word	0x43aa0000
 8001718:	42121eb8 	.word	0x42121eb8
 800171c:	20000d28 	.word	0x20000d28
 8001720:	408f4000 	.word	0x408f4000
 8001724:	c0568000 	.word	0xc0568000
 8001728:	40568000 	.word	0x40568000
 800172c:	20000048 	.word	0x20000048
 8001730:	20000000 	.word	0x20000000

08001734 <Kalman_getAngle>:
// Kalman filter implementation
double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8001734:	b5b0      	push	{r4, r5, r7, lr}
 8001736:	b096      	sub	sp, #88	@ 0x58
 8001738:	af00      	add	r7, sp, #0
 800173a:	61f8      	str	r0, [r7, #28]
 800173c:	ed87 0b04 	vstr	d0, [r7, #16]
 8001740:	ed87 1b02 	vstr	d1, [r7, #8]
 8001744:	ed87 2b00 	vstr	d2, [r7]
    // Predict step
    double rate = newRate - Kalman->bias;
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800174e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001752:	f7fe fda1 	bl	8000298 <__aeabi_dsub>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001764:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001768:	e9d7 0100 	ldrd	r0, r1, [r7]
 800176c:	f7fe ff4c 	bl	8000608 <__aeabi_dmul>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4620      	mov	r0, r4
 8001776:	4629      	mov	r1, r5
 8001778:	f7fe fd90 	bl	800029c <__adddf3>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	69f9      	ldr	r1, [r7, #28]
 8001782:	e9c1 2306 	strd	r2, r3, [r1, #24]

    // Update error covariance matrix
    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001792:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001796:	f7fe ff37 	bl	8000608 <__aeabi_dmul>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4610      	mov	r0, r2
 80017a0:	4619      	mov	r1, r3
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017a8:	f7fe fd76 	bl	8000298 <__aeabi_dsub>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4610      	mov	r0, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80017ba:	f7fe fd6d 	bl	8000298 <__aeabi_dsub>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	f7fe fd66 	bl	800029c <__adddf3>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017dc:	f7fe ff14 	bl	8000608 <__aeabi_dmul>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4620      	mov	r0, r4
 80017e6:	4629      	mov	r1, r5
 80017e8:	f7fe fd58 	bl	800029c <__adddf3>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	69f9      	ldr	r1, [r7, #28]
 80017f2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001802:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001806:	f7fe feff 	bl	8000608 <__aeabi_dmul>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4620      	mov	r0, r4
 8001810:	4629      	mov	r1, r5
 8001812:	f7fe fd41 	bl	8000298 <__aeabi_dsub>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	69f9      	ldr	r1, [r7, #28]
 800181c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800182c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001830:	f7fe feea 	bl	8000608 <__aeabi_dmul>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4620      	mov	r0, r4
 800183a:	4629      	mov	r1, r5
 800183c:	f7fe fd2c 	bl	8000298 <__aeabi_dsub>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	69f9      	ldr	r1, [r7, #28]
 8001846:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001856:	e9d7 2300 	ldrd	r2, r3, [r7]
 800185a:	f7fe fed5 	bl	8000608 <__aeabi_dmul>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4620      	mov	r0, r4
 8001864:	4629      	mov	r1, r5
 8001866:	f7fe fd19 	bl	800029c <__adddf3>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	69f9      	ldr	r1, [r7, #28]
 8001870:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    // Calculate Kalman gain
    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001880:	f7fe fd0c 	bl	800029c <__adddf3>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001892:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001896:	f7fe ffe1 	bl	800085c <__aeabi_ddiv>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80018a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80018ac:	f7fe ffd6 	bl	800085c <__aeabi_ddiv>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    // Update step
    double y = newAngle - Kalman->angle;
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018c2:	f7fe fce9 	bl	8000298 <__aeabi_dsub>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80018d4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80018d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80018dc:	f7fe fe94 	bl	8000608 <__aeabi_dmul>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4620      	mov	r0, r4
 80018e6:	4629      	mov	r1, r5
 80018e8:	f7fe fcd8 	bl	800029c <__adddf3>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	69f9      	ldr	r1, [r7, #28]
 80018f2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80018fc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001900:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001904:	f7fe fe80 	bl	8000608 <__aeabi_dmul>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4620      	mov	r0, r4
 800190e:	4629      	mov	r1, r5
 8001910:	f7fe fcc4 	bl	800029c <__adddf3>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	69f9      	ldr	r1, [r7, #28]
 800191a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    // Update error covariance matrix
    double P00_temp = Kalman->P[0][0];
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001924:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800192e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    Kalman->P[0][0] -= K[0] * P00_temp;
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001938:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800193c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001940:	f7fe fe62 	bl	8000608 <__aeabi_dmul>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4620      	mov	r0, r4
 800194a:	4629      	mov	r1, r5
 800194c:	f7fe fca4 	bl	8000298 <__aeabi_dsub>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	69f9      	ldr	r1, [r7, #28]
 8001956:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001960:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001964:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001968:	f7fe fe4e 	bl	8000608 <__aeabi_dmul>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4620      	mov	r0, r4
 8001972:	4629      	mov	r1, r5
 8001974:	f7fe fc90 	bl	8000298 <__aeabi_dsub>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	69f9      	ldr	r1, [r7, #28]
 800197e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001988:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800198c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001990:	f7fe fe3a 	bl	8000608 <__aeabi_dmul>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4620      	mov	r0, r4
 800199a:	4629      	mov	r1, r5
 800199c:	f7fe fc7c 	bl	8000298 <__aeabi_dsub>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	69f9      	ldr	r1, [r7, #28]
 80019a6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80019b0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80019b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80019b8:	f7fe fe26 	bl	8000608 <__aeabi_dmul>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4620      	mov	r0, r4
 80019c2:	4629      	mov	r1, r5
 80019c4:	f7fe fc68 	bl	8000298 <__aeabi_dsub>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	69f9      	ldr	r1, [r7, #28]
 80019ce:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80019d8:	ec43 2b17 	vmov	d7, r2, r3
};
 80019dc:	eeb0 0a47 	vmov.f32	s0, s14
 80019e0:	eef0 0a67 	vmov.f32	s1, s15
 80019e4:	3758      	adds	r7, #88	@ 0x58
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080019ec <set_last_read_angle_data>:
double last_x_angle = 0.0;
double last_y_angle = 0.0;
//double last_z_angle = 0.0;

/* Function to update the last read angles */
void set_last_read_angle_data(unsigned long time, double x, double y, double z) {
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	@ 0x24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	61f8      	str	r0, [r7, #28]
 80019f4:	ed87 0b04 	vstr	d0, [r7, #16]
 80019f8:	ed87 1b02 	vstr	d1, [r7, #8]
 80019fc:	ed87 2b00 	vstr	d2, [r7]
    last_read_time = time;
 8001a00:	4a09      	ldr	r2, [pc, #36]	@ (8001a28 <set_last_read_angle_data+0x3c>)
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	6013      	str	r3, [r2, #0]
    last_x_angle = x;
 8001a06:	4909      	ldr	r1, [pc, #36]	@ (8001a2c <set_last_read_angle_data+0x40>)
 8001a08:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a0c:	e9c1 2300 	strd	r2, r3, [r1]
    last_y_angle = y;
 8001a10:	4907      	ldr	r1, [pc, #28]	@ (8001a30 <set_last_read_angle_data+0x44>)
 8001a12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a16:	e9c1 2300 	strd	r2, r3, [r1]
 //   last_z_angle = z;
}
 8001a1a:	bf00      	nop
 8001a1c:	3724      	adds	r7, #36	@ 0x24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20000d2c 	.word	0x20000d2c
 8001a2c:	20000d30 	.word	0x20000d30
 8001a30:	20000d38 	.word	0x20000d38
 8001a34:	00000000 	.word	0x00000000

08001a38 <MPU6050_Data>:
//double get_last_z_angle() {
//    return last_z_angle;
//}

/* Function to handle MPU6050 sensor readings and processing */
void MPU6050_Data(I2C_HandleTypeDef *I2Cx, MPU6050_t *MPU6050) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b0aa      	sub	sp, #168	@ 0xa8
 8001a3c:	af06      	add	r7, sp, #24
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
    MPU6050_Read_All(I2Cx, MPU6050);
 8001a42:	6839      	ldr	r1, [r7, #0]
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff fc87 	bl	8001358 <MPU6050_Read_All>
    double angle_x = MPU6050->KalmanAngleX;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001a50:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    double angle_y = MPU6050->KalmanAngleY;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8001a5a:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80



    // Update the last read angles
    set_last_read_angle_data(HAL_GetTick(), angle_x, angle_y, 0.0);
 8001a5e:	f000 fa97 	bl	8001f90 <HAL_GetTick>
 8001a62:	4603      	mov	r3, r0
 8001a64:	ed9f 2b18 	vldr	d2, [pc, #96]	@ 8001ac8 <MPU6050_Data+0x90>
 8001a68:	ed97 1b20 	vldr	d1, [r7, #128]	@ 0x80
 8001a6c:	ed97 0b22 	vldr	d0, [r7, #136]	@ 0x88
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ffbb 	bl	80019ec <set_last_read_angle_data>
    snprintf(datax, sizeof(datax),"\nAngle values\n"
                   " X:%3.4f\n Y:%3.4f\n"
                   "Temperature:%3.4f\n\n\n",
                   angle_x,
                   angle_y,
                  MPU6050->Temperature);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    snprintf(datax, sizeof(datax),"\nAngle values\n"
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fd6c 	bl	8000558 <__aeabi_f2d>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	f107 0008 	add.w	r0, r7, #8
 8001a88:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001a8c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001a90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a94:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001a98:	e9cd 2300 	strd	r2, r3, [sp]
 8001a9c:	4a0c      	ldr	r2, [pc, #48]	@ (8001ad0 <MPU6050_Data+0x98>)
 8001a9e:	2178      	movs	r1, #120	@ 0x78
 8001aa0:	f009 ff82 	bl	800b9a8 <sniprintf>

  CDC_Transmit_FS((uint8_t*)datax, strlen(datax));
 8001aa4:	f107 0308 	add.w	r3, r7, #8
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fbe9 	bl	8000280 <strlen>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	f107 0308 	add.w	r3, r7, #8
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f008 fe0b 	bl	800a6d4 <CDC_Transmit_FS>

}
 8001abe:	bf00      	nop
 8001ac0:	3790      	adds	r7, #144	@ 0x90
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
	...
 8001ad0:	0800e3b0 	.word	0x0800e3b0

08001ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	607b      	str	r3, [r7, #4]
 8001ade:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <HAL_MspInit+0x54>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae2:	4a11      	ldr	r2, [pc, #68]	@ (8001b28 <HAL_MspInit+0x54>)
 8001ae4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ae8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aea:	4b0f      	ldr	r3, [pc, #60]	@ (8001b28 <HAL_MspInit+0x54>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	603b      	str	r3, [r7, #0]
 8001afa:	4b0b      	ldr	r3, [pc, #44]	@ (8001b28 <HAL_MspInit+0x54>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afe:	4a0a      	ldr	r2, [pc, #40]	@ (8001b28 <HAL_MspInit+0x54>)
 8001b00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b06:	4b08      	ldr	r3, [pc, #32]	@ (8001b28 <HAL_MspInit+0x54>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0e:	603b      	str	r3, [r7, #0]
 8001b10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	210f      	movs	r1, #15
 8001b16:	f06f 0001 	mvn.w	r0, #1
 8001b1a:	f000 fb21 	bl	8002160 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800

08001b2c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08a      	sub	sp, #40	@ 0x28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a19      	ldr	r2, [pc, #100]	@ (8001bb0 <HAL_I2C_MspInit+0x84>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d12b      	bne.n	8001ba6 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	4b18      	ldr	r3, [pc, #96]	@ (8001bb4 <HAL_I2C_MspInit+0x88>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b56:	4a17      	ldr	r2, [pc, #92]	@ (8001bb4 <HAL_I2C_MspInit+0x88>)
 8001b58:	f043 0302 	orr.w	r3, r3, #2
 8001b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b5e:	4b15      	ldr	r3, [pc, #84]	@ (8001bb4 <HAL_I2C_MspInit+0x88>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b6a:	23c0      	movs	r3, #192	@ 0xc0
 8001b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b6e:	2312      	movs	r3, #18
 8001b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b76:	2303      	movs	r3, #3
 8001b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b7a:	2304      	movs	r3, #4
 8001b7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4619      	mov	r1, r3
 8001b84:	480c      	ldr	r0, [pc, #48]	@ (8001bb8 <HAL_I2C_MspInit+0x8c>)
 8001b86:	f000 fb15 	bl	80021b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <HAL_I2C_MspInit+0x88>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	4a08      	ldr	r2, [pc, #32]	@ (8001bb4 <HAL_I2C_MspInit+0x88>)
 8001b94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b9a:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <HAL_I2C_MspInit+0x88>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ba6:	bf00      	nop
 8001ba8:	3728      	adds	r7, #40	@ 0x28
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40005400 	.word	0x40005400
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40020400 	.word	0x40020400

08001bbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08e      	sub	sp, #56	@ 0x38
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	4b33      	ldr	r3, [pc, #204]	@ (8001ca0 <HAL_InitTick+0xe4>)
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd4:	4a32      	ldr	r2, [pc, #200]	@ (8001ca0 <HAL_InitTick+0xe4>)
 8001bd6:	f043 0302 	orr.w	r3, r3, #2
 8001bda:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bdc:	4b30      	ldr	r3, [pc, #192]	@ (8001ca0 <HAL_InitTick+0xe4>)
 8001bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001be8:	f107 0210 	add.w	r2, r7, #16
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f003 fb68 	bl	80052c8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d103      	bne.n	8001c0a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c02:	f003 fb4d 	bl	80052a0 <HAL_RCC_GetPCLK1Freq>
 8001c06:	6378      	str	r0, [r7, #52]	@ 0x34
 8001c08:	e004      	b.n	8001c14 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c0a:	f003 fb49 	bl	80052a0 <HAL_RCC_GetPCLK1Freq>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c16:	4a23      	ldr	r2, [pc, #140]	@ (8001ca4 <HAL_InitTick+0xe8>)
 8001c18:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1c:	0c9b      	lsrs	r3, r3, #18
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001c22:	4b21      	ldr	r3, [pc, #132]	@ (8001ca8 <HAL_InitTick+0xec>)
 8001c24:	4a21      	ldr	r2, [pc, #132]	@ (8001cac <HAL_InitTick+0xf0>)
 8001c26:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001c28:	4b1f      	ldr	r3, [pc, #124]	@ (8001ca8 <HAL_InitTick+0xec>)
 8001c2a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c2e:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001c30:	4a1d      	ldr	r2, [pc, #116]	@ (8001ca8 <HAL_InitTick+0xec>)
 8001c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c34:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001c36:	4b1c      	ldr	r3, [pc, #112]	@ (8001ca8 <HAL_InitTick+0xec>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca8 <HAL_InitTick+0xec>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c42:	4b19      	ldr	r3, [pc, #100]	@ (8001ca8 <HAL_InitTick+0xec>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8001c48:	4817      	ldr	r0, [pc, #92]	@ (8001ca8 <HAL_InitTick+0xec>)
 8001c4a:	f003 fb6f 	bl	800532c <HAL_TIM_Base_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001c54:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d11b      	bne.n	8001c94 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8001c5c:	4812      	ldr	r0, [pc, #72]	@ (8001ca8 <HAL_InitTick+0xec>)
 8001c5e:	f003 fbbf 	bl	80053e0 <HAL_TIM_Base_Start_IT>
 8001c62:	4603      	mov	r3, r0
 8001c64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001c68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d111      	bne.n	8001c94 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c70:	201d      	movs	r0, #29
 8001c72:	f000 fa91 	bl	8002198 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b0f      	cmp	r3, #15
 8001c7a:	d808      	bhi.n	8001c8e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	201d      	movs	r0, #29
 8001c82:	f000 fa6d 	bl	8002160 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c86:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb0 <HAL_InitTick+0xf4>)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	e002      	b.n	8001c94 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001c94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3738      	adds	r7, #56	@ 0x38
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	431bde83 	.word	0x431bde83
 8001ca8:	20000d40 	.word	0x20000d40
 8001cac:	40000400 	.word	0x40000400
 8001cb0:	20000094 	.word	0x20000094

08001cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <NMI_Handler+0x4>

08001cbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc0:	bf00      	nop
 8001cc2:	e7fd      	b.n	8001cc0 <HardFault_Handler+0x4>

08001cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc8:	bf00      	nop
 8001cca:	e7fd      	b.n	8001cc8 <MemManage_Handler+0x4>

08001ccc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd0:	bf00      	nop
 8001cd2:	e7fd      	b.n	8001cd0 <BusFault_Handler+0x4>

08001cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <UsageFault_Handler+0x4>

08001cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001cee:	2002      	movs	r0, #2
 8001cf0:	f000 fc18 	bl	8002524 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001cfc:	4802      	ldr	r0, [pc, #8]	@ (8001d08 <TIM3_IRQHandler+0x10>)
 8001cfe:	f003 fbd1 	bl	80054a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000d40 	.word	0x20000d40

08001d0c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d10:	4802      	ldr	r0, [pc, #8]	@ (8001d1c <OTG_FS_IRQHandler+0x10>)
 8001d12:	f001 fd87 	bl	8003824 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200057c4 	.word	0x200057c4

08001d20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return 1;
 8001d24:	2301      	movs	r3, #1
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <_kill>:

int _kill(int pid, int sig)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d3a:	f009 ff01 	bl	800bb40 <__errno>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2216      	movs	r2, #22
 8001d42:	601a      	str	r2, [r3, #0]
  return -1;
 8001d44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <_exit>:

void _exit (int status)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d58:	f04f 31ff 	mov.w	r1, #4294967295
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff ffe7 	bl	8001d30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d62:	bf00      	nop
 8001d64:	e7fd      	b.n	8001d62 <_exit+0x12>

08001d66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b086      	sub	sp, #24
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	60f8      	str	r0, [r7, #12]
 8001d6e:	60b9      	str	r1, [r7, #8]
 8001d70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	e00a      	b.n	8001d8e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d78:	f3af 8000 	nop.w
 8001d7c:	4601      	mov	r1, r0
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	1c5a      	adds	r2, r3, #1
 8001d82:	60ba      	str	r2, [r7, #8]
 8001d84:	b2ca      	uxtb	r2, r1
 8001d86:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	dbf0      	blt.n	8001d78 <_read+0x12>
  }

  return len;
 8001d96:	687b      	ldr	r3, [r7, #4]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3718      	adds	r7, #24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	e009      	b.n	8001dc6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	1c5a      	adds	r2, r3, #1
 8001db6:	60ba      	str	r2, [r7, #8]
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	dbf1      	blt.n	8001db2 <_write+0x12>
  }
  return len;
 8001dce:	687b      	ldr	r3, [r7, #4]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <_close>:

int _close(int file)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001de0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e00:	605a      	str	r2, [r3, #4]
  return 0;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <_isatty>:

int _isatty(int file)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e18:	2301      	movs	r3, #1
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b085      	sub	sp, #20
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e48:	4a14      	ldr	r2, [pc, #80]	@ (8001e9c <_sbrk+0x5c>)
 8001e4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ea0 <_sbrk+0x60>)
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e54:	4b13      	ldr	r3, [pc, #76]	@ (8001ea4 <_sbrk+0x64>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d102      	bne.n	8001e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ea4 <_sbrk+0x64>)
 8001e5e:	4a12      	ldr	r2, [pc, #72]	@ (8001ea8 <_sbrk+0x68>)
 8001e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e62:	4b10      	ldr	r3, [pc, #64]	@ (8001ea4 <_sbrk+0x64>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d207      	bcs.n	8001e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e70:	f009 fe66 	bl	800bb40 <__errno>
 8001e74:	4603      	mov	r3, r0
 8001e76:	220c      	movs	r2, #12
 8001e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7e:	e009      	b.n	8001e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e80:	4b08      	ldr	r3, [pc, #32]	@ (8001ea4 <_sbrk+0x64>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e86:	4b07      	ldr	r3, [pc, #28]	@ (8001ea4 <_sbrk+0x64>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	4a05      	ldr	r2, [pc, #20]	@ (8001ea4 <_sbrk+0x64>)
 8001e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e92:	68fb      	ldr	r3, [r7, #12]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20010000 	.word	0x20010000
 8001ea0:	00000400 	.word	0x00000400
 8001ea4:	20000d88 	.word	0x20000d88
 8001ea8:	20006018 	.word	0x20006018

08001eac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <SystemInit+0x20>)
 8001eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eb6:	4a05      	ldr	r2, [pc, #20]	@ (8001ecc <SystemInit+0x20>)
 8001eb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ebc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ed0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f08 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ed4:	f7ff ffea 	bl	8001eac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ed8:	480c      	ldr	r0, [pc, #48]	@ (8001f0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001eda:	490d      	ldr	r1, [pc, #52]	@ (8001f10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001edc:	4a0d      	ldr	r2, [pc, #52]	@ (8001f14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee0:	e002      	b.n	8001ee8 <LoopCopyDataInit>

08001ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ee6:	3304      	adds	r3, #4

08001ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eec:	d3f9      	bcc.n	8001ee2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eee:	4a0a      	ldr	r2, [pc, #40]	@ (8001f18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ef0:	4c0a      	ldr	r4, [pc, #40]	@ (8001f1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef4:	e001      	b.n	8001efa <LoopFillZerobss>

08001ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef8:	3204      	adds	r2, #4

08001efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001efc:	d3fb      	bcc.n	8001ef6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001efe:	f009 fe25 	bl	800bb4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f02:	f7ff f809 	bl	8000f18 <main>
  bx  lr    
 8001f06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f08:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f10:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8001f14:	0800e858 	.word	0x0800e858
  ldr r2, =_sbss
 8001f18:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8001f1c:	20006014 	.word	0x20006014

08001f20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f20:	e7fe      	b.n	8001f20 <ADC_IRQHandler>
	...

08001f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f28:	4b0e      	ldr	r3, [pc, #56]	@ (8001f64 <HAL_Init+0x40>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f64 <HAL_Init+0x40>)
 8001f2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f34:	4b0b      	ldr	r3, [pc, #44]	@ (8001f64 <HAL_Init+0x40>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0a      	ldr	r2, [pc, #40]	@ (8001f64 <HAL_Init+0x40>)
 8001f3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f40:	4b08      	ldr	r3, [pc, #32]	@ (8001f64 <HAL_Init+0x40>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a07      	ldr	r2, [pc, #28]	@ (8001f64 <HAL_Init+0x40>)
 8001f46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f4c:	2003      	movs	r0, #3
 8001f4e:	f000 f8fc 	bl	800214a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f52:	200f      	movs	r0, #15
 8001f54:	f7ff fe32 	bl	8001bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f58:	f7ff fdbc 	bl	8001ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40023c00 	.word	0x40023c00

08001f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <HAL_IncTick+0x20>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <HAL_IncTick+0x24>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	4a04      	ldr	r2, [pc, #16]	@ (8001f8c <HAL_IncTick+0x24>)
 8001f7a:	6013      	str	r3, [r2, #0]
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000098 	.word	0x20000098
 8001f8c:	20000d8c 	.word	0x20000d8c

08001f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return uwTick;
 8001f94:	4b03      	ldr	r3, [pc, #12]	@ (8001fa4 <HAL_GetTick+0x14>)
 8001f96:	681b      	ldr	r3, [r3, #0]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20000d8c 	.word	0x20000d8c

08001fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb0:	f7ff ffee 	bl	8001f90 <HAL_GetTick>
 8001fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc0:	d005      	beq.n	8001fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001fec <HAL_Delay+0x44>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4413      	add	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fce:	bf00      	nop
 8001fd0:	f7ff ffde 	bl	8001f90 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d8f7      	bhi.n	8001fd0 <HAL_Delay+0x28>
  {
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000098 	.word	0x20000098

08001ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002000:	4b0c      	ldr	r3, [pc, #48]	@ (8002034 <__NVIC_SetPriorityGrouping+0x44>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800200c:	4013      	ands	r3, r2
 800200e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002018:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800201c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002022:	4a04      	ldr	r2, [pc, #16]	@ (8002034 <__NVIC_SetPriorityGrouping+0x44>)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	60d3      	str	r3, [r2, #12]
}
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800203c:	4b04      	ldr	r3, [pc, #16]	@ (8002050 <__NVIC_GetPriorityGrouping+0x18>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	0a1b      	lsrs	r3, r3, #8
 8002042:	f003 0307 	and.w	r3, r3, #7
}
 8002046:	4618      	mov	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	2b00      	cmp	r3, #0
 8002064:	db0b      	blt.n	800207e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	f003 021f 	and.w	r2, r3, #31
 800206c:	4907      	ldr	r1, [pc, #28]	@ (800208c <__NVIC_EnableIRQ+0x38>)
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	095b      	lsrs	r3, r3, #5
 8002074:	2001      	movs	r0, #1
 8002076:	fa00 f202 	lsl.w	r2, r0, r2
 800207a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000e100 	.word	0xe000e100

08002090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	6039      	str	r1, [r7, #0]
 800209a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	db0a      	blt.n	80020ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	490c      	ldr	r1, [pc, #48]	@ (80020dc <__NVIC_SetPriority+0x4c>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	0112      	lsls	r2, r2, #4
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	440b      	add	r3, r1
 80020b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b8:	e00a      	b.n	80020d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4908      	ldr	r1, [pc, #32]	@ (80020e0 <__NVIC_SetPriority+0x50>)
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	3b04      	subs	r3, #4
 80020c8:	0112      	lsls	r2, r2, #4
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	440b      	add	r3, r1
 80020ce:	761a      	strb	r2, [r3, #24]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000e100 	.word	0xe000e100
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	@ 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f1c3 0307 	rsb	r3, r3, #7
 80020fe:	2b04      	cmp	r3, #4
 8002100:	bf28      	it	cs
 8002102:	2304      	movcs	r3, #4
 8002104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3304      	adds	r3, #4
 800210a:	2b06      	cmp	r3, #6
 800210c:	d902      	bls.n	8002114 <NVIC_EncodePriority+0x30>
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3b03      	subs	r3, #3
 8002112:	e000      	b.n	8002116 <NVIC_EncodePriority+0x32>
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002118:	f04f 32ff 	mov.w	r2, #4294967295
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43da      	mvns	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	401a      	ands	r2, r3
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800212c:	f04f 31ff 	mov.w	r1, #4294967295
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	fa01 f303 	lsl.w	r3, r1, r3
 8002136:	43d9      	mvns	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800213c:	4313      	orrs	r3, r2
         );
}
 800213e:	4618      	mov	r0, r3
 8002140:	3724      	adds	r7, #36	@ 0x24
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff ff4c 	bl	8001ff0 <__NVIC_SetPriorityGrouping>
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
 800216c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002172:	f7ff ff61 	bl	8002038 <__NVIC_GetPriorityGrouping>
 8002176:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	68b9      	ldr	r1, [r7, #8]
 800217c:	6978      	ldr	r0, [r7, #20]
 800217e:	f7ff ffb1 	bl	80020e4 <NVIC_EncodePriority>
 8002182:	4602      	mov	r2, r0
 8002184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002188:	4611      	mov	r1, r2
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff ff80 	bl	8002090 <__NVIC_SetPriority>
}
 8002190:	bf00      	nop
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff ff54 	bl	8002054 <__NVIC_EnableIRQ>
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b089      	sub	sp, #36	@ 0x24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
 80021ce:	e159      	b.n	8002484 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021d0:	2201      	movs	r2, #1
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	f040 8148 	bne.w	800247e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d005      	beq.n	8002206 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002202:	2b02      	cmp	r3, #2
 8002204:	d130      	bne.n	8002268 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	2203      	movs	r2, #3
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800223c:	2201      	movs	r2, #1
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f003 0201 	and.w	r2, r3, #1
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 0303 	and.w	r3, r3, #3
 8002270:	2b03      	cmp	r3, #3
 8002272:	d017      	beq.n	80022a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	2203      	movs	r2, #3
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d123      	bne.n	80022f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	08da      	lsrs	r2, r3, #3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3208      	adds	r2, #8
 80022b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	220f      	movs	r2, #15
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	08da      	lsrs	r2, r3, #3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3208      	adds	r2, #8
 80022f2:	69b9      	ldr	r1, [r7, #24]
 80022f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	2203      	movs	r2, #3
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 0203 	and.w	r2, r3, #3
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 80a2 	beq.w	800247e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	4b57      	ldr	r3, [pc, #348]	@ (800249c <HAL_GPIO_Init+0x2e8>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002342:	4a56      	ldr	r2, [pc, #344]	@ (800249c <HAL_GPIO_Init+0x2e8>)
 8002344:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002348:	6453      	str	r3, [r2, #68]	@ 0x44
 800234a:	4b54      	ldr	r3, [pc, #336]	@ (800249c <HAL_GPIO_Init+0x2e8>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002356:	4a52      	ldr	r2, [pc, #328]	@ (80024a0 <HAL_GPIO_Init+0x2ec>)
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	089b      	lsrs	r3, r3, #2
 800235c:	3302      	adds	r3, #2
 800235e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	220f      	movs	r2, #15
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4013      	ands	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a49      	ldr	r2, [pc, #292]	@ (80024a4 <HAL_GPIO_Init+0x2f0>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d019      	beq.n	80023b6 <HAL_GPIO_Init+0x202>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a48      	ldr	r2, [pc, #288]	@ (80024a8 <HAL_GPIO_Init+0x2f4>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d013      	beq.n	80023b2 <HAL_GPIO_Init+0x1fe>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a47      	ldr	r2, [pc, #284]	@ (80024ac <HAL_GPIO_Init+0x2f8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d00d      	beq.n	80023ae <HAL_GPIO_Init+0x1fa>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a46      	ldr	r2, [pc, #280]	@ (80024b0 <HAL_GPIO_Init+0x2fc>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d007      	beq.n	80023aa <HAL_GPIO_Init+0x1f6>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a45      	ldr	r2, [pc, #276]	@ (80024b4 <HAL_GPIO_Init+0x300>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d101      	bne.n	80023a6 <HAL_GPIO_Init+0x1f2>
 80023a2:	2304      	movs	r3, #4
 80023a4:	e008      	b.n	80023b8 <HAL_GPIO_Init+0x204>
 80023a6:	2307      	movs	r3, #7
 80023a8:	e006      	b.n	80023b8 <HAL_GPIO_Init+0x204>
 80023aa:	2303      	movs	r3, #3
 80023ac:	e004      	b.n	80023b8 <HAL_GPIO_Init+0x204>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e002      	b.n	80023b8 <HAL_GPIO_Init+0x204>
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <HAL_GPIO_Init+0x204>
 80023b6:	2300      	movs	r3, #0
 80023b8:	69fa      	ldr	r2, [r7, #28]
 80023ba:	f002 0203 	and.w	r2, r2, #3
 80023be:	0092      	lsls	r2, r2, #2
 80023c0:	4093      	lsls	r3, r2
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023c8:	4935      	ldr	r1, [pc, #212]	@ (80024a0 <HAL_GPIO_Init+0x2ec>)
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	089b      	lsrs	r3, r3, #2
 80023ce:	3302      	adds	r3, #2
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023d6:	4b38      	ldr	r3, [pc, #224]	@ (80024b8 <HAL_GPIO_Init+0x304>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023fa:	4a2f      	ldr	r2, [pc, #188]	@ (80024b8 <HAL_GPIO_Init+0x304>)
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002400:	4b2d      	ldr	r3, [pc, #180]	@ (80024b8 <HAL_GPIO_Init+0x304>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002424:	4a24      	ldr	r2, [pc, #144]	@ (80024b8 <HAL_GPIO_Init+0x304>)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800242a:	4b23      	ldr	r3, [pc, #140]	@ (80024b8 <HAL_GPIO_Init+0x304>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	43db      	mvns	r3, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4013      	ands	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800244e:	4a1a      	ldr	r2, [pc, #104]	@ (80024b8 <HAL_GPIO_Init+0x304>)
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002454:	4b18      	ldr	r3, [pc, #96]	@ (80024b8 <HAL_GPIO_Init+0x304>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002478:	4a0f      	ldr	r2, [pc, #60]	@ (80024b8 <HAL_GPIO_Init+0x304>)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3301      	adds	r3, #1
 8002482:	61fb      	str	r3, [r7, #28]
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	2b0f      	cmp	r3, #15
 8002488:	f67f aea2 	bls.w	80021d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	3724      	adds	r7, #36	@ 0x24
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	40023800 	.word	0x40023800
 80024a0:	40013800 	.word	0x40013800
 80024a4:	40020000 	.word	0x40020000
 80024a8:	40020400 	.word	0x40020400
 80024ac:	40020800 	.word	0x40020800
 80024b0:	40020c00 	.word	0x40020c00
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40013c00 	.word	0x40013c00

080024bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	807b      	strh	r3, [r7, #2]
 80024c8:	4613      	mov	r3, r2
 80024ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024cc:	787b      	ldrb	r3, [r7, #1]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024d2:	887a      	ldrh	r2, [r7, #2]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024d8:	e003      	b.n	80024e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024da:	887b      	ldrh	r3, [r7, #2]
 80024dc:	041a      	lsls	r2, r3, #16
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	619a      	str	r2, [r3, #24]
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b085      	sub	sp, #20
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	460b      	mov	r3, r1
 80024f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002500:	887a      	ldrh	r2, [r7, #2]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4013      	ands	r3, r2
 8002506:	041a      	lsls	r2, r3, #16
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	43d9      	mvns	r1, r3
 800250c:	887b      	ldrh	r3, [r7, #2]
 800250e:	400b      	ands	r3, r1
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	619a      	str	r2, [r3, #24]
}
 8002516:	bf00      	nop
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
	...

08002524 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800252e:	4b08      	ldr	r3, [pc, #32]	@ (8002550 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002530:	695a      	ldr	r2, [r3, #20]
 8002532:	88fb      	ldrh	r3, [r7, #6]
 8002534:	4013      	ands	r3, r2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d006      	beq.n	8002548 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800253a:	4a05      	ldr	r2, [pc, #20]	@ (8002550 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800253c:	88fb      	ldrh	r3, [r7, #6]
 800253e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002540:	88fb      	ldrh	r3, [r7, #6]
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe fe46 	bl	80011d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002548:	bf00      	nop
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40013c00 	.word	0x40013c00

08002554 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e12b      	b.n	80027be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d106      	bne.n	8002580 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7ff fad6 	bl	8001b2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2224      	movs	r2, #36	@ 0x24
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0201 	bic.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025b8:	f002 fe72 	bl	80052a0 <HAL_RCC_GetPCLK1Freq>
 80025bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	4a81      	ldr	r2, [pc, #516]	@ (80027c8 <HAL_I2C_Init+0x274>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d807      	bhi.n	80025d8 <HAL_I2C_Init+0x84>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	4a80      	ldr	r2, [pc, #512]	@ (80027cc <HAL_I2C_Init+0x278>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	bf94      	ite	ls
 80025d0:	2301      	movls	r3, #1
 80025d2:	2300      	movhi	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	e006      	b.n	80025e6 <HAL_I2C_Init+0x92>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4a7d      	ldr	r2, [pc, #500]	@ (80027d0 <HAL_I2C_Init+0x27c>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	bf94      	ite	ls
 80025e0:	2301      	movls	r3, #1
 80025e2:	2300      	movhi	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e0e7      	b.n	80027be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4a78      	ldr	r2, [pc, #480]	@ (80027d4 <HAL_I2C_Init+0x280>)
 80025f2:	fba2 2303 	umull	r2, r3, r2, r3
 80025f6:	0c9b      	lsrs	r3, r3, #18
 80025f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	430a      	orrs	r2, r1
 800260c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	4a6a      	ldr	r2, [pc, #424]	@ (80027c8 <HAL_I2C_Init+0x274>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d802      	bhi.n	8002628 <HAL_I2C_Init+0xd4>
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	3301      	adds	r3, #1
 8002626:	e009      	b.n	800263c <HAL_I2C_Init+0xe8>
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800262e:	fb02 f303 	mul.w	r3, r2, r3
 8002632:	4a69      	ldr	r2, [pc, #420]	@ (80027d8 <HAL_I2C_Init+0x284>)
 8002634:	fba2 2303 	umull	r2, r3, r2, r3
 8002638:	099b      	lsrs	r3, r3, #6
 800263a:	3301      	adds	r3, #1
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6812      	ldr	r2, [r2, #0]
 8002640:	430b      	orrs	r3, r1
 8002642:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800264e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	495c      	ldr	r1, [pc, #368]	@ (80027c8 <HAL_I2C_Init+0x274>)
 8002658:	428b      	cmp	r3, r1
 800265a:	d819      	bhi.n	8002690 <HAL_I2C_Init+0x13c>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	1e59      	subs	r1, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	fbb1 f3f3 	udiv	r3, r1, r3
 800266a:	1c59      	adds	r1, r3, #1
 800266c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002670:	400b      	ands	r3, r1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00a      	beq.n	800268c <HAL_I2C_Init+0x138>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	1e59      	subs	r1, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	fbb1 f3f3 	udiv	r3, r1, r3
 8002684:	3301      	adds	r3, #1
 8002686:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800268a:	e051      	b.n	8002730 <HAL_I2C_Init+0x1dc>
 800268c:	2304      	movs	r3, #4
 800268e:	e04f      	b.n	8002730 <HAL_I2C_Init+0x1dc>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d111      	bne.n	80026bc <HAL_I2C_Init+0x168>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	1e58      	subs	r0, r3, #1
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6859      	ldr	r1, [r3, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	440b      	add	r3, r1
 80026a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026aa:	3301      	adds	r3, #1
 80026ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	bf0c      	ite	eq
 80026b4:	2301      	moveq	r3, #1
 80026b6:	2300      	movne	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	e012      	b.n	80026e2 <HAL_I2C_Init+0x18e>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	1e58      	subs	r0, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6859      	ldr	r1, [r3, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	0099      	lsls	r1, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80026d2:	3301      	adds	r3, #1
 80026d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d8:	2b00      	cmp	r3, #0
 80026da:	bf0c      	ite	eq
 80026dc:	2301      	moveq	r3, #1
 80026de:	2300      	movne	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_I2C_Init+0x196>
 80026e6:	2301      	movs	r3, #1
 80026e8:	e022      	b.n	8002730 <HAL_I2C_Init+0x1dc>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10e      	bne.n	8002710 <HAL_I2C_Init+0x1bc>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1e58      	subs	r0, r3, #1
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6859      	ldr	r1, [r3, #4]
 80026fa:	460b      	mov	r3, r1
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	440b      	add	r3, r1
 8002700:	fbb0 f3f3 	udiv	r3, r0, r3
 8002704:	3301      	adds	r3, #1
 8002706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800270a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800270e:	e00f      	b.n	8002730 <HAL_I2C_Init+0x1dc>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	1e58      	subs	r0, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6859      	ldr	r1, [r3, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	0099      	lsls	r1, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	fbb0 f3f3 	udiv	r3, r0, r3
 8002726:	3301      	adds	r3, #1
 8002728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800272c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	6809      	ldr	r1, [r1, #0]
 8002734:	4313      	orrs	r3, r2
 8002736:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69da      	ldr	r2, [r3, #28]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800275e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6911      	ldr	r1, [r2, #16]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	68d2      	ldr	r2, [r2, #12]
 800276a:	4311      	orrs	r1, r2
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	430b      	orrs	r3, r1
 8002772:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695a      	ldr	r2, [r3, #20]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0201 	orr.w	r2, r2, #1
 800279e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2220      	movs	r2, #32
 80027aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	000186a0 	.word	0x000186a0
 80027cc:	001e847f 	.word	0x001e847f
 80027d0:	003d08ff 	.word	0x003d08ff
 80027d4:	431bde83 	.word	0x431bde83
 80027d8:	10624dd3 	.word	0x10624dd3

080027dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b088      	sub	sp, #32
 80027e0:	af02      	add	r7, sp, #8
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	4608      	mov	r0, r1
 80027e6:	4611      	mov	r1, r2
 80027e8:	461a      	mov	r2, r3
 80027ea:	4603      	mov	r3, r0
 80027ec:	817b      	strh	r3, [r7, #10]
 80027ee:	460b      	mov	r3, r1
 80027f0:	813b      	strh	r3, [r7, #8]
 80027f2:	4613      	mov	r3, r2
 80027f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027f6:	f7ff fbcb 	bl	8001f90 <HAL_GetTick>
 80027fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b20      	cmp	r3, #32
 8002806:	f040 80d9 	bne.w	80029bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	2319      	movs	r3, #25
 8002810:	2201      	movs	r2, #1
 8002812:	496d      	ldr	r1, [pc, #436]	@ (80029c8 <HAL_I2C_Mem_Write+0x1ec>)
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 fc8b 	bl	8003130 <I2C_WaitOnFlagUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002820:	2302      	movs	r3, #2
 8002822:	e0cc      	b.n	80029be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_I2C_Mem_Write+0x56>
 800282e:	2302      	movs	r3, #2
 8002830:	e0c5      	b.n	80029be <HAL_I2C_Mem_Write+0x1e2>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b01      	cmp	r3, #1
 8002846:	d007      	beq.n	8002858 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0201 	orr.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002866:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2221      	movs	r2, #33	@ 0x21
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2240      	movs	r2, #64	@ 0x40
 8002874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6a3a      	ldr	r2, [r7, #32]
 8002882:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002888:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800288e:	b29a      	uxth	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4a4d      	ldr	r2, [pc, #308]	@ (80029cc <HAL_I2C_Mem_Write+0x1f0>)
 8002898:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800289a:	88f8      	ldrh	r0, [r7, #6]
 800289c:	893a      	ldrh	r2, [r7, #8]
 800289e:	8979      	ldrh	r1, [r7, #10]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	9301      	str	r3, [sp, #4]
 80028a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	4603      	mov	r3, r0
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 fac2 	bl	8002e34 <I2C_RequestMemoryWrite>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d052      	beq.n	800295c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e081      	b.n	80029be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 fd50 	bl	8003364 <I2C_WaitOnTXEFlagUntilTimeout>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00d      	beq.n	80028e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d107      	bne.n	80028e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e06b      	b.n	80029be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ea:	781a      	ldrb	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800290c:	b29b      	uxth	r3, r3
 800290e:	3b01      	subs	r3, #1
 8002910:	b29a      	uxth	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b04      	cmp	r3, #4
 8002922:	d11b      	bne.n	800295c <HAL_I2C_Mem_Write+0x180>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002928:	2b00      	cmp	r3, #0
 800292a:	d017      	beq.n	800295c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002930:	781a      	ldrb	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002952:	b29b      	uxth	r3, r3
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1aa      	bne.n	80028ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 fd43 	bl	80033f4 <I2C_WaitOnBTFFlagUntilTimeout>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00d      	beq.n	8002990 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002978:	2b04      	cmp	r3, #4
 800297a:	d107      	bne.n	800298c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800298a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e016      	b.n	80029be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800299e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2220      	movs	r2, #32
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	e000      	b.n	80029be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80029bc:	2302      	movs	r3, #2
  }
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	00100002 	.word	0x00100002
 80029cc:	ffff0000 	.word	0xffff0000

080029d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08c      	sub	sp, #48	@ 0x30
 80029d4:	af02      	add	r7, sp, #8
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	4608      	mov	r0, r1
 80029da:	4611      	mov	r1, r2
 80029dc:	461a      	mov	r2, r3
 80029de:	4603      	mov	r3, r0
 80029e0:	817b      	strh	r3, [r7, #10]
 80029e2:	460b      	mov	r3, r1
 80029e4:	813b      	strh	r3, [r7, #8]
 80029e6:	4613      	mov	r3, r2
 80029e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029ea:	f7ff fad1 	bl	8001f90 <HAL_GetTick>
 80029ee:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b20      	cmp	r3, #32
 80029fa:	f040 8214 	bne.w	8002e26 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	2319      	movs	r3, #25
 8002a04:	2201      	movs	r2, #1
 8002a06:	497b      	ldr	r1, [pc, #492]	@ (8002bf4 <HAL_I2C_Mem_Read+0x224>)
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 fb91 	bl	8003130 <I2C_WaitOnFlagUntilTimeout>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002a14:	2302      	movs	r3, #2
 8002a16:	e207      	b.n	8002e28 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d101      	bne.n	8002a26 <HAL_I2C_Mem_Read+0x56>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e200      	b.n	8002e28 <HAL_I2C_Mem_Read+0x458>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d007      	beq.n	8002a4c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0201 	orr.w	r2, r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2222      	movs	r2, #34	@ 0x22
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2240      	movs	r2, #64	@ 0x40
 8002a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002a7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4a5b      	ldr	r2, [pc, #364]	@ (8002bf8 <HAL_I2C_Mem_Read+0x228>)
 8002a8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a8e:	88f8      	ldrh	r0, [r7, #6]
 8002a90:	893a      	ldrh	r2, [r7, #8]
 8002a92:	8979      	ldrh	r1, [r7, #10]
 8002a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a96:	9301      	str	r3, [sp, #4]
 8002a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 fa5e 	bl	8002f60 <I2C_RequestMemoryRead>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e1bc      	b.n	8002e28 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d113      	bne.n	8002ade <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	623b      	str	r3, [r7, #32]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	623b      	str	r3, [r7, #32]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	623b      	str	r3, [r7, #32]
 8002aca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	e190      	b.n	8002e00 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d11b      	bne.n	8002b1e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002af4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af6:	2300      	movs	r3, #0
 8002af8:	61fb      	str	r3, [r7, #28]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	61fb      	str	r3, [r7, #28]
 8002b0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	e170      	b.n	8002e00 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d11b      	bne.n	8002b5e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b34:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b46:	2300      	movs	r3, #0
 8002b48:	61bb      	str	r3, [r7, #24]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	61bb      	str	r3, [r7, #24]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	61bb      	str	r3, [r7, #24]
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	e150      	b.n	8002e00 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	617b      	str	r3, [r7, #20]
 8002b72:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b74:	e144      	b.n	8002e00 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b7a:	2b03      	cmp	r3, #3
 8002b7c:	f200 80f1 	bhi.w	8002d62 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d123      	bne.n	8002bd0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b8a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 fc79 	bl	8003484 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e145      	b.n	8002e28 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691a      	ldr	r2, [r3, #16]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bae:	1c5a      	adds	r2, r3, #1
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002bce:	e117      	b.n	8002e00 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d14e      	bne.n	8002c76 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bde:	2200      	movs	r2, #0
 8002be0:	4906      	ldr	r1, [pc, #24]	@ (8002bfc <HAL_I2C_Mem_Read+0x22c>)
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 faa4 	bl	8003130 <I2C_WaitOnFlagUntilTimeout>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d008      	beq.n	8002c00 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e11a      	b.n	8002e28 <HAL_I2C_Mem_Read+0x458>
 8002bf2:	bf00      	nop
 8002bf4:	00100002 	.word	0x00100002
 8002bf8:	ffff0000 	.word	0xffff0000
 8002bfc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691a      	ldr	r2, [r3, #16]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c74:	e0c4      	b.n	8002e00 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	496c      	ldr	r1, [pc, #432]	@ (8002e30 <HAL_I2C_Mem_Read+0x460>)
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 fa55 	bl	8003130 <I2C_WaitOnFlagUntilTimeout>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0cb      	b.n	8002e28 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cd8:	2200      	movs	r2, #0
 8002cda:	4955      	ldr	r1, [pc, #340]	@ (8002e30 <HAL_I2C_Mem_Read+0x460>)
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 fa27 	bl	8003130 <I2C_WaitOnFlagUntilTimeout>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e09d      	b.n	8002e28 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	691a      	ldr	r2, [r3, #16]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d60:	e04e      	b.n	8002e00 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d64:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 fb8c 	bl	8003484 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e058      	b.n	8002e28 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	691a      	ldr	r2, [r3, #16]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d80:	b2d2      	uxtb	r2, r2
 8002d82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d92:	3b01      	subs	r3, #1
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d124      	bne.n	8002e00 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dba:	2b03      	cmp	r3, #3
 8002dbc:	d107      	bne.n	8002dce <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dcc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f47f aeb6 	bne.w	8002b76 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e22:	2300      	movs	r3, #0
 8002e24:	e000      	b.n	8002e28 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002e26:	2302      	movs	r3, #2
  }
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3728      	adds	r7, #40	@ 0x28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	00010004 	.word	0x00010004

08002e34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af02      	add	r7, sp, #8
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	4608      	mov	r0, r1
 8002e3e:	4611      	mov	r1, r2
 8002e40:	461a      	mov	r2, r3
 8002e42:	4603      	mov	r3, r0
 8002e44:	817b      	strh	r3, [r7, #10]
 8002e46:	460b      	mov	r3, r1
 8002e48:	813b      	strh	r3, [r7, #8]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 f960 	bl	8003130 <I2C_WaitOnFlagUntilTimeout>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00d      	beq.n	8002e92 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e84:	d103      	bne.n	8002e8e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e8c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e05f      	b.n	8002f52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e92:	897b      	ldrh	r3, [r7, #10]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	461a      	mov	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ea0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea4:	6a3a      	ldr	r2, [r7, #32]
 8002ea6:	492d      	ldr	r1, [pc, #180]	@ (8002f5c <I2C_RequestMemoryWrite+0x128>)
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 f9bb 	bl	8003224 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e04c      	b.n	8002f52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ed0:	6a39      	ldr	r1, [r7, #32]
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 fa46 	bl	8003364 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00d      	beq.n	8002efa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d107      	bne.n	8002ef6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ef4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e02b      	b.n	8002f52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002efa:	88fb      	ldrh	r3, [r7, #6]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d105      	bne.n	8002f0c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f00:	893b      	ldrh	r3, [r7, #8]
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	611a      	str	r2, [r3, #16]
 8002f0a:	e021      	b.n	8002f50 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f0c:	893b      	ldrh	r3, [r7, #8]
 8002f0e:	0a1b      	lsrs	r3, r3, #8
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f1c:	6a39      	ldr	r1, [r7, #32]
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 fa20 	bl	8003364 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00d      	beq.n	8002f46 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d107      	bne.n	8002f42 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e005      	b.n	8002f52 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f46:	893b      	ldrh	r3, [r7, #8]
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	00010002 	.word	0x00010002

08002f60 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	4608      	mov	r0, r1
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4603      	mov	r3, r0
 8002f70:	817b      	strh	r3, [r7, #10]
 8002f72:	460b      	mov	r3, r1
 8002f74:	813b      	strh	r3, [r7, #8]
 8002f76:	4613      	mov	r3, r2
 8002f78:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f88:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 f8c2 	bl	8003130 <I2C_WaitOnFlagUntilTimeout>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00d      	beq.n	8002fce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fc0:	d103      	bne.n	8002fca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fc8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e0aa      	b.n	8003124 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fce:	897b      	ldrh	r3, [r7, #10]
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002fdc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe0:	6a3a      	ldr	r2, [r7, #32]
 8002fe2:	4952      	ldr	r1, [pc, #328]	@ (800312c <I2C_RequestMemoryRead+0x1cc>)
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 f91d 	bl	8003224 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e097      	b.n	8003124 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	617b      	str	r3, [r7, #20]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800300a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800300c:	6a39      	ldr	r1, [r7, #32]
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 f9a8 	bl	8003364 <I2C_WaitOnTXEFlagUntilTimeout>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00d      	beq.n	8003036 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301e:	2b04      	cmp	r3, #4
 8003020:	d107      	bne.n	8003032 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003030:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e076      	b.n	8003124 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d105      	bne.n	8003048 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800303c:	893b      	ldrh	r3, [r7, #8]
 800303e:	b2da      	uxtb	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	611a      	str	r2, [r3, #16]
 8003046:	e021      	b.n	800308c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003048:	893b      	ldrh	r3, [r7, #8]
 800304a:	0a1b      	lsrs	r3, r3, #8
 800304c:	b29b      	uxth	r3, r3
 800304e:	b2da      	uxtb	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003058:	6a39      	ldr	r1, [r7, #32]
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 f982 	bl	8003364 <I2C_WaitOnTXEFlagUntilTimeout>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00d      	beq.n	8003082 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306a:	2b04      	cmp	r3, #4
 800306c:	d107      	bne.n	800307e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800307c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e050      	b.n	8003124 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003082:	893b      	ldrh	r3, [r7, #8]
 8003084:	b2da      	uxtb	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800308c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800308e:	6a39      	ldr	r1, [r7, #32]
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 f967 	bl	8003364 <I2C_WaitOnTXEFlagUntilTimeout>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00d      	beq.n	80030b8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d107      	bne.n	80030b4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e035      	b.n	8003124 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 f82b 	bl	8003130 <I2C_WaitOnFlagUntilTimeout>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00d      	beq.n	80030fc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030ee:	d103      	bne.n	80030f8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e013      	b.n	8003124 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80030fc:	897b      	ldrh	r3, [r7, #10]
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	b2da      	uxtb	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800310c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310e:	6a3a      	ldr	r2, [r7, #32]
 8003110:	4906      	ldr	r1, [pc, #24]	@ (800312c <I2C_RequestMemoryRead+0x1cc>)
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 f886 	bl	8003224 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3718      	adds	r7, #24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	00010002 	.word	0x00010002

08003130 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	603b      	str	r3, [r7, #0]
 800313c:	4613      	mov	r3, r2
 800313e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003140:	e048      	b.n	80031d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003148:	d044      	beq.n	80031d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800314a:	f7fe ff21 	bl	8001f90 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d302      	bcc.n	8003160 <I2C_WaitOnFlagUntilTimeout+0x30>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d139      	bne.n	80031d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	0c1b      	lsrs	r3, r3, #16
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b01      	cmp	r3, #1
 8003168:	d10d      	bne.n	8003186 <I2C_WaitOnFlagUntilTimeout+0x56>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	43da      	mvns	r2, r3
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	4013      	ands	r3, r2
 8003176:	b29b      	uxth	r3, r3
 8003178:	2b00      	cmp	r3, #0
 800317a:	bf0c      	ite	eq
 800317c:	2301      	moveq	r3, #1
 800317e:	2300      	movne	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	461a      	mov	r2, r3
 8003184:	e00c      	b.n	80031a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	43da      	mvns	r2, r3
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	4013      	ands	r3, r2
 8003192:	b29b      	uxth	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	bf0c      	ite	eq
 8003198:	2301      	moveq	r3, #1
 800319a:	2300      	movne	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	461a      	mov	r2, r3
 80031a0:	79fb      	ldrb	r3, [r7, #7]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d116      	bne.n	80031d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c0:	f043 0220 	orr.w	r2, r3, #32
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e023      	b.n	800321c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	0c1b      	lsrs	r3, r3, #16
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d10d      	bne.n	80031fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	43da      	mvns	r2, r3
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	4013      	ands	r3, r2
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	bf0c      	ite	eq
 80031f0:	2301      	moveq	r3, #1
 80031f2:	2300      	movne	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	461a      	mov	r2, r3
 80031f8:	e00c      	b.n	8003214 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	43da      	mvns	r2, r3
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	4013      	ands	r3, r2
 8003206:	b29b      	uxth	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	bf0c      	ite	eq
 800320c:	2301      	moveq	r3, #1
 800320e:	2300      	movne	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	461a      	mov	r2, r3
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	429a      	cmp	r2, r3
 8003218:	d093      	beq.n	8003142 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
 8003230:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003232:	e071      	b.n	8003318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800323e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003242:	d123      	bne.n	800328c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003252:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800325c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003278:	f043 0204 	orr.w	r2, r3, #4
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e067      	b.n	800335c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003292:	d041      	beq.n	8003318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003294:	f7fe fe7c 	bl	8001f90 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d302      	bcc.n	80032aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d136      	bne.n	8003318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	0c1b      	lsrs	r3, r3, #16
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d10c      	bne.n	80032ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	43da      	mvns	r2, r3
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	4013      	ands	r3, r2
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	bf14      	ite	ne
 80032c6:	2301      	movne	r3, #1
 80032c8:	2300      	moveq	r3, #0
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	e00b      	b.n	80032e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	43da      	mvns	r2, r3
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	4013      	ands	r3, r2
 80032da:	b29b      	uxth	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	bf14      	ite	ne
 80032e0:	2301      	movne	r3, #1
 80032e2:	2300      	moveq	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d016      	beq.n	8003318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003304:	f043 0220 	orr.w	r2, r3, #32
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e021      	b.n	800335c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	0c1b      	lsrs	r3, r3, #16
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b01      	cmp	r3, #1
 8003320:	d10c      	bne.n	800333c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	43da      	mvns	r2, r3
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	4013      	ands	r3, r2
 800332e:	b29b      	uxth	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	bf14      	ite	ne
 8003334:	2301      	movne	r3, #1
 8003336:	2300      	moveq	r3, #0
 8003338:	b2db      	uxtb	r3, r3
 800333a:	e00b      	b.n	8003354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	43da      	mvns	r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	4013      	ands	r3, r2
 8003348:	b29b      	uxth	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	bf14      	ite	ne
 800334e:	2301      	movne	r3, #1
 8003350:	2300      	moveq	r3, #0
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b00      	cmp	r3, #0
 8003356:	f47f af6d 	bne.w	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003370:	e034      	b.n	80033dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 f8e3 	bl	800353e <I2C_IsAcknowledgeFailed>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e034      	b.n	80033ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003388:	d028      	beq.n	80033dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800338a:	f7fe fe01 	bl	8001f90 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	429a      	cmp	r2, r3
 8003398:	d302      	bcc.n	80033a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d11d      	bne.n	80033dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033aa:	2b80      	cmp	r3, #128	@ 0x80
 80033ac:	d016      	beq.n	80033dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c8:	f043 0220 	orr.w	r2, r3, #32
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e007      	b.n	80033ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033e6:	2b80      	cmp	r3, #128	@ 0x80
 80033e8:	d1c3      	bne.n	8003372 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003400:	e034      	b.n	800346c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 f89b 	bl	800353e <I2C_IsAcknowledgeFailed>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e034      	b.n	800347c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003418:	d028      	beq.n	800346c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800341a:	f7fe fdb9 	bl	8001f90 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	429a      	cmp	r2, r3
 8003428:	d302      	bcc.n	8003430 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d11d      	bne.n	800346c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	f003 0304 	and.w	r3, r3, #4
 800343a:	2b04      	cmp	r3, #4
 800343c:	d016      	beq.n	800346c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003458:	f043 0220 	orr.w	r2, r3, #32
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e007      	b.n	800347c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	f003 0304 	and.w	r3, r3, #4
 8003476:	2b04      	cmp	r3, #4
 8003478:	d1c3      	bne.n	8003402 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003490:	e049      	b.n	8003526 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	f003 0310 	and.w	r3, r3, #16
 800349c:	2b10      	cmp	r3, #16
 800349e:	d119      	bne.n	80034d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f06f 0210 	mvn.w	r2, #16
 80034a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e030      	b.n	8003536 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d4:	f7fe fd5c 	bl	8001f90 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d302      	bcc.n	80034ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d11d      	bne.n	8003526 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034f4:	2b40      	cmp	r3, #64	@ 0x40
 80034f6:	d016      	beq.n	8003526 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2220      	movs	r2, #32
 8003502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003512:	f043 0220 	orr.w	r2, r3, #32
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e007      	b.n	8003536 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003530:	2b40      	cmp	r3, #64	@ 0x40
 8003532:	d1ae      	bne.n	8003492 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003550:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003554:	d11b      	bne.n	800358e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800355e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2220      	movs	r2, #32
 800356a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357a:	f043 0204 	orr.w	r2, r3, #4
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af02      	add	r7, sp, #8
 80035a2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e101      	b.n	80037b2 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d106      	bne.n	80035ce <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f007 f9cb 	bl	800a964 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2203      	movs	r2, #3
 80035d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035dc:	d102      	bne.n	80035e4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f002 fa24 	bl	8005a36 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6818      	ldr	r0, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	7c1a      	ldrb	r2, [r3, #16]
 80035f6:	f88d 2000 	strb.w	r2, [sp]
 80035fa:	3304      	adds	r3, #4
 80035fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035fe:	f002 f903 	bl	8005808 <USB_CoreInit>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e0ce      	b.n	80037b2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2100      	movs	r1, #0
 800361a:	4618      	mov	r0, r3
 800361c:	f002 fa1c 	bl	8005a58 <USB_SetCurrentMode>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d005      	beq.n	8003632 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2202      	movs	r2, #2
 800362a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e0bf      	b.n	80037b2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003632:	2300      	movs	r3, #0
 8003634:	73fb      	strb	r3, [r7, #15]
 8003636:	e04a      	b.n	80036ce <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003638:	7bfa      	ldrb	r2, [r7, #15]
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	4613      	mov	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	3315      	adds	r3, #21
 8003648:	2201      	movs	r2, #1
 800364a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800364c:	7bfa      	ldrb	r2, [r7, #15]
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	4613      	mov	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	3314      	adds	r3, #20
 800365c:	7bfa      	ldrb	r2, [r7, #15]
 800365e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003660:	7bfa      	ldrb	r2, [r7, #15]
 8003662:	7bfb      	ldrb	r3, [r7, #15]
 8003664:	b298      	uxth	r0, r3
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	4613      	mov	r3, r2
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	332e      	adds	r3, #46	@ 0x2e
 8003674:	4602      	mov	r2, r0
 8003676:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003678:	7bfa      	ldrb	r2, [r7, #15]
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	4613      	mov	r3, r2
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	4413      	add	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	3318      	adds	r3, #24
 8003688:	2200      	movs	r2, #0
 800368a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800368c:	7bfa      	ldrb	r2, [r7, #15]
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	4413      	add	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	331c      	adds	r3, #28
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036a0:	7bfa      	ldrb	r2, [r7, #15]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	3320      	adds	r3, #32
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036b4:	7bfa      	ldrb	r2, [r7, #15]
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	4613      	mov	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4413      	add	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	3324      	adds	r3, #36	@ 0x24
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036c8:	7bfb      	ldrb	r3, [r7, #15]
 80036ca:	3301      	adds	r3, #1
 80036cc:	73fb      	strb	r3, [r7, #15]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	791b      	ldrb	r3, [r3, #4]
 80036d2:	7bfa      	ldrb	r2, [r7, #15]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d3af      	bcc.n	8003638 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036d8:	2300      	movs	r3, #0
 80036da:	73fb      	strb	r3, [r7, #15]
 80036dc:	e044      	b.n	8003768 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80036de:	7bfa      	ldrb	r2, [r7, #15]
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	4413      	add	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80036f0:	2200      	movs	r2, #0
 80036f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036f4:	7bfa      	ldrb	r2, [r7, #15]
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	4613      	mov	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003706:	7bfa      	ldrb	r2, [r7, #15]
 8003708:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800370a:	7bfa      	ldrb	r2, [r7, #15]
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	4613      	mov	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	4413      	add	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800371c:	2200      	movs	r2, #0
 800371e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003720:	7bfa      	ldrb	r2, [r7, #15]
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	4613      	mov	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4413      	add	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003736:	7bfa      	ldrb	r2, [r7, #15]
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	4613      	mov	r3, r2
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	4413      	add	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	440b      	add	r3, r1
 8003744:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800374c:	7bfa      	ldrb	r2, [r7, #15]
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	4413      	add	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003762:	7bfb      	ldrb	r3, [r7, #15]
 8003764:	3301      	adds	r3, #1
 8003766:	73fb      	strb	r3, [r7, #15]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	791b      	ldrb	r3, [r3, #4]
 800376c:	7bfa      	ldrb	r2, [r7, #15]
 800376e:	429a      	cmp	r2, r3
 8003770:	d3b5      	bcc.n	80036de <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6818      	ldr	r0, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	7c1a      	ldrb	r2, [r3, #16]
 800377a:	f88d 2000 	strb.w	r2, [sp]
 800377e:	3304      	adds	r3, #4
 8003780:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003782:	f002 f9b5 	bl	8005af0 <USB_DevInit>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d005      	beq.n	8003798 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e00c      	b.n	80037b2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f003 f9ff 	bl	8006bae <USB_DevDisconnect>

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b084      	sub	sp, #16
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d101      	bne.n	80037d6 <HAL_PCD_Start+0x1c>
 80037d2:	2302      	movs	r3, #2
 80037d4:	e022      	b.n	800381c <HAL_PCD_Start+0x62>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d009      	beq.n	80037fe <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d105      	bne.n	80037fe <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f002 f906 	bl	8005a14 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f003 f9ad 	bl	8006b6c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003824:	b590      	push	{r4, r7, lr}
 8003826:	b08d      	sub	sp, #52	@ 0x34
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f003 fa6b 	bl	8006d16 <USB_GetMode>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	f040 848c 	bne.w	8004160 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4618      	mov	r0, r3
 800384e:	f003 f9cf 	bl	8006bf0 <USB_ReadInterrupts>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 8482 	beq.w	800415e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	0a1b      	lsrs	r3, r3, #8
 8003864:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f003 f9bc 	bl	8006bf0 <USB_ReadInterrupts>
 8003878:	4603      	mov	r3, r0
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b02      	cmp	r3, #2
 8003880:	d107      	bne.n	8003892 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	695a      	ldr	r2, [r3, #20]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f002 0202 	and.w	r2, r2, #2
 8003890:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f003 f9aa 	bl	8006bf0 <USB_ReadInterrupts>
 800389c:	4603      	mov	r3, r0
 800389e:	f003 0310 	and.w	r3, r3, #16
 80038a2:	2b10      	cmp	r3, #16
 80038a4:	d161      	bne.n	800396a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	699a      	ldr	r2, [r3, #24]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0210 	bic.w	r2, r2, #16
 80038b4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	f003 020f 	and.w	r2, r3, #15
 80038c2:	4613      	mov	r3, r2
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	4413      	add	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	4413      	add	r3, r2
 80038d2:	3304      	adds	r3, #4
 80038d4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80038dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038e0:	d124      	bne.n	800392c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80038e8:	4013      	ands	r3, r2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d035      	beq.n	800395a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	091b      	lsrs	r3, r3, #4
 80038f6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80038f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	461a      	mov	r2, r3
 8003900:	6a38      	ldr	r0, [r7, #32]
 8003902:	f002 ffe1 	bl	80068c8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	091b      	lsrs	r3, r3, #4
 800390e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003912:	441a      	add	r2, r3
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	695a      	ldr	r2, [r3, #20]
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	091b      	lsrs	r3, r3, #4
 8003920:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003924:	441a      	add	r2, r3
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	615a      	str	r2, [r3, #20]
 800392a:	e016      	b.n	800395a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003932:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003936:	d110      	bne.n	800395a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800393e:	2208      	movs	r2, #8
 8003940:	4619      	mov	r1, r3
 8003942:	6a38      	ldr	r0, [r7, #32]
 8003944:	f002 ffc0 	bl	80068c8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	695a      	ldr	r2, [r3, #20]
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	091b      	lsrs	r3, r3, #4
 8003950:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003954:	441a      	add	r2, r3
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	699a      	ldr	r2, [r3, #24]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f042 0210 	orr.w	r2, r2, #16
 8003968:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f003 f93e 	bl	8006bf0 <USB_ReadInterrupts>
 8003974:	4603      	mov	r3, r0
 8003976:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800397a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800397e:	f040 80a7 	bne.w	8003ad0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003982:	2300      	movs	r3, #0
 8003984:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f003 f943 	bl	8006c16 <USB_ReadDevAllOutEpInterrupt>
 8003990:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003992:	e099      	b.n	8003ac8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 808e 	beq.w	8003abc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	4611      	mov	r1, r2
 80039aa:	4618      	mov	r0, r3
 80039ac:	f003 f967 	bl	8006c7e <USB_ReadDevOutEPInterrupt>
 80039b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00c      	beq.n	80039d6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80039bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039c8:	461a      	mov	r2, r3
 80039ca:	2301      	movs	r3, #1
 80039cc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80039ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 fea3 	bl	800471c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00c      	beq.n	80039fa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80039e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e2:	015a      	lsls	r2, r3, #5
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039ec:	461a      	mov	r2, r3
 80039ee:	2308      	movs	r3, #8
 80039f0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80039f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 ff79 	bl	80048ec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f003 0310 	and.w	r3, r3, #16
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d008      	beq.n	8003a16 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a10:	461a      	mov	r2, r3
 8003a12:	2310      	movs	r3, #16
 8003a14:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d030      	beq.n	8003a82 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a28:	2b80      	cmp	r3, #128	@ 0x80
 8003a2a:	d109      	bne.n	8003a40 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	69fa      	ldr	r2, [r7, #28]
 8003a36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a3e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003a40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a42:	4613      	mov	r3, r2
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	4413      	add	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	4413      	add	r3, r2
 8003a52:	3304      	adds	r3, #4
 8003a54:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	78db      	ldrb	r3, [r3, #3]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d108      	bne.n	8003a70 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2200      	movs	r2, #0
 8003a62:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	4619      	mov	r1, r3
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f007 f876 	bl	800ab5c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	2302      	movs	r3, #2
 8003a80:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f003 0320 	and.w	r3, r3, #32
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d008      	beq.n	8003a9e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8e:	015a      	lsls	r2, r3, #5
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a98:	461a      	mov	r2, r3
 8003a9a:	2320      	movs	r3, #32
 8003a9c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d009      	beq.n	8003abc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003aba:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003abe:	3301      	adds	r3, #1
 8003ac0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac4:	085b      	lsrs	r3, r3, #1
 8003ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f47f af62 	bne.w	8003994 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f003 f88b 	bl	8006bf0 <USB_ReadInterrupts>
 8003ada:	4603      	mov	r3, r0
 8003adc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ae0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ae4:	f040 80db 	bne.w	8003c9e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f003 f8ac 	bl	8006c4a <USB_ReadDevAllInEpInterrupt>
 8003af2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003af8:	e0cd      	b.n	8003c96 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 80c2 	beq.w	8003c8a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b0c:	b2d2      	uxtb	r2, r2
 8003b0e:	4611      	mov	r1, r2
 8003b10:	4618      	mov	r0, r3
 8003b12:	f003 f8d2 	bl	8006cba <USB_ReadDevInEPInterrupt>
 8003b16:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d057      	beq.n	8003bd2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b24:	f003 030f 	and.w	r3, r3, #15
 8003b28:	2201      	movs	r2, #1
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	69f9      	ldr	r1, [r7, #28]
 8003b3e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003b42:	4013      	ands	r3, r2
 8003b44:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b52:	461a      	mov	r2, r3
 8003b54:	2301      	movs	r3, #1
 8003b56:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	799b      	ldrb	r3, [r3, #6]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d132      	bne.n	8003bc6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b64:	4613      	mov	r3, r2
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	4413      	add	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	3320      	adds	r3, #32
 8003b70:	6819      	ldr	r1, [r3, #0]
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b76:	4613      	mov	r3, r2
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	4413      	add	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4403      	add	r3, r0
 8003b80:	331c      	adds	r3, #28
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4419      	add	r1, r3
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	4413      	add	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4403      	add	r3, r0
 8003b94:	3320      	adds	r3, #32
 8003b96:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d113      	bne.n	8003bc6 <HAL_PCD_IRQHandler+0x3a2>
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	440b      	add	r3, r1
 8003bac:	3324      	adds	r3, #36	@ 0x24
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d108      	bne.n	8003bc6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6818      	ldr	r0, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	f003 f8d9 	bl	8006d78 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	4619      	mov	r1, r3
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f006 ff4a 	bl	800aa66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d008      	beq.n	8003bee <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003be8:	461a      	mov	r2, r3
 8003bea:	2308      	movs	r3, #8
 8003bec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f003 0310 	and.w	r3, r3, #16
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d008      	beq.n	8003c0a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c04:	461a      	mov	r2, r3
 8003c06:	2310      	movs	r3, #16
 8003c08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d008      	beq.n	8003c26 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c20:	461a      	mov	r2, r3
 8003c22:	2340      	movs	r3, #64	@ 0x40
 8003c24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d023      	beq.n	8003c78 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003c30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c32:	6a38      	ldr	r0, [r7, #32]
 8003c34:	f002 f8c0 	bl	8005db8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003c38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	4413      	add	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	3310      	adds	r3, #16
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	4413      	add	r3, r2
 8003c48:	3304      	adds	r3, #4
 8003c4a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	78db      	ldrb	r3, [r3, #3]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d108      	bne.n	8003c66 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	2200      	movs	r2, #0
 8003c58:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	4619      	mov	r1, r3
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f006 ff8d 	bl	800ab80 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c68:	015a      	lsls	r2, r3, #5
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c72:	461a      	mov	r2, r3
 8003c74:	2302      	movs	r3, #2
 8003c76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003c82:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 fcbd 	bl	8004604 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c92:	085b      	lsrs	r3, r3, #1
 8003c94:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f47f af2e 	bne.w	8003afa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f002 ffa4 	bl	8006bf0 <USB_ReadInterrupts>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003cae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003cb2:	d122      	bne.n	8003cfa <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	69fa      	ldr	r2, [r7, #28]
 8003cbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cc2:	f023 0301 	bic.w	r3, r3, #1
 8003cc6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d108      	bne.n	8003ce4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003cda:	2100      	movs	r1, #0
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 fea3 	bl	8004a28 <HAL_PCDEx_LPM_Callback>
 8003ce2:	e002      	b.n	8003cea <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f006 ff2b 	bl	800ab40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695a      	ldr	r2, [r3, #20]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003cf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f002 ff76 	bl	8006bf0 <USB_ReadInterrupts>
 8003d04:	4603      	mov	r3, r0
 8003d06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d0e:	d112      	bne.n	8003d36 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d102      	bne.n	8003d26 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f006 fee7 	bl	800aaf4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695a      	ldr	r2, [r3, #20]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003d34:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f002 ff58 	bl	8006bf0 <USB_ReadInterrupts>
 8003d40:	4603      	mov	r3, r0
 8003d42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d4a:	f040 80b7 	bne.w	8003ebc <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	69fa      	ldr	r2, [r7, #28]
 8003d58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d5c:	f023 0301 	bic.w	r3, r3, #1
 8003d60:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2110      	movs	r1, #16
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f002 f825 	bl	8005db8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d6e:	2300      	movs	r3, #0
 8003d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d72:	e046      	b.n	8003e02 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d76:	015a      	lsls	r2, r3, #5
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d80:	461a      	mov	r2, r3
 8003d82:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003d86:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d98:	0151      	lsls	r1, r2, #5
 8003d9a:	69fa      	ldr	r2, [r7, #28]
 8003d9c:	440a      	add	r2, r1
 8003d9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003da2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003da6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003db4:	461a      	mov	r2, r3
 8003db6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003dba:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dcc:	0151      	lsls	r1, r2, #5
 8003dce:	69fa      	ldr	r2, [r7, #28]
 8003dd0:	440a      	add	r2, r1
 8003dd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003dd6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003dda:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dec:	0151      	lsls	r1, r2, #5
 8003dee:	69fa      	ldr	r2, [r7, #28]
 8003df0:	440a      	add	r2, r1
 8003df2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003df6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003dfa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dfe:	3301      	adds	r3, #1
 8003e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	791b      	ldrb	r3, [r3, #4]
 8003e06:	461a      	mov	r2, r3
 8003e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d3b2      	bcc.n	8003d74 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	69fa      	ldr	r2, [r7, #28]
 8003e18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e1c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003e20:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	7bdb      	ldrb	r3, [r3, #15]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d016      	beq.n	8003e58 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e34:	69fa      	ldr	r2, [r7, #28]
 8003e36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e3a:	f043 030b 	orr.w	r3, r3, #11
 8003e3e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4a:	69fa      	ldr	r2, [r7, #28]
 8003e4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e50:	f043 030b 	orr.w	r3, r3, #11
 8003e54:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e56:	e015      	b.n	8003e84 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	69fa      	ldr	r2, [r7, #28]
 8003e62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e66:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003e6a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003e6e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	69fa      	ldr	r2, [r7, #28]
 8003e7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e7e:	f043 030b 	orr.w	r3, r3, #11
 8003e82:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	69fa      	ldr	r2, [r7, #28]
 8003e8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e92:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003e96:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6818      	ldr	r0, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	f002 ff66 	bl	8006d78 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695a      	ldr	r2, [r3, #20]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003eba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f002 fe95 	bl	8006bf0 <USB_ReadInterrupts>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ecc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ed0:	d123      	bne.n	8003f1a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f002 ff2b 	bl	8006d32 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f001 ffe2 	bl	8005eaa <USB_GetDevSpeed>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	461a      	mov	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681c      	ldr	r4, [r3, #0]
 8003ef2:	f001 f9c9 	bl	8005288 <HAL_RCC_GetHCLKFreq>
 8003ef6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003efc:	461a      	mov	r2, r3
 8003efe:	4620      	mov	r0, r4
 8003f00:	f001 fce6 	bl	80058d0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f006 fdd6 	bl	800aab6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695a      	ldr	r2, [r3, #20]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003f18:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f002 fe66 	bl	8006bf0 <USB_ReadInterrupts>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	2b08      	cmp	r3, #8
 8003f2c:	d10a      	bne.n	8003f44 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f006 fdb3 	bl	800aa9a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	695a      	ldr	r2, [r3, #20]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f002 0208 	and.w	r2, r2, #8
 8003f42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f002 fe51 	bl	8006bf0 <USB_ReadInterrupts>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f54:	2b80      	cmp	r3, #128	@ 0x80
 8003f56:	d123      	bne.n	8003fa0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f64:	2301      	movs	r3, #1
 8003f66:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f68:	e014      	b.n	8003f94 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f6e:	4613      	mov	r3, r2
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	4413      	add	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	440b      	add	r3, r1
 8003f78:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d105      	bne.n	8003f8e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	4619      	mov	r1, r3
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 fb0a 	bl	80045a2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f90:	3301      	adds	r3, #1
 8003f92:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	791b      	ldrb	r3, [r3, #4]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d3e4      	bcc.n	8003f6a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f002 fe23 	bl	8006bf0 <USB_ReadInterrupts>
 8003faa:	4603      	mov	r3, r0
 8003fac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fb0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fb4:	d13c      	bne.n	8004030 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fba:	e02b      	b.n	8004014 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	4413      	add	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	3318      	adds	r3, #24
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d115      	bne.n	800400e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003fe2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	da12      	bge.n	800400e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fec:	4613      	mov	r3, r2
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	4413      	add	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	3317      	adds	r3, #23
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004004:	b2db      	uxtb	r3, r3
 8004006:	4619      	mov	r1, r3
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 faca 	bl	80045a2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800400e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004010:	3301      	adds	r3, #1
 8004012:	627b      	str	r3, [r7, #36]	@ 0x24
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	791b      	ldrb	r3, [r3, #4]
 8004018:	461a      	mov	r2, r3
 800401a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401c:	4293      	cmp	r3, r2
 800401e:	d3cd      	bcc.n	8003fbc <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695a      	ldr	r2, [r3, #20]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800402e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4618      	mov	r0, r3
 8004036:	f002 fddb 	bl	8006bf0 <USB_ReadInterrupts>
 800403a:	4603      	mov	r3, r0
 800403c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004040:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004044:	d156      	bne.n	80040f4 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004046:	2301      	movs	r3, #1
 8004048:	627b      	str	r3, [r7, #36]	@ 0x24
 800404a:	e045      	b.n	80040d8 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800404c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404e:	015a      	lsls	r2, r3, #5
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	4413      	add	r3, r2
 8004054:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004060:	4613      	mov	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	4413      	add	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d12e      	bne.n	80040d2 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004074:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004076:	2b00      	cmp	r3, #0
 8004078:	da2b      	bge.n	80040d2 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	0c1a      	lsrs	r2, r3, #16
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004084:	4053      	eors	r3, r2
 8004086:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800408a:	2b00      	cmp	r3, #0
 800408c:	d121      	bne.n	80040d2 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004092:	4613      	mov	r3, r2
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	4413      	add	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	440b      	add	r3, r1
 800409c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80040a0:	2201      	movs	r2, #1
 80040a2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80040a4:	6a3b      	ldr	r3, [r7, #32]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10a      	bne.n	80040d2 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	69fa      	ldr	r2, [r7, #28]
 80040c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040ce:	6053      	str	r3, [r2, #4]
            break;
 80040d0:	e008      	b.n	80040e4 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d4:	3301      	adds	r3, #1
 80040d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	791b      	ldrb	r3, [r3, #4]
 80040dc:	461a      	mov	r2, r3
 80040de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d3b3      	bcc.n	800404c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695a      	ldr	r2, [r3, #20]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80040f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f002 fd79 	bl	8006bf0 <USB_ReadInterrupts>
 80040fe:	4603      	mov	r3, r0
 8004100:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004104:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004108:	d10a      	bne.n	8004120 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f006 fd4a 	bl	800aba4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695a      	ldr	r2, [r3, #20]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800411e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f002 fd63 	bl	8006bf0 <USB_ReadInterrupts>
 800412a:	4603      	mov	r3, r0
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b04      	cmp	r3, #4
 8004132:	d115      	bne.n	8004160 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	f003 0304 	and.w	r3, r3, #4
 8004142:	2b00      	cmp	r3, #0
 8004144:	d002      	beq.n	800414c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f006 fd3a 	bl	800abc0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6859      	ldr	r1, [r3, #4]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	430a      	orrs	r2, r1
 800415a:	605a      	str	r2, [r3, #4]
 800415c:	e000      	b.n	8004160 <HAL_PCD_IRQHandler+0x93c>
      return;
 800415e:	bf00      	nop
    }
  }
}
 8004160:	3734      	adds	r7, #52	@ 0x34
 8004162:	46bd      	mov	sp, r7
 8004164:	bd90      	pop	{r4, r7, pc}

08004166 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
 800416e:	460b      	mov	r3, r1
 8004170:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <HAL_PCD_SetAddress+0x1a>
 800417c:	2302      	movs	r3, #2
 800417e:	e012      	b.n	80041a6 <HAL_PCD_SetAddress+0x40>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	78fa      	ldrb	r2, [r7, #3]
 800418c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	78fa      	ldrb	r2, [r7, #3]
 8004194:	4611      	mov	r1, r2
 8004196:	4618      	mov	r0, r3
 8004198:	f002 fcc2 	bl	8006b20 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b084      	sub	sp, #16
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
 80041b6:	4608      	mov	r0, r1
 80041b8:	4611      	mov	r1, r2
 80041ba:	461a      	mov	r2, r3
 80041bc:	4603      	mov	r3, r0
 80041be:	70fb      	strb	r3, [r7, #3]
 80041c0:	460b      	mov	r3, r1
 80041c2:	803b      	strh	r3, [r7, #0]
 80041c4:	4613      	mov	r3, r2
 80041c6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	da0f      	bge.n	80041f4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041d4:	78fb      	ldrb	r3, [r7, #3]
 80041d6:	f003 020f 	and.w	r2, r3, #15
 80041da:	4613      	mov	r3, r2
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	4413      	add	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	3310      	adds	r3, #16
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	4413      	add	r3, r2
 80041e8:	3304      	adds	r3, #4
 80041ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2201      	movs	r2, #1
 80041f0:	705a      	strb	r2, [r3, #1]
 80041f2:	e00f      	b.n	8004214 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041f4:	78fb      	ldrb	r3, [r7, #3]
 80041f6:	f003 020f 	and.w	r2, r3, #15
 80041fa:	4613      	mov	r3, r2
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	4413      	add	r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	4413      	add	r3, r2
 800420a:	3304      	adds	r3, #4
 800420c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004214:	78fb      	ldrb	r3, [r7, #3]
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	b2da      	uxtb	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004220:	883b      	ldrh	r3, [r7, #0]
 8004222:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	78ba      	ldrb	r2, [r7, #2]
 800422e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	785b      	ldrb	r3, [r3, #1]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d004      	beq.n	8004242 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	461a      	mov	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004242:	78bb      	ldrb	r3, [r7, #2]
 8004244:	2b02      	cmp	r3, #2
 8004246:	d102      	bne.n	800424e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004254:	2b01      	cmp	r3, #1
 8004256:	d101      	bne.n	800425c <HAL_PCD_EP_Open+0xae>
 8004258:	2302      	movs	r3, #2
 800425a:	e00e      	b.n	800427a <HAL_PCD_EP_Open+0xcc>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68f9      	ldr	r1, [r7, #12]
 800426a:	4618      	mov	r0, r3
 800426c:	f001 fe42 	bl	8005ef4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004278:	7afb      	ldrb	r3, [r7, #11]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b084      	sub	sp, #16
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
 800428a:	460b      	mov	r3, r1
 800428c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800428e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004292:	2b00      	cmp	r3, #0
 8004294:	da0f      	bge.n	80042b6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004296:	78fb      	ldrb	r3, [r7, #3]
 8004298:	f003 020f 	and.w	r2, r3, #15
 800429c:	4613      	mov	r3, r2
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	4413      	add	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	3310      	adds	r3, #16
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	4413      	add	r3, r2
 80042aa:	3304      	adds	r3, #4
 80042ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2201      	movs	r2, #1
 80042b2:	705a      	strb	r2, [r3, #1]
 80042b4:	e00f      	b.n	80042d6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042b6:	78fb      	ldrb	r3, [r7, #3]
 80042b8:	f003 020f 	and.w	r2, r3, #15
 80042bc:	4613      	mov	r3, r2
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	4413      	add	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	4413      	add	r3, r2
 80042cc:	3304      	adds	r3, #4
 80042ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80042d6:	78fb      	ldrb	r3, [r7, #3]
 80042d8:	f003 030f 	and.w	r3, r3, #15
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_PCD_EP_Close+0x6e>
 80042ec:	2302      	movs	r3, #2
 80042ee:	e00e      	b.n	800430e <HAL_PCD_EP_Close+0x8c>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68f9      	ldr	r1, [r7, #12]
 80042fe:	4618      	mov	r0, r3
 8004300:	f001 fe80 	bl	8006004 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b086      	sub	sp, #24
 800431a:	af00      	add	r7, sp, #0
 800431c:	60f8      	str	r0, [r7, #12]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	603b      	str	r3, [r7, #0]
 8004322:	460b      	mov	r3, r1
 8004324:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004326:	7afb      	ldrb	r3, [r7, #11]
 8004328:	f003 020f 	and.w	r2, r3, #15
 800432c:	4613      	mov	r3, r2
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	4413      	add	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4413      	add	r3, r2
 800433c:	3304      	adds	r3, #4
 800433e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	2200      	movs	r2, #0
 8004350:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2200      	movs	r2, #0
 8004356:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004358:	7afb      	ldrb	r3, [r7, #11]
 800435a:	f003 030f 	and.w	r3, r3, #15
 800435e:	b2da      	uxtb	r2, r3
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	799b      	ldrb	r3, [r3, #6]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d102      	bne.n	8004372 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6818      	ldr	r0, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	799b      	ldrb	r3, [r3, #6]
 800437a:	461a      	mov	r2, r3
 800437c:	6979      	ldr	r1, [r7, #20]
 800437e:	f001 ff1d 	bl	80061bc <USB_EPStartXfer>

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3718      	adds	r7, #24
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	460b      	mov	r3, r1
 8004396:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004398:	78fb      	ldrb	r3, [r7, #3]
 800439a:	f003 020f 	and.w	r2, r3, #15
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	4613      	mov	r3, r2
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	4413      	add	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	440b      	add	r3, r1
 80043aa:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80043ae:	681b      	ldr	r3, [r3, #0]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	607a      	str	r2, [r7, #4]
 80043c6:	603b      	str	r3, [r7, #0]
 80043c8:	460b      	mov	r3, r1
 80043ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043cc:	7afb      	ldrb	r3, [r7, #11]
 80043ce:	f003 020f 	and.w	r2, r3, #15
 80043d2:	4613      	mov	r3, r2
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	4413      	add	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	3310      	adds	r3, #16
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	4413      	add	r3, r2
 80043e0:	3304      	adds	r3, #4
 80043e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	2200      	movs	r2, #0
 80043f4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2201      	movs	r2, #1
 80043fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043fc:	7afb      	ldrb	r3, [r7, #11]
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	b2da      	uxtb	r2, r3
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	799b      	ldrb	r3, [r3, #6]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d102      	bne.n	8004416 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6818      	ldr	r0, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	799b      	ldrb	r3, [r3, #6]
 800441e:	461a      	mov	r2, r3
 8004420:	6979      	ldr	r1, [r7, #20]
 8004422:	f001 fecb 	bl	80061bc <USB_EPStartXfer>

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	460b      	mov	r3, r1
 800443a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800443c:	78fb      	ldrb	r3, [r7, #3]
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	7912      	ldrb	r2, [r2, #4]
 8004446:	4293      	cmp	r3, r2
 8004448:	d901      	bls.n	800444e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e04f      	b.n	80044ee <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800444e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004452:	2b00      	cmp	r3, #0
 8004454:	da0f      	bge.n	8004476 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004456:	78fb      	ldrb	r3, [r7, #3]
 8004458:	f003 020f 	and.w	r2, r3, #15
 800445c:	4613      	mov	r3, r2
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	4413      	add	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	3310      	adds	r3, #16
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	4413      	add	r3, r2
 800446a:	3304      	adds	r3, #4
 800446c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2201      	movs	r2, #1
 8004472:	705a      	strb	r2, [r3, #1]
 8004474:	e00d      	b.n	8004492 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004476:	78fa      	ldrb	r2, [r7, #3]
 8004478:	4613      	mov	r3, r2
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	4413      	add	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	4413      	add	r3, r2
 8004488:	3304      	adds	r3, #4
 800448a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2201      	movs	r2, #1
 8004496:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004498:	78fb      	ldrb	r3, [r7, #3]
 800449a:	f003 030f 	and.w	r3, r3, #15
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d101      	bne.n	80044b2 <HAL_PCD_EP_SetStall+0x82>
 80044ae:	2302      	movs	r3, #2
 80044b0:	e01d      	b.n	80044ee <HAL_PCD_EP_SetStall+0xbe>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68f9      	ldr	r1, [r7, #12]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f002 fa59 	bl	8006978 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044c6:	78fb      	ldrb	r3, [r7, #3]
 80044c8:	f003 030f 	and.w	r3, r3, #15
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d109      	bne.n	80044e4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6818      	ldr	r0, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	7999      	ldrb	r1, [r3, #6]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80044de:	461a      	mov	r2, r3
 80044e0:	f002 fc4a 	bl	8006d78 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b084      	sub	sp, #16
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	460b      	mov	r3, r1
 8004500:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004502:	78fb      	ldrb	r3, [r7, #3]
 8004504:	f003 030f 	and.w	r3, r3, #15
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	7912      	ldrb	r2, [r2, #4]
 800450c:	4293      	cmp	r3, r2
 800450e:	d901      	bls.n	8004514 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e042      	b.n	800459a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004514:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004518:	2b00      	cmp	r3, #0
 800451a:	da0f      	bge.n	800453c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800451c:	78fb      	ldrb	r3, [r7, #3]
 800451e:	f003 020f 	and.w	r2, r3, #15
 8004522:	4613      	mov	r3, r2
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	4413      	add	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	3310      	adds	r3, #16
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	4413      	add	r3, r2
 8004530:	3304      	adds	r3, #4
 8004532:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2201      	movs	r2, #1
 8004538:	705a      	strb	r2, [r3, #1]
 800453a:	e00f      	b.n	800455c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800453c:	78fb      	ldrb	r3, [r7, #3]
 800453e:	f003 020f 	and.w	r2, r3, #15
 8004542:	4613      	mov	r3, r2
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	4413      	add	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	4413      	add	r3, r2
 8004552:	3304      	adds	r3, #4
 8004554:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004562:	78fb      	ldrb	r3, [r7, #3]
 8004564:	f003 030f 	and.w	r3, r3, #15
 8004568:	b2da      	uxtb	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <HAL_PCD_EP_ClrStall+0x86>
 8004578:	2302      	movs	r3, #2
 800457a:	e00e      	b.n	800459a <HAL_PCD_EP_ClrStall+0xa4>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68f9      	ldr	r1, [r7, #12]
 800458a:	4618      	mov	r0, r3
 800458c:	f002 fa62 	bl	8006a54 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b084      	sub	sp, #16
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
 80045aa:	460b      	mov	r3, r1
 80045ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80045ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	da0c      	bge.n	80045d0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045b6:	78fb      	ldrb	r3, [r7, #3]
 80045b8:	f003 020f 	and.w	r2, r3, #15
 80045bc:	4613      	mov	r3, r2
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	4413      	add	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	3310      	adds	r3, #16
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	4413      	add	r3, r2
 80045ca:	3304      	adds	r3, #4
 80045cc:	60fb      	str	r3, [r7, #12]
 80045ce:	e00c      	b.n	80045ea <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045d0:	78fb      	ldrb	r3, [r7, #3]
 80045d2:	f003 020f 	and.w	r2, r3, #15
 80045d6:	4613      	mov	r3, r2
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	4413      	add	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	4413      	add	r3, r2
 80045e6:	3304      	adds	r3, #4
 80045e8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68f9      	ldr	r1, [r7, #12]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f002 f881 	bl	80066f8 <USB_EPStopXfer>
 80045f6:	4603      	mov	r3, r0
 80045f8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80045fa:	7afb      	ldrb	r3, [r7, #11]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b08a      	sub	sp, #40	@ 0x28
 8004608:	af02      	add	r7, sp, #8
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	4613      	mov	r3, r2
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	4413      	add	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	3310      	adds	r3, #16
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	4413      	add	r3, r2
 8004628:	3304      	adds	r3, #4
 800462a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	695a      	ldr	r2, [r3, #20]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	429a      	cmp	r2, r3
 8004636:	d901      	bls.n	800463c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e06b      	b.n	8004714 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	691a      	ldr	r2, [r3, #16]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	69fa      	ldr	r2, [r7, #28]
 800464e:	429a      	cmp	r2, r3
 8004650:	d902      	bls.n	8004658 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	3303      	adds	r3, #3
 800465c:	089b      	lsrs	r3, r3, #2
 800465e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004660:	e02a      	b.n	80046b8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	691a      	ldr	r2, [r3, #16]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	69fa      	ldr	r2, [r7, #28]
 8004674:	429a      	cmp	r2, r3
 8004676:	d902      	bls.n	800467e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	3303      	adds	r3, #3
 8004682:	089b      	lsrs	r3, r3, #2
 8004684:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	68d9      	ldr	r1, [r3, #12]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	b2da      	uxtb	r2, r3
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	4603      	mov	r3, r0
 800469a:	6978      	ldr	r0, [r7, #20]
 800469c:	f002 f8d6 	bl	800684c <USB_WritePacket>

    ep->xfer_buff  += len;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	441a      	add	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	695a      	ldr	r2, [r3, #20]
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	441a      	add	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	015a      	lsls	r2, r3, #5
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d809      	bhi.n	80046e2 <PCD_WriteEmptyTxFifo+0xde>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	695a      	ldr	r2, [r3, #20]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d203      	bcs.n	80046e2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1bf      	bne.n	8004662 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	691a      	ldr	r2, [r3, #16]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d811      	bhi.n	8004712 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	f003 030f 	and.w	r3, r3, #15
 80046f4:	2201      	movs	r2, #1
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004702:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	43db      	mvns	r3, r3
 8004708:	6939      	ldr	r1, [r7, #16]
 800470a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800470e:	4013      	ands	r3, r2
 8004710:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3720      	adds	r7, #32
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b088      	sub	sp, #32
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	333c      	adds	r3, #60	@ 0x3c
 8004734:	3304      	adds	r3, #4
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	015a      	lsls	r2, r3, #5
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	4413      	add	r3, r2
 8004742:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	799b      	ldrb	r3, [r3, #6]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d17b      	bne.n	800484a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	f003 0308 	and.w	r3, r3, #8
 8004758:	2b00      	cmp	r3, #0
 800475a:	d015      	beq.n	8004788 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	4a61      	ldr	r2, [pc, #388]	@ (80048e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	f240 80b9 	bls.w	80048d8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 80b3 	beq.w	80048d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	4413      	add	r3, r2
 800477a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800477e:	461a      	mov	r2, r3
 8004780:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004784:	6093      	str	r3, [r2, #8]
 8004786:	e0a7      	b.n	80048d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	f003 0320 	and.w	r3, r3, #32
 800478e:	2b00      	cmp	r3, #0
 8004790:	d009      	beq.n	80047a6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	4413      	add	r3, r2
 800479a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800479e:	461a      	mov	r2, r3
 80047a0:	2320      	movs	r3, #32
 80047a2:	6093      	str	r3, [r2, #8]
 80047a4:	e098      	b.n	80048d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f040 8093 	bne.w	80048d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	4a4b      	ldr	r2, [pc, #300]	@ (80048e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d90f      	bls.n	80047da <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047d0:	461a      	mov	r2, r3
 80047d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047d6:	6093      	str	r3, [r2, #8]
 80047d8:	e07e      	b.n	80048d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	4613      	mov	r3, r2
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	4413      	add	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	4413      	add	r3, r2
 80047ec:	3304      	adds	r3, #4
 80047ee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6a1a      	ldr	r2, [r3, #32]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	0159      	lsls	r1, r3, #5
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	440b      	add	r3, r1
 80047fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004806:	1ad2      	subs	r2, r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d114      	bne.n	800483c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d109      	bne.n	800482e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6818      	ldr	r0, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004824:	461a      	mov	r2, r3
 8004826:	2101      	movs	r1, #1
 8004828:	f002 faa6 	bl	8006d78 <USB_EP0_OutStart>
 800482c:	e006      	b.n	800483c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	441a      	add	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	b2db      	uxtb	r3, r3
 8004840:	4619      	mov	r1, r3
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f006 f8f4 	bl	800aa30 <HAL_PCD_DataOutStageCallback>
 8004848:	e046      	b.n	80048d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	4a26      	ldr	r2, [pc, #152]	@ (80048e8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d124      	bne.n	800489c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	4413      	add	r3, r2
 8004864:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004868:	461a      	mov	r2, r3
 800486a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800486e:	6093      	str	r3, [r2, #8]
 8004870:	e032      	b.n	80048d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	f003 0320 	and.w	r3, r3, #32
 8004878:	2b00      	cmp	r3, #0
 800487a:	d008      	beq.n	800488e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	015a      	lsls	r2, r3, #5
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	4413      	add	r3, r2
 8004884:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004888:	461a      	mov	r2, r3
 800488a:	2320      	movs	r3, #32
 800488c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	b2db      	uxtb	r3, r3
 8004892:	4619      	mov	r1, r3
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f006 f8cb 	bl	800aa30 <HAL_PCD_DataOutStageCallback>
 800489a:	e01d      	b.n	80048d8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d114      	bne.n	80048cc <PCD_EP_OutXfrComplete_int+0x1b0>
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	4613      	mov	r3, r2
 80048a8:	00db      	lsls	r3, r3, #3
 80048aa:	4413      	add	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	440b      	add	r3, r1
 80048b0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d108      	bne.n	80048cc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6818      	ldr	r0, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80048c4:	461a      	mov	r2, r3
 80048c6:	2100      	movs	r1, #0
 80048c8:	f002 fa56 	bl	8006d78 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	4619      	mov	r1, r3
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f006 f8ac 	bl	800aa30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3720      	adds	r7, #32
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	4f54300a 	.word	0x4f54300a
 80048e8:	4f54310a 	.word	0x4f54310a

080048ec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	333c      	adds	r3, #60	@ 0x3c
 8004904:	3304      	adds	r3, #4
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	4413      	add	r3, r2
 8004912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	4a15      	ldr	r2, [pc, #84]	@ (8004974 <PCD_EP_OutSetupPacket_int+0x88>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d90e      	bls.n	8004940 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004928:	2b00      	cmp	r3, #0
 800492a:	d009      	beq.n	8004940 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	4413      	add	r3, r2
 8004934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004938:	461a      	mov	r2, r3
 800493a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800493e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f006 f863 	bl	800aa0c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4a0a      	ldr	r2, [pc, #40]	@ (8004974 <PCD_EP_OutSetupPacket_int+0x88>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d90c      	bls.n	8004968 <PCD_EP_OutSetupPacket_int+0x7c>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	799b      	ldrb	r3, [r3, #6]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d108      	bne.n	8004968 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6818      	ldr	r0, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004960:	461a      	mov	r2, r3
 8004962:	2101      	movs	r1, #1
 8004964:	f002 fa08 	bl	8006d78 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3718      	adds	r7, #24
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	4f54300a 	.word	0x4f54300a

08004978 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	460b      	mov	r3, r1
 8004982:	70fb      	strb	r3, [r7, #3]
 8004984:	4613      	mov	r3, r2
 8004986:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004990:	78fb      	ldrb	r3, [r7, #3]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d107      	bne.n	80049a6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004996:	883b      	ldrh	r3, [r7, #0]
 8004998:	0419      	lsls	r1, r3, #16
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80049a4:	e028      	b.n	80049f8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ac:	0c1b      	lsrs	r3, r3, #16
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	4413      	add	r3, r2
 80049b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049b4:	2300      	movs	r3, #0
 80049b6:	73fb      	strb	r3, [r7, #15]
 80049b8:	e00d      	b.n	80049d6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	7bfb      	ldrb	r3, [r7, #15]
 80049c0:	3340      	adds	r3, #64	@ 0x40
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	0c1b      	lsrs	r3, r3, #16
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	4413      	add	r3, r2
 80049ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
 80049d2:	3301      	adds	r3, #1
 80049d4:	73fb      	strb	r3, [r7, #15]
 80049d6:	7bfa      	ldrb	r2, [r7, #15]
 80049d8:	78fb      	ldrb	r3, [r7, #3]
 80049da:	3b01      	subs	r3, #1
 80049dc:	429a      	cmp	r2, r3
 80049de:	d3ec      	bcc.n	80049ba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80049e0:	883b      	ldrh	r3, [r7, #0]
 80049e2:	0418      	lsls	r0, r3, #16
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6819      	ldr	r1, [r3, #0]
 80049e8:	78fb      	ldrb	r3, [r7, #3]
 80049ea:	3b01      	subs	r3, #1
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	4302      	orrs	r2, r0
 80049f0:	3340      	adds	r3, #64	@ 0x40
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	440b      	add	r3, r1
 80049f6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
 8004a0e:	460b      	mov	r3, r1
 8004a10:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	887a      	ldrh	r2, [r7, #2]
 8004a18:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e267      	b.n	8004f22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d075      	beq.n	8004b4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a5e:	4b88      	ldr	r3, [pc, #544]	@ (8004c80 <HAL_RCC_OscConfig+0x240>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 030c 	and.w	r3, r3, #12
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d00c      	beq.n	8004a84 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a6a:	4b85      	ldr	r3, [pc, #532]	@ (8004c80 <HAL_RCC_OscConfig+0x240>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a72:	2b08      	cmp	r3, #8
 8004a74:	d112      	bne.n	8004a9c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a76:	4b82      	ldr	r3, [pc, #520]	@ (8004c80 <HAL_RCC_OscConfig+0x240>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a82:	d10b      	bne.n	8004a9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a84:	4b7e      	ldr	r3, [pc, #504]	@ (8004c80 <HAL_RCC_OscConfig+0x240>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d05b      	beq.n	8004b48 <HAL_RCC_OscConfig+0x108>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d157      	bne.n	8004b48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e242      	b.n	8004f22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aa4:	d106      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x74>
 8004aa6:	4b76      	ldr	r3, [pc, #472]	@ (8004c80 <HAL_RCC_OscConfig+0x240>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a75      	ldr	r2, [pc, #468]	@ (8004c80 <HAL_RCC_OscConfig+0x240>)
 8004aac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ab0:	6013      	str	r3, [r2, #0]
 8004ab2:	e01d      	b.n	8004af0 <HAL_RCC_OscConfig+0xb0>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004abc:	d10c      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x98>
 8004abe:	4b70      	ldr	r3, [pc, #448]	@ (8004c80 <HAL_RCC_OscConfig+0x240>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a6f      	ldr	r2, [pc, #444]	@ (8004c80 <HAL_RCC_OscConfig+0x240>)
 8004ac4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ac8:	6013      	str	r3, [r2, #0]
 8004aca:	4b6d      	ldr	r3, [pc, #436]	@ (8004c80 <HAL_RCC_OscConfig+0x240>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a6c      	ldr	r2, [pc, #432]	@ (8004c80 <HAL_RCC_OscConfig+0x240>)
 8004ad0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ad4:	6013      	str	r3, [r2, #0]
 8004ad6:	e00b      	b.n	8004af0 <HAL_RCC_OscConfig+0xb0>
 8004ad8:	4b69      	ldr	r3, [pc, #420]	@ (8004c80 <HAL_RCC_OscConfig+0x240>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a68      	ldr	r2, [pc, #416]	@ (8004c80 <HAL_RCC_OscConfig+0x240>)
 8004ade:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	4b66      	ldr	r3, [pc, #408]	@ (8004c80 <HAL_RCC_OscConfig+0x240>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a65      	ldr	r2, [pc, #404]	@ (8004c80 <HAL_RCC_OscConfig+0x240>)
 8004aea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004aee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d013      	beq.n	8004b20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af8:	f7fd fa4a 	bl	8001f90 <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004afe:	e008      	b.n	8004b12 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b00:	f7fd fa46 	bl	8001f90 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b64      	cmp	r3, #100	@ 0x64
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e207      	b.n	8004f22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b12:	4b5b      	ldr	r3, [pc, #364]	@ (8004c80 <HAL_RCC_OscConfig+0x240>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0f0      	beq.n	8004b00 <HAL_RCC_OscConfig+0xc0>
 8004b1e:	e014      	b.n	8004b4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b20:	f7fd fa36 	bl	8001f90 <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b28:	f7fd fa32 	bl	8001f90 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b64      	cmp	r3, #100	@ 0x64
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e1f3      	b.n	8004f22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b3a:	4b51      	ldr	r3, [pc, #324]	@ (8004c80 <HAL_RCC_OscConfig+0x240>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1f0      	bne.n	8004b28 <HAL_RCC_OscConfig+0xe8>
 8004b46:	e000      	b.n	8004b4a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d063      	beq.n	8004c1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b56:	4b4a      	ldr	r3, [pc, #296]	@ (8004c80 <HAL_RCC_OscConfig+0x240>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 030c 	and.w	r3, r3, #12
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00b      	beq.n	8004b7a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b62:	4b47      	ldr	r3, [pc, #284]	@ (8004c80 <HAL_RCC_OscConfig+0x240>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b6a:	2b08      	cmp	r3, #8
 8004b6c:	d11c      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b6e:	4b44      	ldr	r3, [pc, #272]	@ (8004c80 <HAL_RCC_OscConfig+0x240>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d116      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b7a:	4b41      	ldr	r3, [pc, #260]	@ (8004c80 <HAL_RCC_OscConfig+0x240>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d005      	beq.n	8004b92 <HAL_RCC_OscConfig+0x152>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d001      	beq.n	8004b92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e1c7      	b.n	8004f22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b92:	4b3b      	ldr	r3, [pc, #236]	@ (8004c80 <HAL_RCC_OscConfig+0x240>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	4937      	ldr	r1, [pc, #220]	@ (8004c80 <HAL_RCC_OscConfig+0x240>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ba6:	e03a      	b.n	8004c1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d020      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bb0:	4b34      	ldr	r3, [pc, #208]	@ (8004c84 <HAL_RCC_OscConfig+0x244>)
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb6:	f7fd f9eb 	bl	8001f90 <HAL_GetTick>
 8004bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bbc:	e008      	b.n	8004bd0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bbe:	f7fd f9e7 	bl	8001f90 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e1a8      	b.n	8004f22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd0:	4b2b      	ldr	r3, [pc, #172]	@ (8004c80 <HAL_RCC_OscConfig+0x240>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0f0      	beq.n	8004bbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bdc:	4b28      	ldr	r3, [pc, #160]	@ (8004c80 <HAL_RCC_OscConfig+0x240>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	4925      	ldr	r1, [pc, #148]	@ (8004c80 <HAL_RCC_OscConfig+0x240>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	600b      	str	r3, [r1, #0]
 8004bf0:	e015      	b.n	8004c1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bf2:	4b24      	ldr	r3, [pc, #144]	@ (8004c84 <HAL_RCC_OscConfig+0x244>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf8:	f7fd f9ca 	bl	8001f90 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c00:	f7fd f9c6 	bl	8001f90 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e187      	b.n	8004f22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c12:	4b1b      	ldr	r3, [pc, #108]	@ (8004c80 <HAL_RCC_OscConfig+0x240>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1f0      	bne.n	8004c00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0308 	and.w	r3, r3, #8
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d036      	beq.n	8004c98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d016      	beq.n	8004c60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c32:	4b15      	ldr	r3, [pc, #84]	@ (8004c88 <HAL_RCC_OscConfig+0x248>)
 8004c34:	2201      	movs	r2, #1
 8004c36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c38:	f7fd f9aa 	bl	8001f90 <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c40:	f7fd f9a6 	bl	8001f90 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e167      	b.n	8004f22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c52:	4b0b      	ldr	r3, [pc, #44]	@ (8004c80 <HAL_RCC_OscConfig+0x240>)
 8004c54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0f0      	beq.n	8004c40 <HAL_RCC_OscConfig+0x200>
 8004c5e:	e01b      	b.n	8004c98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c60:	4b09      	ldr	r3, [pc, #36]	@ (8004c88 <HAL_RCC_OscConfig+0x248>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c66:	f7fd f993 	bl	8001f90 <HAL_GetTick>
 8004c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c6c:	e00e      	b.n	8004c8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c6e:	f7fd f98f 	bl	8001f90 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d907      	bls.n	8004c8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e150      	b.n	8004f22 <HAL_RCC_OscConfig+0x4e2>
 8004c80:	40023800 	.word	0x40023800
 8004c84:	42470000 	.word	0x42470000
 8004c88:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c8c:	4b88      	ldr	r3, [pc, #544]	@ (8004eb0 <HAL_RCC_OscConfig+0x470>)
 8004c8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1ea      	bne.n	8004c6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 8097 	beq.w	8004dd4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004caa:	4b81      	ldr	r3, [pc, #516]	@ (8004eb0 <HAL_RCC_OscConfig+0x470>)
 8004cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10f      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	60bb      	str	r3, [r7, #8]
 8004cba:	4b7d      	ldr	r3, [pc, #500]	@ (8004eb0 <HAL_RCC_OscConfig+0x470>)
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cbe:	4a7c      	ldr	r2, [pc, #496]	@ (8004eb0 <HAL_RCC_OscConfig+0x470>)
 8004cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cc6:	4b7a      	ldr	r3, [pc, #488]	@ (8004eb0 <HAL_RCC_OscConfig+0x470>)
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cce:	60bb      	str	r3, [r7, #8]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd6:	4b77      	ldr	r3, [pc, #476]	@ (8004eb4 <HAL_RCC_OscConfig+0x474>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d118      	bne.n	8004d14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ce2:	4b74      	ldr	r3, [pc, #464]	@ (8004eb4 <HAL_RCC_OscConfig+0x474>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a73      	ldr	r2, [pc, #460]	@ (8004eb4 <HAL_RCC_OscConfig+0x474>)
 8004ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cee:	f7fd f94f 	bl	8001f90 <HAL_GetTick>
 8004cf2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cf4:	e008      	b.n	8004d08 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cf6:	f7fd f94b 	bl	8001f90 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d901      	bls.n	8004d08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e10c      	b.n	8004f22 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d08:	4b6a      	ldr	r3, [pc, #424]	@ (8004eb4 <HAL_RCC_OscConfig+0x474>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0f0      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d106      	bne.n	8004d2a <HAL_RCC_OscConfig+0x2ea>
 8004d1c:	4b64      	ldr	r3, [pc, #400]	@ (8004eb0 <HAL_RCC_OscConfig+0x470>)
 8004d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d20:	4a63      	ldr	r2, [pc, #396]	@ (8004eb0 <HAL_RCC_OscConfig+0x470>)
 8004d22:	f043 0301 	orr.w	r3, r3, #1
 8004d26:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d28:	e01c      	b.n	8004d64 <HAL_RCC_OscConfig+0x324>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	2b05      	cmp	r3, #5
 8004d30:	d10c      	bne.n	8004d4c <HAL_RCC_OscConfig+0x30c>
 8004d32:	4b5f      	ldr	r3, [pc, #380]	@ (8004eb0 <HAL_RCC_OscConfig+0x470>)
 8004d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d36:	4a5e      	ldr	r2, [pc, #376]	@ (8004eb0 <HAL_RCC_OscConfig+0x470>)
 8004d38:	f043 0304 	orr.w	r3, r3, #4
 8004d3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d3e:	4b5c      	ldr	r3, [pc, #368]	@ (8004eb0 <HAL_RCC_OscConfig+0x470>)
 8004d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d42:	4a5b      	ldr	r2, [pc, #364]	@ (8004eb0 <HAL_RCC_OscConfig+0x470>)
 8004d44:	f043 0301 	orr.w	r3, r3, #1
 8004d48:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d4a:	e00b      	b.n	8004d64 <HAL_RCC_OscConfig+0x324>
 8004d4c:	4b58      	ldr	r3, [pc, #352]	@ (8004eb0 <HAL_RCC_OscConfig+0x470>)
 8004d4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d50:	4a57      	ldr	r2, [pc, #348]	@ (8004eb0 <HAL_RCC_OscConfig+0x470>)
 8004d52:	f023 0301 	bic.w	r3, r3, #1
 8004d56:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d58:	4b55      	ldr	r3, [pc, #340]	@ (8004eb0 <HAL_RCC_OscConfig+0x470>)
 8004d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d5c:	4a54      	ldr	r2, [pc, #336]	@ (8004eb0 <HAL_RCC_OscConfig+0x470>)
 8004d5e:	f023 0304 	bic.w	r3, r3, #4
 8004d62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d015      	beq.n	8004d98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d6c:	f7fd f910 	bl	8001f90 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d72:	e00a      	b.n	8004d8a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d74:	f7fd f90c 	bl	8001f90 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e0cb      	b.n	8004f22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d8a:	4b49      	ldr	r3, [pc, #292]	@ (8004eb0 <HAL_RCC_OscConfig+0x470>)
 8004d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0ee      	beq.n	8004d74 <HAL_RCC_OscConfig+0x334>
 8004d96:	e014      	b.n	8004dc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d98:	f7fd f8fa 	bl	8001f90 <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d9e:	e00a      	b.n	8004db6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da0:	f7fd f8f6 	bl	8001f90 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e0b5      	b.n	8004f22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004db6:	4b3e      	ldr	r3, [pc, #248]	@ (8004eb0 <HAL_RCC_OscConfig+0x470>)
 8004db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1ee      	bne.n	8004da0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dc2:	7dfb      	ldrb	r3, [r7, #23]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d105      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dc8:	4b39      	ldr	r3, [pc, #228]	@ (8004eb0 <HAL_RCC_OscConfig+0x470>)
 8004dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dcc:	4a38      	ldr	r2, [pc, #224]	@ (8004eb0 <HAL_RCC_OscConfig+0x470>)
 8004dce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dd2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 80a1 	beq.w	8004f20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dde:	4b34      	ldr	r3, [pc, #208]	@ (8004eb0 <HAL_RCC_OscConfig+0x470>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f003 030c 	and.w	r3, r3, #12
 8004de6:	2b08      	cmp	r3, #8
 8004de8:	d05c      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d141      	bne.n	8004e76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004df2:	4b31      	ldr	r3, [pc, #196]	@ (8004eb8 <HAL_RCC_OscConfig+0x478>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df8:	f7fd f8ca 	bl	8001f90 <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e00:	f7fd f8c6 	bl	8001f90 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e087      	b.n	8004f22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e12:	4b27      	ldr	r3, [pc, #156]	@ (8004eb0 <HAL_RCC_OscConfig+0x470>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1f0      	bne.n	8004e00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	69da      	ldr	r2, [r3, #28]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2c:	019b      	lsls	r3, r3, #6
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e34:	085b      	lsrs	r3, r3, #1
 8004e36:	3b01      	subs	r3, #1
 8004e38:	041b      	lsls	r3, r3, #16
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e40:	061b      	lsls	r3, r3, #24
 8004e42:	491b      	ldr	r1, [pc, #108]	@ (8004eb0 <HAL_RCC_OscConfig+0x470>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e48:	4b1b      	ldr	r3, [pc, #108]	@ (8004eb8 <HAL_RCC_OscConfig+0x478>)
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e4e:	f7fd f89f 	bl	8001f90 <HAL_GetTick>
 8004e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e54:	e008      	b.n	8004e68 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e56:	f7fd f89b 	bl	8001f90 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e05c      	b.n	8004f22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e68:	4b11      	ldr	r3, [pc, #68]	@ (8004eb0 <HAL_RCC_OscConfig+0x470>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0f0      	beq.n	8004e56 <HAL_RCC_OscConfig+0x416>
 8004e74:	e054      	b.n	8004f20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e76:	4b10      	ldr	r3, [pc, #64]	@ (8004eb8 <HAL_RCC_OscConfig+0x478>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e7c:	f7fd f888 	bl	8001f90 <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e84:	f7fd f884 	bl	8001f90 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e045      	b.n	8004f22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e96:	4b06      	ldr	r3, [pc, #24]	@ (8004eb0 <HAL_RCC_OscConfig+0x470>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1f0      	bne.n	8004e84 <HAL_RCC_OscConfig+0x444>
 8004ea2:	e03d      	b.n	8004f20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d107      	bne.n	8004ebc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e038      	b.n	8004f22 <HAL_RCC_OscConfig+0x4e2>
 8004eb0:	40023800 	.word	0x40023800
 8004eb4:	40007000 	.word	0x40007000
 8004eb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8004f2c <HAL_RCC_OscConfig+0x4ec>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d028      	beq.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d121      	bne.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d11a      	bne.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004eec:	4013      	ands	r3, r2
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ef2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d111      	bne.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f02:	085b      	lsrs	r3, r3, #1
 8004f04:	3b01      	subs	r3, #1
 8004f06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d107      	bne.n	8004f1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d001      	beq.n	8004f20 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e000      	b.n	8004f22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3718      	adds	r7, #24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40023800 	.word	0x40023800

08004f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e0cc      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f44:	4b68      	ldr	r3, [pc, #416]	@ (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0307 	and.w	r3, r3, #7
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d90c      	bls.n	8004f6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f52:	4b65      	ldr	r3, [pc, #404]	@ (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f5a:	4b63      	ldr	r3, [pc, #396]	@ (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d001      	beq.n	8004f6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e0b8      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d020      	beq.n	8004fba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d005      	beq.n	8004f90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f84:	4b59      	ldr	r3, [pc, #356]	@ (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	4a58      	ldr	r2, [pc, #352]	@ (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004f8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0308 	and.w	r3, r3, #8
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d005      	beq.n	8004fa8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f9c:	4b53      	ldr	r3, [pc, #332]	@ (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	4a52      	ldr	r2, [pc, #328]	@ (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004fa2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004fa6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fa8:	4b50      	ldr	r3, [pc, #320]	@ (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	494d      	ldr	r1, [pc, #308]	@ (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d044      	beq.n	8005050 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d107      	bne.n	8004fde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fce:	4b47      	ldr	r3, [pc, #284]	@ (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d119      	bne.n	800500e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e07f      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d003      	beq.n	8004fee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fea:	2b03      	cmp	r3, #3
 8004fec:	d107      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fee:	4b3f      	ldr	r3, [pc, #252]	@ (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d109      	bne.n	800500e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e06f      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ffe:	4b3b      	ldr	r3, [pc, #236]	@ (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e067      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800500e:	4b37      	ldr	r3, [pc, #220]	@ (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f023 0203 	bic.w	r2, r3, #3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	4934      	ldr	r1, [pc, #208]	@ (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 800501c:	4313      	orrs	r3, r2
 800501e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005020:	f7fc ffb6 	bl	8001f90 <HAL_GetTick>
 8005024:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005026:	e00a      	b.n	800503e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005028:	f7fc ffb2 	bl	8001f90 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005036:	4293      	cmp	r3, r2
 8005038:	d901      	bls.n	800503e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e04f      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800503e:	4b2b      	ldr	r3, [pc, #172]	@ (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 020c 	and.w	r2, r3, #12
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	429a      	cmp	r2, r3
 800504e:	d1eb      	bne.n	8005028 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005050:	4b25      	ldr	r3, [pc, #148]	@ (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0307 	and.w	r3, r3, #7
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	429a      	cmp	r2, r3
 800505c:	d20c      	bcs.n	8005078 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800505e:	4b22      	ldr	r3, [pc, #136]	@ (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	b2d2      	uxtb	r2, r2
 8005064:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005066:	4b20      	ldr	r3, [pc, #128]	@ (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0307 	and.w	r3, r3, #7
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	429a      	cmp	r2, r3
 8005072:	d001      	beq.n	8005078 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e032      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b00      	cmp	r3, #0
 8005082:	d008      	beq.n	8005096 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005084:	4b19      	ldr	r3, [pc, #100]	@ (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	4916      	ldr	r1, [pc, #88]	@ (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8005092:	4313      	orrs	r3, r2
 8005094:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0308 	and.w	r3, r3, #8
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d009      	beq.n	80050b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050a2:	4b12      	ldr	r3, [pc, #72]	@ (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	490e      	ldr	r1, [pc, #56]	@ (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050b6:	f000 f821 	bl	80050fc <HAL_RCC_GetSysClockFreq>
 80050ba:	4602      	mov	r2, r0
 80050bc:	4b0b      	ldr	r3, [pc, #44]	@ (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	091b      	lsrs	r3, r3, #4
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	490a      	ldr	r1, [pc, #40]	@ (80050f0 <HAL_RCC_ClockConfig+0x1c0>)
 80050c8:	5ccb      	ldrb	r3, [r1, r3]
 80050ca:	fa22 f303 	lsr.w	r3, r2, r3
 80050ce:	4a09      	ldr	r2, [pc, #36]	@ (80050f4 <HAL_RCC_ClockConfig+0x1c4>)
 80050d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80050d2:	4b09      	ldr	r3, [pc, #36]	@ (80050f8 <HAL_RCC_ClockConfig+0x1c8>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fc fd70 	bl	8001bbc <HAL_InitTick>

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	40023c00 	.word	0x40023c00
 80050ec:	40023800 	.word	0x40023800
 80050f0:	0800e438 	.word	0x0800e438
 80050f4:	20000090 	.word	0x20000090
 80050f8:	20000094 	.word	0x20000094

080050fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005100:	b090      	sub	sp, #64	@ 0x40
 8005102:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800510c:	2300      	movs	r3, #0
 800510e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005114:	4b59      	ldr	r3, [pc, #356]	@ (800527c <HAL_RCC_GetSysClockFreq+0x180>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f003 030c 	and.w	r3, r3, #12
 800511c:	2b08      	cmp	r3, #8
 800511e:	d00d      	beq.n	800513c <HAL_RCC_GetSysClockFreq+0x40>
 8005120:	2b08      	cmp	r3, #8
 8005122:	f200 80a1 	bhi.w	8005268 <HAL_RCC_GetSysClockFreq+0x16c>
 8005126:	2b00      	cmp	r3, #0
 8005128:	d002      	beq.n	8005130 <HAL_RCC_GetSysClockFreq+0x34>
 800512a:	2b04      	cmp	r3, #4
 800512c:	d003      	beq.n	8005136 <HAL_RCC_GetSysClockFreq+0x3a>
 800512e:	e09b      	b.n	8005268 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005130:	4b53      	ldr	r3, [pc, #332]	@ (8005280 <HAL_RCC_GetSysClockFreq+0x184>)
 8005132:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005134:	e09b      	b.n	800526e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005136:	4b53      	ldr	r3, [pc, #332]	@ (8005284 <HAL_RCC_GetSysClockFreq+0x188>)
 8005138:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800513a:	e098      	b.n	800526e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800513c:	4b4f      	ldr	r3, [pc, #316]	@ (800527c <HAL_RCC_GetSysClockFreq+0x180>)
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005144:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005146:	4b4d      	ldr	r3, [pc, #308]	@ (800527c <HAL_RCC_GetSysClockFreq+0x180>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d028      	beq.n	80051a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005152:	4b4a      	ldr	r3, [pc, #296]	@ (800527c <HAL_RCC_GetSysClockFreq+0x180>)
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	099b      	lsrs	r3, r3, #6
 8005158:	2200      	movs	r2, #0
 800515a:	623b      	str	r3, [r7, #32]
 800515c:	627a      	str	r2, [r7, #36]	@ 0x24
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005164:	2100      	movs	r1, #0
 8005166:	4b47      	ldr	r3, [pc, #284]	@ (8005284 <HAL_RCC_GetSysClockFreq+0x188>)
 8005168:	fb03 f201 	mul.w	r2, r3, r1
 800516c:	2300      	movs	r3, #0
 800516e:	fb00 f303 	mul.w	r3, r0, r3
 8005172:	4413      	add	r3, r2
 8005174:	4a43      	ldr	r2, [pc, #268]	@ (8005284 <HAL_RCC_GetSysClockFreq+0x188>)
 8005176:	fba0 1202 	umull	r1, r2, r0, r2
 800517a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800517c:	460a      	mov	r2, r1
 800517e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005180:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005182:	4413      	add	r3, r2
 8005184:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005188:	2200      	movs	r2, #0
 800518a:	61bb      	str	r3, [r7, #24]
 800518c:	61fa      	str	r2, [r7, #28]
 800518e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005192:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005196:	f7fb fd0f 	bl	8000bb8 <__aeabi_uldivmod>
 800519a:	4602      	mov	r2, r0
 800519c:	460b      	mov	r3, r1
 800519e:	4613      	mov	r3, r2
 80051a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051a2:	e053      	b.n	800524c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051a4:	4b35      	ldr	r3, [pc, #212]	@ (800527c <HAL_RCC_GetSysClockFreq+0x180>)
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	099b      	lsrs	r3, r3, #6
 80051aa:	2200      	movs	r2, #0
 80051ac:	613b      	str	r3, [r7, #16]
 80051ae:	617a      	str	r2, [r7, #20]
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80051b6:	f04f 0b00 	mov.w	fp, #0
 80051ba:	4652      	mov	r2, sl
 80051bc:	465b      	mov	r3, fp
 80051be:	f04f 0000 	mov.w	r0, #0
 80051c2:	f04f 0100 	mov.w	r1, #0
 80051c6:	0159      	lsls	r1, r3, #5
 80051c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051cc:	0150      	lsls	r0, r2, #5
 80051ce:	4602      	mov	r2, r0
 80051d0:	460b      	mov	r3, r1
 80051d2:	ebb2 080a 	subs.w	r8, r2, sl
 80051d6:	eb63 090b 	sbc.w	r9, r3, fp
 80051da:	f04f 0200 	mov.w	r2, #0
 80051de:	f04f 0300 	mov.w	r3, #0
 80051e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80051e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80051ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80051ee:	ebb2 0408 	subs.w	r4, r2, r8
 80051f2:	eb63 0509 	sbc.w	r5, r3, r9
 80051f6:	f04f 0200 	mov.w	r2, #0
 80051fa:	f04f 0300 	mov.w	r3, #0
 80051fe:	00eb      	lsls	r3, r5, #3
 8005200:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005204:	00e2      	lsls	r2, r4, #3
 8005206:	4614      	mov	r4, r2
 8005208:	461d      	mov	r5, r3
 800520a:	eb14 030a 	adds.w	r3, r4, sl
 800520e:	603b      	str	r3, [r7, #0]
 8005210:	eb45 030b 	adc.w	r3, r5, fp
 8005214:	607b      	str	r3, [r7, #4]
 8005216:	f04f 0200 	mov.w	r2, #0
 800521a:	f04f 0300 	mov.w	r3, #0
 800521e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005222:	4629      	mov	r1, r5
 8005224:	028b      	lsls	r3, r1, #10
 8005226:	4621      	mov	r1, r4
 8005228:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800522c:	4621      	mov	r1, r4
 800522e:	028a      	lsls	r2, r1, #10
 8005230:	4610      	mov	r0, r2
 8005232:	4619      	mov	r1, r3
 8005234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005236:	2200      	movs	r2, #0
 8005238:	60bb      	str	r3, [r7, #8]
 800523a:	60fa      	str	r2, [r7, #12]
 800523c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005240:	f7fb fcba 	bl	8000bb8 <__aeabi_uldivmod>
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	4613      	mov	r3, r2
 800524a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800524c:	4b0b      	ldr	r3, [pc, #44]	@ (800527c <HAL_RCC_GetSysClockFreq+0x180>)
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	0c1b      	lsrs	r3, r3, #16
 8005252:	f003 0303 	and.w	r3, r3, #3
 8005256:	3301      	adds	r3, #1
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800525c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800525e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005260:	fbb2 f3f3 	udiv	r3, r2, r3
 8005264:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005266:	e002      	b.n	800526e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005268:	4b05      	ldr	r3, [pc, #20]	@ (8005280 <HAL_RCC_GetSysClockFreq+0x184>)
 800526a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800526c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800526e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005270:	4618      	mov	r0, r3
 8005272:	3740      	adds	r7, #64	@ 0x40
 8005274:	46bd      	mov	sp, r7
 8005276:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800527a:	bf00      	nop
 800527c:	40023800 	.word	0x40023800
 8005280:	00f42400 	.word	0x00f42400
 8005284:	017d7840 	.word	0x017d7840

08005288 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005288:	b480      	push	{r7}
 800528a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800528c:	4b03      	ldr	r3, [pc, #12]	@ (800529c <HAL_RCC_GetHCLKFreq+0x14>)
 800528e:	681b      	ldr	r3, [r3, #0]
}
 8005290:	4618      	mov	r0, r3
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	20000090 	.word	0x20000090

080052a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052a4:	f7ff fff0 	bl	8005288 <HAL_RCC_GetHCLKFreq>
 80052a8:	4602      	mov	r2, r0
 80052aa:	4b05      	ldr	r3, [pc, #20]	@ (80052c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	0a9b      	lsrs	r3, r3, #10
 80052b0:	f003 0307 	and.w	r3, r3, #7
 80052b4:	4903      	ldr	r1, [pc, #12]	@ (80052c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052b6:	5ccb      	ldrb	r3, [r1, r3]
 80052b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052bc:	4618      	mov	r0, r3
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	40023800 	.word	0x40023800
 80052c4:	0800e448 	.word	0x0800e448

080052c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	220f      	movs	r2, #15
 80052d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80052d8:	4b12      	ldr	r3, [pc, #72]	@ (8005324 <HAL_RCC_GetClockConfig+0x5c>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f003 0203 	and.w	r2, r3, #3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80052e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005324 <HAL_RCC_GetClockConfig+0x5c>)
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80052f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005324 <HAL_RCC_GetClockConfig+0x5c>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80052fc:	4b09      	ldr	r3, [pc, #36]	@ (8005324 <HAL_RCC_GetClockConfig+0x5c>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	08db      	lsrs	r3, r3, #3
 8005302:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800530a:	4b07      	ldr	r3, [pc, #28]	@ (8005328 <HAL_RCC_GetClockConfig+0x60>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0207 	and.w	r2, r3, #7
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	601a      	str	r2, [r3, #0]
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	40023800 	.word	0x40023800
 8005328:	40023c00 	.word	0x40023c00

0800532c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e041      	b.n	80053c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d106      	bne.n	8005358 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f839 	bl	80053ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	3304      	adds	r3, #4
 8005368:	4619      	mov	r1, r3
 800536a:	4610      	mov	r0, r2
 800536c:	f000 f9b2 	bl	80056d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b083      	sub	sp, #12
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80053d2:	bf00      	nop
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
	...

080053e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d001      	beq.n	80053f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e044      	b.n	8005482 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68da      	ldr	r2, [r3, #12]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f042 0201 	orr.w	r2, r2, #1
 800540e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a1e      	ldr	r2, [pc, #120]	@ (8005490 <HAL_TIM_Base_Start_IT+0xb0>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d018      	beq.n	800544c <HAL_TIM_Base_Start_IT+0x6c>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005422:	d013      	beq.n	800544c <HAL_TIM_Base_Start_IT+0x6c>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a1a      	ldr	r2, [pc, #104]	@ (8005494 <HAL_TIM_Base_Start_IT+0xb4>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d00e      	beq.n	800544c <HAL_TIM_Base_Start_IT+0x6c>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a19      	ldr	r2, [pc, #100]	@ (8005498 <HAL_TIM_Base_Start_IT+0xb8>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d009      	beq.n	800544c <HAL_TIM_Base_Start_IT+0x6c>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a17      	ldr	r2, [pc, #92]	@ (800549c <HAL_TIM_Base_Start_IT+0xbc>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d004      	beq.n	800544c <HAL_TIM_Base_Start_IT+0x6c>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a16      	ldr	r2, [pc, #88]	@ (80054a0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d111      	bne.n	8005470 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 0307 	and.w	r3, r3, #7
 8005456:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2b06      	cmp	r3, #6
 800545c:	d010      	beq.n	8005480 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f042 0201 	orr.w	r2, r2, #1
 800546c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800546e:	e007      	b.n	8005480 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 0201 	orr.w	r2, r2, #1
 800547e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	40010000 	.word	0x40010000
 8005494:	40000400 	.word	0x40000400
 8005498:	40000800 	.word	0x40000800
 800549c:	40000c00 	.word	0x40000c00
 80054a0:	40014000 	.word	0x40014000

080054a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d020      	beq.n	8005508 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d01b      	beq.n	8005508 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f06f 0202 	mvn.w	r2, #2
 80054d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	f003 0303 	and.w	r3, r3, #3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f8d2 	bl	8005698 <HAL_TIM_IC_CaptureCallback>
 80054f4:	e005      	b.n	8005502 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f8c4 	bl	8005684 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f8d5 	bl	80056ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f003 0304 	and.w	r3, r3, #4
 800550e:	2b00      	cmp	r3, #0
 8005510:	d020      	beq.n	8005554 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b00      	cmp	r3, #0
 800551a:	d01b      	beq.n	8005554 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f06f 0204 	mvn.w	r2, #4
 8005524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2202      	movs	r2, #2
 800552a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f8ac 	bl	8005698 <HAL_TIM_IC_CaptureCallback>
 8005540:	e005      	b.n	800554e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f89e 	bl	8005684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 f8af 	bl	80056ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f003 0308 	and.w	r3, r3, #8
 800555a:	2b00      	cmp	r3, #0
 800555c:	d020      	beq.n	80055a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f003 0308 	and.w	r3, r3, #8
 8005564:	2b00      	cmp	r3, #0
 8005566:	d01b      	beq.n	80055a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f06f 0208 	mvn.w	r2, #8
 8005570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2204      	movs	r2, #4
 8005576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	f003 0303 	and.w	r3, r3, #3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f886 	bl	8005698 <HAL_TIM_IC_CaptureCallback>
 800558c:	e005      	b.n	800559a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f878 	bl	8005684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f889 	bl	80056ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f003 0310 	and.w	r3, r3, #16
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d020      	beq.n	80055ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f003 0310 	and.w	r3, r3, #16
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d01b      	beq.n	80055ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f06f 0210 	mvn.w	r2, #16
 80055bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2208      	movs	r2, #8
 80055c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f860 	bl	8005698 <HAL_TIM_IC_CaptureCallback>
 80055d8:	e005      	b.n	80055e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f852 	bl	8005684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f863 	bl	80056ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00c      	beq.n	8005610 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d007      	beq.n	8005610 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f06f 0201 	mvn.w	r2, #1
 8005608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7fb fe34 	bl	8001278 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00c      	beq.n	8005634 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005620:	2b00      	cmp	r3, #0
 8005622:	d007      	beq.n	8005634 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800562c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f8e0 	bl	80057f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00c      	beq.n	8005658 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005644:	2b00      	cmp	r3, #0
 8005646:	d007      	beq.n	8005658 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f834 	bl	80056c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	f003 0320 	and.w	r3, r3, #32
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00c      	beq.n	800567c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f003 0320 	and.w	r3, r3, #32
 8005668:	2b00      	cmp	r3, #0
 800566a:	d007      	beq.n	800567c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f06f 0220 	mvn.w	r2, #32
 8005674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f8b2 	bl	80057e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800567c:	bf00      	nop
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a37      	ldr	r2, [pc, #220]	@ (80057c4 <TIM_Base_SetConfig+0xf0>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d00f      	beq.n	800570c <TIM_Base_SetConfig+0x38>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056f2:	d00b      	beq.n	800570c <TIM_Base_SetConfig+0x38>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a34      	ldr	r2, [pc, #208]	@ (80057c8 <TIM_Base_SetConfig+0xf4>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d007      	beq.n	800570c <TIM_Base_SetConfig+0x38>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a33      	ldr	r2, [pc, #204]	@ (80057cc <TIM_Base_SetConfig+0xf8>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d003      	beq.n	800570c <TIM_Base_SetConfig+0x38>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a32      	ldr	r2, [pc, #200]	@ (80057d0 <TIM_Base_SetConfig+0xfc>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d108      	bne.n	800571e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	4313      	orrs	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a28      	ldr	r2, [pc, #160]	@ (80057c4 <TIM_Base_SetConfig+0xf0>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d01b      	beq.n	800575e <TIM_Base_SetConfig+0x8a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800572c:	d017      	beq.n	800575e <TIM_Base_SetConfig+0x8a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a25      	ldr	r2, [pc, #148]	@ (80057c8 <TIM_Base_SetConfig+0xf4>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d013      	beq.n	800575e <TIM_Base_SetConfig+0x8a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a24      	ldr	r2, [pc, #144]	@ (80057cc <TIM_Base_SetConfig+0xf8>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00f      	beq.n	800575e <TIM_Base_SetConfig+0x8a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a23      	ldr	r2, [pc, #140]	@ (80057d0 <TIM_Base_SetConfig+0xfc>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d00b      	beq.n	800575e <TIM_Base_SetConfig+0x8a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a22      	ldr	r2, [pc, #136]	@ (80057d4 <TIM_Base_SetConfig+0x100>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d007      	beq.n	800575e <TIM_Base_SetConfig+0x8a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a21      	ldr	r2, [pc, #132]	@ (80057d8 <TIM_Base_SetConfig+0x104>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d003      	beq.n	800575e <TIM_Base_SetConfig+0x8a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a20      	ldr	r2, [pc, #128]	@ (80057dc <TIM_Base_SetConfig+0x108>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d108      	bne.n	8005770 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	4313      	orrs	r3, r2
 800576e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	4313      	orrs	r3, r2
 800577c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	689a      	ldr	r2, [r3, #8]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a0c      	ldr	r2, [pc, #48]	@ (80057c4 <TIM_Base_SetConfig+0xf0>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d103      	bne.n	800579e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	691a      	ldr	r2, [r3, #16]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f043 0204 	orr.w	r2, r3, #4
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	601a      	str	r2, [r3, #0]
}
 80057b6:	bf00      	nop
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	40010000 	.word	0x40010000
 80057c8:	40000400 	.word	0x40000400
 80057cc:	40000800 	.word	0x40000800
 80057d0:	40000c00 	.word	0x40000c00
 80057d4:	40014000 	.word	0x40014000
 80057d8:	40014400 	.word	0x40014400
 80057dc:	40014800 	.word	0x40014800

080057e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005808:	b084      	sub	sp, #16
 800580a:	b580      	push	{r7, lr}
 800580c:	b084      	sub	sp, #16
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	f107 001c 	add.w	r0, r7, #28
 8005816:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800581a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800581e:	2b01      	cmp	r3, #1
 8005820:	d123      	bne.n	800586a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005826:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005836:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800584a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800584e:	2b01      	cmp	r3, #1
 8005850:	d105      	bne.n	800585e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f001 fae8 	bl	8006e34 <USB_CoreReset>
 8005864:	4603      	mov	r3, r0
 8005866:	73fb      	strb	r3, [r7, #15]
 8005868:	e01b      	b.n	80058a2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f001 fadc 	bl	8006e34 <USB_CoreReset>
 800587c:	4603      	mov	r3, r0
 800587e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005880:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005884:	2b00      	cmp	r3, #0
 8005886:	d106      	bne.n	8005896 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800588c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	639a      	str	r2, [r3, #56]	@ 0x38
 8005894:	e005      	b.n	80058a2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800589a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80058a2:	7fbb      	ldrb	r3, [r7, #30]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d10b      	bne.n	80058c0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f043 0206 	orr.w	r2, r3, #6
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f043 0220 	orr.w	r2, r3, #32
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80058c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058cc:	b004      	add	sp, #16
 80058ce:	4770      	bx	lr

080058d0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	4613      	mov	r3, r2
 80058dc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80058de:	79fb      	ldrb	r3, [r7, #7]
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d165      	bne.n	80059b0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	4a41      	ldr	r2, [pc, #260]	@ (80059ec <USB_SetTurnaroundTime+0x11c>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d906      	bls.n	80058fa <USB_SetTurnaroundTime+0x2a>
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	4a40      	ldr	r2, [pc, #256]	@ (80059f0 <USB_SetTurnaroundTime+0x120>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d202      	bcs.n	80058fa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80058f4:	230f      	movs	r3, #15
 80058f6:	617b      	str	r3, [r7, #20]
 80058f8:	e062      	b.n	80059c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	4a3c      	ldr	r2, [pc, #240]	@ (80059f0 <USB_SetTurnaroundTime+0x120>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d306      	bcc.n	8005910 <USB_SetTurnaroundTime+0x40>
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	4a3b      	ldr	r2, [pc, #236]	@ (80059f4 <USB_SetTurnaroundTime+0x124>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d202      	bcs.n	8005910 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800590a:	230e      	movs	r3, #14
 800590c:	617b      	str	r3, [r7, #20]
 800590e:	e057      	b.n	80059c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	4a38      	ldr	r2, [pc, #224]	@ (80059f4 <USB_SetTurnaroundTime+0x124>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d306      	bcc.n	8005926 <USB_SetTurnaroundTime+0x56>
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	4a37      	ldr	r2, [pc, #220]	@ (80059f8 <USB_SetTurnaroundTime+0x128>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d202      	bcs.n	8005926 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005920:	230d      	movs	r3, #13
 8005922:	617b      	str	r3, [r7, #20]
 8005924:	e04c      	b.n	80059c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	4a33      	ldr	r2, [pc, #204]	@ (80059f8 <USB_SetTurnaroundTime+0x128>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d306      	bcc.n	800593c <USB_SetTurnaroundTime+0x6c>
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	4a32      	ldr	r2, [pc, #200]	@ (80059fc <USB_SetTurnaroundTime+0x12c>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d802      	bhi.n	800593c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005936:	230c      	movs	r3, #12
 8005938:	617b      	str	r3, [r7, #20]
 800593a:	e041      	b.n	80059c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	4a2f      	ldr	r2, [pc, #188]	@ (80059fc <USB_SetTurnaroundTime+0x12c>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d906      	bls.n	8005952 <USB_SetTurnaroundTime+0x82>
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	4a2e      	ldr	r2, [pc, #184]	@ (8005a00 <USB_SetTurnaroundTime+0x130>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d802      	bhi.n	8005952 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800594c:	230b      	movs	r3, #11
 800594e:	617b      	str	r3, [r7, #20]
 8005950:	e036      	b.n	80059c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	4a2a      	ldr	r2, [pc, #168]	@ (8005a00 <USB_SetTurnaroundTime+0x130>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d906      	bls.n	8005968 <USB_SetTurnaroundTime+0x98>
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	4a29      	ldr	r2, [pc, #164]	@ (8005a04 <USB_SetTurnaroundTime+0x134>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d802      	bhi.n	8005968 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005962:	230a      	movs	r3, #10
 8005964:	617b      	str	r3, [r7, #20]
 8005966:	e02b      	b.n	80059c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	4a26      	ldr	r2, [pc, #152]	@ (8005a04 <USB_SetTurnaroundTime+0x134>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d906      	bls.n	800597e <USB_SetTurnaroundTime+0xae>
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	4a25      	ldr	r2, [pc, #148]	@ (8005a08 <USB_SetTurnaroundTime+0x138>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d202      	bcs.n	800597e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005978:	2309      	movs	r3, #9
 800597a:	617b      	str	r3, [r7, #20]
 800597c:	e020      	b.n	80059c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	4a21      	ldr	r2, [pc, #132]	@ (8005a08 <USB_SetTurnaroundTime+0x138>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d306      	bcc.n	8005994 <USB_SetTurnaroundTime+0xc4>
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	4a20      	ldr	r2, [pc, #128]	@ (8005a0c <USB_SetTurnaroundTime+0x13c>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d802      	bhi.n	8005994 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800598e:	2308      	movs	r3, #8
 8005990:	617b      	str	r3, [r7, #20]
 8005992:	e015      	b.n	80059c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	4a1d      	ldr	r2, [pc, #116]	@ (8005a0c <USB_SetTurnaroundTime+0x13c>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d906      	bls.n	80059aa <USB_SetTurnaroundTime+0xda>
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	4a1c      	ldr	r2, [pc, #112]	@ (8005a10 <USB_SetTurnaroundTime+0x140>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d202      	bcs.n	80059aa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80059a4:	2307      	movs	r3, #7
 80059a6:	617b      	str	r3, [r7, #20]
 80059a8:	e00a      	b.n	80059c0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80059aa:	2306      	movs	r3, #6
 80059ac:	617b      	str	r3, [r7, #20]
 80059ae:	e007      	b.n	80059c0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80059b0:	79fb      	ldrb	r3, [r7, #7]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d102      	bne.n	80059bc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80059b6:	2309      	movs	r3, #9
 80059b8:	617b      	str	r3, [r7, #20]
 80059ba:	e001      	b.n	80059c0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80059bc:	2309      	movs	r3, #9
 80059be:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	68da      	ldr	r2, [r3, #12]
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	029b      	lsls	r3, r3, #10
 80059d4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80059d8:	431a      	orrs	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	371c      	adds	r7, #28
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	00d8acbf 	.word	0x00d8acbf
 80059f0:	00e4e1c0 	.word	0x00e4e1c0
 80059f4:	00f42400 	.word	0x00f42400
 80059f8:	01067380 	.word	0x01067380
 80059fc:	011a499f 	.word	0x011a499f
 8005a00:	01312cff 	.word	0x01312cff
 8005a04:	014ca43f 	.word	0x014ca43f
 8005a08:	016e3600 	.word	0x016e3600
 8005a0c:	01a6ab1f 	.word	0x01a6ab1f
 8005a10:	01e84800 	.word	0x01e84800

08005a14 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f043 0201 	orr.w	r2, r3, #1
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b083      	sub	sp, #12
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f023 0201 	bic.w	r2, r3, #1
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	460b      	mov	r3, r1
 8005a62:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a74:	78fb      	ldrb	r3, [r7, #3]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d115      	bne.n	8005aa6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a86:	200a      	movs	r0, #10
 8005a88:	f7fc fa8e 	bl	8001fa8 <HAL_Delay>
      ms += 10U;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	330a      	adds	r3, #10
 8005a90:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f001 f93f 	bl	8006d16 <USB_GetMode>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d01e      	beq.n	8005adc <USB_SetCurrentMode+0x84>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2bc7      	cmp	r3, #199	@ 0xc7
 8005aa2:	d9f0      	bls.n	8005a86 <USB_SetCurrentMode+0x2e>
 8005aa4:	e01a      	b.n	8005adc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005aa6:	78fb      	ldrb	r3, [r7, #3]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d115      	bne.n	8005ad8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ab8:	200a      	movs	r0, #10
 8005aba:	f7fc fa75 	bl	8001fa8 <HAL_Delay>
      ms += 10U;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	330a      	adds	r3, #10
 8005ac2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f001 f926 	bl	8006d16 <USB_GetMode>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d005      	beq.n	8005adc <USB_SetCurrentMode+0x84>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2bc7      	cmp	r3, #199	@ 0xc7
 8005ad4:	d9f0      	bls.n	8005ab8 <USB_SetCurrentMode+0x60>
 8005ad6:	e001      	b.n	8005adc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e005      	b.n	8005ae8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2bc8      	cmp	r3, #200	@ 0xc8
 8005ae0:	d101      	bne.n	8005ae6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e000      	b.n	8005ae8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005af0:	b084      	sub	sp, #16
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b086      	sub	sp, #24
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
 8005afa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005afe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b02:	2300      	movs	r3, #0
 8005b04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	613b      	str	r3, [r7, #16]
 8005b0e:	e009      	b.n	8005b24 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	3340      	adds	r3, #64	@ 0x40
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	3301      	adds	r3, #1
 8005b22:	613b      	str	r3, [r7, #16]
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	2b0e      	cmp	r3, #14
 8005b28:	d9f2      	bls.n	8005b10 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005b2a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d11c      	bne.n	8005b6c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b40:	f043 0302 	orr.w	r3, r3, #2
 8005b44:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b4a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b56:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b62:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	639a      	str	r2, [r3, #56]	@ 0x38
 8005b6a:	e00b      	b.n	8005b84 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b70:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b90:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d10d      	bne.n	8005bb4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005b98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d104      	bne.n	8005baa <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f968 	bl	8005e78 <USB_SetDevSpeed>
 8005ba8:	e008      	b.n	8005bbc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005baa:	2101      	movs	r1, #1
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f963 	bl	8005e78 <USB_SetDevSpeed>
 8005bb2:	e003      	b.n	8005bbc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005bb4:	2103      	movs	r1, #3
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f95e 	bl	8005e78 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005bbc:	2110      	movs	r1, #16
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f8fa 	bl	8005db8 <USB_FlushTxFifo>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d001      	beq.n	8005bce <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f924 	bl	8005e1c <USB_FlushRxFifo>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d001      	beq.n	8005bde <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005be4:	461a      	mov	r2, r3
 8005be6:	2300      	movs	r3, #0
 8005be8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	2300      	movs	r3, #0
 8005c00:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c02:	2300      	movs	r3, #0
 8005c04:	613b      	str	r3, [r7, #16]
 8005c06:	e043      	b.n	8005c90 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c1e:	d118      	bne.n	8005c52 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d10a      	bne.n	8005c3c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c32:	461a      	mov	r2, r3
 8005c34:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005c38:	6013      	str	r3, [r2, #0]
 8005c3a:	e013      	b.n	8005c64 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c48:	461a      	mov	r2, r3
 8005c4a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005c4e:	6013      	str	r3, [r2, #0]
 8005c50:	e008      	b.n	8005c64 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	015a      	lsls	r2, r3, #5
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c5e:	461a      	mov	r2, r3
 8005c60:	2300      	movs	r3, #0
 8005c62:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c70:	461a      	mov	r2, r3
 8005c72:	2300      	movs	r3, #0
 8005c74:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c82:	461a      	mov	r2, r3
 8005c84:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005c88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	613b      	str	r3, [r7, #16]
 8005c90:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005c94:	461a      	mov	r2, r3
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d3b5      	bcc.n	8005c08 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	613b      	str	r3, [r7, #16]
 8005ca0:	e043      	b.n	8005d2a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cb8:	d118      	bne.n	8005cec <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10a      	bne.n	8005cd6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ccc:	461a      	mov	r2, r3
 8005cce:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005cd2:	6013      	str	r3, [r2, #0]
 8005cd4:	e013      	b.n	8005cfe <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005ce8:	6013      	str	r3, [r2, #0]
 8005cea:	e008      	b.n	8005cfe <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	015a      	lsls	r2, r3, #5
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005d22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	3301      	adds	r3, #1
 8005d28:	613b      	str	r3, [r7, #16]
 8005d2a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005d2e:	461a      	mov	r2, r3
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d3b5      	bcc.n	8005ca2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d48:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005d56:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d58:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d105      	bne.n	8005d6c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	f043 0210 	orr.w	r2, r3, #16
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	699a      	ldr	r2, [r3, #24]
 8005d70:	4b10      	ldr	r3, [pc, #64]	@ (8005db4 <USB_DevInit+0x2c4>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d78:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d005      	beq.n	8005d8c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	f043 0208 	orr.w	r2, r3, #8
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d8c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d107      	bne.n	8005da4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d9c:	f043 0304 	orr.w	r3, r3, #4
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005db0:	b004      	add	sp, #16
 8005db2:	4770      	bx	lr
 8005db4:	803c3800 	.word	0x803c3800

08005db8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005dd2:	d901      	bls.n	8005dd8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e01b      	b.n	8005e10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	daf2      	bge.n	8005dc6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005de0:	2300      	movs	r3, #0
 8005de2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	019b      	lsls	r3, r3, #6
 8005de8:	f043 0220 	orr.w	r2, r3, #32
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	3301      	adds	r3, #1
 8005df4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005dfc:	d901      	bls.n	8005e02 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e006      	b.n	8005e10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	f003 0320 	and.w	r3, r3, #32
 8005e0a:	2b20      	cmp	r3, #32
 8005e0c:	d0f0      	beq.n	8005df0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e24:	2300      	movs	r3, #0
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e34:	d901      	bls.n	8005e3a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e018      	b.n	8005e6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	daf2      	bge.n	8005e28 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005e42:	2300      	movs	r3, #0
 8005e44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2210      	movs	r2, #16
 8005e4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e58:	d901      	bls.n	8005e5e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e006      	b.n	8005e6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	f003 0310 	and.w	r3, r3, #16
 8005e66:	2b10      	cmp	r3, #16
 8005e68:	d0f0      	beq.n	8005e4c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3714      	adds	r7, #20
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	460b      	mov	r3, r1
 8005e82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	78fb      	ldrb	r3, [r7, #3]
 8005e92:	68f9      	ldr	r1, [r7, #12]
 8005e94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b087      	sub	sp, #28
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f003 0306 	and.w	r3, r3, #6
 8005ec2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d102      	bne.n	8005ed0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	75fb      	strb	r3, [r7, #23]
 8005ece:	e00a      	b.n	8005ee6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d002      	beq.n	8005edc <USB_GetDevSpeed+0x32>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2b06      	cmp	r3, #6
 8005eda:	d102      	bne.n	8005ee2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005edc:	2302      	movs	r3, #2
 8005ede:	75fb      	strb	r3, [r7, #23]
 8005ee0:	e001      	b.n	8005ee6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005ee2:	230f      	movs	r3, #15
 8005ee4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	371c      	adds	r7, #28
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	785b      	ldrb	r3, [r3, #1]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d13a      	bne.n	8005f86 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f16:	69da      	ldr	r2, [r3, #28]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	f003 030f 	and.w	r3, r3, #15
 8005f20:	2101      	movs	r1, #1
 8005f22:	fa01 f303 	lsl.w	r3, r1, r3
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	68f9      	ldr	r1, [r7, #12]
 8005f2a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d155      	bne.n	8005ff4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	791b      	ldrb	r3, [r3, #4]
 8005f62:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f64:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	059b      	lsls	r3, r3, #22
 8005f6a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	0151      	lsls	r1, r2, #5
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	440a      	add	r2, r1
 8005f76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f82:	6013      	str	r3, [r2, #0]
 8005f84:	e036      	b.n	8005ff4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f8c:	69da      	ldr	r2, [r3, #28]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	f003 030f 	and.w	r3, r3, #15
 8005f96:	2101      	movs	r1, #1
 8005f98:	fa01 f303 	lsl.w	r3, r1, r3
 8005f9c:	041b      	lsls	r3, r3, #16
 8005f9e:	68f9      	ldr	r1, [r7, #12]
 8005fa0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d11a      	bne.n	8005ff4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	791b      	ldrb	r3, [r3, #4]
 8005fd8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005fda:	430b      	orrs	r3, r1
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	0151      	lsls	r1, r2, #5
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	440a      	add	r2, r1
 8005fe6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ff2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
	...

08006004 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	785b      	ldrb	r3, [r3, #1]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d161      	bne.n	80060e4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006032:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006036:	d11f      	bne.n	8006078 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4413      	add	r3, r2
 8006040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	0151      	lsls	r1, r2, #5
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	440a      	add	r2, r1
 800604e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006052:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006056:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	0151      	lsls	r1, r2, #5
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	440a      	add	r2, r1
 800606e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006072:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006076:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800607e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	f003 030f 	and.w	r3, r3, #15
 8006088:	2101      	movs	r1, #1
 800608a:	fa01 f303 	lsl.w	r3, r1, r3
 800608e:	b29b      	uxth	r3, r3
 8006090:	43db      	mvns	r3, r3
 8006092:	68f9      	ldr	r1, [r7, #12]
 8006094:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006098:	4013      	ands	r3, r2
 800609a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060a2:	69da      	ldr	r2, [r3, #28]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	f003 030f 	and.w	r3, r3, #15
 80060ac:	2101      	movs	r1, #1
 80060ae:	fa01 f303 	lsl.w	r3, r1, r3
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	43db      	mvns	r3, r3
 80060b6:	68f9      	ldr	r1, [r7, #12]
 80060b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060bc:	4013      	ands	r3, r2
 80060be:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	015a      	lsls	r2, r3, #5
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	0159      	lsls	r1, r3, #5
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	440b      	add	r3, r1
 80060d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060da:	4619      	mov	r1, r3
 80060dc:	4b35      	ldr	r3, [pc, #212]	@ (80061b4 <USB_DeactivateEndpoint+0x1b0>)
 80060de:	4013      	ands	r3, r2
 80060e0:	600b      	str	r3, [r1, #0]
 80060e2:	e060      	b.n	80061a6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060fa:	d11f      	bne.n	800613c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	015a      	lsls	r2, r3, #5
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	4413      	add	r3, r2
 8006104:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	0151      	lsls	r1, r2, #5
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	440a      	add	r2, r1
 8006112:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006116:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800611a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	4413      	add	r3, r2
 8006124:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	0151      	lsls	r1, r2, #5
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	440a      	add	r2, r1
 8006132:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006136:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800613a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006142:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	f003 030f 	and.w	r3, r3, #15
 800614c:	2101      	movs	r1, #1
 800614e:	fa01 f303 	lsl.w	r3, r1, r3
 8006152:	041b      	lsls	r3, r3, #16
 8006154:	43db      	mvns	r3, r3
 8006156:	68f9      	ldr	r1, [r7, #12]
 8006158:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800615c:	4013      	ands	r3, r2
 800615e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006166:	69da      	ldr	r2, [r3, #28]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	f003 030f 	and.w	r3, r3, #15
 8006170:	2101      	movs	r1, #1
 8006172:	fa01 f303 	lsl.w	r3, r1, r3
 8006176:	041b      	lsls	r3, r3, #16
 8006178:	43db      	mvns	r3, r3
 800617a:	68f9      	ldr	r1, [r7, #12]
 800617c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006180:	4013      	ands	r3, r2
 8006182:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	4413      	add	r3, r2
 800618c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	0159      	lsls	r1, r3, #5
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	440b      	add	r3, r1
 800619a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800619e:	4619      	mov	r1, r3
 80061a0:	4b05      	ldr	r3, [pc, #20]	@ (80061b8 <USB_DeactivateEndpoint+0x1b4>)
 80061a2:	4013      	ands	r3, r2
 80061a4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	ec337800 	.word	0xec337800
 80061b8:	eff37800 	.word	0xeff37800

080061bc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b08a      	sub	sp, #40	@ 0x28
 80061c0:	af02      	add	r7, sp, #8
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	4613      	mov	r3, r2
 80061c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	785b      	ldrb	r3, [r3, #1]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	f040 817f 	bne.w	80064dc <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d132      	bne.n	800624c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	015a      	lsls	r2, r3, #5
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	4413      	add	r3, r2
 80061ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	69ba      	ldr	r2, [r7, #24]
 80061f6:	0151      	lsls	r1, r2, #5
 80061f8:	69fa      	ldr	r2, [r7, #28]
 80061fa:	440a      	add	r2, r1
 80061fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006200:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006204:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006208:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	015a      	lsls	r2, r3, #5
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	4413      	add	r3, r2
 8006212:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	0151      	lsls	r1, r2, #5
 800621c:	69fa      	ldr	r2, [r7, #28]
 800621e:	440a      	add	r2, r1
 8006220:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006224:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006228:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	4413      	add	r3, r2
 8006232:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	0151      	lsls	r1, r2, #5
 800623c:	69fa      	ldr	r2, [r7, #28]
 800623e:	440a      	add	r2, r1
 8006240:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006244:	0cdb      	lsrs	r3, r3, #19
 8006246:	04db      	lsls	r3, r3, #19
 8006248:	6113      	str	r3, [r2, #16]
 800624a:	e097      	b.n	800637c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	4413      	add	r3, r2
 8006254:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	0151      	lsls	r1, r2, #5
 800625e:	69fa      	ldr	r2, [r7, #28]
 8006260:	440a      	add	r2, r1
 8006262:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006266:	0cdb      	lsrs	r3, r3, #19
 8006268:	04db      	lsls	r3, r3, #19
 800626a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	69ba      	ldr	r2, [r7, #24]
 800627c:	0151      	lsls	r1, r2, #5
 800627e:	69fa      	ldr	r2, [r7, #28]
 8006280:	440a      	add	r2, r1
 8006282:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006286:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800628a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800628e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d11a      	bne.n	80062cc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	691a      	ldr	r2, [r3, #16]
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d903      	bls.n	80062aa <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	689a      	ldr	r2, [r3, #8]
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	69ba      	ldr	r2, [r7, #24]
 80062ba:	0151      	lsls	r1, r2, #5
 80062bc:	69fa      	ldr	r2, [r7, #28]
 80062be:	440a      	add	r2, r1
 80062c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80062c8:	6113      	str	r3, [r2, #16]
 80062ca:	e044      	b.n	8006356 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	691a      	ldr	r2, [r3, #16]
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	4413      	add	r3, r2
 80062d6:	1e5a      	subs	r2, r3, #1
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	015a      	lsls	r2, r3, #5
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	4413      	add	r3, r2
 80062ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062ee:	691a      	ldr	r2, [r3, #16]
 80062f0:	8afb      	ldrh	r3, [r7, #22]
 80062f2:	04d9      	lsls	r1, r3, #19
 80062f4:	4ba4      	ldr	r3, [pc, #656]	@ (8006588 <USB_EPStartXfer+0x3cc>)
 80062f6:	400b      	ands	r3, r1
 80062f8:	69b9      	ldr	r1, [r7, #24]
 80062fa:	0148      	lsls	r0, r1, #5
 80062fc:	69f9      	ldr	r1, [r7, #28]
 80062fe:	4401      	add	r1, r0
 8006300:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006304:	4313      	orrs	r3, r2
 8006306:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	791b      	ldrb	r3, [r3, #4]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d122      	bne.n	8006356 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	4413      	add	r3, r2
 8006318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	69ba      	ldr	r2, [r7, #24]
 8006320:	0151      	lsls	r1, r2, #5
 8006322:	69fa      	ldr	r2, [r7, #28]
 8006324:	440a      	add	r2, r1
 8006326:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800632a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800632e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	4413      	add	r3, r2
 8006338:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800633c:	691a      	ldr	r2, [r3, #16]
 800633e:	8afb      	ldrh	r3, [r7, #22]
 8006340:	075b      	lsls	r3, r3, #29
 8006342:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006346:	69b9      	ldr	r1, [r7, #24]
 8006348:	0148      	lsls	r0, r1, #5
 800634a:	69f9      	ldr	r1, [r7, #28]
 800634c:	4401      	add	r1, r0
 800634e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006352:	4313      	orrs	r3, r2
 8006354:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	015a      	lsls	r2, r3, #5
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	4413      	add	r3, r2
 800635e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006362:	691a      	ldr	r2, [r3, #16]
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800636c:	69b9      	ldr	r1, [r7, #24]
 800636e:	0148      	lsls	r0, r1, #5
 8006370:	69f9      	ldr	r1, [r7, #28]
 8006372:	4401      	add	r1, r0
 8006374:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006378:	4313      	orrs	r3, r2
 800637a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800637c:	79fb      	ldrb	r3, [r7, #7]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d14b      	bne.n	800641a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d009      	beq.n	800639e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	4413      	add	r3, r2
 8006392:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006396:	461a      	mov	r2, r3
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	69db      	ldr	r3, [r3, #28]
 800639c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	791b      	ldrb	r3, [r3, #4]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d128      	bne.n	80063f8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d110      	bne.n	80063d8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	0151      	lsls	r1, r2, #5
 80063c8:	69fa      	ldr	r2, [r7, #28]
 80063ca:	440a      	add	r2, r1
 80063cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80063d4:	6013      	str	r3, [r2, #0]
 80063d6:	e00f      	b.n	80063f8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	4413      	add	r3, r2
 80063e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	69ba      	ldr	r2, [r7, #24]
 80063e8:	0151      	lsls	r1, r2, #5
 80063ea:	69fa      	ldr	r2, [r7, #28]
 80063ec:	440a      	add	r2, r1
 80063ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063f6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	69ba      	ldr	r2, [r7, #24]
 8006408:	0151      	lsls	r1, r2, #5
 800640a:	69fa      	ldr	r2, [r7, #28]
 800640c:	440a      	add	r2, r1
 800640e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006412:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006416:	6013      	str	r3, [r2, #0]
 8006418:	e166      	b.n	80066e8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	015a      	lsls	r2, r3, #5
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	4413      	add	r3, r2
 8006422:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	69ba      	ldr	r2, [r7, #24]
 800642a:	0151      	lsls	r1, r2, #5
 800642c:	69fa      	ldr	r2, [r7, #28]
 800642e:	440a      	add	r2, r1
 8006430:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006434:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006438:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	791b      	ldrb	r3, [r3, #4]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d015      	beq.n	800646e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	2b00      	cmp	r3, #0
 8006448:	f000 814e 	beq.w	80066e8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006452:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	f003 030f 	and.w	r3, r3, #15
 800645c:	2101      	movs	r1, #1
 800645e:	fa01 f303 	lsl.w	r3, r1, r3
 8006462:	69f9      	ldr	r1, [r7, #28]
 8006464:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006468:	4313      	orrs	r3, r2
 800646a:	634b      	str	r3, [r1, #52]	@ 0x34
 800646c:	e13c      	b.n	80066e8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800647a:	2b00      	cmp	r3, #0
 800647c:	d110      	bne.n	80064a0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	015a      	lsls	r2, r3, #5
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	4413      	add	r3, r2
 8006486:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	69ba      	ldr	r2, [r7, #24]
 800648e:	0151      	lsls	r1, r2, #5
 8006490:	69fa      	ldr	r2, [r7, #28]
 8006492:	440a      	add	r2, r1
 8006494:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006498:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800649c:	6013      	str	r3, [r2, #0]
 800649e:	e00f      	b.n	80064c0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	69ba      	ldr	r2, [r7, #24]
 80064b0:	0151      	lsls	r1, r2, #5
 80064b2:	69fa      	ldr	r2, [r7, #28]
 80064b4:	440a      	add	r2, r1
 80064b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064be:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	68d9      	ldr	r1, [r3, #12]
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	781a      	ldrb	r2, [r3, #0]
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	b298      	uxth	r0, r3
 80064ce:	79fb      	ldrb	r3, [r7, #7]
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	4603      	mov	r3, r0
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f000 f9b9 	bl	800684c <USB_WritePacket>
 80064da:	e105      	b.n	80066e8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	015a      	lsls	r2, r3, #5
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	4413      	add	r3, r2
 80064e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	0151      	lsls	r1, r2, #5
 80064ee:	69fa      	ldr	r2, [r7, #28]
 80064f0:	440a      	add	r2, r1
 80064f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064f6:	0cdb      	lsrs	r3, r3, #19
 80064f8:	04db      	lsls	r3, r3, #19
 80064fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	69ba      	ldr	r2, [r7, #24]
 800650c:	0151      	lsls	r1, r2, #5
 800650e:	69fa      	ldr	r2, [r7, #28]
 8006510:	440a      	add	r2, r1
 8006512:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006516:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800651a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800651e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d132      	bne.n	800658c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d003      	beq.n	8006536 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	689a      	ldr	r2, [r3, #8]
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	689a      	ldr	r2, [r3, #8]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	4413      	add	r3, r2
 8006546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800654a:	691a      	ldr	r2, [r3, #16]
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	6a1b      	ldr	r3, [r3, #32]
 8006550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006554:	69b9      	ldr	r1, [r7, #24]
 8006556:	0148      	lsls	r0, r1, #5
 8006558:	69f9      	ldr	r1, [r7, #28]
 800655a:	4401      	add	r1, r0
 800655c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006560:	4313      	orrs	r3, r2
 8006562:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	4413      	add	r3, r2
 800656c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	0151      	lsls	r1, r2, #5
 8006576:	69fa      	ldr	r2, [r7, #28]
 8006578:	440a      	add	r2, r1
 800657a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800657e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006582:	6113      	str	r3, [r2, #16]
 8006584:	e062      	b.n	800664c <USB_EPStartXfer+0x490>
 8006586:	bf00      	nop
 8006588:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d123      	bne.n	80065dc <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065a0:	691a      	ldr	r2, [r3, #16]
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065aa:	69b9      	ldr	r1, [r7, #24]
 80065ac:	0148      	lsls	r0, r1, #5
 80065ae:	69f9      	ldr	r1, [r7, #28]
 80065b0:	4401      	add	r1, r0
 80065b2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80065b6:	4313      	orrs	r3, r2
 80065b8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	015a      	lsls	r2, r3, #5
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	4413      	add	r3, r2
 80065c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	69ba      	ldr	r2, [r7, #24]
 80065ca:	0151      	lsls	r1, r2, #5
 80065cc:	69fa      	ldr	r2, [r7, #28]
 80065ce:	440a      	add	r2, r1
 80065d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80065d8:	6113      	str	r3, [r2, #16]
 80065da:	e037      	b.n	800664c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	691a      	ldr	r2, [r3, #16]
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	4413      	add	r3, r2
 80065e6:	1e5a      	subs	r2, r3, #1
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	8afa      	ldrh	r2, [r7, #22]
 80065f8:	fb03 f202 	mul.w	r2, r3, r2
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	4413      	add	r3, r2
 8006608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800660c:	691a      	ldr	r2, [r3, #16]
 800660e:	8afb      	ldrh	r3, [r7, #22]
 8006610:	04d9      	lsls	r1, r3, #19
 8006612:	4b38      	ldr	r3, [pc, #224]	@ (80066f4 <USB_EPStartXfer+0x538>)
 8006614:	400b      	ands	r3, r1
 8006616:	69b9      	ldr	r1, [r7, #24]
 8006618:	0148      	lsls	r0, r1, #5
 800661a:	69f9      	ldr	r1, [r7, #28]
 800661c:	4401      	add	r1, r0
 800661e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006622:	4313      	orrs	r3, r2
 8006624:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	4413      	add	r3, r2
 800662e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006632:	691a      	ldr	r2, [r3, #16]
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800663c:	69b9      	ldr	r1, [r7, #24]
 800663e:	0148      	lsls	r0, r1, #5
 8006640:	69f9      	ldr	r1, [r7, #28]
 8006642:	4401      	add	r1, r0
 8006644:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006648:	4313      	orrs	r3, r2
 800664a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800664c:	79fb      	ldrb	r3, [r7, #7]
 800664e:	2b01      	cmp	r3, #1
 8006650:	d10d      	bne.n	800666e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d009      	beq.n	800666e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	68d9      	ldr	r1, [r3, #12]
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	4413      	add	r3, r2
 8006666:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800666a:	460a      	mov	r2, r1
 800666c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	791b      	ldrb	r3, [r3, #4]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d128      	bne.n	80066c8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006682:	2b00      	cmp	r3, #0
 8006684:	d110      	bne.n	80066a8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	015a      	lsls	r2, r3, #5
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	4413      	add	r3, r2
 800668e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	69ba      	ldr	r2, [r7, #24]
 8006696:	0151      	lsls	r1, r2, #5
 8006698:	69fa      	ldr	r2, [r7, #28]
 800669a:	440a      	add	r2, r1
 800669c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80066a4:	6013      	str	r3, [r2, #0]
 80066a6:	e00f      	b.n	80066c8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	69ba      	ldr	r2, [r7, #24]
 80066b8:	0151      	lsls	r1, r2, #5
 80066ba:	69fa      	ldr	r2, [r7, #28]
 80066bc:	440a      	add	r2, r1
 80066be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066c6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	69ba      	ldr	r2, [r7, #24]
 80066d8:	0151      	lsls	r1, r2, #5
 80066da:	69fa      	ldr	r2, [r7, #28]
 80066dc:	440a      	add	r2, r1
 80066de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066e2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80066e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3720      	adds	r7, #32
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	1ff80000 	.word	0x1ff80000

080066f8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b087      	sub	sp, #28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006702:	2300      	movs	r3, #0
 8006704:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006706:	2300      	movs	r3, #0
 8006708:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	785b      	ldrb	r3, [r3, #1]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d14a      	bne.n	80067ac <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800672a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800672e:	f040 8086 	bne.w	800683e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	4413      	add	r3, r2
 800673c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	683a      	ldr	r2, [r7, #0]
 8006744:	7812      	ldrb	r2, [r2, #0]
 8006746:	0151      	lsls	r1, r2, #5
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	440a      	add	r2, r1
 800674c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006750:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006754:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	7812      	ldrb	r2, [r2, #0]
 800676a:	0151      	lsls	r1, r2, #5
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	440a      	add	r2, r1
 8006770:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006774:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006778:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	3301      	adds	r3, #1
 800677e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006786:	4293      	cmp	r3, r2
 8006788:	d902      	bls.n	8006790 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	75fb      	strb	r3, [r7, #23]
          break;
 800678e:	e056      	b.n	800683e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	4413      	add	r3, r2
 800679a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067a8:	d0e7      	beq.n	800677a <USB_EPStopXfer+0x82>
 80067aa:	e048      	b.n	800683e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	015a      	lsls	r2, r3, #5
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	4413      	add	r3, r2
 80067b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067c4:	d13b      	bne.n	800683e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	7812      	ldrb	r2, [r2, #0]
 80067da:	0151      	lsls	r1, r2, #5
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	440a      	add	r2, r1
 80067e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067e4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80067e8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	015a      	lsls	r2, r3, #5
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	4413      	add	r3, r2
 80067f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	683a      	ldr	r2, [r7, #0]
 80067fc:	7812      	ldrb	r2, [r2, #0]
 80067fe:	0151      	lsls	r1, r2, #5
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	440a      	add	r2, r1
 8006804:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006808:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800680c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	3301      	adds	r3, #1
 8006812:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f242 7210 	movw	r2, #10000	@ 0x2710
 800681a:	4293      	cmp	r3, r2
 800681c:	d902      	bls.n	8006824 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	75fb      	strb	r3, [r7, #23]
          break;
 8006822:	e00c      	b.n	800683e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	015a      	lsls	r2, r3, #5
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	4413      	add	r3, r2
 800682e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006838:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800683c:	d0e7      	beq.n	800680e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800683e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006840:	4618      	mov	r0, r3
 8006842:	371c      	adds	r7, #28
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800684c:	b480      	push	{r7}
 800684e:	b089      	sub	sp, #36	@ 0x24
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	4611      	mov	r1, r2
 8006858:	461a      	mov	r2, r3
 800685a:	460b      	mov	r3, r1
 800685c:	71fb      	strb	r3, [r7, #7]
 800685e:	4613      	mov	r3, r2
 8006860:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800686a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800686e:	2b00      	cmp	r3, #0
 8006870:	d123      	bne.n	80068ba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006872:	88bb      	ldrh	r3, [r7, #4]
 8006874:	3303      	adds	r3, #3
 8006876:	089b      	lsrs	r3, r3, #2
 8006878:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800687a:	2300      	movs	r3, #0
 800687c:	61bb      	str	r3, [r7, #24]
 800687e:	e018      	b.n	80068b2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006880:	79fb      	ldrb	r3, [r7, #7]
 8006882:	031a      	lsls	r2, r3, #12
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	4413      	add	r3, r2
 8006888:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800688c:	461a      	mov	r2, r3
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	3301      	adds	r3, #1
 8006898:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	3301      	adds	r3, #1
 800689e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	3301      	adds	r3, #1
 80068a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	3301      	adds	r3, #1
 80068aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	3301      	adds	r3, #1
 80068b0:	61bb      	str	r3, [r7, #24]
 80068b2:	69ba      	ldr	r2, [r7, #24]
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d3e2      	bcc.n	8006880 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3724      	adds	r7, #36	@ 0x24
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b08b      	sub	sp, #44	@ 0x2c
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	4613      	mov	r3, r2
 80068d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80068de:	88fb      	ldrh	r3, [r7, #6]
 80068e0:	089b      	lsrs	r3, r3, #2
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80068e6:	88fb      	ldrh	r3, [r7, #6]
 80068e8:	f003 0303 	and.w	r3, r3, #3
 80068ec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80068ee:	2300      	movs	r3, #0
 80068f0:	623b      	str	r3, [r7, #32]
 80068f2:	e014      	b.n	800691e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fe:	601a      	str	r2, [r3, #0]
    pDest++;
 8006900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006902:	3301      	adds	r3, #1
 8006904:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006908:	3301      	adds	r3, #1
 800690a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800690c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690e:	3301      	adds	r3, #1
 8006910:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006914:	3301      	adds	r3, #1
 8006916:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006918:	6a3b      	ldr	r3, [r7, #32]
 800691a:	3301      	adds	r3, #1
 800691c:	623b      	str	r3, [r7, #32]
 800691e:	6a3a      	ldr	r2, [r7, #32]
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	429a      	cmp	r2, r3
 8006924:	d3e6      	bcc.n	80068f4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006926:	8bfb      	ldrh	r3, [r7, #30]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d01e      	beq.n	800696a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006936:	461a      	mov	r2, r3
 8006938:	f107 0310 	add.w	r3, r7, #16
 800693c:	6812      	ldr	r2, [r2, #0]
 800693e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	b2db      	uxtb	r3, r3
 8006946:	00db      	lsls	r3, r3, #3
 8006948:	fa22 f303 	lsr.w	r3, r2, r3
 800694c:	b2da      	uxtb	r2, r3
 800694e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006950:	701a      	strb	r2, [r3, #0]
      i++;
 8006952:	6a3b      	ldr	r3, [r7, #32]
 8006954:	3301      	adds	r3, #1
 8006956:	623b      	str	r3, [r7, #32]
      pDest++;
 8006958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800695a:	3301      	adds	r3, #1
 800695c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800695e:	8bfb      	ldrh	r3, [r7, #30]
 8006960:	3b01      	subs	r3, #1
 8006962:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006964:	8bfb      	ldrh	r3, [r7, #30]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1ea      	bne.n	8006940 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800696a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800696c:	4618      	mov	r0, r3
 800696e:	372c      	adds	r7, #44	@ 0x2c
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	785b      	ldrb	r3, [r3, #1]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d12c      	bne.n	80069ee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	015a      	lsls	r2, r3, #5
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	4413      	add	r3, r2
 800699c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	db12      	blt.n	80069cc <USB_EPSetStall+0x54>
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00f      	beq.n	80069cc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	015a      	lsls	r2, r3, #5
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	4413      	add	r3, r2
 80069b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	0151      	lsls	r1, r2, #5
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	440a      	add	r2, r1
 80069c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80069ca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	015a      	lsls	r2, r3, #5
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	4413      	add	r3, r2
 80069d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	0151      	lsls	r1, r2, #5
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	440a      	add	r2, r1
 80069e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80069ea:	6013      	str	r3, [r2, #0]
 80069ec:	e02b      	b.n	8006a46 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	015a      	lsls	r2, r3, #5
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	4413      	add	r3, r2
 80069f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	db12      	blt.n	8006a26 <USB_EPSetStall+0xae>
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00f      	beq.n	8006a26 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	015a      	lsls	r2, r3, #5
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68ba      	ldr	r2, [r7, #8]
 8006a16:	0151      	lsls	r1, r2, #5
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	440a      	add	r2, r1
 8006a1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a20:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006a24:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	015a      	lsls	r2, r3, #5
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	0151      	lsls	r1, r2, #5
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	440a      	add	r2, r1
 8006a3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a40:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006a44:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3714      	adds	r7, #20
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	785b      	ldrb	r3, [r3, #1]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d128      	bne.n	8006ac2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	015a      	lsls	r2, r3, #5
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	4413      	add	r3, r2
 8006a78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	0151      	lsls	r1, r2, #5
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	440a      	add	r2, r1
 8006a86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a8a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a8e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	791b      	ldrb	r3, [r3, #4]
 8006a94:	2b03      	cmp	r3, #3
 8006a96:	d003      	beq.n	8006aa0 <USB_EPClearStall+0x4c>
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	791b      	ldrb	r3, [r3, #4]
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d138      	bne.n	8006b12 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	015a      	lsls	r2, r3, #5
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	0151      	lsls	r1, r2, #5
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	440a      	add	r2, r1
 8006ab6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006aba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006abe:	6013      	str	r3, [r2, #0]
 8006ac0:	e027      	b.n	8006b12 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	015a      	lsls	r2, r3, #5
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	4413      	add	r3, r2
 8006aca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	0151      	lsls	r1, r2, #5
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	440a      	add	r2, r1
 8006ad8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006adc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006ae0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	791b      	ldrb	r3, [r3, #4]
 8006ae6:	2b03      	cmp	r3, #3
 8006ae8:	d003      	beq.n	8006af2 <USB_EPClearStall+0x9e>
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	791b      	ldrb	r3, [r3, #4]
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d10f      	bne.n	8006b12 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	015a      	lsls	r2, r3, #5
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	4413      	add	r3, r2
 8006afa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	0151      	lsls	r1, r2, #5
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	440a      	add	r2, r1
 8006b08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b10:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3714      	adds	r7, #20
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	460b      	mov	r3, r1
 8006b2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b3e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006b42:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	78fb      	ldrb	r3, [r7, #3]
 8006b4e:	011b      	lsls	r3, r3, #4
 8006b50:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006b54:	68f9      	ldr	r1, [r7, #12]
 8006b56:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3714      	adds	r7, #20
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006b86:	f023 0303 	bic.w	r3, r3, #3
 8006b8a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b9a:	f023 0302 	bic.w	r3, r3, #2
 8006b9e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3714      	adds	r7, #20
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b085      	sub	sp, #20
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006bc8:	f023 0303 	bic.w	r3, r3, #3
 8006bcc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006bdc:	f043 0302 	orr.w	r3, r3, #2
 8006be0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3714      	adds	r7, #20
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	4013      	ands	r3, r2
 8006c06:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006c08:	68fb      	ldr	r3, [r7, #12]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3714      	adds	r7, #20
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c16:	b480      	push	{r7}
 8006c18:	b085      	sub	sp, #20
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c32:	69db      	ldr	r3, [r3, #28]
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	4013      	ands	r3, r2
 8006c38:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	0c1b      	lsrs	r3, r3, #16
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b085      	sub	sp, #20
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c66:	69db      	ldr	r3, [r3, #28]
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	b29b      	uxth	r3, r3
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3714      	adds	r7, #20
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr

08006c7e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b085      	sub	sp, #20
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
 8006c86:	460b      	mov	r3, r1
 8006c88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006c8e:	78fb      	ldrb	r3, [r7, #3]
 8006c90:	015a      	lsls	r2, r3, #5
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	4013      	ands	r3, r2
 8006caa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006cac:	68bb      	ldr	r3, [r7, #8]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3714      	adds	r7, #20
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	b087      	sub	sp, #28
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cdc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006cde:	78fb      	ldrb	r3, [r7, #3]
 8006ce0:	f003 030f 	and.w	r3, r3, #15
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8006cea:	01db      	lsls	r3, r3, #7
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	693a      	ldr	r2, [r7, #16]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006cf4:	78fb      	ldrb	r3, [r7, #3]
 8006cf6:	015a      	lsls	r2, r3, #5
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	4013      	ands	r3, r2
 8006d06:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d08:	68bb      	ldr	r3, [r7, #8]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	371c      	adds	r7, #28
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b083      	sub	sp, #12
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	695b      	ldr	r3, [r3, #20]
 8006d22:	f003 0301 	and.w	r3, r3, #1
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d32:	b480      	push	{r7}
 8006d34:	b085      	sub	sp, #20
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d4c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006d50:	f023 0307 	bic.w	r3, r3, #7
 8006d54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3714      	adds	r7, #20
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b087      	sub	sp, #28
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	460b      	mov	r3, r1
 8006d82:	607a      	str	r2, [r7, #4]
 8006d84:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	333c      	adds	r3, #60	@ 0x3c
 8006d8e:	3304      	adds	r3, #4
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	4a26      	ldr	r2, [pc, #152]	@ (8006e30 <USB_EP0_OutStart+0xb8>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d90a      	bls.n	8006db2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006da8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006dac:	d101      	bne.n	8006db2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006dae:	2300      	movs	r3, #0
 8006db0:	e037      	b.n	8006e22 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006db8:	461a      	mov	r2, r3
 8006dba:	2300      	movs	r3, #0
 8006dbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dcc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006dd0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006de0:	f043 0318 	orr.w	r3, r3, #24
 8006de4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006df4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006df8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006dfa:	7afb      	ldrb	r3, [r7, #11]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d10f      	bne.n	8006e20 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e06:	461a      	mov	r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e1a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006e1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	371c      	adds	r7, #28
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	4f54300a 	.word	0x4f54300a

08006e34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	3301      	adds	r3, #1
 8006e44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e4c:	d901      	bls.n	8006e52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e022      	b.n	8006e98 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	daf2      	bge.n	8006e40 <USB_CoreReset+0xc>

  count = 10U;
 8006e5a:	230a      	movs	r3, #10
 8006e5c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006e5e:	e002      	b.n	8006e66 <USB_CoreReset+0x32>
  {
    count--;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	3b01      	subs	r3, #1
 8006e64:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1f9      	bne.n	8006e60 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	f043 0201 	orr.w	r2, r3, #1
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e84:	d901      	bls.n	8006e8a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e006      	b.n	8006e98 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d0f0      	beq.n	8006e78 <USB_CoreReset+0x44>

  return HAL_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	460b      	mov	r3, r1
 8006eae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006eb0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006eb4:	f004 f81c 	bl	800aef0 <USBD_static_malloc>
 8006eb8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d109      	bne.n	8006ed4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	32b0      	adds	r2, #176	@ 0xb0
 8006eca:	2100      	movs	r1, #0
 8006ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	e0d4      	b.n	800707e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006ed4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006ed8:	2100      	movs	r1, #0
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f004 fddd 	bl	800ba9a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	32b0      	adds	r2, #176	@ 0xb0
 8006eea:	68f9      	ldr	r1, [r7, #12]
 8006eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	32b0      	adds	r2, #176	@ 0xb0
 8006efa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	7c1b      	ldrb	r3, [r3, #16]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d138      	bne.n	8006f7e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006f0c:	4b5e      	ldr	r3, [pc, #376]	@ (8007088 <USBD_CDC_Init+0x1e4>)
 8006f0e:	7819      	ldrb	r1, [r3, #0]
 8006f10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f14:	2202      	movs	r2, #2
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f003 fec7 	bl	800acaa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006f1c:	4b5a      	ldr	r3, [pc, #360]	@ (8007088 <USBD_CDC_Init+0x1e4>)
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	f003 020f 	and.w	r2, r3, #15
 8006f24:	6879      	ldr	r1, [r7, #4]
 8006f26:	4613      	mov	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	440b      	add	r3, r1
 8006f30:	3323      	adds	r3, #35	@ 0x23
 8006f32:	2201      	movs	r2, #1
 8006f34:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006f36:	4b55      	ldr	r3, [pc, #340]	@ (800708c <USBD_CDC_Init+0x1e8>)
 8006f38:	7819      	ldrb	r1, [r3, #0]
 8006f3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f3e:	2202      	movs	r2, #2
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f003 feb2 	bl	800acaa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006f46:	4b51      	ldr	r3, [pc, #324]	@ (800708c <USBD_CDC_Init+0x1e8>)
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	f003 020f 	and.w	r2, r3, #15
 8006f4e:	6879      	ldr	r1, [r7, #4]
 8006f50:	4613      	mov	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	440b      	add	r3, r1
 8006f5a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006f5e:	2201      	movs	r2, #1
 8006f60:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006f62:	4b4b      	ldr	r3, [pc, #300]	@ (8007090 <USBD_CDC_Init+0x1ec>)
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	f003 020f 	and.w	r2, r3, #15
 8006f6a:	6879      	ldr	r1, [r7, #4]
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	4413      	add	r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	440b      	add	r3, r1
 8006f76:	331c      	adds	r3, #28
 8006f78:	2210      	movs	r2, #16
 8006f7a:	601a      	str	r2, [r3, #0]
 8006f7c:	e035      	b.n	8006fea <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006f7e:	4b42      	ldr	r3, [pc, #264]	@ (8007088 <USBD_CDC_Init+0x1e4>)
 8006f80:	7819      	ldrb	r1, [r3, #0]
 8006f82:	2340      	movs	r3, #64	@ 0x40
 8006f84:	2202      	movs	r2, #2
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f003 fe8f 	bl	800acaa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006f8c:	4b3e      	ldr	r3, [pc, #248]	@ (8007088 <USBD_CDC_Init+0x1e4>)
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	f003 020f 	and.w	r2, r3, #15
 8006f94:	6879      	ldr	r1, [r7, #4]
 8006f96:	4613      	mov	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4413      	add	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	440b      	add	r3, r1
 8006fa0:	3323      	adds	r3, #35	@ 0x23
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006fa6:	4b39      	ldr	r3, [pc, #228]	@ (800708c <USBD_CDC_Init+0x1e8>)
 8006fa8:	7819      	ldrb	r1, [r3, #0]
 8006faa:	2340      	movs	r3, #64	@ 0x40
 8006fac:	2202      	movs	r2, #2
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f003 fe7b 	bl	800acaa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006fb4:	4b35      	ldr	r3, [pc, #212]	@ (800708c <USBD_CDC_Init+0x1e8>)
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	f003 020f 	and.w	r2, r3, #15
 8006fbc:	6879      	ldr	r1, [r7, #4]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	440b      	add	r3, r1
 8006fc8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006fcc:	2201      	movs	r2, #1
 8006fce:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006fd0:	4b2f      	ldr	r3, [pc, #188]	@ (8007090 <USBD_CDC_Init+0x1ec>)
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	f003 020f 	and.w	r2, r3, #15
 8006fd8:	6879      	ldr	r1, [r7, #4]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4413      	add	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	440b      	add	r3, r1
 8006fe4:	331c      	adds	r3, #28
 8006fe6:	2210      	movs	r2, #16
 8006fe8:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006fea:	4b29      	ldr	r3, [pc, #164]	@ (8007090 <USBD_CDC_Init+0x1ec>)
 8006fec:	7819      	ldrb	r1, [r3, #0]
 8006fee:	2308      	movs	r3, #8
 8006ff0:	2203      	movs	r2, #3
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f003 fe59 	bl	800acaa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006ff8:	4b25      	ldr	r3, [pc, #148]	@ (8007090 <USBD_CDC_Init+0x1ec>)
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	f003 020f 	and.w	r2, r3, #15
 8007000:	6879      	ldr	r1, [r7, #4]
 8007002:	4613      	mov	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	440b      	add	r3, r1
 800700c:	3323      	adds	r3, #35	@ 0x23
 800700e:	2201      	movs	r2, #1
 8007010:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	33b0      	adds	r3, #176	@ 0xb0
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2200      	movs	r2, #0
 8007032:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007044:	2b00      	cmp	r3, #0
 8007046:	d101      	bne.n	800704c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007048:	2302      	movs	r3, #2
 800704a:	e018      	b.n	800707e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	7c1b      	ldrb	r3, [r3, #16]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10a      	bne.n	800706a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007054:	4b0d      	ldr	r3, [pc, #52]	@ (800708c <USBD_CDC_Init+0x1e8>)
 8007056:	7819      	ldrb	r1, [r3, #0]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800705e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f003 ff10 	bl	800ae88 <USBD_LL_PrepareReceive>
 8007068:	e008      	b.n	800707c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800706a:	4b08      	ldr	r3, [pc, #32]	@ (800708c <USBD_CDC_Init+0x1e8>)
 800706c:	7819      	ldrb	r1, [r3, #0]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007074:	2340      	movs	r3, #64	@ 0x40
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f003 ff06 	bl	800ae88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	20000123 	.word	0x20000123
 800708c:	20000124 	.word	0x20000124
 8007090:	20000125 	.word	0x20000125

08007094 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	460b      	mov	r3, r1
 800709e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80070a0:	4b3a      	ldr	r3, [pc, #232]	@ (800718c <USBD_CDC_DeInit+0xf8>)
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	4619      	mov	r1, r3
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f003 fe25 	bl	800acf6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80070ac:	4b37      	ldr	r3, [pc, #220]	@ (800718c <USBD_CDC_DeInit+0xf8>)
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	f003 020f 	and.w	r2, r3, #15
 80070b4:	6879      	ldr	r1, [r7, #4]
 80070b6:	4613      	mov	r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4413      	add	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	440b      	add	r3, r1
 80070c0:	3323      	adds	r3, #35	@ 0x23
 80070c2:	2200      	movs	r2, #0
 80070c4:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80070c6:	4b32      	ldr	r3, [pc, #200]	@ (8007190 <USBD_CDC_DeInit+0xfc>)
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	4619      	mov	r1, r3
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f003 fe12 	bl	800acf6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80070d2:	4b2f      	ldr	r3, [pc, #188]	@ (8007190 <USBD_CDC_DeInit+0xfc>)
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	f003 020f 	and.w	r2, r3, #15
 80070da:	6879      	ldr	r1, [r7, #4]
 80070dc:	4613      	mov	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	440b      	add	r3, r1
 80070e6:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80070ea:	2200      	movs	r2, #0
 80070ec:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80070ee:	4b29      	ldr	r3, [pc, #164]	@ (8007194 <USBD_CDC_DeInit+0x100>)
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	4619      	mov	r1, r3
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f003 fdfe 	bl	800acf6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80070fa:	4b26      	ldr	r3, [pc, #152]	@ (8007194 <USBD_CDC_DeInit+0x100>)
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	f003 020f 	and.w	r2, r3, #15
 8007102:	6879      	ldr	r1, [r7, #4]
 8007104:	4613      	mov	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4413      	add	r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	440b      	add	r3, r1
 800710e:	3323      	adds	r3, #35	@ 0x23
 8007110:	2200      	movs	r2, #0
 8007112:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007114:	4b1f      	ldr	r3, [pc, #124]	@ (8007194 <USBD_CDC_DeInit+0x100>)
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	f003 020f 	and.w	r2, r3, #15
 800711c:	6879      	ldr	r1, [r7, #4]
 800711e:	4613      	mov	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	4413      	add	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	440b      	add	r3, r1
 8007128:	331c      	adds	r3, #28
 800712a:	2200      	movs	r2, #0
 800712c:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	32b0      	adds	r2, #176	@ 0xb0
 8007138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d01f      	beq.n	8007180 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	33b0      	adds	r3, #176	@ 0xb0
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	4413      	add	r3, r2
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	32b0      	adds	r2, #176	@ 0xb0
 800715e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007162:	4618      	mov	r0, r3
 8007164:	f003 fed2 	bl	800af0c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	32b0      	adds	r2, #176	@ 0xb0
 8007172:	2100      	movs	r1, #0
 8007174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	20000123 	.word	0x20000123
 8007190:	20000124 	.word	0x20000124
 8007194:	20000125 	.word	0x20000125

08007198 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	32b0      	adds	r2, #176	@ 0xb0
 80071ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80071b2:	2300      	movs	r3, #0
 80071b4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80071b6:	2300      	movs	r3, #0
 80071b8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80071ba:	2300      	movs	r3, #0
 80071bc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d101      	bne.n	80071c8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e0bf      	b.n	8007348 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d050      	beq.n	8007276 <USBD_CDC_Setup+0xde>
 80071d4:	2b20      	cmp	r3, #32
 80071d6:	f040 80af 	bne.w	8007338 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	88db      	ldrh	r3, [r3, #6]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d03a      	beq.n	8007258 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	b25b      	sxtb	r3, r3
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	da1b      	bge.n	8007224 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	33b0      	adds	r3, #176	@ 0xb0
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	4413      	add	r3, r2
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007202:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007204:	683a      	ldr	r2, [r7, #0]
 8007206:	88d2      	ldrh	r2, [r2, #6]
 8007208:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	88db      	ldrh	r3, [r3, #6]
 800720e:	2b07      	cmp	r3, #7
 8007210:	bf28      	it	cs
 8007212:	2307      	movcs	r3, #7
 8007214:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	89fa      	ldrh	r2, [r7, #14]
 800721a:	4619      	mov	r1, r3
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f001 fda9 	bl	8008d74 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007222:	e090      	b.n	8007346 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	785a      	ldrb	r2, [r3, #1]
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	88db      	ldrh	r3, [r3, #6]
 8007232:	2b3f      	cmp	r3, #63	@ 0x3f
 8007234:	d803      	bhi.n	800723e <USBD_CDC_Setup+0xa6>
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	88db      	ldrh	r3, [r3, #6]
 800723a:	b2da      	uxtb	r2, r3
 800723c:	e000      	b.n	8007240 <USBD_CDC_Setup+0xa8>
 800723e:	2240      	movs	r2, #64	@ 0x40
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007246:	6939      	ldr	r1, [r7, #16]
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800724e:	461a      	mov	r2, r3
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f001 fdbe 	bl	8008dd2 <USBD_CtlPrepareRx>
      break;
 8007256:	e076      	b.n	8007346 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	33b0      	adds	r3, #176	@ 0xb0
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4413      	add	r3, r2
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	683a      	ldr	r2, [r7, #0]
 800726c:	7850      	ldrb	r0, [r2, #1]
 800726e:	2200      	movs	r2, #0
 8007270:	6839      	ldr	r1, [r7, #0]
 8007272:	4798      	blx	r3
      break;
 8007274:	e067      	b.n	8007346 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	785b      	ldrb	r3, [r3, #1]
 800727a:	2b0b      	cmp	r3, #11
 800727c:	d851      	bhi.n	8007322 <USBD_CDC_Setup+0x18a>
 800727e:	a201      	add	r2, pc, #4	@ (adr r2, 8007284 <USBD_CDC_Setup+0xec>)
 8007280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007284:	080072b5 	.word	0x080072b5
 8007288:	08007331 	.word	0x08007331
 800728c:	08007323 	.word	0x08007323
 8007290:	08007323 	.word	0x08007323
 8007294:	08007323 	.word	0x08007323
 8007298:	08007323 	.word	0x08007323
 800729c:	08007323 	.word	0x08007323
 80072a0:	08007323 	.word	0x08007323
 80072a4:	08007323 	.word	0x08007323
 80072a8:	08007323 	.word	0x08007323
 80072ac:	080072df 	.word	0x080072df
 80072b0:	08007309 	.word	0x08007309
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	2b03      	cmp	r3, #3
 80072be:	d107      	bne.n	80072d0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80072c0:	f107 030a 	add.w	r3, r7, #10
 80072c4:	2202      	movs	r2, #2
 80072c6:	4619      	mov	r1, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f001 fd53 	bl	8008d74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80072ce:	e032      	b.n	8007336 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f001 fcd1 	bl	8008c7a <USBD_CtlError>
            ret = USBD_FAIL;
 80072d8:	2303      	movs	r3, #3
 80072da:	75fb      	strb	r3, [r7, #23]
          break;
 80072dc:	e02b      	b.n	8007336 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b03      	cmp	r3, #3
 80072e8:	d107      	bne.n	80072fa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80072ea:	f107 030d 	add.w	r3, r7, #13
 80072ee:	2201      	movs	r2, #1
 80072f0:	4619      	mov	r1, r3
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f001 fd3e 	bl	8008d74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80072f8:	e01d      	b.n	8007336 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80072fa:	6839      	ldr	r1, [r7, #0]
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f001 fcbc 	bl	8008c7a <USBD_CtlError>
            ret = USBD_FAIL;
 8007302:	2303      	movs	r3, #3
 8007304:	75fb      	strb	r3, [r7, #23]
          break;
 8007306:	e016      	b.n	8007336 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800730e:	b2db      	uxtb	r3, r3
 8007310:	2b03      	cmp	r3, #3
 8007312:	d00f      	beq.n	8007334 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007314:	6839      	ldr	r1, [r7, #0]
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f001 fcaf 	bl	8008c7a <USBD_CtlError>
            ret = USBD_FAIL;
 800731c:	2303      	movs	r3, #3
 800731e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007320:	e008      	b.n	8007334 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f001 fca8 	bl	8008c7a <USBD_CtlError>
          ret = USBD_FAIL;
 800732a:	2303      	movs	r3, #3
 800732c:	75fb      	strb	r3, [r7, #23]
          break;
 800732e:	e002      	b.n	8007336 <USBD_CDC_Setup+0x19e>
          break;
 8007330:	bf00      	nop
 8007332:	e008      	b.n	8007346 <USBD_CDC_Setup+0x1ae>
          break;
 8007334:	bf00      	nop
      }
      break;
 8007336:	e006      	b.n	8007346 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007338:	6839      	ldr	r1, [r7, #0]
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f001 fc9d 	bl	8008c7a <USBD_CtlError>
      ret = USBD_FAIL;
 8007340:	2303      	movs	r3, #3
 8007342:	75fb      	strb	r3, [r7, #23]
      break;
 8007344:	bf00      	nop
  }

  return (uint8_t)ret;
 8007346:	7dfb      	ldrb	r3, [r7, #23]
}
 8007348:	4618      	mov	r0, r3
 800734a:	3718      	adds	r7, #24
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	460b      	mov	r3, r1
 800735a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007362:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	32b0      	adds	r2, #176	@ 0xb0
 800736e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d101      	bne.n	800737a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007376:	2303      	movs	r3, #3
 8007378:	e065      	b.n	8007446 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	32b0      	adds	r2, #176	@ 0xb0
 8007384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007388:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800738a:	78fb      	ldrb	r3, [r7, #3]
 800738c:	f003 020f 	and.w	r2, r3, #15
 8007390:	6879      	ldr	r1, [r7, #4]
 8007392:	4613      	mov	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4413      	add	r3, r2
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	440b      	add	r3, r1
 800739c:	3314      	adds	r3, #20
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d02f      	beq.n	8007404 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80073a4:	78fb      	ldrb	r3, [r7, #3]
 80073a6:	f003 020f 	and.w	r2, r3, #15
 80073aa:	6879      	ldr	r1, [r7, #4]
 80073ac:	4613      	mov	r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4413      	add	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	440b      	add	r3, r1
 80073b6:	3314      	adds	r3, #20
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	78fb      	ldrb	r3, [r7, #3]
 80073bc:	f003 010f 	and.w	r1, r3, #15
 80073c0:	68f8      	ldr	r0, [r7, #12]
 80073c2:	460b      	mov	r3, r1
 80073c4:	00db      	lsls	r3, r3, #3
 80073c6:	440b      	add	r3, r1
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	4403      	add	r3, r0
 80073cc:	331c      	adds	r3, #28
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	fbb2 f1f3 	udiv	r1, r2, r3
 80073d4:	fb01 f303 	mul.w	r3, r1, r3
 80073d8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d112      	bne.n	8007404 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80073de:	78fb      	ldrb	r3, [r7, #3]
 80073e0:	f003 020f 	and.w	r2, r3, #15
 80073e4:	6879      	ldr	r1, [r7, #4]
 80073e6:	4613      	mov	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	440b      	add	r3, r1
 80073f0:	3314      	adds	r3, #20
 80073f2:	2200      	movs	r2, #0
 80073f4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80073f6:	78f9      	ldrb	r1, [r7, #3]
 80073f8:	2300      	movs	r3, #0
 80073fa:	2200      	movs	r2, #0
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f003 fd22 	bl	800ae46 <USBD_LL_Transmit>
 8007402:	e01f      	b.n	8007444 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	2200      	movs	r2, #0
 8007408:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	33b0      	adds	r3, #176	@ 0xb0
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d010      	beq.n	8007444 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	33b0      	adds	r3, #176	@ 0xb0
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4413      	add	r3, r2
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800743a:	68ba      	ldr	r2, [r7, #8]
 800743c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007440:	78fa      	ldrb	r2, [r7, #3]
 8007442:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b084      	sub	sp, #16
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
 8007456:	460b      	mov	r3, r1
 8007458:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	32b0      	adds	r2, #176	@ 0xb0
 8007464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007468:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	32b0      	adds	r2, #176	@ 0xb0
 8007474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d101      	bne.n	8007480 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800747c:	2303      	movs	r3, #3
 800747e:	e01a      	b.n	80074b6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007480:	78fb      	ldrb	r3, [r7, #3]
 8007482:	4619      	mov	r1, r3
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f003 fd20 	bl	800aeca <USBD_LL_GetRxDataSize>
 800748a:	4602      	mov	r2, r0
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	33b0      	adds	r3, #176	@ 0xb0
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80074b0:	4611      	mov	r1, r2
 80074b2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b084      	sub	sp, #16
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	32b0      	adds	r2, #176	@ 0xb0
 80074d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d101      	bne.n	80074e0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80074dc:	2303      	movs	r3, #3
 80074de:	e024      	b.n	800752a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	33b0      	adds	r3, #176	@ 0xb0
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d019      	beq.n	8007528 <USBD_CDC_EP0_RxReady+0x6a>
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80074fa:	2bff      	cmp	r3, #255	@ 0xff
 80074fc:	d014      	beq.n	8007528 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	33b0      	adds	r3, #176	@ 0xb0
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007516:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800751e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	22ff      	movs	r2, #255	@ 0xff
 8007524:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
	...

08007534 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800753c:	2182      	movs	r1, #130	@ 0x82
 800753e:	4818      	ldr	r0, [pc, #96]	@ (80075a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007540:	f000 fd62 	bl	8008008 <USBD_GetEpDesc>
 8007544:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007546:	2101      	movs	r1, #1
 8007548:	4815      	ldr	r0, [pc, #84]	@ (80075a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800754a:	f000 fd5d 	bl	8008008 <USBD_GetEpDesc>
 800754e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007550:	2181      	movs	r1, #129	@ 0x81
 8007552:	4813      	ldr	r0, [pc, #76]	@ (80075a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007554:	f000 fd58 	bl	8008008 <USBD_GetEpDesc>
 8007558:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d002      	beq.n	8007566 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	2210      	movs	r2, #16
 8007564:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d006      	beq.n	800757a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	2200      	movs	r2, #0
 8007570:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007574:	711a      	strb	r2, [r3, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d006      	beq.n	800758e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007588:	711a      	strb	r2, [r3, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2243      	movs	r2, #67	@ 0x43
 8007592:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007594:	4b02      	ldr	r3, [pc, #8]	@ (80075a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007596:	4618      	mov	r0, r3
 8007598:	3718      	adds	r7, #24
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	200000e0 	.word	0x200000e0

080075a4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80075ac:	2182      	movs	r1, #130	@ 0x82
 80075ae:	4818      	ldr	r0, [pc, #96]	@ (8007610 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80075b0:	f000 fd2a 	bl	8008008 <USBD_GetEpDesc>
 80075b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80075b6:	2101      	movs	r1, #1
 80075b8:	4815      	ldr	r0, [pc, #84]	@ (8007610 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80075ba:	f000 fd25 	bl	8008008 <USBD_GetEpDesc>
 80075be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80075c0:	2181      	movs	r1, #129	@ 0x81
 80075c2:	4813      	ldr	r0, [pc, #76]	@ (8007610 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80075c4:	f000 fd20 	bl	8008008 <USBD_GetEpDesc>
 80075c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d002      	beq.n	80075d6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	2210      	movs	r2, #16
 80075d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d006      	beq.n	80075ea <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	2200      	movs	r2, #0
 80075e0:	711a      	strb	r2, [r3, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f042 0202 	orr.w	r2, r2, #2
 80075e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d006      	beq.n	80075fe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	711a      	strb	r2, [r3, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f042 0202 	orr.w	r2, r2, #2
 80075fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2243      	movs	r2, #67	@ 0x43
 8007602:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007604:	4b02      	ldr	r3, [pc, #8]	@ (8007610 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007606:	4618      	mov	r0, r3
 8007608:	3718      	adds	r7, #24
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	200000e0 	.word	0x200000e0

08007614 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800761c:	2182      	movs	r1, #130	@ 0x82
 800761e:	4818      	ldr	r0, [pc, #96]	@ (8007680 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007620:	f000 fcf2 	bl	8008008 <USBD_GetEpDesc>
 8007624:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007626:	2101      	movs	r1, #1
 8007628:	4815      	ldr	r0, [pc, #84]	@ (8007680 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800762a:	f000 fced 	bl	8008008 <USBD_GetEpDesc>
 800762e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007630:	2181      	movs	r1, #129	@ 0x81
 8007632:	4813      	ldr	r0, [pc, #76]	@ (8007680 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007634:	f000 fce8 	bl	8008008 <USBD_GetEpDesc>
 8007638:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d002      	beq.n	8007646 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	2210      	movs	r2, #16
 8007644:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d006      	beq.n	800765a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	2200      	movs	r2, #0
 8007650:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007654:	711a      	strb	r2, [r3, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d006      	beq.n	800766e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007668:	711a      	strb	r2, [r3, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2243      	movs	r2, #67	@ 0x43
 8007672:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007674:	4b02      	ldr	r3, [pc, #8]	@ (8007680 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007676:	4618      	mov	r0, r3
 8007678:	3718      	adds	r7, #24
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	200000e0 	.word	0x200000e0

08007684 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	220a      	movs	r2, #10
 8007690:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007692:	4b03      	ldr	r3, [pc, #12]	@ (80076a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007694:	4618      	mov	r0, r3
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr
 80076a0:	2000009c 	.word	0x2000009c

080076a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d101      	bne.n	80076b8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80076b4:	2303      	movs	r3, #3
 80076b6:	e009      	b.n	80076cc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	33b0      	adds	r3, #176	@ 0xb0
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80076d8:	b480      	push	{r7}
 80076da:	b087      	sub	sp, #28
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	32b0      	adds	r2, #176	@ 0xb0
 80076ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e008      	b.n	8007710 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	371c      	adds	r7, #28
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	32b0      	adds	r2, #176	@ 0xb0
 8007730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007734:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d101      	bne.n	8007740 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800773c:	2303      	movs	r3, #3
 800773e:	e004      	b.n	800774a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	683a      	ldr	r2, [r7, #0]
 8007744:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3714      	adds	r7, #20
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
	...

08007758 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	32b0      	adds	r2, #176	@ 0xb0
 800776a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800776e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007770:	2301      	movs	r3, #1
 8007772:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d101      	bne.n	800777e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800777a:	2303      	movs	r3, #3
 800777c:	e025      	b.n	80077ca <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007784:	2b00      	cmp	r3, #0
 8007786:	d11f      	bne.n	80077c8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	2201      	movs	r2, #1
 800778c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007790:	4b10      	ldr	r3, [pc, #64]	@ (80077d4 <USBD_CDC_TransmitPacket+0x7c>)
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	f003 020f 	and.w	r2, r3, #15
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	4613      	mov	r3, r2
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	4413      	add	r3, r2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	4403      	add	r3, r0
 80077aa:	3314      	adds	r3, #20
 80077ac:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80077ae:	4b09      	ldr	r3, [pc, #36]	@ (80077d4 <USBD_CDC_TransmitPacket+0x7c>)
 80077b0:	7819      	ldrb	r1, [r3, #0]
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f003 fb41 	bl	800ae46 <USBD_LL_Transmit>

    ret = USBD_OK;
 80077c4:	2300      	movs	r3, #0
 80077c6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	20000123 	.word	0x20000123

080077d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	32b0      	adds	r2, #176	@ 0xb0
 80077ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ee:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	32b0      	adds	r2, #176	@ 0xb0
 80077fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d101      	bne.n	8007806 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007802:	2303      	movs	r3, #3
 8007804:	e018      	b.n	8007838 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	7c1b      	ldrb	r3, [r3, #16]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d10a      	bne.n	8007824 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800780e:	4b0c      	ldr	r3, [pc, #48]	@ (8007840 <USBD_CDC_ReceivePacket+0x68>)
 8007810:	7819      	ldrb	r1, [r3, #0]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007818:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f003 fb33 	bl	800ae88 <USBD_LL_PrepareReceive>
 8007822:	e008      	b.n	8007836 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007824:	4b06      	ldr	r3, [pc, #24]	@ (8007840 <USBD_CDC_ReceivePacket+0x68>)
 8007826:	7819      	ldrb	r1, [r3, #0]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800782e:	2340      	movs	r3, #64	@ 0x40
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f003 fb29 	bl	800ae88 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	20000124 	.word	0x20000124

08007844 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b086      	sub	sp, #24
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	4613      	mov	r3, r2
 8007850:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d101      	bne.n	800785c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007858:	2303      	movs	r3, #3
 800785a:	e01f      	b.n	800789c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2200      	movs	r2, #0
 8007860:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d003      	beq.n	8007882 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	68ba      	ldr	r2, [r7, #8]
 800787e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2201      	movs	r2, #1
 8007886:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	79fa      	ldrb	r2, [r7, #7]
 800788e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f003 f9a3 	bl	800abdc <USBD_LL_Init>
 8007896:	4603      	mov	r3, r0
 8007898:	75fb      	strb	r3, [r7, #23]

  return ret;
 800789a:	7dfb      	ldrb	r3, [r7, #23]
}
 800789c:	4618      	mov	r0, r3
 800789e:	3718      	adds	r7, #24
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078ae:	2300      	movs	r3, #0
 80078b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d101      	bne.n	80078bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80078b8:	2303      	movs	r3, #3
 80078ba:	e025      	b.n	8007908 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	32ae      	adds	r2, #174	@ 0xae
 80078ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00f      	beq.n	80078f8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	32ae      	adds	r2, #174	@ 0xae
 80078e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e8:	f107 020e 	add.w	r2, r7, #14
 80078ec:	4610      	mov	r0, r2
 80078ee:	4798      	blx	r3
 80078f0:	4602      	mov	r2, r0
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80078fe:	1c5a      	adds	r2, r3, #1
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f003 f9ab 	bl	800ac74 <USBD_LL_Start>
 800791e:	4603      	mov	r3, r0
}
 8007920:	4618      	mov	r0, r3
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007930:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007932:	4618      	mov	r0, r3
 8007934:	370c      	adds	r7, #12
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b084      	sub	sp, #16
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	460b      	mov	r3, r1
 8007948:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800794a:	2300      	movs	r3, #0
 800794c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007954:	2b00      	cmp	r3, #0
 8007956:	d009      	beq.n	800796c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	78fa      	ldrb	r2, [r7, #3]
 8007962:	4611      	mov	r1, r2
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	4798      	blx	r3
 8007968:	4603      	mov	r3, r0
 800796a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800796c:	7bfb      	ldrb	r3, [r7, #15]
}
 800796e:	4618      	mov	r0, r3
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b084      	sub	sp, #16
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
 800797e:	460b      	mov	r3, r1
 8007980:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007982:	2300      	movs	r3, #0
 8007984:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	78fa      	ldrb	r2, [r7, #3]
 8007990:	4611      	mov	r1, r2
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	4798      	blx	r3
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d001      	beq.n	80079a0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800799c:	2303      	movs	r3, #3
 800799e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80079a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b084      	sub	sp, #16
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
 80079b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80079ba:	6839      	ldr	r1, [r7, #0]
 80079bc:	4618      	mov	r0, r3
 80079be:	f001 f922 	bl	8008c06 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80079d0:	461a      	mov	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80079de:	f003 031f 	and.w	r3, r3, #31
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d01a      	beq.n	8007a1c <USBD_LL_SetupStage+0x72>
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	d822      	bhi.n	8007a30 <USBD_LL_SetupStage+0x86>
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d002      	beq.n	80079f4 <USBD_LL_SetupStage+0x4a>
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d00a      	beq.n	8007a08 <USBD_LL_SetupStage+0x5e>
 80079f2:	e01d      	b.n	8007a30 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80079fa:	4619      	mov	r1, r3
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fb77 	bl	80080f0 <USBD_StdDevReq>
 8007a02:	4603      	mov	r3, r0
 8007a04:	73fb      	strb	r3, [r7, #15]
      break;
 8007a06:	e020      	b.n	8007a4a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fbdf 	bl	80081d4 <USBD_StdItfReq>
 8007a16:	4603      	mov	r3, r0
 8007a18:	73fb      	strb	r3, [r7, #15]
      break;
 8007a1a:	e016      	b.n	8007a4a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fc41 	bl	80082ac <USBD_StdEPReq>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	73fb      	strb	r3, [r7, #15]
      break;
 8007a2e:	e00c      	b.n	8007a4a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007a36:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f003 f978 	bl	800ad34 <USBD_LL_StallEP>
 8007a44:	4603      	mov	r3, r0
 8007a46:	73fb      	strb	r3, [r7, #15]
      break;
 8007a48:	bf00      	nop
  }

  return ret;
 8007a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	607a      	str	r2, [r7, #4]
 8007a60:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a62:	2300      	movs	r3, #0
 8007a64:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007a66:	7afb      	ldrb	r3, [r7, #11]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d177      	bne.n	8007b5c <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007a72:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007a7a:	2b03      	cmp	r3, #3
 8007a7c:	f040 80a1 	bne.w	8007bc2 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	693a      	ldr	r2, [r7, #16]
 8007a86:	8992      	ldrh	r2, [r2, #12]
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d91c      	bls.n	8007ac6 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	693a      	ldr	r2, [r7, #16]
 8007a92:	8992      	ldrh	r2, [r2, #12]
 8007a94:	1a9a      	subs	r2, r3, r2
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	693a      	ldr	r2, [r7, #16]
 8007aa0:	8992      	ldrh	r2, [r2, #12]
 8007aa2:	441a      	add	r2, r3
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	6919      	ldr	r1, [r3, #16]
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	899b      	ldrh	r3, [r3, #12]
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	bf38      	it	cc
 8007aba:	4613      	movcc	r3, r2
 8007abc:	461a      	mov	r2, r3
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f001 f9a8 	bl	8008e14 <USBD_CtlContinueRx>
 8007ac4:	e07d      	b.n	8007bc2 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007acc:	f003 031f 	and.w	r3, r3, #31
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d014      	beq.n	8007afe <USBD_LL_DataOutStage+0xaa>
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d81d      	bhi.n	8007b14 <USBD_LL_DataOutStage+0xc0>
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <USBD_LL_DataOutStage+0x8e>
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d003      	beq.n	8007ae8 <USBD_LL_DataOutStage+0x94>
 8007ae0:	e018      	b.n	8007b14 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	75bb      	strb	r3, [r7, #22]
            break;
 8007ae6:	e018      	b.n	8007b1a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	4619      	mov	r1, r3
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f000 fa6e 	bl	8007fd4 <USBD_CoreFindIF>
 8007af8:	4603      	mov	r3, r0
 8007afa:	75bb      	strb	r3, [r7, #22]
            break;
 8007afc:	e00d      	b.n	8007b1a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	4619      	mov	r1, r3
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f000 fa70 	bl	8007fee <USBD_CoreFindEP>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	75bb      	strb	r3, [r7, #22]
            break;
 8007b12:	e002      	b.n	8007b1a <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007b14:	2300      	movs	r3, #0
 8007b16:	75bb      	strb	r3, [r7, #22]
            break;
 8007b18:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007b1a:	7dbb      	ldrb	r3, [r7, #22]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d119      	bne.n	8007b54 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	2b03      	cmp	r3, #3
 8007b2a:	d113      	bne.n	8007b54 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007b2c:	7dba      	ldrb	r2, [r7, #22]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	32ae      	adds	r2, #174	@ 0xae
 8007b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00b      	beq.n	8007b54 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8007b3c:	7dba      	ldrb	r2, [r7, #22]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007b44:	7dba      	ldrb	r2, [r7, #22]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	32ae      	adds	r2, #174	@ 0xae
 8007b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	f001 f96e 	bl	8008e36 <USBD_CtlSendStatus>
 8007b5a:	e032      	b.n	8007bc2 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007b5c:	7afb      	ldrb	r3, [r7, #11]
 8007b5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	4619      	mov	r1, r3
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f000 fa41 	bl	8007fee <USBD_CoreFindEP>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b70:	7dbb      	ldrb	r3, [r7, #22]
 8007b72:	2bff      	cmp	r3, #255	@ 0xff
 8007b74:	d025      	beq.n	8007bc2 <USBD_LL_DataOutStage+0x16e>
 8007b76:	7dbb      	ldrb	r3, [r7, #22]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d122      	bne.n	8007bc2 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	2b03      	cmp	r3, #3
 8007b86:	d117      	bne.n	8007bb8 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007b88:	7dba      	ldrb	r2, [r7, #22]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	32ae      	adds	r2, #174	@ 0xae
 8007b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b92:	699b      	ldr	r3, [r3, #24]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00f      	beq.n	8007bb8 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8007b98:	7dba      	ldrb	r2, [r7, #22]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007ba0:	7dba      	ldrb	r2, [r7, #22]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	32ae      	adds	r2, #174	@ 0xae
 8007ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	7afa      	ldrb	r2, [r7, #11]
 8007bae:	4611      	mov	r1, r2
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	4798      	blx	r3
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007bb8:	7dfb      	ldrb	r3, [r7, #23]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d001      	beq.n	8007bc2 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8007bbe:	7dfb      	ldrb	r3, [r7, #23]
 8007bc0:	e000      	b.n	8007bc4 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3718      	adds	r7, #24
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b086      	sub	sp, #24
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	607a      	str	r2, [r7, #4]
 8007bd8:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007bda:	7afb      	ldrb	r3, [r7, #11]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d178      	bne.n	8007cd2 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	3314      	adds	r3, #20
 8007be4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d163      	bne.n	8007cb8 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	8992      	ldrh	r2, [r2, #12]
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d91c      	bls.n	8007c36 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	8992      	ldrh	r2, [r2, #12]
 8007c04:	1a9a      	subs	r2, r3, r2
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	693a      	ldr	r2, [r7, #16]
 8007c10:	8992      	ldrh	r2, [r2, #12]
 8007c12:	441a      	add	r2, r3
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	6919      	ldr	r1, [r3, #16]
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	461a      	mov	r2, r3
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f001 f8c4 	bl	8008db0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c28:	2300      	movs	r3, #0
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f003 f92a 	bl	800ae88 <USBD_LL_PrepareReceive>
 8007c34:	e040      	b.n	8007cb8 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	899b      	ldrh	r3, [r3, #12]
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d11c      	bne.n	8007c7e <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	693a      	ldr	r2, [r7, #16]
 8007c4a:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d316      	bcc.n	8007c7e <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d20f      	bcs.n	8007c7e <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c5e:	2200      	movs	r2, #0
 8007c60:	2100      	movs	r1, #0
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f001 f8a4 	bl	8008db0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c70:	2300      	movs	r3, #0
 8007c72:	2200      	movs	r2, #0
 8007c74:	2100      	movs	r1, #0
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f003 f906 	bl	800ae88 <USBD_LL_PrepareReceive>
 8007c7c:	e01c      	b.n	8007cb8 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b03      	cmp	r3, #3
 8007c88:	d10f      	bne.n	8007caa <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d009      	beq.n	8007caa <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007caa:	2180      	movs	r1, #128	@ 0x80
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f003 f841 	bl	800ad34 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f001 f8d2 	bl	8008e5c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d03a      	beq.n	8007d38 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	f7ff fe30 	bl	8007928 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007cd0:	e032      	b.n	8007d38 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007cd2:	7afb      	ldrb	r3, [r7, #11]
 8007cd4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	4619      	mov	r1, r3
 8007cdc:	68f8      	ldr	r0, [r7, #12]
 8007cde:	f000 f986 	bl	8007fee <USBD_CoreFindEP>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ce6:	7dfb      	ldrb	r3, [r7, #23]
 8007ce8:	2bff      	cmp	r3, #255	@ 0xff
 8007cea:	d025      	beq.n	8007d38 <USBD_LL_DataInStage+0x16c>
 8007cec:	7dfb      	ldrb	r3, [r7, #23]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d122      	bne.n	8007d38 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	2b03      	cmp	r3, #3
 8007cfc:	d11c      	bne.n	8007d38 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007cfe:	7dfa      	ldrb	r2, [r7, #23]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	32ae      	adds	r2, #174	@ 0xae
 8007d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d08:	695b      	ldr	r3, [r3, #20]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d014      	beq.n	8007d38 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8007d0e:	7dfa      	ldrb	r2, [r7, #23]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007d16:	7dfa      	ldrb	r2, [r7, #23]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	32ae      	adds	r2, #174	@ 0xae
 8007d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d20:	695b      	ldr	r3, [r3, #20]
 8007d22:	7afa      	ldrb	r2, [r7, #11]
 8007d24:	4611      	mov	r1, r2
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	4798      	blx	r3
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007d2e:	7dbb      	ldrb	r3, [r7, #22]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d001      	beq.n	8007d38 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8007d34:	7dbb      	ldrb	r3, [r7, #22]
 8007d36:	e000      	b.n	8007d3a <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3718      	adds	r7, #24
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b084      	sub	sp, #16
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2201      	movs	r2, #1
 8007d52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d014      	beq.n	8007da8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00e      	beq.n	8007da8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	6852      	ldr	r2, [r2, #4]
 8007d96:	b2d2      	uxtb	r2, r2
 8007d98:	4611      	mov	r1, r2
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	4798      	blx	r3
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d001      	beq.n	8007da8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007da4:	2303      	movs	r3, #3
 8007da6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007da8:	2340      	movs	r3, #64	@ 0x40
 8007daa:	2200      	movs	r2, #0
 8007dac:	2100      	movs	r1, #0
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f002 ff7b 	bl	800acaa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2240      	movs	r2, #64	@ 0x40
 8007dc0:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007dc4:	2340      	movs	r3, #64	@ 0x40
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	2180      	movs	r1, #128	@ 0x80
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f002 ff6d 	bl	800acaa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2240      	movs	r2, #64	@ 0x40
 8007ddc:	841a      	strh	r2, [r3, #32]

  return ret;
 8007dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	460b      	mov	r3, r1
 8007df2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	78fa      	ldrb	r2, [r7, #3]
 8007df8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	2b04      	cmp	r3, #4
 8007e1a:	d006      	beq.n	8007e2a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e22:	b2da      	uxtb	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2204      	movs	r2, #4
 8007e2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	2b04      	cmp	r3, #4
 8007e52:	d106      	bne.n	8007e62 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007e5a:	b2da      	uxtb	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b03      	cmp	r3, #3
 8007e82:	d110      	bne.n	8007ea6 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00b      	beq.n	8007ea6 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e94:	69db      	ldr	r3, [r3, #28]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d005      	beq.n	8007ea6 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ea0:	69db      	ldr	r3, [r3, #28]
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3708      	adds	r7, #8
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	460b      	mov	r3, r1
 8007eba:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	32ae      	adds	r2, #174	@ 0xae
 8007ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d101      	bne.n	8007ed2 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e01c      	b.n	8007f0c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b03      	cmp	r3, #3
 8007edc:	d115      	bne.n	8007f0a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	32ae      	adds	r2, #174	@ 0xae
 8007ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eec:	6a1b      	ldr	r3, [r3, #32]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d00b      	beq.n	8007f0a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	32ae      	adds	r2, #174	@ 0xae
 8007efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f00:	6a1b      	ldr	r3, [r3, #32]
 8007f02:	78fa      	ldrb	r2, [r7, #3]
 8007f04:	4611      	mov	r1, r2
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	32ae      	adds	r2, #174	@ 0xae
 8007f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d101      	bne.n	8007f36 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e01c      	b.n	8007f70 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b03      	cmp	r3, #3
 8007f40:	d115      	bne.n	8007f6e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	32ae      	adds	r2, #174	@ 0xae
 8007f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00b      	beq.n	8007f6e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	32ae      	adds	r2, #174	@ 0xae
 8007f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f66:	78fa      	ldrb	r2, [r7, #3]
 8007f68:	4611      	mov	r1, r2
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	370c      	adds	r7, #12
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr

08007f8e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b084      	sub	sp, #16
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00e      	beq.n	8007fca <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	6852      	ldr	r2, [r2, #4]
 8007fb8:	b2d2      	uxtb	r2, r2
 8007fba:	4611      	mov	r1, r2
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	4798      	blx	r3
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d001      	beq.n	8007fca <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3710      	adds	r7, #16
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	460b      	mov	r3, r1
 8007fde:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007fe0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	370c      	adds	r7, #12
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b083      	sub	sp, #12
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007ffa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b086      	sub	sp, #24
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	460b      	mov	r3, r1
 8008012:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800801c:	2300      	movs	r3, #0
 800801e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	885b      	ldrh	r3, [r3, #2]
 8008024:	b29b      	uxth	r3, r3
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	7812      	ldrb	r2, [r2, #0]
 800802a:	4293      	cmp	r3, r2
 800802c:	d91f      	bls.n	800806e <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008034:	e013      	b.n	800805e <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008036:	f107 030a 	add.w	r3, r7, #10
 800803a:	4619      	mov	r1, r3
 800803c:	6978      	ldr	r0, [r7, #20]
 800803e:	f000 f81b 	bl	8008078 <USBD_GetNextDesc>
 8008042:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	785b      	ldrb	r3, [r3, #1]
 8008048:	2b05      	cmp	r3, #5
 800804a:	d108      	bne.n	800805e <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	789b      	ldrb	r3, [r3, #2]
 8008054:	78fa      	ldrb	r2, [r7, #3]
 8008056:	429a      	cmp	r2, r3
 8008058:	d008      	beq.n	800806c <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800805a:	2300      	movs	r3, #0
 800805c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	885b      	ldrh	r3, [r3, #2]
 8008062:	b29a      	uxth	r2, r3
 8008064:	897b      	ldrh	r3, [r7, #10]
 8008066:	429a      	cmp	r2, r3
 8008068:	d8e5      	bhi.n	8008036 <USBD_GetEpDesc+0x2e>
 800806a:	e000      	b.n	800806e <USBD_GetEpDesc+0x66>
          break;
 800806c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800806e:	693b      	ldr	r3, [r7, #16]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3718      	adds	r7, #24
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008078:	b480      	push	{r7}
 800807a:	b085      	sub	sp, #20
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	881b      	ldrh	r3, [r3, #0]
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	7812      	ldrb	r2, [r2, #0]
 800808e:	4413      	add	r3, r2
 8008090:	b29a      	uxth	r2, r3
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	461a      	mov	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4413      	add	r3, r2
 80080a0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80080a2:	68fb      	ldr	r3, [r7, #12]
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3714      	adds	r7, #20
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b087      	sub	sp, #28
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	3301      	adds	r3, #1
 80080c6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80080ce:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80080d2:	021b      	lsls	r3, r3, #8
 80080d4:	b21a      	sxth	r2, r3
 80080d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80080da:	4313      	orrs	r3, r2
 80080dc:	b21b      	sxth	r3, r3
 80080de:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80080e0:	89fb      	ldrh	r3, [r7, #14]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	371c      	adds	r7, #28
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
	...

080080f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008106:	2b40      	cmp	r3, #64	@ 0x40
 8008108:	d005      	beq.n	8008116 <USBD_StdDevReq+0x26>
 800810a:	2b40      	cmp	r3, #64	@ 0x40
 800810c:	d857      	bhi.n	80081be <USBD_StdDevReq+0xce>
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00f      	beq.n	8008132 <USBD_StdDevReq+0x42>
 8008112:	2b20      	cmp	r3, #32
 8008114:	d153      	bne.n	80081be <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	32ae      	adds	r2, #174	@ 0xae
 8008120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	6839      	ldr	r1, [r7, #0]
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	4798      	blx	r3
 800812c:	4603      	mov	r3, r0
 800812e:	73fb      	strb	r3, [r7, #15]
      break;
 8008130:	e04a      	b.n	80081c8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	785b      	ldrb	r3, [r3, #1]
 8008136:	2b09      	cmp	r3, #9
 8008138:	d83b      	bhi.n	80081b2 <USBD_StdDevReq+0xc2>
 800813a:	a201      	add	r2, pc, #4	@ (adr r2, 8008140 <USBD_StdDevReq+0x50>)
 800813c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008140:	08008195 	.word	0x08008195
 8008144:	080081a9 	.word	0x080081a9
 8008148:	080081b3 	.word	0x080081b3
 800814c:	0800819f 	.word	0x0800819f
 8008150:	080081b3 	.word	0x080081b3
 8008154:	08008173 	.word	0x08008173
 8008158:	08008169 	.word	0x08008169
 800815c:	080081b3 	.word	0x080081b3
 8008160:	0800818b 	.word	0x0800818b
 8008164:	0800817d 	.word	0x0800817d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 fa3e 	bl	80085ec <USBD_GetDescriptor>
          break;
 8008170:	e024      	b.n	80081bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008172:	6839      	ldr	r1, [r7, #0]
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 fba3 	bl	80088c0 <USBD_SetAddress>
          break;
 800817a:	e01f      	b.n	80081bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800817c:	6839      	ldr	r1, [r7, #0]
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fbe2 	bl	8008948 <USBD_SetConfig>
 8008184:	4603      	mov	r3, r0
 8008186:	73fb      	strb	r3, [r7, #15]
          break;
 8008188:	e018      	b.n	80081bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800818a:	6839      	ldr	r1, [r7, #0]
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 fc85 	bl	8008a9c <USBD_GetConfig>
          break;
 8008192:	e013      	b.n	80081bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008194:	6839      	ldr	r1, [r7, #0]
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fcb6 	bl	8008b08 <USBD_GetStatus>
          break;
 800819c:	e00e      	b.n	80081bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800819e:	6839      	ldr	r1, [r7, #0]
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 fce5 	bl	8008b70 <USBD_SetFeature>
          break;
 80081a6:	e009      	b.n	80081bc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80081a8:	6839      	ldr	r1, [r7, #0]
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fd09 	bl	8008bc2 <USBD_ClrFeature>
          break;
 80081b0:	e004      	b.n	80081bc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80081b2:	6839      	ldr	r1, [r7, #0]
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 fd60 	bl	8008c7a <USBD_CtlError>
          break;
 80081ba:	bf00      	nop
      }
      break;
 80081bc:	e004      	b.n	80081c8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80081be:	6839      	ldr	r1, [r7, #0]
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 fd5a 	bl	8008c7a <USBD_CtlError>
      break;
 80081c6:	bf00      	nop
  }

  return ret;
 80081c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop

080081d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081de:	2300      	movs	r3, #0
 80081e0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80081ea:	2b40      	cmp	r3, #64	@ 0x40
 80081ec:	d005      	beq.n	80081fa <USBD_StdItfReq+0x26>
 80081ee:	2b40      	cmp	r3, #64	@ 0x40
 80081f0:	d852      	bhi.n	8008298 <USBD_StdItfReq+0xc4>
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d001      	beq.n	80081fa <USBD_StdItfReq+0x26>
 80081f6:	2b20      	cmp	r3, #32
 80081f8:	d14e      	bne.n	8008298 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008200:	b2db      	uxtb	r3, r3
 8008202:	3b01      	subs	r3, #1
 8008204:	2b02      	cmp	r3, #2
 8008206:	d840      	bhi.n	800828a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	889b      	ldrh	r3, [r3, #4]
 800820c:	b2db      	uxtb	r3, r3
 800820e:	2b01      	cmp	r3, #1
 8008210:	d836      	bhi.n	8008280 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	889b      	ldrh	r3, [r3, #4]
 8008216:	b2db      	uxtb	r3, r3
 8008218:	4619      	mov	r1, r3
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f7ff feda 	bl	8007fd4 <USBD_CoreFindIF>
 8008220:	4603      	mov	r3, r0
 8008222:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008224:	7bbb      	ldrb	r3, [r7, #14]
 8008226:	2bff      	cmp	r3, #255	@ 0xff
 8008228:	d01d      	beq.n	8008266 <USBD_StdItfReq+0x92>
 800822a:	7bbb      	ldrb	r3, [r7, #14]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d11a      	bne.n	8008266 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008230:	7bba      	ldrb	r2, [r7, #14]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	32ae      	adds	r2, #174	@ 0xae
 8008236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00f      	beq.n	8008260 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008240:	7bba      	ldrb	r2, [r7, #14]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008248:	7bba      	ldrb	r2, [r7, #14]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	32ae      	adds	r2, #174	@ 0xae
 800824e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	6839      	ldr	r1, [r7, #0]
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	4798      	blx	r3
 800825a:	4603      	mov	r3, r0
 800825c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800825e:	e004      	b.n	800826a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008260:	2303      	movs	r3, #3
 8008262:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008264:	e001      	b.n	800826a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008266:	2303      	movs	r3, #3
 8008268:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	88db      	ldrh	r3, [r3, #6]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d110      	bne.n	8008294 <USBD_StdItfReq+0xc0>
 8008272:	7bfb      	ldrb	r3, [r7, #15]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d10d      	bne.n	8008294 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 fddc 	bl	8008e36 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800827e:	e009      	b.n	8008294 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fcf9 	bl	8008c7a <USBD_CtlError>
          break;
 8008288:	e004      	b.n	8008294 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800828a:	6839      	ldr	r1, [r7, #0]
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 fcf4 	bl	8008c7a <USBD_CtlError>
          break;
 8008292:	e000      	b.n	8008296 <USBD_StdItfReq+0xc2>
          break;
 8008294:	bf00      	nop
      }
      break;
 8008296:	e004      	b.n	80082a2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008298:	6839      	ldr	r1, [r7, #0]
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 fced 	bl	8008c7a <USBD_CtlError>
      break;
 80082a0:	bf00      	nop
  }

  return ret;
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80082b6:	2300      	movs	r3, #0
 80082b8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	889b      	ldrh	r3, [r3, #4]
 80082be:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80082c8:	2b40      	cmp	r3, #64	@ 0x40
 80082ca:	d007      	beq.n	80082dc <USBD_StdEPReq+0x30>
 80082cc:	2b40      	cmp	r3, #64	@ 0x40
 80082ce:	f200 8181 	bhi.w	80085d4 <USBD_StdEPReq+0x328>
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d02a      	beq.n	800832c <USBD_StdEPReq+0x80>
 80082d6:	2b20      	cmp	r3, #32
 80082d8:	f040 817c 	bne.w	80085d4 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80082dc:	7bbb      	ldrb	r3, [r7, #14]
 80082de:	4619      	mov	r1, r3
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f7ff fe84 	bl	8007fee <USBD_CoreFindEP>
 80082e6:	4603      	mov	r3, r0
 80082e8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082ea:	7b7b      	ldrb	r3, [r7, #13]
 80082ec:	2bff      	cmp	r3, #255	@ 0xff
 80082ee:	f000 8176 	beq.w	80085de <USBD_StdEPReq+0x332>
 80082f2:	7b7b      	ldrb	r3, [r7, #13]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f040 8172 	bne.w	80085de <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 80082fa:	7b7a      	ldrb	r2, [r7, #13]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008302:	7b7a      	ldrb	r2, [r7, #13]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	32ae      	adds	r2, #174	@ 0xae
 8008308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	2b00      	cmp	r3, #0
 8008310:	f000 8165 	beq.w	80085de <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008314:	7b7a      	ldrb	r2, [r7, #13]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	32ae      	adds	r2, #174	@ 0xae
 800831a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	6839      	ldr	r1, [r7, #0]
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	4798      	blx	r3
 8008326:	4603      	mov	r3, r0
 8008328:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800832a:	e158      	b.n	80085de <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	785b      	ldrb	r3, [r3, #1]
 8008330:	2b03      	cmp	r3, #3
 8008332:	d008      	beq.n	8008346 <USBD_StdEPReq+0x9a>
 8008334:	2b03      	cmp	r3, #3
 8008336:	f300 8147 	bgt.w	80085c8 <USBD_StdEPReq+0x31c>
 800833a:	2b00      	cmp	r3, #0
 800833c:	f000 809b 	beq.w	8008476 <USBD_StdEPReq+0x1ca>
 8008340:	2b01      	cmp	r3, #1
 8008342:	d03c      	beq.n	80083be <USBD_StdEPReq+0x112>
 8008344:	e140      	b.n	80085c8 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800834c:	b2db      	uxtb	r3, r3
 800834e:	2b02      	cmp	r3, #2
 8008350:	d002      	beq.n	8008358 <USBD_StdEPReq+0xac>
 8008352:	2b03      	cmp	r3, #3
 8008354:	d016      	beq.n	8008384 <USBD_StdEPReq+0xd8>
 8008356:	e02c      	b.n	80083b2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008358:	7bbb      	ldrb	r3, [r7, #14]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00d      	beq.n	800837a <USBD_StdEPReq+0xce>
 800835e:	7bbb      	ldrb	r3, [r7, #14]
 8008360:	2b80      	cmp	r3, #128	@ 0x80
 8008362:	d00a      	beq.n	800837a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008364:	7bbb      	ldrb	r3, [r7, #14]
 8008366:	4619      	mov	r1, r3
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f002 fce3 	bl	800ad34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800836e:	2180      	movs	r1, #128	@ 0x80
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f002 fcdf 	bl	800ad34 <USBD_LL_StallEP>
 8008376:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008378:	e020      	b.n	80083bc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800837a:	6839      	ldr	r1, [r7, #0]
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 fc7c 	bl	8008c7a <USBD_CtlError>
              break;
 8008382:	e01b      	b.n	80083bc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	885b      	ldrh	r3, [r3, #2]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d10e      	bne.n	80083aa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800838c:	7bbb      	ldrb	r3, [r7, #14]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00b      	beq.n	80083aa <USBD_StdEPReq+0xfe>
 8008392:	7bbb      	ldrb	r3, [r7, #14]
 8008394:	2b80      	cmp	r3, #128	@ 0x80
 8008396:	d008      	beq.n	80083aa <USBD_StdEPReq+0xfe>
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	88db      	ldrh	r3, [r3, #6]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d104      	bne.n	80083aa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80083a0:	7bbb      	ldrb	r3, [r7, #14]
 80083a2:	4619      	mov	r1, r3
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f002 fcc5 	bl	800ad34 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fd43 	bl	8008e36 <USBD_CtlSendStatus>

              break;
 80083b0:	e004      	b.n	80083bc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80083b2:	6839      	ldr	r1, [r7, #0]
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fc60 	bl	8008c7a <USBD_CtlError>
              break;
 80083ba:	bf00      	nop
          }
          break;
 80083bc:	e109      	b.n	80085d2 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	d002      	beq.n	80083d0 <USBD_StdEPReq+0x124>
 80083ca:	2b03      	cmp	r3, #3
 80083cc:	d016      	beq.n	80083fc <USBD_StdEPReq+0x150>
 80083ce:	e04b      	b.n	8008468 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083d0:	7bbb      	ldrb	r3, [r7, #14]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00d      	beq.n	80083f2 <USBD_StdEPReq+0x146>
 80083d6:	7bbb      	ldrb	r3, [r7, #14]
 80083d8:	2b80      	cmp	r3, #128	@ 0x80
 80083da:	d00a      	beq.n	80083f2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80083dc:	7bbb      	ldrb	r3, [r7, #14]
 80083de:	4619      	mov	r1, r3
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f002 fca7 	bl	800ad34 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80083e6:	2180      	movs	r1, #128	@ 0x80
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f002 fca3 	bl	800ad34 <USBD_LL_StallEP>
 80083ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083f0:	e040      	b.n	8008474 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80083f2:	6839      	ldr	r1, [r7, #0]
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 fc40 	bl	8008c7a <USBD_CtlError>
              break;
 80083fa:	e03b      	b.n	8008474 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	885b      	ldrh	r3, [r3, #2]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d136      	bne.n	8008472 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008404:	7bbb      	ldrb	r3, [r7, #14]
 8008406:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800840a:	2b00      	cmp	r3, #0
 800840c:	d004      	beq.n	8008418 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800840e:	7bbb      	ldrb	r3, [r7, #14]
 8008410:	4619      	mov	r1, r3
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f002 fcad 	bl	800ad72 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 fd0c 	bl	8008e36 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800841e:	7bbb      	ldrb	r3, [r7, #14]
 8008420:	4619      	mov	r1, r3
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f7ff fde3 	bl	8007fee <USBD_CoreFindEP>
 8008428:	4603      	mov	r3, r0
 800842a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800842c:	7b7b      	ldrb	r3, [r7, #13]
 800842e:	2bff      	cmp	r3, #255	@ 0xff
 8008430:	d01f      	beq.n	8008472 <USBD_StdEPReq+0x1c6>
 8008432:	7b7b      	ldrb	r3, [r7, #13]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d11c      	bne.n	8008472 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008438:	7b7a      	ldrb	r2, [r7, #13]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008440:	7b7a      	ldrb	r2, [r7, #13]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	32ae      	adds	r2, #174	@ 0xae
 8008446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d010      	beq.n	8008472 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008450:	7b7a      	ldrb	r2, [r7, #13]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	32ae      	adds	r2, #174	@ 0xae
 8008456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	6839      	ldr	r1, [r7, #0]
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	4798      	blx	r3
 8008462:	4603      	mov	r3, r0
 8008464:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008466:	e004      	b.n	8008472 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008468:	6839      	ldr	r1, [r7, #0]
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fc05 	bl	8008c7a <USBD_CtlError>
              break;
 8008470:	e000      	b.n	8008474 <USBD_StdEPReq+0x1c8>
              break;
 8008472:	bf00      	nop
          }
          break;
 8008474:	e0ad      	b.n	80085d2 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800847c:	b2db      	uxtb	r3, r3
 800847e:	2b02      	cmp	r3, #2
 8008480:	d002      	beq.n	8008488 <USBD_StdEPReq+0x1dc>
 8008482:	2b03      	cmp	r3, #3
 8008484:	d033      	beq.n	80084ee <USBD_StdEPReq+0x242>
 8008486:	e099      	b.n	80085bc <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008488:	7bbb      	ldrb	r3, [r7, #14]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d007      	beq.n	800849e <USBD_StdEPReq+0x1f2>
 800848e:	7bbb      	ldrb	r3, [r7, #14]
 8008490:	2b80      	cmp	r3, #128	@ 0x80
 8008492:	d004      	beq.n	800849e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fbef 	bl	8008c7a <USBD_CtlError>
                break;
 800849c:	e093      	b.n	80085c6 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800849e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	da0b      	bge.n	80084be <USBD_StdEPReq+0x212>
 80084a6:	7bbb      	ldrb	r3, [r7, #14]
 80084a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084ac:	4613      	mov	r3, r2
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	4413      	add	r3, r2
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	3310      	adds	r3, #16
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	4413      	add	r3, r2
 80084ba:	3304      	adds	r3, #4
 80084bc:	e00b      	b.n	80084d6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084be:	7bbb      	ldrb	r3, [r7, #14]
 80084c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084c4:	4613      	mov	r3, r2
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	4413      	add	r3, r2
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	4413      	add	r3, r2
 80084d4:	3304      	adds	r3, #4
 80084d6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	2200      	movs	r2, #0
 80084dc:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	330e      	adds	r3, #14
 80084e2:	2202      	movs	r2, #2
 80084e4:	4619      	mov	r1, r3
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fc44 	bl	8008d74 <USBD_CtlSendData>
              break;
 80084ec:	e06b      	b.n	80085c6 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80084ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	da11      	bge.n	800851a <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80084f6:	7bbb      	ldrb	r3, [r7, #14]
 80084f8:	f003 020f 	and.w	r2, r3, #15
 80084fc:	6879      	ldr	r1, [r7, #4]
 80084fe:	4613      	mov	r3, r2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	4413      	add	r3, r2
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	440b      	add	r3, r1
 8008508:	3323      	adds	r3, #35	@ 0x23
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d117      	bne.n	8008540 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008510:	6839      	ldr	r1, [r7, #0]
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 fbb1 	bl	8008c7a <USBD_CtlError>
                  break;
 8008518:	e055      	b.n	80085c6 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800851a:	7bbb      	ldrb	r3, [r7, #14]
 800851c:	f003 020f 	and.w	r2, r3, #15
 8008520:	6879      	ldr	r1, [r7, #4]
 8008522:	4613      	mov	r3, r2
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	4413      	add	r3, r2
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	440b      	add	r3, r1
 800852c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d104      	bne.n	8008540 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008536:	6839      	ldr	r1, [r7, #0]
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 fb9e 	bl	8008c7a <USBD_CtlError>
                  break;
 800853e:	e042      	b.n	80085c6 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008540:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008544:	2b00      	cmp	r3, #0
 8008546:	da0b      	bge.n	8008560 <USBD_StdEPReq+0x2b4>
 8008548:	7bbb      	ldrb	r3, [r7, #14]
 800854a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800854e:	4613      	mov	r3, r2
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	4413      	add	r3, r2
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	3310      	adds	r3, #16
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	4413      	add	r3, r2
 800855c:	3304      	adds	r3, #4
 800855e:	e00b      	b.n	8008578 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008560:	7bbb      	ldrb	r3, [r7, #14]
 8008562:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008566:	4613      	mov	r3, r2
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	4413      	add	r3, r2
 8008576:	3304      	adds	r3, #4
 8008578:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800857a:	7bbb      	ldrb	r3, [r7, #14]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d002      	beq.n	8008586 <USBD_StdEPReq+0x2da>
 8008580:	7bbb      	ldrb	r3, [r7, #14]
 8008582:	2b80      	cmp	r3, #128	@ 0x80
 8008584:	d103      	bne.n	800858e <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	2200      	movs	r2, #0
 800858a:	739a      	strb	r2, [r3, #14]
 800858c:	e00e      	b.n	80085ac <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800858e:	7bbb      	ldrb	r3, [r7, #14]
 8008590:	4619      	mov	r1, r3
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f002 fc0c 	bl	800adb0 <USBD_LL_IsStallEP>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d003      	beq.n	80085a6 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	2201      	movs	r2, #1
 80085a2:	739a      	strb	r2, [r3, #14]
 80085a4:	e002      	b.n	80085ac <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	2200      	movs	r2, #0
 80085aa:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	330e      	adds	r3, #14
 80085b0:	2202      	movs	r2, #2
 80085b2:	4619      	mov	r1, r3
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 fbdd 	bl	8008d74 <USBD_CtlSendData>
              break;
 80085ba:	e004      	b.n	80085c6 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 fb5b 	bl	8008c7a <USBD_CtlError>
              break;
 80085c4:	bf00      	nop
          }
          break;
 80085c6:	e004      	b.n	80085d2 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 80085c8:	6839      	ldr	r1, [r7, #0]
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 fb55 	bl	8008c7a <USBD_CtlError>
          break;
 80085d0:	bf00      	nop
      }
      break;
 80085d2:	e005      	b.n	80085e0 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 80085d4:	6839      	ldr	r1, [r7, #0]
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 fb4f 	bl	8008c7a <USBD_CtlError>
      break;
 80085dc:	e000      	b.n	80085e0 <USBD_StdEPReq+0x334>
      break;
 80085de:	bf00      	nop
  }

  return ret;
 80085e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
	...

080085ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80085f6:	2300      	movs	r3, #0
 80085f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80085fa:	2300      	movs	r3, #0
 80085fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80085fe:	2300      	movs	r3, #0
 8008600:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	885b      	ldrh	r3, [r3, #2]
 8008606:	0a1b      	lsrs	r3, r3, #8
 8008608:	b29b      	uxth	r3, r3
 800860a:	3b01      	subs	r3, #1
 800860c:	2b06      	cmp	r3, #6
 800860e:	f200 8128 	bhi.w	8008862 <USBD_GetDescriptor+0x276>
 8008612:	a201      	add	r2, pc, #4	@ (adr r2, 8008618 <USBD_GetDescriptor+0x2c>)
 8008614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008618:	08008635 	.word	0x08008635
 800861c:	0800864d 	.word	0x0800864d
 8008620:	0800868d 	.word	0x0800868d
 8008624:	08008863 	.word	0x08008863
 8008628:	08008863 	.word	0x08008863
 800862c:	08008803 	.word	0x08008803
 8008630:	0800882f 	.word	0x0800882f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	7c12      	ldrb	r2, [r2, #16]
 8008640:	f107 0108 	add.w	r1, r7, #8
 8008644:	4610      	mov	r0, r2
 8008646:	4798      	blx	r3
 8008648:	60f8      	str	r0, [r7, #12]
      break;
 800864a:	e112      	b.n	8008872 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	7c1b      	ldrb	r3, [r3, #16]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d10d      	bne.n	8008670 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800865a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800865c:	f107 0208 	add.w	r2, r7, #8
 8008660:	4610      	mov	r0, r2
 8008662:	4798      	blx	r3
 8008664:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	3301      	adds	r3, #1
 800866a:	2202      	movs	r2, #2
 800866c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800866e:	e100      	b.n	8008872 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008678:	f107 0208 	add.w	r2, r7, #8
 800867c:	4610      	mov	r0, r2
 800867e:	4798      	blx	r3
 8008680:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	3301      	adds	r3, #1
 8008686:	2202      	movs	r2, #2
 8008688:	701a      	strb	r2, [r3, #0]
      break;
 800868a:	e0f2      	b.n	8008872 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	885b      	ldrh	r3, [r3, #2]
 8008690:	b2db      	uxtb	r3, r3
 8008692:	2b05      	cmp	r3, #5
 8008694:	f200 80ac 	bhi.w	80087f0 <USBD_GetDescriptor+0x204>
 8008698:	a201      	add	r2, pc, #4	@ (adr r2, 80086a0 <USBD_GetDescriptor+0xb4>)
 800869a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869e:	bf00      	nop
 80086a0:	080086b9 	.word	0x080086b9
 80086a4:	080086ed 	.word	0x080086ed
 80086a8:	08008721 	.word	0x08008721
 80086ac:	08008755 	.word	0x08008755
 80086b0:	08008789 	.word	0x08008789
 80086b4:	080087bd 	.word	0x080087bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00b      	beq.n	80086dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	7c12      	ldrb	r2, [r2, #16]
 80086d0:	f107 0108 	add.w	r1, r7, #8
 80086d4:	4610      	mov	r0, r2
 80086d6:	4798      	blx	r3
 80086d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086da:	e091      	b.n	8008800 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086dc:	6839      	ldr	r1, [r7, #0]
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 facb 	bl	8008c7a <USBD_CtlError>
            err++;
 80086e4:	7afb      	ldrb	r3, [r7, #11]
 80086e6:	3301      	adds	r3, #1
 80086e8:	72fb      	strb	r3, [r7, #11]
          break;
 80086ea:	e089      	b.n	8008800 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00b      	beq.n	8008710 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	7c12      	ldrb	r2, [r2, #16]
 8008704:	f107 0108 	add.w	r1, r7, #8
 8008708:	4610      	mov	r0, r2
 800870a:	4798      	blx	r3
 800870c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800870e:	e077      	b.n	8008800 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008710:	6839      	ldr	r1, [r7, #0]
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fab1 	bl	8008c7a <USBD_CtlError>
            err++;
 8008718:	7afb      	ldrb	r3, [r7, #11]
 800871a:	3301      	adds	r3, #1
 800871c:	72fb      	strb	r3, [r7, #11]
          break;
 800871e:	e06f      	b.n	8008800 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00b      	beq.n	8008744 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	7c12      	ldrb	r2, [r2, #16]
 8008738:	f107 0108 	add.w	r1, r7, #8
 800873c:	4610      	mov	r0, r2
 800873e:	4798      	blx	r3
 8008740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008742:	e05d      	b.n	8008800 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008744:	6839      	ldr	r1, [r7, #0]
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 fa97 	bl	8008c7a <USBD_CtlError>
            err++;
 800874c:	7afb      	ldrb	r3, [r7, #11]
 800874e:	3301      	adds	r3, #1
 8008750:	72fb      	strb	r3, [r7, #11]
          break;
 8008752:	e055      	b.n	8008800 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d00b      	beq.n	8008778 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	7c12      	ldrb	r2, [r2, #16]
 800876c:	f107 0108 	add.w	r1, r7, #8
 8008770:	4610      	mov	r0, r2
 8008772:	4798      	blx	r3
 8008774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008776:	e043      	b.n	8008800 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 fa7d 	bl	8008c7a <USBD_CtlError>
            err++;
 8008780:	7afb      	ldrb	r3, [r7, #11]
 8008782:	3301      	adds	r3, #1
 8008784:	72fb      	strb	r3, [r7, #11]
          break;
 8008786:	e03b      	b.n	8008800 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800878e:	695b      	ldr	r3, [r3, #20]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00b      	beq.n	80087ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800879a:	695b      	ldr	r3, [r3, #20]
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	7c12      	ldrb	r2, [r2, #16]
 80087a0:	f107 0108 	add.w	r1, r7, #8
 80087a4:	4610      	mov	r0, r2
 80087a6:	4798      	blx	r3
 80087a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087aa:	e029      	b.n	8008800 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fa63 	bl	8008c7a <USBD_CtlError>
            err++;
 80087b4:	7afb      	ldrb	r3, [r7, #11]
 80087b6:	3301      	adds	r3, #1
 80087b8:	72fb      	strb	r3, [r7, #11]
          break;
 80087ba:	e021      	b.n	8008800 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087c2:	699b      	ldr	r3, [r3, #24]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00b      	beq.n	80087e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087ce:	699b      	ldr	r3, [r3, #24]
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	7c12      	ldrb	r2, [r2, #16]
 80087d4:	f107 0108 	add.w	r1, r7, #8
 80087d8:	4610      	mov	r0, r2
 80087da:	4798      	blx	r3
 80087dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087de:	e00f      	b.n	8008800 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087e0:	6839      	ldr	r1, [r7, #0]
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fa49 	bl	8008c7a <USBD_CtlError>
            err++;
 80087e8:	7afb      	ldrb	r3, [r7, #11]
 80087ea:	3301      	adds	r3, #1
 80087ec:	72fb      	strb	r3, [r7, #11]
          break;
 80087ee:	e007      	b.n	8008800 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80087f0:	6839      	ldr	r1, [r7, #0]
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 fa41 	bl	8008c7a <USBD_CtlError>
          err++;
 80087f8:	7afb      	ldrb	r3, [r7, #11]
 80087fa:	3301      	adds	r3, #1
 80087fc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80087fe:	bf00      	nop
      }
      break;
 8008800:	e037      	b.n	8008872 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	7c1b      	ldrb	r3, [r3, #16]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d109      	bne.n	800881e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008812:	f107 0208 	add.w	r2, r7, #8
 8008816:	4610      	mov	r0, r2
 8008818:	4798      	blx	r3
 800881a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800881c:	e029      	b.n	8008872 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800881e:	6839      	ldr	r1, [r7, #0]
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fa2a 	bl	8008c7a <USBD_CtlError>
        err++;
 8008826:	7afb      	ldrb	r3, [r7, #11]
 8008828:	3301      	adds	r3, #1
 800882a:	72fb      	strb	r3, [r7, #11]
      break;
 800882c:	e021      	b.n	8008872 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	7c1b      	ldrb	r3, [r3, #16]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d10d      	bne.n	8008852 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800883c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800883e:	f107 0208 	add.w	r2, r7, #8
 8008842:	4610      	mov	r0, r2
 8008844:	4798      	blx	r3
 8008846:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	3301      	adds	r3, #1
 800884c:	2207      	movs	r2, #7
 800884e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008850:	e00f      	b.n	8008872 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008852:	6839      	ldr	r1, [r7, #0]
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 fa10 	bl	8008c7a <USBD_CtlError>
        err++;
 800885a:	7afb      	ldrb	r3, [r7, #11]
 800885c:	3301      	adds	r3, #1
 800885e:	72fb      	strb	r3, [r7, #11]
      break;
 8008860:	e007      	b.n	8008872 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008862:	6839      	ldr	r1, [r7, #0]
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 fa08 	bl	8008c7a <USBD_CtlError>
      err++;
 800886a:	7afb      	ldrb	r3, [r7, #11]
 800886c:	3301      	adds	r3, #1
 800886e:	72fb      	strb	r3, [r7, #11]
      break;
 8008870:	bf00      	nop
  }

  if (err != 0U)
 8008872:	7afb      	ldrb	r3, [r7, #11]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d11e      	bne.n	80088b6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	88db      	ldrh	r3, [r3, #6]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d016      	beq.n	80088ae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008880:	893b      	ldrh	r3, [r7, #8]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00e      	beq.n	80088a4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	88da      	ldrh	r2, [r3, #6]
 800888a:	893b      	ldrh	r3, [r7, #8]
 800888c:	4293      	cmp	r3, r2
 800888e:	bf28      	it	cs
 8008890:	4613      	movcs	r3, r2
 8008892:	b29b      	uxth	r3, r3
 8008894:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008896:	893b      	ldrh	r3, [r7, #8]
 8008898:	461a      	mov	r2, r3
 800889a:	68f9      	ldr	r1, [r7, #12]
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 fa69 	bl	8008d74 <USBD_CtlSendData>
 80088a2:	e009      	b.n	80088b8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80088a4:	6839      	ldr	r1, [r7, #0]
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 f9e7 	bl	8008c7a <USBD_CtlError>
 80088ac:	e004      	b.n	80088b8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 fac1 	bl	8008e36 <USBD_CtlSendStatus>
 80088b4:	e000      	b.n	80088b8 <USBD_GetDescriptor+0x2cc>
    return;
 80088b6:	bf00      	nop
  }
}
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop

080088c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	889b      	ldrh	r3, [r3, #4]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d131      	bne.n	8008936 <USBD_SetAddress+0x76>
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	88db      	ldrh	r3, [r3, #6]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d12d      	bne.n	8008936 <USBD_SetAddress+0x76>
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	885b      	ldrh	r3, [r3, #2]
 80088de:	2b7f      	cmp	r3, #127	@ 0x7f
 80088e0:	d829      	bhi.n	8008936 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	885b      	ldrh	r3, [r3, #2]
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	2b03      	cmp	r3, #3
 80088f8:	d104      	bne.n	8008904 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80088fa:	6839      	ldr	r1, [r7, #0]
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 f9bc 	bl	8008c7a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008902:	e01d      	b.n	8008940 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	7bfa      	ldrb	r2, [r7, #15]
 8008908:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800890c:	7bfb      	ldrb	r3, [r7, #15]
 800890e:	4619      	mov	r1, r3
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f002 fa79 	bl	800ae08 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 fa8d 	bl	8008e36 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800891c:	7bfb      	ldrb	r3, [r7, #15]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d004      	beq.n	800892c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2202      	movs	r2, #2
 8008926:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800892a:	e009      	b.n	8008940 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008934:	e004      	b.n	8008940 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008936:	6839      	ldr	r1, [r7, #0]
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 f99e 	bl	8008c7a <USBD_CtlError>
  }
}
 800893e:	bf00      	nop
 8008940:	bf00      	nop
 8008942:	3710      	adds	r7, #16
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008952:	2300      	movs	r3, #0
 8008954:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	885b      	ldrh	r3, [r3, #2]
 800895a:	b2da      	uxtb	r2, r3
 800895c:	4b4e      	ldr	r3, [pc, #312]	@ (8008a98 <USBD_SetConfig+0x150>)
 800895e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008960:	4b4d      	ldr	r3, [pc, #308]	@ (8008a98 <USBD_SetConfig+0x150>)
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d905      	bls.n	8008974 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008968:	6839      	ldr	r1, [r7, #0]
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 f985 	bl	8008c7a <USBD_CtlError>
    return USBD_FAIL;
 8008970:	2303      	movs	r3, #3
 8008972:	e08c      	b.n	8008a8e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800897a:	b2db      	uxtb	r3, r3
 800897c:	2b02      	cmp	r3, #2
 800897e:	d002      	beq.n	8008986 <USBD_SetConfig+0x3e>
 8008980:	2b03      	cmp	r3, #3
 8008982:	d029      	beq.n	80089d8 <USBD_SetConfig+0x90>
 8008984:	e075      	b.n	8008a72 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008986:	4b44      	ldr	r3, [pc, #272]	@ (8008a98 <USBD_SetConfig+0x150>)
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d020      	beq.n	80089d0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800898e:	4b42      	ldr	r3, [pc, #264]	@ (8008a98 <USBD_SetConfig+0x150>)
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	461a      	mov	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008998:	4b3f      	ldr	r3, [pc, #252]	@ (8008a98 <USBD_SetConfig+0x150>)
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	4619      	mov	r1, r3
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f7fe ffcd 	bl	800793e <USBD_SetClassConfig>
 80089a4:	4603      	mov	r3, r0
 80089a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d008      	beq.n	80089c0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80089ae:	6839      	ldr	r1, [r7, #0]
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 f962 	bl	8008c7a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2202      	movs	r2, #2
 80089ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80089be:	e065      	b.n	8008a8c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 fa38 	bl	8008e36 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2203      	movs	r2, #3
 80089ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80089ce:	e05d      	b.n	8008a8c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 fa30 	bl	8008e36 <USBD_CtlSendStatus>
      break;
 80089d6:	e059      	b.n	8008a8c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80089d8:	4b2f      	ldr	r3, [pc, #188]	@ (8008a98 <USBD_SetConfig+0x150>)
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d112      	bne.n	8008a06 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2202      	movs	r2, #2
 80089e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80089e8:	4b2b      	ldr	r3, [pc, #172]	@ (8008a98 <USBD_SetConfig+0x150>)
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	461a      	mov	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80089f2:	4b29      	ldr	r3, [pc, #164]	@ (8008a98 <USBD_SetConfig+0x150>)
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	4619      	mov	r1, r3
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f7fe ffbc 	bl	8007976 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 fa19 	bl	8008e36 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a04:	e042      	b.n	8008a8c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008a06:	4b24      	ldr	r3, [pc, #144]	@ (8008a98 <USBD_SetConfig+0x150>)
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d02a      	beq.n	8008a6a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f7fe ffaa 	bl	8007976 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008a22:	4b1d      	ldr	r3, [pc, #116]	@ (8008a98 <USBD_SetConfig+0x150>)
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	461a      	mov	r2, r3
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8008a98 <USBD_SetConfig+0x150>)
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	4619      	mov	r1, r3
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f7fe ff83 	bl	800793e <USBD_SetClassConfig>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008a3c:	7bfb      	ldrb	r3, [r7, #15]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d00f      	beq.n	8008a62 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008a42:	6839      	ldr	r1, [r7, #0]
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 f918 	bl	8008c7a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	4619      	mov	r1, r3
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7fe ff8f 	bl	8007976 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2202      	movs	r2, #2
 8008a5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008a60:	e014      	b.n	8008a8c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 f9e7 	bl	8008e36 <USBD_CtlSendStatus>
      break;
 8008a68:	e010      	b.n	8008a8c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 f9e3 	bl	8008e36 <USBD_CtlSendStatus>
      break;
 8008a70:	e00c      	b.n	8008a8c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008a72:	6839      	ldr	r1, [r7, #0]
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 f900 	bl	8008c7a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a7a:	4b07      	ldr	r3, [pc, #28]	@ (8008a98 <USBD_SetConfig+0x150>)
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	4619      	mov	r1, r3
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f7fe ff78 	bl	8007976 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008a86:	2303      	movs	r3, #3
 8008a88:	73fb      	strb	r3, [r7, #15]
      break;
 8008a8a:	bf00      	nop
  }

  return ret;
 8008a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3710      	adds	r7, #16
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	20000d90 	.word	0x20000d90

08008a9c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	88db      	ldrh	r3, [r3, #6]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d004      	beq.n	8008ab8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008aae:	6839      	ldr	r1, [r7, #0]
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 f8e2 	bl	8008c7a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008ab6:	e023      	b.n	8008b00 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	dc02      	bgt.n	8008aca <USBD_GetConfig+0x2e>
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	dc03      	bgt.n	8008ad0 <USBD_GetConfig+0x34>
 8008ac8:	e015      	b.n	8008af6 <USBD_GetConfig+0x5a>
 8008aca:	2b03      	cmp	r3, #3
 8008acc:	d00b      	beq.n	8008ae6 <USBD_GetConfig+0x4a>
 8008ace:	e012      	b.n	8008af6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	3308      	adds	r3, #8
 8008ada:	2201      	movs	r2, #1
 8008adc:	4619      	mov	r1, r3
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f948 	bl	8008d74 <USBD_CtlSendData>
        break;
 8008ae4:	e00c      	b.n	8008b00 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	3304      	adds	r3, #4
 8008aea:	2201      	movs	r2, #1
 8008aec:	4619      	mov	r1, r3
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f940 	bl	8008d74 <USBD_CtlSendData>
        break;
 8008af4:	e004      	b.n	8008b00 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 f8be 	bl	8008c7a <USBD_CtlError>
        break;
 8008afe:	bf00      	nop
}
 8008b00:	bf00      	nop
 8008b02:	3708      	adds	r7, #8
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d81e      	bhi.n	8008b5e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	88db      	ldrh	r3, [r3, #6]
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	d004      	beq.n	8008b32 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008b28:	6839      	ldr	r1, [r7, #0]
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 f8a5 	bl	8008c7a <USBD_CtlError>
        break;
 8008b30:	e01a      	b.n	8008b68 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2201      	movs	r2, #1
 8008b36:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d005      	beq.n	8008b4e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	f043 0202 	orr.w	r2, r3, #2
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	330c      	adds	r3, #12
 8008b52:	2202      	movs	r2, #2
 8008b54:	4619      	mov	r1, r3
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 f90c 	bl	8008d74 <USBD_CtlSendData>
      break;
 8008b5c:	e004      	b.n	8008b68 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 f88a 	bl	8008c7a <USBD_CtlError>
      break;
 8008b66:	bf00      	nop
  }
}
 8008b68:	bf00      	nop
 8008b6a:	3708      	adds	r7, #8
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	885b      	ldrh	r3, [r3, #2]
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d107      	bne.n	8008b92 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2201      	movs	r2, #1
 8008b86:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f953 	bl	8008e36 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008b90:	e013      	b.n	8008bba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	885b      	ldrh	r3, [r3, #2]
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d10b      	bne.n	8008bb2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	889b      	ldrh	r3, [r3, #4]
 8008b9e:	0a1b      	lsrs	r3, r3, #8
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	b2da      	uxtb	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 f943 	bl	8008e36 <USBD_CtlSendStatus>
}
 8008bb0:	e003      	b.n	8008bba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008bb2:	6839      	ldr	r1, [r7, #0]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 f860 	bl	8008c7a <USBD_CtlError>
}
 8008bba:	bf00      	nop
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b082      	sub	sp, #8
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
 8008bca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	3b01      	subs	r3, #1
 8008bd6:	2b02      	cmp	r3, #2
 8008bd8:	d80b      	bhi.n	8008bf2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	885b      	ldrh	r3, [r3, #2]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d10c      	bne.n	8008bfc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 f923 	bl	8008e36 <USBD_CtlSendStatus>
      }
      break;
 8008bf0:	e004      	b.n	8008bfc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008bf2:	6839      	ldr	r1, [r7, #0]
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 f840 	bl	8008c7a <USBD_CtlError>
      break;
 8008bfa:	e000      	b.n	8008bfe <USBD_ClrFeature+0x3c>
      break;
 8008bfc:	bf00      	nop
  }
}
 8008bfe:	bf00      	nop
 8008c00:	3708      	adds	r7, #8
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b084      	sub	sp, #16
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
 8008c0e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	781a      	ldrb	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	781a      	ldrb	r2, [r3, #0]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f7ff fa3d 	bl	80080b0 <SWAPBYTE>
 8008c36:	4603      	mov	r3, r0
 8008c38:	461a      	mov	r2, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	3301      	adds	r3, #1
 8008c42:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	3301      	adds	r3, #1
 8008c48:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f7ff fa30 	bl	80080b0 <SWAPBYTE>
 8008c50:	4603      	mov	r3, r0
 8008c52:	461a      	mov	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	3301      	adds	r3, #1
 8008c62:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f7ff fa23 	bl	80080b0 <SWAPBYTE>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	80da      	strh	r2, [r3, #6]
}
 8008c72:	bf00      	nop
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b082      	sub	sp, #8
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
 8008c82:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c84:	2180      	movs	r1, #128	@ 0x80
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f002 f854 	bl	800ad34 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f002 f850 	bl	800ad34 <USBD_LL_StallEP>
}
 8008c94:	bf00      	nop
 8008c96:	3708      	adds	r7, #8
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b086      	sub	sp, #24
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d042      	beq.n	8008d38 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008cb6:	6938      	ldr	r0, [r7, #16]
 8008cb8:	f000 f842 	bl	8008d40 <USBD_GetLen>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	005b      	lsls	r3, r3, #1
 8008cc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cc6:	d808      	bhi.n	8008cda <USBD_GetString+0x3e>
 8008cc8:	6938      	ldr	r0, [r7, #16]
 8008cca:	f000 f839 	bl	8008d40 <USBD_GetLen>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	005b      	lsls	r3, r3, #1
 8008cd6:	b29a      	uxth	r2, r3
 8008cd8:	e001      	b.n	8008cde <USBD_GetString+0x42>
 8008cda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008ce2:	7dfb      	ldrb	r3, [r7, #23]
 8008ce4:	68ba      	ldr	r2, [r7, #8]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	7812      	ldrb	r2, [r2, #0]
 8008cec:	701a      	strb	r2, [r3, #0]
  idx++;
 8008cee:	7dfb      	ldrb	r3, [r7, #23]
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008cf4:	7dfb      	ldrb	r3, [r7, #23]
 8008cf6:	68ba      	ldr	r2, [r7, #8]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	2203      	movs	r2, #3
 8008cfc:	701a      	strb	r2, [r3, #0]
  idx++;
 8008cfe:	7dfb      	ldrb	r3, [r7, #23]
 8008d00:	3301      	adds	r3, #1
 8008d02:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008d04:	e013      	b.n	8008d2e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008d06:	7dfb      	ldrb	r3, [r7, #23]
 8008d08:	68ba      	ldr	r2, [r7, #8]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	693a      	ldr	r2, [r7, #16]
 8008d0e:	7812      	ldrb	r2, [r2, #0]
 8008d10:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	3301      	adds	r3, #1
 8008d16:	613b      	str	r3, [r7, #16]
    idx++;
 8008d18:	7dfb      	ldrb	r3, [r7, #23]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008d1e:	7dfb      	ldrb	r3, [r7, #23]
 8008d20:	68ba      	ldr	r2, [r7, #8]
 8008d22:	4413      	add	r3, r2
 8008d24:	2200      	movs	r2, #0
 8008d26:	701a      	strb	r2, [r3, #0]
    idx++;
 8008d28:	7dfb      	ldrb	r3, [r7, #23]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d1e7      	bne.n	8008d06 <USBD_GetString+0x6a>
 8008d36:	e000      	b.n	8008d3a <USBD_GetString+0x9e>
    return;
 8008d38:	bf00      	nop
  }
}
 8008d3a:	3718      	adds	r7, #24
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008d50:	e005      	b.n	8008d5e <USBD_GetLen+0x1e>
  {
    len++;
 8008d52:	7bfb      	ldrb	r3, [r7, #15]
 8008d54:	3301      	adds	r3, #1
 8008d56:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1f5      	bne.n	8008d52 <USBD_GetLen+0x12>
  }

  return len;
 8008d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3714      	adds	r7, #20
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2202      	movs	r2, #2
 8008d84:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	68ba      	ldr	r2, [r7, #8]
 8008d92:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	68ba      	ldr	r2, [r7, #8]
 8008d9e:	2100      	movs	r1, #0
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f002 f850 	bl	800ae46 <USBD_LL_Transmit>

  return USBD_OK;
 8008da6:	2300      	movs	r3, #0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3710      	adds	r7, #16
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	68ba      	ldr	r2, [r7, #8]
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	f002 f83f 	bl	800ae46 <USBD_LL_Transmit>

  return USBD_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b084      	sub	sp, #16
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	60f8      	str	r0, [r7, #12]
 8008dda:	60b9      	str	r1, [r7, #8]
 8008ddc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2203      	movs	r2, #3
 8008de2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	68ba      	ldr	r2, [r7, #8]
 8008df2:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	68ba      	ldr	r2, [r7, #8]
 8008e02:	2100      	movs	r1, #0
 8008e04:	68f8      	ldr	r0, [r7, #12]
 8008e06:	f002 f83f 	bl	800ae88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	68ba      	ldr	r2, [r7, #8]
 8008e24:	2100      	movs	r1, #0
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	f002 f82e 	bl	800ae88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e2c:	2300      	movs	r3, #0
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e36:	b580      	push	{r7, lr}
 8008e38:	b082      	sub	sp, #8
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2204      	movs	r2, #4
 8008e42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008e46:	2300      	movs	r3, #0
 8008e48:	2200      	movs	r2, #0
 8008e4a:	2100      	movs	r1, #0
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f001 fffa 	bl	800ae46 <USBD_LL_Transmit>

  return USBD_OK;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3708      	adds	r7, #8
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2205      	movs	r2, #5
 8008e68:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	2200      	movs	r2, #0
 8008e70:	2100      	movs	r1, #0
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f002 f808 	bl	800ae88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3708      	adds	r7, #8
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008e82:	b480      	push	{r7}
 8008e84:	b085      	sub	sp, #20
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	4603      	mov	r3, r0
 8008e8a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008e90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e94:	2b84      	cmp	r3, #132	@ 0x84
 8008e96:	d005      	beq.n	8008ea4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008e98:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	3303      	adds	r3, #3
 8008ea2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3714      	adds	r7, #20
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr

08008eb2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008eb6:	f000 fad1 	bl	800945c <vTaskStartScheduler>
  
  return osOK;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ec2:	b089      	sub	sp, #36	@ 0x24
 8008ec4:	af04      	add	r7, sp, #16
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	695b      	ldr	r3, [r3, #20]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d020      	beq.n	8008f14 <osThreadCreate+0x54>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	699b      	ldr	r3, [r3, #24]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d01c      	beq.n	8008f14 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	685c      	ldr	r4, [r3, #4]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	691e      	ldr	r6, [r3, #16]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008eec:	4618      	mov	r0, r3
 8008eee:	f7ff ffc8 	bl	8008e82 <makeFreeRtosPriority>
 8008ef2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	695b      	ldr	r3, [r3, #20]
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008efc:	9202      	str	r2, [sp, #8]
 8008efe:	9301      	str	r3, [sp, #4]
 8008f00:	9100      	str	r1, [sp, #0]
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	4632      	mov	r2, r6
 8008f06:	4629      	mov	r1, r5
 8008f08:	4620      	mov	r0, r4
 8008f0a:	f000 f8d9 	bl	80090c0 <xTaskCreateStatic>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	60fb      	str	r3, [r7, #12]
 8008f12:	e01c      	b.n	8008f4e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	685c      	ldr	r4, [r3, #4]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008f20:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7ff ffaa 	bl	8008e82 <makeFreeRtosPriority>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	f107 030c 	add.w	r3, r7, #12
 8008f34:	9301      	str	r3, [sp, #4]
 8008f36:	9200      	str	r2, [sp, #0]
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	4632      	mov	r2, r6
 8008f3c:	4629      	mov	r1, r5
 8008f3e:	4620      	mov	r0, r4
 8008f40:	f000 f91e 	bl	8009180 <xTaskCreate>
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d001      	beq.n	8008f4e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	e000      	b.n	8008f50 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3714      	adds	r7, #20
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008f58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f103 0208 	add.w	r2, r3, #8
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f103 0208 	add.w	r2, r3, #8
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f103 0208 	add.w	r2, r3, #8
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008f8c:	bf00      	nop
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008fa6:	bf00      	nop
 8008fa8:	370c      	adds	r7, #12
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr

08008fb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008fb2:	b480      	push	{r7}
 8008fb4:	b085      	sub	sp, #20
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
 8008fba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	689a      	ldr	r2, [r3, #8]
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	683a      	ldr	r2, [r7, #0]
 8008fd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	683a      	ldr	r2, [r7, #0]
 8008fdc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	1c5a      	adds	r2, r3, #1
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	601a      	str	r2, [r3, #0]
}
 8008fee:	bf00      	nop
 8008ff0:	3714      	adds	r7, #20
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr

08008ffa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ffa:	b480      	push	{r7}
 8008ffc:	b085      	sub	sp, #20
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
 8009002:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009010:	d103      	bne.n	800901a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	60fb      	str	r3, [r7, #12]
 8009018:	e00c      	b.n	8009034 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	3308      	adds	r3, #8
 800901e:	60fb      	str	r3, [r7, #12]
 8009020:	e002      	b.n	8009028 <vListInsert+0x2e>
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	60fb      	str	r3, [r7, #12]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	68ba      	ldr	r2, [r7, #8]
 8009030:	429a      	cmp	r2, r3
 8009032:	d2f6      	bcs.n	8009022 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	685a      	ldr	r2, [r3, #4]
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	683a      	ldr	r2, [r7, #0]
 8009042:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	683a      	ldr	r2, [r7, #0]
 800904e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	1c5a      	adds	r2, r3, #1
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	601a      	str	r2, [r3, #0]
}
 8009060:	bf00      	nop
 8009062:	3714      	adds	r7, #20
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800906c:	b480      	push	{r7}
 800906e:	b085      	sub	sp, #20
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	691b      	ldr	r3, [r3, #16]
 8009078:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	6892      	ldr	r2, [r2, #8]
 8009082:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	6852      	ldr	r2, [r2, #4]
 800908c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	429a      	cmp	r2, r3
 8009096:	d103      	bne.n	80090a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	689a      	ldr	r2, [r3, #8]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	1e5a      	subs	r2, r3, #1
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3714      	adds	r7, #20
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b08e      	sub	sp, #56	@ 0x38
 80090c4:	af04      	add	r7, sp, #16
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	607a      	str	r2, [r7, #4]
 80090cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80090ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d10b      	bne.n	80090ec <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80090d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d8:	f383 8811 	msr	BASEPRI, r3
 80090dc:	f3bf 8f6f 	isb	sy
 80090e0:	f3bf 8f4f 	dsb	sy
 80090e4:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80090e6:	bf00      	nop
 80090e8:	bf00      	nop
 80090ea:	e7fd      	b.n	80090e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80090ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d10b      	bne.n	800910a <xTaskCreateStatic+0x4a>
	__asm volatile
 80090f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f6:	f383 8811 	msr	BASEPRI, r3
 80090fa:	f3bf 8f6f 	isb	sy
 80090fe:	f3bf 8f4f 	dsb	sy
 8009102:	61fb      	str	r3, [r7, #28]
}
 8009104:	bf00      	nop
 8009106:	bf00      	nop
 8009108:	e7fd      	b.n	8009106 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800910a:	2354      	movs	r3, #84	@ 0x54
 800910c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	2b54      	cmp	r3, #84	@ 0x54
 8009112:	d00b      	beq.n	800912c <xTaskCreateStatic+0x6c>
	__asm volatile
 8009114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009118:	f383 8811 	msr	BASEPRI, r3
 800911c:	f3bf 8f6f 	isb	sy
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	61bb      	str	r3, [r7, #24]
}
 8009126:	bf00      	nop
 8009128:	bf00      	nop
 800912a:	e7fd      	b.n	8009128 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800912c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800912e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009130:	2b00      	cmp	r3, #0
 8009132:	d01e      	beq.n	8009172 <xTaskCreateStatic+0xb2>
 8009134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009136:	2b00      	cmp	r3, #0
 8009138:	d01b      	beq.n	8009172 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800913a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800913c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800913e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009140:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009142:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009146:	2202      	movs	r2, #2
 8009148:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800914c:	2300      	movs	r3, #0
 800914e:	9303      	str	r3, [sp, #12]
 8009150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009152:	9302      	str	r3, [sp, #8]
 8009154:	f107 0314 	add.w	r3, r7, #20
 8009158:	9301      	str	r3, [sp, #4]
 800915a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800915c:	9300      	str	r3, [sp, #0]
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	68b9      	ldr	r1, [r7, #8]
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f000 f850 	bl	800920a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800916a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800916c:	f000 f8d6 	bl	800931c <prvAddNewTaskToReadyList>
 8009170:	e001      	b.n	8009176 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009172:	2300      	movs	r3, #0
 8009174:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009176:	697b      	ldr	r3, [r7, #20]
	}
 8009178:	4618      	mov	r0, r3
 800917a:	3728      	adds	r7, #40	@ 0x28
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009180:	b580      	push	{r7, lr}
 8009182:	b08c      	sub	sp, #48	@ 0x30
 8009184:	af04      	add	r7, sp, #16
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	603b      	str	r3, [r7, #0]
 800918c:	4613      	mov	r3, r2
 800918e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009190:	88fb      	ldrh	r3, [r7, #6]
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	4618      	mov	r0, r3
 8009196:	f000 fff1 	bl	800a17c <pvPortMalloc>
 800919a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00e      	beq.n	80091c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80091a2:	2054      	movs	r0, #84	@ 0x54
 80091a4:	f000 ffea 	bl	800a17c <pvPortMalloc>
 80091a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d003      	beq.n	80091b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	697a      	ldr	r2, [r7, #20]
 80091b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80091b6:	e005      	b.n	80091c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80091b8:	6978      	ldr	r0, [r7, #20]
 80091ba:	f001 f8ad 	bl	800a318 <vPortFree>
 80091be:	e001      	b.n	80091c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80091c0:	2300      	movs	r3, #0
 80091c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80091c4:	69fb      	ldr	r3, [r7, #28]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d017      	beq.n	80091fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80091d2:	88fa      	ldrh	r2, [r7, #6]
 80091d4:	2300      	movs	r3, #0
 80091d6:	9303      	str	r3, [sp, #12]
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	9302      	str	r3, [sp, #8]
 80091dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091de:	9301      	str	r3, [sp, #4]
 80091e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e2:	9300      	str	r3, [sp, #0]
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	68b9      	ldr	r1, [r7, #8]
 80091e8:	68f8      	ldr	r0, [r7, #12]
 80091ea:	f000 f80e 	bl	800920a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091ee:	69f8      	ldr	r0, [r7, #28]
 80091f0:	f000 f894 	bl	800931c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80091f4:	2301      	movs	r3, #1
 80091f6:	61bb      	str	r3, [r7, #24]
 80091f8:	e002      	b.n	8009200 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80091fa:	f04f 33ff 	mov.w	r3, #4294967295
 80091fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009200:	69bb      	ldr	r3, [r7, #24]
	}
 8009202:	4618      	mov	r0, r3
 8009204:	3720      	adds	r7, #32
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b088      	sub	sp, #32
 800920e:	af00      	add	r7, sp, #0
 8009210:	60f8      	str	r0, [r7, #12]
 8009212:	60b9      	str	r1, [r7, #8]
 8009214:	607a      	str	r2, [r7, #4]
 8009216:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800921a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009222:	3b01      	subs	r3, #1
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	4413      	add	r3, r2
 8009228:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	f023 0307 	bic.w	r3, r3, #7
 8009230:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	f003 0307 	and.w	r3, r3, #7
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00b      	beq.n	8009254 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800923c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009240:	f383 8811 	msr	BASEPRI, r3
 8009244:	f3bf 8f6f 	isb	sy
 8009248:	f3bf 8f4f 	dsb	sy
 800924c:	617b      	str	r3, [r7, #20]
}
 800924e:	bf00      	nop
 8009250:	bf00      	nop
 8009252:	e7fd      	b.n	8009250 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d01f      	beq.n	800929a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800925a:	2300      	movs	r3, #0
 800925c:	61fb      	str	r3, [r7, #28]
 800925e:	e012      	b.n	8009286 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009260:	68ba      	ldr	r2, [r7, #8]
 8009262:	69fb      	ldr	r3, [r7, #28]
 8009264:	4413      	add	r3, r2
 8009266:	7819      	ldrb	r1, [r3, #0]
 8009268:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800926a:	69fb      	ldr	r3, [r7, #28]
 800926c:	4413      	add	r3, r2
 800926e:	3334      	adds	r3, #52	@ 0x34
 8009270:	460a      	mov	r2, r1
 8009272:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009274:	68ba      	ldr	r2, [r7, #8]
 8009276:	69fb      	ldr	r3, [r7, #28]
 8009278:	4413      	add	r3, r2
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d006      	beq.n	800928e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009280:	69fb      	ldr	r3, [r7, #28]
 8009282:	3301      	adds	r3, #1
 8009284:	61fb      	str	r3, [r7, #28]
 8009286:	69fb      	ldr	r3, [r7, #28]
 8009288:	2b0f      	cmp	r3, #15
 800928a:	d9e9      	bls.n	8009260 <prvInitialiseNewTask+0x56>
 800928c:	e000      	b.n	8009290 <prvInitialiseNewTask+0x86>
			{
				break;
 800928e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009292:	2200      	movs	r2, #0
 8009294:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009298:	e003      	b.n	80092a2 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800929a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800929c:	2200      	movs	r2, #0
 800929e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80092a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a4:	2b06      	cmp	r3, #6
 80092a6:	d901      	bls.n	80092ac <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80092a8:	2306      	movs	r3, #6
 80092aa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80092ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80092b0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80092b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80092b6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80092b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ba:	2200      	movs	r2, #0
 80092bc:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80092be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c0:	3304      	adds	r3, #4
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7ff fe68 	bl	8008f98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80092c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ca:	3318      	adds	r3, #24
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7ff fe63 	bl	8008f98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80092d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092da:	f1c3 0207 	rsb	r2, r3, #7
 80092de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80092e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092e6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80092e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ea:	2200      	movs	r2, #0
 80092ec:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80092ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f0:	2200      	movs	r2, #0
 80092f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80092f6:	683a      	ldr	r2, [r7, #0]
 80092f8:	68f9      	ldr	r1, [r7, #12]
 80092fa:	69b8      	ldr	r0, [r7, #24]
 80092fc:	f000 fcea 	bl	8009cd4 <pxPortInitialiseStack>
 8009300:	4602      	mov	r2, r0
 8009302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009304:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009308:	2b00      	cmp	r3, #0
 800930a:	d002      	beq.n	8009312 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800930c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800930e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009310:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009312:	bf00      	nop
 8009314:	3720      	adds	r7, #32
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
	...

0800931c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009324:	f000 fe08 	bl	8009f38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009328:	4b2a      	ldr	r3, [pc, #168]	@ (80093d4 <prvAddNewTaskToReadyList+0xb8>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	3301      	adds	r3, #1
 800932e:	4a29      	ldr	r2, [pc, #164]	@ (80093d4 <prvAddNewTaskToReadyList+0xb8>)
 8009330:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009332:	4b29      	ldr	r3, [pc, #164]	@ (80093d8 <prvAddNewTaskToReadyList+0xbc>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d109      	bne.n	800934e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800933a:	4a27      	ldr	r2, [pc, #156]	@ (80093d8 <prvAddNewTaskToReadyList+0xbc>)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009340:	4b24      	ldr	r3, [pc, #144]	@ (80093d4 <prvAddNewTaskToReadyList+0xb8>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2b01      	cmp	r3, #1
 8009346:	d110      	bne.n	800936a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009348:	f000 fac4 	bl	80098d4 <prvInitialiseTaskLists>
 800934c:	e00d      	b.n	800936a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800934e:	4b23      	ldr	r3, [pc, #140]	@ (80093dc <prvAddNewTaskToReadyList+0xc0>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d109      	bne.n	800936a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009356:	4b20      	ldr	r3, [pc, #128]	@ (80093d8 <prvAddNewTaskToReadyList+0xbc>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009360:	429a      	cmp	r2, r3
 8009362:	d802      	bhi.n	800936a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009364:	4a1c      	ldr	r2, [pc, #112]	@ (80093d8 <prvAddNewTaskToReadyList+0xbc>)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800936a:	4b1d      	ldr	r3, [pc, #116]	@ (80093e0 <prvAddNewTaskToReadyList+0xc4>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	3301      	adds	r3, #1
 8009370:	4a1b      	ldr	r2, [pc, #108]	@ (80093e0 <prvAddNewTaskToReadyList+0xc4>)
 8009372:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009378:	2201      	movs	r2, #1
 800937a:	409a      	lsls	r2, r3
 800937c:	4b19      	ldr	r3, [pc, #100]	@ (80093e4 <prvAddNewTaskToReadyList+0xc8>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4313      	orrs	r3, r2
 8009382:	4a18      	ldr	r2, [pc, #96]	@ (80093e4 <prvAddNewTaskToReadyList+0xc8>)
 8009384:	6013      	str	r3, [r2, #0]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800938a:	4613      	mov	r3, r2
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	4413      	add	r3, r2
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	4a15      	ldr	r2, [pc, #84]	@ (80093e8 <prvAddNewTaskToReadyList+0xcc>)
 8009394:	441a      	add	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	3304      	adds	r3, #4
 800939a:	4619      	mov	r1, r3
 800939c:	4610      	mov	r0, r2
 800939e:	f7ff fe08 	bl	8008fb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80093a2:	f000 fdfb 	bl	8009f9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80093a6:	4b0d      	ldr	r3, [pc, #52]	@ (80093dc <prvAddNewTaskToReadyList+0xc0>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00e      	beq.n	80093cc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80093ae:	4b0a      	ldr	r3, [pc, #40]	@ (80093d8 <prvAddNewTaskToReadyList+0xbc>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d207      	bcs.n	80093cc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80093bc:	4b0b      	ldr	r3, [pc, #44]	@ (80093ec <prvAddNewTaskToReadyList+0xd0>)
 80093be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093c2:	601a      	str	r2, [r3, #0]
 80093c4:	f3bf 8f4f 	dsb	sy
 80093c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093cc:	bf00      	nop
 80093ce:	3708      	adds	r7, #8
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	20000e94 	.word	0x20000e94
 80093d8:	20000d94 	.word	0x20000d94
 80093dc:	20000ea0 	.word	0x20000ea0
 80093e0:	20000eb0 	.word	0x20000eb0
 80093e4:	20000e9c 	.word	0x20000e9c
 80093e8:	20000d98 	.word	0x20000d98
 80093ec:	e000ed04 	.word	0xe000ed04

080093f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80093f8:	2300      	movs	r3, #0
 80093fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d018      	beq.n	8009434 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009402:	4b14      	ldr	r3, [pc, #80]	@ (8009454 <vTaskDelay+0x64>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00b      	beq.n	8009422 <vTaskDelay+0x32>
	__asm volatile
 800940a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800940e:	f383 8811 	msr	BASEPRI, r3
 8009412:	f3bf 8f6f 	isb	sy
 8009416:	f3bf 8f4f 	dsb	sy
 800941a:	60bb      	str	r3, [r7, #8]
}
 800941c:	bf00      	nop
 800941e:	bf00      	nop
 8009420:	e7fd      	b.n	800941e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009422:	f000 f87d 	bl	8009520 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009426:	2100      	movs	r1, #0
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 fbed 	bl	8009c08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800942e:	f000 f885 	bl	800953c <xTaskResumeAll>
 8009432:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d107      	bne.n	800944a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800943a:	4b07      	ldr	r3, [pc, #28]	@ (8009458 <vTaskDelay+0x68>)
 800943c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009440:	601a      	str	r2, [r3, #0]
 8009442:	f3bf 8f4f 	dsb	sy
 8009446:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800944a:	bf00      	nop
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	20000ebc 	.word	0x20000ebc
 8009458:	e000ed04 	.word	0xe000ed04

0800945c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b08a      	sub	sp, #40	@ 0x28
 8009460:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009462:	2300      	movs	r3, #0
 8009464:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009466:	2300      	movs	r3, #0
 8009468:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800946a:	463a      	mov	r2, r7
 800946c:	1d39      	adds	r1, r7, #4
 800946e:	f107 0308 	add.w	r3, r7, #8
 8009472:	4618      	mov	r0, r3
 8009474:	f7f7 fd36 	bl	8000ee4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009478:	6839      	ldr	r1, [r7, #0]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	68ba      	ldr	r2, [r7, #8]
 800947e:	9202      	str	r2, [sp, #8]
 8009480:	9301      	str	r3, [sp, #4]
 8009482:	2300      	movs	r3, #0
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	2300      	movs	r3, #0
 8009488:	460a      	mov	r2, r1
 800948a:	491f      	ldr	r1, [pc, #124]	@ (8009508 <vTaskStartScheduler+0xac>)
 800948c:	481f      	ldr	r0, [pc, #124]	@ (800950c <vTaskStartScheduler+0xb0>)
 800948e:	f7ff fe17 	bl	80090c0 <xTaskCreateStatic>
 8009492:	4603      	mov	r3, r0
 8009494:	4a1e      	ldr	r2, [pc, #120]	@ (8009510 <vTaskStartScheduler+0xb4>)
 8009496:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009498:	4b1d      	ldr	r3, [pc, #116]	@ (8009510 <vTaskStartScheduler+0xb4>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d002      	beq.n	80094a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80094a0:	2301      	movs	r3, #1
 80094a2:	617b      	str	r3, [r7, #20]
 80094a4:	e001      	b.n	80094aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80094a6:	2300      	movs	r3, #0
 80094a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d116      	bne.n	80094de <vTaskStartScheduler+0x82>
	__asm volatile
 80094b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094b4:	f383 8811 	msr	BASEPRI, r3
 80094b8:	f3bf 8f6f 	isb	sy
 80094bc:	f3bf 8f4f 	dsb	sy
 80094c0:	613b      	str	r3, [r7, #16]
}
 80094c2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80094c4:	4b13      	ldr	r3, [pc, #76]	@ (8009514 <vTaskStartScheduler+0xb8>)
 80094c6:	f04f 32ff 	mov.w	r2, #4294967295
 80094ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80094cc:	4b12      	ldr	r3, [pc, #72]	@ (8009518 <vTaskStartScheduler+0xbc>)
 80094ce:	2201      	movs	r2, #1
 80094d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80094d2:	4b12      	ldr	r3, [pc, #72]	@ (800951c <vTaskStartScheduler+0xc0>)
 80094d4:	2200      	movs	r2, #0
 80094d6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80094d8:	f000 fc8a 	bl	8009df0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80094dc:	e00f      	b.n	80094fe <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e4:	d10b      	bne.n	80094fe <vTaskStartScheduler+0xa2>
	__asm volatile
 80094e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ea:	f383 8811 	msr	BASEPRI, r3
 80094ee:	f3bf 8f6f 	isb	sy
 80094f2:	f3bf 8f4f 	dsb	sy
 80094f6:	60fb      	str	r3, [r7, #12]
}
 80094f8:	bf00      	nop
 80094fa:	bf00      	nop
 80094fc:	e7fd      	b.n	80094fa <vTaskStartScheduler+0x9e>
}
 80094fe:	bf00      	nop
 8009500:	3718      	adds	r7, #24
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	0800e3e8 	.word	0x0800e3e8
 800950c:	080098a5 	.word	0x080098a5
 8009510:	20000eb8 	.word	0x20000eb8
 8009514:	20000eb4 	.word	0x20000eb4
 8009518:	20000ea0 	.word	0x20000ea0
 800951c:	20000e98 	.word	0x20000e98

08009520 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009520:	b480      	push	{r7}
 8009522:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009524:	4b04      	ldr	r3, [pc, #16]	@ (8009538 <vTaskSuspendAll+0x18>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	3301      	adds	r3, #1
 800952a:	4a03      	ldr	r2, [pc, #12]	@ (8009538 <vTaskSuspendAll+0x18>)
 800952c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800952e:	bf00      	nop
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr
 8009538:	20000ebc 	.word	0x20000ebc

0800953c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009542:	2300      	movs	r3, #0
 8009544:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009546:	2300      	movs	r3, #0
 8009548:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800954a:	4b42      	ldr	r3, [pc, #264]	@ (8009654 <xTaskResumeAll+0x118>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d10b      	bne.n	800956a <xTaskResumeAll+0x2e>
	__asm volatile
 8009552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009556:	f383 8811 	msr	BASEPRI, r3
 800955a:	f3bf 8f6f 	isb	sy
 800955e:	f3bf 8f4f 	dsb	sy
 8009562:	603b      	str	r3, [r7, #0]
}
 8009564:	bf00      	nop
 8009566:	bf00      	nop
 8009568:	e7fd      	b.n	8009566 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800956a:	f000 fce5 	bl	8009f38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800956e:	4b39      	ldr	r3, [pc, #228]	@ (8009654 <xTaskResumeAll+0x118>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	3b01      	subs	r3, #1
 8009574:	4a37      	ldr	r2, [pc, #220]	@ (8009654 <xTaskResumeAll+0x118>)
 8009576:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009578:	4b36      	ldr	r3, [pc, #216]	@ (8009654 <xTaskResumeAll+0x118>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d161      	bne.n	8009644 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009580:	4b35      	ldr	r3, [pc, #212]	@ (8009658 <xTaskResumeAll+0x11c>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d05d      	beq.n	8009644 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009588:	e02e      	b.n	80095e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800958a:	4b34      	ldr	r3, [pc, #208]	@ (800965c <xTaskResumeAll+0x120>)
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	3318      	adds	r3, #24
 8009596:	4618      	mov	r0, r3
 8009598:	f7ff fd68 	bl	800906c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	3304      	adds	r3, #4
 80095a0:	4618      	mov	r0, r3
 80095a2:	f7ff fd63 	bl	800906c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095aa:	2201      	movs	r2, #1
 80095ac:	409a      	lsls	r2, r3
 80095ae:	4b2c      	ldr	r3, [pc, #176]	@ (8009660 <xTaskResumeAll+0x124>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	4a2a      	ldr	r2, [pc, #168]	@ (8009660 <xTaskResumeAll+0x124>)
 80095b6:	6013      	str	r3, [r2, #0]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095bc:	4613      	mov	r3, r2
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	4413      	add	r3, r2
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	4a27      	ldr	r2, [pc, #156]	@ (8009664 <xTaskResumeAll+0x128>)
 80095c6:	441a      	add	r2, r3
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	3304      	adds	r3, #4
 80095cc:	4619      	mov	r1, r3
 80095ce:	4610      	mov	r0, r2
 80095d0:	f7ff fcef 	bl	8008fb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095d8:	4b23      	ldr	r3, [pc, #140]	@ (8009668 <xTaskResumeAll+0x12c>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095de:	429a      	cmp	r2, r3
 80095e0:	d302      	bcc.n	80095e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80095e2:	4b22      	ldr	r3, [pc, #136]	@ (800966c <xTaskResumeAll+0x130>)
 80095e4:	2201      	movs	r2, #1
 80095e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095e8:	4b1c      	ldr	r3, [pc, #112]	@ (800965c <xTaskResumeAll+0x120>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1cc      	bne.n	800958a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d001      	beq.n	80095fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80095f6:	f000 fa0b 	bl	8009a10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80095fa:	4b1d      	ldr	r3, [pc, #116]	@ (8009670 <xTaskResumeAll+0x134>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d010      	beq.n	8009628 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009606:	f000 f837 	bl	8009678 <xTaskIncrementTick>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d002      	beq.n	8009616 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009610:	4b16      	ldr	r3, [pc, #88]	@ (800966c <xTaskResumeAll+0x130>)
 8009612:	2201      	movs	r2, #1
 8009614:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	3b01      	subs	r3, #1
 800961a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d1f1      	bne.n	8009606 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009622:	4b13      	ldr	r3, [pc, #76]	@ (8009670 <xTaskResumeAll+0x134>)
 8009624:	2200      	movs	r2, #0
 8009626:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009628:	4b10      	ldr	r3, [pc, #64]	@ (800966c <xTaskResumeAll+0x130>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d009      	beq.n	8009644 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009630:	2301      	movs	r3, #1
 8009632:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009634:	4b0f      	ldr	r3, [pc, #60]	@ (8009674 <xTaskResumeAll+0x138>)
 8009636:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800963a:	601a      	str	r2, [r3, #0]
 800963c:	f3bf 8f4f 	dsb	sy
 8009640:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009644:	f000 fcaa 	bl	8009f9c <vPortExitCritical>

	return xAlreadyYielded;
 8009648:	68bb      	ldr	r3, [r7, #8]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	20000ebc 	.word	0x20000ebc
 8009658:	20000e94 	.word	0x20000e94
 800965c:	20000e54 	.word	0x20000e54
 8009660:	20000e9c 	.word	0x20000e9c
 8009664:	20000d98 	.word	0x20000d98
 8009668:	20000d94 	.word	0x20000d94
 800966c:	20000ea8 	.word	0x20000ea8
 8009670:	20000ea4 	.word	0x20000ea4
 8009674:	e000ed04 	.word	0xe000ed04

08009678 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b086      	sub	sp, #24
 800967c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800967e:	2300      	movs	r3, #0
 8009680:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009682:	4b4f      	ldr	r3, [pc, #316]	@ (80097c0 <xTaskIncrementTick+0x148>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	2b00      	cmp	r3, #0
 8009688:	f040 808f 	bne.w	80097aa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800968c:	4b4d      	ldr	r3, [pc, #308]	@ (80097c4 <xTaskIncrementTick+0x14c>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	3301      	adds	r3, #1
 8009692:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009694:	4a4b      	ldr	r2, [pc, #300]	@ (80097c4 <xTaskIncrementTick+0x14c>)
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d121      	bne.n	80096e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80096a0:	4b49      	ldr	r3, [pc, #292]	@ (80097c8 <xTaskIncrementTick+0x150>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00b      	beq.n	80096c2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80096aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ae:	f383 8811 	msr	BASEPRI, r3
 80096b2:	f3bf 8f6f 	isb	sy
 80096b6:	f3bf 8f4f 	dsb	sy
 80096ba:	603b      	str	r3, [r7, #0]
}
 80096bc:	bf00      	nop
 80096be:	bf00      	nop
 80096c0:	e7fd      	b.n	80096be <xTaskIncrementTick+0x46>
 80096c2:	4b41      	ldr	r3, [pc, #260]	@ (80097c8 <xTaskIncrementTick+0x150>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	60fb      	str	r3, [r7, #12]
 80096c8:	4b40      	ldr	r3, [pc, #256]	@ (80097cc <xTaskIncrementTick+0x154>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a3e      	ldr	r2, [pc, #248]	@ (80097c8 <xTaskIncrementTick+0x150>)
 80096ce:	6013      	str	r3, [r2, #0]
 80096d0:	4a3e      	ldr	r2, [pc, #248]	@ (80097cc <xTaskIncrementTick+0x154>)
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	6013      	str	r3, [r2, #0]
 80096d6:	4b3e      	ldr	r3, [pc, #248]	@ (80097d0 <xTaskIncrementTick+0x158>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	3301      	adds	r3, #1
 80096dc:	4a3c      	ldr	r2, [pc, #240]	@ (80097d0 <xTaskIncrementTick+0x158>)
 80096de:	6013      	str	r3, [r2, #0]
 80096e0:	f000 f996 	bl	8009a10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80096e4:	4b3b      	ldr	r3, [pc, #236]	@ (80097d4 <xTaskIncrementTick+0x15c>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	693a      	ldr	r2, [r7, #16]
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d348      	bcc.n	8009780 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096ee:	4b36      	ldr	r3, [pc, #216]	@ (80097c8 <xTaskIncrementTick+0x150>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d104      	bne.n	8009702 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096f8:	4b36      	ldr	r3, [pc, #216]	@ (80097d4 <xTaskIncrementTick+0x15c>)
 80096fa:	f04f 32ff 	mov.w	r2, #4294967295
 80096fe:	601a      	str	r2, [r3, #0]
					break;
 8009700:	e03e      	b.n	8009780 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009702:	4b31      	ldr	r3, [pc, #196]	@ (80097c8 <xTaskIncrementTick+0x150>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009712:	693a      	ldr	r2, [r7, #16]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	429a      	cmp	r2, r3
 8009718:	d203      	bcs.n	8009722 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800971a:	4a2e      	ldr	r2, [pc, #184]	@ (80097d4 <xTaskIncrementTick+0x15c>)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009720:	e02e      	b.n	8009780 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	3304      	adds	r3, #4
 8009726:	4618      	mov	r0, r3
 8009728:	f7ff fca0 	bl	800906c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009730:	2b00      	cmp	r3, #0
 8009732:	d004      	beq.n	800973e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	3318      	adds	r3, #24
 8009738:	4618      	mov	r0, r3
 800973a:	f7ff fc97 	bl	800906c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009742:	2201      	movs	r2, #1
 8009744:	409a      	lsls	r2, r3
 8009746:	4b24      	ldr	r3, [pc, #144]	@ (80097d8 <xTaskIncrementTick+0x160>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4313      	orrs	r3, r2
 800974c:	4a22      	ldr	r2, [pc, #136]	@ (80097d8 <xTaskIncrementTick+0x160>)
 800974e:	6013      	str	r3, [r2, #0]
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009754:	4613      	mov	r3, r2
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	4413      	add	r3, r2
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	4a1f      	ldr	r2, [pc, #124]	@ (80097dc <xTaskIncrementTick+0x164>)
 800975e:	441a      	add	r2, r3
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	3304      	adds	r3, #4
 8009764:	4619      	mov	r1, r3
 8009766:	4610      	mov	r0, r2
 8009768:	f7ff fc23 	bl	8008fb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009770:	4b1b      	ldr	r3, [pc, #108]	@ (80097e0 <xTaskIncrementTick+0x168>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009776:	429a      	cmp	r2, r3
 8009778:	d3b9      	bcc.n	80096ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800977a:	2301      	movs	r3, #1
 800977c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800977e:	e7b6      	b.n	80096ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009780:	4b17      	ldr	r3, [pc, #92]	@ (80097e0 <xTaskIncrementTick+0x168>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009786:	4915      	ldr	r1, [pc, #84]	@ (80097dc <xTaskIncrementTick+0x164>)
 8009788:	4613      	mov	r3, r2
 800978a:	009b      	lsls	r3, r3, #2
 800978c:	4413      	add	r3, r2
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	440b      	add	r3, r1
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2b01      	cmp	r3, #1
 8009796:	d901      	bls.n	800979c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009798:	2301      	movs	r3, #1
 800979a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800979c:	4b11      	ldr	r3, [pc, #68]	@ (80097e4 <xTaskIncrementTick+0x16c>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d007      	beq.n	80097b4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80097a4:	2301      	movs	r3, #1
 80097a6:	617b      	str	r3, [r7, #20]
 80097a8:	e004      	b.n	80097b4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80097aa:	4b0f      	ldr	r3, [pc, #60]	@ (80097e8 <xTaskIncrementTick+0x170>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	3301      	adds	r3, #1
 80097b0:	4a0d      	ldr	r2, [pc, #52]	@ (80097e8 <xTaskIncrementTick+0x170>)
 80097b2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80097b4:	697b      	ldr	r3, [r7, #20]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3718      	adds	r7, #24
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	20000ebc 	.word	0x20000ebc
 80097c4:	20000e98 	.word	0x20000e98
 80097c8:	20000e4c 	.word	0x20000e4c
 80097cc:	20000e50 	.word	0x20000e50
 80097d0:	20000eac 	.word	0x20000eac
 80097d4:	20000eb4 	.word	0x20000eb4
 80097d8:	20000e9c 	.word	0x20000e9c
 80097dc:	20000d98 	.word	0x20000d98
 80097e0:	20000d94 	.word	0x20000d94
 80097e4:	20000ea8 	.word	0x20000ea8
 80097e8:	20000ea4 	.word	0x20000ea4

080097ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80097ec:	b480      	push	{r7}
 80097ee:	b087      	sub	sp, #28
 80097f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80097f2:	4b27      	ldr	r3, [pc, #156]	@ (8009890 <vTaskSwitchContext+0xa4>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d003      	beq.n	8009802 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80097fa:	4b26      	ldr	r3, [pc, #152]	@ (8009894 <vTaskSwitchContext+0xa8>)
 80097fc:	2201      	movs	r2, #1
 80097fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009800:	e040      	b.n	8009884 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8009802:	4b24      	ldr	r3, [pc, #144]	@ (8009894 <vTaskSwitchContext+0xa8>)
 8009804:	2200      	movs	r2, #0
 8009806:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009808:	4b23      	ldr	r3, [pc, #140]	@ (8009898 <vTaskSwitchContext+0xac>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	fab3 f383 	clz	r3, r3
 8009814:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009816:	7afb      	ldrb	r3, [r7, #11]
 8009818:	f1c3 031f 	rsb	r3, r3, #31
 800981c:	617b      	str	r3, [r7, #20]
 800981e:	491f      	ldr	r1, [pc, #124]	@ (800989c <vTaskSwitchContext+0xb0>)
 8009820:	697a      	ldr	r2, [r7, #20]
 8009822:	4613      	mov	r3, r2
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	4413      	add	r3, r2
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	440b      	add	r3, r1
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d10b      	bne.n	800984a <vTaskSwitchContext+0x5e>
	__asm volatile
 8009832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009836:	f383 8811 	msr	BASEPRI, r3
 800983a:	f3bf 8f6f 	isb	sy
 800983e:	f3bf 8f4f 	dsb	sy
 8009842:	607b      	str	r3, [r7, #4]
}
 8009844:	bf00      	nop
 8009846:	bf00      	nop
 8009848:	e7fd      	b.n	8009846 <vTaskSwitchContext+0x5a>
 800984a:	697a      	ldr	r2, [r7, #20]
 800984c:	4613      	mov	r3, r2
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	4413      	add	r3, r2
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	4a11      	ldr	r2, [pc, #68]	@ (800989c <vTaskSwitchContext+0xb0>)
 8009856:	4413      	add	r3, r2
 8009858:	613b      	str	r3, [r7, #16]
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	685a      	ldr	r2, [r3, #4]
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	605a      	str	r2, [r3, #4]
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	685a      	ldr	r2, [r3, #4]
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	3308      	adds	r3, #8
 800986c:	429a      	cmp	r2, r3
 800986e:	d104      	bne.n	800987a <vTaskSwitchContext+0x8e>
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	685a      	ldr	r2, [r3, #4]
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	605a      	str	r2, [r3, #4]
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	4a07      	ldr	r2, [pc, #28]	@ (80098a0 <vTaskSwitchContext+0xb4>)
 8009882:	6013      	str	r3, [r2, #0]
}
 8009884:	bf00      	nop
 8009886:	371c      	adds	r7, #28
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr
 8009890:	20000ebc 	.word	0x20000ebc
 8009894:	20000ea8 	.word	0x20000ea8
 8009898:	20000e9c 	.word	0x20000e9c
 800989c:	20000d98 	.word	0x20000d98
 80098a0:	20000d94 	.word	0x20000d94

080098a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80098ac:	f000 f852 	bl	8009954 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80098b0:	4b06      	ldr	r3, [pc, #24]	@ (80098cc <prvIdleTask+0x28>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d9f9      	bls.n	80098ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80098b8:	4b05      	ldr	r3, [pc, #20]	@ (80098d0 <prvIdleTask+0x2c>)
 80098ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098be:	601a      	str	r2, [r3, #0]
 80098c0:	f3bf 8f4f 	dsb	sy
 80098c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80098c8:	e7f0      	b.n	80098ac <prvIdleTask+0x8>
 80098ca:	bf00      	nop
 80098cc:	20000d98 	.word	0x20000d98
 80098d0:	e000ed04 	.word	0xe000ed04

080098d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098da:	2300      	movs	r3, #0
 80098dc:	607b      	str	r3, [r7, #4]
 80098de:	e00c      	b.n	80098fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	4613      	mov	r3, r2
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	4413      	add	r3, r2
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	4a12      	ldr	r2, [pc, #72]	@ (8009934 <prvInitialiseTaskLists+0x60>)
 80098ec:	4413      	add	r3, r2
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7ff fb32 	bl	8008f58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	3301      	adds	r3, #1
 80098f8:	607b      	str	r3, [r7, #4]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2b06      	cmp	r3, #6
 80098fe:	d9ef      	bls.n	80098e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009900:	480d      	ldr	r0, [pc, #52]	@ (8009938 <prvInitialiseTaskLists+0x64>)
 8009902:	f7ff fb29 	bl	8008f58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009906:	480d      	ldr	r0, [pc, #52]	@ (800993c <prvInitialiseTaskLists+0x68>)
 8009908:	f7ff fb26 	bl	8008f58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800990c:	480c      	ldr	r0, [pc, #48]	@ (8009940 <prvInitialiseTaskLists+0x6c>)
 800990e:	f7ff fb23 	bl	8008f58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009912:	480c      	ldr	r0, [pc, #48]	@ (8009944 <prvInitialiseTaskLists+0x70>)
 8009914:	f7ff fb20 	bl	8008f58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009918:	480b      	ldr	r0, [pc, #44]	@ (8009948 <prvInitialiseTaskLists+0x74>)
 800991a:	f7ff fb1d 	bl	8008f58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800991e:	4b0b      	ldr	r3, [pc, #44]	@ (800994c <prvInitialiseTaskLists+0x78>)
 8009920:	4a05      	ldr	r2, [pc, #20]	@ (8009938 <prvInitialiseTaskLists+0x64>)
 8009922:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009924:	4b0a      	ldr	r3, [pc, #40]	@ (8009950 <prvInitialiseTaskLists+0x7c>)
 8009926:	4a05      	ldr	r2, [pc, #20]	@ (800993c <prvInitialiseTaskLists+0x68>)
 8009928:	601a      	str	r2, [r3, #0]
}
 800992a:	bf00      	nop
 800992c:	3708      	adds	r7, #8
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	20000d98 	.word	0x20000d98
 8009938:	20000e24 	.word	0x20000e24
 800993c:	20000e38 	.word	0x20000e38
 8009940:	20000e54 	.word	0x20000e54
 8009944:	20000e68 	.word	0x20000e68
 8009948:	20000e80 	.word	0x20000e80
 800994c:	20000e4c 	.word	0x20000e4c
 8009950:	20000e50 	.word	0x20000e50

08009954 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800995a:	e019      	b.n	8009990 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800995c:	f000 faec 	bl	8009f38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009960:	4b10      	ldr	r3, [pc, #64]	@ (80099a4 <prvCheckTasksWaitingTermination+0x50>)
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	3304      	adds	r3, #4
 800996c:	4618      	mov	r0, r3
 800996e:	f7ff fb7d 	bl	800906c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009972:	4b0d      	ldr	r3, [pc, #52]	@ (80099a8 <prvCheckTasksWaitingTermination+0x54>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	3b01      	subs	r3, #1
 8009978:	4a0b      	ldr	r2, [pc, #44]	@ (80099a8 <prvCheckTasksWaitingTermination+0x54>)
 800997a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800997c:	4b0b      	ldr	r3, [pc, #44]	@ (80099ac <prvCheckTasksWaitingTermination+0x58>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	3b01      	subs	r3, #1
 8009982:	4a0a      	ldr	r2, [pc, #40]	@ (80099ac <prvCheckTasksWaitingTermination+0x58>)
 8009984:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009986:	f000 fb09 	bl	8009f9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 f810 	bl	80099b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009990:	4b06      	ldr	r3, [pc, #24]	@ (80099ac <prvCheckTasksWaitingTermination+0x58>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d1e1      	bne.n	800995c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009998:	bf00      	nop
 800999a:	bf00      	nop
 800999c:	3708      	adds	r7, #8
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop
 80099a4:	20000e68 	.word	0x20000e68
 80099a8:	20000e94 	.word	0x20000e94
 80099ac:	20000e7c 	.word	0x20000e7c

080099b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d108      	bne.n	80099d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099c6:	4618      	mov	r0, r3
 80099c8:	f000 fca6 	bl	800a318 <vPortFree>
				vPortFree( pxTCB );
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 fca3 	bl	800a318 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80099d2:	e019      	b.n	8009a08 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d103      	bne.n	80099e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 fc9a 	bl	800a318 <vPortFree>
	}
 80099e4:	e010      	b.n	8009a08 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	d00b      	beq.n	8009a08 <prvDeleteTCB+0x58>
	__asm volatile
 80099f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f4:	f383 8811 	msr	BASEPRI, r3
 80099f8:	f3bf 8f6f 	isb	sy
 80099fc:	f3bf 8f4f 	dsb	sy
 8009a00:	60fb      	str	r3, [r7, #12]
}
 8009a02:	bf00      	nop
 8009a04:	bf00      	nop
 8009a06:	e7fd      	b.n	8009a04 <prvDeleteTCB+0x54>
	}
 8009a08:	bf00      	nop
 8009a0a:	3710      	adds	r7, #16
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a16:	4b0c      	ldr	r3, [pc, #48]	@ (8009a48 <prvResetNextTaskUnblockTime+0x38>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d104      	bne.n	8009a2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009a20:	4b0a      	ldr	r3, [pc, #40]	@ (8009a4c <prvResetNextTaskUnblockTime+0x3c>)
 8009a22:	f04f 32ff 	mov.w	r2, #4294967295
 8009a26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009a28:	e008      	b.n	8009a3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a2a:	4b07      	ldr	r3, [pc, #28]	@ (8009a48 <prvResetNextTaskUnblockTime+0x38>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	4a04      	ldr	r2, [pc, #16]	@ (8009a4c <prvResetNextTaskUnblockTime+0x3c>)
 8009a3a:	6013      	str	r3, [r2, #0]
}
 8009a3c:	bf00      	nop
 8009a3e:	370c      	adds	r7, #12
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr
 8009a48:	20000e4c 	.word	0x20000e4c
 8009a4c:	20000eb4 	.word	0x20000eb4

08009a50 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8009a5a:	f000 fa6d 	bl	8009f38 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8009a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8009ad8 <ulTaskNotifyTake+0x88>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d113      	bne.n	8009a90 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009a68:	4b1b      	ldr	r3, [pc, #108]	@ (8009ad8 <ulTaskNotifyTake+0x88>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d00b      	beq.n	8009a90 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a78:	2101      	movs	r1, #1
 8009a7a:	6838      	ldr	r0, [r7, #0]
 8009a7c:	f000 f8c4 	bl	8009c08 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009a80:	4b16      	ldr	r3, [pc, #88]	@ (8009adc <ulTaskNotifyTake+0x8c>)
 8009a82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a86:	601a      	str	r2, [r3, #0]
 8009a88:	f3bf 8f4f 	dsb	sy
 8009a8c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009a90:	f000 fa84 	bl	8009f9c <vPortExitCritical>

		taskENTER_CRITICAL();
 8009a94:	f000 fa50 	bl	8009f38 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8009a98:	4b0f      	ldr	r3, [pc, #60]	@ (8009ad8 <ulTaskNotifyTake+0x88>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a9e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00c      	beq.n	8009ac0 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d004      	beq.n	8009ab6 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8009aac:	4b0a      	ldr	r3, [pc, #40]	@ (8009ad8 <ulTaskNotifyTake+0x88>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	64da      	str	r2, [r3, #76]	@ 0x4c
 8009ab4:	e004      	b.n	8009ac0 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8009ab6:	4b08      	ldr	r3, [pc, #32]	@ (8009ad8 <ulTaskNotifyTake+0x88>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	68fa      	ldr	r2, [r7, #12]
 8009abc:	3a01      	subs	r2, #1
 8009abe:	64da      	str	r2, [r3, #76]	@ 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009ac0:	4b05      	ldr	r3, [pc, #20]	@ (8009ad8 <ulTaskNotifyTake+0x88>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 8009aca:	f000 fa67 	bl	8009f9c <vPortExitCritical>

		return ulReturn;
 8009ace:	68fb      	ldr	r3, [r7, #12]
	}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3710      	adds	r7, #16
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	20000d94 	.word	0x20000d94
 8009adc:	e000ed04 	.word	0xe000ed04

08009ae0 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b08a      	sub	sp, #40	@ 0x28
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d10b      	bne.n	8009b08 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8009af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af4:	f383 8811 	msr	BASEPRI, r3
 8009af8:	f3bf 8f6f 	isb	sy
 8009afc:	f3bf 8f4f 	dsb	sy
 8009b00:	61bb      	str	r3, [r7, #24]
}
 8009b02:	bf00      	nop
 8009b04:	bf00      	nop
 8009b06:	e7fd      	b.n	8009b04 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009b08:	f000 faf6 	bl	800a0f8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	627b      	str	r3, [r7, #36]	@ 0x24

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009b10:	f3ef 8211 	mrs	r2, BASEPRI
 8009b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b18:	f383 8811 	msr	BASEPRI, r3
 8009b1c:	f3bf 8f6f 	isb	sy
 8009b20:	f3bf 8f4f 	dsb	sy
 8009b24:	617a      	str	r2, [r7, #20]
 8009b26:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009b28:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009b2a:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b2e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009b32:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b36:	2202      	movs	r2, #2
 8009b38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8009b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b40:	1c5a      	adds	r2, r3, #1
 8009b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b44:	64da      	str	r2, [r3, #76]	@ 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009b46:	7ffb      	ldrb	r3, [r7, #31]
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d146      	bne.n	8009bda <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d00b      	beq.n	8009b6c <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 8009b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b58:	f383 8811 	msr	BASEPRI, r3
 8009b5c:	f3bf 8f6f 	isb	sy
 8009b60:	f3bf 8f4f 	dsb	sy
 8009b64:	60fb      	str	r3, [r7, #12]
}
 8009b66:	bf00      	nop
 8009b68:	bf00      	nop
 8009b6a:	e7fd      	b.n	8009b68 <vTaskNotifyGiveFromISR+0x88>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b6c:	4b20      	ldr	r3, [pc, #128]	@ (8009bf0 <vTaskNotifyGiveFromISR+0x110>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d11c      	bne.n	8009bae <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b76:	3304      	adds	r3, #4
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7ff fa77 	bl	800906c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b82:	2201      	movs	r2, #1
 8009b84:	409a      	lsls	r2, r3
 8009b86:	4b1b      	ldr	r3, [pc, #108]	@ (8009bf4 <vTaskNotifyGiveFromISR+0x114>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	4a19      	ldr	r2, [pc, #100]	@ (8009bf4 <vTaskNotifyGiveFromISR+0x114>)
 8009b8e:	6013      	str	r3, [r2, #0]
 8009b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b94:	4613      	mov	r3, r2
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	4413      	add	r3, r2
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	4a16      	ldr	r2, [pc, #88]	@ (8009bf8 <vTaskNotifyGiveFromISR+0x118>)
 8009b9e:	441a      	add	r2, r3
 8009ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba2:	3304      	adds	r3, #4
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	4610      	mov	r0, r2
 8009ba8:	f7ff fa03 	bl	8008fb2 <vListInsertEnd>
 8009bac:	e005      	b.n	8009bba <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb0:	3318      	adds	r3, #24
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	4811      	ldr	r0, [pc, #68]	@ (8009bfc <vTaskNotifyGiveFromISR+0x11c>)
 8009bb6:	f7ff f9fc 	bl	8008fb2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bbe:	4b10      	ldr	r3, [pc, #64]	@ (8009c00 <vTaskNotifyGiveFromISR+0x120>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d908      	bls.n	8009bda <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d002      	beq.n	8009bd4 <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8009bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8009c04 <vTaskNotifyGiveFromISR+0x124>)
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	601a      	str	r2, [r3, #0]
 8009bda:	6a3b      	ldr	r3, [r7, #32]
 8009bdc:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009be4:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8009be6:	bf00      	nop
 8009be8:	3728      	adds	r7, #40	@ 0x28
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	20000ebc 	.word	0x20000ebc
 8009bf4:	20000e9c 	.word	0x20000e9c
 8009bf8:	20000d98 	.word	0x20000d98
 8009bfc:	20000e54 	.word	0x20000e54
 8009c00:	20000d94 	.word	0x20000d94
 8009c04:	20000ea8 	.word	0x20000ea8

08009c08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009c12:	4b29      	ldr	r3, [pc, #164]	@ (8009cb8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c18:	4b28      	ldr	r3, [pc, #160]	@ (8009cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	3304      	adds	r3, #4
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7ff fa24 	bl	800906c <uxListRemove>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d10b      	bne.n	8009c42 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009c2a:	4b24      	ldr	r3, [pc, #144]	@ (8009cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c30:	2201      	movs	r2, #1
 8009c32:	fa02 f303 	lsl.w	r3, r2, r3
 8009c36:	43da      	mvns	r2, r3
 8009c38:	4b21      	ldr	r3, [pc, #132]	@ (8009cc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	4a20      	ldr	r2, [pc, #128]	@ (8009cc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009c40:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c48:	d10a      	bne.n	8009c60 <prvAddCurrentTaskToDelayedList+0x58>
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d007      	beq.n	8009c60 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c50:	4b1a      	ldr	r3, [pc, #104]	@ (8009cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	3304      	adds	r3, #4
 8009c56:	4619      	mov	r1, r3
 8009c58:	481a      	ldr	r0, [pc, #104]	@ (8009cc4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009c5a:	f7ff f9aa 	bl	8008fb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009c5e:	e026      	b.n	8009cae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009c60:	68fa      	ldr	r2, [r7, #12]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4413      	add	r3, r2
 8009c66:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009c68:	4b14      	ldr	r3, [pc, #80]	@ (8009cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	68ba      	ldr	r2, [r7, #8]
 8009c6e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009c70:	68ba      	ldr	r2, [r7, #8]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d209      	bcs.n	8009c8c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c78:	4b13      	ldr	r3, [pc, #76]	@ (8009cc8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8009cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	3304      	adds	r3, #4
 8009c82:	4619      	mov	r1, r3
 8009c84:	4610      	mov	r0, r2
 8009c86:	f7ff f9b8 	bl	8008ffa <vListInsert>
}
 8009c8a:	e010      	b.n	8009cae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8009ccc <prvAddCurrentTaskToDelayedList+0xc4>)
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	4b0a      	ldr	r3, [pc, #40]	@ (8009cbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	3304      	adds	r3, #4
 8009c96:	4619      	mov	r1, r3
 8009c98:	4610      	mov	r0, r2
 8009c9a:	f7ff f9ae 	bl	8008ffa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8009cd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	68ba      	ldr	r2, [r7, #8]
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d202      	bcs.n	8009cae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009ca8:	4a09      	ldr	r2, [pc, #36]	@ (8009cd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	6013      	str	r3, [r2, #0]
}
 8009cae:	bf00      	nop
 8009cb0:	3710      	adds	r7, #16
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	20000e98 	.word	0x20000e98
 8009cbc:	20000d94 	.word	0x20000d94
 8009cc0:	20000e9c 	.word	0x20000e9c
 8009cc4:	20000e80 	.word	0x20000e80
 8009cc8:	20000e50 	.word	0x20000e50
 8009ccc:	20000e4c 	.word	0x20000e4c
 8009cd0:	20000eb4 	.word	0x20000eb4

08009cd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b085      	sub	sp, #20
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	3b04      	subs	r3, #4
 8009ce4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009cec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	3b04      	subs	r3, #4
 8009cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	f023 0201 	bic.w	r2, r3, #1
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	3b04      	subs	r3, #4
 8009d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009d04:	4a0c      	ldr	r2, [pc, #48]	@ (8009d38 <pxPortInitialiseStack+0x64>)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	3b14      	subs	r3, #20
 8009d0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	3b04      	subs	r3, #4
 8009d1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f06f 0202 	mvn.w	r2, #2
 8009d22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	3b20      	subs	r3, #32
 8009d28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3714      	adds	r7, #20
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr
 8009d38:	08009d3d 	.word	0x08009d3d

08009d3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b085      	sub	sp, #20
 8009d40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009d42:	2300      	movs	r3, #0
 8009d44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009d46:	4b13      	ldr	r3, [pc, #76]	@ (8009d94 <prvTaskExitError+0x58>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d4e:	d00b      	beq.n	8009d68 <prvTaskExitError+0x2c>
	__asm volatile
 8009d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d54:	f383 8811 	msr	BASEPRI, r3
 8009d58:	f3bf 8f6f 	isb	sy
 8009d5c:	f3bf 8f4f 	dsb	sy
 8009d60:	60fb      	str	r3, [r7, #12]
}
 8009d62:	bf00      	nop
 8009d64:	bf00      	nop
 8009d66:	e7fd      	b.n	8009d64 <prvTaskExitError+0x28>
	__asm volatile
 8009d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d6c:	f383 8811 	msr	BASEPRI, r3
 8009d70:	f3bf 8f6f 	isb	sy
 8009d74:	f3bf 8f4f 	dsb	sy
 8009d78:	60bb      	str	r3, [r7, #8]
}
 8009d7a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d7c:	bf00      	nop
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d0fc      	beq.n	8009d7e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009d84:	bf00      	nop
 8009d86:	bf00      	nop
 8009d88:	3714      	adds	r7, #20
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop
 8009d94:	20000128 	.word	0x20000128
	...

08009da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009da0:	4b07      	ldr	r3, [pc, #28]	@ (8009dc0 <pxCurrentTCBConst2>)
 8009da2:	6819      	ldr	r1, [r3, #0]
 8009da4:	6808      	ldr	r0, [r1, #0]
 8009da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009daa:	f380 8809 	msr	PSP, r0
 8009dae:	f3bf 8f6f 	isb	sy
 8009db2:	f04f 0000 	mov.w	r0, #0
 8009db6:	f380 8811 	msr	BASEPRI, r0
 8009dba:	4770      	bx	lr
 8009dbc:	f3af 8000 	nop.w

08009dc0 <pxCurrentTCBConst2>:
 8009dc0:	20000d94 	.word	0x20000d94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009dc4:	bf00      	nop
 8009dc6:	bf00      	nop

08009dc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009dc8:	4808      	ldr	r0, [pc, #32]	@ (8009dec <prvPortStartFirstTask+0x24>)
 8009dca:	6800      	ldr	r0, [r0, #0]
 8009dcc:	6800      	ldr	r0, [r0, #0]
 8009dce:	f380 8808 	msr	MSP, r0
 8009dd2:	f04f 0000 	mov.w	r0, #0
 8009dd6:	f380 8814 	msr	CONTROL, r0
 8009dda:	b662      	cpsie	i
 8009ddc:	b661      	cpsie	f
 8009dde:	f3bf 8f4f 	dsb	sy
 8009de2:	f3bf 8f6f 	isb	sy
 8009de6:	df00      	svc	0
 8009de8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009dea:	bf00      	nop
 8009dec:	e000ed08 	.word	0xe000ed08

08009df0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b086      	sub	sp, #24
 8009df4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009df6:	4b47      	ldr	r3, [pc, #284]	@ (8009f14 <xPortStartScheduler+0x124>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a47      	ldr	r2, [pc, #284]	@ (8009f18 <xPortStartScheduler+0x128>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d10b      	bne.n	8009e18 <xPortStartScheduler+0x28>
	__asm volatile
 8009e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e04:	f383 8811 	msr	BASEPRI, r3
 8009e08:	f3bf 8f6f 	isb	sy
 8009e0c:	f3bf 8f4f 	dsb	sy
 8009e10:	60fb      	str	r3, [r7, #12]
}
 8009e12:	bf00      	nop
 8009e14:	bf00      	nop
 8009e16:	e7fd      	b.n	8009e14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009e18:	4b3e      	ldr	r3, [pc, #248]	@ (8009f14 <xPortStartScheduler+0x124>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a3f      	ldr	r2, [pc, #252]	@ (8009f1c <xPortStartScheduler+0x12c>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d10b      	bne.n	8009e3a <xPortStartScheduler+0x4a>
	__asm volatile
 8009e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e26:	f383 8811 	msr	BASEPRI, r3
 8009e2a:	f3bf 8f6f 	isb	sy
 8009e2e:	f3bf 8f4f 	dsb	sy
 8009e32:	613b      	str	r3, [r7, #16]
}
 8009e34:	bf00      	nop
 8009e36:	bf00      	nop
 8009e38:	e7fd      	b.n	8009e36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009e3a:	4b39      	ldr	r3, [pc, #228]	@ (8009f20 <xPortStartScheduler+0x130>)
 8009e3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	22ff      	movs	r2, #255	@ 0xff
 8009e4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e54:	78fb      	ldrb	r3, [r7, #3]
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009e5c:	b2da      	uxtb	r2, r3
 8009e5e:	4b31      	ldr	r3, [pc, #196]	@ (8009f24 <xPortStartScheduler+0x134>)
 8009e60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e62:	4b31      	ldr	r3, [pc, #196]	@ (8009f28 <xPortStartScheduler+0x138>)
 8009e64:	2207      	movs	r2, #7
 8009e66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e68:	e009      	b.n	8009e7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8009f28 <xPortStartScheduler+0x138>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	3b01      	subs	r3, #1
 8009e70:	4a2d      	ldr	r2, [pc, #180]	@ (8009f28 <xPortStartScheduler+0x138>)
 8009e72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e74:	78fb      	ldrb	r3, [r7, #3]
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	005b      	lsls	r3, r3, #1
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e7e:	78fb      	ldrb	r3, [r7, #3]
 8009e80:	b2db      	uxtb	r3, r3
 8009e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e86:	2b80      	cmp	r3, #128	@ 0x80
 8009e88:	d0ef      	beq.n	8009e6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009e8a:	4b27      	ldr	r3, [pc, #156]	@ (8009f28 <xPortStartScheduler+0x138>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f1c3 0307 	rsb	r3, r3, #7
 8009e92:	2b04      	cmp	r3, #4
 8009e94:	d00b      	beq.n	8009eae <xPortStartScheduler+0xbe>
	__asm volatile
 8009e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e9a:	f383 8811 	msr	BASEPRI, r3
 8009e9e:	f3bf 8f6f 	isb	sy
 8009ea2:	f3bf 8f4f 	dsb	sy
 8009ea6:	60bb      	str	r3, [r7, #8]
}
 8009ea8:	bf00      	nop
 8009eaa:	bf00      	nop
 8009eac:	e7fd      	b.n	8009eaa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009eae:	4b1e      	ldr	r3, [pc, #120]	@ (8009f28 <xPortStartScheduler+0x138>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	021b      	lsls	r3, r3, #8
 8009eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8009f28 <xPortStartScheduler+0x138>)
 8009eb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8009f28 <xPortStartScheduler+0x138>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009ec0:	4a19      	ldr	r2, [pc, #100]	@ (8009f28 <xPortStartScheduler+0x138>)
 8009ec2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	b2da      	uxtb	r2, r3
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009ecc:	4b17      	ldr	r3, [pc, #92]	@ (8009f2c <xPortStartScheduler+0x13c>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a16      	ldr	r2, [pc, #88]	@ (8009f2c <xPortStartScheduler+0x13c>)
 8009ed2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009ed6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009ed8:	4b14      	ldr	r3, [pc, #80]	@ (8009f2c <xPortStartScheduler+0x13c>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a13      	ldr	r2, [pc, #76]	@ (8009f2c <xPortStartScheduler+0x13c>)
 8009ede:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009ee2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009ee4:	f000 f8da 	bl	800a09c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009ee8:	4b11      	ldr	r3, [pc, #68]	@ (8009f30 <xPortStartScheduler+0x140>)
 8009eea:	2200      	movs	r2, #0
 8009eec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009eee:	f000 f8f9 	bl	800a0e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009ef2:	4b10      	ldr	r3, [pc, #64]	@ (8009f34 <xPortStartScheduler+0x144>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a0f      	ldr	r2, [pc, #60]	@ (8009f34 <xPortStartScheduler+0x144>)
 8009ef8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009efc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009efe:	f7ff ff63 	bl	8009dc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009f02:	f7ff fc73 	bl	80097ec <vTaskSwitchContext>
	prvTaskExitError();
 8009f06:	f7ff ff19 	bl	8009d3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3718      	adds	r7, #24
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	e000ed00 	.word	0xe000ed00
 8009f18:	410fc271 	.word	0x410fc271
 8009f1c:	410fc270 	.word	0x410fc270
 8009f20:	e000e400 	.word	0xe000e400
 8009f24:	20000ec0 	.word	0x20000ec0
 8009f28:	20000ec4 	.word	0x20000ec4
 8009f2c:	e000ed20 	.word	0xe000ed20
 8009f30:	20000128 	.word	0x20000128
 8009f34:	e000ef34 	.word	0xe000ef34

08009f38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f42:	f383 8811 	msr	BASEPRI, r3
 8009f46:	f3bf 8f6f 	isb	sy
 8009f4a:	f3bf 8f4f 	dsb	sy
 8009f4e:	607b      	str	r3, [r7, #4]
}
 8009f50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009f52:	4b10      	ldr	r3, [pc, #64]	@ (8009f94 <vPortEnterCritical+0x5c>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	3301      	adds	r3, #1
 8009f58:	4a0e      	ldr	r2, [pc, #56]	@ (8009f94 <vPortEnterCritical+0x5c>)
 8009f5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8009f94 <vPortEnterCritical+0x5c>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d110      	bne.n	8009f86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009f64:	4b0c      	ldr	r3, [pc, #48]	@ (8009f98 <vPortEnterCritical+0x60>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	b2db      	uxtb	r3, r3
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d00b      	beq.n	8009f86 <vPortEnterCritical+0x4e>
	__asm volatile
 8009f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f72:	f383 8811 	msr	BASEPRI, r3
 8009f76:	f3bf 8f6f 	isb	sy
 8009f7a:	f3bf 8f4f 	dsb	sy
 8009f7e:	603b      	str	r3, [r7, #0]
}
 8009f80:	bf00      	nop
 8009f82:	bf00      	nop
 8009f84:	e7fd      	b.n	8009f82 <vPortEnterCritical+0x4a>
	}
}
 8009f86:	bf00      	nop
 8009f88:	370c      	adds	r7, #12
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr
 8009f92:	bf00      	nop
 8009f94:	20000128 	.word	0x20000128
 8009f98:	e000ed04 	.word	0xe000ed04

08009f9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009fa2:	4b12      	ldr	r3, [pc, #72]	@ (8009fec <vPortExitCritical+0x50>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d10b      	bne.n	8009fc2 <vPortExitCritical+0x26>
	__asm volatile
 8009faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fae:	f383 8811 	msr	BASEPRI, r3
 8009fb2:	f3bf 8f6f 	isb	sy
 8009fb6:	f3bf 8f4f 	dsb	sy
 8009fba:	607b      	str	r3, [r7, #4]
}
 8009fbc:	bf00      	nop
 8009fbe:	bf00      	nop
 8009fc0:	e7fd      	b.n	8009fbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8009fec <vPortExitCritical+0x50>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	3b01      	subs	r3, #1
 8009fc8:	4a08      	ldr	r2, [pc, #32]	@ (8009fec <vPortExitCritical+0x50>)
 8009fca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009fcc:	4b07      	ldr	r3, [pc, #28]	@ (8009fec <vPortExitCritical+0x50>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d105      	bne.n	8009fe0 <vPortExitCritical+0x44>
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	f383 8811 	msr	BASEPRI, r3
}
 8009fde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009fe0:	bf00      	nop
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr
 8009fec:	20000128 	.word	0x20000128

08009ff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ff0:	f3ef 8009 	mrs	r0, PSP
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	4b15      	ldr	r3, [pc, #84]	@ (800a050 <pxCurrentTCBConst>)
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	f01e 0f10 	tst.w	lr, #16
 800a000:	bf08      	it	eq
 800a002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a00a:	6010      	str	r0, [r2, #0]
 800a00c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a010:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a014:	f380 8811 	msr	BASEPRI, r0
 800a018:	f3bf 8f4f 	dsb	sy
 800a01c:	f3bf 8f6f 	isb	sy
 800a020:	f7ff fbe4 	bl	80097ec <vTaskSwitchContext>
 800a024:	f04f 0000 	mov.w	r0, #0
 800a028:	f380 8811 	msr	BASEPRI, r0
 800a02c:	bc09      	pop	{r0, r3}
 800a02e:	6819      	ldr	r1, [r3, #0]
 800a030:	6808      	ldr	r0, [r1, #0]
 800a032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a036:	f01e 0f10 	tst.w	lr, #16
 800a03a:	bf08      	it	eq
 800a03c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a040:	f380 8809 	msr	PSP, r0
 800a044:	f3bf 8f6f 	isb	sy
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop
 800a04c:	f3af 8000 	nop.w

0800a050 <pxCurrentTCBConst>:
 800a050:	20000d94 	.word	0x20000d94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a054:	bf00      	nop
 800a056:	bf00      	nop

0800a058 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
	__asm volatile
 800a05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a062:	f383 8811 	msr	BASEPRI, r3
 800a066:	f3bf 8f6f 	isb	sy
 800a06a:	f3bf 8f4f 	dsb	sy
 800a06e:	607b      	str	r3, [r7, #4]
}
 800a070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a072:	f7ff fb01 	bl	8009678 <xTaskIncrementTick>
 800a076:	4603      	mov	r3, r0
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d003      	beq.n	800a084 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a07c:	4b06      	ldr	r3, [pc, #24]	@ (800a098 <SysTick_Handler+0x40>)
 800a07e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a082:	601a      	str	r2, [r3, #0]
 800a084:	2300      	movs	r3, #0
 800a086:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	f383 8811 	msr	BASEPRI, r3
}
 800a08e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a090:	bf00      	nop
 800a092:	3708      	adds	r7, #8
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}
 800a098:	e000ed04 	.word	0xe000ed04

0800a09c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a09c:	b480      	push	{r7}
 800a09e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a0a0:	4b0b      	ldr	r3, [pc, #44]	@ (800a0d0 <vPortSetupTimerInterrupt+0x34>)
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a0a6:	4b0b      	ldr	r3, [pc, #44]	@ (800a0d4 <vPortSetupTimerInterrupt+0x38>)
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a0ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a0d8 <vPortSetupTimerInterrupt+0x3c>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a0a      	ldr	r2, [pc, #40]	@ (800a0dc <vPortSetupTimerInterrupt+0x40>)
 800a0b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0b6:	099b      	lsrs	r3, r3, #6
 800a0b8:	4a09      	ldr	r2, [pc, #36]	@ (800a0e0 <vPortSetupTimerInterrupt+0x44>)
 800a0ba:	3b01      	subs	r3, #1
 800a0bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a0be:	4b04      	ldr	r3, [pc, #16]	@ (800a0d0 <vPortSetupTimerInterrupt+0x34>)
 800a0c0:	2207      	movs	r2, #7
 800a0c2:	601a      	str	r2, [r3, #0]
}
 800a0c4:	bf00      	nop
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr
 800a0ce:	bf00      	nop
 800a0d0:	e000e010 	.word	0xe000e010
 800a0d4:	e000e018 	.word	0xe000e018
 800a0d8:	20000090 	.word	0x20000090
 800a0dc:	10624dd3 	.word	0x10624dd3
 800a0e0:	e000e014 	.word	0xe000e014

0800a0e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a0e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a0f4 <vPortEnableVFP+0x10>
 800a0e8:	6801      	ldr	r1, [r0, #0]
 800a0ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a0ee:	6001      	str	r1, [r0, #0]
 800a0f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a0f2:	bf00      	nop
 800a0f4:	e000ed88 	.word	0xe000ed88

0800a0f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b085      	sub	sp, #20
 800a0fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a0fe:	f3ef 8305 	mrs	r3, IPSR
 800a102:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2b0f      	cmp	r3, #15
 800a108:	d915      	bls.n	800a136 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a10a:	4a18      	ldr	r2, [pc, #96]	@ (800a16c <vPortValidateInterruptPriority+0x74>)
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	4413      	add	r3, r2
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a114:	4b16      	ldr	r3, [pc, #88]	@ (800a170 <vPortValidateInterruptPriority+0x78>)
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	7afa      	ldrb	r2, [r7, #11]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d20b      	bcs.n	800a136 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a122:	f383 8811 	msr	BASEPRI, r3
 800a126:	f3bf 8f6f 	isb	sy
 800a12a:	f3bf 8f4f 	dsb	sy
 800a12e:	607b      	str	r3, [r7, #4]
}
 800a130:	bf00      	nop
 800a132:	bf00      	nop
 800a134:	e7fd      	b.n	800a132 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a136:	4b0f      	ldr	r3, [pc, #60]	@ (800a174 <vPortValidateInterruptPriority+0x7c>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a13e:	4b0e      	ldr	r3, [pc, #56]	@ (800a178 <vPortValidateInterruptPriority+0x80>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	429a      	cmp	r2, r3
 800a144:	d90b      	bls.n	800a15e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a14a:	f383 8811 	msr	BASEPRI, r3
 800a14e:	f3bf 8f6f 	isb	sy
 800a152:	f3bf 8f4f 	dsb	sy
 800a156:	603b      	str	r3, [r7, #0]
}
 800a158:	bf00      	nop
 800a15a:	bf00      	nop
 800a15c:	e7fd      	b.n	800a15a <vPortValidateInterruptPriority+0x62>
	}
 800a15e:	bf00      	nop
 800a160:	3714      	adds	r7, #20
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr
 800a16a:	bf00      	nop
 800a16c:	e000e3f0 	.word	0xe000e3f0
 800a170:	20000ec0 	.word	0x20000ec0
 800a174:	e000ed0c 	.word	0xe000ed0c
 800a178:	20000ec4 	.word	0x20000ec4

0800a17c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b08a      	sub	sp, #40	@ 0x28
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a184:	2300      	movs	r3, #0
 800a186:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a188:	f7ff f9ca 	bl	8009520 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a18c:	4b5c      	ldr	r3, [pc, #368]	@ (800a300 <pvPortMalloc+0x184>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d101      	bne.n	800a198 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a194:	f000 f924 	bl	800a3e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a198:	4b5a      	ldr	r3, [pc, #360]	@ (800a304 <pvPortMalloc+0x188>)
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	4013      	ands	r3, r2
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f040 8095 	bne.w	800a2d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d01e      	beq.n	800a1ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a1ac:	2208      	movs	r2, #8
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4413      	add	r3, r2
 800a1b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f003 0307 	and.w	r3, r3, #7
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d015      	beq.n	800a1ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f023 0307 	bic.w	r3, r3, #7
 800a1c4:	3308      	adds	r3, #8
 800a1c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f003 0307 	and.w	r3, r3, #7
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d00b      	beq.n	800a1ea <pvPortMalloc+0x6e>
	__asm volatile
 800a1d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1d6:	f383 8811 	msr	BASEPRI, r3
 800a1da:	f3bf 8f6f 	isb	sy
 800a1de:	f3bf 8f4f 	dsb	sy
 800a1e2:	617b      	str	r3, [r7, #20]
}
 800a1e4:	bf00      	nop
 800a1e6:	bf00      	nop
 800a1e8:	e7fd      	b.n	800a1e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d06f      	beq.n	800a2d0 <pvPortMalloc+0x154>
 800a1f0:	4b45      	ldr	r3, [pc, #276]	@ (800a308 <pvPortMalloc+0x18c>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d86a      	bhi.n	800a2d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a1fa:	4b44      	ldr	r3, [pc, #272]	@ (800a30c <pvPortMalloc+0x190>)
 800a1fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a1fe:	4b43      	ldr	r3, [pc, #268]	@ (800a30c <pvPortMalloc+0x190>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a204:	e004      	b.n	800a210 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a208:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	429a      	cmp	r2, r3
 800a218:	d903      	bls.n	800a222 <pvPortMalloc+0xa6>
 800a21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d1f1      	bne.n	800a206 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a222:	4b37      	ldr	r3, [pc, #220]	@ (800a300 <pvPortMalloc+0x184>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a228:	429a      	cmp	r2, r3
 800a22a:	d051      	beq.n	800a2d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a22c:	6a3b      	ldr	r3, [r7, #32]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2208      	movs	r2, #8
 800a232:	4413      	add	r3, r2
 800a234:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	6a3b      	ldr	r3, [r7, #32]
 800a23c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a240:	685a      	ldr	r2, [r3, #4]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	1ad2      	subs	r2, r2, r3
 800a246:	2308      	movs	r3, #8
 800a248:	005b      	lsls	r3, r3, #1
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d920      	bls.n	800a290 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a24e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	4413      	add	r3, r2
 800a254:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	f003 0307 	and.w	r3, r3, #7
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d00b      	beq.n	800a278 <pvPortMalloc+0xfc>
	__asm volatile
 800a260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a264:	f383 8811 	msr	BASEPRI, r3
 800a268:	f3bf 8f6f 	isb	sy
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	613b      	str	r3, [r7, #16]
}
 800a272:	bf00      	nop
 800a274:	bf00      	nop
 800a276:	e7fd      	b.n	800a274 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a27a:	685a      	ldr	r2, [r3, #4]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	1ad2      	subs	r2, r2, r3
 800a280:	69bb      	ldr	r3, [r7, #24]
 800a282:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a286:	687a      	ldr	r2, [r7, #4]
 800a288:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a28a:	69b8      	ldr	r0, [r7, #24]
 800a28c:	f000 f90a 	bl	800a4a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a290:	4b1d      	ldr	r3, [pc, #116]	@ (800a308 <pvPortMalloc+0x18c>)
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	1ad3      	subs	r3, r2, r3
 800a29a:	4a1b      	ldr	r2, [pc, #108]	@ (800a308 <pvPortMalloc+0x18c>)
 800a29c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a29e:	4b1a      	ldr	r3, [pc, #104]	@ (800a308 <pvPortMalloc+0x18c>)
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	4b1b      	ldr	r3, [pc, #108]	@ (800a310 <pvPortMalloc+0x194>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d203      	bcs.n	800a2b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a2aa:	4b17      	ldr	r3, [pc, #92]	@ (800a308 <pvPortMalloc+0x18c>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a18      	ldr	r2, [pc, #96]	@ (800a310 <pvPortMalloc+0x194>)
 800a2b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2b4:	685a      	ldr	r2, [r3, #4]
 800a2b6:	4b13      	ldr	r3, [pc, #76]	@ (800a304 <pvPortMalloc+0x188>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	431a      	orrs	r2, r3
 800a2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a2c6:	4b13      	ldr	r3, [pc, #76]	@ (800a314 <pvPortMalloc+0x198>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	4a11      	ldr	r2, [pc, #68]	@ (800a314 <pvPortMalloc+0x198>)
 800a2ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a2d0:	f7ff f934 	bl	800953c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2d4:	69fb      	ldr	r3, [r7, #28]
 800a2d6:	f003 0307 	and.w	r3, r3, #7
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d00b      	beq.n	800a2f6 <pvPortMalloc+0x17a>
	__asm volatile
 800a2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2e2:	f383 8811 	msr	BASEPRI, r3
 800a2e6:	f3bf 8f6f 	isb	sy
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	60fb      	str	r3, [r7, #12]
}
 800a2f0:	bf00      	nop
 800a2f2:	bf00      	nop
 800a2f4:	e7fd      	b.n	800a2f2 <pvPortMalloc+0x176>
	return pvReturn;
 800a2f6:	69fb      	ldr	r3, [r7, #28]
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3728      	adds	r7, #40	@ 0x28
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	20004ad0 	.word	0x20004ad0
 800a304:	20004ae4 	.word	0x20004ae4
 800a308:	20004ad4 	.word	0x20004ad4
 800a30c:	20004ac8 	.word	0x20004ac8
 800a310:	20004ad8 	.word	0x20004ad8
 800a314:	20004adc 	.word	0x20004adc

0800a318 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b086      	sub	sp, #24
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d04f      	beq.n	800a3ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a32a:	2308      	movs	r3, #8
 800a32c:	425b      	negs	r3, r3
 800a32e:	697a      	ldr	r2, [r7, #20]
 800a330:	4413      	add	r3, r2
 800a332:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	685a      	ldr	r2, [r3, #4]
 800a33c:	4b25      	ldr	r3, [pc, #148]	@ (800a3d4 <vPortFree+0xbc>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4013      	ands	r3, r2
 800a342:	2b00      	cmp	r3, #0
 800a344:	d10b      	bne.n	800a35e <vPortFree+0x46>
	__asm volatile
 800a346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a34a:	f383 8811 	msr	BASEPRI, r3
 800a34e:	f3bf 8f6f 	isb	sy
 800a352:	f3bf 8f4f 	dsb	sy
 800a356:	60fb      	str	r3, [r7, #12]
}
 800a358:	bf00      	nop
 800a35a:	bf00      	nop
 800a35c:	e7fd      	b.n	800a35a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00b      	beq.n	800a37e <vPortFree+0x66>
	__asm volatile
 800a366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a36a:	f383 8811 	msr	BASEPRI, r3
 800a36e:	f3bf 8f6f 	isb	sy
 800a372:	f3bf 8f4f 	dsb	sy
 800a376:	60bb      	str	r3, [r7, #8]
}
 800a378:	bf00      	nop
 800a37a:	bf00      	nop
 800a37c:	e7fd      	b.n	800a37a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	685a      	ldr	r2, [r3, #4]
 800a382:	4b14      	ldr	r3, [pc, #80]	@ (800a3d4 <vPortFree+0xbc>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4013      	ands	r3, r2
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d01e      	beq.n	800a3ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d11a      	bne.n	800a3ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	685a      	ldr	r2, [r3, #4]
 800a398:	4b0e      	ldr	r3, [pc, #56]	@ (800a3d4 <vPortFree+0xbc>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	43db      	mvns	r3, r3
 800a39e:	401a      	ands	r2, r3
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a3a4:	f7ff f8bc 	bl	8009520 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	685a      	ldr	r2, [r3, #4]
 800a3ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a3d8 <vPortFree+0xc0>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	4a09      	ldr	r2, [pc, #36]	@ (800a3d8 <vPortFree+0xc0>)
 800a3b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a3b6:	6938      	ldr	r0, [r7, #16]
 800a3b8:	f000 f874 	bl	800a4a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a3bc:	4b07      	ldr	r3, [pc, #28]	@ (800a3dc <vPortFree+0xc4>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	4a06      	ldr	r2, [pc, #24]	@ (800a3dc <vPortFree+0xc4>)
 800a3c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a3c6:	f7ff f8b9 	bl	800953c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a3ca:	bf00      	nop
 800a3cc:	3718      	adds	r7, #24
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	bf00      	nop
 800a3d4:	20004ae4 	.word	0x20004ae4
 800a3d8:	20004ad4 	.word	0x20004ad4
 800a3dc:	20004ae0 	.word	0x20004ae0

0800a3e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b085      	sub	sp, #20
 800a3e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a3e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a3ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a3ec:	4b27      	ldr	r3, [pc, #156]	@ (800a48c <prvHeapInit+0xac>)
 800a3ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f003 0307 	and.w	r3, r3, #7
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d00c      	beq.n	800a414 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	3307      	adds	r3, #7
 800a3fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f023 0307 	bic.w	r3, r3, #7
 800a406:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a408:	68ba      	ldr	r2, [r7, #8]
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	1ad3      	subs	r3, r2, r3
 800a40e:	4a1f      	ldr	r2, [pc, #124]	@ (800a48c <prvHeapInit+0xac>)
 800a410:	4413      	add	r3, r2
 800a412:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a418:	4a1d      	ldr	r2, [pc, #116]	@ (800a490 <prvHeapInit+0xb0>)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a41e:	4b1c      	ldr	r3, [pc, #112]	@ (800a490 <prvHeapInit+0xb0>)
 800a420:	2200      	movs	r2, #0
 800a422:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	68ba      	ldr	r2, [r7, #8]
 800a428:	4413      	add	r3, r2
 800a42a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a42c:	2208      	movs	r2, #8
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	1a9b      	subs	r3, r3, r2
 800a432:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f023 0307 	bic.w	r3, r3, #7
 800a43a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	4a15      	ldr	r2, [pc, #84]	@ (800a494 <prvHeapInit+0xb4>)
 800a440:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a442:	4b14      	ldr	r3, [pc, #80]	@ (800a494 <prvHeapInit+0xb4>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	2200      	movs	r2, #0
 800a448:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a44a:	4b12      	ldr	r3, [pc, #72]	@ (800a494 <prvHeapInit+0xb4>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2200      	movs	r2, #0
 800a450:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	1ad2      	subs	r2, r2, r3
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a460:	4b0c      	ldr	r3, [pc, #48]	@ (800a494 <prvHeapInit+0xb4>)
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	4a0a      	ldr	r2, [pc, #40]	@ (800a498 <prvHeapInit+0xb8>)
 800a46e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	4a09      	ldr	r2, [pc, #36]	@ (800a49c <prvHeapInit+0xbc>)
 800a476:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a478:	4b09      	ldr	r3, [pc, #36]	@ (800a4a0 <prvHeapInit+0xc0>)
 800a47a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a47e:	601a      	str	r2, [r3, #0]
}
 800a480:	bf00      	nop
 800a482:	3714      	adds	r7, #20
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr
 800a48c:	20000ec8 	.word	0x20000ec8
 800a490:	20004ac8 	.word	0x20004ac8
 800a494:	20004ad0 	.word	0x20004ad0
 800a498:	20004ad8 	.word	0x20004ad8
 800a49c:	20004ad4 	.word	0x20004ad4
 800a4a0:	20004ae4 	.word	0x20004ae4

0800a4a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b085      	sub	sp, #20
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a4ac:	4b28      	ldr	r3, [pc, #160]	@ (800a550 <prvInsertBlockIntoFreeList+0xac>)
 800a4ae:	60fb      	str	r3, [r7, #12]
 800a4b0:	e002      	b.n	800a4b8 <prvInsertBlockIntoFreeList+0x14>
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	60fb      	str	r3, [r7, #12]
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d8f7      	bhi.n	800a4b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	68ba      	ldr	r2, [r7, #8]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d108      	bne.n	800a4e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	685a      	ldr	r2, [r3, #4]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	441a      	add	r2, r3
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	68ba      	ldr	r2, [r7, #8]
 800a4f0:	441a      	add	r2, r3
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d118      	bne.n	800a52c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681a      	ldr	r2, [r3, #0]
 800a4fe:	4b15      	ldr	r3, [pc, #84]	@ (800a554 <prvInsertBlockIntoFreeList+0xb0>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	429a      	cmp	r2, r3
 800a504:	d00d      	beq.n	800a522 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	685a      	ldr	r2, [r3, #4]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	441a      	add	r2, r3
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	601a      	str	r2, [r3, #0]
 800a520:	e008      	b.n	800a534 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a522:	4b0c      	ldr	r3, [pc, #48]	@ (800a554 <prvInsertBlockIntoFreeList+0xb0>)
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	601a      	str	r2, [r3, #0]
 800a52a:	e003      	b.n	800a534 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d002      	beq.n	800a542 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a542:	bf00      	nop
 800a544:	3714      	adds	r7, #20
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr
 800a54e:	bf00      	nop
 800a550:	20004ac8 	.word	0x20004ac8
 800a554:	20004ad0 	.word	0x20004ad0

0800a558 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a55c:	2200      	movs	r2, #0
 800a55e:	4912      	ldr	r1, [pc, #72]	@ (800a5a8 <MX_USB_DEVICE_Init+0x50>)
 800a560:	4812      	ldr	r0, [pc, #72]	@ (800a5ac <MX_USB_DEVICE_Init+0x54>)
 800a562:	f7fd f96f 	bl	8007844 <USBD_Init>
 800a566:	4603      	mov	r3, r0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d001      	beq.n	800a570 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a56c:	f7f6 fe96 	bl	800129c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a570:	490f      	ldr	r1, [pc, #60]	@ (800a5b0 <MX_USB_DEVICE_Init+0x58>)
 800a572:	480e      	ldr	r0, [pc, #56]	@ (800a5ac <MX_USB_DEVICE_Init+0x54>)
 800a574:	f7fd f996 	bl	80078a4 <USBD_RegisterClass>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d001      	beq.n	800a582 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a57e:	f7f6 fe8d 	bl	800129c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a582:	490c      	ldr	r1, [pc, #48]	@ (800a5b4 <MX_USB_DEVICE_Init+0x5c>)
 800a584:	4809      	ldr	r0, [pc, #36]	@ (800a5ac <MX_USB_DEVICE_Init+0x54>)
 800a586:	f7fd f88d 	bl	80076a4 <USBD_CDC_RegisterInterface>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d001      	beq.n	800a594 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a590:	f7f6 fe84 	bl	800129c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a594:	4805      	ldr	r0, [pc, #20]	@ (800a5ac <MX_USB_DEVICE_Init+0x54>)
 800a596:	f7fd f9bb 	bl	8007910 <USBD_Start>
 800a59a:	4603      	mov	r3, r0
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d001      	beq.n	800a5a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a5a0:	f7f6 fe7c 	bl	800129c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a5a4:	bf00      	nop
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	20000140 	.word	0x20000140
 800a5ac:	20004ae8 	.word	0x20004ae8
 800a5b0:	200000a8 	.word	0x200000a8
 800a5b4:	2000012c 	.word	0x2000012c

0800a5b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a5bc:	2200      	movs	r2, #0
 800a5be:	4905      	ldr	r1, [pc, #20]	@ (800a5d4 <CDC_Init_FS+0x1c>)
 800a5c0:	4805      	ldr	r0, [pc, #20]	@ (800a5d8 <CDC_Init_FS+0x20>)
 800a5c2:	f7fd f889 	bl	80076d8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a5c6:	4905      	ldr	r1, [pc, #20]	@ (800a5dc <CDC_Init_FS+0x24>)
 800a5c8:	4803      	ldr	r0, [pc, #12]	@ (800a5d8 <CDC_Init_FS+0x20>)
 800a5ca:	f7fd f8a7 	bl	800771c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a5ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	200051c4 	.word	0x200051c4
 800a5d8:	20004ae8 	.word	0x20004ae8
 800a5dc:	20004dc4 	.word	0x20004dc4

0800a5e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a5e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	6039      	str	r1, [r7, #0]
 800a5fa:	71fb      	strb	r3, [r7, #7]
 800a5fc:	4613      	mov	r3, r2
 800a5fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a600:	79fb      	ldrb	r3, [r7, #7]
 800a602:	2b23      	cmp	r3, #35	@ 0x23
 800a604:	d84a      	bhi.n	800a69c <CDC_Control_FS+0xac>
 800a606:	a201      	add	r2, pc, #4	@ (adr r2, 800a60c <CDC_Control_FS+0x1c>)
 800a608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a60c:	0800a69d 	.word	0x0800a69d
 800a610:	0800a69d 	.word	0x0800a69d
 800a614:	0800a69d 	.word	0x0800a69d
 800a618:	0800a69d 	.word	0x0800a69d
 800a61c:	0800a69d 	.word	0x0800a69d
 800a620:	0800a69d 	.word	0x0800a69d
 800a624:	0800a69d 	.word	0x0800a69d
 800a628:	0800a69d 	.word	0x0800a69d
 800a62c:	0800a69d 	.word	0x0800a69d
 800a630:	0800a69d 	.word	0x0800a69d
 800a634:	0800a69d 	.word	0x0800a69d
 800a638:	0800a69d 	.word	0x0800a69d
 800a63c:	0800a69d 	.word	0x0800a69d
 800a640:	0800a69d 	.word	0x0800a69d
 800a644:	0800a69d 	.word	0x0800a69d
 800a648:	0800a69d 	.word	0x0800a69d
 800a64c:	0800a69d 	.word	0x0800a69d
 800a650:	0800a69d 	.word	0x0800a69d
 800a654:	0800a69d 	.word	0x0800a69d
 800a658:	0800a69d 	.word	0x0800a69d
 800a65c:	0800a69d 	.word	0x0800a69d
 800a660:	0800a69d 	.word	0x0800a69d
 800a664:	0800a69d 	.word	0x0800a69d
 800a668:	0800a69d 	.word	0x0800a69d
 800a66c:	0800a69d 	.word	0x0800a69d
 800a670:	0800a69d 	.word	0x0800a69d
 800a674:	0800a69d 	.word	0x0800a69d
 800a678:	0800a69d 	.word	0x0800a69d
 800a67c:	0800a69d 	.word	0x0800a69d
 800a680:	0800a69d 	.word	0x0800a69d
 800a684:	0800a69d 	.word	0x0800a69d
 800a688:	0800a69d 	.word	0x0800a69d
 800a68c:	0800a69d 	.word	0x0800a69d
 800a690:	0800a69d 	.word	0x0800a69d
 800a694:	0800a69d 	.word	0x0800a69d
 800a698:	0800a69d 	.word	0x0800a69d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a69c:	bf00      	nop
  }

  return (USBD_OK);
 800a69e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	370c      	adds	r7, #12
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b082      	sub	sp, #8
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a6b6:	6879      	ldr	r1, [r7, #4]
 800a6b8:	4805      	ldr	r0, [pc, #20]	@ (800a6d0 <CDC_Receive_FS+0x24>)
 800a6ba:	f7fd f82f 	bl	800771c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a6be:	4804      	ldr	r0, [pc, #16]	@ (800a6d0 <CDC_Receive_FS+0x24>)
 800a6c0:	f7fd f88a 	bl	80077d8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a6c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3708      	adds	r7, #8
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	20004ae8 	.word	0x20004ae8

0800a6d4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	460b      	mov	r3, r1
 800a6de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a6e4:	4b0d      	ldr	r3, [pc, #52]	@ (800a71c <CDC_Transmit_FS+0x48>)
 800a6e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a6ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d001      	beq.n	800a6fa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e00b      	b.n	800a712 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a6fa:	887b      	ldrh	r3, [r7, #2]
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	6879      	ldr	r1, [r7, #4]
 800a700:	4806      	ldr	r0, [pc, #24]	@ (800a71c <CDC_Transmit_FS+0x48>)
 800a702:	f7fc ffe9 	bl	80076d8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a706:	4805      	ldr	r0, [pc, #20]	@ (800a71c <CDC_Transmit_FS+0x48>)
 800a708:	f7fd f826 	bl	8007758 <USBD_CDC_TransmitPacket>
 800a70c:	4603      	mov	r3, r0
 800a70e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a710:	7bfb      	ldrb	r3, [r7, #15]
}
 800a712:	4618      	mov	r0, r3
 800a714:	3710      	adds	r7, #16
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	20004ae8 	.word	0x20004ae8

0800a720 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a720:	b480      	push	{r7}
 800a722:	b087      	sub	sp, #28
 800a724:	af00      	add	r7, sp, #0
 800a726:	60f8      	str	r0, [r7, #12]
 800a728:	60b9      	str	r1, [r7, #8]
 800a72a:	4613      	mov	r3, r2
 800a72c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a72e:	2300      	movs	r3, #0
 800a730:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a732:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a736:	4618      	mov	r0, r3
 800a738:	371c      	adds	r7, #28
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr
	...

0800a744 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	4603      	mov	r3, r0
 800a74c:	6039      	str	r1, [r7, #0]
 800a74e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	2212      	movs	r2, #18
 800a754:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a756:	4b03      	ldr	r3, [pc, #12]	@ (800a764 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a758:	4618      	mov	r0, r3
 800a75a:	370c      	adds	r7, #12
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr
 800a764:	2000015c 	.word	0x2000015c

0800a768 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a768:	b480      	push	{r7}
 800a76a:	b083      	sub	sp, #12
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	4603      	mov	r3, r0
 800a770:	6039      	str	r1, [r7, #0]
 800a772:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	2204      	movs	r2, #4
 800a778:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a77a:	4b03      	ldr	r3, [pc, #12]	@ (800a788 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	370c      	adds	r7, #12
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr
 800a788:	20000170 	.word	0x20000170

0800a78c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b082      	sub	sp, #8
 800a790:	af00      	add	r7, sp, #0
 800a792:	4603      	mov	r3, r0
 800a794:	6039      	str	r1, [r7, #0]
 800a796:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a798:	79fb      	ldrb	r3, [r7, #7]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d105      	bne.n	800a7aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a79e:	683a      	ldr	r2, [r7, #0]
 800a7a0:	4907      	ldr	r1, [pc, #28]	@ (800a7c0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a7a2:	4808      	ldr	r0, [pc, #32]	@ (800a7c4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a7a4:	f7fe fa7a 	bl	8008c9c <USBD_GetString>
 800a7a8:	e004      	b.n	800a7b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7aa:	683a      	ldr	r2, [r7, #0]
 800a7ac:	4904      	ldr	r1, [pc, #16]	@ (800a7c0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a7ae:	4805      	ldr	r0, [pc, #20]	@ (800a7c4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a7b0:	f7fe fa74 	bl	8008c9c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7b4:	4b02      	ldr	r3, [pc, #8]	@ (800a7c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3708      	adds	r7, #8
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	200055c4 	.word	0x200055c4
 800a7c4:	0800e3f0 	.word	0x0800e3f0

0800a7c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	6039      	str	r1, [r7, #0]
 800a7d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a7d4:	683a      	ldr	r2, [r7, #0]
 800a7d6:	4904      	ldr	r1, [pc, #16]	@ (800a7e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a7d8:	4804      	ldr	r0, [pc, #16]	@ (800a7ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a7da:	f7fe fa5f 	bl	8008c9c <USBD_GetString>
  return USBD_StrDesc;
 800a7de:	4b02      	ldr	r3, [pc, #8]	@ (800a7e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3708      	adds	r7, #8
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}
 800a7e8:	200055c4 	.word	0x200055c4
 800a7ec:	0800e408 	.word	0x0800e408

0800a7f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	6039      	str	r1, [r7, #0]
 800a7fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	221a      	movs	r2, #26
 800a800:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a802:	f000 f843 	bl	800a88c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a806:	4b02      	ldr	r3, [pc, #8]	@ (800a810 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3708      	adds	r7, #8
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	20000174 	.word	0x20000174

0800a814 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	af00      	add	r7, sp, #0
 800a81a:	4603      	mov	r3, r0
 800a81c:	6039      	str	r1, [r7, #0]
 800a81e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a820:	79fb      	ldrb	r3, [r7, #7]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d105      	bne.n	800a832 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a826:	683a      	ldr	r2, [r7, #0]
 800a828:	4907      	ldr	r1, [pc, #28]	@ (800a848 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a82a:	4808      	ldr	r0, [pc, #32]	@ (800a84c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a82c:	f7fe fa36 	bl	8008c9c <USBD_GetString>
 800a830:	e004      	b.n	800a83c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a832:	683a      	ldr	r2, [r7, #0]
 800a834:	4904      	ldr	r1, [pc, #16]	@ (800a848 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a836:	4805      	ldr	r0, [pc, #20]	@ (800a84c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a838:	f7fe fa30 	bl	8008c9c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a83c:	4b02      	ldr	r3, [pc, #8]	@ (800a848 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3708      	adds	r7, #8
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	200055c4 	.word	0x200055c4
 800a84c:	0800e41c 	.word	0x0800e41c

0800a850 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	af00      	add	r7, sp, #0
 800a856:	4603      	mov	r3, r0
 800a858:	6039      	str	r1, [r7, #0]
 800a85a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a85c:	79fb      	ldrb	r3, [r7, #7]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d105      	bne.n	800a86e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a862:	683a      	ldr	r2, [r7, #0]
 800a864:	4907      	ldr	r1, [pc, #28]	@ (800a884 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a866:	4808      	ldr	r0, [pc, #32]	@ (800a888 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a868:	f7fe fa18 	bl	8008c9c <USBD_GetString>
 800a86c:	e004      	b.n	800a878 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a86e:	683a      	ldr	r2, [r7, #0]
 800a870:	4904      	ldr	r1, [pc, #16]	@ (800a884 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a872:	4805      	ldr	r0, [pc, #20]	@ (800a888 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a874:	f7fe fa12 	bl	8008c9c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a878:	4b02      	ldr	r3, [pc, #8]	@ (800a884 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3708      	adds	r7, #8
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	200055c4 	.word	0x200055c4
 800a888:	0800e428 	.word	0x0800e428

0800a88c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a892:	4b0f      	ldr	r3, [pc, #60]	@ (800a8d0 <Get_SerialNum+0x44>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a898:	4b0e      	ldr	r3, [pc, #56]	@ (800a8d4 <Get_SerialNum+0x48>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a89e:	4b0e      	ldr	r3, [pc, #56]	@ (800a8d8 <Get_SerialNum+0x4c>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a8a4:	68fa      	ldr	r2, [r7, #12]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	4413      	add	r3, r2
 800a8aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d009      	beq.n	800a8c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a8b2:	2208      	movs	r2, #8
 800a8b4:	4909      	ldr	r1, [pc, #36]	@ (800a8dc <Get_SerialNum+0x50>)
 800a8b6:	68f8      	ldr	r0, [r7, #12]
 800a8b8:	f000 f814 	bl	800a8e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a8bc:	2204      	movs	r2, #4
 800a8be:	4908      	ldr	r1, [pc, #32]	@ (800a8e0 <Get_SerialNum+0x54>)
 800a8c0:	68b8      	ldr	r0, [r7, #8]
 800a8c2:	f000 f80f 	bl	800a8e4 <IntToUnicode>
  }
}
 800a8c6:	bf00      	nop
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	1fff7a10 	.word	0x1fff7a10
 800a8d4:	1fff7a14 	.word	0x1fff7a14
 800a8d8:	1fff7a18 	.word	0x1fff7a18
 800a8dc:	20000176 	.word	0x20000176
 800a8e0:	20000186 	.word	0x20000186

0800a8e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b087      	sub	sp, #28
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	60b9      	str	r1, [r7, #8]
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	75fb      	strb	r3, [r7, #23]
 800a8fa:	e027      	b.n	800a94c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	0f1b      	lsrs	r3, r3, #28
 800a900:	2b09      	cmp	r3, #9
 800a902:	d80b      	bhi.n	800a91c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	0f1b      	lsrs	r3, r3, #28
 800a908:	b2da      	uxtb	r2, r3
 800a90a:	7dfb      	ldrb	r3, [r7, #23]
 800a90c:	005b      	lsls	r3, r3, #1
 800a90e:	4619      	mov	r1, r3
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	440b      	add	r3, r1
 800a914:	3230      	adds	r2, #48	@ 0x30
 800a916:	b2d2      	uxtb	r2, r2
 800a918:	701a      	strb	r2, [r3, #0]
 800a91a:	e00a      	b.n	800a932 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	0f1b      	lsrs	r3, r3, #28
 800a920:	b2da      	uxtb	r2, r3
 800a922:	7dfb      	ldrb	r3, [r7, #23]
 800a924:	005b      	lsls	r3, r3, #1
 800a926:	4619      	mov	r1, r3
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	440b      	add	r3, r1
 800a92c:	3237      	adds	r2, #55	@ 0x37
 800a92e:	b2d2      	uxtb	r2, r2
 800a930:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	011b      	lsls	r3, r3, #4
 800a936:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a938:	7dfb      	ldrb	r3, [r7, #23]
 800a93a:	005b      	lsls	r3, r3, #1
 800a93c:	3301      	adds	r3, #1
 800a93e:	68ba      	ldr	r2, [r7, #8]
 800a940:	4413      	add	r3, r2
 800a942:	2200      	movs	r2, #0
 800a944:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a946:	7dfb      	ldrb	r3, [r7, #23]
 800a948:	3301      	adds	r3, #1
 800a94a:	75fb      	strb	r3, [r7, #23]
 800a94c:	7dfa      	ldrb	r2, [r7, #23]
 800a94e:	79fb      	ldrb	r3, [r7, #7]
 800a950:	429a      	cmp	r2, r3
 800a952:	d3d3      	bcc.n	800a8fc <IntToUnicode+0x18>
  }
}
 800a954:	bf00      	nop
 800a956:	bf00      	nop
 800a958:	371c      	adds	r7, #28
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr
	...

0800a964 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b08a      	sub	sp, #40	@ 0x28
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a96c:	f107 0314 	add.w	r3, r7, #20
 800a970:	2200      	movs	r2, #0
 800a972:	601a      	str	r2, [r3, #0]
 800a974:	605a      	str	r2, [r3, #4]
 800a976:	609a      	str	r2, [r3, #8]
 800a978:	60da      	str	r2, [r3, #12]
 800a97a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a984:	d13a      	bne.n	800a9fc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a986:	2300      	movs	r3, #0
 800a988:	613b      	str	r3, [r7, #16]
 800a98a:	4b1e      	ldr	r3, [pc, #120]	@ (800aa04 <HAL_PCD_MspInit+0xa0>)
 800a98c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a98e:	4a1d      	ldr	r2, [pc, #116]	@ (800aa04 <HAL_PCD_MspInit+0xa0>)
 800a990:	f043 0301 	orr.w	r3, r3, #1
 800a994:	6313      	str	r3, [r2, #48]	@ 0x30
 800a996:	4b1b      	ldr	r3, [pc, #108]	@ (800aa04 <HAL_PCD_MspInit+0xa0>)
 800a998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a99a:	f003 0301 	and.w	r3, r3, #1
 800a99e:	613b      	str	r3, [r7, #16]
 800a9a0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a9a2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a9a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9a8:	2302      	movs	r3, #2
 800a9aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a9b0:	2303      	movs	r3, #3
 800a9b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a9b4:	230a      	movs	r3, #10
 800a9b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9b8:	f107 0314 	add.w	r3, r7, #20
 800a9bc:	4619      	mov	r1, r3
 800a9be:	4812      	ldr	r0, [pc, #72]	@ (800aa08 <HAL_PCD_MspInit+0xa4>)
 800a9c0:	f7f7 fbf8 	bl	80021b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a9c4:	4b0f      	ldr	r3, [pc, #60]	@ (800aa04 <HAL_PCD_MspInit+0xa0>)
 800a9c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9c8:	4a0e      	ldr	r2, [pc, #56]	@ (800aa04 <HAL_PCD_MspInit+0xa0>)
 800a9ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9ce:	6353      	str	r3, [r2, #52]	@ 0x34
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	60fb      	str	r3, [r7, #12]
 800a9d4:	4b0b      	ldr	r3, [pc, #44]	@ (800aa04 <HAL_PCD_MspInit+0xa0>)
 800a9d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9d8:	4a0a      	ldr	r2, [pc, #40]	@ (800aa04 <HAL_PCD_MspInit+0xa0>)
 800a9da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a9de:	6453      	str	r3, [r2, #68]	@ 0x44
 800a9e0:	4b08      	ldr	r3, [pc, #32]	@ (800aa04 <HAL_PCD_MspInit+0xa0>)
 800a9e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a9e8:	60fb      	str	r3, [r7, #12]
 800a9ea:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	2105      	movs	r1, #5
 800a9f0:	2043      	movs	r0, #67	@ 0x43
 800a9f2:	f7f7 fbb5 	bl	8002160 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a9f6:	2043      	movs	r0, #67	@ 0x43
 800a9f8:	f7f7 fbce 	bl	8002198 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a9fc:	bf00      	nop
 800a9fe:	3728      	adds	r7, #40	@ 0x28
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	40023800 	.word	0x40023800
 800aa08:	40020000 	.word	0x40020000

0800aa0c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800aa20:	4619      	mov	r1, r3
 800aa22:	4610      	mov	r0, r2
 800aa24:	f7fc ffc1 	bl	80079aa <USBD_LL_SetupStage>
}
 800aa28:	bf00      	nop
 800aa2a:	3708      	adds	r7, #8
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	460b      	mov	r3, r1
 800aa3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800aa42:	78fa      	ldrb	r2, [r7, #3]
 800aa44:	6879      	ldr	r1, [r7, #4]
 800aa46:	4613      	mov	r3, r2
 800aa48:	00db      	lsls	r3, r3, #3
 800aa4a:	4413      	add	r3, r2
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	440b      	add	r3, r1
 800aa50:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	78fb      	ldrb	r3, [r7, #3]
 800aa58:	4619      	mov	r1, r3
 800aa5a:	f7fc fffb 	bl	8007a54 <USBD_LL_DataOutStage>
}
 800aa5e:	bf00      	nop
 800aa60:	3708      	adds	r7, #8
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b082      	sub	sp, #8
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
 800aa6e:	460b      	mov	r3, r1
 800aa70:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800aa78:	78fa      	ldrb	r2, [r7, #3]
 800aa7a:	6879      	ldr	r1, [r7, #4]
 800aa7c:	4613      	mov	r3, r2
 800aa7e:	00db      	lsls	r3, r3, #3
 800aa80:	4413      	add	r3, r2
 800aa82:	009b      	lsls	r3, r3, #2
 800aa84:	440b      	add	r3, r1
 800aa86:	3320      	adds	r3, #32
 800aa88:	681a      	ldr	r2, [r3, #0]
 800aa8a:	78fb      	ldrb	r3, [r7, #3]
 800aa8c:	4619      	mov	r1, r3
 800aa8e:	f7fd f89d 	bl	8007bcc <USBD_LL_DataInStage>
}
 800aa92:	bf00      	nop
 800aa94:	3708      	adds	r7, #8
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}

0800aa9a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa9a:	b580      	push	{r7, lr}
 800aa9c:	b082      	sub	sp, #8
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f7fd f9e1 	bl	8007e70 <USBD_LL_SOF>
}
 800aaae:	bf00      	nop
 800aab0:	3708      	adds	r7, #8
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}

0800aab6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aab6:	b580      	push	{r7, lr}
 800aab8:	b084      	sub	sp, #16
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aabe:	2301      	movs	r3, #1
 800aac0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	79db      	ldrb	r3, [r3, #7]
 800aac6:	2b02      	cmp	r3, #2
 800aac8:	d001      	beq.n	800aace <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aaca:	f7f6 fbe7 	bl	800129c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aad4:	7bfa      	ldrb	r2, [r7, #15]
 800aad6:	4611      	mov	r1, r2
 800aad8:	4618      	mov	r0, r3
 800aada:	f7fd f985 	bl	8007de8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aae4:	4618      	mov	r0, r3
 800aae6:	f7fd f92c 	bl	8007d42 <USBD_LL_Reset>
}
 800aaea:	bf00      	nop
 800aaec:	3710      	adds	r7, #16
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
	...

0800aaf4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b082      	sub	sp, #8
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab02:	4618      	mov	r0, r3
 800ab04:	f7fd f980 	bl	8007e08 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	687a      	ldr	r2, [r7, #4]
 800ab14:	6812      	ldr	r2, [r2, #0]
 800ab16:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ab1a:	f043 0301 	orr.w	r3, r3, #1
 800ab1e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	7adb      	ldrb	r3, [r3, #11]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d005      	beq.n	800ab34 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab28:	4b04      	ldr	r3, [pc, #16]	@ (800ab3c <HAL_PCD_SuspendCallback+0x48>)
 800ab2a:	691b      	ldr	r3, [r3, #16]
 800ab2c:	4a03      	ldr	r2, [pc, #12]	@ (800ab3c <HAL_PCD_SuspendCallback+0x48>)
 800ab2e:	f043 0306 	orr.w	r3, r3, #6
 800ab32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ab34:	bf00      	nop
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	e000ed00 	.word	0xe000ed00

0800ab40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7fd f976 	bl	8007e40 <USBD_LL_Resume>
}
 800ab54:	bf00      	nop
 800ab56:	3708      	adds	r7, #8
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b082      	sub	sp, #8
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	460b      	mov	r3, r1
 800ab66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab6e:	78fa      	ldrb	r2, [r7, #3]
 800ab70:	4611      	mov	r1, r2
 800ab72:	4618      	mov	r0, r3
 800ab74:	f7fd f9ce 	bl	8007f14 <USBD_LL_IsoOUTIncomplete>
}
 800ab78:	bf00      	nop
 800ab7a:	3708      	adds	r7, #8
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b082      	sub	sp, #8
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	460b      	mov	r3, r1
 800ab8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ab92:	78fa      	ldrb	r2, [r7, #3]
 800ab94:	4611      	mov	r1, r2
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7fd f98a 	bl	8007eb0 <USBD_LL_IsoINIncomplete>
}
 800ab9c:	bf00      	nop
 800ab9e:	3708      	adds	r7, #8
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7fd f9e0 	bl	8007f78 <USBD_LL_DevConnected>
}
 800abb8:	bf00      	nop
 800abba:	3708      	adds	r7, #8
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b082      	sub	sp, #8
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800abce:	4618      	mov	r0, r3
 800abd0:	f7fd f9dd 	bl	8007f8e <USBD_LL_DevDisconnected>
}
 800abd4:	bf00      	nop
 800abd6:	3708      	adds	r7, #8
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d13c      	bne.n	800ac66 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800abec:	4a20      	ldr	r2, [pc, #128]	@ (800ac70 <USBD_LL_Init+0x94>)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	4a1e      	ldr	r2, [pc, #120]	@ (800ac70 <USBD_LL_Init+0x94>)
 800abf8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800abfc:	4b1c      	ldr	r3, [pc, #112]	@ (800ac70 <USBD_LL_Init+0x94>)
 800abfe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ac02:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ac04:	4b1a      	ldr	r3, [pc, #104]	@ (800ac70 <USBD_LL_Init+0x94>)
 800ac06:	2204      	movs	r2, #4
 800ac08:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ac0a:	4b19      	ldr	r3, [pc, #100]	@ (800ac70 <USBD_LL_Init+0x94>)
 800ac0c:	2202      	movs	r2, #2
 800ac0e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ac10:	4b17      	ldr	r3, [pc, #92]	@ (800ac70 <USBD_LL_Init+0x94>)
 800ac12:	2200      	movs	r2, #0
 800ac14:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ac16:	4b16      	ldr	r3, [pc, #88]	@ (800ac70 <USBD_LL_Init+0x94>)
 800ac18:	2202      	movs	r2, #2
 800ac1a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ac1c:	4b14      	ldr	r3, [pc, #80]	@ (800ac70 <USBD_LL_Init+0x94>)
 800ac1e:	2200      	movs	r2, #0
 800ac20:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ac22:	4b13      	ldr	r3, [pc, #76]	@ (800ac70 <USBD_LL_Init+0x94>)
 800ac24:	2200      	movs	r2, #0
 800ac26:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ac28:	4b11      	ldr	r3, [pc, #68]	@ (800ac70 <USBD_LL_Init+0x94>)
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ac2e:	4b10      	ldr	r3, [pc, #64]	@ (800ac70 <USBD_LL_Init+0x94>)
 800ac30:	2200      	movs	r2, #0
 800ac32:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ac34:	4b0e      	ldr	r3, [pc, #56]	@ (800ac70 <USBD_LL_Init+0x94>)
 800ac36:	2200      	movs	r2, #0
 800ac38:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ac3a:	480d      	ldr	r0, [pc, #52]	@ (800ac70 <USBD_LL_Init+0x94>)
 800ac3c:	f7f8 fcae 	bl	800359c <HAL_PCD_Init>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d001      	beq.n	800ac4a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ac46:	f7f6 fb29 	bl	800129c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ac4a:	2180      	movs	r1, #128	@ 0x80
 800ac4c:	4808      	ldr	r0, [pc, #32]	@ (800ac70 <USBD_LL_Init+0x94>)
 800ac4e:	f7f9 feda 	bl	8004a06 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ac52:	2240      	movs	r2, #64	@ 0x40
 800ac54:	2100      	movs	r1, #0
 800ac56:	4806      	ldr	r0, [pc, #24]	@ (800ac70 <USBD_LL_Init+0x94>)
 800ac58:	f7f9 fe8e 	bl	8004978 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ac5c:	2280      	movs	r2, #128	@ 0x80
 800ac5e:	2101      	movs	r1, #1
 800ac60:	4803      	ldr	r0, [pc, #12]	@ (800ac70 <USBD_LL_Init+0x94>)
 800ac62:	f7f9 fe89 	bl	8004978 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ac66:	2300      	movs	r3, #0
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3708      	adds	r7, #8
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	200057c4 	.word	0x200057c4

0800ac74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac80:	2300      	movs	r3, #0
 800ac82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7f8 fd95 	bl	80037ba <HAL_PCD_Start>
 800ac90:	4603      	mov	r3, r0
 800ac92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac94:	7bfb      	ldrb	r3, [r7, #15]
 800ac96:	4618      	mov	r0, r3
 800ac98:	f000 f942 	bl	800af20 <USBD_Get_USB_Status>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aca0:	7bbb      	ldrb	r3, [r7, #14]
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3710      	adds	r7, #16
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}

0800acaa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800acaa:	b580      	push	{r7, lr}
 800acac:	b084      	sub	sp, #16
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
 800acb2:	4608      	mov	r0, r1
 800acb4:	4611      	mov	r1, r2
 800acb6:	461a      	mov	r2, r3
 800acb8:	4603      	mov	r3, r0
 800acba:	70fb      	strb	r3, [r7, #3]
 800acbc:	460b      	mov	r3, r1
 800acbe:	70bb      	strb	r3, [r7, #2]
 800acc0:	4613      	mov	r3, r2
 800acc2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acc4:	2300      	movs	r3, #0
 800acc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acc8:	2300      	movs	r3, #0
 800acca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800acd2:	78bb      	ldrb	r3, [r7, #2]
 800acd4:	883a      	ldrh	r2, [r7, #0]
 800acd6:	78f9      	ldrb	r1, [r7, #3]
 800acd8:	f7f9 fa69 	bl	80041ae <HAL_PCD_EP_Open>
 800acdc:	4603      	mov	r3, r0
 800acde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ace0:	7bfb      	ldrb	r3, [r7, #15]
 800ace2:	4618      	mov	r0, r3
 800ace4:	f000 f91c 	bl	800af20 <USBD_Get_USB_Status>
 800ace8:	4603      	mov	r3, r0
 800acea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acec:	7bbb      	ldrb	r3, [r7, #14]
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3710      	adds	r7, #16
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}

0800acf6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acf6:	b580      	push	{r7, lr}
 800acf8:	b084      	sub	sp, #16
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
 800acfe:	460b      	mov	r3, r1
 800ad00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad02:	2300      	movs	r3, #0
 800ad04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad06:	2300      	movs	r3, #0
 800ad08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad10:	78fa      	ldrb	r2, [r7, #3]
 800ad12:	4611      	mov	r1, r2
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7f9 fab4 	bl	8004282 <HAL_PCD_EP_Close>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad1e:	7bfb      	ldrb	r3, [r7, #15]
 800ad20:	4618      	mov	r0, r3
 800ad22:	f000 f8fd 	bl	800af20 <USBD_Get_USB_Status>
 800ad26:	4603      	mov	r3, r0
 800ad28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad2a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3710      	adds	r7, #16
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad40:	2300      	movs	r3, #0
 800ad42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad44:	2300      	movs	r3, #0
 800ad46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad4e:	78fa      	ldrb	r2, [r7, #3]
 800ad50:	4611      	mov	r1, r2
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7f9 fb6c 	bl	8004430 <HAL_PCD_EP_SetStall>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad5c:	7bfb      	ldrb	r3, [r7, #15]
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f000 f8de 	bl	800af20 <USBD_Get_USB_Status>
 800ad64:	4603      	mov	r3, r0
 800ad66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad68:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3710      	adds	r7, #16
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}

0800ad72 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad72:	b580      	push	{r7, lr}
 800ad74:	b084      	sub	sp, #16
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	6078      	str	r0, [r7, #4]
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad82:	2300      	movs	r3, #0
 800ad84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad8c:	78fa      	ldrb	r2, [r7, #3]
 800ad8e:	4611      	mov	r1, r2
 800ad90:	4618      	mov	r0, r3
 800ad92:	f7f9 fbb0 	bl	80044f6 <HAL_PCD_EP_ClrStall>
 800ad96:	4603      	mov	r3, r0
 800ad98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad9a:	7bfb      	ldrb	r3, [r7, #15]
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f000 f8bf 	bl	800af20 <USBD_Get_USB_Status>
 800ada2:	4603      	mov	r3, r0
 800ada4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ada6:	7bbb      	ldrb	r3, [r7, #14]
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3710      	adds	r7, #16
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b085      	sub	sp, #20
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	460b      	mov	r3, r1
 800adba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800adc2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800adc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	da0b      	bge.n	800ade4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800adcc:	78fb      	ldrb	r3, [r7, #3]
 800adce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800add2:	68f9      	ldr	r1, [r7, #12]
 800add4:	4613      	mov	r3, r2
 800add6:	00db      	lsls	r3, r3, #3
 800add8:	4413      	add	r3, r2
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	440b      	add	r3, r1
 800adde:	3316      	adds	r3, #22
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	e00b      	b.n	800adfc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ade4:	78fb      	ldrb	r3, [r7, #3]
 800ade6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800adea:	68f9      	ldr	r1, [r7, #12]
 800adec:	4613      	mov	r3, r2
 800adee:	00db      	lsls	r3, r3, #3
 800adf0:	4413      	add	r3, r2
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	440b      	add	r3, r1
 800adf6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800adfa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3714      	adds	r7, #20
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	460b      	mov	r3, r1
 800ae12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae14:	2300      	movs	r3, #0
 800ae16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae22:	78fa      	ldrb	r2, [r7, #3]
 800ae24:	4611      	mov	r1, r2
 800ae26:	4618      	mov	r0, r3
 800ae28:	f7f9 f99d 	bl	8004166 <HAL_PCD_SetAddress>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae30:	7bfb      	ldrb	r3, [r7, #15]
 800ae32:	4618      	mov	r0, r3
 800ae34:	f000 f874 	bl	800af20 <USBD_Get_USB_Status>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3710      	adds	r7, #16
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}

0800ae46 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ae46:	b580      	push	{r7, lr}
 800ae48:	b086      	sub	sp, #24
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	60f8      	str	r0, [r7, #12]
 800ae4e:	607a      	str	r2, [r7, #4]
 800ae50:	603b      	str	r3, [r7, #0]
 800ae52:	460b      	mov	r3, r1
 800ae54:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae56:	2300      	movs	r3, #0
 800ae58:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ae64:	7af9      	ldrb	r1, [r7, #11]
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	f7f9 faa7 	bl	80043bc <HAL_PCD_EP_Transmit>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae72:	7dfb      	ldrb	r3, [r7, #23]
 800ae74:	4618      	mov	r0, r3
 800ae76:	f000 f853 	bl	800af20 <USBD_Get_USB_Status>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae7e:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3718      	adds	r7, #24
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b086      	sub	sp, #24
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	60f8      	str	r0, [r7, #12]
 800ae90:	607a      	str	r2, [r7, #4]
 800ae92:	603b      	str	r3, [r7, #0]
 800ae94:	460b      	mov	r3, r1
 800ae96:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800aea6:	7af9      	ldrb	r1, [r7, #11]
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	f7f9 fa33 	bl	8004316 <HAL_PCD_EP_Receive>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aeb4:	7dfb      	ldrb	r3, [r7, #23]
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f000 f832 	bl	800af20 <USBD_Get_USB_Status>
 800aebc:	4603      	mov	r3, r0
 800aebe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aec0:	7dbb      	ldrb	r3, [r7, #22]
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3718      	adds	r7, #24
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}

0800aeca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aeca:	b580      	push	{r7, lr}
 800aecc:	b082      	sub	sp, #8
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
 800aed2:	460b      	mov	r3, r1
 800aed4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aedc:	78fa      	ldrb	r2, [r7, #3]
 800aede:	4611      	mov	r1, r2
 800aee0:	4618      	mov	r0, r3
 800aee2:	f7f9 fa53 	bl	800438c <HAL_PCD_EP_GetRxCount>
 800aee6:	4603      	mov	r3, r0
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3708      	adds	r7, #8
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aef8:	4b03      	ldr	r3, [pc, #12]	@ (800af08 <USBD_static_malloc+0x18>)
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	370c      	adds	r7, #12
 800aefe:	46bd      	mov	sp, r7
 800af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af04:	4770      	bx	lr
 800af06:	bf00      	nop
 800af08:	20005ca8 	.word	0x20005ca8

0800af0c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b083      	sub	sp, #12
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]

}
 800af14:	bf00      	nop
 800af16:	370c      	adds	r7, #12
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af20:	b480      	push	{r7}
 800af22:	b085      	sub	sp, #20
 800af24:	af00      	add	r7, sp, #0
 800af26:	4603      	mov	r3, r0
 800af28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af2a:	2300      	movs	r3, #0
 800af2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af2e:	79fb      	ldrb	r3, [r7, #7]
 800af30:	2b03      	cmp	r3, #3
 800af32:	d817      	bhi.n	800af64 <USBD_Get_USB_Status+0x44>
 800af34:	a201      	add	r2, pc, #4	@ (adr r2, 800af3c <USBD_Get_USB_Status+0x1c>)
 800af36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af3a:	bf00      	nop
 800af3c:	0800af4d 	.word	0x0800af4d
 800af40:	0800af53 	.word	0x0800af53
 800af44:	0800af59 	.word	0x0800af59
 800af48:	0800af5f 	.word	0x0800af5f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800af4c:	2300      	movs	r3, #0
 800af4e:	73fb      	strb	r3, [r7, #15]
    break;
 800af50:	e00b      	b.n	800af6a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af52:	2303      	movs	r3, #3
 800af54:	73fb      	strb	r3, [r7, #15]
    break;
 800af56:	e008      	b.n	800af6a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800af58:	2301      	movs	r3, #1
 800af5a:	73fb      	strb	r3, [r7, #15]
    break;
 800af5c:	e005      	b.n	800af6a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af5e:	2303      	movs	r3, #3
 800af60:	73fb      	strb	r3, [r7, #15]
    break;
 800af62:	e002      	b.n	800af6a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800af64:	2303      	movs	r3, #3
 800af66:	73fb      	strb	r3, [r7, #15]
    break;
 800af68:	bf00      	nop
  }
  return usb_status;
 800af6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3714      	adds	r7, #20
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr

0800af78 <__cvt>:
 800af78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af7c:	ec57 6b10 	vmov	r6, r7, d0
 800af80:	2f00      	cmp	r7, #0
 800af82:	460c      	mov	r4, r1
 800af84:	4619      	mov	r1, r3
 800af86:	463b      	mov	r3, r7
 800af88:	bfbb      	ittet	lt
 800af8a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800af8e:	461f      	movlt	r7, r3
 800af90:	2300      	movge	r3, #0
 800af92:	232d      	movlt	r3, #45	@ 0x2d
 800af94:	700b      	strb	r3, [r1, #0]
 800af96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af98:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800af9c:	4691      	mov	r9, r2
 800af9e:	f023 0820 	bic.w	r8, r3, #32
 800afa2:	bfbc      	itt	lt
 800afa4:	4632      	movlt	r2, r6
 800afa6:	4616      	movlt	r6, r2
 800afa8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800afac:	d005      	beq.n	800afba <__cvt+0x42>
 800afae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800afb2:	d100      	bne.n	800afb6 <__cvt+0x3e>
 800afb4:	3401      	adds	r4, #1
 800afb6:	2102      	movs	r1, #2
 800afb8:	e000      	b.n	800afbc <__cvt+0x44>
 800afba:	2103      	movs	r1, #3
 800afbc:	ab03      	add	r3, sp, #12
 800afbe:	9301      	str	r3, [sp, #4]
 800afc0:	ab02      	add	r3, sp, #8
 800afc2:	9300      	str	r3, [sp, #0]
 800afc4:	ec47 6b10 	vmov	d0, r6, r7
 800afc8:	4653      	mov	r3, sl
 800afca:	4622      	mov	r2, r4
 800afcc:	f000 fe7c 	bl	800bcc8 <_dtoa_r>
 800afd0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800afd4:	4605      	mov	r5, r0
 800afd6:	d119      	bne.n	800b00c <__cvt+0x94>
 800afd8:	f019 0f01 	tst.w	r9, #1
 800afdc:	d00e      	beq.n	800affc <__cvt+0x84>
 800afde:	eb00 0904 	add.w	r9, r0, r4
 800afe2:	2200      	movs	r2, #0
 800afe4:	2300      	movs	r3, #0
 800afe6:	4630      	mov	r0, r6
 800afe8:	4639      	mov	r1, r7
 800afea:	f7f5 fd75 	bl	8000ad8 <__aeabi_dcmpeq>
 800afee:	b108      	cbz	r0, 800aff4 <__cvt+0x7c>
 800aff0:	f8cd 900c 	str.w	r9, [sp, #12]
 800aff4:	2230      	movs	r2, #48	@ 0x30
 800aff6:	9b03      	ldr	r3, [sp, #12]
 800aff8:	454b      	cmp	r3, r9
 800affa:	d31e      	bcc.n	800b03a <__cvt+0xc2>
 800affc:	9b03      	ldr	r3, [sp, #12]
 800affe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b000:	1b5b      	subs	r3, r3, r5
 800b002:	4628      	mov	r0, r5
 800b004:	6013      	str	r3, [r2, #0]
 800b006:	b004      	add	sp, #16
 800b008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b00c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b010:	eb00 0904 	add.w	r9, r0, r4
 800b014:	d1e5      	bne.n	800afe2 <__cvt+0x6a>
 800b016:	7803      	ldrb	r3, [r0, #0]
 800b018:	2b30      	cmp	r3, #48	@ 0x30
 800b01a:	d10a      	bne.n	800b032 <__cvt+0xba>
 800b01c:	2200      	movs	r2, #0
 800b01e:	2300      	movs	r3, #0
 800b020:	4630      	mov	r0, r6
 800b022:	4639      	mov	r1, r7
 800b024:	f7f5 fd58 	bl	8000ad8 <__aeabi_dcmpeq>
 800b028:	b918      	cbnz	r0, 800b032 <__cvt+0xba>
 800b02a:	f1c4 0401 	rsb	r4, r4, #1
 800b02e:	f8ca 4000 	str.w	r4, [sl]
 800b032:	f8da 3000 	ldr.w	r3, [sl]
 800b036:	4499      	add	r9, r3
 800b038:	e7d3      	b.n	800afe2 <__cvt+0x6a>
 800b03a:	1c59      	adds	r1, r3, #1
 800b03c:	9103      	str	r1, [sp, #12]
 800b03e:	701a      	strb	r2, [r3, #0]
 800b040:	e7d9      	b.n	800aff6 <__cvt+0x7e>

0800b042 <__exponent>:
 800b042:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b044:	2900      	cmp	r1, #0
 800b046:	bfba      	itte	lt
 800b048:	4249      	neglt	r1, r1
 800b04a:	232d      	movlt	r3, #45	@ 0x2d
 800b04c:	232b      	movge	r3, #43	@ 0x2b
 800b04e:	2909      	cmp	r1, #9
 800b050:	7002      	strb	r2, [r0, #0]
 800b052:	7043      	strb	r3, [r0, #1]
 800b054:	dd29      	ble.n	800b0aa <__exponent+0x68>
 800b056:	f10d 0307 	add.w	r3, sp, #7
 800b05a:	461d      	mov	r5, r3
 800b05c:	270a      	movs	r7, #10
 800b05e:	461a      	mov	r2, r3
 800b060:	fbb1 f6f7 	udiv	r6, r1, r7
 800b064:	fb07 1416 	mls	r4, r7, r6, r1
 800b068:	3430      	adds	r4, #48	@ 0x30
 800b06a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b06e:	460c      	mov	r4, r1
 800b070:	2c63      	cmp	r4, #99	@ 0x63
 800b072:	f103 33ff 	add.w	r3, r3, #4294967295
 800b076:	4631      	mov	r1, r6
 800b078:	dcf1      	bgt.n	800b05e <__exponent+0x1c>
 800b07a:	3130      	adds	r1, #48	@ 0x30
 800b07c:	1e94      	subs	r4, r2, #2
 800b07e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b082:	1c41      	adds	r1, r0, #1
 800b084:	4623      	mov	r3, r4
 800b086:	42ab      	cmp	r3, r5
 800b088:	d30a      	bcc.n	800b0a0 <__exponent+0x5e>
 800b08a:	f10d 0309 	add.w	r3, sp, #9
 800b08e:	1a9b      	subs	r3, r3, r2
 800b090:	42ac      	cmp	r4, r5
 800b092:	bf88      	it	hi
 800b094:	2300      	movhi	r3, #0
 800b096:	3302      	adds	r3, #2
 800b098:	4403      	add	r3, r0
 800b09a:	1a18      	subs	r0, r3, r0
 800b09c:	b003      	add	sp, #12
 800b09e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0a0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b0a4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b0a8:	e7ed      	b.n	800b086 <__exponent+0x44>
 800b0aa:	2330      	movs	r3, #48	@ 0x30
 800b0ac:	3130      	adds	r1, #48	@ 0x30
 800b0ae:	7083      	strb	r3, [r0, #2]
 800b0b0:	70c1      	strb	r1, [r0, #3]
 800b0b2:	1d03      	adds	r3, r0, #4
 800b0b4:	e7f1      	b.n	800b09a <__exponent+0x58>
	...

0800b0b8 <_printf_float>:
 800b0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0bc:	b08d      	sub	sp, #52	@ 0x34
 800b0be:	460c      	mov	r4, r1
 800b0c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b0c4:	4616      	mov	r6, r2
 800b0c6:	461f      	mov	r7, r3
 800b0c8:	4605      	mov	r5, r0
 800b0ca:	f000 fcef 	bl	800baac <_localeconv_r>
 800b0ce:	6803      	ldr	r3, [r0, #0]
 800b0d0:	9304      	str	r3, [sp, #16]
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f7f5 f8d4 	bl	8000280 <strlen>
 800b0d8:	2300      	movs	r3, #0
 800b0da:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0dc:	f8d8 3000 	ldr.w	r3, [r8]
 800b0e0:	9005      	str	r0, [sp, #20]
 800b0e2:	3307      	adds	r3, #7
 800b0e4:	f023 0307 	bic.w	r3, r3, #7
 800b0e8:	f103 0208 	add.w	r2, r3, #8
 800b0ec:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b0f0:	f8d4 b000 	ldr.w	fp, [r4]
 800b0f4:	f8c8 2000 	str.w	r2, [r8]
 800b0f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b0fc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b100:	9307      	str	r3, [sp, #28]
 800b102:	f8cd 8018 	str.w	r8, [sp, #24]
 800b106:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b10a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b10e:	4b9c      	ldr	r3, [pc, #624]	@ (800b380 <_printf_float+0x2c8>)
 800b110:	f04f 32ff 	mov.w	r2, #4294967295
 800b114:	f7f5 fd12 	bl	8000b3c <__aeabi_dcmpun>
 800b118:	bb70      	cbnz	r0, 800b178 <_printf_float+0xc0>
 800b11a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b11e:	4b98      	ldr	r3, [pc, #608]	@ (800b380 <_printf_float+0x2c8>)
 800b120:	f04f 32ff 	mov.w	r2, #4294967295
 800b124:	f7f5 fcec 	bl	8000b00 <__aeabi_dcmple>
 800b128:	bb30      	cbnz	r0, 800b178 <_printf_float+0xc0>
 800b12a:	2200      	movs	r2, #0
 800b12c:	2300      	movs	r3, #0
 800b12e:	4640      	mov	r0, r8
 800b130:	4649      	mov	r1, r9
 800b132:	f7f5 fcdb 	bl	8000aec <__aeabi_dcmplt>
 800b136:	b110      	cbz	r0, 800b13e <_printf_float+0x86>
 800b138:	232d      	movs	r3, #45	@ 0x2d
 800b13a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b13e:	4a91      	ldr	r2, [pc, #580]	@ (800b384 <_printf_float+0x2cc>)
 800b140:	4b91      	ldr	r3, [pc, #580]	@ (800b388 <_printf_float+0x2d0>)
 800b142:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b146:	bf8c      	ite	hi
 800b148:	4690      	movhi	r8, r2
 800b14a:	4698      	movls	r8, r3
 800b14c:	2303      	movs	r3, #3
 800b14e:	6123      	str	r3, [r4, #16]
 800b150:	f02b 0304 	bic.w	r3, fp, #4
 800b154:	6023      	str	r3, [r4, #0]
 800b156:	f04f 0900 	mov.w	r9, #0
 800b15a:	9700      	str	r7, [sp, #0]
 800b15c:	4633      	mov	r3, r6
 800b15e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b160:	4621      	mov	r1, r4
 800b162:	4628      	mov	r0, r5
 800b164:	f000 f9d2 	bl	800b50c <_printf_common>
 800b168:	3001      	adds	r0, #1
 800b16a:	f040 808d 	bne.w	800b288 <_printf_float+0x1d0>
 800b16e:	f04f 30ff 	mov.w	r0, #4294967295
 800b172:	b00d      	add	sp, #52	@ 0x34
 800b174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b178:	4642      	mov	r2, r8
 800b17a:	464b      	mov	r3, r9
 800b17c:	4640      	mov	r0, r8
 800b17e:	4649      	mov	r1, r9
 800b180:	f7f5 fcdc 	bl	8000b3c <__aeabi_dcmpun>
 800b184:	b140      	cbz	r0, 800b198 <_printf_float+0xe0>
 800b186:	464b      	mov	r3, r9
 800b188:	2b00      	cmp	r3, #0
 800b18a:	bfbc      	itt	lt
 800b18c:	232d      	movlt	r3, #45	@ 0x2d
 800b18e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b192:	4a7e      	ldr	r2, [pc, #504]	@ (800b38c <_printf_float+0x2d4>)
 800b194:	4b7e      	ldr	r3, [pc, #504]	@ (800b390 <_printf_float+0x2d8>)
 800b196:	e7d4      	b.n	800b142 <_printf_float+0x8a>
 800b198:	6863      	ldr	r3, [r4, #4]
 800b19a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b19e:	9206      	str	r2, [sp, #24]
 800b1a0:	1c5a      	adds	r2, r3, #1
 800b1a2:	d13b      	bne.n	800b21c <_printf_float+0x164>
 800b1a4:	2306      	movs	r3, #6
 800b1a6:	6063      	str	r3, [r4, #4]
 800b1a8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	6022      	str	r2, [r4, #0]
 800b1b0:	9303      	str	r3, [sp, #12]
 800b1b2:	ab0a      	add	r3, sp, #40	@ 0x28
 800b1b4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b1b8:	ab09      	add	r3, sp, #36	@ 0x24
 800b1ba:	9300      	str	r3, [sp, #0]
 800b1bc:	6861      	ldr	r1, [r4, #4]
 800b1be:	ec49 8b10 	vmov	d0, r8, r9
 800b1c2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b1c6:	4628      	mov	r0, r5
 800b1c8:	f7ff fed6 	bl	800af78 <__cvt>
 800b1cc:	9b06      	ldr	r3, [sp, #24]
 800b1ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b1d0:	2b47      	cmp	r3, #71	@ 0x47
 800b1d2:	4680      	mov	r8, r0
 800b1d4:	d129      	bne.n	800b22a <_printf_float+0x172>
 800b1d6:	1cc8      	adds	r0, r1, #3
 800b1d8:	db02      	blt.n	800b1e0 <_printf_float+0x128>
 800b1da:	6863      	ldr	r3, [r4, #4]
 800b1dc:	4299      	cmp	r1, r3
 800b1de:	dd41      	ble.n	800b264 <_printf_float+0x1ac>
 800b1e0:	f1aa 0a02 	sub.w	sl, sl, #2
 800b1e4:	fa5f fa8a 	uxtb.w	sl, sl
 800b1e8:	3901      	subs	r1, #1
 800b1ea:	4652      	mov	r2, sl
 800b1ec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b1f0:	9109      	str	r1, [sp, #36]	@ 0x24
 800b1f2:	f7ff ff26 	bl	800b042 <__exponent>
 800b1f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b1f8:	1813      	adds	r3, r2, r0
 800b1fa:	2a01      	cmp	r2, #1
 800b1fc:	4681      	mov	r9, r0
 800b1fe:	6123      	str	r3, [r4, #16]
 800b200:	dc02      	bgt.n	800b208 <_printf_float+0x150>
 800b202:	6822      	ldr	r2, [r4, #0]
 800b204:	07d2      	lsls	r2, r2, #31
 800b206:	d501      	bpl.n	800b20c <_printf_float+0x154>
 800b208:	3301      	adds	r3, #1
 800b20a:	6123      	str	r3, [r4, #16]
 800b20c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b210:	2b00      	cmp	r3, #0
 800b212:	d0a2      	beq.n	800b15a <_printf_float+0xa2>
 800b214:	232d      	movs	r3, #45	@ 0x2d
 800b216:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b21a:	e79e      	b.n	800b15a <_printf_float+0xa2>
 800b21c:	9a06      	ldr	r2, [sp, #24]
 800b21e:	2a47      	cmp	r2, #71	@ 0x47
 800b220:	d1c2      	bne.n	800b1a8 <_printf_float+0xf0>
 800b222:	2b00      	cmp	r3, #0
 800b224:	d1c0      	bne.n	800b1a8 <_printf_float+0xf0>
 800b226:	2301      	movs	r3, #1
 800b228:	e7bd      	b.n	800b1a6 <_printf_float+0xee>
 800b22a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b22e:	d9db      	bls.n	800b1e8 <_printf_float+0x130>
 800b230:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b234:	d118      	bne.n	800b268 <_printf_float+0x1b0>
 800b236:	2900      	cmp	r1, #0
 800b238:	6863      	ldr	r3, [r4, #4]
 800b23a:	dd0b      	ble.n	800b254 <_printf_float+0x19c>
 800b23c:	6121      	str	r1, [r4, #16]
 800b23e:	b913      	cbnz	r3, 800b246 <_printf_float+0x18e>
 800b240:	6822      	ldr	r2, [r4, #0]
 800b242:	07d0      	lsls	r0, r2, #31
 800b244:	d502      	bpl.n	800b24c <_printf_float+0x194>
 800b246:	3301      	adds	r3, #1
 800b248:	440b      	add	r3, r1
 800b24a:	6123      	str	r3, [r4, #16]
 800b24c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b24e:	f04f 0900 	mov.w	r9, #0
 800b252:	e7db      	b.n	800b20c <_printf_float+0x154>
 800b254:	b913      	cbnz	r3, 800b25c <_printf_float+0x1a4>
 800b256:	6822      	ldr	r2, [r4, #0]
 800b258:	07d2      	lsls	r2, r2, #31
 800b25a:	d501      	bpl.n	800b260 <_printf_float+0x1a8>
 800b25c:	3302      	adds	r3, #2
 800b25e:	e7f4      	b.n	800b24a <_printf_float+0x192>
 800b260:	2301      	movs	r3, #1
 800b262:	e7f2      	b.n	800b24a <_printf_float+0x192>
 800b264:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b268:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b26a:	4299      	cmp	r1, r3
 800b26c:	db05      	blt.n	800b27a <_printf_float+0x1c2>
 800b26e:	6823      	ldr	r3, [r4, #0]
 800b270:	6121      	str	r1, [r4, #16]
 800b272:	07d8      	lsls	r0, r3, #31
 800b274:	d5ea      	bpl.n	800b24c <_printf_float+0x194>
 800b276:	1c4b      	adds	r3, r1, #1
 800b278:	e7e7      	b.n	800b24a <_printf_float+0x192>
 800b27a:	2900      	cmp	r1, #0
 800b27c:	bfd4      	ite	le
 800b27e:	f1c1 0202 	rsble	r2, r1, #2
 800b282:	2201      	movgt	r2, #1
 800b284:	4413      	add	r3, r2
 800b286:	e7e0      	b.n	800b24a <_printf_float+0x192>
 800b288:	6823      	ldr	r3, [r4, #0]
 800b28a:	055a      	lsls	r2, r3, #21
 800b28c:	d407      	bmi.n	800b29e <_printf_float+0x1e6>
 800b28e:	6923      	ldr	r3, [r4, #16]
 800b290:	4642      	mov	r2, r8
 800b292:	4631      	mov	r1, r6
 800b294:	4628      	mov	r0, r5
 800b296:	47b8      	blx	r7
 800b298:	3001      	adds	r0, #1
 800b29a:	d12b      	bne.n	800b2f4 <_printf_float+0x23c>
 800b29c:	e767      	b.n	800b16e <_printf_float+0xb6>
 800b29e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b2a2:	f240 80dd 	bls.w	800b460 <_printf_float+0x3a8>
 800b2a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	f7f5 fc13 	bl	8000ad8 <__aeabi_dcmpeq>
 800b2b2:	2800      	cmp	r0, #0
 800b2b4:	d033      	beq.n	800b31e <_printf_float+0x266>
 800b2b6:	4a37      	ldr	r2, [pc, #220]	@ (800b394 <_printf_float+0x2dc>)
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	4631      	mov	r1, r6
 800b2bc:	4628      	mov	r0, r5
 800b2be:	47b8      	blx	r7
 800b2c0:	3001      	adds	r0, #1
 800b2c2:	f43f af54 	beq.w	800b16e <_printf_float+0xb6>
 800b2c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b2ca:	4543      	cmp	r3, r8
 800b2cc:	db02      	blt.n	800b2d4 <_printf_float+0x21c>
 800b2ce:	6823      	ldr	r3, [r4, #0]
 800b2d0:	07d8      	lsls	r0, r3, #31
 800b2d2:	d50f      	bpl.n	800b2f4 <_printf_float+0x23c>
 800b2d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2d8:	4631      	mov	r1, r6
 800b2da:	4628      	mov	r0, r5
 800b2dc:	47b8      	blx	r7
 800b2de:	3001      	adds	r0, #1
 800b2e0:	f43f af45 	beq.w	800b16e <_printf_float+0xb6>
 800b2e4:	f04f 0900 	mov.w	r9, #0
 800b2e8:	f108 38ff 	add.w	r8, r8, #4294967295
 800b2ec:	f104 0a1a 	add.w	sl, r4, #26
 800b2f0:	45c8      	cmp	r8, r9
 800b2f2:	dc09      	bgt.n	800b308 <_printf_float+0x250>
 800b2f4:	6823      	ldr	r3, [r4, #0]
 800b2f6:	079b      	lsls	r3, r3, #30
 800b2f8:	f100 8103 	bmi.w	800b502 <_printf_float+0x44a>
 800b2fc:	68e0      	ldr	r0, [r4, #12]
 800b2fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b300:	4298      	cmp	r0, r3
 800b302:	bfb8      	it	lt
 800b304:	4618      	movlt	r0, r3
 800b306:	e734      	b.n	800b172 <_printf_float+0xba>
 800b308:	2301      	movs	r3, #1
 800b30a:	4652      	mov	r2, sl
 800b30c:	4631      	mov	r1, r6
 800b30e:	4628      	mov	r0, r5
 800b310:	47b8      	blx	r7
 800b312:	3001      	adds	r0, #1
 800b314:	f43f af2b 	beq.w	800b16e <_printf_float+0xb6>
 800b318:	f109 0901 	add.w	r9, r9, #1
 800b31c:	e7e8      	b.n	800b2f0 <_printf_float+0x238>
 800b31e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b320:	2b00      	cmp	r3, #0
 800b322:	dc39      	bgt.n	800b398 <_printf_float+0x2e0>
 800b324:	4a1b      	ldr	r2, [pc, #108]	@ (800b394 <_printf_float+0x2dc>)
 800b326:	2301      	movs	r3, #1
 800b328:	4631      	mov	r1, r6
 800b32a:	4628      	mov	r0, r5
 800b32c:	47b8      	blx	r7
 800b32e:	3001      	adds	r0, #1
 800b330:	f43f af1d 	beq.w	800b16e <_printf_float+0xb6>
 800b334:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b338:	ea59 0303 	orrs.w	r3, r9, r3
 800b33c:	d102      	bne.n	800b344 <_printf_float+0x28c>
 800b33e:	6823      	ldr	r3, [r4, #0]
 800b340:	07d9      	lsls	r1, r3, #31
 800b342:	d5d7      	bpl.n	800b2f4 <_printf_float+0x23c>
 800b344:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b348:	4631      	mov	r1, r6
 800b34a:	4628      	mov	r0, r5
 800b34c:	47b8      	blx	r7
 800b34e:	3001      	adds	r0, #1
 800b350:	f43f af0d 	beq.w	800b16e <_printf_float+0xb6>
 800b354:	f04f 0a00 	mov.w	sl, #0
 800b358:	f104 0b1a 	add.w	fp, r4, #26
 800b35c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b35e:	425b      	negs	r3, r3
 800b360:	4553      	cmp	r3, sl
 800b362:	dc01      	bgt.n	800b368 <_printf_float+0x2b0>
 800b364:	464b      	mov	r3, r9
 800b366:	e793      	b.n	800b290 <_printf_float+0x1d8>
 800b368:	2301      	movs	r3, #1
 800b36a:	465a      	mov	r2, fp
 800b36c:	4631      	mov	r1, r6
 800b36e:	4628      	mov	r0, r5
 800b370:	47b8      	blx	r7
 800b372:	3001      	adds	r0, #1
 800b374:	f43f aefb 	beq.w	800b16e <_printf_float+0xb6>
 800b378:	f10a 0a01 	add.w	sl, sl, #1
 800b37c:	e7ee      	b.n	800b35c <_printf_float+0x2a4>
 800b37e:	bf00      	nop
 800b380:	7fefffff 	.word	0x7fefffff
 800b384:	0800e454 	.word	0x0800e454
 800b388:	0800e450 	.word	0x0800e450
 800b38c:	0800e45c 	.word	0x0800e45c
 800b390:	0800e458 	.word	0x0800e458
 800b394:	0800e460 	.word	0x0800e460
 800b398:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b39a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b39e:	4553      	cmp	r3, sl
 800b3a0:	bfa8      	it	ge
 800b3a2:	4653      	movge	r3, sl
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	4699      	mov	r9, r3
 800b3a8:	dc36      	bgt.n	800b418 <_printf_float+0x360>
 800b3aa:	f04f 0b00 	mov.w	fp, #0
 800b3ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b3b2:	f104 021a 	add.w	r2, r4, #26
 800b3b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b3b8:	9306      	str	r3, [sp, #24]
 800b3ba:	eba3 0309 	sub.w	r3, r3, r9
 800b3be:	455b      	cmp	r3, fp
 800b3c0:	dc31      	bgt.n	800b426 <_printf_float+0x36e>
 800b3c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3c4:	459a      	cmp	sl, r3
 800b3c6:	dc3a      	bgt.n	800b43e <_printf_float+0x386>
 800b3c8:	6823      	ldr	r3, [r4, #0]
 800b3ca:	07da      	lsls	r2, r3, #31
 800b3cc:	d437      	bmi.n	800b43e <_printf_float+0x386>
 800b3ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3d0:	ebaa 0903 	sub.w	r9, sl, r3
 800b3d4:	9b06      	ldr	r3, [sp, #24]
 800b3d6:	ebaa 0303 	sub.w	r3, sl, r3
 800b3da:	4599      	cmp	r9, r3
 800b3dc:	bfa8      	it	ge
 800b3de:	4699      	movge	r9, r3
 800b3e0:	f1b9 0f00 	cmp.w	r9, #0
 800b3e4:	dc33      	bgt.n	800b44e <_printf_float+0x396>
 800b3e6:	f04f 0800 	mov.w	r8, #0
 800b3ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b3ee:	f104 0b1a 	add.w	fp, r4, #26
 800b3f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3f4:	ebaa 0303 	sub.w	r3, sl, r3
 800b3f8:	eba3 0309 	sub.w	r3, r3, r9
 800b3fc:	4543      	cmp	r3, r8
 800b3fe:	f77f af79 	ble.w	800b2f4 <_printf_float+0x23c>
 800b402:	2301      	movs	r3, #1
 800b404:	465a      	mov	r2, fp
 800b406:	4631      	mov	r1, r6
 800b408:	4628      	mov	r0, r5
 800b40a:	47b8      	blx	r7
 800b40c:	3001      	adds	r0, #1
 800b40e:	f43f aeae 	beq.w	800b16e <_printf_float+0xb6>
 800b412:	f108 0801 	add.w	r8, r8, #1
 800b416:	e7ec      	b.n	800b3f2 <_printf_float+0x33a>
 800b418:	4642      	mov	r2, r8
 800b41a:	4631      	mov	r1, r6
 800b41c:	4628      	mov	r0, r5
 800b41e:	47b8      	blx	r7
 800b420:	3001      	adds	r0, #1
 800b422:	d1c2      	bne.n	800b3aa <_printf_float+0x2f2>
 800b424:	e6a3      	b.n	800b16e <_printf_float+0xb6>
 800b426:	2301      	movs	r3, #1
 800b428:	4631      	mov	r1, r6
 800b42a:	4628      	mov	r0, r5
 800b42c:	9206      	str	r2, [sp, #24]
 800b42e:	47b8      	blx	r7
 800b430:	3001      	adds	r0, #1
 800b432:	f43f ae9c 	beq.w	800b16e <_printf_float+0xb6>
 800b436:	9a06      	ldr	r2, [sp, #24]
 800b438:	f10b 0b01 	add.w	fp, fp, #1
 800b43c:	e7bb      	b.n	800b3b6 <_printf_float+0x2fe>
 800b43e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b442:	4631      	mov	r1, r6
 800b444:	4628      	mov	r0, r5
 800b446:	47b8      	blx	r7
 800b448:	3001      	adds	r0, #1
 800b44a:	d1c0      	bne.n	800b3ce <_printf_float+0x316>
 800b44c:	e68f      	b.n	800b16e <_printf_float+0xb6>
 800b44e:	9a06      	ldr	r2, [sp, #24]
 800b450:	464b      	mov	r3, r9
 800b452:	4442      	add	r2, r8
 800b454:	4631      	mov	r1, r6
 800b456:	4628      	mov	r0, r5
 800b458:	47b8      	blx	r7
 800b45a:	3001      	adds	r0, #1
 800b45c:	d1c3      	bne.n	800b3e6 <_printf_float+0x32e>
 800b45e:	e686      	b.n	800b16e <_printf_float+0xb6>
 800b460:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b464:	f1ba 0f01 	cmp.w	sl, #1
 800b468:	dc01      	bgt.n	800b46e <_printf_float+0x3b6>
 800b46a:	07db      	lsls	r3, r3, #31
 800b46c:	d536      	bpl.n	800b4dc <_printf_float+0x424>
 800b46e:	2301      	movs	r3, #1
 800b470:	4642      	mov	r2, r8
 800b472:	4631      	mov	r1, r6
 800b474:	4628      	mov	r0, r5
 800b476:	47b8      	blx	r7
 800b478:	3001      	adds	r0, #1
 800b47a:	f43f ae78 	beq.w	800b16e <_printf_float+0xb6>
 800b47e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b482:	4631      	mov	r1, r6
 800b484:	4628      	mov	r0, r5
 800b486:	47b8      	blx	r7
 800b488:	3001      	adds	r0, #1
 800b48a:	f43f ae70 	beq.w	800b16e <_printf_float+0xb6>
 800b48e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b492:	2200      	movs	r2, #0
 800b494:	2300      	movs	r3, #0
 800b496:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b49a:	f7f5 fb1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800b49e:	b9c0      	cbnz	r0, 800b4d2 <_printf_float+0x41a>
 800b4a0:	4653      	mov	r3, sl
 800b4a2:	f108 0201 	add.w	r2, r8, #1
 800b4a6:	4631      	mov	r1, r6
 800b4a8:	4628      	mov	r0, r5
 800b4aa:	47b8      	blx	r7
 800b4ac:	3001      	adds	r0, #1
 800b4ae:	d10c      	bne.n	800b4ca <_printf_float+0x412>
 800b4b0:	e65d      	b.n	800b16e <_printf_float+0xb6>
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	465a      	mov	r2, fp
 800b4b6:	4631      	mov	r1, r6
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	47b8      	blx	r7
 800b4bc:	3001      	adds	r0, #1
 800b4be:	f43f ae56 	beq.w	800b16e <_printf_float+0xb6>
 800b4c2:	f108 0801 	add.w	r8, r8, #1
 800b4c6:	45d0      	cmp	r8, sl
 800b4c8:	dbf3      	blt.n	800b4b2 <_printf_float+0x3fa>
 800b4ca:	464b      	mov	r3, r9
 800b4cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b4d0:	e6df      	b.n	800b292 <_printf_float+0x1da>
 800b4d2:	f04f 0800 	mov.w	r8, #0
 800b4d6:	f104 0b1a 	add.w	fp, r4, #26
 800b4da:	e7f4      	b.n	800b4c6 <_printf_float+0x40e>
 800b4dc:	2301      	movs	r3, #1
 800b4de:	4642      	mov	r2, r8
 800b4e0:	e7e1      	b.n	800b4a6 <_printf_float+0x3ee>
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	464a      	mov	r2, r9
 800b4e6:	4631      	mov	r1, r6
 800b4e8:	4628      	mov	r0, r5
 800b4ea:	47b8      	blx	r7
 800b4ec:	3001      	adds	r0, #1
 800b4ee:	f43f ae3e 	beq.w	800b16e <_printf_float+0xb6>
 800b4f2:	f108 0801 	add.w	r8, r8, #1
 800b4f6:	68e3      	ldr	r3, [r4, #12]
 800b4f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b4fa:	1a5b      	subs	r3, r3, r1
 800b4fc:	4543      	cmp	r3, r8
 800b4fe:	dcf0      	bgt.n	800b4e2 <_printf_float+0x42a>
 800b500:	e6fc      	b.n	800b2fc <_printf_float+0x244>
 800b502:	f04f 0800 	mov.w	r8, #0
 800b506:	f104 0919 	add.w	r9, r4, #25
 800b50a:	e7f4      	b.n	800b4f6 <_printf_float+0x43e>

0800b50c <_printf_common>:
 800b50c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b510:	4616      	mov	r6, r2
 800b512:	4698      	mov	r8, r3
 800b514:	688a      	ldr	r2, [r1, #8]
 800b516:	690b      	ldr	r3, [r1, #16]
 800b518:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b51c:	4293      	cmp	r3, r2
 800b51e:	bfb8      	it	lt
 800b520:	4613      	movlt	r3, r2
 800b522:	6033      	str	r3, [r6, #0]
 800b524:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b528:	4607      	mov	r7, r0
 800b52a:	460c      	mov	r4, r1
 800b52c:	b10a      	cbz	r2, 800b532 <_printf_common+0x26>
 800b52e:	3301      	adds	r3, #1
 800b530:	6033      	str	r3, [r6, #0]
 800b532:	6823      	ldr	r3, [r4, #0]
 800b534:	0699      	lsls	r1, r3, #26
 800b536:	bf42      	ittt	mi
 800b538:	6833      	ldrmi	r3, [r6, #0]
 800b53a:	3302      	addmi	r3, #2
 800b53c:	6033      	strmi	r3, [r6, #0]
 800b53e:	6825      	ldr	r5, [r4, #0]
 800b540:	f015 0506 	ands.w	r5, r5, #6
 800b544:	d106      	bne.n	800b554 <_printf_common+0x48>
 800b546:	f104 0a19 	add.w	sl, r4, #25
 800b54a:	68e3      	ldr	r3, [r4, #12]
 800b54c:	6832      	ldr	r2, [r6, #0]
 800b54e:	1a9b      	subs	r3, r3, r2
 800b550:	42ab      	cmp	r3, r5
 800b552:	dc26      	bgt.n	800b5a2 <_printf_common+0x96>
 800b554:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b558:	6822      	ldr	r2, [r4, #0]
 800b55a:	3b00      	subs	r3, #0
 800b55c:	bf18      	it	ne
 800b55e:	2301      	movne	r3, #1
 800b560:	0692      	lsls	r2, r2, #26
 800b562:	d42b      	bmi.n	800b5bc <_printf_common+0xb0>
 800b564:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b568:	4641      	mov	r1, r8
 800b56a:	4638      	mov	r0, r7
 800b56c:	47c8      	blx	r9
 800b56e:	3001      	adds	r0, #1
 800b570:	d01e      	beq.n	800b5b0 <_printf_common+0xa4>
 800b572:	6823      	ldr	r3, [r4, #0]
 800b574:	6922      	ldr	r2, [r4, #16]
 800b576:	f003 0306 	and.w	r3, r3, #6
 800b57a:	2b04      	cmp	r3, #4
 800b57c:	bf02      	ittt	eq
 800b57e:	68e5      	ldreq	r5, [r4, #12]
 800b580:	6833      	ldreq	r3, [r6, #0]
 800b582:	1aed      	subeq	r5, r5, r3
 800b584:	68a3      	ldr	r3, [r4, #8]
 800b586:	bf0c      	ite	eq
 800b588:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b58c:	2500      	movne	r5, #0
 800b58e:	4293      	cmp	r3, r2
 800b590:	bfc4      	itt	gt
 800b592:	1a9b      	subgt	r3, r3, r2
 800b594:	18ed      	addgt	r5, r5, r3
 800b596:	2600      	movs	r6, #0
 800b598:	341a      	adds	r4, #26
 800b59a:	42b5      	cmp	r5, r6
 800b59c:	d11a      	bne.n	800b5d4 <_printf_common+0xc8>
 800b59e:	2000      	movs	r0, #0
 800b5a0:	e008      	b.n	800b5b4 <_printf_common+0xa8>
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	4652      	mov	r2, sl
 800b5a6:	4641      	mov	r1, r8
 800b5a8:	4638      	mov	r0, r7
 800b5aa:	47c8      	blx	r9
 800b5ac:	3001      	adds	r0, #1
 800b5ae:	d103      	bne.n	800b5b8 <_printf_common+0xac>
 800b5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5b8:	3501      	adds	r5, #1
 800b5ba:	e7c6      	b.n	800b54a <_printf_common+0x3e>
 800b5bc:	18e1      	adds	r1, r4, r3
 800b5be:	1c5a      	adds	r2, r3, #1
 800b5c0:	2030      	movs	r0, #48	@ 0x30
 800b5c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b5c6:	4422      	add	r2, r4
 800b5c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b5cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b5d0:	3302      	adds	r3, #2
 800b5d2:	e7c7      	b.n	800b564 <_printf_common+0x58>
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	4622      	mov	r2, r4
 800b5d8:	4641      	mov	r1, r8
 800b5da:	4638      	mov	r0, r7
 800b5dc:	47c8      	blx	r9
 800b5de:	3001      	adds	r0, #1
 800b5e0:	d0e6      	beq.n	800b5b0 <_printf_common+0xa4>
 800b5e2:	3601      	adds	r6, #1
 800b5e4:	e7d9      	b.n	800b59a <_printf_common+0x8e>
	...

0800b5e8 <_printf_i>:
 800b5e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5ec:	7e0f      	ldrb	r7, [r1, #24]
 800b5ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b5f0:	2f78      	cmp	r7, #120	@ 0x78
 800b5f2:	4691      	mov	r9, r2
 800b5f4:	4680      	mov	r8, r0
 800b5f6:	460c      	mov	r4, r1
 800b5f8:	469a      	mov	sl, r3
 800b5fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b5fe:	d807      	bhi.n	800b610 <_printf_i+0x28>
 800b600:	2f62      	cmp	r7, #98	@ 0x62
 800b602:	d80a      	bhi.n	800b61a <_printf_i+0x32>
 800b604:	2f00      	cmp	r7, #0
 800b606:	f000 80d1 	beq.w	800b7ac <_printf_i+0x1c4>
 800b60a:	2f58      	cmp	r7, #88	@ 0x58
 800b60c:	f000 80b8 	beq.w	800b780 <_printf_i+0x198>
 800b610:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b614:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b618:	e03a      	b.n	800b690 <_printf_i+0xa8>
 800b61a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b61e:	2b15      	cmp	r3, #21
 800b620:	d8f6      	bhi.n	800b610 <_printf_i+0x28>
 800b622:	a101      	add	r1, pc, #4	@ (adr r1, 800b628 <_printf_i+0x40>)
 800b624:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b628:	0800b681 	.word	0x0800b681
 800b62c:	0800b695 	.word	0x0800b695
 800b630:	0800b611 	.word	0x0800b611
 800b634:	0800b611 	.word	0x0800b611
 800b638:	0800b611 	.word	0x0800b611
 800b63c:	0800b611 	.word	0x0800b611
 800b640:	0800b695 	.word	0x0800b695
 800b644:	0800b611 	.word	0x0800b611
 800b648:	0800b611 	.word	0x0800b611
 800b64c:	0800b611 	.word	0x0800b611
 800b650:	0800b611 	.word	0x0800b611
 800b654:	0800b793 	.word	0x0800b793
 800b658:	0800b6bf 	.word	0x0800b6bf
 800b65c:	0800b74d 	.word	0x0800b74d
 800b660:	0800b611 	.word	0x0800b611
 800b664:	0800b611 	.word	0x0800b611
 800b668:	0800b7b5 	.word	0x0800b7b5
 800b66c:	0800b611 	.word	0x0800b611
 800b670:	0800b6bf 	.word	0x0800b6bf
 800b674:	0800b611 	.word	0x0800b611
 800b678:	0800b611 	.word	0x0800b611
 800b67c:	0800b755 	.word	0x0800b755
 800b680:	6833      	ldr	r3, [r6, #0]
 800b682:	1d1a      	adds	r2, r3, #4
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	6032      	str	r2, [r6, #0]
 800b688:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b68c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b690:	2301      	movs	r3, #1
 800b692:	e09c      	b.n	800b7ce <_printf_i+0x1e6>
 800b694:	6833      	ldr	r3, [r6, #0]
 800b696:	6820      	ldr	r0, [r4, #0]
 800b698:	1d19      	adds	r1, r3, #4
 800b69a:	6031      	str	r1, [r6, #0]
 800b69c:	0606      	lsls	r6, r0, #24
 800b69e:	d501      	bpl.n	800b6a4 <_printf_i+0xbc>
 800b6a0:	681d      	ldr	r5, [r3, #0]
 800b6a2:	e003      	b.n	800b6ac <_printf_i+0xc4>
 800b6a4:	0645      	lsls	r5, r0, #25
 800b6a6:	d5fb      	bpl.n	800b6a0 <_printf_i+0xb8>
 800b6a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b6ac:	2d00      	cmp	r5, #0
 800b6ae:	da03      	bge.n	800b6b8 <_printf_i+0xd0>
 800b6b0:	232d      	movs	r3, #45	@ 0x2d
 800b6b2:	426d      	negs	r5, r5
 800b6b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6b8:	4858      	ldr	r0, [pc, #352]	@ (800b81c <_printf_i+0x234>)
 800b6ba:	230a      	movs	r3, #10
 800b6bc:	e011      	b.n	800b6e2 <_printf_i+0xfa>
 800b6be:	6821      	ldr	r1, [r4, #0]
 800b6c0:	6833      	ldr	r3, [r6, #0]
 800b6c2:	0608      	lsls	r0, r1, #24
 800b6c4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b6c8:	d402      	bmi.n	800b6d0 <_printf_i+0xe8>
 800b6ca:	0649      	lsls	r1, r1, #25
 800b6cc:	bf48      	it	mi
 800b6ce:	b2ad      	uxthmi	r5, r5
 800b6d0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b6d2:	4852      	ldr	r0, [pc, #328]	@ (800b81c <_printf_i+0x234>)
 800b6d4:	6033      	str	r3, [r6, #0]
 800b6d6:	bf14      	ite	ne
 800b6d8:	230a      	movne	r3, #10
 800b6da:	2308      	moveq	r3, #8
 800b6dc:	2100      	movs	r1, #0
 800b6de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b6e2:	6866      	ldr	r6, [r4, #4]
 800b6e4:	60a6      	str	r6, [r4, #8]
 800b6e6:	2e00      	cmp	r6, #0
 800b6e8:	db05      	blt.n	800b6f6 <_printf_i+0x10e>
 800b6ea:	6821      	ldr	r1, [r4, #0]
 800b6ec:	432e      	orrs	r6, r5
 800b6ee:	f021 0104 	bic.w	r1, r1, #4
 800b6f2:	6021      	str	r1, [r4, #0]
 800b6f4:	d04b      	beq.n	800b78e <_printf_i+0x1a6>
 800b6f6:	4616      	mov	r6, r2
 800b6f8:	fbb5 f1f3 	udiv	r1, r5, r3
 800b6fc:	fb03 5711 	mls	r7, r3, r1, r5
 800b700:	5dc7      	ldrb	r7, [r0, r7]
 800b702:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b706:	462f      	mov	r7, r5
 800b708:	42bb      	cmp	r3, r7
 800b70a:	460d      	mov	r5, r1
 800b70c:	d9f4      	bls.n	800b6f8 <_printf_i+0x110>
 800b70e:	2b08      	cmp	r3, #8
 800b710:	d10b      	bne.n	800b72a <_printf_i+0x142>
 800b712:	6823      	ldr	r3, [r4, #0]
 800b714:	07df      	lsls	r7, r3, #31
 800b716:	d508      	bpl.n	800b72a <_printf_i+0x142>
 800b718:	6923      	ldr	r3, [r4, #16]
 800b71a:	6861      	ldr	r1, [r4, #4]
 800b71c:	4299      	cmp	r1, r3
 800b71e:	bfde      	ittt	le
 800b720:	2330      	movle	r3, #48	@ 0x30
 800b722:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b726:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b72a:	1b92      	subs	r2, r2, r6
 800b72c:	6122      	str	r2, [r4, #16]
 800b72e:	f8cd a000 	str.w	sl, [sp]
 800b732:	464b      	mov	r3, r9
 800b734:	aa03      	add	r2, sp, #12
 800b736:	4621      	mov	r1, r4
 800b738:	4640      	mov	r0, r8
 800b73a:	f7ff fee7 	bl	800b50c <_printf_common>
 800b73e:	3001      	adds	r0, #1
 800b740:	d14a      	bne.n	800b7d8 <_printf_i+0x1f0>
 800b742:	f04f 30ff 	mov.w	r0, #4294967295
 800b746:	b004      	add	sp, #16
 800b748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b74c:	6823      	ldr	r3, [r4, #0]
 800b74e:	f043 0320 	orr.w	r3, r3, #32
 800b752:	6023      	str	r3, [r4, #0]
 800b754:	4832      	ldr	r0, [pc, #200]	@ (800b820 <_printf_i+0x238>)
 800b756:	2778      	movs	r7, #120	@ 0x78
 800b758:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b75c:	6823      	ldr	r3, [r4, #0]
 800b75e:	6831      	ldr	r1, [r6, #0]
 800b760:	061f      	lsls	r7, r3, #24
 800b762:	f851 5b04 	ldr.w	r5, [r1], #4
 800b766:	d402      	bmi.n	800b76e <_printf_i+0x186>
 800b768:	065f      	lsls	r7, r3, #25
 800b76a:	bf48      	it	mi
 800b76c:	b2ad      	uxthmi	r5, r5
 800b76e:	6031      	str	r1, [r6, #0]
 800b770:	07d9      	lsls	r1, r3, #31
 800b772:	bf44      	itt	mi
 800b774:	f043 0320 	orrmi.w	r3, r3, #32
 800b778:	6023      	strmi	r3, [r4, #0]
 800b77a:	b11d      	cbz	r5, 800b784 <_printf_i+0x19c>
 800b77c:	2310      	movs	r3, #16
 800b77e:	e7ad      	b.n	800b6dc <_printf_i+0xf4>
 800b780:	4826      	ldr	r0, [pc, #152]	@ (800b81c <_printf_i+0x234>)
 800b782:	e7e9      	b.n	800b758 <_printf_i+0x170>
 800b784:	6823      	ldr	r3, [r4, #0]
 800b786:	f023 0320 	bic.w	r3, r3, #32
 800b78a:	6023      	str	r3, [r4, #0]
 800b78c:	e7f6      	b.n	800b77c <_printf_i+0x194>
 800b78e:	4616      	mov	r6, r2
 800b790:	e7bd      	b.n	800b70e <_printf_i+0x126>
 800b792:	6833      	ldr	r3, [r6, #0]
 800b794:	6825      	ldr	r5, [r4, #0]
 800b796:	6961      	ldr	r1, [r4, #20]
 800b798:	1d18      	adds	r0, r3, #4
 800b79a:	6030      	str	r0, [r6, #0]
 800b79c:	062e      	lsls	r6, r5, #24
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	d501      	bpl.n	800b7a6 <_printf_i+0x1be>
 800b7a2:	6019      	str	r1, [r3, #0]
 800b7a4:	e002      	b.n	800b7ac <_printf_i+0x1c4>
 800b7a6:	0668      	lsls	r0, r5, #25
 800b7a8:	d5fb      	bpl.n	800b7a2 <_printf_i+0x1ba>
 800b7aa:	8019      	strh	r1, [r3, #0]
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	6123      	str	r3, [r4, #16]
 800b7b0:	4616      	mov	r6, r2
 800b7b2:	e7bc      	b.n	800b72e <_printf_i+0x146>
 800b7b4:	6833      	ldr	r3, [r6, #0]
 800b7b6:	1d1a      	adds	r2, r3, #4
 800b7b8:	6032      	str	r2, [r6, #0]
 800b7ba:	681e      	ldr	r6, [r3, #0]
 800b7bc:	6862      	ldr	r2, [r4, #4]
 800b7be:	2100      	movs	r1, #0
 800b7c0:	4630      	mov	r0, r6
 800b7c2:	f7f4 fd0d 	bl	80001e0 <memchr>
 800b7c6:	b108      	cbz	r0, 800b7cc <_printf_i+0x1e4>
 800b7c8:	1b80      	subs	r0, r0, r6
 800b7ca:	6060      	str	r0, [r4, #4]
 800b7cc:	6863      	ldr	r3, [r4, #4]
 800b7ce:	6123      	str	r3, [r4, #16]
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7d6:	e7aa      	b.n	800b72e <_printf_i+0x146>
 800b7d8:	6923      	ldr	r3, [r4, #16]
 800b7da:	4632      	mov	r2, r6
 800b7dc:	4649      	mov	r1, r9
 800b7de:	4640      	mov	r0, r8
 800b7e0:	47d0      	blx	sl
 800b7e2:	3001      	adds	r0, #1
 800b7e4:	d0ad      	beq.n	800b742 <_printf_i+0x15a>
 800b7e6:	6823      	ldr	r3, [r4, #0]
 800b7e8:	079b      	lsls	r3, r3, #30
 800b7ea:	d413      	bmi.n	800b814 <_printf_i+0x22c>
 800b7ec:	68e0      	ldr	r0, [r4, #12]
 800b7ee:	9b03      	ldr	r3, [sp, #12]
 800b7f0:	4298      	cmp	r0, r3
 800b7f2:	bfb8      	it	lt
 800b7f4:	4618      	movlt	r0, r3
 800b7f6:	e7a6      	b.n	800b746 <_printf_i+0x15e>
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	4632      	mov	r2, r6
 800b7fc:	4649      	mov	r1, r9
 800b7fe:	4640      	mov	r0, r8
 800b800:	47d0      	blx	sl
 800b802:	3001      	adds	r0, #1
 800b804:	d09d      	beq.n	800b742 <_printf_i+0x15a>
 800b806:	3501      	adds	r5, #1
 800b808:	68e3      	ldr	r3, [r4, #12]
 800b80a:	9903      	ldr	r1, [sp, #12]
 800b80c:	1a5b      	subs	r3, r3, r1
 800b80e:	42ab      	cmp	r3, r5
 800b810:	dcf2      	bgt.n	800b7f8 <_printf_i+0x210>
 800b812:	e7eb      	b.n	800b7ec <_printf_i+0x204>
 800b814:	2500      	movs	r5, #0
 800b816:	f104 0619 	add.w	r6, r4, #25
 800b81a:	e7f5      	b.n	800b808 <_printf_i+0x220>
 800b81c:	0800e462 	.word	0x0800e462
 800b820:	0800e473 	.word	0x0800e473

0800b824 <std>:
 800b824:	2300      	movs	r3, #0
 800b826:	b510      	push	{r4, lr}
 800b828:	4604      	mov	r4, r0
 800b82a:	e9c0 3300 	strd	r3, r3, [r0]
 800b82e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b832:	6083      	str	r3, [r0, #8]
 800b834:	8181      	strh	r1, [r0, #12]
 800b836:	6643      	str	r3, [r0, #100]	@ 0x64
 800b838:	81c2      	strh	r2, [r0, #14]
 800b83a:	6183      	str	r3, [r0, #24]
 800b83c:	4619      	mov	r1, r3
 800b83e:	2208      	movs	r2, #8
 800b840:	305c      	adds	r0, #92	@ 0x5c
 800b842:	f000 f92a 	bl	800ba9a <memset>
 800b846:	4b0d      	ldr	r3, [pc, #52]	@ (800b87c <std+0x58>)
 800b848:	6263      	str	r3, [r4, #36]	@ 0x24
 800b84a:	4b0d      	ldr	r3, [pc, #52]	@ (800b880 <std+0x5c>)
 800b84c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b84e:	4b0d      	ldr	r3, [pc, #52]	@ (800b884 <std+0x60>)
 800b850:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b852:	4b0d      	ldr	r3, [pc, #52]	@ (800b888 <std+0x64>)
 800b854:	6323      	str	r3, [r4, #48]	@ 0x30
 800b856:	4b0d      	ldr	r3, [pc, #52]	@ (800b88c <std+0x68>)
 800b858:	6224      	str	r4, [r4, #32]
 800b85a:	429c      	cmp	r4, r3
 800b85c:	d006      	beq.n	800b86c <std+0x48>
 800b85e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b862:	4294      	cmp	r4, r2
 800b864:	d002      	beq.n	800b86c <std+0x48>
 800b866:	33d0      	adds	r3, #208	@ 0xd0
 800b868:	429c      	cmp	r4, r3
 800b86a:	d105      	bne.n	800b878 <std+0x54>
 800b86c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b874:	f000 b98e 	b.w	800bb94 <__retarget_lock_init_recursive>
 800b878:	bd10      	pop	{r4, pc}
 800b87a:	bf00      	nop
 800b87c:	0800ba15 	.word	0x0800ba15
 800b880:	0800ba37 	.word	0x0800ba37
 800b884:	0800ba6f 	.word	0x0800ba6f
 800b888:	0800ba93 	.word	0x0800ba93
 800b88c:	20005ec8 	.word	0x20005ec8

0800b890 <stdio_exit_handler>:
 800b890:	4a02      	ldr	r2, [pc, #8]	@ (800b89c <stdio_exit_handler+0xc>)
 800b892:	4903      	ldr	r1, [pc, #12]	@ (800b8a0 <stdio_exit_handler+0x10>)
 800b894:	4803      	ldr	r0, [pc, #12]	@ (800b8a4 <stdio_exit_handler+0x14>)
 800b896:	f000 b869 	b.w	800b96c <_fwalk_sglue>
 800b89a:	bf00      	nop
 800b89c:	20000190 	.word	0x20000190
 800b8a0:	0800d515 	.word	0x0800d515
 800b8a4:	200001a0 	.word	0x200001a0

0800b8a8 <cleanup_stdio>:
 800b8a8:	6841      	ldr	r1, [r0, #4]
 800b8aa:	4b0c      	ldr	r3, [pc, #48]	@ (800b8dc <cleanup_stdio+0x34>)
 800b8ac:	4299      	cmp	r1, r3
 800b8ae:	b510      	push	{r4, lr}
 800b8b0:	4604      	mov	r4, r0
 800b8b2:	d001      	beq.n	800b8b8 <cleanup_stdio+0x10>
 800b8b4:	f001 fe2e 	bl	800d514 <_fflush_r>
 800b8b8:	68a1      	ldr	r1, [r4, #8]
 800b8ba:	4b09      	ldr	r3, [pc, #36]	@ (800b8e0 <cleanup_stdio+0x38>)
 800b8bc:	4299      	cmp	r1, r3
 800b8be:	d002      	beq.n	800b8c6 <cleanup_stdio+0x1e>
 800b8c0:	4620      	mov	r0, r4
 800b8c2:	f001 fe27 	bl	800d514 <_fflush_r>
 800b8c6:	68e1      	ldr	r1, [r4, #12]
 800b8c8:	4b06      	ldr	r3, [pc, #24]	@ (800b8e4 <cleanup_stdio+0x3c>)
 800b8ca:	4299      	cmp	r1, r3
 800b8cc:	d004      	beq.n	800b8d8 <cleanup_stdio+0x30>
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8d4:	f001 be1e 	b.w	800d514 <_fflush_r>
 800b8d8:	bd10      	pop	{r4, pc}
 800b8da:	bf00      	nop
 800b8dc:	20005ec8 	.word	0x20005ec8
 800b8e0:	20005f30 	.word	0x20005f30
 800b8e4:	20005f98 	.word	0x20005f98

0800b8e8 <global_stdio_init.part.0>:
 800b8e8:	b510      	push	{r4, lr}
 800b8ea:	4b0b      	ldr	r3, [pc, #44]	@ (800b918 <global_stdio_init.part.0+0x30>)
 800b8ec:	4c0b      	ldr	r4, [pc, #44]	@ (800b91c <global_stdio_init.part.0+0x34>)
 800b8ee:	4a0c      	ldr	r2, [pc, #48]	@ (800b920 <global_stdio_init.part.0+0x38>)
 800b8f0:	601a      	str	r2, [r3, #0]
 800b8f2:	4620      	mov	r0, r4
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	2104      	movs	r1, #4
 800b8f8:	f7ff ff94 	bl	800b824 <std>
 800b8fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b900:	2201      	movs	r2, #1
 800b902:	2109      	movs	r1, #9
 800b904:	f7ff ff8e 	bl	800b824 <std>
 800b908:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b90c:	2202      	movs	r2, #2
 800b90e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b912:	2112      	movs	r1, #18
 800b914:	f7ff bf86 	b.w	800b824 <std>
 800b918:	20006000 	.word	0x20006000
 800b91c:	20005ec8 	.word	0x20005ec8
 800b920:	0800b891 	.word	0x0800b891

0800b924 <__sfp_lock_acquire>:
 800b924:	4801      	ldr	r0, [pc, #4]	@ (800b92c <__sfp_lock_acquire+0x8>)
 800b926:	f000 b936 	b.w	800bb96 <__retarget_lock_acquire_recursive>
 800b92a:	bf00      	nop
 800b92c:	20006009 	.word	0x20006009

0800b930 <__sfp_lock_release>:
 800b930:	4801      	ldr	r0, [pc, #4]	@ (800b938 <__sfp_lock_release+0x8>)
 800b932:	f000 b931 	b.w	800bb98 <__retarget_lock_release_recursive>
 800b936:	bf00      	nop
 800b938:	20006009 	.word	0x20006009

0800b93c <__sinit>:
 800b93c:	b510      	push	{r4, lr}
 800b93e:	4604      	mov	r4, r0
 800b940:	f7ff fff0 	bl	800b924 <__sfp_lock_acquire>
 800b944:	6a23      	ldr	r3, [r4, #32]
 800b946:	b11b      	cbz	r3, 800b950 <__sinit+0x14>
 800b948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b94c:	f7ff bff0 	b.w	800b930 <__sfp_lock_release>
 800b950:	4b04      	ldr	r3, [pc, #16]	@ (800b964 <__sinit+0x28>)
 800b952:	6223      	str	r3, [r4, #32]
 800b954:	4b04      	ldr	r3, [pc, #16]	@ (800b968 <__sinit+0x2c>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d1f5      	bne.n	800b948 <__sinit+0xc>
 800b95c:	f7ff ffc4 	bl	800b8e8 <global_stdio_init.part.0>
 800b960:	e7f2      	b.n	800b948 <__sinit+0xc>
 800b962:	bf00      	nop
 800b964:	0800b8a9 	.word	0x0800b8a9
 800b968:	20006000 	.word	0x20006000

0800b96c <_fwalk_sglue>:
 800b96c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b970:	4607      	mov	r7, r0
 800b972:	4688      	mov	r8, r1
 800b974:	4614      	mov	r4, r2
 800b976:	2600      	movs	r6, #0
 800b978:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b97c:	f1b9 0901 	subs.w	r9, r9, #1
 800b980:	d505      	bpl.n	800b98e <_fwalk_sglue+0x22>
 800b982:	6824      	ldr	r4, [r4, #0]
 800b984:	2c00      	cmp	r4, #0
 800b986:	d1f7      	bne.n	800b978 <_fwalk_sglue+0xc>
 800b988:	4630      	mov	r0, r6
 800b98a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b98e:	89ab      	ldrh	r3, [r5, #12]
 800b990:	2b01      	cmp	r3, #1
 800b992:	d907      	bls.n	800b9a4 <_fwalk_sglue+0x38>
 800b994:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b998:	3301      	adds	r3, #1
 800b99a:	d003      	beq.n	800b9a4 <_fwalk_sglue+0x38>
 800b99c:	4629      	mov	r1, r5
 800b99e:	4638      	mov	r0, r7
 800b9a0:	47c0      	blx	r8
 800b9a2:	4306      	orrs	r6, r0
 800b9a4:	3568      	adds	r5, #104	@ 0x68
 800b9a6:	e7e9      	b.n	800b97c <_fwalk_sglue+0x10>

0800b9a8 <sniprintf>:
 800b9a8:	b40c      	push	{r2, r3}
 800b9aa:	b530      	push	{r4, r5, lr}
 800b9ac:	4b18      	ldr	r3, [pc, #96]	@ (800ba10 <sniprintf+0x68>)
 800b9ae:	1e0c      	subs	r4, r1, #0
 800b9b0:	681d      	ldr	r5, [r3, #0]
 800b9b2:	b09d      	sub	sp, #116	@ 0x74
 800b9b4:	da08      	bge.n	800b9c8 <sniprintf+0x20>
 800b9b6:	238b      	movs	r3, #139	@ 0x8b
 800b9b8:	602b      	str	r3, [r5, #0]
 800b9ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b9be:	b01d      	add	sp, #116	@ 0x74
 800b9c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9c4:	b002      	add	sp, #8
 800b9c6:	4770      	bx	lr
 800b9c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b9cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b9d0:	f04f 0300 	mov.w	r3, #0
 800b9d4:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b9d6:	bf14      	ite	ne
 800b9d8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b9dc:	4623      	moveq	r3, r4
 800b9de:	9304      	str	r3, [sp, #16]
 800b9e0:	9307      	str	r3, [sp, #28]
 800b9e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b9e6:	9002      	str	r0, [sp, #8]
 800b9e8:	9006      	str	r0, [sp, #24]
 800b9ea:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b9ee:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b9f0:	ab21      	add	r3, sp, #132	@ 0x84
 800b9f2:	a902      	add	r1, sp, #8
 800b9f4:	4628      	mov	r0, r5
 800b9f6:	9301      	str	r3, [sp, #4]
 800b9f8:	f001 fc0c 	bl	800d214 <_svfiprintf_r>
 800b9fc:	1c43      	adds	r3, r0, #1
 800b9fe:	bfbc      	itt	lt
 800ba00:	238b      	movlt	r3, #139	@ 0x8b
 800ba02:	602b      	strlt	r3, [r5, #0]
 800ba04:	2c00      	cmp	r4, #0
 800ba06:	d0da      	beq.n	800b9be <sniprintf+0x16>
 800ba08:	9b02      	ldr	r3, [sp, #8]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	701a      	strb	r2, [r3, #0]
 800ba0e:	e7d6      	b.n	800b9be <sniprintf+0x16>
 800ba10:	2000019c 	.word	0x2000019c

0800ba14 <__sread>:
 800ba14:	b510      	push	{r4, lr}
 800ba16:	460c      	mov	r4, r1
 800ba18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba1c:	f000 f86c 	bl	800baf8 <_read_r>
 800ba20:	2800      	cmp	r0, #0
 800ba22:	bfab      	itete	ge
 800ba24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ba26:	89a3      	ldrhlt	r3, [r4, #12]
 800ba28:	181b      	addge	r3, r3, r0
 800ba2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ba2e:	bfac      	ite	ge
 800ba30:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ba32:	81a3      	strhlt	r3, [r4, #12]
 800ba34:	bd10      	pop	{r4, pc}

0800ba36 <__swrite>:
 800ba36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba3a:	461f      	mov	r7, r3
 800ba3c:	898b      	ldrh	r3, [r1, #12]
 800ba3e:	05db      	lsls	r3, r3, #23
 800ba40:	4605      	mov	r5, r0
 800ba42:	460c      	mov	r4, r1
 800ba44:	4616      	mov	r6, r2
 800ba46:	d505      	bpl.n	800ba54 <__swrite+0x1e>
 800ba48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba4c:	2302      	movs	r3, #2
 800ba4e:	2200      	movs	r2, #0
 800ba50:	f000 f840 	bl	800bad4 <_lseek_r>
 800ba54:	89a3      	ldrh	r3, [r4, #12]
 800ba56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ba5e:	81a3      	strh	r3, [r4, #12]
 800ba60:	4632      	mov	r2, r6
 800ba62:	463b      	mov	r3, r7
 800ba64:	4628      	mov	r0, r5
 800ba66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba6a:	f000 b857 	b.w	800bb1c <_write_r>

0800ba6e <__sseek>:
 800ba6e:	b510      	push	{r4, lr}
 800ba70:	460c      	mov	r4, r1
 800ba72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba76:	f000 f82d 	bl	800bad4 <_lseek_r>
 800ba7a:	1c43      	adds	r3, r0, #1
 800ba7c:	89a3      	ldrh	r3, [r4, #12]
 800ba7e:	bf15      	itete	ne
 800ba80:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ba82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ba86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ba8a:	81a3      	strheq	r3, [r4, #12]
 800ba8c:	bf18      	it	ne
 800ba8e:	81a3      	strhne	r3, [r4, #12]
 800ba90:	bd10      	pop	{r4, pc}

0800ba92 <__sclose>:
 800ba92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba96:	f000 b80d 	b.w	800bab4 <_close_r>

0800ba9a <memset>:
 800ba9a:	4402      	add	r2, r0
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d100      	bne.n	800baa4 <memset+0xa>
 800baa2:	4770      	bx	lr
 800baa4:	f803 1b01 	strb.w	r1, [r3], #1
 800baa8:	e7f9      	b.n	800ba9e <memset+0x4>
	...

0800baac <_localeconv_r>:
 800baac:	4800      	ldr	r0, [pc, #0]	@ (800bab0 <_localeconv_r+0x4>)
 800baae:	4770      	bx	lr
 800bab0:	200002dc 	.word	0x200002dc

0800bab4 <_close_r>:
 800bab4:	b538      	push	{r3, r4, r5, lr}
 800bab6:	4d06      	ldr	r5, [pc, #24]	@ (800bad0 <_close_r+0x1c>)
 800bab8:	2300      	movs	r3, #0
 800baba:	4604      	mov	r4, r0
 800babc:	4608      	mov	r0, r1
 800babe:	602b      	str	r3, [r5, #0]
 800bac0:	f7f6 f98a 	bl	8001dd8 <_close>
 800bac4:	1c43      	adds	r3, r0, #1
 800bac6:	d102      	bne.n	800bace <_close_r+0x1a>
 800bac8:	682b      	ldr	r3, [r5, #0]
 800baca:	b103      	cbz	r3, 800bace <_close_r+0x1a>
 800bacc:	6023      	str	r3, [r4, #0]
 800bace:	bd38      	pop	{r3, r4, r5, pc}
 800bad0:	20006004 	.word	0x20006004

0800bad4 <_lseek_r>:
 800bad4:	b538      	push	{r3, r4, r5, lr}
 800bad6:	4d07      	ldr	r5, [pc, #28]	@ (800baf4 <_lseek_r+0x20>)
 800bad8:	4604      	mov	r4, r0
 800bada:	4608      	mov	r0, r1
 800badc:	4611      	mov	r1, r2
 800bade:	2200      	movs	r2, #0
 800bae0:	602a      	str	r2, [r5, #0]
 800bae2:	461a      	mov	r2, r3
 800bae4:	f7f6 f99f 	bl	8001e26 <_lseek>
 800bae8:	1c43      	adds	r3, r0, #1
 800baea:	d102      	bne.n	800baf2 <_lseek_r+0x1e>
 800baec:	682b      	ldr	r3, [r5, #0]
 800baee:	b103      	cbz	r3, 800baf2 <_lseek_r+0x1e>
 800baf0:	6023      	str	r3, [r4, #0]
 800baf2:	bd38      	pop	{r3, r4, r5, pc}
 800baf4:	20006004 	.word	0x20006004

0800baf8 <_read_r>:
 800baf8:	b538      	push	{r3, r4, r5, lr}
 800bafa:	4d07      	ldr	r5, [pc, #28]	@ (800bb18 <_read_r+0x20>)
 800bafc:	4604      	mov	r4, r0
 800bafe:	4608      	mov	r0, r1
 800bb00:	4611      	mov	r1, r2
 800bb02:	2200      	movs	r2, #0
 800bb04:	602a      	str	r2, [r5, #0]
 800bb06:	461a      	mov	r2, r3
 800bb08:	f7f6 f92d 	bl	8001d66 <_read>
 800bb0c:	1c43      	adds	r3, r0, #1
 800bb0e:	d102      	bne.n	800bb16 <_read_r+0x1e>
 800bb10:	682b      	ldr	r3, [r5, #0]
 800bb12:	b103      	cbz	r3, 800bb16 <_read_r+0x1e>
 800bb14:	6023      	str	r3, [r4, #0]
 800bb16:	bd38      	pop	{r3, r4, r5, pc}
 800bb18:	20006004 	.word	0x20006004

0800bb1c <_write_r>:
 800bb1c:	b538      	push	{r3, r4, r5, lr}
 800bb1e:	4d07      	ldr	r5, [pc, #28]	@ (800bb3c <_write_r+0x20>)
 800bb20:	4604      	mov	r4, r0
 800bb22:	4608      	mov	r0, r1
 800bb24:	4611      	mov	r1, r2
 800bb26:	2200      	movs	r2, #0
 800bb28:	602a      	str	r2, [r5, #0]
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	f7f6 f938 	bl	8001da0 <_write>
 800bb30:	1c43      	adds	r3, r0, #1
 800bb32:	d102      	bne.n	800bb3a <_write_r+0x1e>
 800bb34:	682b      	ldr	r3, [r5, #0]
 800bb36:	b103      	cbz	r3, 800bb3a <_write_r+0x1e>
 800bb38:	6023      	str	r3, [r4, #0]
 800bb3a:	bd38      	pop	{r3, r4, r5, pc}
 800bb3c:	20006004 	.word	0x20006004

0800bb40 <__errno>:
 800bb40:	4b01      	ldr	r3, [pc, #4]	@ (800bb48 <__errno+0x8>)
 800bb42:	6818      	ldr	r0, [r3, #0]
 800bb44:	4770      	bx	lr
 800bb46:	bf00      	nop
 800bb48:	2000019c 	.word	0x2000019c

0800bb4c <__libc_init_array>:
 800bb4c:	b570      	push	{r4, r5, r6, lr}
 800bb4e:	4d0d      	ldr	r5, [pc, #52]	@ (800bb84 <__libc_init_array+0x38>)
 800bb50:	4c0d      	ldr	r4, [pc, #52]	@ (800bb88 <__libc_init_array+0x3c>)
 800bb52:	1b64      	subs	r4, r4, r5
 800bb54:	10a4      	asrs	r4, r4, #2
 800bb56:	2600      	movs	r6, #0
 800bb58:	42a6      	cmp	r6, r4
 800bb5a:	d109      	bne.n	800bb70 <__libc_init_array+0x24>
 800bb5c:	4d0b      	ldr	r5, [pc, #44]	@ (800bb8c <__libc_init_array+0x40>)
 800bb5e:	4c0c      	ldr	r4, [pc, #48]	@ (800bb90 <__libc_init_array+0x44>)
 800bb60:	f002 fbd4 	bl	800e30c <_init>
 800bb64:	1b64      	subs	r4, r4, r5
 800bb66:	10a4      	asrs	r4, r4, #2
 800bb68:	2600      	movs	r6, #0
 800bb6a:	42a6      	cmp	r6, r4
 800bb6c:	d105      	bne.n	800bb7a <__libc_init_array+0x2e>
 800bb6e:	bd70      	pop	{r4, r5, r6, pc}
 800bb70:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb74:	4798      	blx	r3
 800bb76:	3601      	adds	r6, #1
 800bb78:	e7ee      	b.n	800bb58 <__libc_init_array+0xc>
 800bb7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb7e:	4798      	blx	r3
 800bb80:	3601      	adds	r6, #1
 800bb82:	e7f2      	b.n	800bb6a <__libc_init_array+0x1e>
 800bb84:	0800e850 	.word	0x0800e850
 800bb88:	0800e850 	.word	0x0800e850
 800bb8c:	0800e850 	.word	0x0800e850
 800bb90:	0800e854 	.word	0x0800e854

0800bb94 <__retarget_lock_init_recursive>:
 800bb94:	4770      	bx	lr

0800bb96 <__retarget_lock_acquire_recursive>:
 800bb96:	4770      	bx	lr

0800bb98 <__retarget_lock_release_recursive>:
 800bb98:	4770      	bx	lr

0800bb9a <memcpy>:
 800bb9a:	440a      	add	r2, r1
 800bb9c:	4291      	cmp	r1, r2
 800bb9e:	f100 33ff 	add.w	r3, r0, #4294967295
 800bba2:	d100      	bne.n	800bba6 <memcpy+0xc>
 800bba4:	4770      	bx	lr
 800bba6:	b510      	push	{r4, lr}
 800bba8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbb0:	4291      	cmp	r1, r2
 800bbb2:	d1f9      	bne.n	800bba8 <memcpy+0xe>
 800bbb4:	bd10      	pop	{r4, pc}

0800bbb6 <quorem>:
 800bbb6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbba:	6903      	ldr	r3, [r0, #16]
 800bbbc:	690c      	ldr	r4, [r1, #16]
 800bbbe:	42a3      	cmp	r3, r4
 800bbc0:	4607      	mov	r7, r0
 800bbc2:	db7e      	blt.n	800bcc2 <quorem+0x10c>
 800bbc4:	3c01      	subs	r4, #1
 800bbc6:	f101 0814 	add.w	r8, r1, #20
 800bbca:	00a3      	lsls	r3, r4, #2
 800bbcc:	f100 0514 	add.w	r5, r0, #20
 800bbd0:	9300      	str	r3, [sp, #0]
 800bbd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bbd6:	9301      	str	r3, [sp, #4]
 800bbd8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bbdc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bbe0:	3301      	adds	r3, #1
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bbe8:	fbb2 f6f3 	udiv	r6, r2, r3
 800bbec:	d32e      	bcc.n	800bc4c <quorem+0x96>
 800bbee:	f04f 0a00 	mov.w	sl, #0
 800bbf2:	46c4      	mov	ip, r8
 800bbf4:	46ae      	mov	lr, r5
 800bbf6:	46d3      	mov	fp, sl
 800bbf8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bbfc:	b298      	uxth	r0, r3
 800bbfe:	fb06 a000 	mla	r0, r6, r0, sl
 800bc02:	0c02      	lsrs	r2, r0, #16
 800bc04:	0c1b      	lsrs	r3, r3, #16
 800bc06:	fb06 2303 	mla	r3, r6, r3, r2
 800bc0a:	f8de 2000 	ldr.w	r2, [lr]
 800bc0e:	b280      	uxth	r0, r0
 800bc10:	b292      	uxth	r2, r2
 800bc12:	1a12      	subs	r2, r2, r0
 800bc14:	445a      	add	r2, fp
 800bc16:	f8de 0000 	ldr.w	r0, [lr]
 800bc1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bc24:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bc28:	b292      	uxth	r2, r2
 800bc2a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bc2e:	45e1      	cmp	r9, ip
 800bc30:	f84e 2b04 	str.w	r2, [lr], #4
 800bc34:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bc38:	d2de      	bcs.n	800bbf8 <quorem+0x42>
 800bc3a:	9b00      	ldr	r3, [sp, #0]
 800bc3c:	58eb      	ldr	r3, [r5, r3]
 800bc3e:	b92b      	cbnz	r3, 800bc4c <quorem+0x96>
 800bc40:	9b01      	ldr	r3, [sp, #4]
 800bc42:	3b04      	subs	r3, #4
 800bc44:	429d      	cmp	r5, r3
 800bc46:	461a      	mov	r2, r3
 800bc48:	d32f      	bcc.n	800bcaa <quorem+0xf4>
 800bc4a:	613c      	str	r4, [r7, #16]
 800bc4c:	4638      	mov	r0, r7
 800bc4e:	f001 f97d 	bl	800cf4c <__mcmp>
 800bc52:	2800      	cmp	r0, #0
 800bc54:	db25      	blt.n	800bca2 <quorem+0xec>
 800bc56:	4629      	mov	r1, r5
 800bc58:	2000      	movs	r0, #0
 800bc5a:	f858 2b04 	ldr.w	r2, [r8], #4
 800bc5e:	f8d1 c000 	ldr.w	ip, [r1]
 800bc62:	fa1f fe82 	uxth.w	lr, r2
 800bc66:	fa1f f38c 	uxth.w	r3, ip
 800bc6a:	eba3 030e 	sub.w	r3, r3, lr
 800bc6e:	4403      	add	r3, r0
 800bc70:	0c12      	lsrs	r2, r2, #16
 800bc72:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bc76:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bc7a:	b29b      	uxth	r3, r3
 800bc7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc80:	45c1      	cmp	r9, r8
 800bc82:	f841 3b04 	str.w	r3, [r1], #4
 800bc86:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bc8a:	d2e6      	bcs.n	800bc5a <quorem+0xa4>
 800bc8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc94:	b922      	cbnz	r2, 800bca0 <quorem+0xea>
 800bc96:	3b04      	subs	r3, #4
 800bc98:	429d      	cmp	r5, r3
 800bc9a:	461a      	mov	r2, r3
 800bc9c:	d30b      	bcc.n	800bcb6 <quorem+0x100>
 800bc9e:	613c      	str	r4, [r7, #16]
 800bca0:	3601      	adds	r6, #1
 800bca2:	4630      	mov	r0, r6
 800bca4:	b003      	add	sp, #12
 800bca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcaa:	6812      	ldr	r2, [r2, #0]
 800bcac:	3b04      	subs	r3, #4
 800bcae:	2a00      	cmp	r2, #0
 800bcb0:	d1cb      	bne.n	800bc4a <quorem+0x94>
 800bcb2:	3c01      	subs	r4, #1
 800bcb4:	e7c6      	b.n	800bc44 <quorem+0x8e>
 800bcb6:	6812      	ldr	r2, [r2, #0]
 800bcb8:	3b04      	subs	r3, #4
 800bcba:	2a00      	cmp	r2, #0
 800bcbc:	d1ef      	bne.n	800bc9e <quorem+0xe8>
 800bcbe:	3c01      	subs	r4, #1
 800bcc0:	e7ea      	b.n	800bc98 <quorem+0xe2>
 800bcc2:	2000      	movs	r0, #0
 800bcc4:	e7ee      	b.n	800bca4 <quorem+0xee>
	...

0800bcc8 <_dtoa_r>:
 800bcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bccc:	69c7      	ldr	r7, [r0, #28]
 800bcce:	b097      	sub	sp, #92	@ 0x5c
 800bcd0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800bcd4:	ec55 4b10 	vmov	r4, r5, d0
 800bcd8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800bcda:	9107      	str	r1, [sp, #28]
 800bcdc:	4681      	mov	r9, r0
 800bcde:	920c      	str	r2, [sp, #48]	@ 0x30
 800bce0:	9311      	str	r3, [sp, #68]	@ 0x44
 800bce2:	b97f      	cbnz	r7, 800bd04 <_dtoa_r+0x3c>
 800bce4:	2010      	movs	r0, #16
 800bce6:	f000 fe09 	bl	800c8fc <malloc>
 800bcea:	4602      	mov	r2, r0
 800bcec:	f8c9 001c 	str.w	r0, [r9, #28]
 800bcf0:	b920      	cbnz	r0, 800bcfc <_dtoa_r+0x34>
 800bcf2:	4ba9      	ldr	r3, [pc, #676]	@ (800bf98 <_dtoa_r+0x2d0>)
 800bcf4:	21ef      	movs	r1, #239	@ 0xef
 800bcf6:	48a9      	ldr	r0, [pc, #676]	@ (800bf9c <_dtoa_r+0x2d4>)
 800bcf8:	f001 fc5e 	bl	800d5b8 <__assert_func>
 800bcfc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bd00:	6007      	str	r7, [r0, #0]
 800bd02:	60c7      	str	r7, [r0, #12]
 800bd04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bd08:	6819      	ldr	r1, [r3, #0]
 800bd0a:	b159      	cbz	r1, 800bd24 <_dtoa_r+0x5c>
 800bd0c:	685a      	ldr	r2, [r3, #4]
 800bd0e:	604a      	str	r2, [r1, #4]
 800bd10:	2301      	movs	r3, #1
 800bd12:	4093      	lsls	r3, r2
 800bd14:	608b      	str	r3, [r1, #8]
 800bd16:	4648      	mov	r0, r9
 800bd18:	f000 fee6 	bl	800cae8 <_Bfree>
 800bd1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bd20:	2200      	movs	r2, #0
 800bd22:	601a      	str	r2, [r3, #0]
 800bd24:	1e2b      	subs	r3, r5, #0
 800bd26:	bfb9      	ittee	lt
 800bd28:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bd2c:	9305      	strlt	r3, [sp, #20]
 800bd2e:	2300      	movge	r3, #0
 800bd30:	6033      	strge	r3, [r6, #0]
 800bd32:	9f05      	ldr	r7, [sp, #20]
 800bd34:	4b9a      	ldr	r3, [pc, #616]	@ (800bfa0 <_dtoa_r+0x2d8>)
 800bd36:	bfbc      	itt	lt
 800bd38:	2201      	movlt	r2, #1
 800bd3a:	6032      	strlt	r2, [r6, #0]
 800bd3c:	43bb      	bics	r3, r7
 800bd3e:	d112      	bne.n	800bd66 <_dtoa_r+0x9e>
 800bd40:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bd42:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bd46:	6013      	str	r3, [r2, #0]
 800bd48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bd4c:	4323      	orrs	r3, r4
 800bd4e:	f000 855a 	beq.w	800c806 <_dtoa_r+0xb3e>
 800bd52:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bd54:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800bfb4 <_dtoa_r+0x2ec>
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	f000 855c 	beq.w	800c816 <_dtoa_r+0xb4e>
 800bd5e:	f10a 0303 	add.w	r3, sl, #3
 800bd62:	f000 bd56 	b.w	800c812 <_dtoa_r+0xb4a>
 800bd66:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	ec51 0b17 	vmov	r0, r1, d7
 800bd70:	2300      	movs	r3, #0
 800bd72:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800bd76:	f7f4 feaf 	bl	8000ad8 <__aeabi_dcmpeq>
 800bd7a:	4680      	mov	r8, r0
 800bd7c:	b158      	cbz	r0, 800bd96 <_dtoa_r+0xce>
 800bd7e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bd80:	2301      	movs	r3, #1
 800bd82:	6013      	str	r3, [r2, #0]
 800bd84:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bd86:	b113      	cbz	r3, 800bd8e <_dtoa_r+0xc6>
 800bd88:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bd8a:	4b86      	ldr	r3, [pc, #536]	@ (800bfa4 <_dtoa_r+0x2dc>)
 800bd8c:	6013      	str	r3, [r2, #0]
 800bd8e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800bfb8 <_dtoa_r+0x2f0>
 800bd92:	f000 bd40 	b.w	800c816 <_dtoa_r+0xb4e>
 800bd96:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800bd9a:	aa14      	add	r2, sp, #80	@ 0x50
 800bd9c:	a915      	add	r1, sp, #84	@ 0x54
 800bd9e:	4648      	mov	r0, r9
 800bda0:	f001 f984 	bl	800d0ac <__d2b>
 800bda4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bda8:	9002      	str	r0, [sp, #8]
 800bdaa:	2e00      	cmp	r6, #0
 800bdac:	d078      	beq.n	800bea0 <_dtoa_r+0x1d8>
 800bdae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bdb0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800bdb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bdb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bdbc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bdc0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bdc4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bdc8:	4619      	mov	r1, r3
 800bdca:	2200      	movs	r2, #0
 800bdcc:	4b76      	ldr	r3, [pc, #472]	@ (800bfa8 <_dtoa_r+0x2e0>)
 800bdce:	f7f4 fa63 	bl	8000298 <__aeabi_dsub>
 800bdd2:	a36b      	add	r3, pc, #428	@ (adr r3, 800bf80 <_dtoa_r+0x2b8>)
 800bdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd8:	f7f4 fc16 	bl	8000608 <__aeabi_dmul>
 800bddc:	a36a      	add	r3, pc, #424	@ (adr r3, 800bf88 <_dtoa_r+0x2c0>)
 800bdde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde2:	f7f4 fa5b 	bl	800029c <__adddf3>
 800bde6:	4604      	mov	r4, r0
 800bde8:	4630      	mov	r0, r6
 800bdea:	460d      	mov	r5, r1
 800bdec:	f7f4 fba2 	bl	8000534 <__aeabi_i2d>
 800bdf0:	a367      	add	r3, pc, #412	@ (adr r3, 800bf90 <_dtoa_r+0x2c8>)
 800bdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf6:	f7f4 fc07 	bl	8000608 <__aeabi_dmul>
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	460b      	mov	r3, r1
 800bdfe:	4620      	mov	r0, r4
 800be00:	4629      	mov	r1, r5
 800be02:	f7f4 fa4b 	bl	800029c <__adddf3>
 800be06:	4604      	mov	r4, r0
 800be08:	460d      	mov	r5, r1
 800be0a:	f7f4 fead 	bl	8000b68 <__aeabi_d2iz>
 800be0e:	2200      	movs	r2, #0
 800be10:	4607      	mov	r7, r0
 800be12:	2300      	movs	r3, #0
 800be14:	4620      	mov	r0, r4
 800be16:	4629      	mov	r1, r5
 800be18:	f7f4 fe68 	bl	8000aec <__aeabi_dcmplt>
 800be1c:	b140      	cbz	r0, 800be30 <_dtoa_r+0x168>
 800be1e:	4638      	mov	r0, r7
 800be20:	f7f4 fb88 	bl	8000534 <__aeabi_i2d>
 800be24:	4622      	mov	r2, r4
 800be26:	462b      	mov	r3, r5
 800be28:	f7f4 fe56 	bl	8000ad8 <__aeabi_dcmpeq>
 800be2c:	b900      	cbnz	r0, 800be30 <_dtoa_r+0x168>
 800be2e:	3f01      	subs	r7, #1
 800be30:	2f16      	cmp	r7, #22
 800be32:	d852      	bhi.n	800beda <_dtoa_r+0x212>
 800be34:	4b5d      	ldr	r3, [pc, #372]	@ (800bfac <_dtoa_r+0x2e4>)
 800be36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800be3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800be42:	f7f4 fe53 	bl	8000aec <__aeabi_dcmplt>
 800be46:	2800      	cmp	r0, #0
 800be48:	d049      	beq.n	800bede <_dtoa_r+0x216>
 800be4a:	3f01      	subs	r7, #1
 800be4c:	2300      	movs	r3, #0
 800be4e:	9310      	str	r3, [sp, #64]	@ 0x40
 800be50:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800be52:	1b9b      	subs	r3, r3, r6
 800be54:	1e5a      	subs	r2, r3, #1
 800be56:	bf45      	ittet	mi
 800be58:	f1c3 0301 	rsbmi	r3, r3, #1
 800be5c:	9300      	strmi	r3, [sp, #0]
 800be5e:	2300      	movpl	r3, #0
 800be60:	2300      	movmi	r3, #0
 800be62:	9206      	str	r2, [sp, #24]
 800be64:	bf54      	ite	pl
 800be66:	9300      	strpl	r3, [sp, #0]
 800be68:	9306      	strmi	r3, [sp, #24]
 800be6a:	2f00      	cmp	r7, #0
 800be6c:	db39      	blt.n	800bee2 <_dtoa_r+0x21a>
 800be6e:	9b06      	ldr	r3, [sp, #24]
 800be70:	970d      	str	r7, [sp, #52]	@ 0x34
 800be72:	443b      	add	r3, r7
 800be74:	9306      	str	r3, [sp, #24]
 800be76:	2300      	movs	r3, #0
 800be78:	9308      	str	r3, [sp, #32]
 800be7a:	9b07      	ldr	r3, [sp, #28]
 800be7c:	2b09      	cmp	r3, #9
 800be7e:	d863      	bhi.n	800bf48 <_dtoa_r+0x280>
 800be80:	2b05      	cmp	r3, #5
 800be82:	bfc4      	itt	gt
 800be84:	3b04      	subgt	r3, #4
 800be86:	9307      	strgt	r3, [sp, #28]
 800be88:	9b07      	ldr	r3, [sp, #28]
 800be8a:	f1a3 0302 	sub.w	r3, r3, #2
 800be8e:	bfcc      	ite	gt
 800be90:	2400      	movgt	r4, #0
 800be92:	2401      	movle	r4, #1
 800be94:	2b03      	cmp	r3, #3
 800be96:	d863      	bhi.n	800bf60 <_dtoa_r+0x298>
 800be98:	e8df f003 	tbb	[pc, r3]
 800be9c:	2b375452 	.word	0x2b375452
 800bea0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800bea4:	441e      	add	r6, r3
 800bea6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800beaa:	2b20      	cmp	r3, #32
 800beac:	bfc1      	itttt	gt
 800beae:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800beb2:	409f      	lslgt	r7, r3
 800beb4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800beb8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bebc:	bfd6      	itet	le
 800bebe:	f1c3 0320 	rsble	r3, r3, #32
 800bec2:	ea47 0003 	orrgt.w	r0, r7, r3
 800bec6:	fa04 f003 	lslle.w	r0, r4, r3
 800beca:	f7f4 fb23 	bl	8000514 <__aeabi_ui2d>
 800bece:	2201      	movs	r2, #1
 800bed0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bed4:	3e01      	subs	r6, #1
 800bed6:	9212      	str	r2, [sp, #72]	@ 0x48
 800bed8:	e776      	b.n	800bdc8 <_dtoa_r+0x100>
 800beda:	2301      	movs	r3, #1
 800bedc:	e7b7      	b.n	800be4e <_dtoa_r+0x186>
 800bede:	9010      	str	r0, [sp, #64]	@ 0x40
 800bee0:	e7b6      	b.n	800be50 <_dtoa_r+0x188>
 800bee2:	9b00      	ldr	r3, [sp, #0]
 800bee4:	1bdb      	subs	r3, r3, r7
 800bee6:	9300      	str	r3, [sp, #0]
 800bee8:	427b      	negs	r3, r7
 800beea:	9308      	str	r3, [sp, #32]
 800beec:	2300      	movs	r3, #0
 800beee:	930d      	str	r3, [sp, #52]	@ 0x34
 800bef0:	e7c3      	b.n	800be7a <_dtoa_r+0x1b2>
 800bef2:	2301      	movs	r3, #1
 800bef4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bef6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bef8:	eb07 0b03 	add.w	fp, r7, r3
 800befc:	f10b 0301 	add.w	r3, fp, #1
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	9303      	str	r3, [sp, #12]
 800bf04:	bfb8      	it	lt
 800bf06:	2301      	movlt	r3, #1
 800bf08:	e006      	b.n	800bf18 <_dtoa_r+0x250>
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	dd28      	ble.n	800bf66 <_dtoa_r+0x29e>
 800bf14:	469b      	mov	fp, r3
 800bf16:	9303      	str	r3, [sp, #12]
 800bf18:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800bf1c:	2100      	movs	r1, #0
 800bf1e:	2204      	movs	r2, #4
 800bf20:	f102 0514 	add.w	r5, r2, #20
 800bf24:	429d      	cmp	r5, r3
 800bf26:	d926      	bls.n	800bf76 <_dtoa_r+0x2ae>
 800bf28:	6041      	str	r1, [r0, #4]
 800bf2a:	4648      	mov	r0, r9
 800bf2c:	f000 fd9c 	bl	800ca68 <_Balloc>
 800bf30:	4682      	mov	sl, r0
 800bf32:	2800      	cmp	r0, #0
 800bf34:	d142      	bne.n	800bfbc <_dtoa_r+0x2f4>
 800bf36:	4b1e      	ldr	r3, [pc, #120]	@ (800bfb0 <_dtoa_r+0x2e8>)
 800bf38:	4602      	mov	r2, r0
 800bf3a:	f240 11af 	movw	r1, #431	@ 0x1af
 800bf3e:	e6da      	b.n	800bcf6 <_dtoa_r+0x2e>
 800bf40:	2300      	movs	r3, #0
 800bf42:	e7e3      	b.n	800bf0c <_dtoa_r+0x244>
 800bf44:	2300      	movs	r3, #0
 800bf46:	e7d5      	b.n	800bef4 <_dtoa_r+0x22c>
 800bf48:	2401      	movs	r4, #1
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	9307      	str	r3, [sp, #28]
 800bf4e:	9409      	str	r4, [sp, #36]	@ 0x24
 800bf50:	f04f 3bff 	mov.w	fp, #4294967295
 800bf54:	2200      	movs	r2, #0
 800bf56:	f8cd b00c 	str.w	fp, [sp, #12]
 800bf5a:	2312      	movs	r3, #18
 800bf5c:	920c      	str	r2, [sp, #48]	@ 0x30
 800bf5e:	e7db      	b.n	800bf18 <_dtoa_r+0x250>
 800bf60:	2301      	movs	r3, #1
 800bf62:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf64:	e7f4      	b.n	800bf50 <_dtoa_r+0x288>
 800bf66:	f04f 0b01 	mov.w	fp, #1
 800bf6a:	f8cd b00c 	str.w	fp, [sp, #12]
 800bf6e:	465b      	mov	r3, fp
 800bf70:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800bf74:	e7d0      	b.n	800bf18 <_dtoa_r+0x250>
 800bf76:	3101      	adds	r1, #1
 800bf78:	0052      	lsls	r2, r2, #1
 800bf7a:	e7d1      	b.n	800bf20 <_dtoa_r+0x258>
 800bf7c:	f3af 8000 	nop.w
 800bf80:	636f4361 	.word	0x636f4361
 800bf84:	3fd287a7 	.word	0x3fd287a7
 800bf88:	8b60c8b3 	.word	0x8b60c8b3
 800bf8c:	3fc68a28 	.word	0x3fc68a28
 800bf90:	509f79fb 	.word	0x509f79fb
 800bf94:	3fd34413 	.word	0x3fd34413
 800bf98:	0800e491 	.word	0x0800e491
 800bf9c:	0800e4a8 	.word	0x0800e4a8
 800bfa0:	7ff00000 	.word	0x7ff00000
 800bfa4:	0800e461 	.word	0x0800e461
 800bfa8:	3ff80000 	.word	0x3ff80000
 800bfac:	0800e5f8 	.word	0x0800e5f8
 800bfb0:	0800e500 	.word	0x0800e500
 800bfb4:	0800e48d 	.word	0x0800e48d
 800bfb8:	0800e460 	.word	0x0800e460
 800bfbc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bfc0:	6018      	str	r0, [r3, #0]
 800bfc2:	9b03      	ldr	r3, [sp, #12]
 800bfc4:	2b0e      	cmp	r3, #14
 800bfc6:	f200 80a1 	bhi.w	800c10c <_dtoa_r+0x444>
 800bfca:	2c00      	cmp	r4, #0
 800bfcc:	f000 809e 	beq.w	800c10c <_dtoa_r+0x444>
 800bfd0:	2f00      	cmp	r7, #0
 800bfd2:	dd33      	ble.n	800c03c <_dtoa_r+0x374>
 800bfd4:	4b9c      	ldr	r3, [pc, #624]	@ (800c248 <_dtoa_r+0x580>)
 800bfd6:	f007 020f 	and.w	r2, r7, #15
 800bfda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfde:	ed93 7b00 	vldr	d7, [r3]
 800bfe2:	05f8      	lsls	r0, r7, #23
 800bfe4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800bfe8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bfec:	d516      	bpl.n	800c01c <_dtoa_r+0x354>
 800bfee:	4b97      	ldr	r3, [pc, #604]	@ (800c24c <_dtoa_r+0x584>)
 800bff0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bff4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bff8:	f7f4 fc30 	bl	800085c <__aeabi_ddiv>
 800bffc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c000:	f004 040f 	and.w	r4, r4, #15
 800c004:	2603      	movs	r6, #3
 800c006:	4d91      	ldr	r5, [pc, #580]	@ (800c24c <_dtoa_r+0x584>)
 800c008:	b954      	cbnz	r4, 800c020 <_dtoa_r+0x358>
 800c00a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c00e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c012:	f7f4 fc23 	bl	800085c <__aeabi_ddiv>
 800c016:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c01a:	e028      	b.n	800c06e <_dtoa_r+0x3a6>
 800c01c:	2602      	movs	r6, #2
 800c01e:	e7f2      	b.n	800c006 <_dtoa_r+0x33e>
 800c020:	07e1      	lsls	r1, r4, #31
 800c022:	d508      	bpl.n	800c036 <_dtoa_r+0x36e>
 800c024:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c028:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c02c:	f7f4 faec 	bl	8000608 <__aeabi_dmul>
 800c030:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c034:	3601      	adds	r6, #1
 800c036:	1064      	asrs	r4, r4, #1
 800c038:	3508      	adds	r5, #8
 800c03a:	e7e5      	b.n	800c008 <_dtoa_r+0x340>
 800c03c:	f000 80af 	beq.w	800c19e <_dtoa_r+0x4d6>
 800c040:	427c      	negs	r4, r7
 800c042:	4b81      	ldr	r3, [pc, #516]	@ (800c248 <_dtoa_r+0x580>)
 800c044:	4d81      	ldr	r5, [pc, #516]	@ (800c24c <_dtoa_r+0x584>)
 800c046:	f004 020f 	and.w	r2, r4, #15
 800c04a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c052:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c056:	f7f4 fad7 	bl	8000608 <__aeabi_dmul>
 800c05a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c05e:	1124      	asrs	r4, r4, #4
 800c060:	2300      	movs	r3, #0
 800c062:	2602      	movs	r6, #2
 800c064:	2c00      	cmp	r4, #0
 800c066:	f040 808f 	bne.w	800c188 <_dtoa_r+0x4c0>
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d1d3      	bne.n	800c016 <_dtoa_r+0x34e>
 800c06e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c070:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c074:	2b00      	cmp	r3, #0
 800c076:	f000 8094 	beq.w	800c1a2 <_dtoa_r+0x4da>
 800c07a:	4b75      	ldr	r3, [pc, #468]	@ (800c250 <_dtoa_r+0x588>)
 800c07c:	2200      	movs	r2, #0
 800c07e:	4620      	mov	r0, r4
 800c080:	4629      	mov	r1, r5
 800c082:	f7f4 fd33 	bl	8000aec <__aeabi_dcmplt>
 800c086:	2800      	cmp	r0, #0
 800c088:	f000 808b 	beq.w	800c1a2 <_dtoa_r+0x4da>
 800c08c:	9b03      	ldr	r3, [sp, #12]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	f000 8087 	beq.w	800c1a2 <_dtoa_r+0x4da>
 800c094:	f1bb 0f00 	cmp.w	fp, #0
 800c098:	dd34      	ble.n	800c104 <_dtoa_r+0x43c>
 800c09a:	4620      	mov	r0, r4
 800c09c:	4b6d      	ldr	r3, [pc, #436]	@ (800c254 <_dtoa_r+0x58c>)
 800c09e:	2200      	movs	r2, #0
 800c0a0:	4629      	mov	r1, r5
 800c0a2:	f7f4 fab1 	bl	8000608 <__aeabi_dmul>
 800c0a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c0aa:	f107 38ff 	add.w	r8, r7, #4294967295
 800c0ae:	3601      	adds	r6, #1
 800c0b0:	465c      	mov	r4, fp
 800c0b2:	4630      	mov	r0, r6
 800c0b4:	f7f4 fa3e 	bl	8000534 <__aeabi_i2d>
 800c0b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0bc:	f7f4 faa4 	bl	8000608 <__aeabi_dmul>
 800c0c0:	4b65      	ldr	r3, [pc, #404]	@ (800c258 <_dtoa_r+0x590>)
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	f7f4 f8ea 	bl	800029c <__adddf3>
 800c0c8:	4605      	mov	r5, r0
 800c0ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c0ce:	2c00      	cmp	r4, #0
 800c0d0:	d16a      	bne.n	800c1a8 <_dtoa_r+0x4e0>
 800c0d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0d6:	4b61      	ldr	r3, [pc, #388]	@ (800c25c <_dtoa_r+0x594>)
 800c0d8:	2200      	movs	r2, #0
 800c0da:	f7f4 f8dd 	bl	8000298 <__aeabi_dsub>
 800c0de:	4602      	mov	r2, r0
 800c0e0:	460b      	mov	r3, r1
 800c0e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c0e6:	462a      	mov	r2, r5
 800c0e8:	4633      	mov	r3, r6
 800c0ea:	f7f4 fd1d 	bl	8000b28 <__aeabi_dcmpgt>
 800c0ee:	2800      	cmp	r0, #0
 800c0f0:	f040 8298 	bne.w	800c624 <_dtoa_r+0x95c>
 800c0f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0f8:	462a      	mov	r2, r5
 800c0fa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c0fe:	f7f4 fcf5 	bl	8000aec <__aeabi_dcmplt>
 800c102:	bb38      	cbnz	r0, 800c154 <_dtoa_r+0x48c>
 800c104:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c108:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c10c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c10e:	2b00      	cmp	r3, #0
 800c110:	f2c0 8157 	blt.w	800c3c2 <_dtoa_r+0x6fa>
 800c114:	2f0e      	cmp	r7, #14
 800c116:	f300 8154 	bgt.w	800c3c2 <_dtoa_r+0x6fa>
 800c11a:	4b4b      	ldr	r3, [pc, #300]	@ (800c248 <_dtoa_r+0x580>)
 800c11c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c120:	ed93 7b00 	vldr	d7, [r3]
 800c124:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c126:	2b00      	cmp	r3, #0
 800c128:	ed8d 7b00 	vstr	d7, [sp]
 800c12c:	f280 80e5 	bge.w	800c2fa <_dtoa_r+0x632>
 800c130:	9b03      	ldr	r3, [sp, #12]
 800c132:	2b00      	cmp	r3, #0
 800c134:	f300 80e1 	bgt.w	800c2fa <_dtoa_r+0x632>
 800c138:	d10c      	bne.n	800c154 <_dtoa_r+0x48c>
 800c13a:	4b48      	ldr	r3, [pc, #288]	@ (800c25c <_dtoa_r+0x594>)
 800c13c:	2200      	movs	r2, #0
 800c13e:	ec51 0b17 	vmov	r0, r1, d7
 800c142:	f7f4 fa61 	bl	8000608 <__aeabi_dmul>
 800c146:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c14a:	f7f4 fce3 	bl	8000b14 <__aeabi_dcmpge>
 800c14e:	2800      	cmp	r0, #0
 800c150:	f000 8266 	beq.w	800c620 <_dtoa_r+0x958>
 800c154:	2400      	movs	r4, #0
 800c156:	4625      	mov	r5, r4
 800c158:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c15a:	4656      	mov	r6, sl
 800c15c:	ea6f 0803 	mvn.w	r8, r3
 800c160:	2700      	movs	r7, #0
 800c162:	4621      	mov	r1, r4
 800c164:	4648      	mov	r0, r9
 800c166:	f000 fcbf 	bl	800cae8 <_Bfree>
 800c16a:	2d00      	cmp	r5, #0
 800c16c:	f000 80bd 	beq.w	800c2ea <_dtoa_r+0x622>
 800c170:	b12f      	cbz	r7, 800c17e <_dtoa_r+0x4b6>
 800c172:	42af      	cmp	r7, r5
 800c174:	d003      	beq.n	800c17e <_dtoa_r+0x4b6>
 800c176:	4639      	mov	r1, r7
 800c178:	4648      	mov	r0, r9
 800c17a:	f000 fcb5 	bl	800cae8 <_Bfree>
 800c17e:	4629      	mov	r1, r5
 800c180:	4648      	mov	r0, r9
 800c182:	f000 fcb1 	bl	800cae8 <_Bfree>
 800c186:	e0b0      	b.n	800c2ea <_dtoa_r+0x622>
 800c188:	07e2      	lsls	r2, r4, #31
 800c18a:	d505      	bpl.n	800c198 <_dtoa_r+0x4d0>
 800c18c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c190:	f7f4 fa3a 	bl	8000608 <__aeabi_dmul>
 800c194:	3601      	adds	r6, #1
 800c196:	2301      	movs	r3, #1
 800c198:	1064      	asrs	r4, r4, #1
 800c19a:	3508      	adds	r5, #8
 800c19c:	e762      	b.n	800c064 <_dtoa_r+0x39c>
 800c19e:	2602      	movs	r6, #2
 800c1a0:	e765      	b.n	800c06e <_dtoa_r+0x3a6>
 800c1a2:	9c03      	ldr	r4, [sp, #12]
 800c1a4:	46b8      	mov	r8, r7
 800c1a6:	e784      	b.n	800c0b2 <_dtoa_r+0x3ea>
 800c1a8:	4b27      	ldr	r3, [pc, #156]	@ (800c248 <_dtoa_r+0x580>)
 800c1aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c1ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c1b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c1b4:	4454      	add	r4, sl
 800c1b6:	2900      	cmp	r1, #0
 800c1b8:	d054      	beq.n	800c264 <_dtoa_r+0x59c>
 800c1ba:	4929      	ldr	r1, [pc, #164]	@ (800c260 <_dtoa_r+0x598>)
 800c1bc:	2000      	movs	r0, #0
 800c1be:	f7f4 fb4d 	bl	800085c <__aeabi_ddiv>
 800c1c2:	4633      	mov	r3, r6
 800c1c4:	462a      	mov	r2, r5
 800c1c6:	f7f4 f867 	bl	8000298 <__aeabi_dsub>
 800c1ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c1ce:	4656      	mov	r6, sl
 800c1d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1d4:	f7f4 fcc8 	bl	8000b68 <__aeabi_d2iz>
 800c1d8:	4605      	mov	r5, r0
 800c1da:	f7f4 f9ab 	bl	8000534 <__aeabi_i2d>
 800c1de:	4602      	mov	r2, r0
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1e6:	f7f4 f857 	bl	8000298 <__aeabi_dsub>
 800c1ea:	3530      	adds	r5, #48	@ 0x30
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c1f4:	f806 5b01 	strb.w	r5, [r6], #1
 800c1f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c1fc:	f7f4 fc76 	bl	8000aec <__aeabi_dcmplt>
 800c200:	2800      	cmp	r0, #0
 800c202:	d172      	bne.n	800c2ea <_dtoa_r+0x622>
 800c204:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c208:	4911      	ldr	r1, [pc, #68]	@ (800c250 <_dtoa_r+0x588>)
 800c20a:	2000      	movs	r0, #0
 800c20c:	f7f4 f844 	bl	8000298 <__aeabi_dsub>
 800c210:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c214:	f7f4 fc6a 	bl	8000aec <__aeabi_dcmplt>
 800c218:	2800      	cmp	r0, #0
 800c21a:	f040 80b4 	bne.w	800c386 <_dtoa_r+0x6be>
 800c21e:	42a6      	cmp	r6, r4
 800c220:	f43f af70 	beq.w	800c104 <_dtoa_r+0x43c>
 800c224:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c228:	4b0a      	ldr	r3, [pc, #40]	@ (800c254 <_dtoa_r+0x58c>)
 800c22a:	2200      	movs	r2, #0
 800c22c:	f7f4 f9ec 	bl	8000608 <__aeabi_dmul>
 800c230:	4b08      	ldr	r3, [pc, #32]	@ (800c254 <_dtoa_r+0x58c>)
 800c232:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c236:	2200      	movs	r2, #0
 800c238:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c23c:	f7f4 f9e4 	bl	8000608 <__aeabi_dmul>
 800c240:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c244:	e7c4      	b.n	800c1d0 <_dtoa_r+0x508>
 800c246:	bf00      	nop
 800c248:	0800e5f8 	.word	0x0800e5f8
 800c24c:	0800e5d0 	.word	0x0800e5d0
 800c250:	3ff00000 	.word	0x3ff00000
 800c254:	40240000 	.word	0x40240000
 800c258:	401c0000 	.word	0x401c0000
 800c25c:	40140000 	.word	0x40140000
 800c260:	3fe00000 	.word	0x3fe00000
 800c264:	4631      	mov	r1, r6
 800c266:	4628      	mov	r0, r5
 800c268:	f7f4 f9ce 	bl	8000608 <__aeabi_dmul>
 800c26c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c270:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c272:	4656      	mov	r6, sl
 800c274:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c278:	f7f4 fc76 	bl	8000b68 <__aeabi_d2iz>
 800c27c:	4605      	mov	r5, r0
 800c27e:	f7f4 f959 	bl	8000534 <__aeabi_i2d>
 800c282:	4602      	mov	r2, r0
 800c284:	460b      	mov	r3, r1
 800c286:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c28a:	f7f4 f805 	bl	8000298 <__aeabi_dsub>
 800c28e:	3530      	adds	r5, #48	@ 0x30
 800c290:	f806 5b01 	strb.w	r5, [r6], #1
 800c294:	4602      	mov	r2, r0
 800c296:	460b      	mov	r3, r1
 800c298:	42a6      	cmp	r6, r4
 800c29a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c29e:	f04f 0200 	mov.w	r2, #0
 800c2a2:	d124      	bne.n	800c2ee <_dtoa_r+0x626>
 800c2a4:	4baf      	ldr	r3, [pc, #700]	@ (800c564 <_dtoa_r+0x89c>)
 800c2a6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c2aa:	f7f3 fff7 	bl	800029c <__adddf3>
 800c2ae:	4602      	mov	r2, r0
 800c2b0:	460b      	mov	r3, r1
 800c2b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2b6:	f7f4 fc37 	bl	8000b28 <__aeabi_dcmpgt>
 800c2ba:	2800      	cmp	r0, #0
 800c2bc:	d163      	bne.n	800c386 <_dtoa_r+0x6be>
 800c2be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c2c2:	49a8      	ldr	r1, [pc, #672]	@ (800c564 <_dtoa_r+0x89c>)
 800c2c4:	2000      	movs	r0, #0
 800c2c6:	f7f3 ffe7 	bl	8000298 <__aeabi_dsub>
 800c2ca:	4602      	mov	r2, r0
 800c2cc:	460b      	mov	r3, r1
 800c2ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2d2:	f7f4 fc0b 	bl	8000aec <__aeabi_dcmplt>
 800c2d6:	2800      	cmp	r0, #0
 800c2d8:	f43f af14 	beq.w	800c104 <_dtoa_r+0x43c>
 800c2dc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c2de:	1e73      	subs	r3, r6, #1
 800c2e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c2e2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c2e6:	2b30      	cmp	r3, #48	@ 0x30
 800c2e8:	d0f8      	beq.n	800c2dc <_dtoa_r+0x614>
 800c2ea:	4647      	mov	r7, r8
 800c2ec:	e03b      	b.n	800c366 <_dtoa_r+0x69e>
 800c2ee:	4b9e      	ldr	r3, [pc, #632]	@ (800c568 <_dtoa_r+0x8a0>)
 800c2f0:	f7f4 f98a 	bl	8000608 <__aeabi_dmul>
 800c2f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c2f8:	e7bc      	b.n	800c274 <_dtoa_r+0x5ac>
 800c2fa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c2fe:	4656      	mov	r6, sl
 800c300:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c304:	4620      	mov	r0, r4
 800c306:	4629      	mov	r1, r5
 800c308:	f7f4 faa8 	bl	800085c <__aeabi_ddiv>
 800c30c:	f7f4 fc2c 	bl	8000b68 <__aeabi_d2iz>
 800c310:	4680      	mov	r8, r0
 800c312:	f7f4 f90f 	bl	8000534 <__aeabi_i2d>
 800c316:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c31a:	f7f4 f975 	bl	8000608 <__aeabi_dmul>
 800c31e:	4602      	mov	r2, r0
 800c320:	460b      	mov	r3, r1
 800c322:	4620      	mov	r0, r4
 800c324:	4629      	mov	r1, r5
 800c326:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c32a:	f7f3 ffb5 	bl	8000298 <__aeabi_dsub>
 800c32e:	f806 4b01 	strb.w	r4, [r6], #1
 800c332:	9d03      	ldr	r5, [sp, #12]
 800c334:	eba6 040a 	sub.w	r4, r6, sl
 800c338:	42a5      	cmp	r5, r4
 800c33a:	4602      	mov	r2, r0
 800c33c:	460b      	mov	r3, r1
 800c33e:	d133      	bne.n	800c3a8 <_dtoa_r+0x6e0>
 800c340:	f7f3 ffac 	bl	800029c <__adddf3>
 800c344:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c348:	4604      	mov	r4, r0
 800c34a:	460d      	mov	r5, r1
 800c34c:	f7f4 fbec 	bl	8000b28 <__aeabi_dcmpgt>
 800c350:	b9c0      	cbnz	r0, 800c384 <_dtoa_r+0x6bc>
 800c352:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c356:	4620      	mov	r0, r4
 800c358:	4629      	mov	r1, r5
 800c35a:	f7f4 fbbd 	bl	8000ad8 <__aeabi_dcmpeq>
 800c35e:	b110      	cbz	r0, 800c366 <_dtoa_r+0x69e>
 800c360:	f018 0f01 	tst.w	r8, #1
 800c364:	d10e      	bne.n	800c384 <_dtoa_r+0x6bc>
 800c366:	9902      	ldr	r1, [sp, #8]
 800c368:	4648      	mov	r0, r9
 800c36a:	f000 fbbd 	bl	800cae8 <_Bfree>
 800c36e:	2300      	movs	r3, #0
 800c370:	7033      	strb	r3, [r6, #0]
 800c372:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c374:	3701      	adds	r7, #1
 800c376:	601f      	str	r7, [r3, #0]
 800c378:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	f000 824b 	beq.w	800c816 <_dtoa_r+0xb4e>
 800c380:	601e      	str	r6, [r3, #0]
 800c382:	e248      	b.n	800c816 <_dtoa_r+0xb4e>
 800c384:	46b8      	mov	r8, r7
 800c386:	4633      	mov	r3, r6
 800c388:	461e      	mov	r6, r3
 800c38a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c38e:	2a39      	cmp	r2, #57	@ 0x39
 800c390:	d106      	bne.n	800c3a0 <_dtoa_r+0x6d8>
 800c392:	459a      	cmp	sl, r3
 800c394:	d1f8      	bne.n	800c388 <_dtoa_r+0x6c0>
 800c396:	2230      	movs	r2, #48	@ 0x30
 800c398:	f108 0801 	add.w	r8, r8, #1
 800c39c:	f88a 2000 	strb.w	r2, [sl]
 800c3a0:	781a      	ldrb	r2, [r3, #0]
 800c3a2:	3201      	adds	r2, #1
 800c3a4:	701a      	strb	r2, [r3, #0]
 800c3a6:	e7a0      	b.n	800c2ea <_dtoa_r+0x622>
 800c3a8:	4b6f      	ldr	r3, [pc, #444]	@ (800c568 <_dtoa_r+0x8a0>)
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	f7f4 f92c 	bl	8000608 <__aeabi_dmul>
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	4604      	mov	r4, r0
 800c3b6:	460d      	mov	r5, r1
 800c3b8:	f7f4 fb8e 	bl	8000ad8 <__aeabi_dcmpeq>
 800c3bc:	2800      	cmp	r0, #0
 800c3be:	d09f      	beq.n	800c300 <_dtoa_r+0x638>
 800c3c0:	e7d1      	b.n	800c366 <_dtoa_r+0x69e>
 800c3c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3c4:	2a00      	cmp	r2, #0
 800c3c6:	f000 80ea 	beq.w	800c59e <_dtoa_r+0x8d6>
 800c3ca:	9a07      	ldr	r2, [sp, #28]
 800c3cc:	2a01      	cmp	r2, #1
 800c3ce:	f300 80cd 	bgt.w	800c56c <_dtoa_r+0x8a4>
 800c3d2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c3d4:	2a00      	cmp	r2, #0
 800c3d6:	f000 80c1 	beq.w	800c55c <_dtoa_r+0x894>
 800c3da:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c3de:	9c08      	ldr	r4, [sp, #32]
 800c3e0:	9e00      	ldr	r6, [sp, #0]
 800c3e2:	9a00      	ldr	r2, [sp, #0]
 800c3e4:	441a      	add	r2, r3
 800c3e6:	9200      	str	r2, [sp, #0]
 800c3e8:	9a06      	ldr	r2, [sp, #24]
 800c3ea:	2101      	movs	r1, #1
 800c3ec:	441a      	add	r2, r3
 800c3ee:	4648      	mov	r0, r9
 800c3f0:	9206      	str	r2, [sp, #24]
 800c3f2:	f000 fc2d 	bl	800cc50 <__i2b>
 800c3f6:	4605      	mov	r5, r0
 800c3f8:	b166      	cbz	r6, 800c414 <_dtoa_r+0x74c>
 800c3fa:	9b06      	ldr	r3, [sp, #24]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	dd09      	ble.n	800c414 <_dtoa_r+0x74c>
 800c400:	42b3      	cmp	r3, r6
 800c402:	9a00      	ldr	r2, [sp, #0]
 800c404:	bfa8      	it	ge
 800c406:	4633      	movge	r3, r6
 800c408:	1ad2      	subs	r2, r2, r3
 800c40a:	9200      	str	r2, [sp, #0]
 800c40c:	9a06      	ldr	r2, [sp, #24]
 800c40e:	1af6      	subs	r6, r6, r3
 800c410:	1ad3      	subs	r3, r2, r3
 800c412:	9306      	str	r3, [sp, #24]
 800c414:	9b08      	ldr	r3, [sp, #32]
 800c416:	b30b      	cbz	r3, 800c45c <_dtoa_r+0x794>
 800c418:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	f000 80c6 	beq.w	800c5ac <_dtoa_r+0x8e4>
 800c420:	2c00      	cmp	r4, #0
 800c422:	f000 80c0 	beq.w	800c5a6 <_dtoa_r+0x8de>
 800c426:	4629      	mov	r1, r5
 800c428:	4622      	mov	r2, r4
 800c42a:	4648      	mov	r0, r9
 800c42c:	f000 fcc8 	bl	800cdc0 <__pow5mult>
 800c430:	9a02      	ldr	r2, [sp, #8]
 800c432:	4601      	mov	r1, r0
 800c434:	4605      	mov	r5, r0
 800c436:	4648      	mov	r0, r9
 800c438:	f000 fc20 	bl	800cc7c <__multiply>
 800c43c:	9902      	ldr	r1, [sp, #8]
 800c43e:	4680      	mov	r8, r0
 800c440:	4648      	mov	r0, r9
 800c442:	f000 fb51 	bl	800cae8 <_Bfree>
 800c446:	9b08      	ldr	r3, [sp, #32]
 800c448:	1b1b      	subs	r3, r3, r4
 800c44a:	9308      	str	r3, [sp, #32]
 800c44c:	f000 80b1 	beq.w	800c5b2 <_dtoa_r+0x8ea>
 800c450:	9a08      	ldr	r2, [sp, #32]
 800c452:	4641      	mov	r1, r8
 800c454:	4648      	mov	r0, r9
 800c456:	f000 fcb3 	bl	800cdc0 <__pow5mult>
 800c45a:	9002      	str	r0, [sp, #8]
 800c45c:	2101      	movs	r1, #1
 800c45e:	4648      	mov	r0, r9
 800c460:	f000 fbf6 	bl	800cc50 <__i2b>
 800c464:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c466:	4604      	mov	r4, r0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	f000 81d8 	beq.w	800c81e <_dtoa_r+0xb56>
 800c46e:	461a      	mov	r2, r3
 800c470:	4601      	mov	r1, r0
 800c472:	4648      	mov	r0, r9
 800c474:	f000 fca4 	bl	800cdc0 <__pow5mult>
 800c478:	9b07      	ldr	r3, [sp, #28]
 800c47a:	2b01      	cmp	r3, #1
 800c47c:	4604      	mov	r4, r0
 800c47e:	f300 809f 	bgt.w	800c5c0 <_dtoa_r+0x8f8>
 800c482:	9b04      	ldr	r3, [sp, #16]
 800c484:	2b00      	cmp	r3, #0
 800c486:	f040 8097 	bne.w	800c5b8 <_dtoa_r+0x8f0>
 800c48a:	9b05      	ldr	r3, [sp, #20]
 800c48c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c490:	2b00      	cmp	r3, #0
 800c492:	f040 8093 	bne.w	800c5bc <_dtoa_r+0x8f4>
 800c496:	9b05      	ldr	r3, [sp, #20]
 800c498:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c49c:	0d1b      	lsrs	r3, r3, #20
 800c49e:	051b      	lsls	r3, r3, #20
 800c4a0:	b133      	cbz	r3, 800c4b0 <_dtoa_r+0x7e8>
 800c4a2:	9b00      	ldr	r3, [sp, #0]
 800c4a4:	3301      	adds	r3, #1
 800c4a6:	9300      	str	r3, [sp, #0]
 800c4a8:	9b06      	ldr	r3, [sp, #24]
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	9306      	str	r3, [sp, #24]
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	9308      	str	r3, [sp, #32]
 800c4b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	f000 81b8 	beq.w	800c82a <_dtoa_r+0xb62>
 800c4ba:	6923      	ldr	r3, [r4, #16]
 800c4bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c4c0:	6918      	ldr	r0, [r3, #16]
 800c4c2:	f000 fb79 	bl	800cbb8 <__hi0bits>
 800c4c6:	f1c0 0020 	rsb	r0, r0, #32
 800c4ca:	9b06      	ldr	r3, [sp, #24]
 800c4cc:	4418      	add	r0, r3
 800c4ce:	f010 001f 	ands.w	r0, r0, #31
 800c4d2:	f000 8082 	beq.w	800c5da <_dtoa_r+0x912>
 800c4d6:	f1c0 0320 	rsb	r3, r0, #32
 800c4da:	2b04      	cmp	r3, #4
 800c4dc:	dd73      	ble.n	800c5c6 <_dtoa_r+0x8fe>
 800c4de:	9b00      	ldr	r3, [sp, #0]
 800c4e0:	f1c0 001c 	rsb	r0, r0, #28
 800c4e4:	4403      	add	r3, r0
 800c4e6:	9300      	str	r3, [sp, #0]
 800c4e8:	9b06      	ldr	r3, [sp, #24]
 800c4ea:	4403      	add	r3, r0
 800c4ec:	4406      	add	r6, r0
 800c4ee:	9306      	str	r3, [sp, #24]
 800c4f0:	9b00      	ldr	r3, [sp, #0]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	dd05      	ble.n	800c502 <_dtoa_r+0x83a>
 800c4f6:	9902      	ldr	r1, [sp, #8]
 800c4f8:	461a      	mov	r2, r3
 800c4fa:	4648      	mov	r0, r9
 800c4fc:	f000 fcba 	bl	800ce74 <__lshift>
 800c500:	9002      	str	r0, [sp, #8]
 800c502:	9b06      	ldr	r3, [sp, #24]
 800c504:	2b00      	cmp	r3, #0
 800c506:	dd05      	ble.n	800c514 <_dtoa_r+0x84c>
 800c508:	4621      	mov	r1, r4
 800c50a:	461a      	mov	r2, r3
 800c50c:	4648      	mov	r0, r9
 800c50e:	f000 fcb1 	bl	800ce74 <__lshift>
 800c512:	4604      	mov	r4, r0
 800c514:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c516:	2b00      	cmp	r3, #0
 800c518:	d061      	beq.n	800c5de <_dtoa_r+0x916>
 800c51a:	9802      	ldr	r0, [sp, #8]
 800c51c:	4621      	mov	r1, r4
 800c51e:	f000 fd15 	bl	800cf4c <__mcmp>
 800c522:	2800      	cmp	r0, #0
 800c524:	da5b      	bge.n	800c5de <_dtoa_r+0x916>
 800c526:	2300      	movs	r3, #0
 800c528:	9902      	ldr	r1, [sp, #8]
 800c52a:	220a      	movs	r2, #10
 800c52c:	4648      	mov	r0, r9
 800c52e:	f000 fafd 	bl	800cb2c <__multadd>
 800c532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c534:	9002      	str	r0, [sp, #8]
 800c536:	f107 38ff 	add.w	r8, r7, #4294967295
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	f000 8177 	beq.w	800c82e <_dtoa_r+0xb66>
 800c540:	4629      	mov	r1, r5
 800c542:	2300      	movs	r3, #0
 800c544:	220a      	movs	r2, #10
 800c546:	4648      	mov	r0, r9
 800c548:	f000 faf0 	bl	800cb2c <__multadd>
 800c54c:	f1bb 0f00 	cmp.w	fp, #0
 800c550:	4605      	mov	r5, r0
 800c552:	dc6f      	bgt.n	800c634 <_dtoa_r+0x96c>
 800c554:	9b07      	ldr	r3, [sp, #28]
 800c556:	2b02      	cmp	r3, #2
 800c558:	dc49      	bgt.n	800c5ee <_dtoa_r+0x926>
 800c55a:	e06b      	b.n	800c634 <_dtoa_r+0x96c>
 800c55c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c55e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c562:	e73c      	b.n	800c3de <_dtoa_r+0x716>
 800c564:	3fe00000 	.word	0x3fe00000
 800c568:	40240000 	.word	0x40240000
 800c56c:	9b03      	ldr	r3, [sp, #12]
 800c56e:	1e5c      	subs	r4, r3, #1
 800c570:	9b08      	ldr	r3, [sp, #32]
 800c572:	42a3      	cmp	r3, r4
 800c574:	db09      	blt.n	800c58a <_dtoa_r+0x8c2>
 800c576:	1b1c      	subs	r4, r3, r4
 800c578:	9b03      	ldr	r3, [sp, #12]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	f6bf af30 	bge.w	800c3e0 <_dtoa_r+0x718>
 800c580:	9b00      	ldr	r3, [sp, #0]
 800c582:	9a03      	ldr	r2, [sp, #12]
 800c584:	1a9e      	subs	r6, r3, r2
 800c586:	2300      	movs	r3, #0
 800c588:	e72b      	b.n	800c3e2 <_dtoa_r+0x71a>
 800c58a:	9b08      	ldr	r3, [sp, #32]
 800c58c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c58e:	9408      	str	r4, [sp, #32]
 800c590:	1ae3      	subs	r3, r4, r3
 800c592:	441a      	add	r2, r3
 800c594:	9e00      	ldr	r6, [sp, #0]
 800c596:	9b03      	ldr	r3, [sp, #12]
 800c598:	920d      	str	r2, [sp, #52]	@ 0x34
 800c59a:	2400      	movs	r4, #0
 800c59c:	e721      	b.n	800c3e2 <_dtoa_r+0x71a>
 800c59e:	9c08      	ldr	r4, [sp, #32]
 800c5a0:	9e00      	ldr	r6, [sp, #0]
 800c5a2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c5a4:	e728      	b.n	800c3f8 <_dtoa_r+0x730>
 800c5a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c5aa:	e751      	b.n	800c450 <_dtoa_r+0x788>
 800c5ac:	9a08      	ldr	r2, [sp, #32]
 800c5ae:	9902      	ldr	r1, [sp, #8]
 800c5b0:	e750      	b.n	800c454 <_dtoa_r+0x78c>
 800c5b2:	f8cd 8008 	str.w	r8, [sp, #8]
 800c5b6:	e751      	b.n	800c45c <_dtoa_r+0x794>
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	e779      	b.n	800c4b0 <_dtoa_r+0x7e8>
 800c5bc:	9b04      	ldr	r3, [sp, #16]
 800c5be:	e777      	b.n	800c4b0 <_dtoa_r+0x7e8>
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	9308      	str	r3, [sp, #32]
 800c5c4:	e779      	b.n	800c4ba <_dtoa_r+0x7f2>
 800c5c6:	d093      	beq.n	800c4f0 <_dtoa_r+0x828>
 800c5c8:	9a00      	ldr	r2, [sp, #0]
 800c5ca:	331c      	adds	r3, #28
 800c5cc:	441a      	add	r2, r3
 800c5ce:	9200      	str	r2, [sp, #0]
 800c5d0:	9a06      	ldr	r2, [sp, #24]
 800c5d2:	441a      	add	r2, r3
 800c5d4:	441e      	add	r6, r3
 800c5d6:	9206      	str	r2, [sp, #24]
 800c5d8:	e78a      	b.n	800c4f0 <_dtoa_r+0x828>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	e7f4      	b.n	800c5c8 <_dtoa_r+0x900>
 800c5de:	9b03      	ldr	r3, [sp, #12]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	46b8      	mov	r8, r7
 800c5e4:	dc20      	bgt.n	800c628 <_dtoa_r+0x960>
 800c5e6:	469b      	mov	fp, r3
 800c5e8:	9b07      	ldr	r3, [sp, #28]
 800c5ea:	2b02      	cmp	r3, #2
 800c5ec:	dd1e      	ble.n	800c62c <_dtoa_r+0x964>
 800c5ee:	f1bb 0f00 	cmp.w	fp, #0
 800c5f2:	f47f adb1 	bne.w	800c158 <_dtoa_r+0x490>
 800c5f6:	4621      	mov	r1, r4
 800c5f8:	465b      	mov	r3, fp
 800c5fa:	2205      	movs	r2, #5
 800c5fc:	4648      	mov	r0, r9
 800c5fe:	f000 fa95 	bl	800cb2c <__multadd>
 800c602:	4601      	mov	r1, r0
 800c604:	4604      	mov	r4, r0
 800c606:	9802      	ldr	r0, [sp, #8]
 800c608:	f000 fca0 	bl	800cf4c <__mcmp>
 800c60c:	2800      	cmp	r0, #0
 800c60e:	f77f ada3 	ble.w	800c158 <_dtoa_r+0x490>
 800c612:	4656      	mov	r6, sl
 800c614:	2331      	movs	r3, #49	@ 0x31
 800c616:	f806 3b01 	strb.w	r3, [r6], #1
 800c61a:	f108 0801 	add.w	r8, r8, #1
 800c61e:	e59f      	b.n	800c160 <_dtoa_r+0x498>
 800c620:	9c03      	ldr	r4, [sp, #12]
 800c622:	46b8      	mov	r8, r7
 800c624:	4625      	mov	r5, r4
 800c626:	e7f4      	b.n	800c612 <_dtoa_r+0x94a>
 800c628:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c62c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c62e:	2b00      	cmp	r3, #0
 800c630:	f000 8101 	beq.w	800c836 <_dtoa_r+0xb6e>
 800c634:	2e00      	cmp	r6, #0
 800c636:	dd05      	ble.n	800c644 <_dtoa_r+0x97c>
 800c638:	4629      	mov	r1, r5
 800c63a:	4632      	mov	r2, r6
 800c63c:	4648      	mov	r0, r9
 800c63e:	f000 fc19 	bl	800ce74 <__lshift>
 800c642:	4605      	mov	r5, r0
 800c644:	9b08      	ldr	r3, [sp, #32]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d05c      	beq.n	800c704 <_dtoa_r+0xa3c>
 800c64a:	6869      	ldr	r1, [r5, #4]
 800c64c:	4648      	mov	r0, r9
 800c64e:	f000 fa0b 	bl	800ca68 <_Balloc>
 800c652:	4606      	mov	r6, r0
 800c654:	b928      	cbnz	r0, 800c662 <_dtoa_r+0x99a>
 800c656:	4b82      	ldr	r3, [pc, #520]	@ (800c860 <_dtoa_r+0xb98>)
 800c658:	4602      	mov	r2, r0
 800c65a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c65e:	f7ff bb4a 	b.w	800bcf6 <_dtoa_r+0x2e>
 800c662:	692a      	ldr	r2, [r5, #16]
 800c664:	3202      	adds	r2, #2
 800c666:	0092      	lsls	r2, r2, #2
 800c668:	f105 010c 	add.w	r1, r5, #12
 800c66c:	300c      	adds	r0, #12
 800c66e:	f7ff fa94 	bl	800bb9a <memcpy>
 800c672:	2201      	movs	r2, #1
 800c674:	4631      	mov	r1, r6
 800c676:	4648      	mov	r0, r9
 800c678:	f000 fbfc 	bl	800ce74 <__lshift>
 800c67c:	f10a 0301 	add.w	r3, sl, #1
 800c680:	9300      	str	r3, [sp, #0]
 800c682:	eb0a 030b 	add.w	r3, sl, fp
 800c686:	9308      	str	r3, [sp, #32]
 800c688:	9b04      	ldr	r3, [sp, #16]
 800c68a:	f003 0301 	and.w	r3, r3, #1
 800c68e:	462f      	mov	r7, r5
 800c690:	9306      	str	r3, [sp, #24]
 800c692:	4605      	mov	r5, r0
 800c694:	9b00      	ldr	r3, [sp, #0]
 800c696:	9802      	ldr	r0, [sp, #8]
 800c698:	4621      	mov	r1, r4
 800c69a:	f103 3bff 	add.w	fp, r3, #4294967295
 800c69e:	f7ff fa8a 	bl	800bbb6 <quorem>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	3330      	adds	r3, #48	@ 0x30
 800c6a6:	9003      	str	r0, [sp, #12]
 800c6a8:	4639      	mov	r1, r7
 800c6aa:	9802      	ldr	r0, [sp, #8]
 800c6ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6ae:	f000 fc4d 	bl	800cf4c <__mcmp>
 800c6b2:	462a      	mov	r2, r5
 800c6b4:	9004      	str	r0, [sp, #16]
 800c6b6:	4621      	mov	r1, r4
 800c6b8:	4648      	mov	r0, r9
 800c6ba:	f000 fc63 	bl	800cf84 <__mdiff>
 800c6be:	68c2      	ldr	r2, [r0, #12]
 800c6c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6c2:	4606      	mov	r6, r0
 800c6c4:	bb02      	cbnz	r2, 800c708 <_dtoa_r+0xa40>
 800c6c6:	4601      	mov	r1, r0
 800c6c8:	9802      	ldr	r0, [sp, #8]
 800c6ca:	f000 fc3f 	bl	800cf4c <__mcmp>
 800c6ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	4631      	mov	r1, r6
 800c6d4:	4648      	mov	r0, r9
 800c6d6:	920c      	str	r2, [sp, #48]	@ 0x30
 800c6d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6da:	f000 fa05 	bl	800cae8 <_Bfree>
 800c6de:	9b07      	ldr	r3, [sp, #28]
 800c6e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c6e2:	9e00      	ldr	r6, [sp, #0]
 800c6e4:	ea42 0103 	orr.w	r1, r2, r3
 800c6e8:	9b06      	ldr	r3, [sp, #24]
 800c6ea:	4319      	orrs	r1, r3
 800c6ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6ee:	d10d      	bne.n	800c70c <_dtoa_r+0xa44>
 800c6f0:	2b39      	cmp	r3, #57	@ 0x39
 800c6f2:	d027      	beq.n	800c744 <_dtoa_r+0xa7c>
 800c6f4:	9a04      	ldr	r2, [sp, #16]
 800c6f6:	2a00      	cmp	r2, #0
 800c6f8:	dd01      	ble.n	800c6fe <_dtoa_r+0xa36>
 800c6fa:	9b03      	ldr	r3, [sp, #12]
 800c6fc:	3331      	adds	r3, #49	@ 0x31
 800c6fe:	f88b 3000 	strb.w	r3, [fp]
 800c702:	e52e      	b.n	800c162 <_dtoa_r+0x49a>
 800c704:	4628      	mov	r0, r5
 800c706:	e7b9      	b.n	800c67c <_dtoa_r+0x9b4>
 800c708:	2201      	movs	r2, #1
 800c70a:	e7e2      	b.n	800c6d2 <_dtoa_r+0xa0a>
 800c70c:	9904      	ldr	r1, [sp, #16]
 800c70e:	2900      	cmp	r1, #0
 800c710:	db04      	blt.n	800c71c <_dtoa_r+0xa54>
 800c712:	9807      	ldr	r0, [sp, #28]
 800c714:	4301      	orrs	r1, r0
 800c716:	9806      	ldr	r0, [sp, #24]
 800c718:	4301      	orrs	r1, r0
 800c71a:	d120      	bne.n	800c75e <_dtoa_r+0xa96>
 800c71c:	2a00      	cmp	r2, #0
 800c71e:	ddee      	ble.n	800c6fe <_dtoa_r+0xa36>
 800c720:	9902      	ldr	r1, [sp, #8]
 800c722:	9300      	str	r3, [sp, #0]
 800c724:	2201      	movs	r2, #1
 800c726:	4648      	mov	r0, r9
 800c728:	f000 fba4 	bl	800ce74 <__lshift>
 800c72c:	4621      	mov	r1, r4
 800c72e:	9002      	str	r0, [sp, #8]
 800c730:	f000 fc0c 	bl	800cf4c <__mcmp>
 800c734:	2800      	cmp	r0, #0
 800c736:	9b00      	ldr	r3, [sp, #0]
 800c738:	dc02      	bgt.n	800c740 <_dtoa_r+0xa78>
 800c73a:	d1e0      	bne.n	800c6fe <_dtoa_r+0xa36>
 800c73c:	07da      	lsls	r2, r3, #31
 800c73e:	d5de      	bpl.n	800c6fe <_dtoa_r+0xa36>
 800c740:	2b39      	cmp	r3, #57	@ 0x39
 800c742:	d1da      	bne.n	800c6fa <_dtoa_r+0xa32>
 800c744:	2339      	movs	r3, #57	@ 0x39
 800c746:	f88b 3000 	strb.w	r3, [fp]
 800c74a:	4633      	mov	r3, r6
 800c74c:	461e      	mov	r6, r3
 800c74e:	3b01      	subs	r3, #1
 800c750:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c754:	2a39      	cmp	r2, #57	@ 0x39
 800c756:	d04e      	beq.n	800c7f6 <_dtoa_r+0xb2e>
 800c758:	3201      	adds	r2, #1
 800c75a:	701a      	strb	r2, [r3, #0]
 800c75c:	e501      	b.n	800c162 <_dtoa_r+0x49a>
 800c75e:	2a00      	cmp	r2, #0
 800c760:	dd03      	ble.n	800c76a <_dtoa_r+0xaa2>
 800c762:	2b39      	cmp	r3, #57	@ 0x39
 800c764:	d0ee      	beq.n	800c744 <_dtoa_r+0xa7c>
 800c766:	3301      	adds	r3, #1
 800c768:	e7c9      	b.n	800c6fe <_dtoa_r+0xa36>
 800c76a:	9a00      	ldr	r2, [sp, #0]
 800c76c:	9908      	ldr	r1, [sp, #32]
 800c76e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c772:	428a      	cmp	r2, r1
 800c774:	d028      	beq.n	800c7c8 <_dtoa_r+0xb00>
 800c776:	9902      	ldr	r1, [sp, #8]
 800c778:	2300      	movs	r3, #0
 800c77a:	220a      	movs	r2, #10
 800c77c:	4648      	mov	r0, r9
 800c77e:	f000 f9d5 	bl	800cb2c <__multadd>
 800c782:	42af      	cmp	r7, r5
 800c784:	9002      	str	r0, [sp, #8]
 800c786:	f04f 0300 	mov.w	r3, #0
 800c78a:	f04f 020a 	mov.w	r2, #10
 800c78e:	4639      	mov	r1, r7
 800c790:	4648      	mov	r0, r9
 800c792:	d107      	bne.n	800c7a4 <_dtoa_r+0xadc>
 800c794:	f000 f9ca 	bl	800cb2c <__multadd>
 800c798:	4607      	mov	r7, r0
 800c79a:	4605      	mov	r5, r0
 800c79c:	9b00      	ldr	r3, [sp, #0]
 800c79e:	3301      	adds	r3, #1
 800c7a0:	9300      	str	r3, [sp, #0]
 800c7a2:	e777      	b.n	800c694 <_dtoa_r+0x9cc>
 800c7a4:	f000 f9c2 	bl	800cb2c <__multadd>
 800c7a8:	4629      	mov	r1, r5
 800c7aa:	4607      	mov	r7, r0
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	220a      	movs	r2, #10
 800c7b0:	4648      	mov	r0, r9
 800c7b2:	f000 f9bb 	bl	800cb2c <__multadd>
 800c7b6:	4605      	mov	r5, r0
 800c7b8:	e7f0      	b.n	800c79c <_dtoa_r+0xad4>
 800c7ba:	f1bb 0f00 	cmp.w	fp, #0
 800c7be:	bfcc      	ite	gt
 800c7c0:	465e      	movgt	r6, fp
 800c7c2:	2601      	movle	r6, #1
 800c7c4:	4456      	add	r6, sl
 800c7c6:	2700      	movs	r7, #0
 800c7c8:	9902      	ldr	r1, [sp, #8]
 800c7ca:	9300      	str	r3, [sp, #0]
 800c7cc:	2201      	movs	r2, #1
 800c7ce:	4648      	mov	r0, r9
 800c7d0:	f000 fb50 	bl	800ce74 <__lshift>
 800c7d4:	4621      	mov	r1, r4
 800c7d6:	9002      	str	r0, [sp, #8]
 800c7d8:	f000 fbb8 	bl	800cf4c <__mcmp>
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	dcb4      	bgt.n	800c74a <_dtoa_r+0xa82>
 800c7e0:	d102      	bne.n	800c7e8 <_dtoa_r+0xb20>
 800c7e2:	9b00      	ldr	r3, [sp, #0]
 800c7e4:	07db      	lsls	r3, r3, #31
 800c7e6:	d4b0      	bmi.n	800c74a <_dtoa_r+0xa82>
 800c7e8:	4633      	mov	r3, r6
 800c7ea:	461e      	mov	r6, r3
 800c7ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7f0:	2a30      	cmp	r2, #48	@ 0x30
 800c7f2:	d0fa      	beq.n	800c7ea <_dtoa_r+0xb22>
 800c7f4:	e4b5      	b.n	800c162 <_dtoa_r+0x49a>
 800c7f6:	459a      	cmp	sl, r3
 800c7f8:	d1a8      	bne.n	800c74c <_dtoa_r+0xa84>
 800c7fa:	2331      	movs	r3, #49	@ 0x31
 800c7fc:	f108 0801 	add.w	r8, r8, #1
 800c800:	f88a 3000 	strb.w	r3, [sl]
 800c804:	e4ad      	b.n	800c162 <_dtoa_r+0x49a>
 800c806:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c808:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c864 <_dtoa_r+0xb9c>
 800c80c:	b11b      	cbz	r3, 800c816 <_dtoa_r+0xb4e>
 800c80e:	f10a 0308 	add.w	r3, sl, #8
 800c812:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c814:	6013      	str	r3, [r2, #0]
 800c816:	4650      	mov	r0, sl
 800c818:	b017      	add	sp, #92	@ 0x5c
 800c81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c81e:	9b07      	ldr	r3, [sp, #28]
 800c820:	2b01      	cmp	r3, #1
 800c822:	f77f ae2e 	ble.w	800c482 <_dtoa_r+0x7ba>
 800c826:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c828:	9308      	str	r3, [sp, #32]
 800c82a:	2001      	movs	r0, #1
 800c82c:	e64d      	b.n	800c4ca <_dtoa_r+0x802>
 800c82e:	f1bb 0f00 	cmp.w	fp, #0
 800c832:	f77f aed9 	ble.w	800c5e8 <_dtoa_r+0x920>
 800c836:	4656      	mov	r6, sl
 800c838:	9802      	ldr	r0, [sp, #8]
 800c83a:	4621      	mov	r1, r4
 800c83c:	f7ff f9bb 	bl	800bbb6 <quorem>
 800c840:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c844:	f806 3b01 	strb.w	r3, [r6], #1
 800c848:	eba6 020a 	sub.w	r2, r6, sl
 800c84c:	4593      	cmp	fp, r2
 800c84e:	ddb4      	ble.n	800c7ba <_dtoa_r+0xaf2>
 800c850:	9902      	ldr	r1, [sp, #8]
 800c852:	2300      	movs	r3, #0
 800c854:	220a      	movs	r2, #10
 800c856:	4648      	mov	r0, r9
 800c858:	f000 f968 	bl	800cb2c <__multadd>
 800c85c:	9002      	str	r0, [sp, #8]
 800c85e:	e7eb      	b.n	800c838 <_dtoa_r+0xb70>
 800c860:	0800e500 	.word	0x0800e500
 800c864:	0800e484 	.word	0x0800e484

0800c868 <_free_r>:
 800c868:	b538      	push	{r3, r4, r5, lr}
 800c86a:	4605      	mov	r5, r0
 800c86c:	2900      	cmp	r1, #0
 800c86e:	d041      	beq.n	800c8f4 <_free_r+0x8c>
 800c870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c874:	1f0c      	subs	r4, r1, #4
 800c876:	2b00      	cmp	r3, #0
 800c878:	bfb8      	it	lt
 800c87a:	18e4      	addlt	r4, r4, r3
 800c87c:	f000 f8e8 	bl	800ca50 <__malloc_lock>
 800c880:	4a1d      	ldr	r2, [pc, #116]	@ (800c8f8 <_free_r+0x90>)
 800c882:	6813      	ldr	r3, [r2, #0]
 800c884:	b933      	cbnz	r3, 800c894 <_free_r+0x2c>
 800c886:	6063      	str	r3, [r4, #4]
 800c888:	6014      	str	r4, [r2, #0]
 800c88a:	4628      	mov	r0, r5
 800c88c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c890:	f000 b8e4 	b.w	800ca5c <__malloc_unlock>
 800c894:	42a3      	cmp	r3, r4
 800c896:	d908      	bls.n	800c8aa <_free_r+0x42>
 800c898:	6820      	ldr	r0, [r4, #0]
 800c89a:	1821      	adds	r1, r4, r0
 800c89c:	428b      	cmp	r3, r1
 800c89e:	bf01      	itttt	eq
 800c8a0:	6819      	ldreq	r1, [r3, #0]
 800c8a2:	685b      	ldreq	r3, [r3, #4]
 800c8a4:	1809      	addeq	r1, r1, r0
 800c8a6:	6021      	streq	r1, [r4, #0]
 800c8a8:	e7ed      	b.n	800c886 <_free_r+0x1e>
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	b10b      	cbz	r3, 800c8b4 <_free_r+0x4c>
 800c8b0:	42a3      	cmp	r3, r4
 800c8b2:	d9fa      	bls.n	800c8aa <_free_r+0x42>
 800c8b4:	6811      	ldr	r1, [r2, #0]
 800c8b6:	1850      	adds	r0, r2, r1
 800c8b8:	42a0      	cmp	r0, r4
 800c8ba:	d10b      	bne.n	800c8d4 <_free_r+0x6c>
 800c8bc:	6820      	ldr	r0, [r4, #0]
 800c8be:	4401      	add	r1, r0
 800c8c0:	1850      	adds	r0, r2, r1
 800c8c2:	4283      	cmp	r3, r0
 800c8c4:	6011      	str	r1, [r2, #0]
 800c8c6:	d1e0      	bne.n	800c88a <_free_r+0x22>
 800c8c8:	6818      	ldr	r0, [r3, #0]
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	6053      	str	r3, [r2, #4]
 800c8ce:	4408      	add	r0, r1
 800c8d0:	6010      	str	r0, [r2, #0]
 800c8d2:	e7da      	b.n	800c88a <_free_r+0x22>
 800c8d4:	d902      	bls.n	800c8dc <_free_r+0x74>
 800c8d6:	230c      	movs	r3, #12
 800c8d8:	602b      	str	r3, [r5, #0]
 800c8da:	e7d6      	b.n	800c88a <_free_r+0x22>
 800c8dc:	6820      	ldr	r0, [r4, #0]
 800c8de:	1821      	adds	r1, r4, r0
 800c8e0:	428b      	cmp	r3, r1
 800c8e2:	bf04      	itt	eq
 800c8e4:	6819      	ldreq	r1, [r3, #0]
 800c8e6:	685b      	ldreq	r3, [r3, #4]
 800c8e8:	6063      	str	r3, [r4, #4]
 800c8ea:	bf04      	itt	eq
 800c8ec:	1809      	addeq	r1, r1, r0
 800c8ee:	6021      	streq	r1, [r4, #0]
 800c8f0:	6054      	str	r4, [r2, #4]
 800c8f2:	e7ca      	b.n	800c88a <_free_r+0x22>
 800c8f4:	bd38      	pop	{r3, r4, r5, pc}
 800c8f6:	bf00      	nop
 800c8f8:	20006010 	.word	0x20006010

0800c8fc <malloc>:
 800c8fc:	4b02      	ldr	r3, [pc, #8]	@ (800c908 <malloc+0xc>)
 800c8fe:	4601      	mov	r1, r0
 800c900:	6818      	ldr	r0, [r3, #0]
 800c902:	f000 b825 	b.w	800c950 <_malloc_r>
 800c906:	bf00      	nop
 800c908:	2000019c 	.word	0x2000019c

0800c90c <sbrk_aligned>:
 800c90c:	b570      	push	{r4, r5, r6, lr}
 800c90e:	4e0f      	ldr	r6, [pc, #60]	@ (800c94c <sbrk_aligned+0x40>)
 800c910:	460c      	mov	r4, r1
 800c912:	6831      	ldr	r1, [r6, #0]
 800c914:	4605      	mov	r5, r0
 800c916:	b911      	cbnz	r1, 800c91e <sbrk_aligned+0x12>
 800c918:	f000 fe3e 	bl	800d598 <_sbrk_r>
 800c91c:	6030      	str	r0, [r6, #0]
 800c91e:	4621      	mov	r1, r4
 800c920:	4628      	mov	r0, r5
 800c922:	f000 fe39 	bl	800d598 <_sbrk_r>
 800c926:	1c43      	adds	r3, r0, #1
 800c928:	d103      	bne.n	800c932 <sbrk_aligned+0x26>
 800c92a:	f04f 34ff 	mov.w	r4, #4294967295
 800c92e:	4620      	mov	r0, r4
 800c930:	bd70      	pop	{r4, r5, r6, pc}
 800c932:	1cc4      	adds	r4, r0, #3
 800c934:	f024 0403 	bic.w	r4, r4, #3
 800c938:	42a0      	cmp	r0, r4
 800c93a:	d0f8      	beq.n	800c92e <sbrk_aligned+0x22>
 800c93c:	1a21      	subs	r1, r4, r0
 800c93e:	4628      	mov	r0, r5
 800c940:	f000 fe2a 	bl	800d598 <_sbrk_r>
 800c944:	3001      	adds	r0, #1
 800c946:	d1f2      	bne.n	800c92e <sbrk_aligned+0x22>
 800c948:	e7ef      	b.n	800c92a <sbrk_aligned+0x1e>
 800c94a:	bf00      	nop
 800c94c:	2000600c 	.word	0x2000600c

0800c950 <_malloc_r>:
 800c950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c954:	1ccd      	adds	r5, r1, #3
 800c956:	f025 0503 	bic.w	r5, r5, #3
 800c95a:	3508      	adds	r5, #8
 800c95c:	2d0c      	cmp	r5, #12
 800c95e:	bf38      	it	cc
 800c960:	250c      	movcc	r5, #12
 800c962:	2d00      	cmp	r5, #0
 800c964:	4606      	mov	r6, r0
 800c966:	db01      	blt.n	800c96c <_malloc_r+0x1c>
 800c968:	42a9      	cmp	r1, r5
 800c96a:	d904      	bls.n	800c976 <_malloc_r+0x26>
 800c96c:	230c      	movs	r3, #12
 800c96e:	6033      	str	r3, [r6, #0]
 800c970:	2000      	movs	r0, #0
 800c972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c976:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ca4c <_malloc_r+0xfc>
 800c97a:	f000 f869 	bl	800ca50 <__malloc_lock>
 800c97e:	f8d8 3000 	ldr.w	r3, [r8]
 800c982:	461c      	mov	r4, r3
 800c984:	bb44      	cbnz	r4, 800c9d8 <_malloc_r+0x88>
 800c986:	4629      	mov	r1, r5
 800c988:	4630      	mov	r0, r6
 800c98a:	f7ff ffbf 	bl	800c90c <sbrk_aligned>
 800c98e:	1c43      	adds	r3, r0, #1
 800c990:	4604      	mov	r4, r0
 800c992:	d158      	bne.n	800ca46 <_malloc_r+0xf6>
 800c994:	f8d8 4000 	ldr.w	r4, [r8]
 800c998:	4627      	mov	r7, r4
 800c99a:	2f00      	cmp	r7, #0
 800c99c:	d143      	bne.n	800ca26 <_malloc_r+0xd6>
 800c99e:	2c00      	cmp	r4, #0
 800c9a0:	d04b      	beq.n	800ca3a <_malloc_r+0xea>
 800c9a2:	6823      	ldr	r3, [r4, #0]
 800c9a4:	4639      	mov	r1, r7
 800c9a6:	4630      	mov	r0, r6
 800c9a8:	eb04 0903 	add.w	r9, r4, r3
 800c9ac:	f000 fdf4 	bl	800d598 <_sbrk_r>
 800c9b0:	4581      	cmp	r9, r0
 800c9b2:	d142      	bne.n	800ca3a <_malloc_r+0xea>
 800c9b4:	6821      	ldr	r1, [r4, #0]
 800c9b6:	1a6d      	subs	r5, r5, r1
 800c9b8:	4629      	mov	r1, r5
 800c9ba:	4630      	mov	r0, r6
 800c9bc:	f7ff ffa6 	bl	800c90c <sbrk_aligned>
 800c9c0:	3001      	adds	r0, #1
 800c9c2:	d03a      	beq.n	800ca3a <_malloc_r+0xea>
 800c9c4:	6823      	ldr	r3, [r4, #0]
 800c9c6:	442b      	add	r3, r5
 800c9c8:	6023      	str	r3, [r4, #0]
 800c9ca:	f8d8 3000 	ldr.w	r3, [r8]
 800c9ce:	685a      	ldr	r2, [r3, #4]
 800c9d0:	bb62      	cbnz	r2, 800ca2c <_malloc_r+0xdc>
 800c9d2:	f8c8 7000 	str.w	r7, [r8]
 800c9d6:	e00f      	b.n	800c9f8 <_malloc_r+0xa8>
 800c9d8:	6822      	ldr	r2, [r4, #0]
 800c9da:	1b52      	subs	r2, r2, r5
 800c9dc:	d420      	bmi.n	800ca20 <_malloc_r+0xd0>
 800c9de:	2a0b      	cmp	r2, #11
 800c9e0:	d917      	bls.n	800ca12 <_malloc_r+0xc2>
 800c9e2:	1961      	adds	r1, r4, r5
 800c9e4:	42a3      	cmp	r3, r4
 800c9e6:	6025      	str	r5, [r4, #0]
 800c9e8:	bf18      	it	ne
 800c9ea:	6059      	strne	r1, [r3, #4]
 800c9ec:	6863      	ldr	r3, [r4, #4]
 800c9ee:	bf08      	it	eq
 800c9f0:	f8c8 1000 	streq.w	r1, [r8]
 800c9f4:	5162      	str	r2, [r4, r5]
 800c9f6:	604b      	str	r3, [r1, #4]
 800c9f8:	4630      	mov	r0, r6
 800c9fa:	f000 f82f 	bl	800ca5c <__malloc_unlock>
 800c9fe:	f104 000b 	add.w	r0, r4, #11
 800ca02:	1d23      	adds	r3, r4, #4
 800ca04:	f020 0007 	bic.w	r0, r0, #7
 800ca08:	1ac2      	subs	r2, r0, r3
 800ca0a:	bf1c      	itt	ne
 800ca0c:	1a1b      	subne	r3, r3, r0
 800ca0e:	50a3      	strne	r3, [r4, r2]
 800ca10:	e7af      	b.n	800c972 <_malloc_r+0x22>
 800ca12:	6862      	ldr	r2, [r4, #4]
 800ca14:	42a3      	cmp	r3, r4
 800ca16:	bf0c      	ite	eq
 800ca18:	f8c8 2000 	streq.w	r2, [r8]
 800ca1c:	605a      	strne	r2, [r3, #4]
 800ca1e:	e7eb      	b.n	800c9f8 <_malloc_r+0xa8>
 800ca20:	4623      	mov	r3, r4
 800ca22:	6864      	ldr	r4, [r4, #4]
 800ca24:	e7ae      	b.n	800c984 <_malloc_r+0x34>
 800ca26:	463c      	mov	r4, r7
 800ca28:	687f      	ldr	r7, [r7, #4]
 800ca2a:	e7b6      	b.n	800c99a <_malloc_r+0x4a>
 800ca2c:	461a      	mov	r2, r3
 800ca2e:	685b      	ldr	r3, [r3, #4]
 800ca30:	42a3      	cmp	r3, r4
 800ca32:	d1fb      	bne.n	800ca2c <_malloc_r+0xdc>
 800ca34:	2300      	movs	r3, #0
 800ca36:	6053      	str	r3, [r2, #4]
 800ca38:	e7de      	b.n	800c9f8 <_malloc_r+0xa8>
 800ca3a:	230c      	movs	r3, #12
 800ca3c:	6033      	str	r3, [r6, #0]
 800ca3e:	4630      	mov	r0, r6
 800ca40:	f000 f80c 	bl	800ca5c <__malloc_unlock>
 800ca44:	e794      	b.n	800c970 <_malloc_r+0x20>
 800ca46:	6005      	str	r5, [r0, #0]
 800ca48:	e7d6      	b.n	800c9f8 <_malloc_r+0xa8>
 800ca4a:	bf00      	nop
 800ca4c:	20006010 	.word	0x20006010

0800ca50 <__malloc_lock>:
 800ca50:	4801      	ldr	r0, [pc, #4]	@ (800ca58 <__malloc_lock+0x8>)
 800ca52:	f7ff b8a0 	b.w	800bb96 <__retarget_lock_acquire_recursive>
 800ca56:	bf00      	nop
 800ca58:	20006008 	.word	0x20006008

0800ca5c <__malloc_unlock>:
 800ca5c:	4801      	ldr	r0, [pc, #4]	@ (800ca64 <__malloc_unlock+0x8>)
 800ca5e:	f7ff b89b 	b.w	800bb98 <__retarget_lock_release_recursive>
 800ca62:	bf00      	nop
 800ca64:	20006008 	.word	0x20006008

0800ca68 <_Balloc>:
 800ca68:	b570      	push	{r4, r5, r6, lr}
 800ca6a:	69c6      	ldr	r6, [r0, #28]
 800ca6c:	4604      	mov	r4, r0
 800ca6e:	460d      	mov	r5, r1
 800ca70:	b976      	cbnz	r6, 800ca90 <_Balloc+0x28>
 800ca72:	2010      	movs	r0, #16
 800ca74:	f7ff ff42 	bl	800c8fc <malloc>
 800ca78:	4602      	mov	r2, r0
 800ca7a:	61e0      	str	r0, [r4, #28]
 800ca7c:	b920      	cbnz	r0, 800ca88 <_Balloc+0x20>
 800ca7e:	4b18      	ldr	r3, [pc, #96]	@ (800cae0 <_Balloc+0x78>)
 800ca80:	4818      	ldr	r0, [pc, #96]	@ (800cae4 <_Balloc+0x7c>)
 800ca82:	216b      	movs	r1, #107	@ 0x6b
 800ca84:	f000 fd98 	bl	800d5b8 <__assert_func>
 800ca88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca8c:	6006      	str	r6, [r0, #0]
 800ca8e:	60c6      	str	r6, [r0, #12]
 800ca90:	69e6      	ldr	r6, [r4, #28]
 800ca92:	68f3      	ldr	r3, [r6, #12]
 800ca94:	b183      	cbz	r3, 800cab8 <_Balloc+0x50>
 800ca96:	69e3      	ldr	r3, [r4, #28]
 800ca98:	68db      	ldr	r3, [r3, #12]
 800ca9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ca9e:	b9b8      	cbnz	r0, 800cad0 <_Balloc+0x68>
 800caa0:	2101      	movs	r1, #1
 800caa2:	fa01 f605 	lsl.w	r6, r1, r5
 800caa6:	1d72      	adds	r2, r6, #5
 800caa8:	0092      	lsls	r2, r2, #2
 800caaa:	4620      	mov	r0, r4
 800caac:	f000 fda2 	bl	800d5f4 <_calloc_r>
 800cab0:	b160      	cbz	r0, 800cacc <_Balloc+0x64>
 800cab2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cab6:	e00e      	b.n	800cad6 <_Balloc+0x6e>
 800cab8:	2221      	movs	r2, #33	@ 0x21
 800caba:	2104      	movs	r1, #4
 800cabc:	4620      	mov	r0, r4
 800cabe:	f000 fd99 	bl	800d5f4 <_calloc_r>
 800cac2:	69e3      	ldr	r3, [r4, #28]
 800cac4:	60f0      	str	r0, [r6, #12]
 800cac6:	68db      	ldr	r3, [r3, #12]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d1e4      	bne.n	800ca96 <_Balloc+0x2e>
 800cacc:	2000      	movs	r0, #0
 800cace:	bd70      	pop	{r4, r5, r6, pc}
 800cad0:	6802      	ldr	r2, [r0, #0]
 800cad2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cad6:	2300      	movs	r3, #0
 800cad8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cadc:	e7f7      	b.n	800cace <_Balloc+0x66>
 800cade:	bf00      	nop
 800cae0:	0800e491 	.word	0x0800e491
 800cae4:	0800e511 	.word	0x0800e511

0800cae8 <_Bfree>:
 800cae8:	b570      	push	{r4, r5, r6, lr}
 800caea:	69c6      	ldr	r6, [r0, #28]
 800caec:	4605      	mov	r5, r0
 800caee:	460c      	mov	r4, r1
 800caf0:	b976      	cbnz	r6, 800cb10 <_Bfree+0x28>
 800caf2:	2010      	movs	r0, #16
 800caf4:	f7ff ff02 	bl	800c8fc <malloc>
 800caf8:	4602      	mov	r2, r0
 800cafa:	61e8      	str	r0, [r5, #28]
 800cafc:	b920      	cbnz	r0, 800cb08 <_Bfree+0x20>
 800cafe:	4b09      	ldr	r3, [pc, #36]	@ (800cb24 <_Bfree+0x3c>)
 800cb00:	4809      	ldr	r0, [pc, #36]	@ (800cb28 <_Bfree+0x40>)
 800cb02:	218f      	movs	r1, #143	@ 0x8f
 800cb04:	f000 fd58 	bl	800d5b8 <__assert_func>
 800cb08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb0c:	6006      	str	r6, [r0, #0]
 800cb0e:	60c6      	str	r6, [r0, #12]
 800cb10:	b13c      	cbz	r4, 800cb22 <_Bfree+0x3a>
 800cb12:	69eb      	ldr	r3, [r5, #28]
 800cb14:	6862      	ldr	r2, [r4, #4]
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb1c:	6021      	str	r1, [r4, #0]
 800cb1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cb22:	bd70      	pop	{r4, r5, r6, pc}
 800cb24:	0800e491 	.word	0x0800e491
 800cb28:	0800e511 	.word	0x0800e511

0800cb2c <__multadd>:
 800cb2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb30:	690d      	ldr	r5, [r1, #16]
 800cb32:	4607      	mov	r7, r0
 800cb34:	460c      	mov	r4, r1
 800cb36:	461e      	mov	r6, r3
 800cb38:	f101 0c14 	add.w	ip, r1, #20
 800cb3c:	2000      	movs	r0, #0
 800cb3e:	f8dc 3000 	ldr.w	r3, [ip]
 800cb42:	b299      	uxth	r1, r3
 800cb44:	fb02 6101 	mla	r1, r2, r1, r6
 800cb48:	0c1e      	lsrs	r6, r3, #16
 800cb4a:	0c0b      	lsrs	r3, r1, #16
 800cb4c:	fb02 3306 	mla	r3, r2, r6, r3
 800cb50:	b289      	uxth	r1, r1
 800cb52:	3001      	adds	r0, #1
 800cb54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cb58:	4285      	cmp	r5, r0
 800cb5a:	f84c 1b04 	str.w	r1, [ip], #4
 800cb5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cb62:	dcec      	bgt.n	800cb3e <__multadd+0x12>
 800cb64:	b30e      	cbz	r6, 800cbaa <__multadd+0x7e>
 800cb66:	68a3      	ldr	r3, [r4, #8]
 800cb68:	42ab      	cmp	r3, r5
 800cb6a:	dc19      	bgt.n	800cba0 <__multadd+0x74>
 800cb6c:	6861      	ldr	r1, [r4, #4]
 800cb6e:	4638      	mov	r0, r7
 800cb70:	3101      	adds	r1, #1
 800cb72:	f7ff ff79 	bl	800ca68 <_Balloc>
 800cb76:	4680      	mov	r8, r0
 800cb78:	b928      	cbnz	r0, 800cb86 <__multadd+0x5a>
 800cb7a:	4602      	mov	r2, r0
 800cb7c:	4b0c      	ldr	r3, [pc, #48]	@ (800cbb0 <__multadd+0x84>)
 800cb7e:	480d      	ldr	r0, [pc, #52]	@ (800cbb4 <__multadd+0x88>)
 800cb80:	21ba      	movs	r1, #186	@ 0xba
 800cb82:	f000 fd19 	bl	800d5b8 <__assert_func>
 800cb86:	6922      	ldr	r2, [r4, #16]
 800cb88:	3202      	adds	r2, #2
 800cb8a:	f104 010c 	add.w	r1, r4, #12
 800cb8e:	0092      	lsls	r2, r2, #2
 800cb90:	300c      	adds	r0, #12
 800cb92:	f7ff f802 	bl	800bb9a <memcpy>
 800cb96:	4621      	mov	r1, r4
 800cb98:	4638      	mov	r0, r7
 800cb9a:	f7ff ffa5 	bl	800cae8 <_Bfree>
 800cb9e:	4644      	mov	r4, r8
 800cba0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cba4:	3501      	adds	r5, #1
 800cba6:	615e      	str	r6, [r3, #20]
 800cba8:	6125      	str	r5, [r4, #16]
 800cbaa:	4620      	mov	r0, r4
 800cbac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbb0:	0800e500 	.word	0x0800e500
 800cbb4:	0800e511 	.word	0x0800e511

0800cbb8 <__hi0bits>:
 800cbb8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	bf36      	itet	cc
 800cbc0:	0403      	lslcc	r3, r0, #16
 800cbc2:	2000      	movcs	r0, #0
 800cbc4:	2010      	movcc	r0, #16
 800cbc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cbca:	bf3c      	itt	cc
 800cbcc:	021b      	lslcc	r3, r3, #8
 800cbce:	3008      	addcc	r0, #8
 800cbd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cbd4:	bf3c      	itt	cc
 800cbd6:	011b      	lslcc	r3, r3, #4
 800cbd8:	3004      	addcc	r0, #4
 800cbda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cbde:	bf3c      	itt	cc
 800cbe0:	009b      	lslcc	r3, r3, #2
 800cbe2:	3002      	addcc	r0, #2
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	db05      	blt.n	800cbf4 <__hi0bits+0x3c>
 800cbe8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cbec:	f100 0001 	add.w	r0, r0, #1
 800cbf0:	bf08      	it	eq
 800cbf2:	2020      	moveq	r0, #32
 800cbf4:	4770      	bx	lr

0800cbf6 <__lo0bits>:
 800cbf6:	6803      	ldr	r3, [r0, #0]
 800cbf8:	4602      	mov	r2, r0
 800cbfa:	f013 0007 	ands.w	r0, r3, #7
 800cbfe:	d00b      	beq.n	800cc18 <__lo0bits+0x22>
 800cc00:	07d9      	lsls	r1, r3, #31
 800cc02:	d421      	bmi.n	800cc48 <__lo0bits+0x52>
 800cc04:	0798      	lsls	r0, r3, #30
 800cc06:	bf49      	itett	mi
 800cc08:	085b      	lsrmi	r3, r3, #1
 800cc0a:	089b      	lsrpl	r3, r3, #2
 800cc0c:	2001      	movmi	r0, #1
 800cc0e:	6013      	strmi	r3, [r2, #0]
 800cc10:	bf5c      	itt	pl
 800cc12:	6013      	strpl	r3, [r2, #0]
 800cc14:	2002      	movpl	r0, #2
 800cc16:	4770      	bx	lr
 800cc18:	b299      	uxth	r1, r3
 800cc1a:	b909      	cbnz	r1, 800cc20 <__lo0bits+0x2a>
 800cc1c:	0c1b      	lsrs	r3, r3, #16
 800cc1e:	2010      	movs	r0, #16
 800cc20:	b2d9      	uxtb	r1, r3
 800cc22:	b909      	cbnz	r1, 800cc28 <__lo0bits+0x32>
 800cc24:	3008      	adds	r0, #8
 800cc26:	0a1b      	lsrs	r3, r3, #8
 800cc28:	0719      	lsls	r1, r3, #28
 800cc2a:	bf04      	itt	eq
 800cc2c:	091b      	lsreq	r3, r3, #4
 800cc2e:	3004      	addeq	r0, #4
 800cc30:	0799      	lsls	r1, r3, #30
 800cc32:	bf04      	itt	eq
 800cc34:	089b      	lsreq	r3, r3, #2
 800cc36:	3002      	addeq	r0, #2
 800cc38:	07d9      	lsls	r1, r3, #31
 800cc3a:	d403      	bmi.n	800cc44 <__lo0bits+0x4e>
 800cc3c:	085b      	lsrs	r3, r3, #1
 800cc3e:	f100 0001 	add.w	r0, r0, #1
 800cc42:	d003      	beq.n	800cc4c <__lo0bits+0x56>
 800cc44:	6013      	str	r3, [r2, #0]
 800cc46:	4770      	bx	lr
 800cc48:	2000      	movs	r0, #0
 800cc4a:	4770      	bx	lr
 800cc4c:	2020      	movs	r0, #32
 800cc4e:	4770      	bx	lr

0800cc50 <__i2b>:
 800cc50:	b510      	push	{r4, lr}
 800cc52:	460c      	mov	r4, r1
 800cc54:	2101      	movs	r1, #1
 800cc56:	f7ff ff07 	bl	800ca68 <_Balloc>
 800cc5a:	4602      	mov	r2, r0
 800cc5c:	b928      	cbnz	r0, 800cc6a <__i2b+0x1a>
 800cc5e:	4b05      	ldr	r3, [pc, #20]	@ (800cc74 <__i2b+0x24>)
 800cc60:	4805      	ldr	r0, [pc, #20]	@ (800cc78 <__i2b+0x28>)
 800cc62:	f240 1145 	movw	r1, #325	@ 0x145
 800cc66:	f000 fca7 	bl	800d5b8 <__assert_func>
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	6144      	str	r4, [r0, #20]
 800cc6e:	6103      	str	r3, [r0, #16]
 800cc70:	bd10      	pop	{r4, pc}
 800cc72:	bf00      	nop
 800cc74:	0800e500 	.word	0x0800e500
 800cc78:	0800e511 	.word	0x0800e511

0800cc7c <__multiply>:
 800cc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc80:	4617      	mov	r7, r2
 800cc82:	690a      	ldr	r2, [r1, #16]
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	429a      	cmp	r2, r3
 800cc88:	bfa8      	it	ge
 800cc8a:	463b      	movge	r3, r7
 800cc8c:	4689      	mov	r9, r1
 800cc8e:	bfa4      	itt	ge
 800cc90:	460f      	movge	r7, r1
 800cc92:	4699      	movge	r9, r3
 800cc94:	693d      	ldr	r5, [r7, #16]
 800cc96:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	6879      	ldr	r1, [r7, #4]
 800cc9e:	eb05 060a 	add.w	r6, r5, sl
 800cca2:	42b3      	cmp	r3, r6
 800cca4:	b085      	sub	sp, #20
 800cca6:	bfb8      	it	lt
 800cca8:	3101      	addlt	r1, #1
 800ccaa:	f7ff fedd 	bl	800ca68 <_Balloc>
 800ccae:	b930      	cbnz	r0, 800ccbe <__multiply+0x42>
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	4b41      	ldr	r3, [pc, #260]	@ (800cdb8 <__multiply+0x13c>)
 800ccb4:	4841      	ldr	r0, [pc, #260]	@ (800cdbc <__multiply+0x140>)
 800ccb6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ccba:	f000 fc7d 	bl	800d5b8 <__assert_func>
 800ccbe:	f100 0414 	add.w	r4, r0, #20
 800ccc2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ccc6:	4623      	mov	r3, r4
 800ccc8:	2200      	movs	r2, #0
 800ccca:	4573      	cmp	r3, lr
 800cccc:	d320      	bcc.n	800cd10 <__multiply+0x94>
 800ccce:	f107 0814 	add.w	r8, r7, #20
 800ccd2:	f109 0114 	add.w	r1, r9, #20
 800ccd6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ccda:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ccde:	9302      	str	r3, [sp, #8]
 800cce0:	1beb      	subs	r3, r5, r7
 800cce2:	3b15      	subs	r3, #21
 800cce4:	f023 0303 	bic.w	r3, r3, #3
 800cce8:	3304      	adds	r3, #4
 800ccea:	3715      	adds	r7, #21
 800ccec:	42bd      	cmp	r5, r7
 800ccee:	bf38      	it	cc
 800ccf0:	2304      	movcc	r3, #4
 800ccf2:	9301      	str	r3, [sp, #4]
 800ccf4:	9b02      	ldr	r3, [sp, #8]
 800ccf6:	9103      	str	r1, [sp, #12]
 800ccf8:	428b      	cmp	r3, r1
 800ccfa:	d80c      	bhi.n	800cd16 <__multiply+0x9a>
 800ccfc:	2e00      	cmp	r6, #0
 800ccfe:	dd03      	ble.n	800cd08 <__multiply+0x8c>
 800cd00:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d055      	beq.n	800cdb4 <__multiply+0x138>
 800cd08:	6106      	str	r6, [r0, #16]
 800cd0a:	b005      	add	sp, #20
 800cd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd10:	f843 2b04 	str.w	r2, [r3], #4
 800cd14:	e7d9      	b.n	800ccca <__multiply+0x4e>
 800cd16:	f8b1 a000 	ldrh.w	sl, [r1]
 800cd1a:	f1ba 0f00 	cmp.w	sl, #0
 800cd1e:	d01f      	beq.n	800cd60 <__multiply+0xe4>
 800cd20:	46c4      	mov	ip, r8
 800cd22:	46a1      	mov	r9, r4
 800cd24:	2700      	movs	r7, #0
 800cd26:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cd2a:	f8d9 3000 	ldr.w	r3, [r9]
 800cd2e:	fa1f fb82 	uxth.w	fp, r2
 800cd32:	b29b      	uxth	r3, r3
 800cd34:	fb0a 330b 	mla	r3, sl, fp, r3
 800cd38:	443b      	add	r3, r7
 800cd3a:	f8d9 7000 	ldr.w	r7, [r9]
 800cd3e:	0c12      	lsrs	r2, r2, #16
 800cd40:	0c3f      	lsrs	r7, r7, #16
 800cd42:	fb0a 7202 	mla	r2, sl, r2, r7
 800cd46:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800cd4a:	b29b      	uxth	r3, r3
 800cd4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd50:	4565      	cmp	r5, ip
 800cd52:	f849 3b04 	str.w	r3, [r9], #4
 800cd56:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800cd5a:	d8e4      	bhi.n	800cd26 <__multiply+0xaa>
 800cd5c:	9b01      	ldr	r3, [sp, #4]
 800cd5e:	50e7      	str	r7, [r4, r3]
 800cd60:	9b03      	ldr	r3, [sp, #12]
 800cd62:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cd66:	3104      	adds	r1, #4
 800cd68:	f1b9 0f00 	cmp.w	r9, #0
 800cd6c:	d020      	beq.n	800cdb0 <__multiply+0x134>
 800cd6e:	6823      	ldr	r3, [r4, #0]
 800cd70:	4647      	mov	r7, r8
 800cd72:	46a4      	mov	ip, r4
 800cd74:	f04f 0a00 	mov.w	sl, #0
 800cd78:	f8b7 b000 	ldrh.w	fp, [r7]
 800cd7c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800cd80:	fb09 220b 	mla	r2, r9, fp, r2
 800cd84:	4452      	add	r2, sl
 800cd86:	b29b      	uxth	r3, r3
 800cd88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd8c:	f84c 3b04 	str.w	r3, [ip], #4
 800cd90:	f857 3b04 	ldr.w	r3, [r7], #4
 800cd94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cd98:	f8bc 3000 	ldrh.w	r3, [ip]
 800cd9c:	fb09 330a 	mla	r3, r9, sl, r3
 800cda0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800cda4:	42bd      	cmp	r5, r7
 800cda6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cdaa:	d8e5      	bhi.n	800cd78 <__multiply+0xfc>
 800cdac:	9a01      	ldr	r2, [sp, #4]
 800cdae:	50a3      	str	r3, [r4, r2]
 800cdb0:	3404      	adds	r4, #4
 800cdb2:	e79f      	b.n	800ccf4 <__multiply+0x78>
 800cdb4:	3e01      	subs	r6, #1
 800cdb6:	e7a1      	b.n	800ccfc <__multiply+0x80>
 800cdb8:	0800e500 	.word	0x0800e500
 800cdbc:	0800e511 	.word	0x0800e511

0800cdc0 <__pow5mult>:
 800cdc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdc4:	4615      	mov	r5, r2
 800cdc6:	f012 0203 	ands.w	r2, r2, #3
 800cdca:	4607      	mov	r7, r0
 800cdcc:	460e      	mov	r6, r1
 800cdce:	d007      	beq.n	800cde0 <__pow5mult+0x20>
 800cdd0:	4c25      	ldr	r4, [pc, #148]	@ (800ce68 <__pow5mult+0xa8>)
 800cdd2:	3a01      	subs	r2, #1
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cdda:	f7ff fea7 	bl	800cb2c <__multadd>
 800cdde:	4606      	mov	r6, r0
 800cde0:	10ad      	asrs	r5, r5, #2
 800cde2:	d03d      	beq.n	800ce60 <__pow5mult+0xa0>
 800cde4:	69fc      	ldr	r4, [r7, #28]
 800cde6:	b97c      	cbnz	r4, 800ce08 <__pow5mult+0x48>
 800cde8:	2010      	movs	r0, #16
 800cdea:	f7ff fd87 	bl	800c8fc <malloc>
 800cdee:	4602      	mov	r2, r0
 800cdf0:	61f8      	str	r0, [r7, #28]
 800cdf2:	b928      	cbnz	r0, 800ce00 <__pow5mult+0x40>
 800cdf4:	4b1d      	ldr	r3, [pc, #116]	@ (800ce6c <__pow5mult+0xac>)
 800cdf6:	481e      	ldr	r0, [pc, #120]	@ (800ce70 <__pow5mult+0xb0>)
 800cdf8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cdfc:	f000 fbdc 	bl	800d5b8 <__assert_func>
 800ce00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce04:	6004      	str	r4, [r0, #0]
 800ce06:	60c4      	str	r4, [r0, #12]
 800ce08:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ce0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ce10:	b94c      	cbnz	r4, 800ce26 <__pow5mult+0x66>
 800ce12:	f240 2171 	movw	r1, #625	@ 0x271
 800ce16:	4638      	mov	r0, r7
 800ce18:	f7ff ff1a 	bl	800cc50 <__i2b>
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ce22:	4604      	mov	r4, r0
 800ce24:	6003      	str	r3, [r0, #0]
 800ce26:	f04f 0900 	mov.w	r9, #0
 800ce2a:	07eb      	lsls	r3, r5, #31
 800ce2c:	d50a      	bpl.n	800ce44 <__pow5mult+0x84>
 800ce2e:	4631      	mov	r1, r6
 800ce30:	4622      	mov	r2, r4
 800ce32:	4638      	mov	r0, r7
 800ce34:	f7ff ff22 	bl	800cc7c <__multiply>
 800ce38:	4631      	mov	r1, r6
 800ce3a:	4680      	mov	r8, r0
 800ce3c:	4638      	mov	r0, r7
 800ce3e:	f7ff fe53 	bl	800cae8 <_Bfree>
 800ce42:	4646      	mov	r6, r8
 800ce44:	106d      	asrs	r5, r5, #1
 800ce46:	d00b      	beq.n	800ce60 <__pow5mult+0xa0>
 800ce48:	6820      	ldr	r0, [r4, #0]
 800ce4a:	b938      	cbnz	r0, 800ce5c <__pow5mult+0x9c>
 800ce4c:	4622      	mov	r2, r4
 800ce4e:	4621      	mov	r1, r4
 800ce50:	4638      	mov	r0, r7
 800ce52:	f7ff ff13 	bl	800cc7c <__multiply>
 800ce56:	6020      	str	r0, [r4, #0]
 800ce58:	f8c0 9000 	str.w	r9, [r0]
 800ce5c:	4604      	mov	r4, r0
 800ce5e:	e7e4      	b.n	800ce2a <__pow5mult+0x6a>
 800ce60:	4630      	mov	r0, r6
 800ce62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce66:	bf00      	nop
 800ce68:	0800e5c4 	.word	0x0800e5c4
 800ce6c:	0800e491 	.word	0x0800e491
 800ce70:	0800e511 	.word	0x0800e511

0800ce74 <__lshift>:
 800ce74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce78:	460c      	mov	r4, r1
 800ce7a:	6849      	ldr	r1, [r1, #4]
 800ce7c:	6923      	ldr	r3, [r4, #16]
 800ce7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ce82:	68a3      	ldr	r3, [r4, #8]
 800ce84:	4607      	mov	r7, r0
 800ce86:	4691      	mov	r9, r2
 800ce88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ce8c:	f108 0601 	add.w	r6, r8, #1
 800ce90:	42b3      	cmp	r3, r6
 800ce92:	db0b      	blt.n	800ceac <__lshift+0x38>
 800ce94:	4638      	mov	r0, r7
 800ce96:	f7ff fde7 	bl	800ca68 <_Balloc>
 800ce9a:	4605      	mov	r5, r0
 800ce9c:	b948      	cbnz	r0, 800ceb2 <__lshift+0x3e>
 800ce9e:	4602      	mov	r2, r0
 800cea0:	4b28      	ldr	r3, [pc, #160]	@ (800cf44 <__lshift+0xd0>)
 800cea2:	4829      	ldr	r0, [pc, #164]	@ (800cf48 <__lshift+0xd4>)
 800cea4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cea8:	f000 fb86 	bl	800d5b8 <__assert_func>
 800ceac:	3101      	adds	r1, #1
 800ceae:	005b      	lsls	r3, r3, #1
 800ceb0:	e7ee      	b.n	800ce90 <__lshift+0x1c>
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	f100 0114 	add.w	r1, r0, #20
 800ceb8:	f100 0210 	add.w	r2, r0, #16
 800cebc:	4618      	mov	r0, r3
 800cebe:	4553      	cmp	r3, sl
 800cec0:	db33      	blt.n	800cf2a <__lshift+0xb6>
 800cec2:	6920      	ldr	r0, [r4, #16]
 800cec4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cec8:	f104 0314 	add.w	r3, r4, #20
 800cecc:	f019 091f 	ands.w	r9, r9, #31
 800ced0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ced4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ced8:	d02b      	beq.n	800cf32 <__lshift+0xbe>
 800ceda:	f1c9 0e20 	rsb	lr, r9, #32
 800cede:	468a      	mov	sl, r1
 800cee0:	2200      	movs	r2, #0
 800cee2:	6818      	ldr	r0, [r3, #0]
 800cee4:	fa00 f009 	lsl.w	r0, r0, r9
 800cee8:	4310      	orrs	r0, r2
 800ceea:	f84a 0b04 	str.w	r0, [sl], #4
 800ceee:	f853 2b04 	ldr.w	r2, [r3], #4
 800cef2:	459c      	cmp	ip, r3
 800cef4:	fa22 f20e 	lsr.w	r2, r2, lr
 800cef8:	d8f3      	bhi.n	800cee2 <__lshift+0x6e>
 800cefa:	ebac 0304 	sub.w	r3, ip, r4
 800cefe:	3b15      	subs	r3, #21
 800cf00:	f023 0303 	bic.w	r3, r3, #3
 800cf04:	3304      	adds	r3, #4
 800cf06:	f104 0015 	add.w	r0, r4, #21
 800cf0a:	4560      	cmp	r0, ip
 800cf0c:	bf88      	it	hi
 800cf0e:	2304      	movhi	r3, #4
 800cf10:	50ca      	str	r2, [r1, r3]
 800cf12:	b10a      	cbz	r2, 800cf18 <__lshift+0xa4>
 800cf14:	f108 0602 	add.w	r6, r8, #2
 800cf18:	3e01      	subs	r6, #1
 800cf1a:	4638      	mov	r0, r7
 800cf1c:	612e      	str	r6, [r5, #16]
 800cf1e:	4621      	mov	r1, r4
 800cf20:	f7ff fde2 	bl	800cae8 <_Bfree>
 800cf24:	4628      	mov	r0, r5
 800cf26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf2a:	f842 0f04 	str.w	r0, [r2, #4]!
 800cf2e:	3301      	adds	r3, #1
 800cf30:	e7c5      	b.n	800cebe <__lshift+0x4a>
 800cf32:	3904      	subs	r1, #4
 800cf34:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf38:	f841 2f04 	str.w	r2, [r1, #4]!
 800cf3c:	459c      	cmp	ip, r3
 800cf3e:	d8f9      	bhi.n	800cf34 <__lshift+0xc0>
 800cf40:	e7ea      	b.n	800cf18 <__lshift+0xa4>
 800cf42:	bf00      	nop
 800cf44:	0800e500 	.word	0x0800e500
 800cf48:	0800e511 	.word	0x0800e511

0800cf4c <__mcmp>:
 800cf4c:	690a      	ldr	r2, [r1, #16]
 800cf4e:	4603      	mov	r3, r0
 800cf50:	6900      	ldr	r0, [r0, #16]
 800cf52:	1a80      	subs	r0, r0, r2
 800cf54:	b530      	push	{r4, r5, lr}
 800cf56:	d10e      	bne.n	800cf76 <__mcmp+0x2a>
 800cf58:	3314      	adds	r3, #20
 800cf5a:	3114      	adds	r1, #20
 800cf5c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cf60:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cf64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cf68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cf6c:	4295      	cmp	r5, r2
 800cf6e:	d003      	beq.n	800cf78 <__mcmp+0x2c>
 800cf70:	d205      	bcs.n	800cf7e <__mcmp+0x32>
 800cf72:	f04f 30ff 	mov.w	r0, #4294967295
 800cf76:	bd30      	pop	{r4, r5, pc}
 800cf78:	42a3      	cmp	r3, r4
 800cf7a:	d3f3      	bcc.n	800cf64 <__mcmp+0x18>
 800cf7c:	e7fb      	b.n	800cf76 <__mcmp+0x2a>
 800cf7e:	2001      	movs	r0, #1
 800cf80:	e7f9      	b.n	800cf76 <__mcmp+0x2a>
	...

0800cf84 <__mdiff>:
 800cf84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf88:	4689      	mov	r9, r1
 800cf8a:	4606      	mov	r6, r0
 800cf8c:	4611      	mov	r1, r2
 800cf8e:	4648      	mov	r0, r9
 800cf90:	4614      	mov	r4, r2
 800cf92:	f7ff ffdb 	bl	800cf4c <__mcmp>
 800cf96:	1e05      	subs	r5, r0, #0
 800cf98:	d112      	bne.n	800cfc0 <__mdiff+0x3c>
 800cf9a:	4629      	mov	r1, r5
 800cf9c:	4630      	mov	r0, r6
 800cf9e:	f7ff fd63 	bl	800ca68 <_Balloc>
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	b928      	cbnz	r0, 800cfb2 <__mdiff+0x2e>
 800cfa6:	4b3f      	ldr	r3, [pc, #252]	@ (800d0a4 <__mdiff+0x120>)
 800cfa8:	f240 2137 	movw	r1, #567	@ 0x237
 800cfac:	483e      	ldr	r0, [pc, #248]	@ (800d0a8 <__mdiff+0x124>)
 800cfae:	f000 fb03 	bl	800d5b8 <__assert_func>
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cfb8:	4610      	mov	r0, r2
 800cfba:	b003      	add	sp, #12
 800cfbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfc0:	bfbc      	itt	lt
 800cfc2:	464b      	movlt	r3, r9
 800cfc4:	46a1      	movlt	r9, r4
 800cfc6:	4630      	mov	r0, r6
 800cfc8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cfcc:	bfba      	itte	lt
 800cfce:	461c      	movlt	r4, r3
 800cfd0:	2501      	movlt	r5, #1
 800cfd2:	2500      	movge	r5, #0
 800cfd4:	f7ff fd48 	bl	800ca68 <_Balloc>
 800cfd8:	4602      	mov	r2, r0
 800cfda:	b918      	cbnz	r0, 800cfe4 <__mdiff+0x60>
 800cfdc:	4b31      	ldr	r3, [pc, #196]	@ (800d0a4 <__mdiff+0x120>)
 800cfde:	f240 2145 	movw	r1, #581	@ 0x245
 800cfe2:	e7e3      	b.n	800cfac <__mdiff+0x28>
 800cfe4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cfe8:	6926      	ldr	r6, [r4, #16]
 800cfea:	60c5      	str	r5, [r0, #12]
 800cfec:	f109 0310 	add.w	r3, r9, #16
 800cff0:	f109 0514 	add.w	r5, r9, #20
 800cff4:	f104 0e14 	add.w	lr, r4, #20
 800cff8:	f100 0b14 	add.w	fp, r0, #20
 800cffc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d000:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d004:	9301      	str	r3, [sp, #4]
 800d006:	46d9      	mov	r9, fp
 800d008:	f04f 0c00 	mov.w	ip, #0
 800d00c:	9b01      	ldr	r3, [sp, #4]
 800d00e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d012:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d016:	9301      	str	r3, [sp, #4]
 800d018:	fa1f f38a 	uxth.w	r3, sl
 800d01c:	4619      	mov	r1, r3
 800d01e:	b283      	uxth	r3, r0
 800d020:	1acb      	subs	r3, r1, r3
 800d022:	0c00      	lsrs	r0, r0, #16
 800d024:	4463      	add	r3, ip
 800d026:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d02a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d02e:	b29b      	uxth	r3, r3
 800d030:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d034:	4576      	cmp	r6, lr
 800d036:	f849 3b04 	str.w	r3, [r9], #4
 800d03a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d03e:	d8e5      	bhi.n	800d00c <__mdiff+0x88>
 800d040:	1b33      	subs	r3, r6, r4
 800d042:	3b15      	subs	r3, #21
 800d044:	f023 0303 	bic.w	r3, r3, #3
 800d048:	3415      	adds	r4, #21
 800d04a:	3304      	adds	r3, #4
 800d04c:	42a6      	cmp	r6, r4
 800d04e:	bf38      	it	cc
 800d050:	2304      	movcc	r3, #4
 800d052:	441d      	add	r5, r3
 800d054:	445b      	add	r3, fp
 800d056:	461e      	mov	r6, r3
 800d058:	462c      	mov	r4, r5
 800d05a:	4544      	cmp	r4, r8
 800d05c:	d30e      	bcc.n	800d07c <__mdiff+0xf8>
 800d05e:	f108 0103 	add.w	r1, r8, #3
 800d062:	1b49      	subs	r1, r1, r5
 800d064:	f021 0103 	bic.w	r1, r1, #3
 800d068:	3d03      	subs	r5, #3
 800d06a:	45a8      	cmp	r8, r5
 800d06c:	bf38      	it	cc
 800d06e:	2100      	movcc	r1, #0
 800d070:	440b      	add	r3, r1
 800d072:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d076:	b191      	cbz	r1, 800d09e <__mdiff+0x11a>
 800d078:	6117      	str	r7, [r2, #16]
 800d07a:	e79d      	b.n	800cfb8 <__mdiff+0x34>
 800d07c:	f854 1b04 	ldr.w	r1, [r4], #4
 800d080:	46e6      	mov	lr, ip
 800d082:	0c08      	lsrs	r0, r1, #16
 800d084:	fa1c fc81 	uxtah	ip, ip, r1
 800d088:	4471      	add	r1, lr
 800d08a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d08e:	b289      	uxth	r1, r1
 800d090:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d094:	f846 1b04 	str.w	r1, [r6], #4
 800d098:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d09c:	e7dd      	b.n	800d05a <__mdiff+0xd6>
 800d09e:	3f01      	subs	r7, #1
 800d0a0:	e7e7      	b.n	800d072 <__mdiff+0xee>
 800d0a2:	bf00      	nop
 800d0a4:	0800e500 	.word	0x0800e500
 800d0a8:	0800e511 	.word	0x0800e511

0800d0ac <__d2b>:
 800d0ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d0b0:	460f      	mov	r7, r1
 800d0b2:	2101      	movs	r1, #1
 800d0b4:	ec59 8b10 	vmov	r8, r9, d0
 800d0b8:	4616      	mov	r6, r2
 800d0ba:	f7ff fcd5 	bl	800ca68 <_Balloc>
 800d0be:	4604      	mov	r4, r0
 800d0c0:	b930      	cbnz	r0, 800d0d0 <__d2b+0x24>
 800d0c2:	4602      	mov	r2, r0
 800d0c4:	4b23      	ldr	r3, [pc, #140]	@ (800d154 <__d2b+0xa8>)
 800d0c6:	4824      	ldr	r0, [pc, #144]	@ (800d158 <__d2b+0xac>)
 800d0c8:	f240 310f 	movw	r1, #783	@ 0x30f
 800d0cc:	f000 fa74 	bl	800d5b8 <__assert_func>
 800d0d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d0d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d0d8:	b10d      	cbz	r5, 800d0de <__d2b+0x32>
 800d0da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d0de:	9301      	str	r3, [sp, #4]
 800d0e0:	f1b8 0300 	subs.w	r3, r8, #0
 800d0e4:	d023      	beq.n	800d12e <__d2b+0x82>
 800d0e6:	4668      	mov	r0, sp
 800d0e8:	9300      	str	r3, [sp, #0]
 800d0ea:	f7ff fd84 	bl	800cbf6 <__lo0bits>
 800d0ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d0f2:	b1d0      	cbz	r0, 800d12a <__d2b+0x7e>
 800d0f4:	f1c0 0320 	rsb	r3, r0, #32
 800d0f8:	fa02 f303 	lsl.w	r3, r2, r3
 800d0fc:	430b      	orrs	r3, r1
 800d0fe:	40c2      	lsrs	r2, r0
 800d100:	6163      	str	r3, [r4, #20]
 800d102:	9201      	str	r2, [sp, #4]
 800d104:	9b01      	ldr	r3, [sp, #4]
 800d106:	61a3      	str	r3, [r4, #24]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	bf0c      	ite	eq
 800d10c:	2201      	moveq	r2, #1
 800d10e:	2202      	movne	r2, #2
 800d110:	6122      	str	r2, [r4, #16]
 800d112:	b1a5      	cbz	r5, 800d13e <__d2b+0x92>
 800d114:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d118:	4405      	add	r5, r0
 800d11a:	603d      	str	r5, [r7, #0]
 800d11c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d120:	6030      	str	r0, [r6, #0]
 800d122:	4620      	mov	r0, r4
 800d124:	b003      	add	sp, #12
 800d126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d12a:	6161      	str	r1, [r4, #20]
 800d12c:	e7ea      	b.n	800d104 <__d2b+0x58>
 800d12e:	a801      	add	r0, sp, #4
 800d130:	f7ff fd61 	bl	800cbf6 <__lo0bits>
 800d134:	9b01      	ldr	r3, [sp, #4]
 800d136:	6163      	str	r3, [r4, #20]
 800d138:	3020      	adds	r0, #32
 800d13a:	2201      	movs	r2, #1
 800d13c:	e7e8      	b.n	800d110 <__d2b+0x64>
 800d13e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d142:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d146:	6038      	str	r0, [r7, #0]
 800d148:	6918      	ldr	r0, [r3, #16]
 800d14a:	f7ff fd35 	bl	800cbb8 <__hi0bits>
 800d14e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d152:	e7e5      	b.n	800d120 <__d2b+0x74>
 800d154:	0800e500 	.word	0x0800e500
 800d158:	0800e511 	.word	0x0800e511

0800d15c <__ssputs_r>:
 800d15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d160:	688e      	ldr	r6, [r1, #8]
 800d162:	461f      	mov	r7, r3
 800d164:	42be      	cmp	r6, r7
 800d166:	680b      	ldr	r3, [r1, #0]
 800d168:	4682      	mov	sl, r0
 800d16a:	460c      	mov	r4, r1
 800d16c:	4690      	mov	r8, r2
 800d16e:	d82d      	bhi.n	800d1cc <__ssputs_r+0x70>
 800d170:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d174:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d178:	d026      	beq.n	800d1c8 <__ssputs_r+0x6c>
 800d17a:	6965      	ldr	r5, [r4, #20]
 800d17c:	6909      	ldr	r1, [r1, #16]
 800d17e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d182:	eba3 0901 	sub.w	r9, r3, r1
 800d186:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d18a:	1c7b      	adds	r3, r7, #1
 800d18c:	444b      	add	r3, r9
 800d18e:	106d      	asrs	r5, r5, #1
 800d190:	429d      	cmp	r5, r3
 800d192:	bf38      	it	cc
 800d194:	461d      	movcc	r5, r3
 800d196:	0553      	lsls	r3, r2, #21
 800d198:	d527      	bpl.n	800d1ea <__ssputs_r+0x8e>
 800d19a:	4629      	mov	r1, r5
 800d19c:	f7ff fbd8 	bl	800c950 <_malloc_r>
 800d1a0:	4606      	mov	r6, r0
 800d1a2:	b360      	cbz	r0, 800d1fe <__ssputs_r+0xa2>
 800d1a4:	6921      	ldr	r1, [r4, #16]
 800d1a6:	464a      	mov	r2, r9
 800d1a8:	f7fe fcf7 	bl	800bb9a <memcpy>
 800d1ac:	89a3      	ldrh	r3, [r4, #12]
 800d1ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d1b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1b6:	81a3      	strh	r3, [r4, #12]
 800d1b8:	6126      	str	r6, [r4, #16]
 800d1ba:	6165      	str	r5, [r4, #20]
 800d1bc:	444e      	add	r6, r9
 800d1be:	eba5 0509 	sub.w	r5, r5, r9
 800d1c2:	6026      	str	r6, [r4, #0]
 800d1c4:	60a5      	str	r5, [r4, #8]
 800d1c6:	463e      	mov	r6, r7
 800d1c8:	42be      	cmp	r6, r7
 800d1ca:	d900      	bls.n	800d1ce <__ssputs_r+0x72>
 800d1cc:	463e      	mov	r6, r7
 800d1ce:	6820      	ldr	r0, [r4, #0]
 800d1d0:	4632      	mov	r2, r6
 800d1d2:	4641      	mov	r1, r8
 800d1d4:	f000 f9c6 	bl	800d564 <memmove>
 800d1d8:	68a3      	ldr	r3, [r4, #8]
 800d1da:	1b9b      	subs	r3, r3, r6
 800d1dc:	60a3      	str	r3, [r4, #8]
 800d1de:	6823      	ldr	r3, [r4, #0]
 800d1e0:	4433      	add	r3, r6
 800d1e2:	6023      	str	r3, [r4, #0]
 800d1e4:	2000      	movs	r0, #0
 800d1e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1ea:	462a      	mov	r2, r5
 800d1ec:	f000 fa28 	bl	800d640 <_realloc_r>
 800d1f0:	4606      	mov	r6, r0
 800d1f2:	2800      	cmp	r0, #0
 800d1f4:	d1e0      	bne.n	800d1b8 <__ssputs_r+0x5c>
 800d1f6:	6921      	ldr	r1, [r4, #16]
 800d1f8:	4650      	mov	r0, sl
 800d1fa:	f7ff fb35 	bl	800c868 <_free_r>
 800d1fe:	230c      	movs	r3, #12
 800d200:	f8ca 3000 	str.w	r3, [sl]
 800d204:	89a3      	ldrh	r3, [r4, #12]
 800d206:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d20a:	81a3      	strh	r3, [r4, #12]
 800d20c:	f04f 30ff 	mov.w	r0, #4294967295
 800d210:	e7e9      	b.n	800d1e6 <__ssputs_r+0x8a>
	...

0800d214 <_svfiprintf_r>:
 800d214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d218:	4698      	mov	r8, r3
 800d21a:	898b      	ldrh	r3, [r1, #12]
 800d21c:	061b      	lsls	r3, r3, #24
 800d21e:	b09d      	sub	sp, #116	@ 0x74
 800d220:	4607      	mov	r7, r0
 800d222:	460d      	mov	r5, r1
 800d224:	4614      	mov	r4, r2
 800d226:	d510      	bpl.n	800d24a <_svfiprintf_r+0x36>
 800d228:	690b      	ldr	r3, [r1, #16]
 800d22a:	b973      	cbnz	r3, 800d24a <_svfiprintf_r+0x36>
 800d22c:	2140      	movs	r1, #64	@ 0x40
 800d22e:	f7ff fb8f 	bl	800c950 <_malloc_r>
 800d232:	6028      	str	r0, [r5, #0]
 800d234:	6128      	str	r0, [r5, #16]
 800d236:	b930      	cbnz	r0, 800d246 <_svfiprintf_r+0x32>
 800d238:	230c      	movs	r3, #12
 800d23a:	603b      	str	r3, [r7, #0]
 800d23c:	f04f 30ff 	mov.w	r0, #4294967295
 800d240:	b01d      	add	sp, #116	@ 0x74
 800d242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d246:	2340      	movs	r3, #64	@ 0x40
 800d248:	616b      	str	r3, [r5, #20]
 800d24a:	2300      	movs	r3, #0
 800d24c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d24e:	2320      	movs	r3, #32
 800d250:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d254:	f8cd 800c 	str.w	r8, [sp, #12]
 800d258:	2330      	movs	r3, #48	@ 0x30
 800d25a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d3f8 <_svfiprintf_r+0x1e4>
 800d25e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d262:	f04f 0901 	mov.w	r9, #1
 800d266:	4623      	mov	r3, r4
 800d268:	469a      	mov	sl, r3
 800d26a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d26e:	b10a      	cbz	r2, 800d274 <_svfiprintf_r+0x60>
 800d270:	2a25      	cmp	r2, #37	@ 0x25
 800d272:	d1f9      	bne.n	800d268 <_svfiprintf_r+0x54>
 800d274:	ebba 0b04 	subs.w	fp, sl, r4
 800d278:	d00b      	beq.n	800d292 <_svfiprintf_r+0x7e>
 800d27a:	465b      	mov	r3, fp
 800d27c:	4622      	mov	r2, r4
 800d27e:	4629      	mov	r1, r5
 800d280:	4638      	mov	r0, r7
 800d282:	f7ff ff6b 	bl	800d15c <__ssputs_r>
 800d286:	3001      	adds	r0, #1
 800d288:	f000 80a7 	beq.w	800d3da <_svfiprintf_r+0x1c6>
 800d28c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d28e:	445a      	add	r2, fp
 800d290:	9209      	str	r2, [sp, #36]	@ 0x24
 800d292:	f89a 3000 	ldrb.w	r3, [sl]
 800d296:	2b00      	cmp	r3, #0
 800d298:	f000 809f 	beq.w	800d3da <_svfiprintf_r+0x1c6>
 800d29c:	2300      	movs	r3, #0
 800d29e:	f04f 32ff 	mov.w	r2, #4294967295
 800d2a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2a6:	f10a 0a01 	add.w	sl, sl, #1
 800d2aa:	9304      	str	r3, [sp, #16]
 800d2ac:	9307      	str	r3, [sp, #28]
 800d2ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d2b2:	931a      	str	r3, [sp, #104]	@ 0x68
 800d2b4:	4654      	mov	r4, sl
 800d2b6:	2205      	movs	r2, #5
 800d2b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2bc:	484e      	ldr	r0, [pc, #312]	@ (800d3f8 <_svfiprintf_r+0x1e4>)
 800d2be:	f7f2 ff8f 	bl	80001e0 <memchr>
 800d2c2:	9a04      	ldr	r2, [sp, #16]
 800d2c4:	b9d8      	cbnz	r0, 800d2fe <_svfiprintf_r+0xea>
 800d2c6:	06d0      	lsls	r0, r2, #27
 800d2c8:	bf44      	itt	mi
 800d2ca:	2320      	movmi	r3, #32
 800d2cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d2d0:	0711      	lsls	r1, r2, #28
 800d2d2:	bf44      	itt	mi
 800d2d4:	232b      	movmi	r3, #43	@ 0x2b
 800d2d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d2da:	f89a 3000 	ldrb.w	r3, [sl]
 800d2de:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2e0:	d015      	beq.n	800d30e <_svfiprintf_r+0xfa>
 800d2e2:	9a07      	ldr	r2, [sp, #28]
 800d2e4:	4654      	mov	r4, sl
 800d2e6:	2000      	movs	r0, #0
 800d2e8:	f04f 0c0a 	mov.w	ip, #10
 800d2ec:	4621      	mov	r1, r4
 800d2ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2f2:	3b30      	subs	r3, #48	@ 0x30
 800d2f4:	2b09      	cmp	r3, #9
 800d2f6:	d94b      	bls.n	800d390 <_svfiprintf_r+0x17c>
 800d2f8:	b1b0      	cbz	r0, 800d328 <_svfiprintf_r+0x114>
 800d2fa:	9207      	str	r2, [sp, #28]
 800d2fc:	e014      	b.n	800d328 <_svfiprintf_r+0x114>
 800d2fe:	eba0 0308 	sub.w	r3, r0, r8
 800d302:	fa09 f303 	lsl.w	r3, r9, r3
 800d306:	4313      	orrs	r3, r2
 800d308:	9304      	str	r3, [sp, #16]
 800d30a:	46a2      	mov	sl, r4
 800d30c:	e7d2      	b.n	800d2b4 <_svfiprintf_r+0xa0>
 800d30e:	9b03      	ldr	r3, [sp, #12]
 800d310:	1d19      	adds	r1, r3, #4
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	9103      	str	r1, [sp, #12]
 800d316:	2b00      	cmp	r3, #0
 800d318:	bfbb      	ittet	lt
 800d31a:	425b      	neglt	r3, r3
 800d31c:	f042 0202 	orrlt.w	r2, r2, #2
 800d320:	9307      	strge	r3, [sp, #28]
 800d322:	9307      	strlt	r3, [sp, #28]
 800d324:	bfb8      	it	lt
 800d326:	9204      	strlt	r2, [sp, #16]
 800d328:	7823      	ldrb	r3, [r4, #0]
 800d32a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d32c:	d10a      	bne.n	800d344 <_svfiprintf_r+0x130>
 800d32e:	7863      	ldrb	r3, [r4, #1]
 800d330:	2b2a      	cmp	r3, #42	@ 0x2a
 800d332:	d132      	bne.n	800d39a <_svfiprintf_r+0x186>
 800d334:	9b03      	ldr	r3, [sp, #12]
 800d336:	1d1a      	adds	r2, r3, #4
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	9203      	str	r2, [sp, #12]
 800d33c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d340:	3402      	adds	r4, #2
 800d342:	9305      	str	r3, [sp, #20]
 800d344:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d408 <_svfiprintf_r+0x1f4>
 800d348:	7821      	ldrb	r1, [r4, #0]
 800d34a:	2203      	movs	r2, #3
 800d34c:	4650      	mov	r0, sl
 800d34e:	f7f2 ff47 	bl	80001e0 <memchr>
 800d352:	b138      	cbz	r0, 800d364 <_svfiprintf_r+0x150>
 800d354:	9b04      	ldr	r3, [sp, #16]
 800d356:	eba0 000a 	sub.w	r0, r0, sl
 800d35a:	2240      	movs	r2, #64	@ 0x40
 800d35c:	4082      	lsls	r2, r0
 800d35e:	4313      	orrs	r3, r2
 800d360:	3401      	adds	r4, #1
 800d362:	9304      	str	r3, [sp, #16]
 800d364:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d368:	4824      	ldr	r0, [pc, #144]	@ (800d3fc <_svfiprintf_r+0x1e8>)
 800d36a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d36e:	2206      	movs	r2, #6
 800d370:	f7f2 ff36 	bl	80001e0 <memchr>
 800d374:	2800      	cmp	r0, #0
 800d376:	d036      	beq.n	800d3e6 <_svfiprintf_r+0x1d2>
 800d378:	4b21      	ldr	r3, [pc, #132]	@ (800d400 <_svfiprintf_r+0x1ec>)
 800d37a:	bb1b      	cbnz	r3, 800d3c4 <_svfiprintf_r+0x1b0>
 800d37c:	9b03      	ldr	r3, [sp, #12]
 800d37e:	3307      	adds	r3, #7
 800d380:	f023 0307 	bic.w	r3, r3, #7
 800d384:	3308      	adds	r3, #8
 800d386:	9303      	str	r3, [sp, #12]
 800d388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d38a:	4433      	add	r3, r6
 800d38c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d38e:	e76a      	b.n	800d266 <_svfiprintf_r+0x52>
 800d390:	fb0c 3202 	mla	r2, ip, r2, r3
 800d394:	460c      	mov	r4, r1
 800d396:	2001      	movs	r0, #1
 800d398:	e7a8      	b.n	800d2ec <_svfiprintf_r+0xd8>
 800d39a:	2300      	movs	r3, #0
 800d39c:	3401      	adds	r4, #1
 800d39e:	9305      	str	r3, [sp, #20]
 800d3a0:	4619      	mov	r1, r3
 800d3a2:	f04f 0c0a 	mov.w	ip, #10
 800d3a6:	4620      	mov	r0, r4
 800d3a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3ac:	3a30      	subs	r2, #48	@ 0x30
 800d3ae:	2a09      	cmp	r2, #9
 800d3b0:	d903      	bls.n	800d3ba <_svfiprintf_r+0x1a6>
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d0c6      	beq.n	800d344 <_svfiprintf_r+0x130>
 800d3b6:	9105      	str	r1, [sp, #20]
 800d3b8:	e7c4      	b.n	800d344 <_svfiprintf_r+0x130>
 800d3ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3be:	4604      	mov	r4, r0
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	e7f0      	b.n	800d3a6 <_svfiprintf_r+0x192>
 800d3c4:	ab03      	add	r3, sp, #12
 800d3c6:	9300      	str	r3, [sp, #0]
 800d3c8:	462a      	mov	r2, r5
 800d3ca:	4b0e      	ldr	r3, [pc, #56]	@ (800d404 <_svfiprintf_r+0x1f0>)
 800d3cc:	a904      	add	r1, sp, #16
 800d3ce:	4638      	mov	r0, r7
 800d3d0:	f7fd fe72 	bl	800b0b8 <_printf_float>
 800d3d4:	1c42      	adds	r2, r0, #1
 800d3d6:	4606      	mov	r6, r0
 800d3d8:	d1d6      	bne.n	800d388 <_svfiprintf_r+0x174>
 800d3da:	89ab      	ldrh	r3, [r5, #12]
 800d3dc:	065b      	lsls	r3, r3, #25
 800d3de:	f53f af2d 	bmi.w	800d23c <_svfiprintf_r+0x28>
 800d3e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d3e4:	e72c      	b.n	800d240 <_svfiprintf_r+0x2c>
 800d3e6:	ab03      	add	r3, sp, #12
 800d3e8:	9300      	str	r3, [sp, #0]
 800d3ea:	462a      	mov	r2, r5
 800d3ec:	4b05      	ldr	r3, [pc, #20]	@ (800d404 <_svfiprintf_r+0x1f0>)
 800d3ee:	a904      	add	r1, sp, #16
 800d3f0:	4638      	mov	r0, r7
 800d3f2:	f7fe f8f9 	bl	800b5e8 <_printf_i>
 800d3f6:	e7ed      	b.n	800d3d4 <_svfiprintf_r+0x1c0>
 800d3f8:	0800e56a 	.word	0x0800e56a
 800d3fc:	0800e574 	.word	0x0800e574
 800d400:	0800b0b9 	.word	0x0800b0b9
 800d404:	0800d15d 	.word	0x0800d15d
 800d408:	0800e570 	.word	0x0800e570

0800d40c <__sflush_r>:
 800d40c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d414:	0716      	lsls	r6, r2, #28
 800d416:	4605      	mov	r5, r0
 800d418:	460c      	mov	r4, r1
 800d41a:	d454      	bmi.n	800d4c6 <__sflush_r+0xba>
 800d41c:	684b      	ldr	r3, [r1, #4]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	dc02      	bgt.n	800d428 <__sflush_r+0x1c>
 800d422:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d424:	2b00      	cmp	r3, #0
 800d426:	dd48      	ble.n	800d4ba <__sflush_r+0xae>
 800d428:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d42a:	2e00      	cmp	r6, #0
 800d42c:	d045      	beq.n	800d4ba <__sflush_r+0xae>
 800d42e:	2300      	movs	r3, #0
 800d430:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d434:	682f      	ldr	r7, [r5, #0]
 800d436:	6a21      	ldr	r1, [r4, #32]
 800d438:	602b      	str	r3, [r5, #0]
 800d43a:	d030      	beq.n	800d49e <__sflush_r+0x92>
 800d43c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d43e:	89a3      	ldrh	r3, [r4, #12]
 800d440:	0759      	lsls	r1, r3, #29
 800d442:	d505      	bpl.n	800d450 <__sflush_r+0x44>
 800d444:	6863      	ldr	r3, [r4, #4]
 800d446:	1ad2      	subs	r2, r2, r3
 800d448:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d44a:	b10b      	cbz	r3, 800d450 <__sflush_r+0x44>
 800d44c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d44e:	1ad2      	subs	r2, r2, r3
 800d450:	2300      	movs	r3, #0
 800d452:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d454:	6a21      	ldr	r1, [r4, #32]
 800d456:	4628      	mov	r0, r5
 800d458:	47b0      	blx	r6
 800d45a:	1c43      	adds	r3, r0, #1
 800d45c:	89a3      	ldrh	r3, [r4, #12]
 800d45e:	d106      	bne.n	800d46e <__sflush_r+0x62>
 800d460:	6829      	ldr	r1, [r5, #0]
 800d462:	291d      	cmp	r1, #29
 800d464:	d82b      	bhi.n	800d4be <__sflush_r+0xb2>
 800d466:	4a2a      	ldr	r2, [pc, #168]	@ (800d510 <__sflush_r+0x104>)
 800d468:	40ca      	lsrs	r2, r1
 800d46a:	07d6      	lsls	r6, r2, #31
 800d46c:	d527      	bpl.n	800d4be <__sflush_r+0xb2>
 800d46e:	2200      	movs	r2, #0
 800d470:	6062      	str	r2, [r4, #4]
 800d472:	04d9      	lsls	r1, r3, #19
 800d474:	6922      	ldr	r2, [r4, #16]
 800d476:	6022      	str	r2, [r4, #0]
 800d478:	d504      	bpl.n	800d484 <__sflush_r+0x78>
 800d47a:	1c42      	adds	r2, r0, #1
 800d47c:	d101      	bne.n	800d482 <__sflush_r+0x76>
 800d47e:	682b      	ldr	r3, [r5, #0]
 800d480:	b903      	cbnz	r3, 800d484 <__sflush_r+0x78>
 800d482:	6560      	str	r0, [r4, #84]	@ 0x54
 800d484:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d486:	602f      	str	r7, [r5, #0]
 800d488:	b1b9      	cbz	r1, 800d4ba <__sflush_r+0xae>
 800d48a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d48e:	4299      	cmp	r1, r3
 800d490:	d002      	beq.n	800d498 <__sflush_r+0x8c>
 800d492:	4628      	mov	r0, r5
 800d494:	f7ff f9e8 	bl	800c868 <_free_r>
 800d498:	2300      	movs	r3, #0
 800d49a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d49c:	e00d      	b.n	800d4ba <__sflush_r+0xae>
 800d49e:	2301      	movs	r3, #1
 800d4a0:	4628      	mov	r0, r5
 800d4a2:	47b0      	blx	r6
 800d4a4:	4602      	mov	r2, r0
 800d4a6:	1c50      	adds	r0, r2, #1
 800d4a8:	d1c9      	bne.n	800d43e <__sflush_r+0x32>
 800d4aa:	682b      	ldr	r3, [r5, #0]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d0c6      	beq.n	800d43e <__sflush_r+0x32>
 800d4b0:	2b1d      	cmp	r3, #29
 800d4b2:	d001      	beq.n	800d4b8 <__sflush_r+0xac>
 800d4b4:	2b16      	cmp	r3, #22
 800d4b6:	d11e      	bne.n	800d4f6 <__sflush_r+0xea>
 800d4b8:	602f      	str	r7, [r5, #0]
 800d4ba:	2000      	movs	r0, #0
 800d4bc:	e022      	b.n	800d504 <__sflush_r+0xf8>
 800d4be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4c2:	b21b      	sxth	r3, r3
 800d4c4:	e01b      	b.n	800d4fe <__sflush_r+0xf2>
 800d4c6:	690f      	ldr	r7, [r1, #16]
 800d4c8:	2f00      	cmp	r7, #0
 800d4ca:	d0f6      	beq.n	800d4ba <__sflush_r+0xae>
 800d4cc:	0793      	lsls	r3, r2, #30
 800d4ce:	680e      	ldr	r6, [r1, #0]
 800d4d0:	bf08      	it	eq
 800d4d2:	694b      	ldreq	r3, [r1, #20]
 800d4d4:	600f      	str	r7, [r1, #0]
 800d4d6:	bf18      	it	ne
 800d4d8:	2300      	movne	r3, #0
 800d4da:	eba6 0807 	sub.w	r8, r6, r7
 800d4de:	608b      	str	r3, [r1, #8]
 800d4e0:	f1b8 0f00 	cmp.w	r8, #0
 800d4e4:	dde9      	ble.n	800d4ba <__sflush_r+0xae>
 800d4e6:	6a21      	ldr	r1, [r4, #32]
 800d4e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d4ea:	4643      	mov	r3, r8
 800d4ec:	463a      	mov	r2, r7
 800d4ee:	4628      	mov	r0, r5
 800d4f0:	47b0      	blx	r6
 800d4f2:	2800      	cmp	r0, #0
 800d4f4:	dc08      	bgt.n	800d508 <__sflush_r+0xfc>
 800d4f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4fe:	81a3      	strh	r3, [r4, #12]
 800d500:	f04f 30ff 	mov.w	r0, #4294967295
 800d504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d508:	4407      	add	r7, r0
 800d50a:	eba8 0800 	sub.w	r8, r8, r0
 800d50e:	e7e7      	b.n	800d4e0 <__sflush_r+0xd4>
 800d510:	20400001 	.word	0x20400001

0800d514 <_fflush_r>:
 800d514:	b538      	push	{r3, r4, r5, lr}
 800d516:	690b      	ldr	r3, [r1, #16]
 800d518:	4605      	mov	r5, r0
 800d51a:	460c      	mov	r4, r1
 800d51c:	b913      	cbnz	r3, 800d524 <_fflush_r+0x10>
 800d51e:	2500      	movs	r5, #0
 800d520:	4628      	mov	r0, r5
 800d522:	bd38      	pop	{r3, r4, r5, pc}
 800d524:	b118      	cbz	r0, 800d52e <_fflush_r+0x1a>
 800d526:	6a03      	ldr	r3, [r0, #32]
 800d528:	b90b      	cbnz	r3, 800d52e <_fflush_r+0x1a>
 800d52a:	f7fe fa07 	bl	800b93c <__sinit>
 800d52e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d0f3      	beq.n	800d51e <_fflush_r+0xa>
 800d536:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d538:	07d0      	lsls	r0, r2, #31
 800d53a:	d404      	bmi.n	800d546 <_fflush_r+0x32>
 800d53c:	0599      	lsls	r1, r3, #22
 800d53e:	d402      	bmi.n	800d546 <_fflush_r+0x32>
 800d540:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d542:	f7fe fb28 	bl	800bb96 <__retarget_lock_acquire_recursive>
 800d546:	4628      	mov	r0, r5
 800d548:	4621      	mov	r1, r4
 800d54a:	f7ff ff5f 	bl	800d40c <__sflush_r>
 800d54e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d550:	07da      	lsls	r2, r3, #31
 800d552:	4605      	mov	r5, r0
 800d554:	d4e4      	bmi.n	800d520 <_fflush_r+0xc>
 800d556:	89a3      	ldrh	r3, [r4, #12]
 800d558:	059b      	lsls	r3, r3, #22
 800d55a:	d4e1      	bmi.n	800d520 <_fflush_r+0xc>
 800d55c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d55e:	f7fe fb1b 	bl	800bb98 <__retarget_lock_release_recursive>
 800d562:	e7dd      	b.n	800d520 <_fflush_r+0xc>

0800d564 <memmove>:
 800d564:	4288      	cmp	r0, r1
 800d566:	b510      	push	{r4, lr}
 800d568:	eb01 0402 	add.w	r4, r1, r2
 800d56c:	d902      	bls.n	800d574 <memmove+0x10>
 800d56e:	4284      	cmp	r4, r0
 800d570:	4623      	mov	r3, r4
 800d572:	d807      	bhi.n	800d584 <memmove+0x20>
 800d574:	1e43      	subs	r3, r0, #1
 800d576:	42a1      	cmp	r1, r4
 800d578:	d008      	beq.n	800d58c <memmove+0x28>
 800d57a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d57e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d582:	e7f8      	b.n	800d576 <memmove+0x12>
 800d584:	4402      	add	r2, r0
 800d586:	4601      	mov	r1, r0
 800d588:	428a      	cmp	r2, r1
 800d58a:	d100      	bne.n	800d58e <memmove+0x2a>
 800d58c:	bd10      	pop	{r4, pc}
 800d58e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d592:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d596:	e7f7      	b.n	800d588 <memmove+0x24>

0800d598 <_sbrk_r>:
 800d598:	b538      	push	{r3, r4, r5, lr}
 800d59a:	4d06      	ldr	r5, [pc, #24]	@ (800d5b4 <_sbrk_r+0x1c>)
 800d59c:	2300      	movs	r3, #0
 800d59e:	4604      	mov	r4, r0
 800d5a0:	4608      	mov	r0, r1
 800d5a2:	602b      	str	r3, [r5, #0]
 800d5a4:	f7f4 fc4c 	bl	8001e40 <_sbrk>
 800d5a8:	1c43      	adds	r3, r0, #1
 800d5aa:	d102      	bne.n	800d5b2 <_sbrk_r+0x1a>
 800d5ac:	682b      	ldr	r3, [r5, #0]
 800d5ae:	b103      	cbz	r3, 800d5b2 <_sbrk_r+0x1a>
 800d5b0:	6023      	str	r3, [r4, #0]
 800d5b2:	bd38      	pop	{r3, r4, r5, pc}
 800d5b4:	20006004 	.word	0x20006004

0800d5b8 <__assert_func>:
 800d5b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d5ba:	4614      	mov	r4, r2
 800d5bc:	461a      	mov	r2, r3
 800d5be:	4b09      	ldr	r3, [pc, #36]	@ (800d5e4 <__assert_func+0x2c>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	4605      	mov	r5, r0
 800d5c4:	68d8      	ldr	r0, [r3, #12]
 800d5c6:	b14c      	cbz	r4, 800d5dc <__assert_func+0x24>
 800d5c8:	4b07      	ldr	r3, [pc, #28]	@ (800d5e8 <__assert_func+0x30>)
 800d5ca:	9100      	str	r1, [sp, #0]
 800d5cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d5d0:	4906      	ldr	r1, [pc, #24]	@ (800d5ec <__assert_func+0x34>)
 800d5d2:	462b      	mov	r3, r5
 800d5d4:	f000 f870 	bl	800d6b8 <fiprintf>
 800d5d8:	f000 f880 	bl	800d6dc <abort>
 800d5dc:	4b04      	ldr	r3, [pc, #16]	@ (800d5f0 <__assert_func+0x38>)
 800d5de:	461c      	mov	r4, r3
 800d5e0:	e7f3      	b.n	800d5ca <__assert_func+0x12>
 800d5e2:	bf00      	nop
 800d5e4:	2000019c 	.word	0x2000019c
 800d5e8:	0800e585 	.word	0x0800e585
 800d5ec:	0800e592 	.word	0x0800e592
 800d5f0:	0800e5c0 	.word	0x0800e5c0

0800d5f4 <_calloc_r>:
 800d5f4:	b570      	push	{r4, r5, r6, lr}
 800d5f6:	fba1 5402 	umull	r5, r4, r1, r2
 800d5fa:	b934      	cbnz	r4, 800d60a <_calloc_r+0x16>
 800d5fc:	4629      	mov	r1, r5
 800d5fe:	f7ff f9a7 	bl	800c950 <_malloc_r>
 800d602:	4606      	mov	r6, r0
 800d604:	b928      	cbnz	r0, 800d612 <_calloc_r+0x1e>
 800d606:	4630      	mov	r0, r6
 800d608:	bd70      	pop	{r4, r5, r6, pc}
 800d60a:	220c      	movs	r2, #12
 800d60c:	6002      	str	r2, [r0, #0]
 800d60e:	2600      	movs	r6, #0
 800d610:	e7f9      	b.n	800d606 <_calloc_r+0x12>
 800d612:	462a      	mov	r2, r5
 800d614:	4621      	mov	r1, r4
 800d616:	f7fe fa40 	bl	800ba9a <memset>
 800d61a:	e7f4      	b.n	800d606 <_calloc_r+0x12>

0800d61c <__ascii_mbtowc>:
 800d61c:	b082      	sub	sp, #8
 800d61e:	b901      	cbnz	r1, 800d622 <__ascii_mbtowc+0x6>
 800d620:	a901      	add	r1, sp, #4
 800d622:	b142      	cbz	r2, 800d636 <__ascii_mbtowc+0x1a>
 800d624:	b14b      	cbz	r3, 800d63a <__ascii_mbtowc+0x1e>
 800d626:	7813      	ldrb	r3, [r2, #0]
 800d628:	600b      	str	r3, [r1, #0]
 800d62a:	7812      	ldrb	r2, [r2, #0]
 800d62c:	1e10      	subs	r0, r2, #0
 800d62e:	bf18      	it	ne
 800d630:	2001      	movne	r0, #1
 800d632:	b002      	add	sp, #8
 800d634:	4770      	bx	lr
 800d636:	4610      	mov	r0, r2
 800d638:	e7fb      	b.n	800d632 <__ascii_mbtowc+0x16>
 800d63a:	f06f 0001 	mvn.w	r0, #1
 800d63e:	e7f8      	b.n	800d632 <__ascii_mbtowc+0x16>

0800d640 <_realloc_r>:
 800d640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d644:	4607      	mov	r7, r0
 800d646:	4614      	mov	r4, r2
 800d648:	460d      	mov	r5, r1
 800d64a:	b921      	cbnz	r1, 800d656 <_realloc_r+0x16>
 800d64c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d650:	4611      	mov	r1, r2
 800d652:	f7ff b97d 	b.w	800c950 <_malloc_r>
 800d656:	b92a      	cbnz	r2, 800d664 <_realloc_r+0x24>
 800d658:	f7ff f906 	bl	800c868 <_free_r>
 800d65c:	4625      	mov	r5, r4
 800d65e:	4628      	mov	r0, r5
 800d660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d664:	f000 f841 	bl	800d6ea <_malloc_usable_size_r>
 800d668:	4284      	cmp	r4, r0
 800d66a:	4606      	mov	r6, r0
 800d66c:	d802      	bhi.n	800d674 <_realloc_r+0x34>
 800d66e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d672:	d8f4      	bhi.n	800d65e <_realloc_r+0x1e>
 800d674:	4621      	mov	r1, r4
 800d676:	4638      	mov	r0, r7
 800d678:	f7ff f96a 	bl	800c950 <_malloc_r>
 800d67c:	4680      	mov	r8, r0
 800d67e:	b908      	cbnz	r0, 800d684 <_realloc_r+0x44>
 800d680:	4645      	mov	r5, r8
 800d682:	e7ec      	b.n	800d65e <_realloc_r+0x1e>
 800d684:	42b4      	cmp	r4, r6
 800d686:	4622      	mov	r2, r4
 800d688:	4629      	mov	r1, r5
 800d68a:	bf28      	it	cs
 800d68c:	4632      	movcs	r2, r6
 800d68e:	f7fe fa84 	bl	800bb9a <memcpy>
 800d692:	4629      	mov	r1, r5
 800d694:	4638      	mov	r0, r7
 800d696:	f7ff f8e7 	bl	800c868 <_free_r>
 800d69a:	e7f1      	b.n	800d680 <_realloc_r+0x40>

0800d69c <__ascii_wctomb>:
 800d69c:	4603      	mov	r3, r0
 800d69e:	4608      	mov	r0, r1
 800d6a0:	b141      	cbz	r1, 800d6b4 <__ascii_wctomb+0x18>
 800d6a2:	2aff      	cmp	r2, #255	@ 0xff
 800d6a4:	d904      	bls.n	800d6b0 <__ascii_wctomb+0x14>
 800d6a6:	228a      	movs	r2, #138	@ 0x8a
 800d6a8:	601a      	str	r2, [r3, #0]
 800d6aa:	f04f 30ff 	mov.w	r0, #4294967295
 800d6ae:	4770      	bx	lr
 800d6b0:	700a      	strb	r2, [r1, #0]
 800d6b2:	2001      	movs	r0, #1
 800d6b4:	4770      	bx	lr
	...

0800d6b8 <fiprintf>:
 800d6b8:	b40e      	push	{r1, r2, r3}
 800d6ba:	b503      	push	{r0, r1, lr}
 800d6bc:	4601      	mov	r1, r0
 800d6be:	ab03      	add	r3, sp, #12
 800d6c0:	4805      	ldr	r0, [pc, #20]	@ (800d6d8 <fiprintf+0x20>)
 800d6c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6c6:	6800      	ldr	r0, [r0, #0]
 800d6c8:	9301      	str	r3, [sp, #4]
 800d6ca:	f000 f83f 	bl	800d74c <_vfiprintf_r>
 800d6ce:	b002      	add	sp, #8
 800d6d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6d4:	b003      	add	sp, #12
 800d6d6:	4770      	bx	lr
 800d6d8:	2000019c 	.word	0x2000019c

0800d6dc <abort>:
 800d6dc:	b508      	push	{r3, lr}
 800d6de:	2006      	movs	r0, #6
 800d6e0:	f000 fa08 	bl	800daf4 <raise>
 800d6e4:	2001      	movs	r0, #1
 800d6e6:	f7f4 fb33 	bl	8001d50 <_exit>

0800d6ea <_malloc_usable_size_r>:
 800d6ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6ee:	1f18      	subs	r0, r3, #4
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	bfbc      	itt	lt
 800d6f4:	580b      	ldrlt	r3, [r1, r0]
 800d6f6:	18c0      	addlt	r0, r0, r3
 800d6f8:	4770      	bx	lr

0800d6fa <__sfputc_r>:
 800d6fa:	6893      	ldr	r3, [r2, #8]
 800d6fc:	3b01      	subs	r3, #1
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	b410      	push	{r4}
 800d702:	6093      	str	r3, [r2, #8]
 800d704:	da08      	bge.n	800d718 <__sfputc_r+0x1e>
 800d706:	6994      	ldr	r4, [r2, #24]
 800d708:	42a3      	cmp	r3, r4
 800d70a:	db01      	blt.n	800d710 <__sfputc_r+0x16>
 800d70c:	290a      	cmp	r1, #10
 800d70e:	d103      	bne.n	800d718 <__sfputc_r+0x1e>
 800d710:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d714:	f000 b932 	b.w	800d97c <__swbuf_r>
 800d718:	6813      	ldr	r3, [r2, #0]
 800d71a:	1c58      	adds	r0, r3, #1
 800d71c:	6010      	str	r0, [r2, #0]
 800d71e:	7019      	strb	r1, [r3, #0]
 800d720:	4608      	mov	r0, r1
 800d722:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d726:	4770      	bx	lr

0800d728 <__sfputs_r>:
 800d728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d72a:	4606      	mov	r6, r0
 800d72c:	460f      	mov	r7, r1
 800d72e:	4614      	mov	r4, r2
 800d730:	18d5      	adds	r5, r2, r3
 800d732:	42ac      	cmp	r4, r5
 800d734:	d101      	bne.n	800d73a <__sfputs_r+0x12>
 800d736:	2000      	movs	r0, #0
 800d738:	e007      	b.n	800d74a <__sfputs_r+0x22>
 800d73a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d73e:	463a      	mov	r2, r7
 800d740:	4630      	mov	r0, r6
 800d742:	f7ff ffda 	bl	800d6fa <__sfputc_r>
 800d746:	1c43      	adds	r3, r0, #1
 800d748:	d1f3      	bne.n	800d732 <__sfputs_r+0xa>
 800d74a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d74c <_vfiprintf_r>:
 800d74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d750:	460d      	mov	r5, r1
 800d752:	b09d      	sub	sp, #116	@ 0x74
 800d754:	4614      	mov	r4, r2
 800d756:	4698      	mov	r8, r3
 800d758:	4606      	mov	r6, r0
 800d75a:	b118      	cbz	r0, 800d764 <_vfiprintf_r+0x18>
 800d75c:	6a03      	ldr	r3, [r0, #32]
 800d75e:	b90b      	cbnz	r3, 800d764 <_vfiprintf_r+0x18>
 800d760:	f7fe f8ec 	bl	800b93c <__sinit>
 800d764:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d766:	07d9      	lsls	r1, r3, #31
 800d768:	d405      	bmi.n	800d776 <_vfiprintf_r+0x2a>
 800d76a:	89ab      	ldrh	r3, [r5, #12]
 800d76c:	059a      	lsls	r2, r3, #22
 800d76e:	d402      	bmi.n	800d776 <_vfiprintf_r+0x2a>
 800d770:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d772:	f7fe fa10 	bl	800bb96 <__retarget_lock_acquire_recursive>
 800d776:	89ab      	ldrh	r3, [r5, #12]
 800d778:	071b      	lsls	r3, r3, #28
 800d77a:	d501      	bpl.n	800d780 <_vfiprintf_r+0x34>
 800d77c:	692b      	ldr	r3, [r5, #16]
 800d77e:	b99b      	cbnz	r3, 800d7a8 <_vfiprintf_r+0x5c>
 800d780:	4629      	mov	r1, r5
 800d782:	4630      	mov	r0, r6
 800d784:	f000 f938 	bl	800d9f8 <__swsetup_r>
 800d788:	b170      	cbz	r0, 800d7a8 <_vfiprintf_r+0x5c>
 800d78a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d78c:	07dc      	lsls	r4, r3, #31
 800d78e:	d504      	bpl.n	800d79a <_vfiprintf_r+0x4e>
 800d790:	f04f 30ff 	mov.w	r0, #4294967295
 800d794:	b01d      	add	sp, #116	@ 0x74
 800d796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d79a:	89ab      	ldrh	r3, [r5, #12]
 800d79c:	0598      	lsls	r0, r3, #22
 800d79e:	d4f7      	bmi.n	800d790 <_vfiprintf_r+0x44>
 800d7a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d7a2:	f7fe f9f9 	bl	800bb98 <__retarget_lock_release_recursive>
 800d7a6:	e7f3      	b.n	800d790 <_vfiprintf_r+0x44>
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7ac:	2320      	movs	r3, #32
 800d7ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d7b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7b6:	2330      	movs	r3, #48	@ 0x30
 800d7b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d968 <_vfiprintf_r+0x21c>
 800d7bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d7c0:	f04f 0901 	mov.w	r9, #1
 800d7c4:	4623      	mov	r3, r4
 800d7c6:	469a      	mov	sl, r3
 800d7c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7cc:	b10a      	cbz	r2, 800d7d2 <_vfiprintf_r+0x86>
 800d7ce:	2a25      	cmp	r2, #37	@ 0x25
 800d7d0:	d1f9      	bne.n	800d7c6 <_vfiprintf_r+0x7a>
 800d7d2:	ebba 0b04 	subs.w	fp, sl, r4
 800d7d6:	d00b      	beq.n	800d7f0 <_vfiprintf_r+0xa4>
 800d7d8:	465b      	mov	r3, fp
 800d7da:	4622      	mov	r2, r4
 800d7dc:	4629      	mov	r1, r5
 800d7de:	4630      	mov	r0, r6
 800d7e0:	f7ff ffa2 	bl	800d728 <__sfputs_r>
 800d7e4:	3001      	adds	r0, #1
 800d7e6:	f000 80a7 	beq.w	800d938 <_vfiprintf_r+0x1ec>
 800d7ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d7ec:	445a      	add	r2, fp
 800d7ee:	9209      	str	r2, [sp, #36]	@ 0x24
 800d7f0:	f89a 3000 	ldrb.w	r3, [sl]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	f000 809f 	beq.w	800d938 <_vfiprintf_r+0x1ec>
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	f04f 32ff 	mov.w	r2, #4294967295
 800d800:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d804:	f10a 0a01 	add.w	sl, sl, #1
 800d808:	9304      	str	r3, [sp, #16]
 800d80a:	9307      	str	r3, [sp, #28]
 800d80c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d810:	931a      	str	r3, [sp, #104]	@ 0x68
 800d812:	4654      	mov	r4, sl
 800d814:	2205      	movs	r2, #5
 800d816:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d81a:	4853      	ldr	r0, [pc, #332]	@ (800d968 <_vfiprintf_r+0x21c>)
 800d81c:	f7f2 fce0 	bl	80001e0 <memchr>
 800d820:	9a04      	ldr	r2, [sp, #16]
 800d822:	b9d8      	cbnz	r0, 800d85c <_vfiprintf_r+0x110>
 800d824:	06d1      	lsls	r1, r2, #27
 800d826:	bf44      	itt	mi
 800d828:	2320      	movmi	r3, #32
 800d82a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d82e:	0713      	lsls	r3, r2, #28
 800d830:	bf44      	itt	mi
 800d832:	232b      	movmi	r3, #43	@ 0x2b
 800d834:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d838:	f89a 3000 	ldrb.w	r3, [sl]
 800d83c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d83e:	d015      	beq.n	800d86c <_vfiprintf_r+0x120>
 800d840:	9a07      	ldr	r2, [sp, #28]
 800d842:	4654      	mov	r4, sl
 800d844:	2000      	movs	r0, #0
 800d846:	f04f 0c0a 	mov.w	ip, #10
 800d84a:	4621      	mov	r1, r4
 800d84c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d850:	3b30      	subs	r3, #48	@ 0x30
 800d852:	2b09      	cmp	r3, #9
 800d854:	d94b      	bls.n	800d8ee <_vfiprintf_r+0x1a2>
 800d856:	b1b0      	cbz	r0, 800d886 <_vfiprintf_r+0x13a>
 800d858:	9207      	str	r2, [sp, #28]
 800d85a:	e014      	b.n	800d886 <_vfiprintf_r+0x13a>
 800d85c:	eba0 0308 	sub.w	r3, r0, r8
 800d860:	fa09 f303 	lsl.w	r3, r9, r3
 800d864:	4313      	orrs	r3, r2
 800d866:	9304      	str	r3, [sp, #16]
 800d868:	46a2      	mov	sl, r4
 800d86a:	e7d2      	b.n	800d812 <_vfiprintf_r+0xc6>
 800d86c:	9b03      	ldr	r3, [sp, #12]
 800d86e:	1d19      	adds	r1, r3, #4
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	9103      	str	r1, [sp, #12]
 800d874:	2b00      	cmp	r3, #0
 800d876:	bfbb      	ittet	lt
 800d878:	425b      	neglt	r3, r3
 800d87a:	f042 0202 	orrlt.w	r2, r2, #2
 800d87e:	9307      	strge	r3, [sp, #28]
 800d880:	9307      	strlt	r3, [sp, #28]
 800d882:	bfb8      	it	lt
 800d884:	9204      	strlt	r2, [sp, #16]
 800d886:	7823      	ldrb	r3, [r4, #0]
 800d888:	2b2e      	cmp	r3, #46	@ 0x2e
 800d88a:	d10a      	bne.n	800d8a2 <_vfiprintf_r+0x156>
 800d88c:	7863      	ldrb	r3, [r4, #1]
 800d88e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d890:	d132      	bne.n	800d8f8 <_vfiprintf_r+0x1ac>
 800d892:	9b03      	ldr	r3, [sp, #12]
 800d894:	1d1a      	adds	r2, r3, #4
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	9203      	str	r2, [sp, #12]
 800d89a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d89e:	3402      	adds	r4, #2
 800d8a0:	9305      	str	r3, [sp, #20]
 800d8a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d978 <_vfiprintf_r+0x22c>
 800d8a6:	7821      	ldrb	r1, [r4, #0]
 800d8a8:	2203      	movs	r2, #3
 800d8aa:	4650      	mov	r0, sl
 800d8ac:	f7f2 fc98 	bl	80001e0 <memchr>
 800d8b0:	b138      	cbz	r0, 800d8c2 <_vfiprintf_r+0x176>
 800d8b2:	9b04      	ldr	r3, [sp, #16]
 800d8b4:	eba0 000a 	sub.w	r0, r0, sl
 800d8b8:	2240      	movs	r2, #64	@ 0x40
 800d8ba:	4082      	lsls	r2, r0
 800d8bc:	4313      	orrs	r3, r2
 800d8be:	3401      	adds	r4, #1
 800d8c0:	9304      	str	r3, [sp, #16]
 800d8c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8c6:	4829      	ldr	r0, [pc, #164]	@ (800d96c <_vfiprintf_r+0x220>)
 800d8c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d8cc:	2206      	movs	r2, #6
 800d8ce:	f7f2 fc87 	bl	80001e0 <memchr>
 800d8d2:	2800      	cmp	r0, #0
 800d8d4:	d03f      	beq.n	800d956 <_vfiprintf_r+0x20a>
 800d8d6:	4b26      	ldr	r3, [pc, #152]	@ (800d970 <_vfiprintf_r+0x224>)
 800d8d8:	bb1b      	cbnz	r3, 800d922 <_vfiprintf_r+0x1d6>
 800d8da:	9b03      	ldr	r3, [sp, #12]
 800d8dc:	3307      	adds	r3, #7
 800d8de:	f023 0307 	bic.w	r3, r3, #7
 800d8e2:	3308      	adds	r3, #8
 800d8e4:	9303      	str	r3, [sp, #12]
 800d8e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8e8:	443b      	add	r3, r7
 800d8ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8ec:	e76a      	b.n	800d7c4 <_vfiprintf_r+0x78>
 800d8ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8f2:	460c      	mov	r4, r1
 800d8f4:	2001      	movs	r0, #1
 800d8f6:	e7a8      	b.n	800d84a <_vfiprintf_r+0xfe>
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	3401      	adds	r4, #1
 800d8fc:	9305      	str	r3, [sp, #20]
 800d8fe:	4619      	mov	r1, r3
 800d900:	f04f 0c0a 	mov.w	ip, #10
 800d904:	4620      	mov	r0, r4
 800d906:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d90a:	3a30      	subs	r2, #48	@ 0x30
 800d90c:	2a09      	cmp	r2, #9
 800d90e:	d903      	bls.n	800d918 <_vfiprintf_r+0x1cc>
 800d910:	2b00      	cmp	r3, #0
 800d912:	d0c6      	beq.n	800d8a2 <_vfiprintf_r+0x156>
 800d914:	9105      	str	r1, [sp, #20]
 800d916:	e7c4      	b.n	800d8a2 <_vfiprintf_r+0x156>
 800d918:	fb0c 2101 	mla	r1, ip, r1, r2
 800d91c:	4604      	mov	r4, r0
 800d91e:	2301      	movs	r3, #1
 800d920:	e7f0      	b.n	800d904 <_vfiprintf_r+0x1b8>
 800d922:	ab03      	add	r3, sp, #12
 800d924:	9300      	str	r3, [sp, #0]
 800d926:	462a      	mov	r2, r5
 800d928:	4b12      	ldr	r3, [pc, #72]	@ (800d974 <_vfiprintf_r+0x228>)
 800d92a:	a904      	add	r1, sp, #16
 800d92c:	4630      	mov	r0, r6
 800d92e:	f7fd fbc3 	bl	800b0b8 <_printf_float>
 800d932:	4607      	mov	r7, r0
 800d934:	1c78      	adds	r0, r7, #1
 800d936:	d1d6      	bne.n	800d8e6 <_vfiprintf_r+0x19a>
 800d938:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d93a:	07d9      	lsls	r1, r3, #31
 800d93c:	d405      	bmi.n	800d94a <_vfiprintf_r+0x1fe>
 800d93e:	89ab      	ldrh	r3, [r5, #12]
 800d940:	059a      	lsls	r2, r3, #22
 800d942:	d402      	bmi.n	800d94a <_vfiprintf_r+0x1fe>
 800d944:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d946:	f7fe f927 	bl	800bb98 <__retarget_lock_release_recursive>
 800d94a:	89ab      	ldrh	r3, [r5, #12]
 800d94c:	065b      	lsls	r3, r3, #25
 800d94e:	f53f af1f 	bmi.w	800d790 <_vfiprintf_r+0x44>
 800d952:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d954:	e71e      	b.n	800d794 <_vfiprintf_r+0x48>
 800d956:	ab03      	add	r3, sp, #12
 800d958:	9300      	str	r3, [sp, #0]
 800d95a:	462a      	mov	r2, r5
 800d95c:	4b05      	ldr	r3, [pc, #20]	@ (800d974 <_vfiprintf_r+0x228>)
 800d95e:	a904      	add	r1, sp, #16
 800d960:	4630      	mov	r0, r6
 800d962:	f7fd fe41 	bl	800b5e8 <_printf_i>
 800d966:	e7e4      	b.n	800d932 <_vfiprintf_r+0x1e6>
 800d968:	0800e56a 	.word	0x0800e56a
 800d96c:	0800e574 	.word	0x0800e574
 800d970:	0800b0b9 	.word	0x0800b0b9
 800d974:	0800d729 	.word	0x0800d729
 800d978:	0800e570 	.word	0x0800e570

0800d97c <__swbuf_r>:
 800d97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d97e:	460e      	mov	r6, r1
 800d980:	4614      	mov	r4, r2
 800d982:	4605      	mov	r5, r0
 800d984:	b118      	cbz	r0, 800d98e <__swbuf_r+0x12>
 800d986:	6a03      	ldr	r3, [r0, #32]
 800d988:	b90b      	cbnz	r3, 800d98e <__swbuf_r+0x12>
 800d98a:	f7fd ffd7 	bl	800b93c <__sinit>
 800d98e:	69a3      	ldr	r3, [r4, #24]
 800d990:	60a3      	str	r3, [r4, #8]
 800d992:	89a3      	ldrh	r3, [r4, #12]
 800d994:	071a      	lsls	r2, r3, #28
 800d996:	d501      	bpl.n	800d99c <__swbuf_r+0x20>
 800d998:	6923      	ldr	r3, [r4, #16]
 800d99a:	b943      	cbnz	r3, 800d9ae <__swbuf_r+0x32>
 800d99c:	4621      	mov	r1, r4
 800d99e:	4628      	mov	r0, r5
 800d9a0:	f000 f82a 	bl	800d9f8 <__swsetup_r>
 800d9a4:	b118      	cbz	r0, 800d9ae <__swbuf_r+0x32>
 800d9a6:	f04f 37ff 	mov.w	r7, #4294967295
 800d9aa:	4638      	mov	r0, r7
 800d9ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9ae:	6823      	ldr	r3, [r4, #0]
 800d9b0:	6922      	ldr	r2, [r4, #16]
 800d9b2:	1a98      	subs	r0, r3, r2
 800d9b4:	6963      	ldr	r3, [r4, #20]
 800d9b6:	b2f6      	uxtb	r6, r6
 800d9b8:	4283      	cmp	r3, r0
 800d9ba:	4637      	mov	r7, r6
 800d9bc:	dc05      	bgt.n	800d9ca <__swbuf_r+0x4e>
 800d9be:	4621      	mov	r1, r4
 800d9c0:	4628      	mov	r0, r5
 800d9c2:	f7ff fda7 	bl	800d514 <_fflush_r>
 800d9c6:	2800      	cmp	r0, #0
 800d9c8:	d1ed      	bne.n	800d9a6 <__swbuf_r+0x2a>
 800d9ca:	68a3      	ldr	r3, [r4, #8]
 800d9cc:	3b01      	subs	r3, #1
 800d9ce:	60a3      	str	r3, [r4, #8]
 800d9d0:	6823      	ldr	r3, [r4, #0]
 800d9d2:	1c5a      	adds	r2, r3, #1
 800d9d4:	6022      	str	r2, [r4, #0]
 800d9d6:	701e      	strb	r6, [r3, #0]
 800d9d8:	6962      	ldr	r2, [r4, #20]
 800d9da:	1c43      	adds	r3, r0, #1
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	d004      	beq.n	800d9ea <__swbuf_r+0x6e>
 800d9e0:	89a3      	ldrh	r3, [r4, #12]
 800d9e2:	07db      	lsls	r3, r3, #31
 800d9e4:	d5e1      	bpl.n	800d9aa <__swbuf_r+0x2e>
 800d9e6:	2e0a      	cmp	r6, #10
 800d9e8:	d1df      	bne.n	800d9aa <__swbuf_r+0x2e>
 800d9ea:	4621      	mov	r1, r4
 800d9ec:	4628      	mov	r0, r5
 800d9ee:	f7ff fd91 	bl	800d514 <_fflush_r>
 800d9f2:	2800      	cmp	r0, #0
 800d9f4:	d0d9      	beq.n	800d9aa <__swbuf_r+0x2e>
 800d9f6:	e7d6      	b.n	800d9a6 <__swbuf_r+0x2a>

0800d9f8 <__swsetup_r>:
 800d9f8:	b538      	push	{r3, r4, r5, lr}
 800d9fa:	4b29      	ldr	r3, [pc, #164]	@ (800daa0 <__swsetup_r+0xa8>)
 800d9fc:	4605      	mov	r5, r0
 800d9fe:	6818      	ldr	r0, [r3, #0]
 800da00:	460c      	mov	r4, r1
 800da02:	b118      	cbz	r0, 800da0c <__swsetup_r+0x14>
 800da04:	6a03      	ldr	r3, [r0, #32]
 800da06:	b90b      	cbnz	r3, 800da0c <__swsetup_r+0x14>
 800da08:	f7fd ff98 	bl	800b93c <__sinit>
 800da0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da10:	0719      	lsls	r1, r3, #28
 800da12:	d422      	bmi.n	800da5a <__swsetup_r+0x62>
 800da14:	06da      	lsls	r2, r3, #27
 800da16:	d407      	bmi.n	800da28 <__swsetup_r+0x30>
 800da18:	2209      	movs	r2, #9
 800da1a:	602a      	str	r2, [r5, #0]
 800da1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da20:	81a3      	strh	r3, [r4, #12]
 800da22:	f04f 30ff 	mov.w	r0, #4294967295
 800da26:	e033      	b.n	800da90 <__swsetup_r+0x98>
 800da28:	0758      	lsls	r0, r3, #29
 800da2a:	d512      	bpl.n	800da52 <__swsetup_r+0x5a>
 800da2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da2e:	b141      	cbz	r1, 800da42 <__swsetup_r+0x4a>
 800da30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da34:	4299      	cmp	r1, r3
 800da36:	d002      	beq.n	800da3e <__swsetup_r+0x46>
 800da38:	4628      	mov	r0, r5
 800da3a:	f7fe ff15 	bl	800c868 <_free_r>
 800da3e:	2300      	movs	r3, #0
 800da40:	6363      	str	r3, [r4, #52]	@ 0x34
 800da42:	89a3      	ldrh	r3, [r4, #12]
 800da44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800da48:	81a3      	strh	r3, [r4, #12]
 800da4a:	2300      	movs	r3, #0
 800da4c:	6063      	str	r3, [r4, #4]
 800da4e:	6923      	ldr	r3, [r4, #16]
 800da50:	6023      	str	r3, [r4, #0]
 800da52:	89a3      	ldrh	r3, [r4, #12]
 800da54:	f043 0308 	orr.w	r3, r3, #8
 800da58:	81a3      	strh	r3, [r4, #12]
 800da5a:	6923      	ldr	r3, [r4, #16]
 800da5c:	b94b      	cbnz	r3, 800da72 <__swsetup_r+0x7a>
 800da5e:	89a3      	ldrh	r3, [r4, #12]
 800da60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800da64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800da68:	d003      	beq.n	800da72 <__swsetup_r+0x7a>
 800da6a:	4621      	mov	r1, r4
 800da6c:	4628      	mov	r0, r5
 800da6e:	f000 f883 	bl	800db78 <__smakebuf_r>
 800da72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da76:	f013 0201 	ands.w	r2, r3, #1
 800da7a:	d00a      	beq.n	800da92 <__swsetup_r+0x9a>
 800da7c:	2200      	movs	r2, #0
 800da7e:	60a2      	str	r2, [r4, #8]
 800da80:	6962      	ldr	r2, [r4, #20]
 800da82:	4252      	negs	r2, r2
 800da84:	61a2      	str	r2, [r4, #24]
 800da86:	6922      	ldr	r2, [r4, #16]
 800da88:	b942      	cbnz	r2, 800da9c <__swsetup_r+0xa4>
 800da8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800da8e:	d1c5      	bne.n	800da1c <__swsetup_r+0x24>
 800da90:	bd38      	pop	{r3, r4, r5, pc}
 800da92:	0799      	lsls	r1, r3, #30
 800da94:	bf58      	it	pl
 800da96:	6962      	ldrpl	r2, [r4, #20]
 800da98:	60a2      	str	r2, [r4, #8]
 800da9a:	e7f4      	b.n	800da86 <__swsetup_r+0x8e>
 800da9c:	2000      	movs	r0, #0
 800da9e:	e7f7      	b.n	800da90 <__swsetup_r+0x98>
 800daa0:	2000019c 	.word	0x2000019c

0800daa4 <_raise_r>:
 800daa4:	291f      	cmp	r1, #31
 800daa6:	b538      	push	{r3, r4, r5, lr}
 800daa8:	4605      	mov	r5, r0
 800daaa:	460c      	mov	r4, r1
 800daac:	d904      	bls.n	800dab8 <_raise_r+0x14>
 800daae:	2316      	movs	r3, #22
 800dab0:	6003      	str	r3, [r0, #0]
 800dab2:	f04f 30ff 	mov.w	r0, #4294967295
 800dab6:	bd38      	pop	{r3, r4, r5, pc}
 800dab8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800daba:	b112      	cbz	r2, 800dac2 <_raise_r+0x1e>
 800dabc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dac0:	b94b      	cbnz	r3, 800dad6 <_raise_r+0x32>
 800dac2:	4628      	mov	r0, r5
 800dac4:	f000 f830 	bl	800db28 <_getpid_r>
 800dac8:	4622      	mov	r2, r4
 800daca:	4601      	mov	r1, r0
 800dacc:	4628      	mov	r0, r5
 800dace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dad2:	f000 b817 	b.w	800db04 <_kill_r>
 800dad6:	2b01      	cmp	r3, #1
 800dad8:	d00a      	beq.n	800daf0 <_raise_r+0x4c>
 800dada:	1c59      	adds	r1, r3, #1
 800dadc:	d103      	bne.n	800dae6 <_raise_r+0x42>
 800dade:	2316      	movs	r3, #22
 800dae0:	6003      	str	r3, [r0, #0]
 800dae2:	2001      	movs	r0, #1
 800dae4:	e7e7      	b.n	800dab6 <_raise_r+0x12>
 800dae6:	2100      	movs	r1, #0
 800dae8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800daec:	4620      	mov	r0, r4
 800daee:	4798      	blx	r3
 800daf0:	2000      	movs	r0, #0
 800daf2:	e7e0      	b.n	800dab6 <_raise_r+0x12>

0800daf4 <raise>:
 800daf4:	4b02      	ldr	r3, [pc, #8]	@ (800db00 <raise+0xc>)
 800daf6:	4601      	mov	r1, r0
 800daf8:	6818      	ldr	r0, [r3, #0]
 800dafa:	f7ff bfd3 	b.w	800daa4 <_raise_r>
 800dafe:	bf00      	nop
 800db00:	2000019c 	.word	0x2000019c

0800db04 <_kill_r>:
 800db04:	b538      	push	{r3, r4, r5, lr}
 800db06:	4d07      	ldr	r5, [pc, #28]	@ (800db24 <_kill_r+0x20>)
 800db08:	2300      	movs	r3, #0
 800db0a:	4604      	mov	r4, r0
 800db0c:	4608      	mov	r0, r1
 800db0e:	4611      	mov	r1, r2
 800db10:	602b      	str	r3, [r5, #0]
 800db12:	f7f4 f90d 	bl	8001d30 <_kill>
 800db16:	1c43      	adds	r3, r0, #1
 800db18:	d102      	bne.n	800db20 <_kill_r+0x1c>
 800db1a:	682b      	ldr	r3, [r5, #0]
 800db1c:	b103      	cbz	r3, 800db20 <_kill_r+0x1c>
 800db1e:	6023      	str	r3, [r4, #0]
 800db20:	bd38      	pop	{r3, r4, r5, pc}
 800db22:	bf00      	nop
 800db24:	20006004 	.word	0x20006004

0800db28 <_getpid_r>:
 800db28:	f7f4 b8fa 	b.w	8001d20 <_getpid>

0800db2c <__swhatbuf_r>:
 800db2c:	b570      	push	{r4, r5, r6, lr}
 800db2e:	460c      	mov	r4, r1
 800db30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db34:	2900      	cmp	r1, #0
 800db36:	b096      	sub	sp, #88	@ 0x58
 800db38:	4615      	mov	r5, r2
 800db3a:	461e      	mov	r6, r3
 800db3c:	da0d      	bge.n	800db5a <__swhatbuf_r+0x2e>
 800db3e:	89a3      	ldrh	r3, [r4, #12]
 800db40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800db44:	f04f 0100 	mov.w	r1, #0
 800db48:	bf14      	ite	ne
 800db4a:	2340      	movne	r3, #64	@ 0x40
 800db4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800db50:	2000      	movs	r0, #0
 800db52:	6031      	str	r1, [r6, #0]
 800db54:	602b      	str	r3, [r5, #0]
 800db56:	b016      	add	sp, #88	@ 0x58
 800db58:	bd70      	pop	{r4, r5, r6, pc}
 800db5a:	466a      	mov	r2, sp
 800db5c:	f000 f848 	bl	800dbf0 <_fstat_r>
 800db60:	2800      	cmp	r0, #0
 800db62:	dbec      	blt.n	800db3e <__swhatbuf_r+0x12>
 800db64:	9901      	ldr	r1, [sp, #4]
 800db66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800db6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800db6e:	4259      	negs	r1, r3
 800db70:	4159      	adcs	r1, r3
 800db72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800db76:	e7eb      	b.n	800db50 <__swhatbuf_r+0x24>

0800db78 <__smakebuf_r>:
 800db78:	898b      	ldrh	r3, [r1, #12]
 800db7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db7c:	079d      	lsls	r5, r3, #30
 800db7e:	4606      	mov	r6, r0
 800db80:	460c      	mov	r4, r1
 800db82:	d507      	bpl.n	800db94 <__smakebuf_r+0x1c>
 800db84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800db88:	6023      	str	r3, [r4, #0]
 800db8a:	6123      	str	r3, [r4, #16]
 800db8c:	2301      	movs	r3, #1
 800db8e:	6163      	str	r3, [r4, #20]
 800db90:	b003      	add	sp, #12
 800db92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db94:	ab01      	add	r3, sp, #4
 800db96:	466a      	mov	r2, sp
 800db98:	f7ff ffc8 	bl	800db2c <__swhatbuf_r>
 800db9c:	9f00      	ldr	r7, [sp, #0]
 800db9e:	4605      	mov	r5, r0
 800dba0:	4639      	mov	r1, r7
 800dba2:	4630      	mov	r0, r6
 800dba4:	f7fe fed4 	bl	800c950 <_malloc_r>
 800dba8:	b948      	cbnz	r0, 800dbbe <__smakebuf_r+0x46>
 800dbaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbae:	059a      	lsls	r2, r3, #22
 800dbb0:	d4ee      	bmi.n	800db90 <__smakebuf_r+0x18>
 800dbb2:	f023 0303 	bic.w	r3, r3, #3
 800dbb6:	f043 0302 	orr.w	r3, r3, #2
 800dbba:	81a3      	strh	r3, [r4, #12]
 800dbbc:	e7e2      	b.n	800db84 <__smakebuf_r+0xc>
 800dbbe:	89a3      	ldrh	r3, [r4, #12]
 800dbc0:	6020      	str	r0, [r4, #0]
 800dbc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dbc6:	81a3      	strh	r3, [r4, #12]
 800dbc8:	9b01      	ldr	r3, [sp, #4]
 800dbca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dbce:	b15b      	cbz	r3, 800dbe8 <__smakebuf_r+0x70>
 800dbd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbd4:	4630      	mov	r0, r6
 800dbd6:	f000 f81d 	bl	800dc14 <_isatty_r>
 800dbda:	b128      	cbz	r0, 800dbe8 <__smakebuf_r+0x70>
 800dbdc:	89a3      	ldrh	r3, [r4, #12]
 800dbde:	f023 0303 	bic.w	r3, r3, #3
 800dbe2:	f043 0301 	orr.w	r3, r3, #1
 800dbe6:	81a3      	strh	r3, [r4, #12]
 800dbe8:	89a3      	ldrh	r3, [r4, #12]
 800dbea:	431d      	orrs	r5, r3
 800dbec:	81a5      	strh	r5, [r4, #12]
 800dbee:	e7cf      	b.n	800db90 <__smakebuf_r+0x18>

0800dbf0 <_fstat_r>:
 800dbf0:	b538      	push	{r3, r4, r5, lr}
 800dbf2:	4d07      	ldr	r5, [pc, #28]	@ (800dc10 <_fstat_r+0x20>)
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	4604      	mov	r4, r0
 800dbf8:	4608      	mov	r0, r1
 800dbfa:	4611      	mov	r1, r2
 800dbfc:	602b      	str	r3, [r5, #0]
 800dbfe:	f7f4 f8f7 	bl	8001df0 <_fstat>
 800dc02:	1c43      	adds	r3, r0, #1
 800dc04:	d102      	bne.n	800dc0c <_fstat_r+0x1c>
 800dc06:	682b      	ldr	r3, [r5, #0]
 800dc08:	b103      	cbz	r3, 800dc0c <_fstat_r+0x1c>
 800dc0a:	6023      	str	r3, [r4, #0]
 800dc0c:	bd38      	pop	{r3, r4, r5, pc}
 800dc0e:	bf00      	nop
 800dc10:	20006004 	.word	0x20006004

0800dc14 <_isatty_r>:
 800dc14:	b538      	push	{r3, r4, r5, lr}
 800dc16:	4d06      	ldr	r5, [pc, #24]	@ (800dc30 <_isatty_r+0x1c>)
 800dc18:	2300      	movs	r3, #0
 800dc1a:	4604      	mov	r4, r0
 800dc1c:	4608      	mov	r0, r1
 800dc1e:	602b      	str	r3, [r5, #0]
 800dc20:	f7f4 f8f6 	bl	8001e10 <_isatty>
 800dc24:	1c43      	adds	r3, r0, #1
 800dc26:	d102      	bne.n	800dc2e <_isatty_r+0x1a>
 800dc28:	682b      	ldr	r3, [r5, #0]
 800dc2a:	b103      	cbz	r3, 800dc2e <_isatty_r+0x1a>
 800dc2c:	6023      	str	r3, [r4, #0]
 800dc2e:	bd38      	pop	{r3, r4, r5, pc}
 800dc30:	20006004 	.word	0x20006004

0800dc34 <atan2>:
 800dc34:	f000 baa4 	b.w	800e180 <__ieee754_atan2>

0800dc38 <sqrt>:
 800dc38:	b538      	push	{r3, r4, r5, lr}
 800dc3a:	ed2d 8b02 	vpush	{d8}
 800dc3e:	ec55 4b10 	vmov	r4, r5, d0
 800dc42:	f000 f9c5 	bl	800dfd0 <__ieee754_sqrt>
 800dc46:	4622      	mov	r2, r4
 800dc48:	462b      	mov	r3, r5
 800dc4a:	4620      	mov	r0, r4
 800dc4c:	4629      	mov	r1, r5
 800dc4e:	eeb0 8a40 	vmov.f32	s16, s0
 800dc52:	eef0 8a60 	vmov.f32	s17, s1
 800dc56:	f7f2 ff71 	bl	8000b3c <__aeabi_dcmpun>
 800dc5a:	b990      	cbnz	r0, 800dc82 <sqrt+0x4a>
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	2300      	movs	r3, #0
 800dc60:	4620      	mov	r0, r4
 800dc62:	4629      	mov	r1, r5
 800dc64:	f7f2 ff42 	bl	8000aec <__aeabi_dcmplt>
 800dc68:	b158      	cbz	r0, 800dc82 <sqrt+0x4a>
 800dc6a:	f7fd ff69 	bl	800bb40 <__errno>
 800dc6e:	2321      	movs	r3, #33	@ 0x21
 800dc70:	6003      	str	r3, [r0, #0]
 800dc72:	2200      	movs	r2, #0
 800dc74:	2300      	movs	r3, #0
 800dc76:	4610      	mov	r0, r2
 800dc78:	4619      	mov	r1, r3
 800dc7a:	f7f2 fdef 	bl	800085c <__aeabi_ddiv>
 800dc7e:	ec41 0b18 	vmov	d8, r0, r1
 800dc82:	eeb0 0a48 	vmov.f32	s0, s16
 800dc86:	eef0 0a68 	vmov.f32	s1, s17
 800dc8a:	ecbd 8b02 	vpop	{d8}
 800dc8e:	bd38      	pop	{r3, r4, r5, pc}

0800dc90 <atan>:
 800dc90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc94:	ec55 4b10 	vmov	r4, r5, d0
 800dc98:	4bbf      	ldr	r3, [pc, #764]	@ (800df98 <atan+0x308>)
 800dc9a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800dc9e:	429e      	cmp	r6, r3
 800dca0:	46ab      	mov	fp, r5
 800dca2:	d918      	bls.n	800dcd6 <atan+0x46>
 800dca4:	4bbd      	ldr	r3, [pc, #756]	@ (800df9c <atan+0x30c>)
 800dca6:	429e      	cmp	r6, r3
 800dca8:	d801      	bhi.n	800dcae <atan+0x1e>
 800dcaa:	d109      	bne.n	800dcc0 <atan+0x30>
 800dcac:	b144      	cbz	r4, 800dcc0 <atan+0x30>
 800dcae:	4622      	mov	r2, r4
 800dcb0:	462b      	mov	r3, r5
 800dcb2:	4620      	mov	r0, r4
 800dcb4:	4629      	mov	r1, r5
 800dcb6:	f7f2 faf1 	bl	800029c <__adddf3>
 800dcba:	4604      	mov	r4, r0
 800dcbc:	460d      	mov	r5, r1
 800dcbe:	e006      	b.n	800dcce <atan+0x3e>
 800dcc0:	f1bb 0f00 	cmp.w	fp, #0
 800dcc4:	f340 812b 	ble.w	800df1e <atan+0x28e>
 800dcc8:	a597      	add	r5, pc, #604	@ (adr r5, 800df28 <atan+0x298>)
 800dcca:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dcce:	ec45 4b10 	vmov	d0, r4, r5
 800dcd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcd6:	4bb2      	ldr	r3, [pc, #712]	@ (800dfa0 <atan+0x310>)
 800dcd8:	429e      	cmp	r6, r3
 800dcda:	d813      	bhi.n	800dd04 <atan+0x74>
 800dcdc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800dce0:	429e      	cmp	r6, r3
 800dce2:	d80c      	bhi.n	800dcfe <atan+0x6e>
 800dce4:	a392      	add	r3, pc, #584	@ (adr r3, 800df30 <atan+0x2a0>)
 800dce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcea:	4620      	mov	r0, r4
 800dcec:	4629      	mov	r1, r5
 800dcee:	f7f2 fad5 	bl	800029c <__adddf3>
 800dcf2:	4bac      	ldr	r3, [pc, #688]	@ (800dfa4 <atan+0x314>)
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	f7f2 ff17 	bl	8000b28 <__aeabi_dcmpgt>
 800dcfa:	2800      	cmp	r0, #0
 800dcfc:	d1e7      	bne.n	800dcce <atan+0x3e>
 800dcfe:	f04f 3aff 	mov.w	sl, #4294967295
 800dd02:	e029      	b.n	800dd58 <atan+0xc8>
 800dd04:	f000 f95c 	bl	800dfc0 <fabs>
 800dd08:	4ba7      	ldr	r3, [pc, #668]	@ (800dfa8 <atan+0x318>)
 800dd0a:	429e      	cmp	r6, r3
 800dd0c:	ec55 4b10 	vmov	r4, r5, d0
 800dd10:	f200 80bc 	bhi.w	800de8c <atan+0x1fc>
 800dd14:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800dd18:	429e      	cmp	r6, r3
 800dd1a:	f200 809e 	bhi.w	800de5a <atan+0x1ca>
 800dd1e:	4622      	mov	r2, r4
 800dd20:	462b      	mov	r3, r5
 800dd22:	4620      	mov	r0, r4
 800dd24:	4629      	mov	r1, r5
 800dd26:	f7f2 fab9 	bl	800029c <__adddf3>
 800dd2a:	4b9e      	ldr	r3, [pc, #632]	@ (800dfa4 <atan+0x314>)
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	f7f2 fab3 	bl	8000298 <__aeabi_dsub>
 800dd32:	2200      	movs	r2, #0
 800dd34:	4606      	mov	r6, r0
 800dd36:	460f      	mov	r7, r1
 800dd38:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800dd3c:	4620      	mov	r0, r4
 800dd3e:	4629      	mov	r1, r5
 800dd40:	f7f2 faac 	bl	800029c <__adddf3>
 800dd44:	4602      	mov	r2, r0
 800dd46:	460b      	mov	r3, r1
 800dd48:	4630      	mov	r0, r6
 800dd4a:	4639      	mov	r1, r7
 800dd4c:	f7f2 fd86 	bl	800085c <__aeabi_ddiv>
 800dd50:	f04f 0a00 	mov.w	sl, #0
 800dd54:	4604      	mov	r4, r0
 800dd56:	460d      	mov	r5, r1
 800dd58:	4622      	mov	r2, r4
 800dd5a:	462b      	mov	r3, r5
 800dd5c:	4620      	mov	r0, r4
 800dd5e:	4629      	mov	r1, r5
 800dd60:	f7f2 fc52 	bl	8000608 <__aeabi_dmul>
 800dd64:	4602      	mov	r2, r0
 800dd66:	460b      	mov	r3, r1
 800dd68:	4680      	mov	r8, r0
 800dd6a:	4689      	mov	r9, r1
 800dd6c:	f7f2 fc4c 	bl	8000608 <__aeabi_dmul>
 800dd70:	a371      	add	r3, pc, #452	@ (adr r3, 800df38 <atan+0x2a8>)
 800dd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd76:	4606      	mov	r6, r0
 800dd78:	460f      	mov	r7, r1
 800dd7a:	f7f2 fc45 	bl	8000608 <__aeabi_dmul>
 800dd7e:	a370      	add	r3, pc, #448	@ (adr r3, 800df40 <atan+0x2b0>)
 800dd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd84:	f7f2 fa8a 	bl	800029c <__adddf3>
 800dd88:	4632      	mov	r2, r6
 800dd8a:	463b      	mov	r3, r7
 800dd8c:	f7f2 fc3c 	bl	8000608 <__aeabi_dmul>
 800dd90:	a36d      	add	r3, pc, #436	@ (adr r3, 800df48 <atan+0x2b8>)
 800dd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd96:	f7f2 fa81 	bl	800029c <__adddf3>
 800dd9a:	4632      	mov	r2, r6
 800dd9c:	463b      	mov	r3, r7
 800dd9e:	f7f2 fc33 	bl	8000608 <__aeabi_dmul>
 800dda2:	a36b      	add	r3, pc, #428	@ (adr r3, 800df50 <atan+0x2c0>)
 800dda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dda8:	f7f2 fa78 	bl	800029c <__adddf3>
 800ddac:	4632      	mov	r2, r6
 800ddae:	463b      	mov	r3, r7
 800ddb0:	f7f2 fc2a 	bl	8000608 <__aeabi_dmul>
 800ddb4:	a368      	add	r3, pc, #416	@ (adr r3, 800df58 <atan+0x2c8>)
 800ddb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddba:	f7f2 fa6f 	bl	800029c <__adddf3>
 800ddbe:	4632      	mov	r2, r6
 800ddc0:	463b      	mov	r3, r7
 800ddc2:	f7f2 fc21 	bl	8000608 <__aeabi_dmul>
 800ddc6:	a366      	add	r3, pc, #408	@ (adr r3, 800df60 <atan+0x2d0>)
 800ddc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddcc:	f7f2 fa66 	bl	800029c <__adddf3>
 800ddd0:	4642      	mov	r2, r8
 800ddd2:	464b      	mov	r3, r9
 800ddd4:	f7f2 fc18 	bl	8000608 <__aeabi_dmul>
 800ddd8:	a363      	add	r3, pc, #396	@ (adr r3, 800df68 <atan+0x2d8>)
 800ddda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddde:	4680      	mov	r8, r0
 800dde0:	4689      	mov	r9, r1
 800dde2:	4630      	mov	r0, r6
 800dde4:	4639      	mov	r1, r7
 800dde6:	f7f2 fc0f 	bl	8000608 <__aeabi_dmul>
 800ddea:	a361      	add	r3, pc, #388	@ (adr r3, 800df70 <atan+0x2e0>)
 800ddec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf0:	f7f2 fa52 	bl	8000298 <__aeabi_dsub>
 800ddf4:	4632      	mov	r2, r6
 800ddf6:	463b      	mov	r3, r7
 800ddf8:	f7f2 fc06 	bl	8000608 <__aeabi_dmul>
 800ddfc:	a35e      	add	r3, pc, #376	@ (adr r3, 800df78 <atan+0x2e8>)
 800ddfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de02:	f7f2 fa49 	bl	8000298 <__aeabi_dsub>
 800de06:	4632      	mov	r2, r6
 800de08:	463b      	mov	r3, r7
 800de0a:	f7f2 fbfd 	bl	8000608 <__aeabi_dmul>
 800de0e:	a35c      	add	r3, pc, #368	@ (adr r3, 800df80 <atan+0x2f0>)
 800de10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de14:	f7f2 fa40 	bl	8000298 <__aeabi_dsub>
 800de18:	4632      	mov	r2, r6
 800de1a:	463b      	mov	r3, r7
 800de1c:	f7f2 fbf4 	bl	8000608 <__aeabi_dmul>
 800de20:	a359      	add	r3, pc, #356	@ (adr r3, 800df88 <atan+0x2f8>)
 800de22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de26:	f7f2 fa37 	bl	8000298 <__aeabi_dsub>
 800de2a:	4632      	mov	r2, r6
 800de2c:	463b      	mov	r3, r7
 800de2e:	f7f2 fbeb 	bl	8000608 <__aeabi_dmul>
 800de32:	4602      	mov	r2, r0
 800de34:	460b      	mov	r3, r1
 800de36:	4640      	mov	r0, r8
 800de38:	4649      	mov	r1, r9
 800de3a:	f7f2 fa2f 	bl	800029c <__adddf3>
 800de3e:	4622      	mov	r2, r4
 800de40:	462b      	mov	r3, r5
 800de42:	f7f2 fbe1 	bl	8000608 <__aeabi_dmul>
 800de46:	f1ba 3fff 	cmp.w	sl, #4294967295
 800de4a:	4602      	mov	r2, r0
 800de4c:	460b      	mov	r3, r1
 800de4e:	d148      	bne.n	800dee2 <atan+0x252>
 800de50:	4620      	mov	r0, r4
 800de52:	4629      	mov	r1, r5
 800de54:	f7f2 fa20 	bl	8000298 <__aeabi_dsub>
 800de58:	e72f      	b.n	800dcba <atan+0x2a>
 800de5a:	4b52      	ldr	r3, [pc, #328]	@ (800dfa4 <atan+0x314>)
 800de5c:	2200      	movs	r2, #0
 800de5e:	4620      	mov	r0, r4
 800de60:	4629      	mov	r1, r5
 800de62:	f7f2 fa19 	bl	8000298 <__aeabi_dsub>
 800de66:	4b4f      	ldr	r3, [pc, #316]	@ (800dfa4 <atan+0x314>)
 800de68:	4606      	mov	r6, r0
 800de6a:	460f      	mov	r7, r1
 800de6c:	2200      	movs	r2, #0
 800de6e:	4620      	mov	r0, r4
 800de70:	4629      	mov	r1, r5
 800de72:	f7f2 fa13 	bl	800029c <__adddf3>
 800de76:	4602      	mov	r2, r0
 800de78:	460b      	mov	r3, r1
 800de7a:	4630      	mov	r0, r6
 800de7c:	4639      	mov	r1, r7
 800de7e:	f7f2 fced 	bl	800085c <__aeabi_ddiv>
 800de82:	f04f 0a01 	mov.w	sl, #1
 800de86:	4604      	mov	r4, r0
 800de88:	460d      	mov	r5, r1
 800de8a:	e765      	b.n	800dd58 <atan+0xc8>
 800de8c:	4b47      	ldr	r3, [pc, #284]	@ (800dfac <atan+0x31c>)
 800de8e:	429e      	cmp	r6, r3
 800de90:	d21c      	bcs.n	800decc <atan+0x23c>
 800de92:	4b47      	ldr	r3, [pc, #284]	@ (800dfb0 <atan+0x320>)
 800de94:	2200      	movs	r2, #0
 800de96:	4620      	mov	r0, r4
 800de98:	4629      	mov	r1, r5
 800de9a:	f7f2 f9fd 	bl	8000298 <__aeabi_dsub>
 800de9e:	4b44      	ldr	r3, [pc, #272]	@ (800dfb0 <atan+0x320>)
 800dea0:	4606      	mov	r6, r0
 800dea2:	460f      	mov	r7, r1
 800dea4:	2200      	movs	r2, #0
 800dea6:	4620      	mov	r0, r4
 800dea8:	4629      	mov	r1, r5
 800deaa:	f7f2 fbad 	bl	8000608 <__aeabi_dmul>
 800deae:	4b3d      	ldr	r3, [pc, #244]	@ (800dfa4 <atan+0x314>)
 800deb0:	2200      	movs	r2, #0
 800deb2:	f7f2 f9f3 	bl	800029c <__adddf3>
 800deb6:	4602      	mov	r2, r0
 800deb8:	460b      	mov	r3, r1
 800deba:	4630      	mov	r0, r6
 800debc:	4639      	mov	r1, r7
 800debe:	f7f2 fccd 	bl	800085c <__aeabi_ddiv>
 800dec2:	f04f 0a02 	mov.w	sl, #2
 800dec6:	4604      	mov	r4, r0
 800dec8:	460d      	mov	r5, r1
 800deca:	e745      	b.n	800dd58 <atan+0xc8>
 800decc:	4622      	mov	r2, r4
 800dece:	462b      	mov	r3, r5
 800ded0:	4938      	ldr	r1, [pc, #224]	@ (800dfb4 <atan+0x324>)
 800ded2:	2000      	movs	r0, #0
 800ded4:	f7f2 fcc2 	bl	800085c <__aeabi_ddiv>
 800ded8:	f04f 0a03 	mov.w	sl, #3
 800dedc:	4604      	mov	r4, r0
 800dede:	460d      	mov	r5, r1
 800dee0:	e73a      	b.n	800dd58 <atan+0xc8>
 800dee2:	4b35      	ldr	r3, [pc, #212]	@ (800dfb8 <atan+0x328>)
 800dee4:	4e35      	ldr	r6, [pc, #212]	@ (800dfbc <atan+0x32c>)
 800dee6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800deea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deee:	f7f2 f9d3 	bl	8000298 <__aeabi_dsub>
 800def2:	4622      	mov	r2, r4
 800def4:	462b      	mov	r3, r5
 800def6:	f7f2 f9cf 	bl	8000298 <__aeabi_dsub>
 800defa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800defe:	4602      	mov	r2, r0
 800df00:	460b      	mov	r3, r1
 800df02:	e9d6 0100 	ldrd	r0, r1, [r6]
 800df06:	f7f2 f9c7 	bl	8000298 <__aeabi_dsub>
 800df0a:	f1bb 0f00 	cmp.w	fp, #0
 800df0e:	4604      	mov	r4, r0
 800df10:	460d      	mov	r5, r1
 800df12:	f6bf aedc 	bge.w	800dcce <atan+0x3e>
 800df16:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800df1a:	461d      	mov	r5, r3
 800df1c:	e6d7      	b.n	800dcce <atan+0x3e>
 800df1e:	a51c      	add	r5, pc, #112	@ (adr r5, 800df90 <atan+0x300>)
 800df20:	e9d5 4500 	ldrd	r4, r5, [r5]
 800df24:	e6d3      	b.n	800dcce <atan+0x3e>
 800df26:	bf00      	nop
 800df28:	54442d18 	.word	0x54442d18
 800df2c:	3ff921fb 	.word	0x3ff921fb
 800df30:	8800759c 	.word	0x8800759c
 800df34:	7e37e43c 	.word	0x7e37e43c
 800df38:	e322da11 	.word	0xe322da11
 800df3c:	3f90ad3a 	.word	0x3f90ad3a
 800df40:	24760deb 	.word	0x24760deb
 800df44:	3fa97b4b 	.word	0x3fa97b4b
 800df48:	a0d03d51 	.word	0xa0d03d51
 800df4c:	3fb10d66 	.word	0x3fb10d66
 800df50:	c54c206e 	.word	0xc54c206e
 800df54:	3fb745cd 	.word	0x3fb745cd
 800df58:	920083ff 	.word	0x920083ff
 800df5c:	3fc24924 	.word	0x3fc24924
 800df60:	5555550d 	.word	0x5555550d
 800df64:	3fd55555 	.word	0x3fd55555
 800df68:	2c6a6c2f 	.word	0x2c6a6c2f
 800df6c:	bfa2b444 	.word	0xbfa2b444
 800df70:	52defd9a 	.word	0x52defd9a
 800df74:	3fadde2d 	.word	0x3fadde2d
 800df78:	af749a6d 	.word	0xaf749a6d
 800df7c:	3fb3b0f2 	.word	0x3fb3b0f2
 800df80:	fe231671 	.word	0xfe231671
 800df84:	3fbc71c6 	.word	0x3fbc71c6
 800df88:	9998ebc4 	.word	0x9998ebc4
 800df8c:	3fc99999 	.word	0x3fc99999
 800df90:	54442d18 	.word	0x54442d18
 800df94:	bff921fb 	.word	0xbff921fb
 800df98:	440fffff 	.word	0x440fffff
 800df9c:	7ff00000 	.word	0x7ff00000
 800dfa0:	3fdbffff 	.word	0x3fdbffff
 800dfa4:	3ff00000 	.word	0x3ff00000
 800dfa8:	3ff2ffff 	.word	0x3ff2ffff
 800dfac:	40038000 	.word	0x40038000
 800dfb0:	3ff80000 	.word	0x3ff80000
 800dfb4:	bff00000 	.word	0xbff00000
 800dfb8:	0800e7c8 	.word	0x0800e7c8
 800dfbc:	0800e7e8 	.word	0x0800e7e8

0800dfc0 <fabs>:
 800dfc0:	ec51 0b10 	vmov	r0, r1, d0
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800dfca:	ec43 2b10 	vmov	d0, r2, r3
 800dfce:	4770      	bx	lr

0800dfd0 <__ieee754_sqrt>:
 800dfd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfd4:	4a66      	ldr	r2, [pc, #408]	@ (800e170 <__ieee754_sqrt+0x1a0>)
 800dfd6:	ec55 4b10 	vmov	r4, r5, d0
 800dfda:	43aa      	bics	r2, r5
 800dfdc:	462b      	mov	r3, r5
 800dfde:	4621      	mov	r1, r4
 800dfe0:	d110      	bne.n	800e004 <__ieee754_sqrt+0x34>
 800dfe2:	4622      	mov	r2, r4
 800dfe4:	4620      	mov	r0, r4
 800dfe6:	4629      	mov	r1, r5
 800dfe8:	f7f2 fb0e 	bl	8000608 <__aeabi_dmul>
 800dfec:	4602      	mov	r2, r0
 800dfee:	460b      	mov	r3, r1
 800dff0:	4620      	mov	r0, r4
 800dff2:	4629      	mov	r1, r5
 800dff4:	f7f2 f952 	bl	800029c <__adddf3>
 800dff8:	4604      	mov	r4, r0
 800dffa:	460d      	mov	r5, r1
 800dffc:	ec45 4b10 	vmov	d0, r4, r5
 800e000:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e004:	2d00      	cmp	r5, #0
 800e006:	dc0e      	bgt.n	800e026 <__ieee754_sqrt+0x56>
 800e008:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800e00c:	4322      	orrs	r2, r4
 800e00e:	d0f5      	beq.n	800dffc <__ieee754_sqrt+0x2c>
 800e010:	b19d      	cbz	r5, 800e03a <__ieee754_sqrt+0x6a>
 800e012:	4622      	mov	r2, r4
 800e014:	4620      	mov	r0, r4
 800e016:	4629      	mov	r1, r5
 800e018:	f7f2 f93e 	bl	8000298 <__aeabi_dsub>
 800e01c:	4602      	mov	r2, r0
 800e01e:	460b      	mov	r3, r1
 800e020:	f7f2 fc1c 	bl	800085c <__aeabi_ddiv>
 800e024:	e7e8      	b.n	800dff8 <__ieee754_sqrt+0x28>
 800e026:	152a      	asrs	r2, r5, #20
 800e028:	d115      	bne.n	800e056 <__ieee754_sqrt+0x86>
 800e02a:	2000      	movs	r0, #0
 800e02c:	e009      	b.n	800e042 <__ieee754_sqrt+0x72>
 800e02e:	0acb      	lsrs	r3, r1, #11
 800e030:	3a15      	subs	r2, #21
 800e032:	0549      	lsls	r1, r1, #21
 800e034:	2b00      	cmp	r3, #0
 800e036:	d0fa      	beq.n	800e02e <__ieee754_sqrt+0x5e>
 800e038:	e7f7      	b.n	800e02a <__ieee754_sqrt+0x5a>
 800e03a:	462a      	mov	r2, r5
 800e03c:	e7fa      	b.n	800e034 <__ieee754_sqrt+0x64>
 800e03e:	005b      	lsls	r3, r3, #1
 800e040:	3001      	adds	r0, #1
 800e042:	02dc      	lsls	r4, r3, #11
 800e044:	d5fb      	bpl.n	800e03e <__ieee754_sqrt+0x6e>
 800e046:	1e44      	subs	r4, r0, #1
 800e048:	1b12      	subs	r2, r2, r4
 800e04a:	f1c0 0420 	rsb	r4, r0, #32
 800e04e:	fa21 f404 	lsr.w	r4, r1, r4
 800e052:	4323      	orrs	r3, r4
 800e054:	4081      	lsls	r1, r0
 800e056:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e05a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800e05e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e062:	07d2      	lsls	r2, r2, #31
 800e064:	bf5c      	itt	pl
 800e066:	005b      	lslpl	r3, r3, #1
 800e068:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800e06c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e070:	bf58      	it	pl
 800e072:	0049      	lslpl	r1, r1, #1
 800e074:	2600      	movs	r6, #0
 800e076:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800e07a:	107f      	asrs	r7, r7, #1
 800e07c:	0049      	lsls	r1, r1, #1
 800e07e:	2016      	movs	r0, #22
 800e080:	4632      	mov	r2, r6
 800e082:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800e086:	1915      	adds	r5, r2, r4
 800e088:	429d      	cmp	r5, r3
 800e08a:	bfde      	ittt	le
 800e08c:	192a      	addle	r2, r5, r4
 800e08e:	1b5b      	suble	r3, r3, r5
 800e090:	1936      	addle	r6, r6, r4
 800e092:	0fcd      	lsrs	r5, r1, #31
 800e094:	3801      	subs	r0, #1
 800e096:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800e09a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e09e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e0a2:	d1f0      	bne.n	800e086 <__ieee754_sqrt+0xb6>
 800e0a4:	4605      	mov	r5, r0
 800e0a6:	2420      	movs	r4, #32
 800e0a8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800e0ac:	4293      	cmp	r3, r2
 800e0ae:	eb0c 0e00 	add.w	lr, ip, r0
 800e0b2:	dc02      	bgt.n	800e0ba <__ieee754_sqrt+0xea>
 800e0b4:	d113      	bne.n	800e0de <__ieee754_sqrt+0x10e>
 800e0b6:	458e      	cmp	lr, r1
 800e0b8:	d811      	bhi.n	800e0de <__ieee754_sqrt+0x10e>
 800e0ba:	f1be 0f00 	cmp.w	lr, #0
 800e0be:	eb0e 000c 	add.w	r0, lr, ip
 800e0c2:	da3f      	bge.n	800e144 <__ieee754_sqrt+0x174>
 800e0c4:	2800      	cmp	r0, #0
 800e0c6:	db3d      	blt.n	800e144 <__ieee754_sqrt+0x174>
 800e0c8:	f102 0801 	add.w	r8, r2, #1
 800e0cc:	1a9b      	subs	r3, r3, r2
 800e0ce:	458e      	cmp	lr, r1
 800e0d0:	bf88      	it	hi
 800e0d2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e0d6:	eba1 010e 	sub.w	r1, r1, lr
 800e0da:	4465      	add	r5, ip
 800e0dc:	4642      	mov	r2, r8
 800e0de:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800e0e2:	3c01      	subs	r4, #1
 800e0e4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800e0e8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e0ec:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800e0f0:	d1dc      	bne.n	800e0ac <__ieee754_sqrt+0xdc>
 800e0f2:	4319      	orrs	r1, r3
 800e0f4:	d01b      	beq.n	800e12e <__ieee754_sqrt+0x15e>
 800e0f6:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800e174 <__ieee754_sqrt+0x1a4>
 800e0fa:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800e178 <__ieee754_sqrt+0x1a8>
 800e0fe:	e9da 0100 	ldrd	r0, r1, [sl]
 800e102:	e9db 2300 	ldrd	r2, r3, [fp]
 800e106:	f7f2 f8c7 	bl	8000298 <__aeabi_dsub>
 800e10a:	e9da 8900 	ldrd	r8, r9, [sl]
 800e10e:	4602      	mov	r2, r0
 800e110:	460b      	mov	r3, r1
 800e112:	4640      	mov	r0, r8
 800e114:	4649      	mov	r1, r9
 800e116:	f7f2 fcf3 	bl	8000b00 <__aeabi_dcmple>
 800e11a:	b140      	cbz	r0, 800e12e <__ieee754_sqrt+0x15e>
 800e11c:	f1b5 3fff 	cmp.w	r5, #4294967295
 800e120:	e9da 0100 	ldrd	r0, r1, [sl]
 800e124:	e9db 2300 	ldrd	r2, r3, [fp]
 800e128:	d10e      	bne.n	800e148 <__ieee754_sqrt+0x178>
 800e12a:	3601      	adds	r6, #1
 800e12c:	4625      	mov	r5, r4
 800e12e:	1073      	asrs	r3, r6, #1
 800e130:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800e134:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800e138:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800e13c:	086b      	lsrs	r3, r5, #1
 800e13e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800e142:	e759      	b.n	800dff8 <__ieee754_sqrt+0x28>
 800e144:	4690      	mov	r8, r2
 800e146:	e7c1      	b.n	800e0cc <__ieee754_sqrt+0xfc>
 800e148:	f7f2 f8a8 	bl	800029c <__adddf3>
 800e14c:	e9da 8900 	ldrd	r8, r9, [sl]
 800e150:	4602      	mov	r2, r0
 800e152:	460b      	mov	r3, r1
 800e154:	4640      	mov	r0, r8
 800e156:	4649      	mov	r1, r9
 800e158:	f7f2 fcc8 	bl	8000aec <__aeabi_dcmplt>
 800e15c:	b120      	cbz	r0, 800e168 <__ieee754_sqrt+0x198>
 800e15e:	1cab      	adds	r3, r5, #2
 800e160:	bf08      	it	eq
 800e162:	3601      	addeq	r6, #1
 800e164:	3502      	adds	r5, #2
 800e166:	e7e2      	b.n	800e12e <__ieee754_sqrt+0x15e>
 800e168:	1c6b      	adds	r3, r5, #1
 800e16a:	f023 0501 	bic.w	r5, r3, #1
 800e16e:	e7de      	b.n	800e12e <__ieee754_sqrt+0x15e>
 800e170:	7ff00000 	.word	0x7ff00000
 800e174:	0800e810 	.word	0x0800e810
 800e178:	0800e808 	.word	0x0800e808
 800e17c:	00000000 	.word	0x00000000

0800e180 <__ieee754_atan2>:
 800e180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e184:	ec57 6b11 	vmov	r6, r7, d1
 800e188:	4273      	negs	r3, r6
 800e18a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800e308 <__ieee754_atan2+0x188>
 800e18e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800e192:	4333      	orrs	r3, r6
 800e194:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e198:	4543      	cmp	r3, r8
 800e19a:	ec51 0b10 	vmov	r0, r1, d0
 800e19e:	4635      	mov	r5, r6
 800e1a0:	d809      	bhi.n	800e1b6 <__ieee754_atan2+0x36>
 800e1a2:	4244      	negs	r4, r0
 800e1a4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e1a8:	4304      	orrs	r4, r0
 800e1aa:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e1ae:	4544      	cmp	r4, r8
 800e1b0:	468e      	mov	lr, r1
 800e1b2:	4681      	mov	r9, r0
 800e1b4:	d907      	bls.n	800e1c6 <__ieee754_atan2+0x46>
 800e1b6:	4632      	mov	r2, r6
 800e1b8:	463b      	mov	r3, r7
 800e1ba:	f7f2 f86f 	bl	800029c <__adddf3>
 800e1be:	ec41 0b10 	vmov	d0, r0, r1
 800e1c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1c6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800e1ca:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800e1ce:	4334      	orrs	r4, r6
 800e1d0:	d103      	bne.n	800e1da <__ieee754_atan2+0x5a>
 800e1d2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1d6:	f7ff bd5b 	b.w	800dc90 <atan>
 800e1da:	17bc      	asrs	r4, r7, #30
 800e1dc:	f004 0402 	and.w	r4, r4, #2
 800e1e0:	ea53 0909 	orrs.w	r9, r3, r9
 800e1e4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e1e8:	d107      	bne.n	800e1fa <__ieee754_atan2+0x7a>
 800e1ea:	2c02      	cmp	r4, #2
 800e1ec:	d05f      	beq.n	800e2ae <__ieee754_atan2+0x12e>
 800e1ee:	2c03      	cmp	r4, #3
 800e1f0:	d1e5      	bne.n	800e1be <__ieee754_atan2+0x3e>
 800e1f2:	a143      	add	r1, pc, #268	@ (adr r1, 800e300 <__ieee754_atan2+0x180>)
 800e1f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1f8:	e7e1      	b.n	800e1be <__ieee754_atan2+0x3e>
 800e1fa:	4315      	orrs	r5, r2
 800e1fc:	d106      	bne.n	800e20c <__ieee754_atan2+0x8c>
 800e1fe:	f1be 0f00 	cmp.w	lr, #0
 800e202:	db5f      	blt.n	800e2c4 <__ieee754_atan2+0x144>
 800e204:	a136      	add	r1, pc, #216	@ (adr r1, 800e2e0 <__ieee754_atan2+0x160>)
 800e206:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e20a:	e7d8      	b.n	800e1be <__ieee754_atan2+0x3e>
 800e20c:	4542      	cmp	r2, r8
 800e20e:	d10f      	bne.n	800e230 <__ieee754_atan2+0xb0>
 800e210:	4293      	cmp	r3, r2
 800e212:	f104 34ff 	add.w	r4, r4, #4294967295
 800e216:	d107      	bne.n	800e228 <__ieee754_atan2+0xa8>
 800e218:	2c02      	cmp	r4, #2
 800e21a:	d84c      	bhi.n	800e2b6 <__ieee754_atan2+0x136>
 800e21c:	4b36      	ldr	r3, [pc, #216]	@ (800e2f8 <__ieee754_atan2+0x178>)
 800e21e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e222:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e226:	e7ca      	b.n	800e1be <__ieee754_atan2+0x3e>
 800e228:	2c02      	cmp	r4, #2
 800e22a:	d848      	bhi.n	800e2be <__ieee754_atan2+0x13e>
 800e22c:	4b33      	ldr	r3, [pc, #204]	@ (800e2fc <__ieee754_atan2+0x17c>)
 800e22e:	e7f6      	b.n	800e21e <__ieee754_atan2+0x9e>
 800e230:	4543      	cmp	r3, r8
 800e232:	d0e4      	beq.n	800e1fe <__ieee754_atan2+0x7e>
 800e234:	1a9b      	subs	r3, r3, r2
 800e236:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800e23a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e23e:	da1e      	bge.n	800e27e <__ieee754_atan2+0xfe>
 800e240:	2f00      	cmp	r7, #0
 800e242:	da01      	bge.n	800e248 <__ieee754_atan2+0xc8>
 800e244:	323c      	adds	r2, #60	@ 0x3c
 800e246:	db1e      	blt.n	800e286 <__ieee754_atan2+0x106>
 800e248:	4632      	mov	r2, r6
 800e24a:	463b      	mov	r3, r7
 800e24c:	f7f2 fb06 	bl	800085c <__aeabi_ddiv>
 800e250:	ec41 0b10 	vmov	d0, r0, r1
 800e254:	f7ff feb4 	bl	800dfc0 <fabs>
 800e258:	f7ff fd1a 	bl	800dc90 <atan>
 800e25c:	ec51 0b10 	vmov	r0, r1, d0
 800e260:	2c01      	cmp	r4, #1
 800e262:	d013      	beq.n	800e28c <__ieee754_atan2+0x10c>
 800e264:	2c02      	cmp	r4, #2
 800e266:	d015      	beq.n	800e294 <__ieee754_atan2+0x114>
 800e268:	2c00      	cmp	r4, #0
 800e26a:	d0a8      	beq.n	800e1be <__ieee754_atan2+0x3e>
 800e26c:	a318      	add	r3, pc, #96	@ (adr r3, 800e2d0 <__ieee754_atan2+0x150>)
 800e26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e272:	f7f2 f811 	bl	8000298 <__aeabi_dsub>
 800e276:	a318      	add	r3, pc, #96	@ (adr r3, 800e2d8 <__ieee754_atan2+0x158>)
 800e278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e27c:	e014      	b.n	800e2a8 <__ieee754_atan2+0x128>
 800e27e:	a118      	add	r1, pc, #96	@ (adr r1, 800e2e0 <__ieee754_atan2+0x160>)
 800e280:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e284:	e7ec      	b.n	800e260 <__ieee754_atan2+0xe0>
 800e286:	2000      	movs	r0, #0
 800e288:	2100      	movs	r1, #0
 800e28a:	e7e9      	b.n	800e260 <__ieee754_atan2+0xe0>
 800e28c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e290:	4619      	mov	r1, r3
 800e292:	e794      	b.n	800e1be <__ieee754_atan2+0x3e>
 800e294:	a30e      	add	r3, pc, #56	@ (adr r3, 800e2d0 <__ieee754_atan2+0x150>)
 800e296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e29a:	f7f1 fffd 	bl	8000298 <__aeabi_dsub>
 800e29e:	4602      	mov	r2, r0
 800e2a0:	460b      	mov	r3, r1
 800e2a2:	a10d      	add	r1, pc, #52	@ (adr r1, 800e2d8 <__ieee754_atan2+0x158>)
 800e2a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2a8:	f7f1 fff6 	bl	8000298 <__aeabi_dsub>
 800e2ac:	e787      	b.n	800e1be <__ieee754_atan2+0x3e>
 800e2ae:	a10a      	add	r1, pc, #40	@ (adr r1, 800e2d8 <__ieee754_atan2+0x158>)
 800e2b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2b4:	e783      	b.n	800e1be <__ieee754_atan2+0x3e>
 800e2b6:	a10c      	add	r1, pc, #48	@ (adr r1, 800e2e8 <__ieee754_atan2+0x168>)
 800e2b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2bc:	e77f      	b.n	800e1be <__ieee754_atan2+0x3e>
 800e2be:	2000      	movs	r0, #0
 800e2c0:	2100      	movs	r1, #0
 800e2c2:	e77c      	b.n	800e1be <__ieee754_atan2+0x3e>
 800e2c4:	a10a      	add	r1, pc, #40	@ (adr r1, 800e2f0 <__ieee754_atan2+0x170>)
 800e2c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2ca:	e778      	b.n	800e1be <__ieee754_atan2+0x3e>
 800e2cc:	f3af 8000 	nop.w
 800e2d0:	33145c07 	.word	0x33145c07
 800e2d4:	3ca1a626 	.word	0x3ca1a626
 800e2d8:	54442d18 	.word	0x54442d18
 800e2dc:	400921fb 	.word	0x400921fb
 800e2e0:	54442d18 	.word	0x54442d18
 800e2e4:	3ff921fb 	.word	0x3ff921fb
 800e2e8:	54442d18 	.word	0x54442d18
 800e2ec:	3fe921fb 	.word	0x3fe921fb
 800e2f0:	54442d18 	.word	0x54442d18
 800e2f4:	bff921fb 	.word	0xbff921fb
 800e2f8:	0800e830 	.word	0x0800e830
 800e2fc:	0800e818 	.word	0x0800e818
 800e300:	54442d18 	.word	0x54442d18
 800e304:	c00921fb 	.word	0xc00921fb
 800e308:	7ff00000 	.word	0x7ff00000

0800e30c <_init>:
 800e30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e30e:	bf00      	nop
 800e310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e312:	bc08      	pop	{r3}
 800e314:	469e      	mov	lr, r3
 800e316:	4770      	bx	lr

0800e318 <_fini>:
 800e318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e31a:	bf00      	nop
 800e31c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e31e:	bc08      	pop	{r3}
 800e320:	469e      	mov	lr, r3
 800e322:	4770      	bx	lr
