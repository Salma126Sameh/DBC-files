
MPU_stm32f103cbt6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a34  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08006b48  08006b48  00007b48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fb8  08006fb8  00008264  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006fb8  08006fb8  00007fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fc0  08006fc0  00008264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fc0  08006fc0  00007fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006fc4  08006fc4  00007fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000264  20000000  08006fc8  00008000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  20000268  0800722c  00008268  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  0800722c  0000849c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008264  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000742e  00000000  00000000  0000828d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001871  00000000  00000000  0000f6bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  00010f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005f3  00000000  00000000  00011710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018065  00000000  00000000  00011d03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa4a  00000000  00000000  00029d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084a34  00000000  00000000  000347b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b91e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003118  00000000  00000000  000b922c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000bc344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000268 	.word	0x20000268
 800012c:	00000000 	.word	0x00000000
 8000130:	08006b2c 	.word	0x08006b2c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000026c 	.word	0x2000026c
 800014c:	08006b2c 	.word	0x08006b2c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f48:	f000 fe3e 	bl	8001bc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4c:	f000 f81a 	bl	8000f84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f50:	f000 f88c 	bl	800106c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f54:	f000 f85c 	bl	8001010 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  DEBUG_PRINT("MPU6050 Initialized \r\n");
 8000f58:	4807      	ldr	r0, [pc, #28]	@ (8000f78 <main+0x34>)
 8000f5a:	f003 fb09 	bl	8004570 <puts>
  MPU6050_Init(&hi2c1);
 8000f5e:	4807      	ldr	r0, [pc, #28]	@ (8000f7c <main+0x38>)
 8000f60:	f000 f8b8 	bl	80010d4 <MPU6050_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MPU6050_Data(&hi2c1, &MPU6050);
 8000f64:	4906      	ldr	r1, [pc, #24]	@ (8000f80 <main+0x3c>)
 8000f66:	4805      	ldr	r0, [pc, #20]	@ (8000f7c <main+0x38>)
 8000f68:	f000 fc66 	bl	8001838 <MPU6050_Data>
	  HAL_Delay(3000);
 8000f6c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000f70:	f000 fe8c 	bl	8001c8c <HAL_Delay>
	  MPU6050_Data(&hi2c1, &MPU6050);
 8000f74:	bf00      	nop
 8000f76:	e7f5      	b.n	8000f64 <main+0x20>
 8000f78:	08006b48 	.word	0x08006b48
 8000f7c:	20000284 	.word	0x20000284
 8000f80:	200002d8 	.word	0x200002d8

08000f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b090      	sub	sp, #64	@ 0x40
 8000f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8a:	f107 0318 	add.w	r3, r7, #24
 8000f8e:	2228      	movs	r2, #40	@ 0x28
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f003 fbcc 	bl	8004730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000faa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fbc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fc2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc8:	f107 0318 	add.w	r3, r7, #24
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f002 f94f 	bl	8003270 <HAL_RCC_OscConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000fd8:	f000 f876 	bl	80010c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fdc:	230f      	movs	r3, #15
 8000fde:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fe8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f002 fbbc 	bl	8003774 <HAL_RCC_ClockConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001002:	f000 f861 	bl	80010c8 <Error_Handler>
  }
}
 8001006:	bf00      	nop
 8001008:	3740      	adds	r7, #64	@ 0x40
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001014:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <MX_I2C1_Init+0x50>)
 8001016:	4a13      	ldr	r2, [pc, #76]	@ (8001064 <MX_I2C1_Init+0x54>)
 8001018:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800101a:	4b11      	ldr	r3, [pc, #68]	@ (8001060 <MX_I2C1_Init+0x50>)
 800101c:	4a12      	ldr	r2, [pc, #72]	@ (8001068 <MX_I2C1_Init+0x58>)
 800101e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001020:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <MX_I2C1_Init+0x50>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001026:	4b0e      	ldr	r3, [pc, #56]	@ (8001060 <MX_I2C1_Init+0x50>)
 8001028:	2200      	movs	r2, #0
 800102a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800102c:	4b0c      	ldr	r3, [pc, #48]	@ (8001060 <MX_I2C1_Init+0x50>)
 800102e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001032:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001034:	4b0a      	ldr	r3, [pc, #40]	@ (8001060 <MX_I2C1_Init+0x50>)
 8001036:	2200      	movs	r2, #0
 8001038:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800103a:	4b09      	ldr	r3, [pc, #36]	@ (8001060 <MX_I2C1_Init+0x50>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001040:	4b07      	ldr	r3, [pc, #28]	@ (8001060 <MX_I2C1_Init+0x50>)
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001046:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <MX_I2C1_Init+0x50>)
 8001048:	2200      	movs	r2, #0
 800104a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800104c:	4804      	ldr	r0, [pc, #16]	@ (8001060 <MX_I2C1_Init+0x50>)
 800104e:	f001 f8a9 	bl	80021a4 <HAL_I2C_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001058:	f000 f836 	bl	80010c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000284 	.word	0x20000284
 8001064:	40005400 	.word	0x40005400
 8001068:	000186a0 	.word	0x000186a0

0800106c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001072:	4b14      	ldr	r3, [pc, #80]	@ (80010c4 <MX_GPIO_Init+0x58>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	4a13      	ldr	r2, [pc, #76]	@ (80010c4 <MX_GPIO_Init+0x58>)
 8001078:	f043 0320 	orr.w	r3, r3, #32
 800107c:	6193      	str	r3, [r2, #24]
 800107e:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <MX_GPIO_Init+0x58>)
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	f003 0320 	and.w	r3, r3, #32
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <MX_GPIO_Init+0x58>)
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	4a0d      	ldr	r2, [pc, #52]	@ (80010c4 <MX_GPIO_Init+0x58>)
 8001090:	f043 0304 	orr.w	r3, r3, #4
 8001094:	6193      	str	r3, [r2, #24]
 8001096:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <MX_GPIO_Init+0x58>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	f003 0304 	and.w	r3, r3, #4
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	4b08      	ldr	r3, [pc, #32]	@ (80010c4 <MX_GPIO_Init+0x58>)
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	4a07      	ldr	r2, [pc, #28]	@ (80010c4 <MX_GPIO_Init+0x58>)
 80010a8:	f043 0308 	orr.w	r3, r3, #8
 80010ac:	6193      	str	r3, [r2, #24]
 80010ae:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <MX_GPIO_Init+0x58>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	f003 0308 	and.w	r3, r3, #8
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80010ba:	bf00      	nop
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr
 80010c4:	40021000 	.word	0x40021000

080010c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010cc:	b672      	cpsid	i
}
 80010ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <Error_Handler+0x8>

080010d4 <MPU6050_Init>:
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

// Initialize MPU6050
uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af04      	add	r7, sp, #16
 80010da:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80010dc:	2364      	movs	r3, #100	@ 0x64
 80010de:	9302      	str	r3, [sp, #8]
 80010e0:	2301      	movs	r3, #1
 80010e2:	9301      	str	r3, [sp, #4]
 80010e4:	f107 030f 	add.w	r3, r7, #15
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	2301      	movs	r3, #1
 80010ec:	2275      	movs	r2, #117	@ 0x75
 80010ee:	21d0      	movs	r1, #208	@ 0xd0
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f001 fa95 	bl	8002620 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 is the expected response
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	2b68      	cmp	r3, #104	@ 0x68
 80010fa:	d13d      	bne.n	8001178 <MPU6050_Init+0xa4>
    {
        // Wake up the sensor by writing 0 to PWR_MGMT_1 register
        Data = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001100:	2364      	movs	r3, #100	@ 0x64
 8001102:	9302      	str	r3, [sp, #8]
 8001104:	2301      	movs	r3, #1
 8001106:	9301      	str	r3, [sp, #4]
 8001108:	f107 030e 	add.w	r3, r7, #14
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	2301      	movs	r3, #1
 8001110:	226b      	movs	r2, #107	@ 0x6b
 8001112:	21d0      	movs	r1, #208	@ 0xd0
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f001 f989 	bl	800242c <HAL_I2C_Mem_Write>

        // Set sample rate to 1 kHz
        Data = 0x07;
 800111a:	2307      	movs	r3, #7
 800111c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800111e:	2364      	movs	r3, #100	@ 0x64
 8001120:	9302      	str	r3, [sp, #8]
 8001122:	2301      	movs	r3, #1
 8001124:	9301      	str	r3, [sp, #4]
 8001126:	f107 030e 	add.w	r3, r7, #14
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2301      	movs	r3, #1
 800112e:	2219      	movs	r2, #25
 8001130:	21d0      	movs	r1, #208	@ 0xd0
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f001 f97a 	bl	800242c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ±2g range
        Data = 0x00;
 8001138:	2300      	movs	r3, #0
 800113a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800113c:	2364      	movs	r3, #100	@ 0x64
 800113e:	9302      	str	r3, [sp, #8]
 8001140:	2301      	movs	r3, #1
 8001142:	9301      	str	r3, [sp, #4]
 8001144:	f107 030e 	add.w	r3, r7, #14
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	2301      	movs	r3, #1
 800114c:	221c      	movs	r2, #28
 800114e:	21d0      	movs	r1, #208	@ 0xd0
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f001 f96b 	bl	800242c <HAL_I2C_Mem_Write>

        // Set Gyro configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ±250 deg/sec range
        Data = 0x00;
 8001156:	2300      	movs	r3, #0
 8001158:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800115a:	2364      	movs	r3, #100	@ 0x64
 800115c:	9302      	str	r3, [sp, #8]
 800115e:	2301      	movs	r3, #1
 8001160:	9301      	str	r3, [sp, #4]
 8001162:	f107 030e 	add.w	r3, r7, #14
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2301      	movs	r3, #1
 800116a:	221b      	movs	r2, #27
 800116c:	21d0      	movs	r1, #208	@ 0xd0
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f001 f95c 	bl	800242c <HAL_I2C_Mem_Write>
        return 0;  // Initialization successful
 8001174:	2300      	movs	r3, #0
 8001176:	e000      	b.n	800117a <MPU6050_Init+0xa6>
    }
    return 1;  // Initialization failed
 8001178:	2301      	movs	r3, #1
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	0000      	movs	r0, r0
 8001184:	0000      	movs	r0, r0
	...

08001188 <MPU6050_Read_All>:
    // Convert raw data to temperature in Celsius
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

// Read all sensor data
void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8001188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800118c:	b094      	sub	sp, #80	@ 0x50
 800118e:	af04      	add	r7, sp, #16
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];  // Buffer for raw data
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register
    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001194:	2364      	movs	r3, #100	@ 0x64
 8001196:	9302      	str	r3, [sp, #8]
 8001198:	230e      	movs	r3, #14
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	f107 0308 	add.w	r3, r7, #8
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	2301      	movs	r3, #1
 80011a4:	223b      	movs	r2, #59	@ 0x3b
 80011a6:	21d0      	movs	r1, #208	@ 0xd0
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f001 fa39 	bl	8002620 <HAL_I2C_Mem_Read>

    // Parse accelerometer data
    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80011ae:	7a3b      	ldrb	r3, [r7, #8]
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	021b      	lsls	r3, r3, #8
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	7a7b      	ldrb	r3, [r7, #9]
 80011b8:	b21b      	sxth	r3, r3
 80011ba:	4313      	orrs	r3, r2
 80011bc:	b21a      	sxth	r2, r3
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80011c2:	7abb      	ldrb	r3, [r7, #10]
 80011c4:	b21b      	sxth	r3, r3
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	7afb      	ldrb	r3, [r7, #11]
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	4313      	orrs	r3, r2
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80011d6:	7b3b      	ldrb	r3, [r7, #12]
 80011d8:	b21b      	sxth	r3, r3
 80011da:	021b      	lsls	r3, r3, #8
 80011dc:	b21a      	sxth	r2, r3
 80011de:	7b7b      	ldrb	r3, [r7, #13]
 80011e0:	b21b      	sxth	r3, r3
 80011e2:	4313      	orrs	r3, r2
 80011e4:	b21a      	sxth	r2, r3
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	809a      	strh	r2, [r3, #4]

    // Parse temperature data
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 80011ea:	7bbb      	ldrb	r3, [r7, #14]
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	b21a      	sxth	r2, r3
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	4313      	orrs	r3, r2
 80011f8:	86fb      	strh	r3, [r7, #54]	@ 0x36

    // Parse gyroscope data
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 80011fa:	7c3b      	ldrb	r3, [r7, #16]
 80011fc:	b21b      	sxth	r3, r3
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	b21a      	sxth	r2, r3
 8001202:	7c7b      	ldrb	r3, [r7, #17]
 8001204:	b21b      	sxth	r3, r3
 8001206:	4313      	orrs	r3, r2
 8001208:	b21a      	sxth	r2, r3
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 800120e:	7cbb      	ldrb	r3, [r7, #18]
 8001210:	b21b      	sxth	r3, r3
 8001212:	021b      	lsls	r3, r3, #8
 8001214:	b21a      	sxth	r2, r3
 8001216:	7cfb      	ldrb	r3, [r7, #19]
 8001218:	b21b      	sxth	r3, r3
 800121a:	4313      	orrs	r3, r2
 800121c:	b21a      	sxth	r2, r3
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8001222:	7d3b      	ldrb	r3, [r7, #20]
 8001224:	b21b      	sxth	r3, r3
 8001226:	021b      	lsls	r3, r3, #8
 8001228:	b21a      	sxth	r2, r3
 800122a:	7d7b      	ldrb	r3, [r7, #21]
 800122c:	b21b      	sxth	r3, r3
 800122e:	4313      	orrs	r3, r2
 8001230:	b21a      	sxth	r2, r3
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	849a      	strh	r2, [r3, #36]	@ 0x24

    // Convert to proper units
    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff f8e1 	bl	8000404 <__aeabi_i2d>
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	4b96      	ldr	r3, [pc, #600]	@ (80014a0 <MPU6050_Read_All+0x318>)
 8001248:	f7ff fa70 	bl	800072c <__aeabi_ddiv>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	6839      	ldr	r1, [r7, #0]
 8001252:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f8d1 	bl	8000404 <__aeabi_i2d>
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	4b8e      	ldr	r3, [pc, #568]	@ (80014a0 <MPU6050_Read_All+0x318>)
 8001268:	f7ff fa60 	bl	800072c <__aeabi_ddiv>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	6839      	ldr	r1, [r7, #0]
 8001272:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f8c1 	bl	8000404 <__aeabi_i2d>
 8001282:	a381      	add	r3, pc, #516	@ (adr r3, 8001488 <MPU6050_Read_All+0x300>)
 8001284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001288:	f7ff fa50 	bl	800072c <__aeabi_ddiv>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	6839      	ldr	r1, [r7, #0]
 8001292:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8001296:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fcae 	bl	8000bfc <__aeabi_i2f>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4980      	ldr	r1, [pc, #512]	@ (80014a4 <MPU6050_Read_All+0x31c>)
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fdb1 	bl	8000e0c <__aeabi_fdiv>
 80012aa:	4603      	mov	r3, r0
 80012ac:	497e      	ldr	r1, [pc, #504]	@ (80014a8 <MPU6050_Read_All+0x320>)
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fbf0 	bl	8000a94 <__addsf3>
 80012b4:	4603      	mov	r3, r0
 80012b6:	461a      	mov	r2, r3
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	641a      	str	r2, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f89e 	bl	8000404 <__aeabi_i2d>
 80012c8:	a371      	add	r3, pc, #452	@ (adr r3, 8001490 <MPU6050_Read_All+0x308>)
 80012ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ce:	f7ff fa2d 	bl	800072c <__aeabi_ddiv>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	6839      	ldr	r1, [r7, #0]
 80012d8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff f88e 	bl	8000404 <__aeabi_i2d>
 80012e8:	a369      	add	r3, pc, #420	@ (adr r3, 8001490 <MPU6050_Read_All+0x308>)
 80012ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ee:	f7ff fa1d 	bl	800072c <__aeabi_ddiv>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	6839      	ldr	r1, [r7, #0]
 80012f8:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f87e 	bl	8000404 <__aeabi_i2d>
 8001308:	a361      	add	r3, pc, #388	@ (adr r3, 8001490 <MPU6050_Read_All+0x308>)
 800130a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130e:	f7ff fa0d 	bl	800072c <__aeabi_ddiv>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	6839      	ldr	r1, [r7, #0]
 8001318:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman filter calculations
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 800131c:	f000 fcac 	bl	8001c78 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	4b62      	ldr	r3, [pc, #392]	@ (80014ac <MPU6050_Read_All+0x324>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f85b 	bl	80003e4 <__aeabi_ui2d>
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	4b5f      	ldr	r3, [pc, #380]	@ (80014b0 <MPU6050_Read_All+0x328>)
 8001334:	f7ff f9fa 	bl	800072c <__aeabi_ddiv>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 8001340:	f000 fc9a 	bl	8001c78 <HAL_GetTick>
 8001344:	4603      	mov	r3, r0
 8001346:	4a59      	ldr	r2, [pc, #356]	@ (80014ac <MPU6050_Read_All+0x324>)
 8001348:	6013      	str	r3, [r2, #0]
    double roll;

    // Calculate roll and pitch
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001350:	461a      	mov	r2, r3
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001358:	fb03 f202 	mul.w	r2, r3, r2
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001362:	4619      	mov	r1, r3
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800136a:	fb01 f303 	mul.w	r3, r1, r3
 800136e:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff f847 	bl	8000404 <__aeabi_i2d>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4610      	mov	r0, r2
 800137c:	4619      	mov	r1, r3
 800137e:	f005 f877 	bl	8006470 <sqrt>
 8001382:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0) {
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	f04f 0300 	mov.w	r3, #0
 800138e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001392:	f7ff fb09 	bl	80009a8 <__aeabi_dcmpeq>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d119      	bne.n	80013d0 <MPU6050_Read_All+0x248>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f82e 	bl	8000404 <__aeabi_i2d>
 80013a8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013ac:	f7ff f9be 	bl	800072c <__aeabi_ddiv>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4610      	mov	r0, r2
 80013b6:	4619      	mov	r1, r3
 80013b8:	f005 f87e 	bl	80064b8 <atan>
 80013bc:	a336      	add	r3, pc, #216	@ (adr r3, 8001498 <MPU6050_Read_All+0x310>)
 80013be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c2:	f7ff f889 	bl	80004d8 <__aeabi_dmul>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 80013ce:	e005      	b.n	80013dc <MPU6050_Read_All+0x254>
    } else {
        roll = 0.0;
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	f04f 0300 	mov.w	r3, #0
 80013d8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e2:	425b      	negs	r3, r3
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f80d 	bl	8000404 <__aeabi_i2d>
 80013ea:	4682      	mov	sl, r0
 80013ec:	468b      	mov	fp, r1
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f805 	bl	8000404 <__aeabi_i2d>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4650      	mov	r0, sl
 8001400:	4659      	mov	r1, fp
 8001402:	f005 f833 	bl	800646c <atan2>
 8001406:	a324      	add	r3, pc, #144	@ (adr r3, 8001498 <MPU6050_Read_All+0x310>)
 8001408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140c:	f7ff f864 	bl	80004d8 <__aeabi_dmul>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	e9c7 2306 	strd	r2, r3, [r7, #24]
    // Handle pitch discontinuity
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8001418:	f04f 0200 	mov.w	r2, #0
 800141c:	4b25      	ldr	r3, [pc, #148]	@ (80014b4 <MPU6050_Read_All+0x32c>)
 800141e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001422:	f7ff facb 	bl	80009bc <__aeabi_dcmplt>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d00a      	beq.n	8001442 <MPU6050_Read_All+0x2ba>
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	4b20      	ldr	r3, [pc, #128]	@ (80014b8 <MPU6050_Read_All+0x330>)
 8001438:	f7ff fade 	bl	80009f8 <__aeabi_dcmpgt>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d114      	bne.n	800146c <MPU6050_Read_All+0x2e4>
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	4b1c      	ldr	r3, [pc, #112]	@ (80014b8 <MPU6050_Read_All+0x330>)
 8001448:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800144c:	f7ff fad4 	bl	80009f8 <__aeabi_dcmpgt>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d034      	beq.n	80014c0 <MPU6050_Read_All+0x338>
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	4b14      	ldr	r3, [pc, #80]	@ (80014b4 <MPU6050_Read_All+0x32c>)
 8001462:	f7ff faab 	bl	80009bc <__aeabi_dcmplt>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d029      	beq.n	80014c0 <MPU6050_Read_All+0x338>
        KalmanY.angle = pitch;
 800146c:	4913      	ldr	r1, [pc, #76]	@ (80014bc <MPU6050_Read_All+0x334>)
 800146e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001472:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001476:	6839      	ldr	r1, [r7, #0]
 8001478:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800147c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8001480:	e031      	b.n	80014e6 <MPU6050_Read_All+0x35e>
 8001482:	bf00      	nop
 8001484:	f3af 8000 	nop.w
 8001488:	00000000 	.word	0x00000000
 800148c:	40cc2900 	.word	0x40cc2900
 8001490:	00000000 	.word	0x00000000
 8001494:	40606000 	.word	0x40606000
 8001498:	1a63c1f8 	.word	0x1a63c1f8
 800149c:	404ca5dc 	.word	0x404ca5dc
 80014a0:	40d00000 	.word	0x40d00000
 80014a4:	43aa0000 	.word	0x43aa0000
 80014a8:	42121eb8 	.word	0x42121eb8
 80014ac:	20000330 	.word	0x20000330
 80014b0:	408f4000 	.word	0x408f4000
 80014b4:	c0568000 	.word	0xc0568000
 80014b8:	40568000 	.word	0x40568000
 80014bc:	20000048 	.word	0x20000048
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80014c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80014ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80014ce:	e9cd 2300 	strd	r2, r3, [sp]
 80014d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014d6:	481c      	ldr	r0, [pc, #112]	@ (8001548 <MPU6050_Read_All+0x3c0>)
 80014d8:	f000 f83c 	bl	8001554 <Kalman_getAngle>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	6839      	ldr	r1, [r7, #0]
 80014e2:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    }

    // Correct roll direction based on pitch
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80014ec:	4690      	mov	r8, r2
 80014ee:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	4b15      	ldr	r3, [pc, #84]	@ (800154c <MPU6050_Read_All+0x3c4>)
 80014f8:	4640      	mov	r0, r8
 80014fa:	4649      	mov	r1, r9
 80014fc:	f7ff fa7c 	bl	80009f8 <__aeabi_dcmpgt>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d008      	beq.n	8001518 <MPU6050_Read_All+0x390>
        DataStruct->Gx = -DataStruct->Gx;
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800150c:	4614      	mov	r4, r2
 800150e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800151e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001522:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001526:	e9cd 2300 	strd	r2, r3, [sp]
 800152a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800152e:	4808      	ldr	r0, [pc, #32]	@ (8001550 <MPU6050_Read_All+0x3c8>)
 8001530:	f000 f810 	bl	8001554 <Kalman_getAngle>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	6839      	ldr	r1, [r7, #0]
 800153a:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

}
 800153e:	bf00      	nop
 8001540:	3740      	adds	r7, #64	@ 0x40
 8001542:	46bd      	mov	sp, r7
 8001544:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001548:	20000048 	.word	0x20000048
 800154c:	40568000 	.word	0x40568000
 8001550:	20000000 	.word	0x20000000

08001554 <Kalman_getAngle>:
// Kalman filter implementation
double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8001554:	b5b0      	push	{r4, r5, r7, lr}
 8001556:	b092      	sub	sp, #72	@ 0x48
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	e9c7 2300 	strd	r2, r3, [r7]
    // Predict step
    double rate = newRate - Kalman->bias;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001566:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800156a:	f7fe fdfd 	bl	8000168 <__aeabi_dsub>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += dt * rate;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800157c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001580:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001584:	f7fe ffa8 	bl	80004d8 <__aeabi_dmul>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4620      	mov	r0, r4
 800158e:	4629      	mov	r1, r5
 8001590:	f7fe fdec 	bl	800016c <__adddf3>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	68f9      	ldr	r1, [r7, #12]
 800159a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    // Update error covariance matrix
    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80015aa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80015ae:	f7fe ff93 	bl	80004d8 <__aeabi_dmul>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	4610      	mov	r0, r2
 80015b8:	4619      	mov	r1, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80015c0:	f7fe fdd2 	bl	8000168 <__aeabi_dsub>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4610      	mov	r0, r2
 80015ca:	4619      	mov	r1, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80015d2:	f7fe fdc9 	bl	8000168 <__aeabi_dsub>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e4:	f7fe fdc2 	bl	800016c <__adddf3>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4610      	mov	r0, r2
 80015ee:	4619      	mov	r1, r3
 80015f0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80015f4:	f7fe ff70 	bl	80004d8 <__aeabi_dmul>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4620      	mov	r0, r4
 80015fe:	4629      	mov	r1, r5
 8001600:	f7fe fdb4 	bl	800016c <__adddf3>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	68f9      	ldr	r1, [r7, #12]
 800160a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800161a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800161e:	f7fe ff5b 	bl	80004d8 <__aeabi_dmul>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4620      	mov	r0, r4
 8001628:	4629      	mov	r1, r5
 800162a:	f7fe fd9d 	bl	8000168 <__aeabi_dsub>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	68f9      	ldr	r1, [r7, #12]
 8001634:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001644:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001648:	f7fe ff46 	bl	80004d8 <__aeabi_dmul>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4620      	mov	r0, r4
 8001652:	4629      	mov	r1, r5
 8001654:	f7fe fd88 	bl	8000168 <__aeabi_dsub>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	68f9      	ldr	r1, [r7, #12]
 800165e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800166e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001672:	f7fe ff31 	bl	80004d8 <__aeabi_dmul>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4620      	mov	r0, r4
 800167c:	4629      	mov	r1, r5
 800167e:	f7fe fd75 	bl	800016c <__adddf3>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	68f9      	ldr	r1, [r7, #12]
 8001688:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    // Calculate Kalman gain
    double S = Kalman->P[0][0] + Kalman->R_measure;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001698:	f7fe fd68 	bl	800016c <__adddf3>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80016aa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80016ae:	f7ff f83d 	bl	800072c <__aeabi_ddiv>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80016c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80016c4:	f7ff f832 	bl	800072c <__aeabi_ddiv>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	e9c7 2306 	strd	r2, r3, [r7, #24]

    // Update step
    double y = newAngle - Kalman->angle;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80016d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016da:	f7fe fd45 	bl	8000168 <__aeabi_dsub>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    Kalman->angle += K[0] * y;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80016ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016f0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80016f4:	f7fe fef0 	bl	80004d8 <__aeabi_dmul>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4620      	mov	r0, r4
 80016fe:	4629      	mov	r1, r5
 8001700:	f7fe fd34 	bl	800016c <__adddf3>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	68f9      	ldr	r1, [r7, #12]
 800170a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001714:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001718:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800171c:	f7fe fedc 	bl	80004d8 <__aeabi_dmul>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4620      	mov	r0, r4
 8001726:	4629      	mov	r1, r5
 8001728:	f7fe fd20 	bl	800016c <__adddf3>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	68f9      	ldr	r1, [r7, #12]
 8001732:	e9c1 2308 	strd	r2, r3, [r1, #32]

    // Update error covariance matrix
    double P00_temp = Kalman->P[0][0];
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800173c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double P01_temp = Kalman->P[0][1];
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001746:	e9c7 2308 	strd	r2, r3, [r7, #32]
    Kalman->P[0][0] -= K[0] * P00_temp;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001750:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001754:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001758:	f7fe febe 	bl	80004d8 <__aeabi_dmul>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4620      	mov	r0, r4
 8001762:	4629      	mov	r1, r5
 8001764:	f7fe fd00 	bl	8000168 <__aeabi_dsub>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	68f9      	ldr	r1, [r7, #12]
 800176e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001778:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800177c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001780:	f7fe feaa 	bl	80004d8 <__aeabi_dmul>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4620      	mov	r0, r4
 800178a:	4629      	mov	r1, r5
 800178c:	f7fe fcec 	bl	8000168 <__aeabi_dsub>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	68f9      	ldr	r1, [r7, #12]
 8001796:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80017a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80017a8:	f7fe fe96 	bl	80004d8 <__aeabi_dmul>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4620      	mov	r0, r4
 80017b2:	4629      	mov	r1, r5
 80017b4:	f7fe fcd8 	bl	8000168 <__aeabi_dsub>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	68f9      	ldr	r1, [r7, #12]
 80017be:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80017c8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017cc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017d0:	f7fe fe82 	bl	80004d8 <__aeabi_dmul>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4620      	mov	r0, r4
 80017da:	4629      	mov	r1, r5
 80017dc:	f7fe fcc4 	bl	8000168 <__aeabi_dsub>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	68f9      	ldr	r1, [r7, #12]
 80017e6:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	3748      	adds	r7, #72	@ 0x48
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080017fc <set_last_read_angle_data>:
unsigned long last_read_time = 0;
double last_x_angle = 0.0;
double last_y_angle = 0.0;

/* Function to update the last read angles */
void set_last_read_angle_data(unsigned long time, double x, double y, double z) {
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	e9c7 2300 	strd	r2, r3, [r7]
    last_read_time = time;
 8001808:	4a08      	ldr	r2, [pc, #32]	@ (800182c <set_last_read_angle_data+0x30>)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6013      	str	r3, [r2, #0]
    last_x_angle = x;
 800180e:	4908      	ldr	r1, [pc, #32]	@ (8001830 <set_last_read_angle_data+0x34>)
 8001810:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001814:	e9c1 2300 	strd	r2, r3, [r1]
    last_y_angle = y;
 8001818:	4906      	ldr	r1, [pc, #24]	@ (8001834 <set_last_read_angle_data+0x38>)
 800181a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800181e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001822:	bf00      	nop
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	20000334 	.word	0x20000334
 8001830:	20000338 	.word	0x20000338
 8001834:	20000340 	.word	0x20000340

08001838 <MPU6050_Data>:
    return last_y_angle;
}


/* Function to handle MPU6050 sensor readings and processing */
void MPU6050_Data(I2C_HandleTypeDef *I2Cx, MPU6050_t *MPU6050) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	@ 0x28
 800183c:	af04      	add	r7, sp, #16
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
    MPU6050_Read_All(I2Cx, MPU6050);
 8001842:	6839      	ldr	r1, [r7, #0]
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff fc9f 	bl	8001188 <MPU6050_Read_All>
    double angle_x = MPU6050->KalmanAngleX;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001850:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double angle_y = MPU6050->KalmanAngleY;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800185a:	e9c7 2302 	strd	r2, r3, [r7, #8]



    // Update the last read angles
    set_last_read_angle_data(HAL_GetTick(), angle_x, angle_y, 0.0);
 800185e:	f000 fa0b 	bl	8001c78 <HAL_GetTick>
 8001862:	4601      	mov	r1, r0
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001870:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001874:	e9cd 2300 	strd	r2, r3, [sp]
 8001878:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800187c:	4608      	mov	r0, r1
 800187e:	f7ff ffbd 	bl	80017fc <set_last_read_angle_data>


    // Print angle values using DEBUG_PRINT
      DEBUG_PRINT("\nAngle values\n"
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fdce 	bl	8000428 <__aeabi_f2d>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001894:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001898:	e9cd 2300 	strd	r2, r3, [sp]
 800189c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018a0:	4803      	ldr	r0, [pc, #12]	@ (80018b0 <MPU6050_Data+0x78>)
 80018a2:	f002 fdfd 	bl	80044a0 <iprintf>
                  "Temperature:%3.4f\n\n\n",
                  angle_x,
                  angle_y,
                  MPU6050->Temperature);

}
 80018a6:	bf00      	nop
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	08006b60 	.word	0x08006b60

080018b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018ba:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <HAL_MspInit+0x5c>)
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	4a14      	ldr	r2, [pc, #80]	@ (8001910 <HAL_MspInit+0x5c>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6193      	str	r3, [r2, #24]
 80018c6:	4b12      	ldr	r3, [pc, #72]	@ (8001910 <HAL_MspInit+0x5c>)
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001910 <HAL_MspInit+0x5c>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001910 <HAL_MspInit+0x5c>)
 80018d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018dc:	61d3      	str	r3, [r2, #28]
 80018de:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <HAL_MspInit+0x5c>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001914 <HAL_MspInit+0x60>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	4a04      	ldr	r2, [pc, #16]	@ (8001914 <HAL_MspInit+0x60>)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001906:	bf00      	nop
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr
 8001910:	40021000 	.word	0x40021000
 8001914:	40010000 	.word	0x40010000

08001918 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b088      	sub	sp, #32
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 0310 	add.w	r3, r7, #16
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a15      	ldr	r2, [pc, #84]	@ (8001988 <HAL_I2C_MspInit+0x70>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d123      	bne.n	8001980 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001938:	4b14      	ldr	r3, [pc, #80]	@ (800198c <HAL_I2C_MspInit+0x74>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	4a13      	ldr	r2, [pc, #76]	@ (800198c <HAL_I2C_MspInit+0x74>)
 800193e:	f043 0308 	orr.w	r3, r3, #8
 8001942:	6193      	str	r3, [r2, #24]
 8001944:	4b11      	ldr	r3, [pc, #68]	@ (800198c <HAL_I2C_MspInit+0x74>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f003 0308 	and.w	r3, r3, #8
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001950:	23c0      	movs	r3, #192	@ 0xc0
 8001952:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001954:	2312      	movs	r3, #18
 8001956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001958:	2303      	movs	r3, #3
 800195a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195c:	f107 0310 	add.w	r3, r7, #16
 8001960:	4619      	mov	r1, r3
 8001962:	480b      	ldr	r0, [pc, #44]	@ (8001990 <HAL_I2C_MspInit+0x78>)
 8001964:	f000 fa9a 	bl	8001e9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001968:	4b08      	ldr	r3, [pc, #32]	@ (800198c <HAL_I2C_MspInit+0x74>)
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	4a07      	ldr	r2, [pc, #28]	@ (800198c <HAL_I2C_MspInit+0x74>)
 800196e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001972:	61d3      	str	r3, [r2, #28]
 8001974:	4b05      	ldr	r3, [pc, #20]	@ (800198c <HAL_I2C_MspInit+0x74>)
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001980:	bf00      	nop
 8001982:	3720      	adds	r7, #32
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40005400 	.word	0x40005400
 800198c:	40021000 	.word	0x40021000
 8001990:	40010c00 	.word	0x40010c00

08001994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001998:	bf00      	nop
 800199a:	e7fd      	b.n	8001998 <NMI_Handler+0x4>

0800199c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <HardFault_Handler+0x4>

080019a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <MemManage_Handler+0x4>

080019ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <BusFault_Handler+0x4>

080019b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <UsageFault_Handler+0x4>

080019bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr

080019c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr

080019d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr

080019e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019e4:	f000 f936 	bl	8001c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}

080019ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return 1;
 80019f0:	2301      	movs	r3, #1
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr

080019fa <_kill>:

int _kill(int pid, int sig)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
 8001a02:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a04:	f002 fee6 	bl	80047d4 <__errno>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2216      	movs	r2, #22
 8001a0c:	601a      	str	r2, [r3, #0]
  return -1;
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <_exit>:

void _exit (int status)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a22:	f04f 31ff 	mov.w	r1, #4294967295
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ffe7 	bl	80019fa <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <_exit+0x12>

08001a30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	e00a      	b.n	8001a58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a42:	f3af 8000 	nop.w
 8001a46:	4601      	mov	r1, r0
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	1c5a      	adds	r2, r3, #1
 8001a4c:	60ba      	str	r2, [r7, #8]
 8001a4e:	b2ca      	uxtb	r2, r1
 8001a50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	3301      	adds	r3, #1
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	dbf0      	blt.n	8001a42 <_read+0x12>
  }

  return len;
 8001a60:	687b      	ldr	r3, [r7, #4]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b086      	sub	sp, #24
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	60f8      	str	r0, [r7, #12]
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	e009      	b.n	8001a90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	60ba      	str	r2, [r7, #8]
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	dbf1      	blt.n	8001a7c <_write+0x12>
  }
  return len;
 8001a98:	687b      	ldr	r3, [r7, #4]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <_close>:

int _close(int file)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ac8:	605a      	str	r2, [r3, #4]
  return 0;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <_isatty>:

int _isatty(int file)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ade:	2301      	movs	r3, #1
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr

08001aea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b085      	sub	sp, #20
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
	...

08001b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b0c:	4a14      	ldr	r2, [pc, #80]	@ (8001b60 <_sbrk+0x5c>)
 8001b0e:	4b15      	ldr	r3, [pc, #84]	@ (8001b64 <_sbrk+0x60>)
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b18:	4b13      	ldr	r3, [pc, #76]	@ (8001b68 <_sbrk+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d102      	bne.n	8001b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b20:	4b11      	ldr	r3, [pc, #68]	@ (8001b68 <_sbrk+0x64>)
 8001b22:	4a12      	ldr	r2, [pc, #72]	@ (8001b6c <_sbrk+0x68>)
 8001b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b26:	4b10      	ldr	r3, [pc, #64]	@ (8001b68 <_sbrk+0x64>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d207      	bcs.n	8001b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b34:	f002 fe4e 	bl	80047d4 <__errno>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b42:	e009      	b.n	8001b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b44:	4b08      	ldr	r3, [pc, #32]	@ (8001b68 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b4a:	4b07      	ldr	r3, [pc, #28]	@ (8001b68 <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	4a05      	ldr	r2, [pc, #20]	@ (8001b68 <_sbrk+0x64>)
 8001b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b56:	68fb      	ldr	r3, [r7, #12]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20005000 	.word	0x20005000
 8001b64:	00000400 	.word	0x00000400
 8001b68:	20000348 	.word	0x20000348
 8001b6c:	200004a0 	.word	0x200004a0

08001b70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b7c:	f7ff fff8 	bl	8001b70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b80:	480b      	ldr	r0, [pc, #44]	@ (8001bb0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b82:	490c      	ldr	r1, [pc, #48]	@ (8001bb4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b84:	4a0c      	ldr	r2, [pc, #48]	@ (8001bb8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b88:	e002      	b.n	8001b90 <LoopCopyDataInit>

08001b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8e:	3304      	adds	r3, #4

08001b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b94:	d3f9      	bcc.n	8001b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b96:	4a09      	ldr	r2, [pc, #36]	@ (8001bbc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b98:	4c09      	ldr	r4, [pc, #36]	@ (8001bc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b9c:	e001      	b.n	8001ba2 <LoopFillZerobss>

08001b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba0:	3204      	adds	r2, #4

08001ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba4:	d3fb      	bcc.n	8001b9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ba6:	f002 fe1b 	bl	80047e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001baa:	f7ff f9cb 	bl	8000f44 <main>
  bx lr
 8001bae:	4770      	bx	lr
  ldr r0, =_sdata
 8001bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb4:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 8001bb8:	08006fc8 	.word	0x08006fc8
  ldr r2, =_sbss
 8001bbc:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 8001bc0:	2000049c 	.word	0x2000049c

08001bc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bc4:	e7fe      	b.n	8001bc4 <ADC1_2_IRQHandler>
	...

08001bc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bcc:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <HAL_Init+0x28>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a07      	ldr	r2, [pc, #28]	@ (8001bf0 <HAL_Init+0x28>)
 8001bd2:	f043 0310 	orr.w	r3, r3, #16
 8001bd6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd8:	2003      	movs	r0, #3
 8001bda:	f000 f92b 	bl	8001e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bde:	200f      	movs	r0, #15
 8001be0:	f000 f808 	bl	8001bf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be4:	f7ff fe66 	bl	80018b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40022000 	.word	0x40022000

08001bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bfc:	4b12      	ldr	r3, [pc, #72]	@ (8001c48 <HAL_InitTick+0x54>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b12      	ldr	r3, [pc, #72]	@ (8001c4c <HAL_InitTick+0x58>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	4619      	mov	r1, r3
 8001c06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 f935 	bl	8001e82 <HAL_SYSTICK_Config>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e00e      	b.n	8001c40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b0f      	cmp	r3, #15
 8001c26:	d80a      	bhi.n	8001c3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c30:	f000 f90b 	bl	8001e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c34:	4a06      	ldr	r2, [pc, #24]	@ (8001c50 <HAL_InitTick+0x5c>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	e000      	b.n	8001c40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000090 	.word	0x20000090
 8001c4c:	20000098 	.word	0x20000098
 8001c50:	20000094 	.word	0x20000094

08001c54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c58:	4b05      	ldr	r3, [pc, #20]	@ (8001c70 <HAL_IncTick+0x1c>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <HAL_IncTick+0x20>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4413      	add	r3, r2
 8001c64:	4a03      	ldr	r2, [pc, #12]	@ (8001c74 <HAL_IncTick+0x20>)
 8001c66:	6013      	str	r3, [r2, #0]
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr
 8001c70:	20000098 	.word	0x20000098
 8001c74:	2000034c 	.word	0x2000034c

08001c78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c7c:	4b02      	ldr	r3, [pc, #8]	@ (8001c88 <HAL_GetTick+0x10>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr
 8001c88:	2000034c 	.word	0x2000034c

08001c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c94:	f7ff fff0 	bl	8001c78 <HAL_GetTick>
 8001c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca4:	d005      	beq.n	8001cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd0 <HAL_Delay+0x44>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4413      	add	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cb2:	bf00      	nop
 8001cb4:	f7ff ffe0 	bl	8001c78 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d8f7      	bhi.n	8001cb4 <HAL_Delay+0x28>
  {
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000098 	.word	0x20000098

08001cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d06:	4a04      	ldr	r2, [pc, #16]	@ (8001d18 <__NVIC_SetPriorityGrouping+0x44>)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	60d3      	str	r3, [r2, #12]
}
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d20:	4b04      	ldr	r3, [pc, #16]	@ (8001d34 <__NVIC_GetPriorityGrouping+0x18>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	0a1b      	lsrs	r3, r3, #8
 8001d26:	f003 0307 	and.w	r3, r3, #7
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	6039      	str	r1, [r7, #0]
 8001d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	db0a      	blt.n	8001d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	490c      	ldr	r1, [pc, #48]	@ (8001d84 <__NVIC_SetPriority+0x4c>)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	0112      	lsls	r2, r2, #4
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d60:	e00a      	b.n	8001d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	4908      	ldr	r1, [pc, #32]	@ (8001d88 <__NVIC_SetPriority+0x50>)
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	3b04      	subs	r3, #4
 8001d70:	0112      	lsls	r2, r2, #4
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	440b      	add	r3, r1
 8001d76:	761a      	strb	r2, [r3, #24]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000e100 	.word	0xe000e100
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b089      	sub	sp, #36	@ 0x24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f1c3 0307 	rsb	r3, r3, #7
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	bf28      	it	cs
 8001daa:	2304      	movcs	r3, #4
 8001dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3304      	adds	r3, #4
 8001db2:	2b06      	cmp	r3, #6
 8001db4:	d902      	bls.n	8001dbc <NVIC_EncodePriority+0x30>
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3b03      	subs	r3, #3
 8001dba:	e000      	b.n	8001dbe <NVIC_EncodePriority+0x32>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	401a      	ands	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	43d9      	mvns	r1, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	4313      	orrs	r3, r2
         );
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3724      	adds	r7, #36	@ 0x24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e00:	d301      	bcc.n	8001e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e02:	2301      	movs	r3, #1
 8001e04:	e00f      	b.n	8001e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e06:	4a0a      	ldr	r2, [pc, #40]	@ (8001e30 <SysTick_Config+0x40>)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e0e:	210f      	movs	r1, #15
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295
 8001e14:	f7ff ff90 	bl	8001d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e18:	4b05      	ldr	r3, [pc, #20]	@ (8001e30 <SysTick_Config+0x40>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1e:	4b04      	ldr	r3, [pc, #16]	@ (8001e30 <SysTick_Config+0x40>)
 8001e20:	2207      	movs	r2, #7
 8001e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	e000e010 	.word	0xe000e010

08001e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff ff49 	bl	8001cd4 <__NVIC_SetPriorityGrouping>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e5c:	f7ff ff5e 	bl	8001d1c <__NVIC_GetPriorityGrouping>
 8001e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	6978      	ldr	r0, [r7, #20]
 8001e68:	f7ff ff90 	bl	8001d8c <NVIC_EncodePriority>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff5f 	bl	8001d38 <__NVIC_SetPriority>
}
 8001e7a:	bf00      	nop
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff ffb0 	bl	8001df0 <SysTick_Config>
 8001e90:	4603      	mov	r3, r0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b08b      	sub	sp, #44	@ 0x2c
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eae:	e169      	b.n	8002184 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	69fa      	ldr	r2, [r7, #28]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	f040 8158 	bne.w	800217e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	4a9a      	ldr	r2, [pc, #616]	@ (800213c <HAL_GPIO_Init+0x2a0>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d05e      	beq.n	8001f96 <HAL_GPIO_Init+0xfa>
 8001ed8:	4a98      	ldr	r2, [pc, #608]	@ (800213c <HAL_GPIO_Init+0x2a0>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d875      	bhi.n	8001fca <HAL_GPIO_Init+0x12e>
 8001ede:	4a98      	ldr	r2, [pc, #608]	@ (8002140 <HAL_GPIO_Init+0x2a4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d058      	beq.n	8001f96 <HAL_GPIO_Init+0xfa>
 8001ee4:	4a96      	ldr	r2, [pc, #600]	@ (8002140 <HAL_GPIO_Init+0x2a4>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d86f      	bhi.n	8001fca <HAL_GPIO_Init+0x12e>
 8001eea:	4a96      	ldr	r2, [pc, #600]	@ (8002144 <HAL_GPIO_Init+0x2a8>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d052      	beq.n	8001f96 <HAL_GPIO_Init+0xfa>
 8001ef0:	4a94      	ldr	r2, [pc, #592]	@ (8002144 <HAL_GPIO_Init+0x2a8>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d869      	bhi.n	8001fca <HAL_GPIO_Init+0x12e>
 8001ef6:	4a94      	ldr	r2, [pc, #592]	@ (8002148 <HAL_GPIO_Init+0x2ac>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d04c      	beq.n	8001f96 <HAL_GPIO_Init+0xfa>
 8001efc:	4a92      	ldr	r2, [pc, #584]	@ (8002148 <HAL_GPIO_Init+0x2ac>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d863      	bhi.n	8001fca <HAL_GPIO_Init+0x12e>
 8001f02:	4a92      	ldr	r2, [pc, #584]	@ (800214c <HAL_GPIO_Init+0x2b0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d046      	beq.n	8001f96 <HAL_GPIO_Init+0xfa>
 8001f08:	4a90      	ldr	r2, [pc, #576]	@ (800214c <HAL_GPIO_Init+0x2b0>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d85d      	bhi.n	8001fca <HAL_GPIO_Init+0x12e>
 8001f0e:	2b12      	cmp	r3, #18
 8001f10:	d82a      	bhi.n	8001f68 <HAL_GPIO_Init+0xcc>
 8001f12:	2b12      	cmp	r3, #18
 8001f14:	d859      	bhi.n	8001fca <HAL_GPIO_Init+0x12e>
 8001f16:	a201      	add	r2, pc, #4	@ (adr r2, 8001f1c <HAL_GPIO_Init+0x80>)
 8001f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1c:	08001f97 	.word	0x08001f97
 8001f20:	08001f71 	.word	0x08001f71
 8001f24:	08001f83 	.word	0x08001f83
 8001f28:	08001fc5 	.word	0x08001fc5
 8001f2c:	08001fcb 	.word	0x08001fcb
 8001f30:	08001fcb 	.word	0x08001fcb
 8001f34:	08001fcb 	.word	0x08001fcb
 8001f38:	08001fcb 	.word	0x08001fcb
 8001f3c:	08001fcb 	.word	0x08001fcb
 8001f40:	08001fcb 	.word	0x08001fcb
 8001f44:	08001fcb 	.word	0x08001fcb
 8001f48:	08001fcb 	.word	0x08001fcb
 8001f4c:	08001fcb 	.word	0x08001fcb
 8001f50:	08001fcb 	.word	0x08001fcb
 8001f54:	08001fcb 	.word	0x08001fcb
 8001f58:	08001fcb 	.word	0x08001fcb
 8001f5c:	08001fcb 	.word	0x08001fcb
 8001f60:	08001f79 	.word	0x08001f79
 8001f64:	08001f8d 	.word	0x08001f8d
 8001f68:	4a79      	ldr	r2, [pc, #484]	@ (8002150 <HAL_GPIO_Init+0x2b4>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d013      	beq.n	8001f96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f6e:	e02c      	b.n	8001fca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	623b      	str	r3, [r7, #32]
          break;
 8001f76:	e029      	b.n	8001fcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	623b      	str	r3, [r7, #32]
          break;
 8001f80:	e024      	b.n	8001fcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	3308      	adds	r3, #8
 8001f88:	623b      	str	r3, [r7, #32]
          break;
 8001f8a:	e01f      	b.n	8001fcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	330c      	adds	r3, #12
 8001f92:	623b      	str	r3, [r7, #32]
          break;
 8001f94:	e01a      	b.n	8001fcc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d102      	bne.n	8001fa4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f9e:	2304      	movs	r3, #4
 8001fa0:	623b      	str	r3, [r7, #32]
          break;
 8001fa2:	e013      	b.n	8001fcc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d105      	bne.n	8001fb8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fac:	2308      	movs	r3, #8
 8001fae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69fa      	ldr	r2, [r7, #28]
 8001fb4:	611a      	str	r2, [r3, #16]
          break;
 8001fb6:	e009      	b.n	8001fcc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fb8:	2308      	movs	r3, #8
 8001fba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69fa      	ldr	r2, [r7, #28]
 8001fc0:	615a      	str	r2, [r3, #20]
          break;
 8001fc2:	e003      	b.n	8001fcc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	623b      	str	r3, [r7, #32]
          break;
 8001fc8:	e000      	b.n	8001fcc <HAL_GPIO_Init+0x130>
          break;
 8001fca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	2bff      	cmp	r3, #255	@ 0xff
 8001fd0:	d801      	bhi.n	8001fd6 <HAL_GPIO_Init+0x13a>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	e001      	b.n	8001fda <HAL_GPIO_Init+0x13e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	2bff      	cmp	r3, #255	@ 0xff
 8001fe0:	d802      	bhi.n	8001fe8 <HAL_GPIO_Init+0x14c>
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	e002      	b.n	8001fee <HAL_GPIO_Init+0x152>
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fea:	3b08      	subs	r3, #8
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	210f      	movs	r1, #15
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	401a      	ands	r2, r3
 8002000:	6a39      	ldr	r1, [r7, #32]
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	fa01 f303 	lsl.w	r3, r1, r3
 8002008:	431a      	orrs	r2, r3
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 80b1 	beq.w	800217e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800201c:	4b4d      	ldr	r3, [pc, #308]	@ (8002154 <HAL_GPIO_Init+0x2b8>)
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	4a4c      	ldr	r2, [pc, #304]	@ (8002154 <HAL_GPIO_Init+0x2b8>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	6193      	str	r3, [r2, #24]
 8002028:	4b4a      	ldr	r3, [pc, #296]	@ (8002154 <HAL_GPIO_Init+0x2b8>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002034:	4a48      	ldr	r2, [pc, #288]	@ (8002158 <HAL_GPIO_Init+0x2bc>)
 8002036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002038:	089b      	lsrs	r3, r3, #2
 800203a:	3302      	adds	r3, #2
 800203c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002040:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	220f      	movs	r2, #15
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	4013      	ands	r3, r2
 8002056:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a40      	ldr	r2, [pc, #256]	@ (800215c <HAL_GPIO_Init+0x2c0>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d013      	beq.n	8002088 <HAL_GPIO_Init+0x1ec>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a3f      	ldr	r2, [pc, #252]	@ (8002160 <HAL_GPIO_Init+0x2c4>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d00d      	beq.n	8002084 <HAL_GPIO_Init+0x1e8>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a3e      	ldr	r2, [pc, #248]	@ (8002164 <HAL_GPIO_Init+0x2c8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d007      	beq.n	8002080 <HAL_GPIO_Init+0x1e4>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a3d      	ldr	r2, [pc, #244]	@ (8002168 <HAL_GPIO_Init+0x2cc>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d101      	bne.n	800207c <HAL_GPIO_Init+0x1e0>
 8002078:	2303      	movs	r3, #3
 800207a:	e006      	b.n	800208a <HAL_GPIO_Init+0x1ee>
 800207c:	2304      	movs	r3, #4
 800207e:	e004      	b.n	800208a <HAL_GPIO_Init+0x1ee>
 8002080:	2302      	movs	r3, #2
 8002082:	e002      	b.n	800208a <HAL_GPIO_Init+0x1ee>
 8002084:	2301      	movs	r3, #1
 8002086:	e000      	b.n	800208a <HAL_GPIO_Init+0x1ee>
 8002088:	2300      	movs	r3, #0
 800208a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800208c:	f002 0203 	and.w	r2, r2, #3
 8002090:	0092      	lsls	r2, r2, #2
 8002092:	4093      	lsls	r3, r2
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	4313      	orrs	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800209a:	492f      	ldr	r1, [pc, #188]	@ (8002158 <HAL_GPIO_Init+0x2bc>)
 800209c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209e:	089b      	lsrs	r3, r3, #2
 80020a0:	3302      	adds	r3, #2
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d006      	beq.n	80020c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020b4:	4b2d      	ldr	r3, [pc, #180]	@ (800216c <HAL_GPIO_Init+0x2d0>)
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	492c      	ldr	r1, [pc, #176]	@ (800216c <HAL_GPIO_Init+0x2d0>)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	4313      	orrs	r3, r2
 80020be:	608b      	str	r3, [r1, #8]
 80020c0:	e006      	b.n	80020d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020c2:	4b2a      	ldr	r3, [pc, #168]	@ (800216c <HAL_GPIO_Init+0x2d0>)
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	43db      	mvns	r3, r3
 80020ca:	4928      	ldr	r1, [pc, #160]	@ (800216c <HAL_GPIO_Init+0x2d0>)
 80020cc:	4013      	ands	r3, r2
 80020ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d006      	beq.n	80020ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020dc:	4b23      	ldr	r3, [pc, #140]	@ (800216c <HAL_GPIO_Init+0x2d0>)
 80020de:	68da      	ldr	r2, [r3, #12]
 80020e0:	4922      	ldr	r1, [pc, #136]	@ (800216c <HAL_GPIO_Init+0x2d0>)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	60cb      	str	r3, [r1, #12]
 80020e8:	e006      	b.n	80020f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020ea:	4b20      	ldr	r3, [pc, #128]	@ (800216c <HAL_GPIO_Init+0x2d0>)
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	491e      	ldr	r1, [pc, #120]	@ (800216c <HAL_GPIO_Init+0x2d0>)
 80020f4:	4013      	ands	r3, r2
 80020f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d006      	beq.n	8002112 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002104:	4b19      	ldr	r3, [pc, #100]	@ (800216c <HAL_GPIO_Init+0x2d0>)
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	4918      	ldr	r1, [pc, #96]	@ (800216c <HAL_GPIO_Init+0x2d0>)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	4313      	orrs	r3, r2
 800210e:	604b      	str	r3, [r1, #4]
 8002110:	e006      	b.n	8002120 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002112:	4b16      	ldr	r3, [pc, #88]	@ (800216c <HAL_GPIO_Init+0x2d0>)
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	43db      	mvns	r3, r3
 800211a:	4914      	ldr	r1, [pc, #80]	@ (800216c <HAL_GPIO_Init+0x2d0>)
 800211c:	4013      	ands	r3, r2
 800211e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d021      	beq.n	8002170 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800212c:	4b0f      	ldr	r3, [pc, #60]	@ (800216c <HAL_GPIO_Init+0x2d0>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	490e      	ldr	r1, [pc, #56]	@ (800216c <HAL_GPIO_Init+0x2d0>)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	4313      	orrs	r3, r2
 8002136:	600b      	str	r3, [r1, #0]
 8002138:	e021      	b.n	800217e <HAL_GPIO_Init+0x2e2>
 800213a:	bf00      	nop
 800213c:	10320000 	.word	0x10320000
 8002140:	10310000 	.word	0x10310000
 8002144:	10220000 	.word	0x10220000
 8002148:	10210000 	.word	0x10210000
 800214c:	10120000 	.word	0x10120000
 8002150:	10110000 	.word	0x10110000
 8002154:	40021000 	.word	0x40021000
 8002158:	40010000 	.word	0x40010000
 800215c:	40010800 	.word	0x40010800
 8002160:	40010c00 	.word	0x40010c00
 8002164:	40011000 	.word	0x40011000
 8002168:	40011400 	.word	0x40011400
 800216c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002170:	4b0b      	ldr	r3, [pc, #44]	@ (80021a0 <HAL_GPIO_Init+0x304>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	43db      	mvns	r3, r3
 8002178:	4909      	ldr	r1, [pc, #36]	@ (80021a0 <HAL_GPIO_Init+0x304>)
 800217a:	4013      	ands	r3, r2
 800217c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800217e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002180:	3301      	adds	r3, #1
 8002182:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218a:	fa22 f303 	lsr.w	r3, r2, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	f47f ae8e 	bne.w	8001eb0 <HAL_GPIO_Init+0x14>
  }
}
 8002194:	bf00      	nop
 8002196:	bf00      	nop
 8002198:	372c      	adds	r7, #44	@ 0x2c
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr
 80021a0:	40010400 	.word	0x40010400

080021a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e12b      	b.n	800240e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d106      	bne.n	80021d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff fba4 	bl	8001918 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2224      	movs	r2, #36	@ 0x24
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0201 	bic.w	r2, r2, #1
 80021e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002206:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002208:	f001 fbfc 	bl	8003a04 <HAL_RCC_GetPCLK1Freq>
 800220c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	4a81      	ldr	r2, [pc, #516]	@ (8002418 <HAL_I2C_Init+0x274>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d807      	bhi.n	8002228 <HAL_I2C_Init+0x84>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4a80      	ldr	r2, [pc, #512]	@ (800241c <HAL_I2C_Init+0x278>)
 800221c:	4293      	cmp	r3, r2
 800221e:	bf94      	ite	ls
 8002220:	2301      	movls	r3, #1
 8002222:	2300      	movhi	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	e006      	b.n	8002236 <HAL_I2C_Init+0x92>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4a7d      	ldr	r2, [pc, #500]	@ (8002420 <HAL_I2C_Init+0x27c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	bf94      	ite	ls
 8002230:	2301      	movls	r3, #1
 8002232:	2300      	movhi	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e0e7      	b.n	800240e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	4a78      	ldr	r2, [pc, #480]	@ (8002424 <HAL_I2C_Init+0x280>)
 8002242:	fba2 2303 	umull	r2, r3, r2, r3
 8002246:	0c9b      	lsrs	r3, r3, #18
 8002248:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	430a      	orrs	r2, r1
 800225c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	4a6a      	ldr	r2, [pc, #424]	@ (8002418 <HAL_I2C_Init+0x274>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d802      	bhi.n	8002278 <HAL_I2C_Init+0xd4>
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	3301      	adds	r3, #1
 8002276:	e009      	b.n	800228c <HAL_I2C_Init+0xe8>
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800227e:	fb02 f303 	mul.w	r3, r2, r3
 8002282:	4a69      	ldr	r2, [pc, #420]	@ (8002428 <HAL_I2C_Init+0x284>)
 8002284:	fba2 2303 	umull	r2, r3, r2, r3
 8002288:	099b      	lsrs	r3, r3, #6
 800228a:	3301      	adds	r3, #1
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	430b      	orrs	r3, r1
 8002292:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800229e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	495c      	ldr	r1, [pc, #368]	@ (8002418 <HAL_I2C_Init+0x274>)
 80022a8:	428b      	cmp	r3, r1
 80022aa:	d819      	bhi.n	80022e0 <HAL_I2C_Init+0x13c>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	1e59      	subs	r1, r3, #1
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80022ba:	1c59      	adds	r1, r3, #1
 80022bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80022c0:	400b      	ands	r3, r1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00a      	beq.n	80022dc <HAL_I2C_Init+0x138>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1e59      	subs	r1, r3, #1
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80022d4:	3301      	adds	r3, #1
 80022d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022da:	e051      	b.n	8002380 <HAL_I2C_Init+0x1dc>
 80022dc:	2304      	movs	r3, #4
 80022de:	e04f      	b.n	8002380 <HAL_I2C_Init+0x1dc>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d111      	bne.n	800230c <HAL_I2C_Init+0x168>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	1e58      	subs	r0, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6859      	ldr	r1, [r3, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	440b      	add	r3, r1
 80022f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022fa:	3301      	adds	r3, #1
 80022fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002300:	2b00      	cmp	r3, #0
 8002302:	bf0c      	ite	eq
 8002304:	2301      	moveq	r3, #1
 8002306:	2300      	movne	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	e012      	b.n	8002332 <HAL_I2C_Init+0x18e>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	1e58      	subs	r0, r3, #1
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6859      	ldr	r1, [r3, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	0099      	lsls	r1, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002322:	3301      	adds	r3, #1
 8002324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002328:	2b00      	cmp	r3, #0
 800232a:	bf0c      	ite	eq
 800232c:	2301      	moveq	r3, #1
 800232e:	2300      	movne	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_I2C_Init+0x196>
 8002336:	2301      	movs	r3, #1
 8002338:	e022      	b.n	8002380 <HAL_I2C_Init+0x1dc>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10e      	bne.n	8002360 <HAL_I2C_Init+0x1bc>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	1e58      	subs	r0, r3, #1
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6859      	ldr	r1, [r3, #4]
 800234a:	460b      	mov	r3, r1
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	440b      	add	r3, r1
 8002350:	fbb0 f3f3 	udiv	r3, r0, r3
 8002354:	3301      	adds	r3, #1
 8002356:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800235a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800235e:	e00f      	b.n	8002380 <HAL_I2C_Init+0x1dc>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	1e58      	subs	r0, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6859      	ldr	r1, [r3, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	0099      	lsls	r1, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	fbb0 f3f3 	udiv	r3, r0, r3
 8002376:	3301      	adds	r3, #1
 8002378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800237c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	6809      	ldr	r1, [r1, #0]
 8002384:	4313      	orrs	r3, r2
 8002386:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69da      	ldr	r2, [r3, #28]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80023ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6911      	ldr	r1, [r2, #16]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	68d2      	ldr	r2, [r2, #12]
 80023ba:	4311      	orrs	r1, r2
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	430b      	orrs	r3, r1
 80023c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695a      	ldr	r2, [r3, #20]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0201 	orr.w	r2, r2, #1
 80023ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2220      	movs	r2, #32
 80023fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	000186a0 	.word	0x000186a0
 800241c:	001e847f 	.word	0x001e847f
 8002420:	003d08ff 	.word	0x003d08ff
 8002424:	431bde83 	.word	0x431bde83
 8002428:	10624dd3 	.word	0x10624dd3

0800242c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b088      	sub	sp, #32
 8002430:	af02      	add	r7, sp, #8
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	4608      	mov	r0, r1
 8002436:	4611      	mov	r1, r2
 8002438:	461a      	mov	r2, r3
 800243a:	4603      	mov	r3, r0
 800243c:	817b      	strh	r3, [r7, #10]
 800243e:	460b      	mov	r3, r1
 8002440:	813b      	strh	r3, [r7, #8]
 8002442:	4613      	mov	r3, r2
 8002444:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002446:	f7ff fc17 	bl	8001c78 <HAL_GetTick>
 800244a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b20      	cmp	r3, #32
 8002456:	f040 80d9 	bne.w	800260c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	2319      	movs	r3, #25
 8002460:	2201      	movs	r2, #1
 8002462:	496d      	ldr	r1, [pc, #436]	@ (8002618 <HAL_I2C_Mem_Write+0x1ec>)
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 fccd 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002470:	2302      	movs	r3, #2
 8002472:	e0cc      	b.n	800260e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800247a:	2b01      	cmp	r3, #1
 800247c:	d101      	bne.n	8002482 <HAL_I2C_Mem_Write+0x56>
 800247e:	2302      	movs	r3, #2
 8002480:	e0c5      	b.n	800260e <HAL_I2C_Mem_Write+0x1e2>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b01      	cmp	r3, #1
 8002496:	d007      	beq.n	80024a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2221      	movs	r2, #33	@ 0x21
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2240      	movs	r2, #64	@ 0x40
 80024c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6a3a      	ldr	r2, [r7, #32]
 80024d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80024d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024de:	b29a      	uxth	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4a4d      	ldr	r2, [pc, #308]	@ (800261c <HAL_I2C_Mem_Write+0x1f0>)
 80024e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024ea:	88f8      	ldrh	r0, [r7, #6]
 80024ec:	893a      	ldrh	r2, [r7, #8]
 80024ee:	8979      	ldrh	r1, [r7, #10]
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	9301      	str	r3, [sp, #4]
 80024f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	4603      	mov	r3, r0
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 fb04 	bl	8002b08 <I2C_RequestMemoryWrite>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d052      	beq.n	80025ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e081      	b.n	800260e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 fd92 	bl	8003038 <I2C_WaitOnTXEFlagUntilTimeout>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00d      	beq.n	8002536 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251e:	2b04      	cmp	r3, #4
 8002520:	d107      	bne.n	8002532 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002530:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e06b      	b.n	800260e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253a:	781a      	ldrb	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800255c:	b29b      	uxth	r3, r3
 800255e:	3b01      	subs	r3, #1
 8002560:	b29a      	uxth	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b04      	cmp	r3, #4
 8002572:	d11b      	bne.n	80025ac <HAL_I2C_Mem_Write+0x180>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002578:	2b00      	cmp	r3, #0
 800257a:	d017      	beq.n	80025ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002580:	781a      	ldrb	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002596:	3b01      	subs	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	3b01      	subs	r3, #1
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1aa      	bne.n	800250a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 fd85 	bl	80030c8 <I2C_WaitOnBTFFlagUntilTimeout>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00d      	beq.n	80025e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d107      	bne.n	80025dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e016      	b.n	800260e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2220      	movs	r2, #32
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002608:	2300      	movs	r3, #0
 800260a:	e000      	b.n	800260e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800260c:	2302      	movs	r3, #2
  }
}
 800260e:	4618      	mov	r0, r3
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	00100002 	.word	0x00100002
 800261c:	ffff0000 	.word	0xffff0000

08002620 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08c      	sub	sp, #48	@ 0x30
 8002624:	af02      	add	r7, sp, #8
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	4608      	mov	r0, r1
 800262a:	4611      	mov	r1, r2
 800262c:	461a      	mov	r2, r3
 800262e:	4603      	mov	r3, r0
 8002630:	817b      	strh	r3, [r7, #10]
 8002632:	460b      	mov	r3, r1
 8002634:	813b      	strh	r3, [r7, #8]
 8002636:	4613      	mov	r3, r2
 8002638:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800263a:	2300      	movs	r3, #0
 800263c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800263e:	f7ff fb1b 	bl	8001c78 <HAL_GetTick>
 8002642:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b20      	cmp	r3, #32
 800264e:	f040 8250 	bne.w	8002af2 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	2319      	movs	r3, #25
 8002658:	2201      	movs	r2, #1
 800265a:	4982      	ldr	r1, [pc, #520]	@ (8002864 <HAL_I2C_Mem_Read+0x244>)
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 fbd1 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002668:	2302      	movs	r3, #2
 800266a:	e243      	b.n	8002af4 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002672:	2b01      	cmp	r3, #1
 8002674:	d101      	bne.n	800267a <HAL_I2C_Mem_Read+0x5a>
 8002676:	2302      	movs	r3, #2
 8002678:	e23c      	b.n	8002af4 <HAL_I2C_Mem_Read+0x4d4>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b01      	cmp	r3, #1
 800268e:	d007      	beq.n	80026a0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0201 	orr.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2222      	movs	r2, #34	@ 0x22
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2240      	movs	r2, #64	@ 0x40
 80026bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80026d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4a62      	ldr	r2, [pc, #392]	@ (8002868 <HAL_I2C_Mem_Read+0x248>)
 80026e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026e2:	88f8      	ldrh	r0, [r7, #6]
 80026e4:	893a      	ldrh	r2, [r7, #8]
 80026e6:	8979      	ldrh	r1, [r7, #10]
 80026e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ea:	9301      	str	r3, [sp, #4]
 80026ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	4603      	mov	r3, r0
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 fa9e 	bl	8002c34 <I2C_RequestMemoryRead>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e1f8      	b.n	8002af4 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002706:	2b00      	cmp	r3, #0
 8002708:	d113      	bne.n	8002732 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800270a:	2300      	movs	r3, #0
 800270c:	61fb      	str	r3, [r7, #28]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	61fb      	str	r3, [r7, #28]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	61fb      	str	r3, [r7, #28]
 800271e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	e1cc      	b.n	8002acc <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002736:	2b01      	cmp	r3, #1
 8002738:	d11e      	bne.n	8002778 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002748:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800274a:	b672      	cpsid	i
}
 800274c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800274e:	2300      	movs	r3, #0
 8002750:	61bb      	str	r3, [r7, #24]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	61bb      	str	r3, [r7, #24]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	61bb      	str	r3, [r7, #24]
 8002762:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002772:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002774:	b662      	cpsie	i
}
 8002776:	e035      	b.n	80027e4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800277c:	2b02      	cmp	r3, #2
 800277e:	d11e      	bne.n	80027be <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800278e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002790:	b672      	cpsid	i
}
 8002792:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80027ba:	b662      	cpsie	i
}
 80027bc:	e012      	b.n	80027e4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80027cc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ce:	2300      	movs	r3, #0
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80027e4:	e172      	b.n	8002acc <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ea:	2b03      	cmp	r3, #3
 80027ec:	f200 811f 	bhi.w	8002a2e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d123      	bne.n	8002840 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 fcab 	bl	8003158 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e173      	b.n	8002af4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	691a      	ldr	r2, [r3, #16]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281e:	1c5a      	adds	r2, r3, #1
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002828:	3b01      	subs	r3, #1
 800282a:	b29a      	uxth	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002834:	b29b      	uxth	r3, r3
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800283e:	e145      	b.n	8002acc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002844:	2b02      	cmp	r3, #2
 8002846:	d152      	bne.n	80028ee <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800284e:	2200      	movs	r2, #0
 8002850:	4906      	ldr	r1, [pc, #24]	@ (800286c <HAL_I2C_Mem_Read+0x24c>)
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 fad6 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d008      	beq.n	8002870 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e148      	b.n	8002af4 <HAL_I2C_Mem_Read+0x4d4>
 8002862:	bf00      	nop
 8002864:	00100002 	.word	0x00100002
 8002868:	ffff0000 	.word	0xffff0000
 800286c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002870:	b672      	cpsid	i
}
 8002872:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002882:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	691a      	ldr	r2, [r3, #16]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002896:	1c5a      	adds	r2, r3, #1
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80028b6:	b662      	cpsie	i
}
 80028b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028ec:	e0ee      	b.n	8002acc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028f4:	2200      	movs	r2, #0
 80028f6:	4981      	ldr	r1, [pc, #516]	@ (8002afc <HAL_I2C_Mem_Read+0x4dc>)
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 fa83 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e0f5      	b.n	8002af4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002916:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002918:	b672      	cpsid	i
}
 800291a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	691a      	ldr	r2, [r3, #16]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292e:	1c5a      	adds	r2, r3, #1
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002938:	3b01      	subs	r3, #1
 800293a:	b29a      	uxth	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002944:	b29b      	uxth	r3, r3
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800294e:	4b6c      	ldr	r3, [pc, #432]	@ (8002b00 <HAL_I2C_Mem_Read+0x4e0>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	08db      	lsrs	r3, r3, #3
 8002954:	4a6b      	ldr	r2, [pc, #428]	@ (8002b04 <HAL_I2C_Mem_Read+0x4e4>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	0a1a      	lsrs	r2, r3, #8
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	00da      	lsls	r2, r3, #3
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002968:	6a3b      	ldr	r3, [r7, #32]
 800296a:	3b01      	subs	r3, #1
 800296c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d118      	bne.n	80029a6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2220      	movs	r2, #32
 800297e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	f043 0220 	orr.w	r2, r3, #32
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002996:	b662      	cpsie	i
}
 8002998:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e0a6      	b.n	8002af4 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b04      	cmp	r3, #4
 80029b2:	d1d9      	bne.n	8002968 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691a      	ldr	r2, [r3, #16]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80029f6:	b662      	cpsie	i
}
 80029f8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0c:	1c5a      	adds	r2, r3, #1
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	3b01      	subs	r3, #1
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a2c:	e04e      	b.n	8002acc <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a30:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 fb90 	bl	8003158 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e058      	b.n	8002af4 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	691a      	ldr	r2, [r3, #16]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	d124      	bne.n	8002acc <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	d107      	bne.n	8002a9a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a98:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f47f ae88 	bne.w	80027e6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	e000      	b.n	8002af4 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002af2:	2302      	movs	r3, #2
  }
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3728      	adds	r7, #40	@ 0x28
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	00010004 	.word	0x00010004
 8002b00:	20000090 	.word	0x20000090
 8002b04:	14f8b589 	.word	0x14f8b589

08002b08 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af02      	add	r7, sp, #8
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	4608      	mov	r0, r1
 8002b12:	4611      	mov	r1, r2
 8002b14:	461a      	mov	r2, r3
 8002b16:	4603      	mov	r3, r0
 8002b18:	817b      	strh	r3, [r7, #10]
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	813b      	strh	r3, [r7, #8]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 f960 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00d      	beq.n	8002b66 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b58:	d103      	bne.n	8002b62 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b60:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e05f      	b.n	8002c26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b66:	897b      	ldrh	r3, [r7, #10]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b78:	6a3a      	ldr	r2, [r7, #32]
 8002b7a:	492d      	ldr	r1, [pc, #180]	@ (8002c30 <I2C_RequestMemoryWrite+0x128>)
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 f9bb 	bl	8002ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e04c      	b.n	8002c26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ba2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ba4:	6a39      	ldr	r1, [r7, #32]
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 fa46 	bl	8003038 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00d      	beq.n	8002bce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d107      	bne.n	8002bca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e02b      	b.n	8002c26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d105      	bne.n	8002be0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bd4:	893b      	ldrh	r3, [r7, #8]
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	611a      	str	r2, [r3, #16]
 8002bde:	e021      	b.n	8002c24 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002be0:	893b      	ldrh	r3, [r7, #8]
 8002be2:	0a1b      	lsrs	r3, r3, #8
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bf0:	6a39      	ldr	r1, [r7, #32]
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 fa20 	bl	8003038 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00d      	beq.n	8002c1a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d107      	bne.n	8002c16 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e005      	b.n	8002c26 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c1a:	893b      	ldrh	r3, [r7, #8]
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	00010002 	.word	0x00010002

08002c34 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af02      	add	r7, sp, #8
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	4608      	mov	r0, r1
 8002c3e:	4611      	mov	r1, r2
 8002c40:	461a      	mov	r2, r3
 8002c42:	4603      	mov	r3, r0
 8002c44:	817b      	strh	r3, [r7, #10]
 8002c46:	460b      	mov	r3, r1
 8002c48:	813b      	strh	r3, [r7, #8]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c5c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f8c2 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00d      	beq.n	8002ca2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c94:	d103      	bne.n	8002c9e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e0aa      	b.n	8002df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ca2:	897b      	ldrh	r3, [r7, #10]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002cb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb4:	6a3a      	ldr	r2, [r7, #32]
 8002cb6:	4952      	ldr	r1, [pc, #328]	@ (8002e00 <I2C_RequestMemoryRead+0x1cc>)
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 f91d 	bl	8002ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e097      	b.n	8002df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ce0:	6a39      	ldr	r1, [r7, #32]
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 f9a8 	bl	8003038 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00d      	beq.n	8002d0a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d107      	bne.n	8002d06 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e076      	b.n	8002df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d0a:	88fb      	ldrh	r3, [r7, #6]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d105      	bne.n	8002d1c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d10:	893b      	ldrh	r3, [r7, #8]
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	611a      	str	r2, [r3, #16]
 8002d1a:	e021      	b.n	8002d60 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d1c:	893b      	ldrh	r3, [r7, #8]
 8002d1e:	0a1b      	lsrs	r3, r3, #8
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d2c:	6a39      	ldr	r1, [r7, #32]
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 f982 	bl	8003038 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00d      	beq.n	8002d56 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d107      	bne.n	8002d52 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e050      	b.n	8002df8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d56:	893b      	ldrh	r3, [r7, #8]
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d62:	6a39      	ldr	r1, [r7, #32]
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f967 	bl	8003038 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00d      	beq.n	8002d8c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d107      	bne.n	8002d88 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d86:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e035      	b.n	8002df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d9a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 f82b 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00d      	beq.n	8002dd0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dc2:	d103      	bne.n	8002dcc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e013      	b.n	8002df8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002dd0:	897b      	ldrh	r3, [r7, #10]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de2:	6a3a      	ldr	r2, [r7, #32]
 8002de4:	4906      	ldr	r1, [pc, #24]	@ (8002e00 <I2C_RequestMemoryRead+0x1cc>)
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 f886 	bl	8002ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e000      	b.n	8002df8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	00010002 	.word	0x00010002

08002e04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	603b      	str	r3, [r7, #0]
 8002e10:	4613      	mov	r3, r2
 8002e12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e14:	e048      	b.n	8002ea8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1c:	d044      	beq.n	8002ea8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e1e:	f7fe ff2b 	bl	8001c78 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d302      	bcc.n	8002e34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d139      	bne.n	8002ea8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	0c1b      	lsrs	r3, r3, #16
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d10d      	bne.n	8002e5a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	43da      	mvns	r2, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	e00c      	b.n	8002e74 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	43da      	mvns	r2, r3
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	4013      	ands	r3, r2
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	bf0c      	ite	eq
 8002e6c:	2301      	moveq	r3, #1
 8002e6e:	2300      	movne	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	461a      	mov	r2, r3
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d116      	bne.n	8002ea8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e94:	f043 0220 	orr.w	r2, r3, #32
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e023      	b.n	8002ef0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	0c1b      	lsrs	r3, r3, #16
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d10d      	bne.n	8002ece <I2C_WaitOnFlagUntilTimeout+0xca>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	43da      	mvns	r2, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	bf0c      	ite	eq
 8002ec4:	2301      	moveq	r3, #1
 8002ec6:	2300      	movne	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	e00c      	b.n	8002ee8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	43da      	mvns	r2, r3
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	bf0c      	ite	eq
 8002ee0:	2301      	moveq	r3, #1
 8002ee2:	2300      	movne	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	79fb      	ldrb	r3, [r7, #7]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d093      	beq.n	8002e16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
 8002f04:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f06:	e071      	b.n	8002fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f16:	d123      	bne.n	8002f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f26:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4c:	f043 0204 	orr.w	r2, r3, #4
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e067      	b.n	8003030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f66:	d041      	beq.n	8002fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f68:	f7fe fe86 	bl	8001c78 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d302      	bcc.n	8002f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d136      	bne.n	8002fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	0c1b      	lsrs	r3, r3, #16
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d10c      	bne.n	8002fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	43da      	mvns	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	4013      	ands	r3, r2
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	bf14      	ite	ne
 8002f9a:	2301      	movne	r3, #1
 8002f9c:	2300      	moveq	r3, #0
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	e00b      	b.n	8002fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	43da      	mvns	r2, r3
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	4013      	ands	r3, r2
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	bf14      	ite	ne
 8002fb4:	2301      	movne	r3, #1
 8002fb6:	2300      	moveq	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d016      	beq.n	8002fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd8:	f043 0220 	orr.w	r2, r3, #32
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e021      	b.n	8003030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	0c1b      	lsrs	r3, r3, #16
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d10c      	bne.n	8003010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	43da      	mvns	r2, r3
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	4013      	ands	r3, r2
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	bf14      	ite	ne
 8003008:	2301      	movne	r3, #1
 800300a:	2300      	moveq	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	e00b      	b.n	8003028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	43da      	mvns	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	4013      	ands	r3, r2
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	bf14      	ite	ne
 8003022:	2301      	movne	r3, #1
 8003024:	2300      	moveq	r3, #0
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	f47f af6d 	bne.w	8002f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003044:	e034      	b.n	80030b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 f8e3 	bl	8003212 <I2C_IsAcknowledgeFailed>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e034      	b.n	80030c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305c:	d028      	beq.n	80030b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800305e:	f7fe fe0b 	bl	8001c78 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	429a      	cmp	r2, r3
 800306c:	d302      	bcc.n	8003074 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d11d      	bne.n	80030b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800307e:	2b80      	cmp	r3, #128	@ 0x80
 8003080:	d016      	beq.n	80030b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309c:	f043 0220 	orr.w	r2, r3, #32
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e007      	b.n	80030c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ba:	2b80      	cmp	r3, #128	@ 0x80
 80030bc:	d1c3      	bne.n	8003046 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030d4:	e034      	b.n	8003140 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 f89b 	bl	8003212 <I2C_IsAcknowledgeFailed>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e034      	b.n	8003150 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ec:	d028      	beq.n	8003140 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ee:	f7fe fdc3 	bl	8001c78 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d302      	bcc.n	8003104 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d11d      	bne.n	8003140 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	f003 0304 	and.w	r3, r3, #4
 800310e:	2b04      	cmp	r3, #4
 8003110:	d016      	beq.n	8003140 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312c:	f043 0220 	orr.w	r2, r3, #32
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e007      	b.n	8003150 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	2b04      	cmp	r3, #4
 800314c:	d1c3      	bne.n	80030d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003164:	e049      	b.n	80031fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	f003 0310 	and.w	r3, r3, #16
 8003170:	2b10      	cmp	r3, #16
 8003172:	d119      	bne.n	80031a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f06f 0210 	mvn.w	r2, #16
 800317c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2220      	movs	r2, #32
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e030      	b.n	800320a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a8:	f7fe fd66 	bl	8001c78 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d302      	bcc.n	80031be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d11d      	bne.n	80031fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031c8:	2b40      	cmp	r3, #64	@ 0x40
 80031ca:	d016      	beq.n	80031fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2220      	movs	r2, #32
 80031d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e6:	f043 0220 	orr.w	r2, r3, #32
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e007      	b.n	800320a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003204:	2b40      	cmp	r3, #64	@ 0x40
 8003206:	d1ae      	bne.n	8003166 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003224:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003228:	d11b      	bne.n	8003262 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003232:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2220      	movs	r2, #32
 800323e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324e:	f043 0204 	orr.w	r2, r3, #4
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	bc80      	pop	{r7}
 800326c:	4770      	bx	lr
	...

08003270 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e272      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 8087 	beq.w	800339e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003290:	4b92      	ldr	r3, [pc, #584]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 030c 	and.w	r3, r3, #12
 8003298:	2b04      	cmp	r3, #4
 800329a:	d00c      	beq.n	80032b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800329c:	4b8f      	ldr	r3, [pc, #572]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f003 030c 	and.w	r3, r3, #12
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d112      	bne.n	80032ce <HAL_RCC_OscConfig+0x5e>
 80032a8:	4b8c      	ldr	r3, [pc, #560]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032b4:	d10b      	bne.n	80032ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b6:	4b89      	ldr	r3, [pc, #548]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d06c      	beq.n	800339c <HAL_RCC_OscConfig+0x12c>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d168      	bne.n	800339c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e24c      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032d6:	d106      	bne.n	80032e6 <HAL_RCC_OscConfig+0x76>
 80032d8:	4b80      	ldr	r3, [pc, #512]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a7f      	ldr	r2, [pc, #508]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 80032de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032e2:	6013      	str	r3, [r2, #0]
 80032e4:	e02e      	b.n	8003344 <HAL_RCC_OscConfig+0xd4>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10c      	bne.n	8003308 <HAL_RCC_OscConfig+0x98>
 80032ee:	4b7b      	ldr	r3, [pc, #492]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a7a      	ldr	r2, [pc, #488]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 80032f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	4b78      	ldr	r3, [pc, #480]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a77      	ldr	r2, [pc, #476]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003300:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	e01d      	b.n	8003344 <HAL_RCC_OscConfig+0xd4>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003310:	d10c      	bne.n	800332c <HAL_RCC_OscConfig+0xbc>
 8003312:	4b72      	ldr	r3, [pc, #456]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a71      	ldr	r2, [pc, #452]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003318:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	4b6f      	ldr	r3, [pc, #444]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a6e      	ldr	r2, [pc, #440]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003324:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	e00b      	b.n	8003344 <HAL_RCC_OscConfig+0xd4>
 800332c:	4b6b      	ldr	r3, [pc, #428]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a6a      	ldr	r2, [pc, #424]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003332:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	4b68      	ldr	r3, [pc, #416]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a67      	ldr	r2, [pc, #412]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 800333e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003342:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d013      	beq.n	8003374 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334c:	f7fe fc94 	bl	8001c78 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003354:	f7fe fc90 	bl	8001c78 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b64      	cmp	r3, #100	@ 0x64
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e200      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003366:	4b5d      	ldr	r3, [pc, #372]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0f0      	beq.n	8003354 <HAL_RCC_OscConfig+0xe4>
 8003372:	e014      	b.n	800339e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003374:	f7fe fc80 	bl	8001c78 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800337c:	f7fe fc7c 	bl	8001c78 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b64      	cmp	r3, #100	@ 0x64
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e1ec      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800338e:	4b53      	ldr	r3, [pc, #332]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x10c>
 800339a:	e000      	b.n	800339e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800339c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d063      	beq.n	8003472 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033aa:	4b4c      	ldr	r3, [pc, #304]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00b      	beq.n	80033ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033b6:	4b49      	ldr	r3, [pc, #292]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d11c      	bne.n	80033fc <HAL_RCC_OscConfig+0x18c>
 80033c2:	4b46      	ldr	r3, [pc, #280]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d116      	bne.n	80033fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ce:	4b43      	ldr	r3, [pc, #268]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d005      	beq.n	80033e6 <HAL_RCC_OscConfig+0x176>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d001      	beq.n	80033e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e1c0      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e6:	4b3d      	ldr	r3, [pc, #244]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	4939      	ldr	r1, [pc, #228]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fa:	e03a      	b.n	8003472 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d020      	beq.n	8003446 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003404:	4b36      	ldr	r3, [pc, #216]	@ (80034e0 <HAL_RCC_OscConfig+0x270>)
 8003406:	2201      	movs	r2, #1
 8003408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340a:	f7fe fc35 	bl	8001c78 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003412:	f7fe fc31 	bl	8001c78 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e1a1      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003424:	4b2d      	ldr	r3, [pc, #180]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0f0      	beq.n	8003412 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003430:	4b2a      	ldr	r3, [pc, #168]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	4927      	ldr	r1, [pc, #156]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003440:	4313      	orrs	r3, r2
 8003442:	600b      	str	r3, [r1, #0]
 8003444:	e015      	b.n	8003472 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003446:	4b26      	ldr	r3, [pc, #152]	@ (80034e0 <HAL_RCC_OscConfig+0x270>)
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344c:	f7fe fc14 	bl	8001c78 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003454:	f7fe fc10 	bl	8001c78 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e180      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003466:	4b1d      	ldr	r3, [pc, #116]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f0      	bne.n	8003454 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d03a      	beq.n	80034f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d019      	beq.n	80034ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003486:	4b17      	ldr	r3, [pc, #92]	@ (80034e4 <HAL_RCC_OscConfig+0x274>)
 8003488:	2201      	movs	r2, #1
 800348a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800348c:	f7fe fbf4 	bl	8001c78 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003494:	f7fe fbf0 	bl	8001c78 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e160      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a6:	4b0d      	ldr	r3, [pc, #52]	@ (80034dc <HAL_RCC_OscConfig+0x26c>)
 80034a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0f0      	beq.n	8003494 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034b2:	2001      	movs	r0, #1
 80034b4:	f000 faba 	bl	8003a2c <RCC_Delay>
 80034b8:	e01c      	b.n	80034f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ba:	4b0a      	ldr	r3, [pc, #40]	@ (80034e4 <HAL_RCC_OscConfig+0x274>)
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c0:	f7fe fbda 	bl	8001c78 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c6:	e00f      	b.n	80034e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034c8:	f7fe fbd6 	bl	8001c78 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d908      	bls.n	80034e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e146      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
 80034da:	bf00      	nop
 80034dc:	40021000 	.word	0x40021000
 80034e0:	42420000 	.word	0x42420000
 80034e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e8:	4b92      	ldr	r3, [pc, #584]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80034ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1e9      	bne.n	80034c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80a6 	beq.w	800364e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003502:	2300      	movs	r3, #0
 8003504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003506:	4b8b      	ldr	r3, [pc, #556]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10d      	bne.n	800352e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003512:	4b88      	ldr	r3, [pc, #544]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	4a87      	ldr	r2, [pc, #540]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003518:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800351c:	61d3      	str	r3, [r2, #28]
 800351e:	4b85      	ldr	r3, [pc, #532]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003526:	60bb      	str	r3, [r7, #8]
 8003528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800352a:	2301      	movs	r3, #1
 800352c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352e:	4b82      	ldr	r3, [pc, #520]	@ (8003738 <HAL_RCC_OscConfig+0x4c8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003536:	2b00      	cmp	r3, #0
 8003538:	d118      	bne.n	800356c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800353a:	4b7f      	ldr	r3, [pc, #508]	@ (8003738 <HAL_RCC_OscConfig+0x4c8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a7e      	ldr	r2, [pc, #504]	@ (8003738 <HAL_RCC_OscConfig+0x4c8>)
 8003540:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003546:	f7fe fb97 	bl	8001c78 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800354e:	f7fe fb93 	bl	8001c78 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b64      	cmp	r3, #100	@ 0x64
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e103      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003560:	4b75      	ldr	r3, [pc, #468]	@ (8003738 <HAL_RCC_OscConfig+0x4c8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f0      	beq.n	800354e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d106      	bne.n	8003582 <HAL_RCC_OscConfig+0x312>
 8003574:	4b6f      	ldr	r3, [pc, #444]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	4a6e      	ldr	r2, [pc, #440]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 800357a:	f043 0301 	orr.w	r3, r3, #1
 800357e:	6213      	str	r3, [r2, #32]
 8003580:	e02d      	b.n	80035de <HAL_RCC_OscConfig+0x36e>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10c      	bne.n	80035a4 <HAL_RCC_OscConfig+0x334>
 800358a:	4b6a      	ldr	r3, [pc, #424]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	4a69      	ldr	r2, [pc, #420]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003590:	f023 0301 	bic.w	r3, r3, #1
 8003594:	6213      	str	r3, [r2, #32]
 8003596:	4b67      	ldr	r3, [pc, #412]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	4a66      	ldr	r2, [pc, #408]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 800359c:	f023 0304 	bic.w	r3, r3, #4
 80035a0:	6213      	str	r3, [r2, #32]
 80035a2:	e01c      	b.n	80035de <HAL_RCC_OscConfig+0x36e>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	2b05      	cmp	r3, #5
 80035aa:	d10c      	bne.n	80035c6 <HAL_RCC_OscConfig+0x356>
 80035ac:	4b61      	ldr	r3, [pc, #388]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	4a60      	ldr	r2, [pc, #384]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80035b2:	f043 0304 	orr.w	r3, r3, #4
 80035b6:	6213      	str	r3, [r2, #32]
 80035b8:	4b5e      	ldr	r3, [pc, #376]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	4a5d      	ldr	r2, [pc, #372]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	6213      	str	r3, [r2, #32]
 80035c4:	e00b      	b.n	80035de <HAL_RCC_OscConfig+0x36e>
 80035c6:	4b5b      	ldr	r3, [pc, #364]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	4a5a      	ldr	r2, [pc, #360]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80035cc:	f023 0301 	bic.w	r3, r3, #1
 80035d0:	6213      	str	r3, [r2, #32]
 80035d2:	4b58      	ldr	r3, [pc, #352]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	4a57      	ldr	r2, [pc, #348]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80035d8:	f023 0304 	bic.w	r3, r3, #4
 80035dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d015      	beq.n	8003612 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e6:	f7fe fb47 	bl	8001c78 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ec:	e00a      	b.n	8003604 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ee:	f7fe fb43 	bl	8001c78 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e0b1      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003604:	4b4b      	ldr	r3, [pc, #300]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0ee      	beq.n	80035ee <HAL_RCC_OscConfig+0x37e>
 8003610:	e014      	b.n	800363c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003612:	f7fe fb31 	bl	8001c78 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003618:	e00a      	b.n	8003630 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800361a:	f7fe fb2d 	bl	8001c78 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003628:	4293      	cmp	r3, r2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e09b      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003630:	4b40      	ldr	r3, [pc, #256]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1ee      	bne.n	800361a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800363c:	7dfb      	ldrb	r3, [r7, #23]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d105      	bne.n	800364e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003642:	4b3c      	ldr	r3, [pc, #240]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	4a3b      	ldr	r2, [pc, #236]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 8003648:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800364c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 8087 	beq.w	8003766 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003658:	4b36      	ldr	r3, [pc, #216]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f003 030c 	and.w	r3, r3, #12
 8003660:	2b08      	cmp	r3, #8
 8003662:	d061      	beq.n	8003728 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	2b02      	cmp	r3, #2
 800366a:	d146      	bne.n	80036fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800366c:	4b33      	ldr	r3, [pc, #204]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003672:	f7fe fb01 	bl	8001c78 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800367a:	f7fe fafd 	bl	8001c78 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e06d      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800368c:	4b29      	ldr	r3, [pc, #164]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1f0      	bne.n	800367a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036a0:	d108      	bne.n	80036b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036a2:	4b24      	ldr	r3, [pc, #144]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	4921      	ldr	r1, [pc, #132]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a19      	ldr	r1, [r3, #32]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c4:	430b      	orrs	r3, r1
 80036c6:	491b      	ldr	r1, [pc, #108]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036cc:	4b1b      	ldr	r3, [pc, #108]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 80036ce:	2201      	movs	r2, #1
 80036d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d2:	f7fe fad1 	bl	8001c78 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036da:	f7fe facd 	bl	8001c78 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e03d      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036ec:	4b11      	ldr	r3, [pc, #68]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0x46a>
 80036f8:	e035      	b.n	8003766 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036fa:	4b10      	ldr	r3, [pc, #64]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003700:	f7fe faba 	bl	8001c78 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003708:	f7fe fab6 	bl	8001c78 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e026      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800371a:	4b06      	ldr	r3, [pc, #24]	@ (8003734 <HAL_RCC_OscConfig+0x4c4>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0x498>
 8003726:	e01e      	b.n	8003766 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d107      	bne.n	8003740 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e019      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
 8003734:	40021000 	.word	0x40021000
 8003738:	40007000 	.word	0x40007000
 800373c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003740:	4b0b      	ldr	r3, [pc, #44]	@ (8003770 <HAL_RCC_OscConfig+0x500>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	429a      	cmp	r2, r3
 8003752:	d106      	bne.n	8003762 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800375e:	429a      	cmp	r2, r3
 8003760:	d001      	beq.n	8003766 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40021000 	.word	0x40021000

08003774 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e0d0      	b.n	800392a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003788:	4b6a      	ldr	r3, [pc, #424]	@ (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	d910      	bls.n	80037b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003796:	4b67      	ldr	r3, [pc, #412]	@ (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f023 0207 	bic.w	r2, r3, #7
 800379e:	4965      	ldr	r1, [pc, #404]	@ (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a6:	4b63      	ldr	r3, [pc, #396]	@ (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d001      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0b8      	b.n	800392a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d020      	beq.n	8003806 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037d0:	4b59      	ldr	r3, [pc, #356]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	4a58      	ldr	r2, [pc, #352]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80037d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80037da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037e8:	4b53      	ldr	r3, [pc, #332]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	4a52      	ldr	r2, [pc, #328]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80037ee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80037f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f4:	4b50      	ldr	r3, [pc, #320]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	494d      	ldr	r1, [pc, #308]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 8003802:	4313      	orrs	r3, r2
 8003804:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d040      	beq.n	8003894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d107      	bne.n	800382a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381a:	4b47      	ldr	r3, [pc, #284]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d115      	bne.n	8003852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e07f      	b.n	800392a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d107      	bne.n	8003842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003832:	4b41      	ldr	r3, [pc, #260]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d109      	bne.n	8003852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e073      	b.n	800392a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003842:	4b3d      	ldr	r3, [pc, #244]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e06b      	b.n	800392a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003852:	4b39      	ldr	r3, [pc, #228]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f023 0203 	bic.w	r2, r3, #3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	4936      	ldr	r1, [pc, #216]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 8003860:	4313      	orrs	r3, r2
 8003862:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003864:	f7fe fa08 	bl	8001c78 <HAL_GetTick>
 8003868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386a:	e00a      	b.n	8003882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800386c:	f7fe fa04 	bl	8001c78 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800387a:	4293      	cmp	r3, r2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e053      	b.n	800392a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003882:	4b2d      	ldr	r3, [pc, #180]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f003 020c 	and.w	r2, r3, #12
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	429a      	cmp	r2, r3
 8003892:	d1eb      	bne.n	800386c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003894:	4b27      	ldr	r3, [pc, #156]	@ (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d210      	bcs.n	80038c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a2:	4b24      	ldr	r3, [pc, #144]	@ (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f023 0207 	bic.w	r2, r3, #7
 80038aa:	4922      	ldr	r1, [pc, #136]	@ (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b2:	4b20      	ldr	r3, [pc, #128]	@ (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0307 	and.w	r3, r3, #7
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d001      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e032      	b.n	800392a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038d0:	4b19      	ldr	r3, [pc, #100]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	4916      	ldr	r1, [pc, #88]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d009      	beq.n	8003902 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038ee:	4b12      	ldr	r3, [pc, #72]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	490e      	ldr	r1, [pc, #56]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003902:	f000 f821 	bl	8003948 <HAL_RCC_GetSysClockFreq>
 8003906:	4602      	mov	r2, r0
 8003908:	4b0b      	ldr	r3, [pc, #44]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	091b      	lsrs	r3, r3, #4
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	490a      	ldr	r1, [pc, #40]	@ (800393c <HAL_RCC_ClockConfig+0x1c8>)
 8003914:	5ccb      	ldrb	r3, [r1, r3]
 8003916:	fa22 f303 	lsr.w	r3, r2, r3
 800391a:	4a09      	ldr	r2, [pc, #36]	@ (8003940 <HAL_RCC_ClockConfig+0x1cc>)
 800391c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800391e:	4b09      	ldr	r3, [pc, #36]	@ (8003944 <HAL_RCC_ClockConfig+0x1d0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f7fe f966 	bl	8001bf4 <HAL_InitTick>

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40022000 	.word	0x40022000
 8003938:	40021000 	.word	0x40021000
 800393c:	08006b98 	.word	0x08006b98
 8003940:	20000090 	.word	0x20000090
 8003944:	20000094 	.word	0x20000094

08003948 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003948:	b480      	push	{r7}
 800394a:	b087      	sub	sp, #28
 800394c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800394e:	2300      	movs	r3, #0
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	2300      	movs	r3, #0
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]
 800395a:	2300      	movs	r3, #0
 800395c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800395e:	2300      	movs	r3, #0
 8003960:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003962:	4b1e      	ldr	r3, [pc, #120]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x94>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f003 030c 	and.w	r3, r3, #12
 800396e:	2b04      	cmp	r3, #4
 8003970:	d002      	beq.n	8003978 <HAL_RCC_GetSysClockFreq+0x30>
 8003972:	2b08      	cmp	r3, #8
 8003974:	d003      	beq.n	800397e <HAL_RCC_GetSysClockFreq+0x36>
 8003976:	e027      	b.n	80039c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003978:	4b19      	ldr	r3, [pc, #100]	@ (80039e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800397a:	613b      	str	r3, [r7, #16]
      break;
 800397c:	e027      	b.n	80039ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	0c9b      	lsrs	r3, r3, #18
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	4a17      	ldr	r2, [pc, #92]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003988:	5cd3      	ldrb	r3, [r2, r3]
 800398a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d010      	beq.n	80039b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003996:	4b11      	ldr	r3, [pc, #68]	@ (80039dc <HAL_RCC_GetSysClockFreq+0x94>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	0c5b      	lsrs	r3, r3, #17
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	4a11      	ldr	r2, [pc, #68]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80039a2:	5cd3      	ldrb	r3, [r2, r3]
 80039a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a0d      	ldr	r2, [pc, #52]	@ (80039e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80039aa:	fb03 f202 	mul.w	r2, r3, r2
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b4:	617b      	str	r3, [r7, #20]
 80039b6:	e004      	b.n	80039c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a0c      	ldr	r2, [pc, #48]	@ (80039ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80039bc:	fb02 f303 	mul.w	r3, r2, r3
 80039c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	613b      	str	r3, [r7, #16]
      break;
 80039c6:	e002      	b.n	80039ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039c8:	4b05      	ldr	r3, [pc, #20]	@ (80039e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80039ca:	613b      	str	r3, [r7, #16]
      break;
 80039cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ce:	693b      	ldr	r3, [r7, #16]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	371c      	adds	r7, #28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	40021000 	.word	0x40021000
 80039e0:	007a1200 	.word	0x007a1200
 80039e4:	08006bb0 	.word	0x08006bb0
 80039e8:	08006bc0 	.word	0x08006bc0
 80039ec:	003d0900 	.word	0x003d0900

080039f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039f4:	4b02      	ldr	r3, [pc, #8]	@ (8003a00 <HAL_RCC_GetHCLKFreq+0x10>)
 80039f6:	681b      	ldr	r3, [r3, #0]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr
 8003a00:	20000090 	.word	0x20000090

08003a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a08:	f7ff fff2 	bl	80039f0 <HAL_RCC_GetHCLKFreq>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	4b05      	ldr	r3, [pc, #20]	@ (8003a24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	0a1b      	lsrs	r3, r3, #8
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	4903      	ldr	r1, [pc, #12]	@ (8003a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a1a:	5ccb      	ldrb	r3, [r1, r3]
 8003a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40021000 	.word	0x40021000
 8003a28:	08006ba8 	.word	0x08006ba8

08003a2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a34:	4b0a      	ldr	r3, [pc, #40]	@ (8003a60 <RCC_Delay+0x34>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a0a      	ldr	r2, [pc, #40]	@ (8003a64 <RCC_Delay+0x38>)
 8003a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3e:	0a5b      	lsrs	r3, r3, #9
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	fb02 f303 	mul.w	r3, r2, r3
 8003a46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a48:	bf00      	nop
  }
  while (Delay --);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	1e5a      	subs	r2, r3, #1
 8003a4e:	60fa      	str	r2, [r7, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1f9      	bne.n	8003a48 <RCC_Delay+0x1c>
}
 8003a54:	bf00      	nop
 8003a56:	bf00      	nop
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr
 8003a60:	20000090 	.word	0x20000090
 8003a64:	10624dd3 	.word	0x10624dd3

08003a68 <__cvt>:
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a6e:	461d      	mov	r5, r3
 8003a70:	bfbb      	ittet	lt
 8003a72:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003a76:	461d      	movlt	r5, r3
 8003a78:	2300      	movge	r3, #0
 8003a7a:	232d      	movlt	r3, #45	@ 0x2d
 8003a7c:	b088      	sub	sp, #32
 8003a7e:	4614      	mov	r4, r2
 8003a80:	bfb8      	it	lt
 8003a82:	4614      	movlt	r4, r2
 8003a84:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003a86:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003a88:	7013      	strb	r3, [r2, #0]
 8003a8a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003a8c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003a90:	f023 0820 	bic.w	r8, r3, #32
 8003a94:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003a98:	d005      	beq.n	8003aa6 <__cvt+0x3e>
 8003a9a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003a9e:	d100      	bne.n	8003aa2 <__cvt+0x3a>
 8003aa0:	3601      	adds	r6, #1
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	e000      	b.n	8003aa8 <__cvt+0x40>
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	aa07      	add	r2, sp, #28
 8003aaa:	9204      	str	r2, [sp, #16]
 8003aac:	aa06      	add	r2, sp, #24
 8003aae:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003ab2:	e9cd 3600 	strd	r3, r6, [sp]
 8003ab6:	4622      	mov	r2, r4
 8003ab8:	462b      	mov	r3, r5
 8003aba:	f000 ff51 	bl	8004960 <_dtoa_r>
 8003abe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003ac2:	4607      	mov	r7, r0
 8003ac4:	d119      	bne.n	8003afa <__cvt+0x92>
 8003ac6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003ac8:	07db      	lsls	r3, r3, #31
 8003aca:	d50e      	bpl.n	8003aea <__cvt+0x82>
 8003acc:	eb00 0906 	add.w	r9, r0, r6
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	4629      	mov	r1, r5
 8003ad8:	f7fc ff66 	bl	80009a8 <__aeabi_dcmpeq>
 8003adc:	b108      	cbz	r0, 8003ae2 <__cvt+0x7a>
 8003ade:	f8cd 901c 	str.w	r9, [sp, #28]
 8003ae2:	2230      	movs	r2, #48	@ 0x30
 8003ae4:	9b07      	ldr	r3, [sp, #28]
 8003ae6:	454b      	cmp	r3, r9
 8003ae8:	d31e      	bcc.n	8003b28 <__cvt+0xc0>
 8003aea:	4638      	mov	r0, r7
 8003aec:	9b07      	ldr	r3, [sp, #28]
 8003aee:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003af0:	1bdb      	subs	r3, r3, r7
 8003af2:	6013      	str	r3, [r2, #0]
 8003af4:	b008      	add	sp, #32
 8003af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003afa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003afe:	eb00 0906 	add.w	r9, r0, r6
 8003b02:	d1e5      	bne.n	8003ad0 <__cvt+0x68>
 8003b04:	7803      	ldrb	r3, [r0, #0]
 8003b06:	2b30      	cmp	r3, #48	@ 0x30
 8003b08:	d10a      	bne.n	8003b20 <__cvt+0xb8>
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	4620      	mov	r0, r4
 8003b10:	4629      	mov	r1, r5
 8003b12:	f7fc ff49 	bl	80009a8 <__aeabi_dcmpeq>
 8003b16:	b918      	cbnz	r0, 8003b20 <__cvt+0xb8>
 8003b18:	f1c6 0601 	rsb	r6, r6, #1
 8003b1c:	f8ca 6000 	str.w	r6, [sl]
 8003b20:	f8da 3000 	ldr.w	r3, [sl]
 8003b24:	4499      	add	r9, r3
 8003b26:	e7d3      	b.n	8003ad0 <__cvt+0x68>
 8003b28:	1c59      	adds	r1, r3, #1
 8003b2a:	9107      	str	r1, [sp, #28]
 8003b2c:	701a      	strb	r2, [r3, #0]
 8003b2e:	e7d9      	b.n	8003ae4 <__cvt+0x7c>

08003b30 <__exponent>:
 8003b30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b32:	2900      	cmp	r1, #0
 8003b34:	bfb6      	itet	lt
 8003b36:	232d      	movlt	r3, #45	@ 0x2d
 8003b38:	232b      	movge	r3, #43	@ 0x2b
 8003b3a:	4249      	neglt	r1, r1
 8003b3c:	2909      	cmp	r1, #9
 8003b3e:	7002      	strb	r2, [r0, #0]
 8003b40:	7043      	strb	r3, [r0, #1]
 8003b42:	dd29      	ble.n	8003b98 <__exponent+0x68>
 8003b44:	f10d 0307 	add.w	r3, sp, #7
 8003b48:	461d      	mov	r5, r3
 8003b4a:	270a      	movs	r7, #10
 8003b4c:	fbb1 f6f7 	udiv	r6, r1, r7
 8003b50:	461a      	mov	r2, r3
 8003b52:	fb07 1416 	mls	r4, r7, r6, r1
 8003b56:	3430      	adds	r4, #48	@ 0x30
 8003b58:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003b5c:	460c      	mov	r4, r1
 8003b5e:	2c63      	cmp	r4, #99	@ 0x63
 8003b60:	4631      	mov	r1, r6
 8003b62:	f103 33ff 	add.w	r3, r3, #4294967295
 8003b66:	dcf1      	bgt.n	8003b4c <__exponent+0x1c>
 8003b68:	3130      	adds	r1, #48	@ 0x30
 8003b6a:	1e94      	subs	r4, r2, #2
 8003b6c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003b70:	4623      	mov	r3, r4
 8003b72:	1c41      	adds	r1, r0, #1
 8003b74:	42ab      	cmp	r3, r5
 8003b76:	d30a      	bcc.n	8003b8e <__exponent+0x5e>
 8003b78:	f10d 0309 	add.w	r3, sp, #9
 8003b7c:	1a9b      	subs	r3, r3, r2
 8003b7e:	42ac      	cmp	r4, r5
 8003b80:	bf88      	it	hi
 8003b82:	2300      	movhi	r3, #0
 8003b84:	3302      	adds	r3, #2
 8003b86:	4403      	add	r3, r0
 8003b88:	1a18      	subs	r0, r3, r0
 8003b8a:	b003      	add	sp, #12
 8003b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b8e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003b92:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003b96:	e7ed      	b.n	8003b74 <__exponent+0x44>
 8003b98:	2330      	movs	r3, #48	@ 0x30
 8003b9a:	3130      	adds	r1, #48	@ 0x30
 8003b9c:	7083      	strb	r3, [r0, #2]
 8003b9e:	70c1      	strb	r1, [r0, #3]
 8003ba0:	1d03      	adds	r3, r0, #4
 8003ba2:	e7f1      	b.n	8003b88 <__exponent+0x58>

08003ba4 <_printf_float>:
 8003ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ba8:	b091      	sub	sp, #68	@ 0x44
 8003baa:	460c      	mov	r4, r1
 8003bac:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003bb0:	4616      	mov	r6, r2
 8003bb2:	461f      	mov	r7, r3
 8003bb4:	4605      	mov	r5, r0
 8003bb6:	f000 fdc3 	bl	8004740 <_localeconv_r>
 8003bba:	6803      	ldr	r3, [r0, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	9308      	str	r3, [sp, #32]
 8003bc0:	f7fc fac6 	bl	8000150 <strlen>
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	930e      	str	r3, [sp, #56]	@ 0x38
 8003bc8:	f8d8 3000 	ldr.w	r3, [r8]
 8003bcc:	9009      	str	r0, [sp, #36]	@ 0x24
 8003bce:	3307      	adds	r3, #7
 8003bd0:	f023 0307 	bic.w	r3, r3, #7
 8003bd4:	f103 0208 	add.w	r2, r3, #8
 8003bd8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003bdc:	f8d4 b000 	ldr.w	fp, [r4]
 8003be0:	f8c8 2000 	str.w	r2, [r8]
 8003be4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003be8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003bec:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003bee:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8003bf6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003bfa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003bfe:	4b9c      	ldr	r3, [pc, #624]	@ (8003e70 <_printf_float+0x2cc>)
 8003c00:	f7fc ff04 	bl	8000a0c <__aeabi_dcmpun>
 8003c04:	bb70      	cbnz	r0, 8003c64 <_printf_float+0xc0>
 8003c06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c0e:	4b98      	ldr	r3, [pc, #608]	@ (8003e70 <_printf_float+0x2cc>)
 8003c10:	f7fc fede 	bl	80009d0 <__aeabi_dcmple>
 8003c14:	bb30      	cbnz	r0, 8003c64 <_printf_float+0xc0>
 8003c16:	2200      	movs	r2, #0
 8003c18:	2300      	movs	r3, #0
 8003c1a:	4640      	mov	r0, r8
 8003c1c:	4649      	mov	r1, r9
 8003c1e:	f7fc fecd 	bl	80009bc <__aeabi_dcmplt>
 8003c22:	b110      	cbz	r0, 8003c2a <_printf_float+0x86>
 8003c24:	232d      	movs	r3, #45	@ 0x2d
 8003c26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c2a:	4a92      	ldr	r2, [pc, #584]	@ (8003e74 <_printf_float+0x2d0>)
 8003c2c:	4b92      	ldr	r3, [pc, #584]	@ (8003e78 <_printf_float+0x2d4>)
 8003c2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003c32:	bf8c      	ite	hi
 8003c34:	4690      	movhi	r8, r2
 8003c36:	4698      	movls	r8, r3
 8003c38:	2303      	movs	r3, #3
 8003c3a:	f04f 0900 	mov.w	r9, #0
 8003c3e:	6123      	str	r3, [r4, #16]
 8003c40:	f02b 0304 	bic.w	r3, fp, #4
 8003c44:	6023      	str	r3, [r4, #0]
 8003c46:	4633      	mov	r3, r6
 8003c48:	4621      	mov	r1, r4
 8003c4a:	4628      	mov	r0, r5
 8003c4c:	9700      	str	r7, [sp, #0]
 8003c4e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003c50:	f000 f9d4 	bl	8003ffc <_printf_common>
 8003c54:	3001      	adds	r0, #1
 8003c56:	f040 8090 	bne.w	8003d7a <_printf_float+0x1d6>
 8003c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c5e:	b011      	add	sp, #68	@ 0x44
 8003c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c64:	4642      	mov	r2, r8
 8003c66:	464b      	mov	r3, r9
 8003c68:	4640      	mov	r0, r8
 8003c6a:	4649      	mov	r1, r9
 8003c6c:	f7fc fece 	bl	8000a0c <__aeabi_dcmpun>
 8003c70:	b148      	cbz	r0, 8003c86 <_printf_float+0xe2>
 8003c72:	464b      	mov	r3, r9
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	bfb8      	it	lt
 8003c78:	232d      	movlt	r3, #45	@ 0x2d
 8003c7a:	4a80      	ldr	r2, [pc, #512]	@ (8003e7c <_printf_float+0x2d8>)
 8003c7c:	bfb8      	it	lt
 8003c7e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003c82:	4b7f      	ldr	r3, [pc, #508]	@ (8003e80 <_printf_float+0x2dc>)
 8003c84:	e7d3      	b.n	8003c2e <_printf_float+0x8a>
 8003c86:	6863      	ldr	r3, [r4, #4]
 8003c88:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	d13f      	bne.n	8003d10 <_printf_float+0x16c>
 8003c90:	2306      	movs	r3, #6
 8003c92:	6063      	str	r3, [r4, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003c9a:	6023      	str	r3, [r4, #0]
 8003c9c:	9206      	str	r2, [sp, #24]
 8003c9e:	aa0e      	add	r2, sp, #56	@ 0x38
 8003ca0:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003ca4:	aa0d      	add	r2, sp, #52	@ 0x34
 8003ca6:	9203      	str	r2, [sp, #12]
 8003ca8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003cac:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003cb0:	6863      	ldr	r3, [r4, #4]
 8003cb2:	4642      	mov	r2, r8
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	4628      	mov	r0, r5
 8003cb8:	464b      	mov	r3, r9
 8003cba:	910a      	str	r1, [sp, #40]	@ 0x28
 8003cbc:	f7ff fed4 	bl	8003a68 <__cvt>
 8003cc0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003cc2:	4680      	mov	r8, r0
 8003cc4:	2947      	cmp	r1, #71	@ 0x47
 8003cc6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003cc8:	d128      	bne.n	8003d1c <_printf_float+0x178>
 8003cca:	1cc8      	adds	r0, r1, #3
 8003ccc:	db02      	blt.n	8003cd4 <_printf_float+0x130>
 8003cce:	6863      	ldr	r3, [r4, #4]
 8003cd0:	4299      	cmp	r1, r3
 8003cd2:	dd40      	ble.n	8003d56 <_printf_float+0x1b2>
 8003cd4:	f1aa 0a02 	sub.w	sl, sl, #2
 8003cd8:	fa5f fa8a 	uxtb.w	sl, sl
 8003cdc:	4652      	mov	r2, sl
 8003cde:	3901      	subs	r1, #1
 8003ce0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003ce4:	910d      	str	r1, [sp, #52]	@ 0x34
 8003ce6:	f7ff ff23 	bl	8003b30 <__exponent>
 8003cea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003cec:	4681      	mov	r9, r0
 8003cee:	1813      	adds	r3, r2, r0
 8003cf0:	2a01      	cmp	r2, #1
 8003cf2:	6123      	str	r3, [r4, #16]
 8003cf4:	dc02      	bgt.n	8003cfc <_printf_float+0x158>
 8003cf6:	6822      	ldr	r2, [r4, #0]
 8003cf8:	07d2      	lsls	r2, r2, #31
 8003cfa:	d501      	bpl.n	8003d00 <_printf_float+0x15c>
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	6123      	str	r3, [r4, #16]
 8003d00:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d09e      	beq.n	8003c46 <_printf_float+0xa2>
 8003d08:	232d      	movs	r3, #45	@ 0x2d
 8003d0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d0e:	e79a      	b.n	8003c46 <_printf_float+0xa2>
 8003d10:	2947      	cmp	r1, #71	@ 0x47
 8003d12:	d1bf      	bne.n	8003c94 <_printf_float+0xf0>
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1bd      	bne.n	8003c94 <_printf_float+0xf0>
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e7ba      	b.n	8003c92 <_printf_float+0xee>
 8003d1c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003d20:	d9dc      	bls.n	8003cdc <_printf_float+0x138>
 8003d22:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003d26:	d118      	bne.n	8003d5a <_printf_float+0x1b6>
 8003d28:	2900      	cmp	r1, #0
 8003d2a:	6863      	ldr	r3, [r4, #4]
 8003d2c:	dd0b      	ble.n	8003d46 <_printf_float+0x1a2>
 8003d2e:	6121      	str	r1, [r4, #16]
 8003d30:	b913      	cbnz	r3, 8003d38 <_printf_float+0x194>
 8003d32:	6822      	ldr	r2, [r4, #0]
 8003d34:	07d0      	lsls	r0, r2, #31
 8003d36:	d502      	bpl.n	8003d3e <_printf_float+0x19a>
 8003d38:	3301      	adds	r3, #1
 8003d3a:	440b      	add	r3, r1
 8003d3c:	6123      	str	r3, [r4, #16]
 8003d3e:	f04f 0900 	mov.w	r9, #0
 8003d42:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003d44:	e7dc      	b.n	8003d00 <_printf_float+0x15c>
 8003d46:	b913      	cbnz	r3, 8003d4e <_printf_float+0x1aa>
 8003d48:	6822      	ldr	r2, [r4, #0]
 8003d4a:	07d2      	lsls	r2, r2, #31
 8003d4c:	d501      	bpl.n	8003d52 <_printf_float+0x1ae>
 8003d4e:	3302      	adds	r3, #2
 8003d50:	e7f4      	b.n	8003d3c <_printf_float+0x198>
 8003d52:	2301      	movs	r3, #1
 8003d54:	e7f2      	b.n	8003d3c <_printf_float+0x198>
 8003d56:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003d5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003d5c:	4299      	cmp	r1, r3
 8003d5e:	db05      	blt.n	8003d6c <_printf_float+0x1c8>
 8003d60:	6823      	ldr	r3, [r4, #0]
 8003d62:	6121      	str	r1, [r4, #16]
 8003d64:	07d8      	lsls	r0, r3, #31
 8003d66:	d5ea      	bpl.n	8003d3e <_printf_float+0x19a>
 8003d68:	1c4b      	adds	r3, r1, #1
 8003d6a:	e7e7      	b.n	8003d3c <_printf_float+0x198>
 8003d6c:	2900      	cmp	r1, #0
 8003d6e:	bfcc      	ite	gt
 8003d70:	2201      	movgt	r2, #1
 8003d72:	f1c1 0202 	rsble	r2, r1, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	e7e0      	b.n	8003d3c <_printf_float+0x198>
 8003d7a:	6823      	ldr	r3, [r4, #0]
 8003d7c:	055a      	lsls	r2, r3, #21
 8003d7e:	d407      	bmi.n	8003d90 <_printf_float+0x1ec>
 8003d80:	6923      	ldr	r3, [r4, #16]
 8003d82:	4642      	mov	r2, r8
 8003d84:	4631      	mov	r1, r6
 8003d86:	4628      	mov	r0, r5
 8003d88:	47b8      	blx	r7
 8003d8a:	3001      	adds	r0, #1
 8003d8c:	d12b      	bne.n	8003de6 <_printf_float+0x242>
 8003d8e:	e764      	b.n	8003c5a <_printf_float+0xb6>
 8003d90:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003d94:	f240 80dc 	bls.w	8003f50 <_printf_float+0x3ac>
 8003d98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f7fc fe02 	bl	80009a8 <__aeabi_dcmpeq>
 8003da4:	2800      	cmp	r0, #0
 8003da6:	d033      	beq.n	8003e10 <_printf_float+0x26c>
 8003da8:	2301      	movs	r3, #1
 8003daa:	4631      	mov	r1, r6
 8003dac:	4628      	mov	r0, r5
 8003dae:	4a35      	ldr	r2, [pc, #212]	@ (8003e84 <_printf_float+0x2e0>)
 8003db0:	47b8      	blx	r7
 8003db2:	3001      	adds	r0, #1
 8003db4:	f43f af51 	beq.w	8003c5a <_printf_float+0xb6>
 8003db8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003dbc:	4543      	cmp	r3, r8
 8003dbe:	db02      	blt.n	8003dc6 <_printf_float+0x222>
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	07d8      	lsls	r0, r3, #31
 8003dc4:	d50f      	bpl.n	8003de6 <_printf_float+0x242>
 8003dc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003dca:	4631      	mov	r1, r6
 8003dcc:	4628      	mov	r0, r5
 8003dce:	47b8      	blx	r7
 8003dd0:	3001      	adds	r0, #1
 8003dd2:	f43f af42 	beq.w	8003c5a <_printf_float+0xb6>
 8003dd6:	f04f 0900 	mov.w	r9, #0
 8003dda:	f108 38ff 	add.w	r8, r8, #4294967295
 8003dde:	f104 0a1a 	add.w	sl, r4, #26
 8003de2:	45c8      	cmp	r8, r9
 8003de4:	dc09      	bgt.n	8003dfa <_printf_float+0x256>
 8003de6:	6823      	ldr	r3, [r4, #0]
 8003de8:	079b      	lsls	r3, r3, #30
 8003dea:	f100 8102 	bmi.w	8003ff2 <_printf_float+0x44e>
 8003dee:	68e0      	ldr	r0, [r4, #12]
 8003df0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003df2:	4298      	cmp	r0, r3
 8003df4:	bfb8      	it	lt
 8003df6:	4618      	movlt	r0, r3
 8003df8:	e731      	b.n	8003c5e <_printf_float+0xba>
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	4652      	mov	r2, sl
 8003dfe:	4631      	mov	r1, r6
 8003e00:	4628      	mov	r0, r5
 8003e02:	47b8      	blx	r7
 8003e04:	3001      	adds	r0, #1
 8003e06:	f43f af28 	beq.w	8003c5a <_printf_float+0xb6>
 8003e0a:	f109 0901 	add.w	r9, r9, #1
 8003e0e:	e7e8      	b.n	8003de2 <_printf_float+0x23e>
 8003e10:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	dc38      	bgt.n	8003e88 <_printf_float+0x2e4>
 8003e16:	2301      	movs	r3, #1
 8003e18:	4631      	mov	r1, r6
 8003e1a:	4628      	mov	r0, r5
 8003e1c:	4a19      	ldr	r2, [pc, #100]	@ (8003e84 <_printf_float+0x2e0>)
 8003e1e:	47b8      	blx	r7
 8003e20:	3001      	adds	r0, #1
 8003e22:	f43f af1a 	beq.w	8003c5a <_printf_float+0xb6>
 8003e26:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003e2a:	ea59 0303 	orrs.w	r3, r9, r3
 8003e2e:	d102      	bne.n	8003e36 <_printf_float+0x292>
 8003e30:	6823      	ldr	r3, [r4, #0]
 8003e32:	07d9      	lsls	r1, r3, #31
 8003e34:	d5d7      	bpl.n	8003de6 <_printf_float+0x242>
 8003e36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003e3a:	4631      	mov	r1, r6
 8003e3c:	4628      	mov	r0, r5
 8003e3e:	47b8      	blx	r7
 8003e40:	3001      	adds	r0, #1
 8003e42:	f43f af0a 	beq.w	8003c5a <_printf_float+0xb6>
 8003e46:	f04f 0a00 	mov.w	sl, #0
 8003e4a:	f104 0b1a 	add.w	fp, r4, #26
 8003e4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003e50:	425b      	negs	r3, r3
 8003e52:	4553      	cmp	r3, sl
 8003e54:	dc01      	bgt.n	8003e5a <_printf_float+0x2b6>
 8003e56:	464b      	mov	r3, r9
 8003e58:	e793      	b.n	8003d82 <_printf_float+0x1de>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	465a      	mov	r2, fp
 8003e5e:	4631      	mov	r1, r6
 8003e60:	4628      	mov	r0, r5
 8003e62:	47b8      	blx	r7
 8003e64:	3001      	adds	r0, #1
 8003e66:	f43f aef8 	beq.w	8003c5a <_printf_float+0xb6>
 8003e6a:	f10a 0a01 	add.w	sl, sl, #1
 8003e6e:	e7ee      	b.n	8003e4e <_printf_float+0x2aa>
 8003e70:	7fefffff 	.word	0x7fefffff
 8003e74:	08006bc6 	.word	0x08006bc6
 8003e78:	08006bc2 	.word	0x08006bc2
 8003e7c:	08006bce 	.word	0x08006bce
 8003e80:	08006bca 	.word	0x08006bca
 8003e84:	08006bd2 	.word	0x08006bd2
 8003e88:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e8a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003e8e:	4553      	cmp	r3, sl
 8003e90:	bfa8      	it	ge
 8003e92:	4653      	movge	r3, sl
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	4699      	mov	r9, r3
 8003e98:	dc36      	bgt.n	8003f08 <_printf_float+0x364>
 8003e9a:	f04f 0b00 	mov.w	fp, #0
 8003e9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ea2:	f104 021a 	add.w	r2, r4, #26
 8003ea6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003ea8:	930a      	str	r3, [sp, #40]	@ 0x28
 8003eaa:	eba3 0309 	sub.w	r3, r3, r9
 8003eae:	455b      	cmp	r3, fp
 8003eb0:	dc31      	bgt.n	8003f16 <_printf_float+0x372>
 8003eb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003eb4:	459a      	cmp	sl, r3
 8003eb6:	dc3a      	bgt.n	8003f2e <_printf_float+0x38a>
 8003eb8:	6823      	ldr	r3, [r4, #0]
 8003eba:	07da      	lsls	r2, r3, #31
 8003ebc:	d437      	bmi.n	8003f2e <_printf_float+0x38a>
 8003ebe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ec0:	ebaa 0903 	sub.w	r9, sl, r3
 8003ec4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003ec6:	ebaa 0303 	sub.w	r3, sl, r3
 8003eca:	4599      	cmp	r9, r3
 8003ecc:	bfa8      	it	ge
 8003ece:	4699      	movge	r9, r3
 8003ed0:	f1b9 0f00 	cmp.w	r9, #0
 8003ed4:	dc33      	bgt.n	8003f3e <_printf_float+0x39a>
 8003ed6:	f04f 0800 	mov.w	r8, #0
 8003eda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ede:	f104 0b1a 	add.w	fp, r4, #26
 8003ee2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ee4:	ebaa 0303 	sub.w	r3, sl, r3
 8003ee8:	eba3 0309 	sub.w	r3, r3, r9
 8003eec:	4543      	cmp	r3, r8
 8003eee:	f77f af7a 	ble.w	8003de6 <_printf_float+0x242>
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	465a      	mov	r2, fp
 8003ef6:	4631      	mov	r1, r6
 8003ef8:	4628      	mov	r0, r5
 8003efa:	47b8      	blx	r7
 8003efc:	3001      	adds	r0, #1
 8003efe:	f43f aeac 	beq.w	8003c5a <_printf_float+0xb6>
 8003f02:	f108 0801 	add.w	r8, r8, #1
 8003f06:	e7ec      	b.n	8003ee2 <_printf_float+0x33e>
 8003f08:	4642      	mov	r2, r8
 8003f0a:	4631      	mov	r1, r6
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	47b8      	blx	r7
 8003f10:	3001      	adds	r0, #1
 8003f12:	d1c2      	bne.n	8003e9a <_printf_float+0x2f6>
 8003f14:	e6a1      	b.n	8003c5a <_printf_float+0xb6>
 8003f16:	2301      	movs	r3, #1
 8003f18:	4631      	mov	r1, r6
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	920a      	str	r2, [sp, #40]	@ 0x28
 8003f1e:	47b8      	blx	r7
 8003f20:	3001      	adds	r0, #1
 8003f22:	f43f ae9a 	beq.w	8003c5a <_printf_float+0xb6>
 8003f26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003f28:	f10b 0b01 	add.w	fp, fp, #1
 8003f2c:	e7bb      	b.n	8003ea6 <_printf_float+0x302>
 8003f2e:	4631      	mov	r1, r6
 8003f30:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003f34:	4628      	mov	r0, r5
 8003f36:	47b8      	blx	r7
 8003f38:	3001      	adds	r0, #1
 8003f3a:	d1c0      	bne.n	8003ebe <_printf_float+0x31a>
 8003f3c:	e68d      	b.n	8003c5a <_printf_float+0xb6>
 8003f3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003f40:	464b      	mov	r3, r9
 8003f42:	4631      	mov	r1, r6
 8003f44:	4628      	mov	r0, r5
 8003f46:	4442      	add	r2, r8
 8003f48:	47b8      	blx	r7
 8003f4a:	3001      	adds	r0, #1
 8003f4c:	d1c3      	bne.n	8003ed6 <_printf_float+0x332>
 8003f4e:	e684      	b.n	8003c5a <_printf_float+0xb6>
 8003f50:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003f54:	f1ba 0f01 	cmp.w	sl, #1
 8003f58:	dc01      	bgt.n	8003f5e <_printf_float+0x3ba>
 8003f5a:	07db      	lsls	r3, r3, #31
 8003f5c:	d536      	bpl.n	8003fcc <_printf_float+0x428>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	4642      	mov	r2, r8
 8003f62:	4631      	mov	r1, r6
 8003f64:	4628      	mov	r0, r5
 8003f66:	47b8      	blx	r7
 8003f68:	3001      	adds	r0, #1
 8003f6a:	f43f ae76 	beq.w	8003c5a <_printf_float+0xb6>
 8003f6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003f72:	4631      	mov	r1, r6
 8003f74:	4628      	mov	r0, r5
 8003f76:	47b8      	blx	r7
 8003f78:	3001      	adds	r0, #1
 8003f7a:	f43f ae6e 	beq.w	8003c5a <_printf_float+0xb6>
 8003f7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003f82:	2200      	movs	r2, #0
 8003f84:	2300      	movs	r3, #0
 8003f86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003f8a:	f7fc fd0d 	bl	80009a8 <__aeabi_dcmpeq>
 8003f8e:	b9c0      	cbnz	r0, 8003fc2 <_printf_float+0x41e>
 8003f90:	4653      	mov	r3, sl
 8003f92:	f108 0201 	add.w	r2, r8, #1
 8003f96:	4631      	mov	r1, r6
 8003f98:	4628      	mov	r0, r5
 8003f9a:	47b8      	blx	r7
 8003f9c:	3001      	adds	r0, #1
 8003f9e:	d10c      	bne.n	8003fba <_printf_float+0x416>
 8003fa0:	e65b      	b.n	8003c5a <_printf_float+0xb6>
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	465a      	mov	r2, fp
 8003fa6:	4631      	mov	r1, r6
 8003fa8:	4628      	mov	r0, r5
 8003faa:	47b8      	blx	r7
 8003fac:	3001      	adds	r0, #1
 8003fae:	f43f ae54 	beq.w	8003c5a <_printf_float+0xb6>
 8003fb2:	f108 0801 	add.w	r8, r8, #1
 8003fb6:	45d0      	cmp	r8, sl
 8003fb8:	dbf3      	blt.n	8003fa2 <_printf_float+0x3fe>
 8003fba:	464b      	mov	r3, r9
 8003fbc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003fc0:	e6e0      	b.n	8003d84 <_printf_float+0x1e0>
 8003fc2:	f04f 0800 	mov.w	r8, #0
 8003fc6:	f104 0b1a 	add.w	fp, r4, #26
 8003fca:	e7f4      	b.n	8003fb6 <_printf_float+0x412>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	4642      	mov	r2, r8
 8003fd0:	e7e1      	b.n	8003f96 <_printf_float+0x3f2>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	464a      	mov	r2, r9
 8003fd6:	4631      	mov	r1, r6
 8003fd8:	4628      	mov	r0, r5
 8003fda:	47b8      	blx	r7
 8003fdc:	3001      	adds	r0, #1
 8003fde:	f43f ae3c 	beq.w	8003c5a <_printf_float+0xb6>
 8003fe2:	f108 0801 	add.w	r8, r8, #1
 8003fe6:	68e3      	ldr	r3, [r4, #12]
 8003fe8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003fea:	1a5b      	subs	r3, r3, r1
 8003fec:	4543      	cmp	r3, r8
 8003fee:	dcf0      	bgt.n	8003fd2 <_printf_float+0x42e>
 8003ff0:	e6fd      	b.n	8003dee <_printf_float+0x24a>
 8003ff2:	f04f 0800 	mov.w	r8, #0
 8003ff6:	f104 0919 	add.w	r9, r4, #25
 8003ffa:	e7f4      	b.n	8003fe6 <_printf_float+0x442>

08003ffc <_printf_common>:
 8003ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004000:	4616      	mov	r6, r2
 8004002:	4698      	mov	r8, r3
 8004004:	688a      	ldr	r2, [r1, #8]
 8004006:	690b      	ldr	r3, [r1, #16]
 8004008:	4607      	mov	r7, r0
 800400a:	4293      	cmp	r3, r2
 800400c:	bfb8      	it	lt
 800400e:	4613      	movlt	r3, r2
 8004010:	6033      	str	r3, [r6, #0]
 8004012:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004016:	460c      	mov	r4, r1
 8004018:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800401c:	b10a      	cbz	r2, 8004022 <_printf_common+0x26>
 800401e:	3301      	adds	r3, #1
 8004020:	6033      	str	r3, [r6, #0]
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	0699      	lsls	r1, r3, #26
 8004026:	bf42      	ittt	mi
 8004028:	6833      	ldrmi	r3, [r6, #0]
 800402a:	3302      	addmi	r3, #2
 800402c:	6033      	strmi	r3, [r6, #0]
 800402e:	6825      	ldr	r5, [r4, #0]
 8004030:	f015 0506 	ands.w	r5, r5, #6
 8004034:	d106      	bne.n	8004044 <_printf_common+0x48>
 8004036:	f104 0a19 	add.w	sl, r4, #25
 800403a:	68e3      	ldr	r3, [r4, #12]
 800403c:	6832      	ldr	r2, [r6, #0]
 800403e:	1a9b      	subs	r3, r3, r2
 8004040:	42ab      	cmp	r3, r5
 8004042:	dc2b      	bgt.n	800409c <_printf_common+0xa0>
 8004044:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004048:	6822      	ldr	r2, [r4, #0]
 800404a:	3b00      	subs	r3, #0
 800404c:	bf18      	it	ne
 800404e:	2301      	movne	r3, #1
 8004050:	0692      	lsls	r2, r2, #26
 8004052:	d430      	bmi.n	80040b6 <_printf_common+0xba>
 8004054:	4641      	mov	r1, r8
 8004056:	4638      	mov	r0, r7
 8004058:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800405c:	47c8      	blx	r9
 800405e:	3001      	adds	r0, #1
 8004060:	d023      	beq.n	80040aa <_printf_common+0xae>
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	6922      	ldr	r2, [r4, #16]
 8004066:	f003 0306 	and.w	r3, r3, #6
 800406a:	2b04      	cmp	r3, #4
 800406c:	bf14      	ite	ne
 800406e:	2500      	movne	r5, #0
 8004070:	6833      	ldreq	r3, [r6, #0]
 8004072:	f04f 0600 	mov.w	r6, #0
 8004076:	bf08      	it	eq
 8004078:	68e5      	ldreq	r5, [r4, #12]
 800407a:	f104 041a 	add.w	r4, r4, #26
 800407e:	bf08      	it	eq
 8004080:	1aed      	subeq	r5, r5, r3
 8004082:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004086:	bf08      	it	eq
 8004088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800408c:	4293      	cmp	r3, r2
 800408e:	bfc4      	itt	gt
 8004090:	1a9b      	subgt	r3, r3, r2
 8004092:	18ed      	addgt	r5, r5, r3
 8004094:	42b5      	cmp	r5, r6
 8004096:	d11a      	bne.n	80040ce <_printf_common+0xd2>
 8004098:	2000      	movs	r0, #0
 800409a:	e008      	b.n	80040ae <_printf_common+0xb2>
 800409c:	2301      	movs	r3, #1
 800409e:	4652      	mov	r2, sl
 80040a0:	4641      	mov	r1, r8
 80040a2:	4638      	mov	r0, r7
 80040a4:	47c8      	blx	r9
 80040a6:	3001      	adds	r0, #1
 80040a8:	d103      	bne.n	80040b2 <_printf_common+0xb6>
 80040aa:	f04f 30ff 	mov.w	r0, #4294967295
 80040ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040b2:	3501      	adds	r5, #1
 80040b4:	e7c1      	b.n	800403a <_printf_common+0x3e>
 80040b6:	2030      	movs	r0, #48	@ 0x30
 80040b8:	18e1      	adds	r1, r4, r3
 80040ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80040c4:	4422      	add	r2, r4
 80040c6:	3302      	adds	r3, #2
 80040c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80040cc:	e7c2      	b.n	8004054 <_printf_common+0x58>
 80040ce:	2301      	movs	r3, #1
 80040d0:	4622      	mov	r2, r4
 80040d2:	4641      	mov	r1, r8
 80040d4:	4638      	mov	r0, r7
 80040d6:	47c8      	blx	r9
 80040d8:	3001      	adds	r0, #1
 80040da:	d0e6      	beq.n	80040aa <_printf_common+0xae>
 80040dc:	3601      	adds	r6, #1
 80040de:	e7d9      	b.n	8004094 <_printf_common+0x98>

080040e0 <_printf_i>:
 80040e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040e4:	7e0f      	ldrb	r7, [r1, #24]
 80040e6:	4691      	mov	r9, r2
 80040e8:	2f78      	cmp	r7, #120	@ 0x78
 80040ea:	4680      	mov	r8, r0
 80040ec:	460c      	mov	r4, r1
 80040ee:	469a      	mov	sl, r3
 80040f0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80040f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80040f6:	d807      	bhi.n	8004108 <_printf_i+0x28>
 80040f8:	2f62      	cmp	r7, #98	@ 0x62
 80040fa:	d80a      	bhi.n	8004112 <_printf_i+0x32>
 80040fc:	2f00      	cmp	r7, #0
 80040fe:	f000 80d1 	beq.w	80042a4 <_printf_i+0x1c4>
 8004102:	2f58      	cmp	r7, #88	@ 0x58
 8004104:	f000 80b8 	beq.w	8004278 <_printf_i+0x198>
 8004108:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800410c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004110:	e03a      	b.n	8004188 <_printf_i+0xa8>
 8004112:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004116:	2b15      	cmp	r3, #21
 8004118:	d8f6      	bhi.n	8004108 <_printf_i+0x28>
 800411a:	a101      	add	r1, pc, #4	@ (adr r1, 8004120 <_printf_i+0x40>)
 800411c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004120:	08004179 	.word	0x08004179
 8004124:	0800418d 	.word	0x0800418d
 8004128:	08004109 	.word	0x08004109
 800412c:	08004109 	.word	0x08004109
 8004130:	08004109 	.word	0x08004109
 8004134:	08004109 	.word	0x08004109
 8004138:	0800418d 	.word	0x0800418d
 800413c:	08004109 	.word	0x08004109
 8004140:	08004109 	.word	0x08004109
 8004144:	08004109 	.word	0x08004109
 8004148:	08004109 	.word	0x08004109
 800414c:	0800428b 	.word	0x0800428b
 8004150:	080041b7 	.word	0x080041b7
 8004154:	08004245 	.word	0x08004245
 8004158:	08004109 	.word	0x08004109
 800415c:	08004109 	.word	0x08004109
 8004160:	080042ad 	.word	0x080042ad
 8004164:	08004109 	.word	0x08004109
 8004168:	080041b7 	.word	0x080041b7
 800416c:	08004109 	.word	0x08004109
 8004170:	08004109 	.word	0x08004109
 8004174:	0800424d 	.word	0x0800424d
 8004178:	6833      	ldr	r3, [r6, #0]
 800417a:	1d1a      	adds	r2, r3, #4
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6032      	str	r2, [r6, #0]
 8004180:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004184:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004188:	2301      	movs	r3, #1
 800418a:	e09c      	b.n	80042c6 <_printf_i+0x1e6>
 800418c:	6833      	ldr	r3, [r6, #0]
 800418e:	6820      	ldr	r0, [r4, #0]
 8004190:	1d19      	adds	r1, r3, #4
 8004192:	6031      	str	r1, [r6, #0]
 8004194:	0606      	lsls	r6, r0, #24
 8004196:	d501      	bpl.n	800419c <_printf_i+0xbc>
 8004198:	681d      	ldr	r5, [r3, #0]
 800419a:	e003      	b.n	80041a4 <_printf_i+0xc4>
 800419c:	0645      	lsls	r5, r0, #25
 800419e:	d5fb      	bpl.n	8004198 <_printf_i+0xb8>
 80041a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80041a4:	2d00      	cmp	r5, #0
 80041a6:	da03      	bge.n	80041b0 <_printf_i+0xd0>
 80041a8:	232d      	movs	r3, #45	@ 0x2d
 80041aa:	426d      	negs	r5, r5
 80041ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041b0:	230a      	movs	r3, #10
 80041b2:	4858      	ldr	r0, [pc, #352]	@ (8004314 <_printf_i+0x234>)
 80041b4:	e011      	b.n	80041da <_printf_i+0xfa>
 80041b6:	6821      	ldr	r1, [r4, #0]
 80041b8:	6833      	ldr	r3, [r6, #0]
 80041ba:	0608      	lsls	r0, r1, #24
 80041bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80041c0:	d402      	bmi.n	80041c8 <_printf_i+0xe8>
 80041c2:	0649      	lsls	r1, r1, #25
 80041c4:	bf48      	it	mi
 80041c6:	b2ad      	uxthmi	r5, r5
 80041c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80041ca:	6033      	str	r3, [r6, #0]
 80041cc:	bf14      	ite	ne
 80041ce:	230a      	movne	r3, #10
 80041d0:	2308      	moveq	r3, #8
 80041d2:	4850      	ldr	r0, [pc, #320]	@ (8004314 <_printf_i+0x234>)
 80041d4:	2100      	movs	r1, #0
 80041d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80041da:	6866      	ldr	r6, [r4, #4]
 80041dc:	2e00      	cmp	r6, #0
 80041de:	60a6      	str	r6, [r4, #8]
 80041e0:	db05      	blt.n	80041ee <_printf_i+0x10e>
 80041e2:	6821      	ldr	r1, [r4, #0]
 80041e4:	432e      	orrs	r6, r5
 80041e6:	f021 0104 	bic.w	r1, r1, #4
 80041ea:	6021      	str	r1, [r4, #0]
 80041ec:	d04b      	beq.n	8004286 <_printf_i+0x1a6>
 80041ee:	4616      	mov	r6, r2
 80041f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80041f4:	fb03 5711 	mls	r7, r3, r1, r5
 80041f8:	5dc7      	ldrb	r7, [r0, r7]
 80041fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80041fe:	462f      	mov	r7, r5
 8004200:	42bb      	cmp	r3, r7
 8004202:	460d      	mov	r5, r1
 8004204:	d9f4      	bls.n	80041f0 <_printf_i+0x110>
 8004206:	2b08      	cmp	r3, #8
 8004208:	d10b      	bne.n	8004222 <_printf_i+0x142>
 800420a:	6823      	ldr	r3, [r4, #0]
 800420c:	07df      	lsls	r7, r3, #31
 800420e:	d508      	bpl.n	8004222 <_printf_i+0x142>
 8004210:	6923      	ldr	r3, [r4, #16]
 8004212:	6861      	ldr	r1, [r4, #4]
 8004214:	4299      	cmp	r1, r3
 8004216:	bfde      	ittt	le
 8004218:	2330      	movle	r3, #48	@ 0x30
 800421a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800421e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004222:	1b92      	subs	r2, r2, r6
 8004224:	6122      	str	r2, [r4, #16]
 8004226:	464b      	mov	r3, r9
 8004228:	4621      	mov	r1, r4
 800422a:	4640      	mov	r0, r8
 800422c:	f8cd a000 	str.w	sl, [sp]
 8004230:	aa03      	add	r2, sp, #12
 8004232:	f7ff fee3 	bl	8003ffc <_printf_common>
 8004236:	3001      	adds	r0, #1
 8004238:	d14a      	bne.n	80042d0 <_printf_i+0x1f0>
 800423a:	f04f 30ff 	mov.w	r0, #4294967295
 800423e:	b004      	add	sp, #16
 8004240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	f043 0320 	orr.w	r3, r3, #32
 800424a:	6023      	str	r3, [r4, #0]
 800424c:	2778      	movs	r7, #120	@ 0x78
 800424e:	4832      	ldr	r0, [pc, #200]	@ (8004318 <_printf_i+0x238>)
 8004250:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004254:	6823      	ldr	r3, [r4, #0]
 8004256:	6831      	ldr	r1, [r6, #0]
 8004258:	061f      	lsls	r7, r3, #24
 800425a:	f851 5b04 	ldr.w	r5, [r1], #4
 800425e:	d402      	bmi.n	8004266 <_printf_i+0x186>
 8004260:	065f      	lsls	r7, r3, #25
 8004262:	bf48      	it	mi
 8004264:	b2ad      	uxthmi	r5, r5
 8004266:	6031      	str	r1, [r6, #0]
 8004268:	07d9      	lsls	r1, r3, #31
 800426a:	bf44      	itt	mi
 800426c:	f043 0320 	orrmi.w	r3, r3, #32
 8004270:	6023      	strmi	r3, [r4, #0]
 8004272:	b11d      	cbz	r5, 800427c <_printf_i+0x19c>
 8004274:	2310      	movs	r3, #16
 8004276:	e7ad      	b.n	80041d4 <_printf_i+0xf4>
 8004278:	4826      	ldr	r0, [pc, #152]	@ (8004314 <_printf_i+0x234>)
 800427a:	e7e9      	b.n	8004250 <_printf_i+0x170>
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	f023 0320 	bic.w	r3, r3, #32
 8004282:	6023      	str	r3, [r4, #0]
 8004284:	e7f6      	b.n	8004274 <_printf_i+0x194>
 8004286:	4616      	mov	r6, r2
 8004288:	e7bd      	b.n	8004206 <_printf_i+0x126>
 800428a:	6833      	ldr	r3, [r6, #0]
 800428c:	6825      	ldr	r5, [r4, #0]
 800428e:	1d18      	adds	r0, r3, #4
 8004290:	6961      	ldr	r1, [r4, #20]
 8004292:	6030      	str	r0, [r6, #0]
 8004294:	062e      	lsls	r6, r5, #24
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	d501      	bpl.n	800429e <_printf_i+0x1be>
 800429a:	6019      	str	r1, [r3, #0]
 800429c:	e002      	b.n	80042a4 <_printf_i+0x1c4>
 800429e:	0668      	lsls	r0, r5, #25
 80042a0:	d5fb      	bpl.n	800429a <_printf_i+0x1ba>
 80042a2:	8019      	strh	r1, [r3, #0]
 80042a4:	2300      	movs	r3, #0
 80042a6:	4616      	mov	r6, r2
 80042a8:	6123      	str	r3, [r4, #16]
 80042aa:	e7bc      	b.n	8004226 <_printf_i+0x146>
 80042ac:	6833      	ldr	r3, [r6, #0]
 80042ae:	2100      	movs	r1, #0
 80042b0:	1d1a      	adds	r2, r3, #4
 80042b2:	6032      	str	r2, [r6, #0]
 80042b4:	681e      	ldr	r6, [r3, #0]
 80042b6:	6862      	ldr	r2, [r4, #4]
 80042b8:	4630      	mov	r0, r6
 80042ba:	f000 fab8 	bl	800482e <memchr>
 80042be:	b108      	cbz	r0, 80042c4 <_printf_i+0x1e4>
 80042c0:	1b80      	subs	r0, r0, r6
 80042c2:	6060      	str	r0, [r4, #4]
 80042c4:	6863      	ldr	r3, [r4, #4]
 80042c6:	6123      	str	r3, [r4, #16]
 80042c8:	2300      	movs	r3, #0
 80042ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042ce:	e7aa      	b.n	8004226 <_printf_i+0x146>
 80042d0:	4632      	mov	r2, r6
 80042d2:	4649      	mov	r1, r9
 80042d4:	4640      	mov	r0, r8
 80042d6:	6923      	ldr	r3, [r4, #16]
 80042d8:	47d0      	blx	sl
 80042da:	3001      	adds	r0, #1
 80042dc:	d0ad      	beq.n	800423a <_printf_i+0x15a>
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	079b      	lsls	r3, r3, #30
 80042e2:	d413      	bmi.n	800430c <_printf_i+0x22c>
 80042e4:	68e0      	ldr	r0, [r4, #12]
 80042e6:	9b03      	ldr	r3, [sp, #12]
 80042e8:	4298      	cmp	r0, r3
 80042ea:	bfb8      	it	lt
 80042ec:	4618      	movlt	r0, r3
 80042ee:	e7a6      	b.n	800423e <_printf_i+0x15e>
 80042f0:	2301      	movs	r3, #1
 80042f2:	4632      	mov	r2, r6
 80042f4:	4649      	mov	r1, r9
 80042f6:	4640      	mov	r0, r8
 80042f8:	47d0      	blx	sl
 80042fa:	3001      	adds	r0, #1
 80042fc:	d09d      	beq.n	800423a <_printf_i+0x15a>
 80042fe:	3501      	adds	r5, #1
 8004300:	68e3      	ldr	r3, [r4, #12]
 8004302:	9903      	ldr	r1, [sp, #12]
 8004304:	1a5b      	subs	r3, r3, r1
 8004306:	42ab      	cmp	r3, r5
 8004308:	dcf2      	bgt.n	80042f0 <_printf_i+0x210>
 800430a:	e7eb      	b.n	80042e4 <_printf_i+0x204>
 800430c:	2500      	movs	r5, #0
 800430e:	f104 0619 	add.w	r6, r4, #25
 8004312:	e7f5      	b.n	8004300 <_printf_i+0x220>
 8004314:	08006bd4 	.word	0x08006bd4
 8004318:	08006be5 	.word	0x08006be5

0800431c <std>:
 800431c:	2300      	movs	r3, #0
 800431e:	b510      	push	{r4, lr}
 8004320:	4604      	mov	r4, r0
 8004322:	e9c0 3300 	strd	r3, r3, [r0]
 8004326:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800432a:	6083      	str	r3, [r0, #8]
 800432c:	8181      	strh	r1, [r0, #12]
 800432e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004330:	81c2      	strh	r2, [r0, #14]
 8004332:	6183      	str	r3, [r0, #24]
 8004334:	4619      	mov	r1, r3
 8004336:	2208      	movs	r2, #8
 8004338:	305c      	adds	r0, #92	@ 0x5c
 800433a:	f000 f9f9 	bl	8004730 <memset>
 800433e:	4b0d      	ldr	r3, [pc, #52]	@ (8004374 <std+0x58>)
 8004340:	6224      	str	r4, [r4, #32]
 8004342:	6263      	str	r3, [r4, #36]	@ 0x24
 8004344:	4b0c      	ldr	r3, [pc, #48]	@ (8004378 <std+0x5c>)
 8004346:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004348:	4b0c      	ldr	r3, [pc, #48]	@ (800437c <std+0x60>)
 800434a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800434c:	4b0c      	ldr	r3, [pc, #48]	@ (8004380 <std+0x64>)
 800434e:	6323      	str	r3, [r4, #48]	@ 0x30
 8004350:	4b0c      	ldr	r3, [pc, #48]	@ (8004384 <std+0x68>)
 8004352:	429c      	cmp	r4, r3
 8004354:	d006      	beq.n	8004364 <std+0x48>
 8004356:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800435a:	4294      	cmp	r4, r2
 800435c:	d002      	beq.n	8004364 <std+0x48>
 800435e:	33d0      	adds	r3, #208	@ 0xd0
 8004360:	429c      	cmp	r4, r3
 8004362:	d105      	bne.n	8004370 <std+0x54>
 8004364:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800436c:	f000 ba5c 	b.w	8004828 <__retarget_lock_init_recursive>
 8004370:	bd10      	pop	{r4, pc}
 8004372:	bf00      	nop
 8004374:	08004581 	.word	0x08004581
 8004378:	080045a3 	.word	0x080045a3
 800437c:	080045db 	.word	0x080045db
 8004380:	080045ff 	.word	0x080045ff
 8004384:	20000350 	.word	0x20000350

08004388 <stdio_exit_handler>:
 8004388:	4a02      	ldr	r2, [pc, #8]	@ (8004394 <stdio_exit_handler+0xc>)
 800438a:	4903      	ldr	r1, [pc, #12]	@ (8004398 <stdio_exit_handler+0x10>)
 800438c:	4803      	ldr	r0, [pc, #12]	@ (800439c <stdio_exit_handler+0x14>)
 800438e:	f000 b869 	b.w	8004464 <_fwalk_sglue>
 8004392:	bf00      	nop
 8004394:	2000009c 	.word	0x2000009c
 8004398:	08006179 	.word	0x08006179
 800439c:	200000ac 	.word	0x200000ac

080043a0 <cleanup_stdio>:
 80043a0:	6841      	ldr	r1, [r0, #4]
 80043a2:	4b0c      	ldr	r3, [pc, #48]	@ (80043d4 <cleanup_stdio+0x34>)
 80043a4:	b510      	push	{r4, lr}
 80043a6:	4299      	cmp	r1, r3
 80043a8:	4604      	mov	r4, r0
 80043aa:	d001      	beq.n	80043b0 <cleanup_stdio+0x10>
 80043ac:	f001 fee4 	bl	8006178 <_fflush_r>
 80043b0:	68a1      	ldr	r1, [r4, #8]
 80043b2:	4b09      	ldr	r3, [pc, #36]	@ (80043d8 <cleanup_stdio+0x38>)
 80043b4:	4299      	cmp	r1, r3
 80043b6:	d002      	beq.n	80043be <cleanup_stdio+0x1e>
 80043b8:	4620      	mov	r0, r4
 80043ba:	f001 fedd 	bl	8006178 <_fflush_r>
 80043be:	68e1      	ldr	r1, [r4, #12]
 80043c0:	4b06      	ldr	r3, [pc, #24]	@ (80043dc <cleanup_stdio+0x3c>)
 80043c2:	4299      	cmp	r1, r3
 80043c4:	d004      	beq.n	80043d0 <cleanup_stdio+0x30>
 80043c6:	4620      	mov	r0, r4
 80043c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043cc:	f001 bed4 	b.w	8006178 <_fflush_r>
 80043d0:	bd10      	pop	{r4, pc}
 80043d2:	bf00      	nop
 80043d4:	20000350 	.word	0x20000350
 80043d8:	200003b8 	.word	0x200003b8
 80043dc:	20000420 	.word	0x20000420

080043e0 <global_stdio_init.part.0>:
 80043e0:	b510      	push	{r4, lr}
 80043e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004410 <global_stdio_init.part.0+0x30>)
 80043e4:	4c0b      	ldr	r4, [pc, #44]	@ (8004414 <global_stdio_init.part.0+0x34>)
 80043e6:	4a0c      	ldr	r2, [pc, #48]	@ (8004418 <global_stdio_init.part.0+0x38>)
 80043e8:	4620      	mov	r0, r4
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	2104      	movs	r1, #4
 80043ee:	2200      	movs	r2, #0
 80043f0:	f7ff ff94 	bl	800431c <std>
 80043f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80043f8:	2201      	movs	r2, #1
 80043fa:	2109      	movs	r1, #9
 80043fc:	f7ff ff8e 	bl	800431c <std>
 8004400:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004404:	2202      	movs	r2, #2
 8004406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800440a:	2112      	movs	r1, #18
 800440c:	f7ff bf86 	b.w	800431c <std>
 8004410:	20000488 	.word	0x20000488
 8004414:	20000350 	.word	0x20000350
 8004418:	08004389 	.word	0x08004389

0800441c <__sfp_lock_acquire>:
 800441c:	4801      	ldr	r0, [pc, #4]	@ (8004424 <__sfp_lock_acquire+0x8>)
 800441e:	f000 ba04 	b.w	800482a <__retarget_lock_acquire_recursive>
 8004422:	bf00      	nop
 8004424:	20000491 	.word	0x20000491

08004428 <__sfp_lock_release>:
 8004428:	4801      	ldr	r0, [pc, #4]	@ (8004430 <__sfp_lock_release+0x8>)
 800442a:	f000 b9ff 	b.w	800482c <__retarget_lock_release_recursive>
 800442e:	bf00      	nop
 8004430:	20000491 	.word	0x20000491

08004434 <__sinit>:
 8004434:	b510      	push	{r4, lr}
 8004436:	4604      	mov	r4, r0
 8004438:	f7ff fff0 	bl	800441c <__sfp_lock_acquire>
 800443c:	6a23      	ldr	r3, [r4, #32]
 800443e:	b11b      	cbz	r3, 8004448 <__sinit+0x14>
 8004440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004444:	f7ff bff0 	b.w	8004428 <__sfp_lock_release>
 8004448:	4b04      	ldr	r3, [pc, #16]	@ (800445c <__sinit+0x28>)
 800444a:	6223      	str	r3, [r4, #32]
 800444c:	4b04      	ldr	r3, [pc, #16]	@ (8004460 <__sinit+0x2c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1f5      	bne.n	8004440 <__sinit+0xc>
 8004454:	f7ff ffc4 	bl	80043e0 <global_stdio_init.part.0>
 8004458:	e7f2      	b.n	8004440 <__sinit+0xc>
 800445a:	bf00      	nop
 800445c:	080043a1 	.word	0x080043a1
 8004460:	20000488 	.word	0x20000488

08004464 <_fwalk_sglue>:
 8004464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004468:	4607      	mov	r7, r0
 800446a:	4688      	mov	r8, r1
 800446c:	4614      	mov	r4, r2
 800446e:	2600      	movs	r6, #0
 8004470:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004474:	f1b9 0901 	subs.w	r9, r9, #1
 8004478:	d505      	bpl.n	8004486 <_fwalk_sglue+0x22>
 800447a:	6824      	ldr	r4, [r4, #0]
 800447c:	2c00      	cmp	r4, #0
 800447e:	d1f7      	bne.n	8004470 <_fwalk_sglue+0xc>
 8004480:	4630      	mov	r0, r6
 8004482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004486:	89ab      	ldrh	r3, [r5, #12]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d907      	bls.n	800449c <_fwalk_sglue+0x38>
 800448c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004490:	3301      	adds	r3, #1
 8004492:	d003      	beq.n	800449c <_fwalk_sglue+0x38>
 8004494:	4629      	mov	r1, r5
 8004496:	4638      	mov	r0, r7
 8004498:	47c0      	blx	r8
 800449a:	4306      	orrs	r6, r0
 800449c:	3568      	adds	r5, #104	@ 0x68
 800449e:	e7e9      	b.n	8004474 <_fwalk_sglue+0x10>

080044a0 <iprintf>:
 80044a0:	b40f      	push	{r0, r1, r2, r3}
 80044a2:	b507      	push	{r0, r1, r2, lr}
 80044a4:	4906      	ldr	r1, [pc, #24]	@ (80044c0 <iprintf+0x20>)
 80044a6:	ab04      	add	r3, sp, #16
 80044a8:	6808      	ldr	r0, [r1, #0]
 80044aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80044ae:	6881      	ldr	r1, [r0, #8]
 80044b0:	9301      	str	r3, [sp, #4]
 80044b2:	f001 fcc9 	bl	8005e48 <_vfiprintf_r>
 80044b6:	b003      	add	sp, #12
 80044b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80044bc:	b004      	add	sp, #16
 80044be:	4770      	bx	lr
 80044c0:	200000a8 	.word	0x200000a8

080044c4 <_puts_r>:
 80044c4:	6a03      	ldr	r3, [r0, #32]
 80044c6:	b570      	push	{r4, r5, r6, lr}
 80044c8:	4605      	mov	r5, r0
 80044ca:	460e      	mov	r6, r1
 80044cc:	6884      	ldr	r4, [r0, #8]
 80044ce:	b90b      	cbnz	r3, 80044d4 <_puts_r+0x10>
 80044d0:	f7ff ffb0 	bl	8004434 <__sinit>
 80044d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80044d6:	07db      	lsls	r3, r3, #31
 80044d8:	d405      	bmi.n	80044e6 <_puts_r+0x22>
 80044da:	89a3      	ldrh	r3, [r4, #12]
 80044dc:	0598      	lsls	r0, r3, #22
 80044de:	d402      	bmi.n	80044e6 <_puts_r+0x22>
 80044e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044e2:	f000 f9a2 	bl	800482a <__retarget_lock_acquire_recursive>
 80044e6:	89a3      	ldrh	r3, [r4, #12]
 80044e8:	0719      	lsls	r1, r3, #28
 80044ea:	d502      	bpl.n	80044f2 <_puts_r+0x2e>
 80044ec:	6923      	ldr	r3, [r4, #16]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d135      	bne.n	800455e <_puts_r+0x9a>
 80044f2:	4621      	mov	r1, r4
 80044f4:	4628      	mov	r0, r5
 80044f6:	f000 f8c5 	bl	8004684 <__swsetup_r>
 80044fa:	b380      	cbz	r0, 800455e <_puts_r+0x9a>
 80044fc:	f04f 35ff 	mov.w	r5, #4294967295
 8004500:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004502:	07da      	lsls	r2, r3, #31
 8004504:	d405      	bmi.n	8004512 <_puts_r+0x4e>
 8004506:	89a3      	ldrh	r3, [r4, #12]
 8004508:	059b      	lsls	r3, r3, #22
 800450a:	d402      	bmi.n	8004512 <_puts_r+0x4e>
 800450c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800450e:	f000 f98d 	bl	800482c <__retarget_lock_release_recursive>
 8004512:	4628      	mov	r0, r5
 8004514:	bd70      	pop	{r4, r5, r6, pc}
 8004516:	2b00      	cmp	r3, #0
 8004518:	da04      	bge.n	8004524 <_puts_r+0x60>
 800451a:	69a2      	ldr	r2, [r4, #24]
 800451c:	429a      	cmp	r2, r3
 800451e:	dc17      	bgt.n	8004550 <_puts_r+0x8c>
 8004520:	290a      	cmp	r1, #10
 8004522:	d015      	beq.n	8004550 <_puts_r+0x8c>
 8004524:	6823      	ldr	r3, [r4, #0]
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	6022      	str	r2, [r4, #0]
 800452a:	7019      	strb	r1, [r3, #0]
 800452c:	68a3      	ldr	r3, [r4, #8]
 800452e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004532:	3b01      	subs	r3, #1
 8004534:	60a3      	str	r3, [r4, #8]
 8004536:	2900      	cmp	r1, #0
 8004538:	d1ed      	bne.n	8004516 <_puts_r+0x52>
 800453a:	2b00      	cmp	r3, #0
 800453c:	da11      	bge.n	8004562 <_puts_r+0x9e>
 800453e:	4622      	mov	r2, r4
 8004540:	210a      	movs	r1, #10
 8004542:	4628      	mov	r0, r5
 8004544:	f000 f85f 	bl	8004606 <__swbuf_r>
 8004548:	3001      	adds	r0, #1
 800454a:	d0d7      	beq.n	80044fc <_puts_r+0x38>
 800454c:	250a      	movs	r5, #10
 800454e:	e7d7      	b.n	8004500 <_puts_r+0x3c>
 8004550:	4622      	mov	r2, r4
 8004552:	4628      	mov	r0, r5
 8004554:	f000 f857 	bl	8004606 <__swbuf_r>
 8004558:	3001      	adds	r0, #1
 800455a:	d1e7      	bne.n	800452c <_puts_r+0x68>
 800455c:	e7ce      	b.n	80044fc <_puts_r+0x38>
 800455e:	3e01      	subs	r6, #1
 8004560:	e7e4      	b.n	800452c <_puts_r+0x68>
 8004562:	6823      	ldr	r3, [r4, #0]
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	6022      	str	r2, [r4, #0]
 8004568:	220a      	movs	r2, #10
 800456a:	701a      	strb	r2, [r3, #0]
 800456c:	e7ee      	b.n	800454c <_puts_r+0x88>
	...

08004570 <puts>:
 8004570:	4b02      	ldr	r3, [pc, #8]	@ (800457c <puts+0xc>)
 8004572:	4601      	mov	r1, r0
 8004574:	6818      	ldr	r0, [r3, #0]
 8004576:	f7ff bfa5 	b.w	80044c4 <_puts_r>
 800457a:	bf00      	nop
 800457c:	200000a8 	.word	0x200000a8

08004580 <__sread>:
 8004580:	b510      	push	{r4, lr}
 8004582:	460c      	mov	r4, r1
 8004584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004588:	f000 f900 	bl	800478c <_read_r>
 800458c:	2800      	cmp	r0, #0
 800458e:	bfab      	itete	ge
 8004590:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004592:	89a3      	ldrhlt	r3, [r4, #12]
 8004594:	181b      	addge	r3, r3, r0
 8004596:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800459a:	bfac      	ite	ge
 800459c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800459e:	81a3      	strhlt	r3, [r4, #12]
 80045a0:	bd10      	pop	{r4, pc}

080045a2 <__swrite>:
 80045a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045a6:	461f      	mov	r7, r3
 80045a8:	898b      	ldrh	r3, [r1, #12]
 80045aa:	4605      	mov	r5, r0
 80045ac:	05db      	lsls	r3, r3, #23
 80045ae:	460c      	mov	r4, r1
 80045b0:	4616      	mov	r6, r2
 80045b2:	d505      	bpl.n	80045c0 <__swrite+0x1e>
 80045b4:	2302      	movs	r3, #2
 80045b6:	2200      	movs	r2, #0
 80045b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045bc:	f000 f8d4 	bl	8004768 <_lseek_r>
 80045c0:	89a3      	ldrh	r3, [r4, #12]
 80045c2:	4632      	mov	r2, r6
 80045c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045c8:	81a3      	strh	r3, [r4, #12]
 80045ca:	4628      	mov	r0, r5
 80045cc:	463b      	mov	r3, r7
 80045ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045d6:	f000 b8eb 	b.w	80047b0 <_write_r>

080045da <__sseek>:
 80045da:	b510      	push	{r4, lr}
 80045dc:	460c      	mov	r4, r1
 80045de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045e2:	f000 f8c1 	bl	8004768 <_lseek_r>
 80045e6:	1c43      	adds	r3, r0, #1
 80045e8:	89a3      	ldrh	r3, [r4, #12]
 80045ea:	bf15      	itete	ne
 80045ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80045ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80045f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80045f6:	81a3      	strheq	r3, [r4, #12]
 80045f8:	bf18      	it	ne
 80045fa:	81a3      	strhne	r3, [r4, #12]
 80045fc:	bd10      	pop	{r4, pc}

080045fe <__sclose>:
 80045fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004602:	f000 b8a1 	b.w	8004748 <_close_r>

08004606 <__swbuf_r>:
 8004606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004608:	460e      	mov	r6, r1
 800460a:	4614      	mov	r4, r2
 800460c:	4605      	mov	r5, r0
 800460e:	b118      	cbz	r0, 8004618 <__swbuf_r+0x12>
 8004610:	6a03      	ldr	r3, [r0, #32]
 8004612:	b90b      	cbnz	r3, 8004618 <__swbuf_r+0x12>
 8004614:	f7ff ff0e 	bl	8004434 <__sinit>
 8004618:	69a3      	ldr	r3, [r4, #24]
 800461a:	60a3      	str	r3, [r4, #8]
 800461c:	89a3      	ldrh	r3, [r4, #12]
 800461e:	071a      	lsls	r2, r3, #28
 8004620:	d501      	bpl.n	8004626 <__swbuf_r+0x20>
 8004622:	6923      	ldr	r3, [r4, #16]
 8004624:	b943      	cbnz	r3, 8004638 <__swbuf_r+0x32>
 8004626:	4621      	mov	r1, r4
 8004628:	4628      	mov	r0, r5
 800462a:	f000 f82b 	bl	8004684 <__swsetup_r>
 800462e:	b118      	cbz	r0, 8004638 <__swbuf_r+0x32>
 8004630:	f04f 37ff 	mov.w	r7, #4294967295
 8004634:	4638      	mov	r0, r7
 8004636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004638:	6823      	ldr	r3, [r4, #0]
 800463a:	6922      	ldr	r2, [r4, #16]
 800463c:	b2f6      	uxtb	r6, r6
 800463e:	1a98      	subs	r0, r3, r2
 8004640:	6963      	ldr	r3, [r4, #20]
 8004642:	4637      	mov	r7, r6
 8004644:	4283      	cmp	r3, r0
 8004646:	dc05      	bgt.n	8004654 <__swbuf_r+0x4e>
 8004648:	4621      	mov	r1, r4
 800464a:	4628      	mov	r0, r5
 800464c:	f001 fd94 	bl	8006178 <_fflush_r>
 8004650:	2800      	cmp	r0, #0
 8004652:	d1ed      	bne.n	8004630 <__swbuf_r+0x2a>
 8004654:	68a3      	ldr	r3, [r4, #8]
 8004656:	3b01      	subs	r3, #1
 8004658:	60a3      	str	r3, [r4, #8]
 800465a:	6823      	ldr	r3, [r4, #0]
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	6022      	str	r2, [r4, #0]
 8004660:	701e      	strb	r6, [r3, #0]
 8004662:	6962      	ldr	r2, [r4, #20]
 8004664:	1c43      	adds	r3, r0, #1
 8004666:	429a      	cmp	r2, r3
 8004668:	d004      	beq.n	8004674 <__swbuf_r+0x6e>
 800466a:	89a3      	ldrh	r3, [r4, #12]
 800466c:	07db      	lsls	r3, r3, #31
 800466e:	d5e1      	bpl.n	8004634 <__swbuf_r+0x2e>
 8004670:	2e0a      	cmp	r6, #10
 8004672:	d1df      	bne.n	8004634 <__swbuf_r+0x2e>
 8004674:	4621      	mov	r1, r4
 8004676:	4628      	mov	r0, r5
 8004678:	f001 fd7e 	bl	8006178 <_fflush_r>
 800467c:	2800      	cmp	r0, #0
 800467e:	d0d9      	beq.n	8004634 <__swbuf_r+0x2e>
 8004680:	e7d6      	b.n	8004630 <__swbuf_r+0x2a>
	...

08004684 <__swsetup_r>:
 8004684:	b538      	push	{r3, r4, r5, lr}
 8004686:	4b29      	ldr	r3, [pc, #164]	@ (800472c <__swsetup_r+0xa8>)
 8004688:	4605      	mov	r5, r0
 800468a:	6818      	ldr	r0, [r3, #0]
 800468c:	460c      	mov	r4, r1
 800468e:	b118      	cbz	r0, 8004698 <__swsetup_r+0x14>
 8004690:	6a03      	ldr	r3, [r0, #32]
 8004692:	b90b      	cbnz	r3, 8004698 <__swsetup_r+0x14>
 8004694:	f7ff fece 	bl	8004434 <__sinit>
 8004698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800469c:	0719      	lsls	r1, r3, #28
 800469e:	d422      	bmi.n	80046e6 <__swsetup_r+0x62>
 80046a0:	06da      	lsls	r2, r3, #27
 80046a2:	d407      	bmi.n	80046b4 <__swsetup_r+0x30>
 80046a4:	2209      	movs	r2, #9
 80046a6:	602a      	str	r2, [r5, #0]
 80046a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046ac:	f04f 30ff 	mov.w	r0, #4294967295
 80046b0:	81a3      	strh	r3, [r4, #12]
 80046b2:	e033      	b.n	800471c <__swsetup_r+0x98>
 80046b4:	0758      	lsls	r0, r3, #29
 80046b6:	d512      	bpl.n	80046de <__swsetup_r+0x5a>
 80046b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80046ba:	b141      	cbz	r1, 80046ce <__swsetup_r+0x4a>
 80046bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80046c0:	4299      	cmp	r1, r3
 80046c2:	d002      	beq.n	80046ca <__swsetup_r+0x46>
 80046c4:	4628      	mov	r0, r5
 80046c6:	f000 ff1f 	bl	8005508 <_free_r>
 80046ca:	2300      	movs	r3, #0
 80046cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80046ce:	89a3      	ldrh	r3, [r4, #12]
 80046d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80046d4:	81a3      	strh	r3, [r4, #12]
 80046d6:	2300      	movs	r3, #0
 80046d8:	6063      	str	r3, [r4, #4]
 80046da:	6923      	ldr	r3, [r4, #16]
 80046dc:	6023      	str	r3, [r4, #0]
 80046de:	89a3      	ldrh	r3, [r4, #12]
 80046e0:	f043 0308 	orr.w	r3, r3, #8
 80046e4:	81a3      	strh	r3, [r4, #12]
 80046e6:	6923      	ldr	r3, [r4, #16]
 80046e8:	b94b      	cbnz	r3, 80046fe <__swsetup_r+0x7a>
 80046ea:	89a3      	ldrh	r3, [r4, #12]
 80046ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80046f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046f4:	d003      	beq.n	80046fe <__swsetup_r+0x7a>
 80046f6:	4621      	mov	r1, r4
 80046f8:	4628      	mov	r0, r5
 80046fa:	f001 fd8a 	bl	8006212 <__smakebuf_r>
 80046fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004702:	f013 0201 	ands.w	r2, r3, #1
 8004706:	d00a      	beq.n	800471e <__swsetup_r+0x9a>
 8004708:	2200      	movs	r2, #0
 800470a:	60a2      	str	r2, [r4, #8]
 800470c:	6962      	ldr	r2, [r4, #20]
 800470e:	4252      	negs	r2, r2
 8004710:	61a2      	str	r2, [r4, #24]
 8004712:	6922      	ldr	r2, [r4, #16]
 8004714:	b942      	cbnz	r2, 8004728 <__swsetup_r+0xa4>
 8004716:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800471a:	d1c5      	bne.n	80046a8 <__swsetup_r+0x24>
 800471c:	bd38      	pop	{r3, r4, r5, pc}
 800471e:	0799      	lsls	r1, r3, #30
 8004720:	bf58      	it	pl
 8004722:	6962      	ldrpl	r2, [r4, #20]
 8004724:	60a2      	str	r2, [r4, #8]
 8004726:	e7f4      	b.n	8004712 <__swsetup_r+0x8e>
 8004728:	2000      	movs	r0, #0
 800472a:	e7f7      	b.n	800471c <__swsetup_r+0x98>
 800472c:	200000a8 	.word	0x200000a8

08004730 <memset>:
 8004730:	4603      	mov	r3, r0
 8004732:	4402      	add	r2, r0
 8004734:	4293      	cmp	r3, r2
 8004736:	d100      	bne.n	800473a <memset+0xa>
 8004738:	4770      	bx	lr
 800473a:	f803 1b01 	strb.w	r1, [r3], #1
 800473e:	e7f9      	b.n	8004734 <memset+0x4>

08004740 <_localeconv_r>:
 8004740:	4800      	ldr	r0, [pc, #0]	@ (8004744 <_localeconv_r+0x4>)
 8004742:	4770      	bx	lr
 8004744:	200001e8 	.word	0x200001e8

08004748 <_close_r>:
 8004748:	b538      	push	{r3, r4, r5, lr}
 800474a:	2300      	movs	r3, #0
 800474c:	4d05      	ldr	r5, [pc, #20]	@ (8004764 <_close_r+0x1c>)
 800474e:	4604      	mov	r4, r0
 8004750:	4608      	mov	r0, r1
 8004752:	602b      	str	r3, [r5, #0]
 8004754:	f7fd f9a5 	bl	8001aa2 <_close>
 8004758:	1c43      	adds	r3, r0, #1
 800475a:	d102      	bne.n	8004762 <_close_r+0x1a>
 800475c:	682b      	ldr	r3, [r5, #0]
 800475e:	b103      	cbz	r3, 8004762 <_close_r+0x1a>
 8004760:	6023      	str	r3, [r4, #0]
 8004762:	bd38      	pop	{r3, r4, r5, pc}
 8004764:	2000048c 	.word	0x2000048c

08004768 <_lseek_r>:
 8004768:	b538      	push	{r3, r4, r5, lr}
 800476a:	4604      	mov	r4, r0
 800476c:	4608      	mov	r0, r1
 800476e:	4611      	mov	r1, r2
 8004770:	2200      	movs	r2, #0
 8004772:	4d05      	ldr	r5, [pc, #20]	@ (8004788 <_lseek_r+0x20>)
 8004774:	602a      	str	r2, [r5, #0]
 8004776:	461a      	mov	r2, r3
 8004778:	f7fd f9b7 	bl	8001aea <_lseek>
 800477c:	1c43      	adds	r3, r0, #1
 800477e:	d102      	bne.n	8004786 <_lseek_r+0x1e>
 8004780:	682b      	ldr	r3, [r5, #0]
 8004782:	b103      	cbz	r3, 8004786 <_lseek_r+0x1e>
 8004784:	6023      	str	r3, [r4, #0]
 8004786:	bd38      	pop	{r3, r4, r5, pc}
 8004788:	2000048c 	.word	0x2000048c

0800478c <_read_r>:
 800478c:	b538      	push	{r3, r4, r5, lr}
 800478e:	4604      	mov	r4, r0
 8004790:	4608      	mov	r0, r1
 8004792:	4611      	mov	r1, r2
 8004794:	2200      	movs	r2, #0
 8004796:	4d05      	ldr	r5, [pc, #20]	@ (80047ac <_read_r+0x20>)
 8004798:	602a      	str	r2, [r5, #0]
 800479a:	461a      	mov	r2, r3
 800479c:	f7fd f948 	bl	8001a30 <_read>
 80047a0:	1c43      	adds	r3, r0, #1
 80047a2:	d102      	bne.n	80047aa <_read_r+0x1e>
 80047a4:	682b      	ldr	r3, [r5, #0]
 80047a6:	b103      	cbz	r3, 80047aa <_read_r+0x1e>
 80047a8:	6023      	str	r3, [r4, #0]
 80047aa:	bd38      	pop	{r3, r4, r5, pc}
 80047ac:	2000048c 	.word	0x2000048c

080047b0 <_write_r>:
 80047b0:	b538      	push	{r3, r4, r5, lr}
 80047b2:	4604      	mov	r4, r0
 80047b4:	4608      	mov	r0, r1
 80047b6:	4611      	mov	r1, r2
 80047b8:	2200      	movs	r2, #0
 80047ba:	4d05      	ldr	r5, [pc, #20]	@ (80047d0 <_write_r+0x20>)
 80047bc:	602a      	str	r2, [r5, #0]
 80047be:	461a      	mov	r2, r3
 80047c0:	f7fd f953 	bl	8001a6a <_write>
 80047c4:	1c43      	adds	r3, r0, #1
 80047c6:	d102      	bne.n	80047ce <_write_r+0x1e>
 80047c8:	682b      	ldr	r3, [r5, #0]
 80047ca:	b103      	cbz	r3, 80047ce <_write_r+0x1e>
 80047cc:	6023      	str	r3, [r4, #0]
 80047ce:	bd38      	pop	{r3, r4, r5, pc}
 80047d0:	2000048c 	.word	0x2000048c

080047d4 <__errno>:
 80047d4:	4b01      	ldr	r3, [pc, #4]	@ (80047dc <__errno+0x8>)
 80047d6:	6818      	ldr	r0, [r3, #0]
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	200000a8 	.word	0x200000a8

080047e0 <__libc_init_array>:
 80047e0:	b570      	push	{r4, r5, r6, lr}
 80047e2:	2600      	movs	r6, #0
 80047e4:	4d0c      	ldr	r5, [pc, #48]	@ (8004818 <__libc_init_array+0x38>)
 80047e6:	4c0d      	ldr	r4, [pc, #52]	@ (800481c <__libc_init_array+0x3c>)
 80047e8:	1b64      	subs	r4, r4, r5
 80047ea:	10a4      	asrs	r4, r4, #2
 80047ec:	42a6      	cmp	r6, r4
 80047ee:	d109      	bne.n	8004804 <__libc_init_array+0x24>
 80047f0:	f002 f99c 	bl	8006b2c <_init>
 80047f4:	2600      	movs	r6, #0
 80047f6:	4d0a      	ldr	r5, [pc, #40]	@ (8004820 <__libc_init_array+0x40>)
 80047f8:	4c0a      	ldr	r4, [pc, #40]	@ (8004824 <__libc_init_array+0x44>)
 80047fa:	1b64      	subs	r4, r4, r5
 80047fc:	10a4      	asrs	r4, r4, #2
 80047fe:	42a6      	cmp	r6, r4
 8004800:	d105      	bne.n	800480e <__libc_init_array+0x2e>
 8004802:	bd70      	pop	{r4, r5, r6, pc}
 8004804:	f855 3b04 	ldr.w	r3, [r5], #4
 8004808:	4798      	blx	r3
 800480a:	3601      	adds	r6, #1
 800480c:	e7ee      	b.n	80047ec <__libc_init_array+0xc>
 800480e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004812:	4798      	blx	r3
 8004814:	3601      	adds	r6, #1
 8004816:	e7f2      	b.n	80047fe <__libc_init_array+0x1e>
 8004818:	08006fc0 	.word	0x08006fc0
 800481c:	08006fc0 	.word	0x08006fc0
 8004820:	08006fc0 	.word	0x08006fc0
 8004824:	08006fc4 	.word	0x08006fc4

08004828 <__retarget_lock_init_recursive>:
 8004828:	4770      	bx	lr

0800482a <__retarget_lock_acquire_recursive>:
 800482a:	4770      	bx	lr

0800482c <__retarget_lock_release_recursive>:
 800482c:	4770      	bx	lr

0800482e <memchr>:
 800482e:	4603      	mov	r3, r0
 8004830:	b510      	push	{r4, lr}
 8004832:	b2c9      	uxtb	r1, r1
 8004834:	4402      	add	r2, r0
 8004836:	4293      	cmp	r3, r2
 8004838:	4618      	mov	r0, r3
 800483a:	d101      	bne.n	8004840 <memchr+0x12>
 800483c:	2000      	movs	r0, #0
 800483e:	e003      	b.n	8004848 <memchr+0x1a>
 8004840:	7804      	ldrb	r4, [r0, #0]
 8004842:	3301      	adds	r3, #1
 8004844:	428c      	cmp	r4, r1
 8004846:	d1f6      	bne.n	8004836 <memchr+0x8>
 8004848:	bd10      	pop	{r4, pc}

0800484a <quorem>:
 800484a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800484e:	6903      	ldr	r3, [r0, #16]
 8004850:	690c      	ldr	r4, [r1, #16]
 8004852:	4607      	mov	r7, r0
 8004854:	42a3      	cmp	r3, r4
 8004856:	db7e      	blt.n	8004956 <quorem+0x10c>
 8004858:	3c01      	subs	r4, #1
 800485a:	00a3      	lsls	r3, r4, #2
 800485c:	f100 0514 	add.w	r5, r0, #20
 8004860:	f101 0814 	add.w	r8, r1, #20
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800486a:	9301      	str	r3, [sp, #4]
 800486c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004870:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004874:	3301      	adds	r3, #1
 8004876:	429a      	cmp	r2, r3
 8004878:	fbb2 f6f3 	udiv	r6, r2, r3
 800487c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004880:	d32e      	bcc.n	80048e0 <quorem+0x96>
 8004882:	f04f 0a00 	mov.w	sl, #0
 8004886:	46c4      	mov	ip, r8
 8004888:	46ae      	mov	lr, r5
 800488a:	46d3      	mov	fp, sl
 800488c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004890:	b298      	uxth	r0, r3
 8004892:	fb06 a000 	mla	r0, r6, r0, sl
 8004896:	0c1b      	lsrs	r3, r3, #16
 8004898:	0c02      	lsrs	r2, r0, #16
 800489a:	fb06 2303 	mla	r3, r6, r3, r2
 800489e:	f8de 2000 	ldr.w	r2, [lr]
 80048a2:	b280      	uxth	r0, r0
 80048a4:	b292      	uxth	r2, r2
 80048a6:	1a12      	subs	r2, r2, r0
 80048a8:	445a      	add	r2, fp
 80048aa:	f8de 0000 	ldr.w	r0, [lr]
 80048ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80048b8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80048bc:	b292      	uxth	r2, r2
 80048be:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80048c2:	45e1      	cmp	r9, ip
 80048c4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80048c8:	f84e 2b04 	str.w	r2, [lr], #4
 80048cc:	d2de      	bcs.n	800488c <quorem+0x42>
 80048ce:	9b00      	ldr	r3, [sp, #0]
 80048d0:	58eb      	ldr	r3, [r5, r3]
 80048d2:	b92b      	cbnz	r3, 80048e0 <quorem+0x96>
 80048d4:	9b01      	ldr	r3, [sp, #4]
 80048d6:	3b04      	subs	r3, #4
 80048d8:	429d      	cmp	r5, r3
 80048da:	461a      	mov	r2, r3
 80048dc:	d32f      	bcc.n	800493e <quorem+0xf4>
 80048de:	613c      	str	r4, [r7, #16]
 80048e0:	4638      	mov	r0, r7
 80048e2:	f001 f981 	bl	8005be8 <__mcmp>
 80048e6:	2800      	cmp	r0, #0
 80048e8:	db25      	blt.n	8004936 <quorem+0xec>
 80048ea:	4629      	mov	r1, r5
 80048ec:	2000      	movs	r0, #0
 80048ee:	f858 2b04 	ldr.w	r2, [r8], #4
 80048f2:	f8d1 c000 	ldr.w	ip, [r1]
 80048f6:	fa1f fe82 	uxth.w	lr, r2
 80048fa:	fa1f f38c 	uxth.w	r3, ip
 80048fe:	eba3 030e 	sub.w	r3, r3, lr
 8004902:	4403      	add	r3, r0
 8004904:	0c12      	lsrs	r2, r2, #16
 8004906:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800490a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800490e:	b29b      	uxth	r3, r3
 8004910:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004914:	45c1      	cmp	r9, r8
 8004916:	ea4f 4022 	mov.w	r0, r2, asr #16
 800491a:	f841 3b04 	str.w	r3, [r1], #4
 800491e:	d2e6      	bcs.n	80048ee <quorem+0xa4>
 8004920:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004924:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004928:	b922      	cbnz	r2, 8004934 <quorem+0xea>
 800492a:	3b04      	subs	r3, #4
 800492c:	429d      	cmp	r5, r3
 800492e:	461a      	mov	r2, r3
 8004930:	d30b      	bcc.n	800494a <quorem+0x100>
 8004932:	613c      	str	r4, [r7, #16]
 8004934:	3601      	adds	r6, #1
 8004936:	4630      	mov	r0, r6
 8004938:	b003      	add	sp, #12
 800493a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800493e:	6812      	ldr	r2, [r2, #0]
 8004940:	3b04      	subs	r3, #4
 8004942:	2a00      	cmp	r2, #0
 8004944:	d1cb      	bne.n	80048de <quorem+0x94>
 8004946:	3c01      	subs	r4, #1
 8004948:	e7c6      	b.n	80048d8 <quorem+0x8e>
 800494a:	6812      	ldr	r2, [r2, #0]
 800494c:	3b04      	subs	r3, #4
 800494e:	2a00      	cmp	r2, #0
 8004950:	d1ef      	bne.n	8004932 <quorem+0xe8>
 8004952:	3c01      	subs	r4, #1
 8004954:	e7ea      	b.n	800492c <quorem+0xe2>
 8004956:	2000      	movs	r0, #0
 8004958:	e7ee      	b.n	8004938 <quorem+0xee>
 800495a:	0000      	movs	r0, r0
 800495c:	0000      	movs	r0, r0
	...

08004960 <_dtoa_r>:
 8004960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004964:	4614      	mov	r4, r2
 8004966:	461d      	mov	r5, r3
 8004968:	69c7      	ldr	r7, [r0, #28]
 800496a:	b097      	sub	sp, #92	@ 0x5c
 800496c:	4681      	mov	r9, r0
 800496e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004972:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004974:	b97f      	cbnz	r7, 8004996 <_dtoa_r+0x36>
 8004976:	2010      	movs	r0, #16
 8004978:	f000 fe0e 	bl	8005598 <malloc>
 800497c:	4602      	mov	r2, r0
 800497e:	f8c9 001c 	str.w	r0, [r9, #28]
 8004982:	b920      	cbnz	r0, 800498e <_dtoa_r+0x2e>
 8004984:	21ef      	movs	r1, #239	@ 0xef
 8004986:	4bac      	ldr	r3, [pc, #688]	@ (8004c38 <_dtoa_r+0x2d8>)
 8004988:	48ac      	ldr	r0, [pc, #688]	@ (8004c3c <_dtoa_r+0x2dc>)
 800498a:	f001 fcbf 	bl	800630c <__assert_func>
 800498e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004992:	6007      	str	r7, [r0, #0]
 8004994:	60c7      	str	r7, [r0, #12]
 8004996:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800499a:	6819      	ldr	r1, [r3, #0]
 800499c:	b159      	cbz	r1, 80049b6 <_dtoa_r+0x56>
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	2301      	movs	r3, #1
 80049a2:	4093      	lsls	r3, r2
 80049a4:	604a      	str	r2, [r1, #4]
 80049a6:	608b      	str	r3, [r1, #8]
 80049a8:	4648      	mov	r0, r9
 80049aa:	f000 feeb 	bl	8005784 <_Bfree>
 80049ae:	2200      	movs	r2, #0
 80049b0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	1e2b      	subs	r3, r5, #0
 80049b8:	bfaf      	iteee	ge
 80049ba:	2300      	movge	r3, #0
 80049bc:	2201      	movlt	r2, #1
 80049be:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80049c2:	9307      	strlt	r3, [sp, #28]
 80049c4:	bfa8      	it	ge
 80049c6:	6033      	strge	r3, [r6, #0]
 80049c8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80049cc:	4b9c      	ldr	r3, [pc, #624]	@ (8004c40 <_dtoa_r+0x2e0>)
 80049ce:	bfb8      	it	lt
 80049d0:	6032      	strlt	r2, [r6, #0]
 80049d2:	ea33 0308 	bics.w	r3, r3, r8
 80049d6:	d112      	bne.n	80049fe <_dtoa_r+0x9e>
 80049d8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80049dc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80049e4:	4323      	orrs	r3, r4
 80049e6:	f000 855e 	beq.w	80054a6 <_dtoa_r+0xb46>
 80049ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80049ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004c44 <_dtoa_r+0x2e4>
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 8560 	beq.w	80054b6 <_dtoa_r+0xb56>
 80049f6:	f10a 0303 	add.w	r3, sl, #3
 80049fa:	f000 bd5a 	b.w	80054b2 <_dtoa_r+0xb52>
 80049fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a02:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004a06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	f7fb ffcb 	bl	80009a8 <__aeabi_dcmpeq>
 8004a12:	4607      	mov	r7, r0
 8004a14:	b158      	cbz	r0, 8004a2e <_dtoa_r+0xce>
 8004a16:	2301      	movs	r3, #1
 8004a18:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004a1a:	6013      	str	r3, [r2, #0]
 8004a1c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004a1e:	b113      	cbz	r3, 8004a26 <_dtoa_r+0xc6>
 8004a20:	4b89      	ldr	r3, [pc, #548]	@ (8004c48 <_dtoa_r+0x2e8>)
 8004a22:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8004c4c <_dtoa_r+0x2ec>
 8004a2a:	f000 bd44 	b.w	80054b6 <_dtoa_r+0xb56>
 8004a2e:	ab14      	add	r3, sp, #80	@ 0x50
 8004a30:	9301      	str	r3, [sp, #4]
 8004a32:	ab15      	add	r3, sp, #84	@ 0x54
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	4648      	mov	r0, r9
 8004a38:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004a3c:	f001 f984 	bl	8005d48 <__d2b>
 8004a40:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004a44:	9003      	str	r0, [sp, #12]
 8004a46:	2e00      	cmp	r6, #0
 8004a48:	d078      	beq.n	8004b3c <_dtoa_r+0x1dc>
 8004a4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004a4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a50:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004a54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a58:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004a5c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004a60:	9712      	str	r7, [sp, #72]	@ 0x48
 8004a62:	4619      	mov	r1, r3
 8004a64:	2200      	movs	r2, #0
 8004a66:	4b7a      	ldr	r3, [pc, #488]	@ (8004c50 <_dtoa_r+0x2f0>)
 8004a68:	f7fb fb7e 	bl	8000168 <__aeabi_dsub>
 8004a6c:	a36c      	add	r3, pc, #432	@ (adr r3, 8004c20 <_dtoa_r+0x2c0>)
 8004a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a72:	f7fb fd31 	bl	80004d8 <__aeabi_dmul>
 8004a76:	a36c      	add	r3, pc, #432	@ (adr r3, 8004c28 <_dtoa_r+0x2c8>)
 8004a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7c:	f7fb fb76 	bl	800016c <__adddf3>
 8004a80:	4604      	mov	r4, r0
 8004a82:	4630      	mov	r0, r6
 8004a84:	460d      	mov	r5, r1
 8004a86:	f7fb fcbd 	bl	8000404 <__aeabi_i2d>
 8004a8a:	a369      	add	r3, pc, #420	@ (adr r3, 8004c30 <_dtoa_r+0x2d0>)
 8004a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a90:	f7fb fd22 	bl	80004d8 <__aeabi_dmul>
 8004a94:	4602      	mov	r2, r0
 8004a96:	460b      	mov	r3, r1
 8004a98:	4620      	mov	r0, r4
 8004a9a:	4629      	mov	r1, r5
 8004a9c:	f7fb fb66 	bl	800016c <__adddf3>
 8004aa0:	4604      	mov	r4, r0
 8004aa2:	460d      	mov	r5, r1
 8004aa4:	f7fb ffc8 	bl	8000a38 <__aeabi_d2iz>
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	4607      	mov	r7, r0
 8004aac:	2300      	movs	r3, #0
 8004aae:	4620      	mov	r0, r4
 8004ab0:	4629      	mov	r1, r5
 8004ab2:	f7fb ff83 	bl	80009bc <__aeabi_dcmplt>
 8004ab6:	b140      	cbz	r0, 8004aca <_dtoa_r+0x16a>
 8004ab8:	4638      	mov	r0, r7
 8004aba:	f7fb fca3 	bl	8000404 <__aeabi_i2d>
 8004abe:	4622      	mov	r2, r4
 8004ac0:	462b      	mov	r3, r5
 8004ac2:	f7fb ff71 	bl	80009a8 <__aeabi_dcmpeq>
 8004ac6:	b900      	cbnz	r0, 8004aca <_dtoa_r+0x16a>
 8004ac8:	3f01      	subs	r7, #1
 8004aca:	2f16      	cmp	r7, #22
 8004acc:	d854      	bhi.n	8004b78 <_dtoa_r+0x218>
 8004ace:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004ad2:	4b60      	ldr	r3, [pc, #384]	@ (8004c54 <_dtoa_r+0x2f4>)
 8004ad4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004adc:	f7fb ff6e 	bl	80009bc <__aeabi_dcmplt>
 8004ae0:	2800      	cmp	r0, #0
 8004ae2:	d04b      	beq.n	8004b7c <_dtoa_r+0x21c>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	3f01      	subs	r7, #1
 8004ae8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004aea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004aec:	1b9b      	subs	r3, r3, r6
 8004aee:	1e5a      	subs	r2, r3, #1
 8004af0:	bf49      	itett	mi
 8004af2:	f1c3 0301 	rsbmi	r3, r3, #1
 8004af6:	2300      	movpl	r3, #0
 8004af8:	9304      	strmi	r3, [sp, #16]
 8004afa:	2300      	movmi	r3, #0
 8004afc:	9209      	str	r2, [sp, #36]	@ 0x24
 8004afe:	bf54      	ite	pl
 8004b00:	9304      	strpl	r3, [sp, #16]
 8004b02:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004b04:	2f00      	cmp	r7, #0
 8004b06:	db3b      	blt.n	8004b80 <_dtoa_r+0x220>
 8004b08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b0a:	970e      	str	r7, [sp, #56]	@ 0x38
 8004b0c:	443b      	add	r3, r7
 8004b0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b10:	2300      	movs	r3, #0
 8004b12:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b14:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004b16:	2b09      	cmp	r3, #9
 8004b18:	d865      	bhi.n	8004be6 <_dtoa_r+0x286>
 8004b1a:	2b05      	cmp	r3, #5
 8004b1c:	bfc4      	itt	gt
 8004b1e:	3b04      	subgt	r3, #4
 8004b20:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004b22:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004b24:	bfc8      	it	gt
 8004b26:	2400      	movgt	r4, #0
 8004b28:	f1a3 0302 	sub.w	r3, r3, #2
 8004b2c:	bfd8      	it	le
 8004b2e:	2401      	movle	r4, #1
 8004b30:	2b03      	cmp	r3, #3
 8004b32:	d864      	bhi.n	8004bfe <_dtoa_r+0x29e>
 8004b34:	e8df f003 	tbb	[pc, r3]
 8004b38:	2c385553 	.word	0x2c385553
 8004b3c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004b40:	441e      	add	r6, r3
 8004b42:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004b46:	2b20      	cmp	r3, #32
 8004b48:	bfc1      	itttt	gt
 8004b4a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004b4e:	fa08 f803 	lslgt.w	r8, r8, r3
 8004b52:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004b56:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004b5a:	bfd6      	itet	le
 8004b5c:	f1c3 0320 	rsble	r3, r3, #32
 8004b60:	ea48 0003 	orrgt.w	r0, r8, r3
 8004b64:	fa04 f003 	lslle.w	r0, r4, r3
 8004b68:	f7fb fc3c 	bl	80003e4 <__aeabi_ui2d>
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004b72:	3e01      	subs	r6, #1
 8004b74:	9212      	str	r2, [sp, #72]	@ 0x48
 8004b76:	e774      	b.n	8004a62 <_dtoa_r+0x102>
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e7b5      	b.n	8004ae8 <_dtoa_r+0x188>
 8004b7c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004b7e:	e7b4      	b.n	8004aea <_dtoa_r+0x18a>
 8004b80:	9b04      	ldr	r3, [sp, #16]
 8004b82:	1bdb      	subs	r3, r3, r7
 8004b84:	9304      	str	r3, [sp, #16]
 8004b86:	427b      	negs	r3, r7
 8004b88:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	930e      	str	r3, [sp, #56]	@ 0x38
 8004b8e:	e7c1      	b.n	8004b14 <_dtoa_r+0x1b4>
 8004b90:	2301      	movs	r3, #1
 8004b92:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b94:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004b96:	eb07 0b03 	add.w	fp, r7, r3
 8004b9a:	f10b 0301 	add.w	r3, fp, #1
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	9308      	str	r3, [sp, #32]
 8004ba2:	bfb8      	it	lt
 8004ba4:	2301      	movlt	r3, #1
 8004ba6:	e006      	b.n	8004bb6 <_dtoa_r+0x256>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004bac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	dd28      	ble.n	8004c04 <_dtoa_r+0x2a4>
 8004bb2:	469b      	mov	fp, r3
 8004bb4:	9308      	str	r3, [sp, #32]
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	2204      	movs	r2, #4
 8004bba:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8004bbe:	f102 0514 	add.w	r5, r2, #20
 8004bc2:	429d      	cmp	r5, r3
 8004bc4:	d926      	bls.n	8004c14 <_dtoa_r+0x2b4>
 8004bc6:	6041      	str	r1, [r0, #4]
 8004bc8:	4648      	mov	r0, r9
 8004bca:	f000 fd9b 	bl	8005704 <_Balloc>
 8004bce:	4682      	mov	sl, r0
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	d143      	bne.n	8004c5c <_dtoa_r+0x2fc>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	f240 11af 	movw	r1, #431	@ 0x1af
 8004bda:	4b1f      	ldr	r3, [pc, #124]	@ (8004c58 <_dtoa_r+0x2f8>)
 8004bdc:	e6d4      	b.n	8004988 <_dtoa_r+0x28>
 8004bde:	2300      	movs	r3, #0
 8004be0:	e7e3      	b.n	8004baa <_dtoa_r+0x24a>
 8004be2:	2300      	movs	r3, #0
 8004be4:	e7d5      	b.n	8004b92 <_dtoa_r+0x232>
 8004be6:	2401      	movs	r4, #1
 8004be8:	2300      	movs	r3, #0
 8004bea:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004bec:	9320      	str	r3, [sp, #128]	@ 0x80
 8004bee:	f04f 3bff 	mov.w	fp, #4294967295
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	2312      	movs	r3, #18
 8004bf6:	f8cd b020 	str.w	fp, [sp, #32]
 8004bfa:	9221      	str	r2, [sp, #132]	@ 0x84
 8004bfc:	e7db      	b.n	8004bb6 <_dtoa_r+0x256>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c02:	e7f4      	b.n	8004bee <_dtoa_r+0x28e>
 8004c04:	f04f 0b01 	mov.w	fp, #1
 8004c08:	465b      	mov	r3, fp
 8004c0a:	f8cd b020 	str.w	fp, [sp, #32]
 8004c0e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8004c12:	e7d0      	b.n	8004bb6 <_dtoa_r+0x256>
 8004c14:	3101      	adds	r1, #1
 8004c16:	0052      	lsls	r2, r2, #1
 8004c18:	e7d1      	b.n	8004bbe <_dtoa_r+0x25e>
 8004c1a:	bf00      	nop
 8004c1c:	f3af 8000 	nop.w
 8004c20:	636f4361 	.word	0x636f4361
 8004c24:	3fd287a7 	.word	0x3fd287a7
 8004c28:	8b60c8b3 	.word	0x8b60c8b3
 8004c2c:	3fc68a28 	.word	0x3fc68a28
 8004c30:	509f79fb 	.word	0x509f79fb
 8004c34:	3fd34413 	.word	0x3fd34413
 8004c38:	08006c03 	.word	0x08006c03
 8004c3c:	08006c1a 	.word	0x08006c1a
 8004c40:	7ff00000 	.word	0x7ff00000
 8004c44:	08006bff 	.word	0x08006bff
 8004c48:	08006bd3 	.word	0x08006bd3
 8004c4c:	08006bd2 	.word	0x08006bd2
 8004c50:	3ff80000 	.word	0x3ff80000
 8004c54:	08006d68 	.word	0x08006d68
 8004c58:	08006c72 	.word	0x08006c72
 8004c5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004c60:	6018      	str	r0, [r3, #0]
 8004c62:	9b08      	ldr	r3, [sp, #32]
 8004c64:	2b0e      	cmp	r3, #14
 8004c66:	f200 80a1 	bhi.w	8004dac <_dtoa_r+0x44c>
 8004c6a:	2c00      	cmp	r4, #0
 8004c6c:	f000 809e 	beq.w	8004dac <_dtoa_r+0x44c>
 8004c70:	2f00      	cmp	r7, #0
 8004c72:	dd33      	ble.n	8004cdc <_dtoa_r+0x37c>
 8004c74:	4b9c      	ldr	r3, [pc, #624]	@ (8004ee8 <_dtoa_r+0x588>)
 8004c76:	f007 020f 	and.w	r2, r7, #15
 8004c7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c7e:	05f8      	lsls	r0, r7, #23
 8004c80:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c84:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8004c88:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004c8c:	d516      	bpl.n	8004cbc <_dtoa_r+0x35c>
 8004c8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004c92:	4b96      	ldr	r3, [pc, #600]	@ (8004eec <_dtoa_r+0x58c>)
 8004c94:	2603      	movs	r6, #3
 8004c96:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004c9a:	f7fb fd47 	bl	800072c <__aeabi_ddiv>
 8004c9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004ca2:	f004 040f 	and.w	r4, r4, #15
 8004ca6:	4d91      	ldr	r5, [pc, #580]	@ (8004eec <_dtoa_r+0x58c>)
 8004ca8:	b954      	cbnz	r4, 8004cc0 <_dtoa_r+0x360>
 8004caa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004cae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cb2:	f7fb fd3b 	bl	800072c <__aeabi_ddiv>
 8004cb6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004cba:	e028      	b.n	8004d0e <_dtoa_r+0x3ae>
 8004cbc:	2602      	movs	r6, #2
 8004cbe:	e7f2      	b.n	8004ca6 <_dtoa_r+0x346>
 8004cc0:	07e1      	lsls	r1, r4, #31
 8004cc2:	d508      	bpl.n	8004cd6 <_dtoa_r+0x376>
 8004cc4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004cc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004ccc:	f7fb fc04 	bl	80004d8 <__aeabi_dmul>
 8004cd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004cd4:	3601      	adds	r6, #1
 8004cd6:	1064      	asrs	r4, r4, #1
 8004cd8:	3508      	adds	r5, #8
 8004cda:	e7e5      	b.n	8004ca8 <_dtoa_r+0x348>
 8004cdc:	f000 80af 	beq.w	8004e3e <_dtoa_r+0x4de>
 8004ce0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004ce4:	427c      	negs	r4, r7
 8004ce6:	4b80      	ldr	r3, [pc, #512]	@ (8004ee8 <_dtoa_r+0x588>)
 8004ce8:	f004 020f 	and.w	r2, r4, #15
 8004cec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf4:	f7fb fbf0 	bl	80004d8 <__aeabi_dmul>
 8004cf8:	2602      	movs	r6, #2
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004d00:	4d7a      	ldr	r5, [pc, #488]	@ (8004eec <_dtoa_r+0x58c>)
 8004d02:	1124      	asrs	r4, r4, #4
 8004d04:	2c00      	cmp	r4, #0
 8004d06:	f040 808f 	bne.w	8004e28 <_dtoa_r+0x4c8>
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1d3      	bne.n	8004cb6 <_dtoa_r+0x356>
 8004d0e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004d12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 8094 	beq.w	8004e42 <_dtoa_r+0x4e2>
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	4629      	mov	r1, r5
 8004d20:	4b73      	ldr	r3, [pc, #460]	@ (8004ef0 <_dtoa_r+0x590>)
 8004d22:	f7fb fe4b 	bl	80009bc <__aeabi_dcmplt>
 8004d26:	2800      	cmp	r0, #0
 8004d28:	f000 808b 	beq.w	8004e42 <_dtoa_r+0x4e2>
 8004d2c:	9b08      	ldr	r3, [sp, #32]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 8087 	beq.w	8004e42 <_dtoa_r+0x4e2>
 8004d34:	f1bb 0f00 	cmp.w	fp, #0
 8004d38:	dd34      	ble.n	8004da4 <_dtoa_r+0x444>
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	4629      	mov	r1, r5
 8004d40:	4b6c      	ldr	r3, [pc, #432]	@ (8004ef4 <_dtoa_r+0x594>)
 8004d42:	f7fb fbc9 	bl	80004d8 <__aeabi_dmul>
 8004d46:	465c      	mov	r4, fp
 8004d48:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004d4c:	f107 38ff 	add.w	r8, r7, #4294967295
 8004d50:	3601      	adds	r6, #1
 8004d52:	4630      	mov	r0, r6
 8004d54:	f7fb fb56 	bl	8000404 <__aeabi_i2d>
 8004d58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d5c:	f7fb fbbc 	bl	80004d8 <__aeabi_dmul>
 8004d60:	2200      	movs	r2, #0
 8004d62:	4b65      	ldr	r3, [pc, #404]	@ (8004ef8 <_dtoa_r+0x598>)
 8004d64:	f7fb fa02 	bl	800016c <__adddf3>
 8004d68:	4605      	mov	r5, r0
 8004d6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004d6e:	2c00      	cmp	r4, #0
 8004d70:	d16a      	bne.n	8004e48 <_dtoa_r+0x4e8>
 8004d72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d76:	2200      	movs	r2, #0
 8004d78:	4b60      	ldr	r3, [pc, #384]	@ (8004efc <_dtoa_r+0x59c>)
 8004d7a:	f7fb f9f5 	bl	8000168 <__aeabi_dsub>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	460b      	mov	r3, r1
 8004d82:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004d86:	462a      	mov	r2, r5
 8004d88:	4633      	mov	r3, r6
 8004d8a:	f7fb fe35 	bl	80009f8 <__aeabi_dcmpgt>
 8004d8e:	2800      	cmp	r0, #0
 8004d90:	f040 8298 	bne.w	80052c4 <_dtoa_r+0x964>
 8004d94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d98:	462a      	mov	r2, r5
 8004d9a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004d9e:	f7fb fe0d 	bl	80009bc <__aeabi_dcmplt>
 8004da2:	bb38      	cbnz	r0, 8004df4 <_dtoa_r+0x494>
 8004da4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004da8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004dac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f2c0 8157 	blt.w	8005062 <_dtoa_r+0x702>
 8004db4:	2f0e      	cmp	r7, #14
 8004db6:	f300 8154 	bgt.w	8005062 <_dtoa_r+0x702>
 8004dba:	4b4b      	ldr	r3, [pc, #300]	@ (8004ee8 <_dtoa_r+0x588>)
 8004dbc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004dc0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004dc4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004dc8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f280 80e5 	bge.w	8004f9a <_dtoa_r+0x63a>
 8004dd0:	9b08      	ldr	r3, [sp, #32]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f300 80e1 	bgt.w	8004f9a <_dtoa_r+0x63a>
 8004dd8:	d10c      	bne.n	8004df4 <_dtoa_r+0x494>
 8004dda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004dde:	2200      	movs	r2, #0
 8004de0:	4b46      	ldr	r3, [pc, #280]	@ (8004efc <_dtoa_r+0x59c>)
 8004de2:	f7fb fb79 	bl	80004d8 <__aeabi_dmul>
 8004de6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004dea:	f7fb fdfb 	bl	80009e4 <__aeabi_dcmpge>
 8004dee:	2800      	cmp	r0, #0
 8004df0:	f000 8266 	beq.w	80052c0 <_dtoa_r+0x960>
 8004df4:	2400      	movs	r4, #0
 8004df6:	4625      	mov	r5, r4
 8004df8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004dfa:	4656      	mov	r6, sl
 8004dfc:	ea6f 0803 	mvn.w	r8, r3
 8004e00:	2700      	movs	r7, #0
 8004e02:	4621      	mov	r1, r4
 8004e04:	4648      	mov	r0, r9
 8004e06:	f000 fcbd 	bl	8005784 <_Bfree>
 8004e0a:	2d00      	cmp	r5, #0
 8004e0c:	f000 80bd 	beq.w	8004f8a <_dtoa_r+0x62a>
 8004e10:	b12f      	cbz	r7, 8004e1e <_dtoa_r+0x4be>
 8004e12:	42af      	cmp	r7, r5
 8004e14:	d003      	beq.n	8004e1e <_dtoa_r+0x4be>
 8004e16:	4639      	mov	r1, r7
 8004e18:	4648      	mov	r0, r9
 8004e1a:	f000 fcb3 	bl	8005784 <_Bfree>
 8004e1e:	4629      	mov	r1, r5
 8004e20:	4648      	mov	r0, r9
 8004e22:	f000 fcaf 	bl	8005784 <_Bfree>
 8004e26:	e0b0      	b.n	8004f8a <_dtoa_r+0x62a>
 8004e28:	07e2      	lsls	r2, r4, #31
 8004e2a:	d505      	bpl.n	8004e38 <_dtoa_r+0x4d8>
 8004e2c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004e30:	f7fb fb52 	bl	80004d8 <__aeabi_dmul>
 8004e34:	2301      	movs	r3, #1
 8004e36:	3601      	adds	r6, #1
 8004e38:	1064      	asrs	r4, r4, #1
 8004e3a:	3508      	adds	r5, #8
 8004e3c:	e762      	b.n	8004d04 <_dtoa_r+0x3a4>
 8004e3e:	2602      	movs	r6, #2
 8004e40:	e765      	b.n	8004d0e <_dtoa_r+0x3ae>
 8004e42:	46b8      	mov	r8, r7
 8004e44:	9c08      	ldr	r4, [sp, #32]
 8004e46:	e784      	b.n	8004d52 <_dtoa_r+0x3f2>
 8004e48:	4b27      	ldr	r3, [pc, #156]	@ (8004ee8 <_dtoa_r+0x588>)
 8004e4a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004e4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004e50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004e54:	4454      	add	r4, sl
 8004e56:	2900      	cmp	r1, #0
 8004e58:	d054      	beq.n	8004f04 <_dtoa_r+0x5a4>
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	4928      	ldr	r1, [pc, #160]	@ (8004f00 <_dtoa_r+0x5a0>)
 8004e5e:	f7fb fc65 	bl	800072c <__aeabi_ddiv>
 8004e62:	4633      	mov	r3, r6
 8004e64:	462a      	mov	r2, r5
 8004e66:	f7fb f97f 	bl	8000168 <__aeabi_dsub>
 8004e6a:	4656      	mov	r6, sl
 8004e6c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004e70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e74:	f7fb fde0 	bl	8000a38 <__aeabi_d2iz>
 8004e78:	4605      	mov	r5, r0
 8004e7a:	f7fb fac3 	bl	8000404 <__aeabi_i2d>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e86:	f7fb f96f 	bl	8000168 <__aeabi_dsub>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	3530      	adds	r5, #48	@ 0x30
 8004e90:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004e94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004e98:	f806 5b01 	strb.w	r5, [r6], #1
 8004e9c:	f7fb fd8e 	bl	80009bc <__aeabi_dcmplt>
 8004ea0:	2800      	cmp	r0, #0
 8004ea2:	d172      	bne.n	8004f8a <_dtoa_r+0x62a>
 8004ea4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	4911      	ldr	r1, [pc, #68]	@ (8004ef0 <_dtoa_r+0x590>)
 8004eac:	f7fb f95c 	bl	8000168 <__aeabi_dsub>
 8004eb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004eb4:	f7fb fd82 	bl	80009bc <__aeabi_dcmplt>
 8004eb8:	2800      	cmp	r0, #0
 8004eba:	f040 80b4 	bne.w	8005026 <_dtoa_r+0x6c6>
 8004ebe:	42a6      	cmp	r6, r4
 8004ec0:	f43f af70 	beq.w	8004da4 <_dtoa_r+0x444>
 8004ec4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004ec8:	2200      	movs	r2, #0
 8004eca:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef4 <_dtoa_r+0x594>)
 8004ecc:	f7fb fb04 	bl	80004d8 <__aeabi_dmul>
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004ed6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004eda:	4b06      	ldr	r3, [pc, #24]	@ (8004ef4 <_dtoa_r+0x594>)
 8004edc:	f7fb fafc 	bl	80004d8 <__aeabi_dmul>
 8004ee0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004ee4:	e7c4      	b.n	8004e70 <_dtoa_r+0x510>
 8004ee6:	bf00      	nop
 8004ee8:	08006d68 	.word	0x08006d68
 8004eec:	08006d40 	.word	0x08006d40
 8004ef0:	3ff00000 	.word	0x3ff00000
 8004ef4:	40240000 	.word	0x40240000
 8004ef8:	401c0000 	.word	0x401c0000
 8004efc:	40140000 	.word	0x40140000
 8004f00:	3fe00000 	.word	0x3fe00000
 8004f04:	4631      	mov	r1, r6
 8004f06:	4628      	mov	r0, r5
 8004f08:	f7fb fae6 	bl	80004d8 <__aeabi_dmul>
 8004f0c:	4656      	mov	r6, sl
 8004f0e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004f12:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004f14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f18:	f7fb fd8e 	bl	8000a38 <__aeabi_d2iz>
 8004f1c:	4605      	mov	r5, r0
 8004f1e:	f7fb fa71 	bl	8000404 <__aeabi_i2d>
 8004f22:	4602      	mov	r2, r0
 8004f24:	460b      	mov	r3, r1
 8004f26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f2a:	f7fb f91d 	bl	8000168 <__aeabi_dsub>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	460b      	mov	r3, r1
 8004f32:	3530      	adds	r5, #48	@ 0x30
 8004f34:	f806 5b01 	strb.w	r5, [r6], #1
 8004f38:	42a6      	cmp	r6, r4
 8004f3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004f3e:	f04f 0200 	mov.w	r2, #0
 8004f42:	d124      	bne.n	8004f8e <_dtoa_r+0x62e>
 8004f44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004f48:	4bae      	ldr	r3, [pc, #696]	@ (8005204 <_dtoa_r+0x8a4>)
 8004f4a:	f7fb f90f 	bl	800016c <__adddf3>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	460b      	mov	r3, r1
 8004f52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f56:	f7fb fd4f 	bl	80009f8 <__aeabi_dcmpgt>
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	d163      	bne.n	8005026 <_dtoa_r+0x6c6>
 8004f5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004f62:	2000      	movs	r0, #0
 8004f64:	49a7      	ldr	r1, [pc, #668]	@ (8005204 <_dtoa_r+0x8a4>)
 8004f66:	f7fb f8ff 	bl	8000168 <__aeabi_dsub>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f72:	f7fb fd23 	bl	80009bc <__aeabi_dcmplt>
 8004f76:	2800      	cmp	r0, #0
 8004f78:	f43f af14 	beq.w	8004da4 <_dtoa_r+0x444>
 8004f7c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004f7e:	1e73      	subs	r3, r6, #1
 8004f80:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004f82:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004f86:	2b30      	cmp	r3, #48	@ 0x30
 8004f88:	d0f8      	beq.n	8004f7c <_dtoa_r+0x61c>
 8004f8a:	4647      	mov	r7, r8
 8004f8c:	e03b      	b.n	8005006 <_dtoa_r+0x6a6>
 8004f8e:	4b9e      	ldr	r3, [pc, #632]	@ (8005208 <_dtoa_r+0x8a8>)
 8004f90:	f7fb faa2 	bl	80004d8 <__aeabi_dmul>
 8004f94:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004f98:	e7bc      	b.n	8004f14 <_dtoa_r+0x5b4>
 8004f9a:	4656      	mov	r6, sl
 8004f9c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004fa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	4629      	mov	r1, r5
 8004fa8:	f7fb fbc0 	bl	800072c <__aeabi_ddiv>
 8004fac:	f7fb fd44 	bl	8000a38 <__aeabi_d2iz>
 8004fb0:	4680      	mov	r8, r0
 8004fb2:	f7fb fa27 	bl	8000404 <__aeabi_i2d>
 8004fb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fba:	f7fb fa8d 	bl	80004d8 <__aeabi_dmul>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	4629      	mov	r1, r5
 8004fc6:	f7fb f8cf 	bl	8000168 <__aeabi_dsub>
 8004fca:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004fce:	9d08      	ldr	r5, [sp, #32]
 8004fd0:	f806 4b01 	strb.w	r4, [r6], #1
 8004fd4:	eba6 040a 	sub.w	r4, r6, sl
 8004fd8:	42a5      	cmp	r5, r4
 8004fda:	4602      	mov	r2, r0
 8004fdc:	460b      	mov	r3, r1
 8004fde:	d133      	bne.n	8005048 <_dtoa_r+0x6e8>
 8004fe0:	f7fb f8c4 	bl	800016c <__adddf3>
 8004fe4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fe8:	4604      	mov	r4, r0
 8004fea:	460d      	mov	r5, r1
 8004fec:	f7fb fd04 	bl	80009f8 <__aeabi_dcmpgt>
 8004ff0:	b9c0      	cbnz	r0, 8005024 <_dtoa_r+0x6c4>
 8004ff2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ff6:	4620      	mov	r0, r4
 8004ff8:	4629      	mov	r1, r5
 8004ffa:	f7fb fcd5 	bl	80009a8 <__aeabi_dcmpeq>
 8004ffe:	b110      	cbz	r0, 8005006 <_dtoa_r+0x6a6>
 8005000:	f018 0f01 	tst.w	r8, #1
 8005004:	d10e      	bne.n	8005024 <_dtoa_r+0x6c4>
 8005006:	4648      	mov	r0, r9
 8005008:	9903      	ldr	r1, [sp, #12]
 800500a:	f000 fbbb 	bl	8005784 <_Bfree>
 800500e:	2300      	movs	r3, #0
 8005010:	7033      	strb	r3, [r6, #0]
 8005012:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005014:	3701      	adds	r7, #1
 8005016:	601f      	str	r7, [r3, #0]
 8005018:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800501a:	2b00      	cmp	r3, #0
 800501c:	f000 824b 	beq.w	80054b6 <_dtoa_r+0xb56>
 8005020:	601e      	str	r6, [r3, #0]
 8005022:	e248      	b.n	80054b6 <_dtoa_r+0xb56>
 8005024:	46b8      	mov	r8, r7
 8005026:	4633      	mov	r3, r6
 8005028:	461e      	mov	r6, r3
 800502a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800502e:	2a39      	cmp	r2, #57	@ 0x39
 8005030:	d106      	bne.n	8005040 <_dtoa_r+0x6e0>
 8005032:	459a      	cmp	sl, r3
 8005034:	d1f8      	bne.n	8005028 <_dtoa_r+0x6c8>
 8005036:	2230      	movs	r2, #48	@ 0x30
 8005038:	f108 0801 	add.w	r8, r8, #1
 800503c:	f88a 2000 	strb.w	r2, [sl]
 8005040:	781a      	ldrb	r2, [r3, #0]
 8005042:	3201      	adds	r2, #1
 8005044:	701a      	strb	r2, [r3, #0]
 8005046:	e7a0      	b.n	8004f8a <_dtoa_r+0x62a>
 8005048:	2200      	movs	r2, #0
 800504a:	4b6f      	ldr	r3, [pc, #444]	@ (8005208 <_dtoa_r+0x8a8>)
 800504c:	f7fb fa44 	bl	80004d8 <__aeabi_dmul>
 8005050:	2200      	movs	r2, #0
 8005052:	2300      	movs	r3, #0
 8005054:	4604      	mov	r4, r0
 8005056:	460d      	mov	r5, r1
 8005058:	f7fb fca6 	bl	80009a8 <__aeabi_dcmpeq>
 800505c:	2800      	cmp	r0, #0
 800505e:	d09f      	beq.n	8004fa0 <_dtoa_r+0x640>
 8005060:	e7d1      	b.n	8005006 <_dtoa_r+0x6a6>
 8005062:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005064:	2a00      	cmp	r2, #0
 8005066:	f000 80ea 	beq.w	800523e <_dtoa_r+0x8de>
 800506a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800506c:	2a01      	cmp	r2, #1
 800506e:	f300 80cd 	bgt.w	800520c <_dtoa_r+0x8ac>
 8005072:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005074:	2a00      	cmp	r2, #0
 8005076:	f000 80c1 	beq.w	80051fc <_dtoa_r+0x89c>
 800507a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800507e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005080:	9e04      	ldr	r6, [sp, #16]
 8005082:	9a04      	ldr	r2, [sp, #16]
 8005084:	2101      	movs	r1, #1
 8005086:	441a      	add	r2, r3
 8005088:	9204      	str	r2, [sp, #16]
 800508a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800508c:	4648      	mov	r0, r9
 800508e:	441a      	add	r2, r3
 8005090:	9209      	str	r2, [sp, #36]	@ 0x24
 8005092:	f000 fc2b 	bl	80058ec <__i2b>
 8005096:	4605      	mov	r5, r0
 8005098:	b166      	cbz	r6, 80050b4 <_dtoa_r+0x754>
 800509a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800509c:	2b00      	cmp	r3, #0
 800509e:	dd09      	ble.n	80050b4 <_dtoa_r+0x754>
 80050a0:	42b3      	cmp	r3, r6
 80050a2:	bfa8      	it	ge
 80050a4:	4633      	movge	r3, r6
 80050a6:	9a04      	ldr	r2, [sp, #16]
 80050a8:	1af6      	subs	r6, r6, r3
 80050aa:	1ad2      	subs	r2, r2, r3
 80050ac:	9204      	str	r2, [sp, #16]
 80050ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80050b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80050b6:	b30b      	cbz	r3, 80050fc <_dtoa_r+0x79c>
 80050b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f000 80c6 	beq.w	800524c <_dtoa_r+0x8ec>
 80050c0:	2c00      	cmp	r4, #0
 80050c2:	f000 80c0 	beq.w	8005246 <_dtoa_r+0x8e6>
 80050c6:	4629      	mov	r1, r5
 80050c8:	4622      	mov	r2, r4
 80050ca:	4648      	mov	r0, r9
 80050cc:	f000 fcc6 	bl	8005a5c <__pow5mult>
 80050d0:	9a03      	ldr	r2, [sp, #12]
 80050d2:	4601      	mov	r1, r0
 80050d4:	4605      	mov	r5, r0
 80050d6:	4648      	mov	r0, r9
 80050d8:	f000 fc1e 	bl	8005918 <__multiply>
 80050dc:	9903      	ldr	r1, [sp, #12]
 80050de:	4680      	mov	r8, r0
 80050e0:	4648      	mov	r0, r9
 80050e2:	f000 fb4f 	bl	8005784 <_Bfree>
 80050e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80050e8:	1b1b      	subs	r3, r3, r4
 80050ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80050ec:	f000 80b1 	beq.w	8005252 <_dtoa_r+0x8f2>
 80050f0:	4641      	mov	r1, r8
 80050f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80050f4:	4648      	mov	r0, r9
 80050f6:	f000 fcb1 	bl	8005a5c <__pow5mult>
 80050fa:	9003      	str	r0, [sp, #12]
 80050fc:	2101      	movs	r1, #1
 80050fe:	4648      	mov	r0, r9
 8005100:	f000 fbf4 	bl	80058ec <__i2b>
 8005104:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005106:	4604      	mov	r4, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	f000 81d8 	beq.w	80054be <_dtoa_r+0xb5e>
 800510e:	461a      	mov	r2, r3
 8005110:	4601      	mov	r1, r0
 8005112:	4648      	mov	r0, r9
 8005114:	f000 fca2 	bl	8005a5c <__pow5mult>
 8005118:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800511a:	4604      	mov	r4, r0
 800511c:	2b01      	cmp	r3, #1
 800511e:	f300 809f 	bgt.w	8005260 <_dtoa_r+0x900>
 8005122:	9b06      	ldr	r3, [sp, #24]
 8005124:	2b00      	cmp	r3, #0
 8005126:	f040 8097 	bne.w	8005258 <_dtoa_r+0x8f8>
 800512a:	9b07      	ldr	r3, [sp, #28]
 800512c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005130:	2b00      	cmp	r3, #0
 8005132:	f040 8093 	bne.w	800525c <_dtoa_r+0x8fc>
 8005136:	9b07      	ldr	r3, [sp, #28]
 8005138:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800513c:	0d1b      	lsrs	r3, r3, #20
 800513e:	051b      	lsls	r3, r3, #20
 8005140:	b133      	cbz	r3, 8005150 <_dtoa_r+0x7f0>
 8005142:	9b04      	ldr	r3, [sp, #16]
 8005144:	3301      	adds	r3, #1
 8005146:	9304      	str	r3, [sp, #16]
 8005148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800514a:	3301      	adds	r3, #1
 800514c:	9309      	str	r3, [sp, #36]	@ 0x24
 800514e:	2301      	movs	r3, #1
 8005150:	930a      	str	r3, [sp, #40]	@ 0x28
 8005152:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005154:	2b00      	cmp	r3, #0
 8005156:	f000 81b8 	beq.w	80054ca <_dtoa_r+0xb6a>
 800515a:	6923      	ldr	r3, [r4, #16]
 800515c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005160:	6918      	ldr	r0, [r3, #16]
 8005162:	f000 fb77 	bl	8005854 <__hi0bits>
 8005166:	f1c0 0020 	rsb	r0, r0, #32
 800516a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800516c:	4418      	add	r0, r3
 800516e:	f010 001f 	ands.w	r0, r0, #31
 8005172:	f000 8082 	beq.w	800527a <_dtoa_r+0x91a>
 8005176:	f1c0 0320 	rsb	r3, r0, #32
 800517a:	2b04      	cmp	r3, #4
 800517c:	dd73      	ble.n	8005266 <_dtoa_r+0x906>
 800517e:	9b04      	ldr	r3, [sp, #16]
 8005180:	f1c0 001c 	rsb	r0, r0, #28
 8005184:	4403      	add	r3, r0
 8005186:	9304      	str	r3, [sp, #16]
 8005188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800518a:	4406      	add	r6, r0
 800518c:	4403      	add	r3, r0
 800518e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005190:	9b04      	ldr	r3, [sp, #16]
 8005192:	2b00      	cmp	r3, #0
 8005194:	dd05      	ble.n	80051a2 <_dtoa_r+0x842>
 8005196:	461a      	mov	r2, r3
 8005198:	4648      	mov	r0, r9
 800519a:	9903      	ldr	r1, [sp, #12]
 800519c:	f000 fcb8 	bl	8005b10 <__lshift>
 80051a0:	9003      	str	r0, [sp, #12]
 80051a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	dd05      	ble.n	80051b4 <_dtoa_r+0x854>
 80051a8:	4621      	mov	r1, r4
 80051aa:	461a      	mov	r2, r3
 80051ac:	4648      	mov	r0, r9
 80051ae:	f000 fcaf 	bl	8005b10 <__lshift>
 80051b2:	4604      	mov	r4, r0
 80051b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d061      	beq.n	800527e <_dtoa_r+0x91e>
 80051ba:	4621      	mov	r1, r4
 80051bc:	9803      	ldr	r0, [sp, #12]
 80051be:	f000 fd13 	bl	8005be8 <__mcmp>
 80051c2:	2800      	cmp	r0, #0
 80051c4:	da5b      	bge.n	800527e <_dtoa_r+0x91e>
 80051c6:	2300      	movs	r3, #0
 80051c8:	220a      	movs	r2, #10
 80051ca:	4648      	mov	r0, r9
 80051cc:	9903      	ldr	r1, [sp, #12]
 80051ce:	f000 fafb 	bl	80057c8 <__multadd>
 80051d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051d4:	f107 38ff 	add.w	r8, r7, #4294967295
 80051d8:	9003      	str	r0, [sp, #12]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f000 8177 	beq.w	80054ce <_dtoa_r+0xb6e>
 80051e0:	4629      	mov	r1, r5
 80051e2:	2300      	movs	r3, #0
 80051e4:	220a      	movs	r2, #10
 80051e6:	4648      	mov	r0, r9
 80051e8:	f000 faee 	bl	80057c8 <__multadd>
 80051ec:	f1bb 0f00 	cmp.w	fp, #0
 80051f0:	4605      	mov	r5, r0
 80051f2:	dc6f      	bgt.n	80052d4 <_dtoa_r+0x974>
 80051f4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	dc49      	bgt.n	800528e <_dtoa_r+0x92e>
 80051fa:	e06b      	b.n	80052d4 <_dtoa_r+0x974>
 80051fc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80051fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005202:	e73c      	b.n	800507e <_dtoa_r+0x71e>
 8005204:	3fe00000 	.word	0x3fe00000
 8005208:	40240000 	.word	0x40240000
 800520c:	9b08      	ldr	r3, [sp, #32]
 800520e:	1e5c      	subs	r4, r3, #1
 8005210:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005212:	42a3      	cmp	r3, r4
 8005214:	db09      	blt.n	800522a <_dtoa_r+0x8ca>
 8005216:	1b1c      	subs	r4, r3, r4
 8005218:	9b08      	ldr	r3, [sp, #32]
 800521a:	2b00      	cmp	r3, #0
 800521c:	f6bf af30 	bge.w	8005080 <_dtoa_r+0x720>
 8005220:	9b04      	ldr	r3, [sp, #16]
 8005222:	9a08      	ldr	r2, [sp, #32]
 8005224:	1a9e      	subs	r6, r3, r2
 8005226:	2300      	movs	r3, #0
 8005228:	e72b      	b.n	8005082 <_dtoa_r+0x722>
 800522a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800522c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800522e:	1ae3      	subs	r3, r4, r3
 8005230:	441a      	add	r2, r3
 8005232:	940a      	str	r4, [sp, #40]	@ 0x28
 8005234:	9e04      	ldr	r6, [sp, #16]
 8005236:	2400      	movs	r4, #0
 8005238:	9b08      	ldr	r3, [sp, #32]
 800523a:	920e      	str	r2, [sp, #56]	@ 0x38
 800523c:	e721      	b.n	8005082 <_dtoa_r+0x722>
 800523e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005240:	9e04      	ldr	r6, [sp, #16]
 8005242:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005244:	e728      	b.n	8005098 <_dtoa_r+0x738>
 8005246:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800524a:	e751      	b.n	80050f0 <_dtoa_r+0x790>
 800524c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800524e:	9903      	ldr	r1, [sp, #12]
 8005250:	e750      	b.n	80050f4 <_dtoa_r+0x794>
 8005252:	f8cd 800c 	str.w	r8, [sp, #12]
 8005256:	e751      	b.n	80050fc <_dtoa_r+0x79c>
 8005258:	2300      	movs	r3, #0
 800525a:	e779      	b.n	8005150 <_dtoa_r+0x7f0>
 800525c:	9b06      	ldr	r3, [sp, #24]
 800525e:	e777      	b.n	8005150 <_dtoa_r+0x7f0>
 8005260:	2300      	movs	r3, #0
 8005262:	930a      	str	r3, [sp, #40]	@ 0x28
 8005264:	e779      	b.n	800515a <_dtoa_r+0x7fa>
 8005266:	d093      	beq.n	8005190 <_dtoa_r+0x830>
 8005268:	9a04      	ldr	r2, [sp, #16]
 800526a:	331c      	adds	r3, #28
 800526c:	441a      	add	r2, r3
 800526e:	9204      	str	r2, [sp, #16]
 8005270:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005272:	441e      	add	r6, r3
 8005274:	441a      	add	r2, r3
 8005276:	9209      	str	r2, [sp, #36]	@ 0x24
 8005278:	e78a      	b.n	8005190 <_dtoa_r+0x830>
 800527a:	4603      	mov	r3, r0
 800527c:	e7f4      	b.n	8005268 <_dtoa_r+0x908>
 800527e:	9b08      	ldr	r3, [sp, #32]
 8005280:	46b8      	mov	r8, r7
 8005282:	2b00      	cmp	r3, #0
 8005284:	dc20      	bgt.n	80052c8 <_dtoa_r+0x968>
 8005286:	469b      	mov	fp, r3
 8005288:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800528a:	2b02      	cmp	r3, #2
 800528c:	dd1e      	ble.n	80052cc <_dtoa_r+0x96c>
 800528e:	f1bb 0f00 	cmp.w	fp, #0
 8005292:	f47f adb1 	bne.w	8004df8 <_dtoa_r+0x498>
 8005296:	4621      	mov	r1, r4
 8005298:	465b      	mov	r3, fp
 800529a:	2205      	movs	r2, #5
 800529c:	4648      	mov	r0, r9
 800529e:	f000 fa93 	bl	80057c8 <__multadd>
 80052a2:	4601      	mov	r1, r0
 80052a4:	4604      	mov	r4, r0
 80052a6:	9803      	ldr	r0, [sp, #12]
 80052a8:	f000 fc9e 	bl	8005be8 <__mcmp>
 80052ac:	2800      	cmp	r0, #0
 80052ae:	f77f ada3 	ble.w	8004df8 <_dtoa_r+0x498>
 80052b2:	4656      	mov	r6, sl
 80052b4:	2331      	movs	r3, #49	@ 0x31
 80052b6:	f108 0801 	add.w	r8, r8, #1
 80052ba:	f806 3b01 	strb.w	r3, [r6], #1
 80052be:	e59f      	b.n	8004e00 <_dtoa_r+0x4a0>
 80052c0:	46b8      	mov	r8, r7
 80052c2:	9c08      	ldr	r4, [sp, #32]
 80052c4:	4625      	mov	r5, r4
 80052c6:	e7f4      	b.n	80052b2 <_dtoa_r+0x952>
 80052c8:	f8dd b020 	ldr.w	fp, [sp, #32]
 80052cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 8101 	beq.w	80054d6 <_dtoa_r+0xb76>
 80052d4:	2e00      	cmp	r6, #0
 80052d6:	dd05      	ble.n	80052e4 <_dtoa_r+0x984>
 80052d8:	4629      	mov	r1, r5
 80052da:	4632      	mov	r2, r6
 80052dc:	4648      	mov	r0, r9
 80052de:	f000 fc17 	bl	8005b10 <__lshift>
 80052e2:	4605      	mov	r5, r0
 80052e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d05c      	beq.n	80053a4 <_dtoa_r+0xa44>
 80052ea:	4648      	mov	r0, r9
 80052ec:	6869      	ldr	r1, [r5, #4]
 80052ee:	f000 fa09 	bl	8005704 <_Balloc>
 80052f2:	4606      	mov	r6, r0
 80052f4:	b928      	cbnz	r0, 8005302 <_dtoa_r+0x9a2>
 80052f6:	4602      	mov	r2, r0
 80052f8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80052fc:	4b80      	ldr	r3, [pc, #512]	@ (8005500 <_dtoa_r+0xba0>)
 80052fe:	f7ff bb43 	b.w	8004988 <_dtoa_r+0x28>
 8005302:	692a      	ldr	r2, [r5, #16]
 8005304:	f105 010c 	add.w	r1, r5, #12
 8005308:	3202      	adds	r2, #2
 800530a:	0092      	lsls	r2, r2, #2
 800530c:	300c      	adds	r0, #12
 800530e:	f000 ffef 	bl	80062f0 <memcpy>
 8005312:	2201      	movs	r2, #1
 8005314:	4631      	mov	r1, r6
 8005316:	4648      	mov	r0, r9
 8005318:	f000 fbfa 	bl	8005b10 <__lshift>
 800531c:	462f      	mov	r7, r5
 800531e:	4605      	mov	r5, r0
 8005320:	f10a 0301 	add.w	r3, sl, #1
 8005324:	9304      	str	r3, [sp, #16]
 8005326:	eb0a 030b 	add.w	r3, sl, fp
 800532a:	930a      	str	r3, [sp, #40]	@ 0x28
 800532c:	9b06      	ldr	r3, [sp, #24]
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	9309      	str	r3, [sp, #36]	@ 0x24
 8005334:	9b04      	ldr	r3, [sp, #16]
 8005336:	4621      	mov	r1, r4
 8005338:	9803      	ldr	r0, [sp, #12]
 800533a:	f103 3bff 	add.w	fp, r3, #4294967295
 800533e:	f7ff fa84 	bl	800484a <quorem>
 8005342:	4603      	mov	r3, r0
 8005344:	4639      	mov	r1, r7
 8005346:	3330      	adds	r3, #48	@ 0x30
 8005348:	9006      	str	r0, [sp, #24]
 800534a:	9803      	ldr	r0, [sp, #12]
 800534c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800534e:	f000 fc4b 	bl	8005be8 <__mcmp>
 8005352:	462a      	mov	r2, r5
 8005354:	9008      	str	r0, [sp, #32]
 8005356:	4621      	mov	r1, r4
 8005358:	4648      	mov	r0, r9
 800535a:	f000 fc61 	bl	8005c20 <__mdiff>
 800535e:	68c2      	ldr	r2, [r0, #12]
 8005360:	4606      	mov	r6, r0
 8005362:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005364:	bb02      	cbnz	r2, 80053a8 <_dtoa_r+0xa48>
 8005366:	4601      	mov	r1, r0
 8005368:	9803      	ldr	r0, [sp, #12]
 800536a:	f000 fc3d 	bl	8005be8 <__mcmp>
 800536e:	4602      	mov	r2, r0
 8005370:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005372:	4631      	mov	r1, r6
 8005374:	4648      	mov	r0, r9
 8005376:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800537a:	f000 fa03 	bl	8005784 <_Bfree>
 800537e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005380:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005382:	9e04      	ldr	r6, [sp, #16]
 8005384:	ea42 0103 	orr.w	r1, r2, r3
 8005388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800538a:	4319      	orrs	r1, r3
 800538c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800538e:	d10d      	bne.n	80053ac <_dtoa_r+0xa4c>
 8005390:	2b39      	cmp	r3, #57	@ 0x39
 8005392:	d027      	beq.n	80053e4 <_dtoa_r+0xa84>
 8005394:	9a08      	ldr	r2, [sp, #32]
 8005396:	2a00      	cmp	r2, #0
 8005398:	dd01      	ble.n	800539e <_dtoa_r+0xa3e>
 800539a:	9b06      	ldr	r3, [sp, #24]
 800539c:	3331      	adds	r3, #49	@ 0x31
 800539e:	f88b 3000 	strb.w	r3, [fp]
 80053a2:	e52e      	b.n	8004e02 <_dtoa_r+0x4a2>
 80053a4:	4628      	mov	r0, r5
 80053a6:	e7b9      	b.n	800531c <_dtoa_r+0x9bc>
 80053a8:	2201      	movs	r2, #1
 80053aa:	e7e2      	b.n	8005372 <_dtoa_r+0xa12>
 80053ac:	9908      	ldr	r1, [sp, #32]
 80053ae:	2900      	cmp	r1, #0
 80053b0:	db04      	blt.n	80053bc <_dtoa_r+0xa5c>
 80053b2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80053b4:	4301      	orrs	r1, r0
 80053b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80053b8:	4301      	orrs	r1, r0
 80053ba:	d120      	bne.n	80053fe <_dtoa_r+0xa9e>
 80053bc:	2a00      	cmp	r2, #0
 80053be:	ddee      	ble.n	800539e <_dtoa_r+0xa3e>
 80053c0:	2201      	movs	r2, #1
 80053c2:	9903      	ldr	r1, [sp, #12]
 80053c4:	4648      	mov	r0, r9
 80053c6:	9304      	str	r3, [sp, #16]
 80053c8:	f000 fba2 	bl	8005b10 <__lshift>
 80053cc:	4621      	mov	r1, r4
 80053ce:	9003      	str	r0, [sp, #12]
 80053d0:	f000 fc0a 	bl	8005be8 <__mcmp>
 80053d4:	2800      	cmp	r0, #0
 80053d6:	9b04      	ldr	r3, [sp, #16]
 80053d8:	dc02      	bgt.n	80053e0 <_dtoa_r+0xa80>
 80053da:	d1e0      	bne.n	800539e <_dtoa_r+0xa3e>
 80053dc:	07da      	lsls	r2, r3, #31
 80053de:	d5de      	bpl.n	800539e <_dtoa_r+0xa3e>
 80053e0:	2b39      	cmp	r3, #57	@ 0x39
 80053e2:	d1da      	bne.n	800539a <_dtoa_r+0xa3a>
 80053e4:	2339      	movs	r3, #57	@ 0x39
 80053e6:	f88b 3000 	strb.w	r3, [fp]
 80053ea:	4633      	mov	r3, r6
 80053ec:	461e      	mov	r6, r3
 80053ee:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80053f2:	3b01      	subs	r3, #1
 80053f4:	2a39      	cmp	r2, #57	@ 0x39
 80053f6:	d04e      	beq.n	8005496 <_dtoa_r+0xb36>
 80053f8:	3201      	adds	r2, #1
 80053fa:	701a      	strb	r2, [r3, #0]
 80053fc:	e501      	b.n	8004e02 <_dtoa_r+0x4a2>
 80053fe:	2a00      	cmp	r2, #0
 8005400:	dd03      	ble.n	800540a <_dtoa_r+0xaaa>
 8005402:	2b39      	cmp	r3, #57	@ 0x39
 8005404:	d0ee      	beq.n	80053e4 <_dtoa_r+0xa84>
 8005406:	3301      	adds	r3, #1
 8005408:	e7c9      	b.n	800539e <_dtoa_r+0xa3e>
 800540a:	9a04      	ldr	r2, [sp, #16]
 800540c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800540e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005412:	428a      	cmp	r2, r1
 8005414:	d028      	beq.n	8005468 <_dtoa_r+0xb08>
 8005416:	2300      	movs	r3, #0
 8005418:	220a      	movs	r2, #10
 800541a:	9903      	ldr	r1, [sp, #12]
 800541c:	4648      	mov	r0, r9
 800541e:	f000 f9d3 	bl	80057c8 <__multadd>
 8005422:	42af      	cmp	r7, r5
 8005424:	9003      	str	r0, [sp, #12]
 8005426:	f04f 0300 	mov.w	r3, #0
 800542a:	f04f 020a 	mov.w	r2, #10
 800542e:	4639      	mov	r1, r7
 8005430:	4648      	mov	r0, r9
 8005432:	d107      	bne.n	8005444 <_dtoa_r+0xae4>
 8005434:	f000 f9c8 	bl	80057c8 <__multadd>
 8005438:	4607      	mov	r7, r0
 800543a:	4605      	mov	r5, r0
 800543c:	9b04      	ldr	r3, [sp, #16]
 800543e:	3301      	adds	r3, #1
 8005440:	9304      	str	r3, [sp, #16]
 8005442:	e777      	b.n	8005334 <_dtoa_r+0x9d4>
 8005444:	f000 f9c0 	bl	80057c8 <__multadd>
 8005448:	4629      	mov	r1, r5
 800544a:	4607      	mov	r7, r0
 800544c:	2300      	movs	r3, #0
 800544e:	220a      	movs	r2, #10
 8005450:	4648      	mov	r0, r9
 8005452:	f000 f9b9 	bl	80057c8 <__multadd>
 8005456:	4605      	mov	r5, r0
 8005458:	e7f0      	b.n	800543c <_dtoa_r+0xadc>
 800545a:	f1bb 0f00 	cmp.w	fp, #0
 800545e:	bfcc      	ite	gt
 8005460:	465e      	movgt	r6, fp
 8005462:	2601      	movle	r6, #1
 8005464:	2700      	movs	r7, #0
 8005466:	4456      	add	r6, sl
 8005468:	2201      	movs	r2, #1
 800546a:	9903      	ldr	r1, [sp, #12]
 800546c:	4648      	mov	r0, r9
 800546e:	9304      	str	r3, [sp, #16]
 8005470:	f000 fb4e 	bl	8005b10 <__lshift>
 8005474:	4621      	mov	r1, r4
 8005476:	9003      	str	r0, [sp, #12]
 8005478:	f000 fbb6 	bl	8005be8 <__mcmp>
 800547c:	2800      	cmp	r0, #0
 800547e:	dcb4      	bgt.n	80053ea <_dtoa_r+0xa8a>
 8005480:	d102      	bne.n	8005488 <_dtoa_r+0xb28>
 8005482:	9b04      	ldr	r3, [sp, #16]
 8005484:	07db      	lsls	r3, r3, #31
 8005486:	d4b0      	bmi.n	80053ea <_dtoa_r+0xa8a>
 8005488:	4633      	mov	r3, r6
 800548a:	461e      	mov	r6, r3
 800548c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005490:	2a30      	cmp	r2, #48	@ 0x30
 8005492:	d0fa      	beq.n	800548a <_dtoa_r+0xb2a>
 8005494:	e4b5      	b.n	8004e02 <_dtoa_r+0x4a2>
 8005496:	459a      	cmp	sl, r3
 8005498:	d1a8      	bne.n	80053ec <_dtoa_r+0xa8c>
 800549a:	2331      	movs	r3, #49	@ 0x31
 800549c:	f108 0801 	add.w	r8, r8, #1
 80054a0:	f88a 3000 	strb.w	r3, [sl]
 80054a4:	e4ad      	b.n	8004e02 <_dtoa_r+0x4a2>
 80054a6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80054a8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005504 <_dtoa_r+0xba4>
 80054ac:	b11b      	cbz	r3, 80054b6 <_dtoa_r+0xb56>
 80054ae:	f10a 0308 	add.w	r3, sl, #8
 80054b2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80054b4:	6013      	str	r3, [r2, #0]
 80054b6:	4650      	mov	r0, sl
 80054b8:	b017      	add	sp, #92	@ 0x5c
 80054ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054be:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	f77f ae2e 	ble.w	8005122 <_dtoa_r+0x7c2>
 80054c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80054c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80054ca:	2001      	movs	r0, #1
 80054cc:	e64d      	b.n	800516a <_dtoa_r+0x80a>
 80054ce:	f1bb 0f00 	cmp.w	fp, #0
 80054d2:	f77f aed9 	ble.w	8005288 <_dtoa_r+0x928>
 80054d6:	4656      	mov	r6, sl
 80054d8:	4621      	mov	r1, r4
 80054da:	9803      	ldr	r0, [sp, #12]
 80054dc:	f7ff f9b5 	bl	800484a <quorem>
 80054e0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80054e4:	f806 3b01 	strb.w	r3, [r6], #1
 80054e8:	eba6 020a 	sub.w	r2, r6, sl
 80054ec:	4593      	cmp	fp, r2
 80054ee:	ddb4      	ble.n	800545a <_dtoa_r+0xafa>
 80054f0:	2300      	movs	r3, #0
 80054f2:	220a      	movs	r2, #10
 80054f4:	4648      	mov	r0, r9
 80054f6:	9903      	ldr	r1, [sp, #12]
 80054f8:	f000 f966 	bl	80057c8 <__multadd>
 80054fc:	9003      	str	r0, [sp, #12]
 80054fe:	e7eb      	b.n	80054d8 <_dtoa_r+0xb78>
 8005500:	08006c72 	.word	0x08006c72
 8005504:	08006bf6 	.word	0x08006bf6

08005508 <_free_r>:
 8005508:	b538      	push	{r3, r4, r5, lr}
 800550a:	4605      	mov	r5, r0
 800550c:	2900      	cmp	r1, #0
 800550e:	d040      	beq.n	8005592 <_free_r+0x8a>
 8005510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005514:	1f0c      	subs	r4, r1, #4
 8005516:	2b00      	cmp	r3, #0
 8005518:	bfb8      	it	lt
 800551a:	18e4      	addlt	r4, r4, r3
 800551c:	f000 f8e6 	bl	80056ec <__malloc_lock>
 8005520:	4a1c      	ldr	r2, [pc, #112]	@ (8005594 <_free_r+0x8c>)
 8005522:	6813      	ldr	r3, [r2, #0]
 8005524:	b933      	cbnz	r3, 8005534 <_free_r+0x2c>
 8005526:	6063      	str	r3, [r4, #4]
 8005528:	6014      	str	r4, [r2, #0]
 800552a:	4628      	mov	r0, r5
 800552c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005530:	f000 b8e2 	b.w	80056f8 <__malloc_unlock>
 8005534:	42a3      	cmp	r3, r4
 8005536:	d908      	bls.n	800554a <_free_r+0x42>
 8005538:	6820      	ldr	r0, [r4, #0]
 800553a:	1821      	adds	r1, r4, r0
 800553c:	428b      	cmp	r3, r1
 800553e:	bf01      	itttt	eq
 8005540:	6819      	ldreq	r1, [r3, #0]
 8005542:	685b      	ldreq	r3, [r3, #4]
 8005544:	1809      	addeq	r1, r1, r0
 8005546:	6021      	streq	r1, [r4, #0]
 8005548:	e7ed      	b.n	8005526 <_free_r+0x1e>
 800554a:	461a      	mov	r2, r3
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	b10b      	cbz	r3, 8005554 <_free_r+0x4c>
 8005550:	42a3      	cmp	r3, r4
 8005552:	d9fa      	bls.n	800554a <_free_r+0x42>
 8005554:	6811      	ldr	r1, [r2, #0]
 8005556:	1850      	adds	r0, r2, r1
 8005558:	42a0      	cmp	r0, r4
 800555a:	d10b      	bne.n	8005574 <_free_r+0x6c>
 800555c:	6820      	ldr	r0, [r4, #0]
 800555e:	4401      	add	r1, r0
 8005560:	1850      	adds	r0, r2, r1
 8005562:	4283      	cmp	r3, r0
 8005564:	6011      	str	r1, [r2, #0]
 8005566:	d1e0      	bne.n	800552a <_free_r+0x22>
 8005568:	6818      	ldr	r0, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	4408      	add	r0, r1
 800556e:	6010      	str	r0, [r2, #0]
 8005570:	6053      	str	r3, [r2, #4]
 8005572:	e7da      	b.n	800552a <_free_r+0x22>
 8005574:	d902      	bls.n	800557c <_free_r+0x74>
 8005576:	230c      	movs	r3, #12
 8005578:	602b      	str	r3, [r5, #0]
 800557a:	e7d6      	b.n	800552a <_free_r+0x22>
 800557c:	6820      	ldr	r0, [r4, #0]
 800557e:	1821      	adds	r1, r4, r0
 8005580:	428b      	cmp	r3, r1
 8005582:	bf01      	itttt	eq
 8005584:	6819      	ldreq	r1, [r3, #0]
 8005586:	685b      	ldreq	r3, [r3, #4]
 8005588:	1809      	addeq	r1, r1, r0
 800558a:	6021      	streq	r1, [r4, #0]
 800558c:	6063      	str	r3, [r4, #4]
 800558e:	6054      	str	r4, [r2, #4]
 8005590:	e7cb      	b.n	800552a <_free_r+0x22>
 8005592:	bd38      	pop	{r3, r4, r5, pc}
 8005594:	20000498 	.word	0x20000498

08005598 <malloc>:
 8005598:	4b02      	ldr	r3, [pc, #8]	@ (80055a4 <malloc+0xc>)
 800559a:	4601      	mov	r1, r0
 800559c:	6818      	ldr	r0, [r3, #0]
 800559e:	f000 b825 	b.w	80055ec <_malloc_r>
 80055a2:	bf00      	nop
 80055a4:	200000a8 	.word	0x200000a8

080055a8 <sbrk_aligned>:
 80055a8:	b570      	push	{r4, r5, r6, lr}
 80055aa:	4e0f      	ldr	r6, [pc, #60]	@ (80055e8 <sbrk_aligned+0x40>)
 80055ac:	460c      	mov	r4, r1
 80055ae:	6831      	ldr	r1, [r6, #0]
 80055b0:	4605      	mov	r5, r0
 80055b2:	b911      	cbnz	r1, 80055ba <sbrk_aligned+0x12>
 80055b4:	f000 fe8c 	bl	80062d0 <_sbrk_r>
 80055b8:	6030      	str	r0, [r6, #0]
 80055ba:	4621      	mov	r1, r4
 80055bc:	4628      	mov	r0, r5
 80055be:	f000 fe87 	bl	80062d0 <_sbrk_r>
 80055c2:	1c43      	adds	r3, r0, #1
 80055c4:	d103      	bne.n	80055ce <sbrk_aligned+0x26>
 80055c6:	f04f 34ff 	mov.w	r4, #4294967295
 80055ca:	4620      	mov	r0, r4
 80055cc:	bd70      	pop	{r4, r5, r6, pc}
 80055ce:	1cc4      	adds	r4, r0, #3
 80055d0:	f024 0403 	bic.w	r4, r4, #3
 80055d4:	42a0      	cmp	r0, r4
 80055d6:	d0f8      	beq.n	80055ca <sbrk_aligned+0x22>
 80055d8:	1a21      	subs	r1, r4, r0
 80055da:	4628      	mov	r0, r5
 80055dc:	f000 fe78 	bl	80062d0 <_sbrk_r>
 80055e0:	3001      	adds	r0, #1
 80055e2:	d1f2      	bne.n	80055ca <sbrk_aligned+0x22>
 80055e4:	e7ef      	b.n	80055c6 <sbrk_aligned+0x1e>
 80055e6:	bf00      	nop
 80055e8:	20000494 	.word	0x20000494

080055ec <_malloc_r>:
 80055ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055f0:	1ccd      	adds	r5, r1, #3
 80055f2:	f025 0503 	bic.w	r5, r5, #3
 80055f6:	3508      	adds	r5, #8
 80055f8:	2d0c      	cmp	r5, #12
 80055fa:	bf38      	it	cc
 80055fc:	250c      	movcc	r5, #12
 80055fe:	2d00      	cmp	r5, #0
 8005600:	4606      	mov	r6, r0
 8005602:	db01      	blt.n	8005608 <_malloc_r+0x1c>
 8005604:	42a9      	cmp	r1, r5
 8005606:	d904      	bls.n	8005612 <_malloc_r+0x26>
 8005608:	230c      	movs	r3, #12
 800560a:	6033      	str	r3, [r6, #0]
 800560c:	2000      	movs	r0, #0
 800560e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005612:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80056e8 <_malloc_r+0xfc>
 8005616:	f000 f869 	bl	80056ec <__malloc_lock>
 800561a:	f8d8 3000 	ldr.w	r3, [r8]
 800561e:	461c      	mov	r4, r3
 8005620:	bb44      	cbnz	r4, 8005674 <_malloc_r+0x88>
 8005622:	4629      	mov	r1, r5
 8005624:	4630      	mov	r0, r6
 8005626:	f7ff ffbf 	bl	80055a8 <sbrk_aligned>
 800562a:	1c43      	adds	r3, r0, #1
 800562c:	4604      	mov	r4, r0
 800562e:	d158      	bne.n	80056e2 <_malloc_r+0xf6>
 8005630:	f8d8 4000 	ldr.w	r4, [r8]
 8005634:	4627      	mov	r7, r4
 8005636:	2f00      	cmp	r7, #0
 8005638:	d143      	bne.n	80056c2 <_malloc_r+0xd6>
 800563a:	2c00      	cmp	r4, #0
 800563c:	d04b      	beq.n	80056d6 <_malloc_r+0xea>
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	4639      	mov	r1, r7
 8005642:	4630      	mov	r0, r6
 8005644:	eb04 0903 	add.w	r9, r4, r3
 8005648:	f000 fe42 	bl	80062d0 <_sbrk_r>
 800564c:	4581      	cmp	r9, r0
 800564e:	d142      	bne.n	80056d6 <_malloc_r+0xea>
 8005650:	6821      	ldr	r1, [r4, #0]
 8005652:	4630      	mov	r0, r6
 8005654:	1a6d      	subs	r5, r5, r1
 8005656:	4629      	mov	r1, r5
 8005658:	f7ff ffa6 	bl	80055a8 <sbrk_aligned>
 800565c:	3001      	adds	r0, #1
 800565e:	d03a      	beq.n	80056d6 <_malloc_r+0xea>
 8005660:	6823      	ldr	r3, [r4, #0]
 8005662:	442b      	add	r3, r5
 8005664:	6023      	str	r3, [r4, #0]
 8005666:	f8d8 3000 	ldr.w	r3, [r8]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	bb62      	cbnz	r2, 80056c8 <_malloc_r+0xdc>
 800566e:	f8c8 7000 	str.w	r7, [r8]
 8005672:	e00f      	b.n	8005694 <_malloc_r+0xa8>
 8005674:	6822      	ldr	r2, [r4, #0]
 8005676:	1b52      	subs	r2, r2, r5
 8005678:	d420      	bmi.n	80056bc <_malloc_r+0xd0>
 800567a:	2a0b      	cmp	r2, #11
 800567c:	d917      	bls.n	80056ae <_malloc_r+0xc2>
 800567e:	1961      	adds	r1, r4, r5
 8005680:	42a3      	cmp	r3, r4
 8005682:	6025      	str	r5, [r4, #0]
 8005684:	bf18      	it	ne
 8005686:	6059      	strne	r1, [r3, #4]
 8005688:	6863      	ldr	r3, [r4, #4]
 800568a:	bf08      	it	eq
 800568c:	f8c8 1000 	streq.w	r1, [r8]
 8005690:	5162      	str	r2, [r4, r5]
 8005692:	604b      	str	r3, [r1, #4]
 8005694:	4630      	mov	r0, r6
 8005696:	f000 f82f 	bl	80056f8 <__malloc_unlock>
 800569a:	f104 000b 	add.w	r0, r4, #11
 800569e:	1d23      	adds	r3, r4, #4
 80056a0:	f020 0007 	bic.w	r0, r0, #7
 80056a4:	1ac2      	subs	r2, r0, r3
 80056a6:	bf1c      	itt	ne
 80056a8:	1a1b      	subne	r3, r3, r0
 80056aa:	50a3      	strne	r3, [r4, r2]
 80056ac:	e7af      	b.n	800560e <_malloc_r+0x22>
 80056ae:	6862      	ldr	r2, [r4, #4]
 80056b0:	42a3      	cmp	r3, r4
 80056b2:	bf0c      	ite	eq
 80056b4:	f8c8 2000 	streq.w	r2, [r8]
 80056b8:	605a      	strne	r2, [r3, #4]
 80056ba:	e7eb      	b.n	8005694 <_malloc_r+0xa8>
 80056bc:	4623      	mov	r3, r4
 80056be:	6864      	ldr	r4, [r4, #4]
 80056c0:	e7ae      	b.n	8005620 <_malloc_r+0x34>
 80056c2:	463c      	mov	r4, r7
 80056c4:	687f      	ldr	r7, [r7, #4]
 80056c6:	e7b6      	b.n	8005636 <_malloc_r+0x4a>
 80056c8:	461a      	mov	r2, r3
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	42a3      	cmp	r3, r4
 80056ce:	d1fb      	bne.n	80056c8 <_malloc_r+0xdc>
 80056d0:	2300      	movs	r3, #0
 80056d2:	6053      	str	r3, [r2, #4]
 80056d4:	e7de      	b.n	8005694 <_malloc_r+0xa8>
 80056d6:	230c      	movs	r3, #12
 80056d8:	4630      	mov	r0, r6
 80056da:	6033      	str	r3, [r6, #0]
 80056dc:	f000 f80c 	bl	80056f8 <__malloc_unlock>
 80056e0:	e794      	b.n	800560c <_malloc_r+0x20>
 80056e2:	6005      	str	r5, [r0, #0]
 80056e4:	e7d6      	b.n	8005694 <_malloc_r+0xa8>
 80056e6:	bf00      	nop
 80056e8:	20000498 	.word	0x20000498

080056ec <__malloc_lock>:
 80056ec:	4801      	ldr	r0, [pc, #4]	@ (80056f4 <__malloc_lock+0x8>)
 80056ee:	f7ff b89c 	b.w	800482a <__retarget_lock_acquire_recursive>
 80056f2:	bf00      	nop
 80056f4:	20000490 	.word	0x20000490

080056f8 <__malloc_unlock>:
 80056f8:	4801      	ldr	r0, [pc, #4]	@ (8005700 <__malloc_unlock+0x8>)
 80056fa:	f7ff b897 	b.w	800482c <__retarget_lock_release_recursive>
 80056fe:	bf00      	nop
 8005700:	20000490 	.word	0x20000490

08005704 <_Balloc>:
 8005704:	b570      	push	{r4, r5, r6, lr}
 8005706:	69c6      	ldr	r6, [r0, #28]
 8005708:	4604      	mov	r4, r0
 800570a:	460d      	mov	r5, r1
 800570c:	b976      	cbnz	r6, 800572c <_Balloc+0x28>
 800570e:	2010      	movs	r0, #16
 8005710:	f7ff ff42 	bl	8005598 <malloc>
 8005714:	4602      	mov	r2, r0
 8005716:	61e0      	str	r0, [r4, #28]
 8005718:	b920      	cbnz	r0, 8005724 <_Balloc+0x20>
 800571a:	216b      	movs	r1, #107	@ 0x6b
 800571c:	4b17      	ldr	r3, [pc, #92]	@ (800577c <_Balloc+0x78>)
 800571e:	4818      	ldr	r0, [pc, #96]	@ (8005780 <_Balloc+0x7c>)
 8005720:	f000 fdf4 	bl	800630c <__assert_func>
 8005724:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005728:	6006      	str	r6, [r0, #0]
 800572a:	60c6      	str	r6, [r0, #12]
 800572c:	69e6      	ldr	r6, [r4, #28]
 800572e:	68f3      	ldr	r3, [r6, #12]
 8005730:	b183      	cbz	r3, 8005754 <_Balloc+0x50>
 8005732:	69e3      	ldr	r3, [r4, #28]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800573a:	b9b8      	cbnz	r0, 800576c <_Balloc+0x68>
 800573c:	2101      	movs	r1, #1
 800573e:	fa01 f605 	lsl.w	r6, r1, r5
 8005742:	1d72      	adds	r2, r6, #5
 8005744:	4620      	mov	r0, r4
 8005746:	0092      	lsls	r2, r2, #2
 8005748:	f000 fdfe 	bl	8006348 <_calloc_r>
 800574c:	b160      	cbz	r0, 8005768 <_Balloc+0x64>
 800574e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005752:	e00e      	b.n	8005772 <_Balloc+0x6e>
 8005754:	2221      	movs	r2, #33	@ 0x21
 8005756:	2104      	movs	r1, #4
 8005758:	4620      	mov	r0, r4
 800575a:	f000 fdf5 	bl	8006348 <_calloc_r>
 800575e:	69e3      	ldr	r3, [r4, #28]
 8005760:	60f0      	str	r0, [r6, #12]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1e4      	bne.n	8005732 <_Balloc+0x2e>
 8005768:	2000      	movs	r0, #0
 800576a:	bd70      	pop	{r4, r5, r6, pc}
 800576c:	6802      	ldr	r2, [r0, #0]
 800576e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005772:	2300      	movs	r3, #0
 8005774:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005778:	e7f7      	b.n	800576a <_Balloc+0x66>
 800577a:	bf00      	nop
 800577c:	08006c03 	.word	0x08006c03
 8005780:	08006c83 	.word	0x08006c83

08005784 <_Bfree>:
 8005784:	b570      	push	{r4, r5, r6, lr}
 8005786:	69c6      	ldr	r6, [r0, #28]
 8005788:	4605      	mov	r5, r0
 800578a:	460c      	mov	r4, r1
 800578c:	b976      	cbnz	r6, 80057ac <_Bfree+0x28>
 800578e:	2010      	movs	r0, #16
 8005790:	f7ff ff02 	bl	8005598 <malloc>
 8005794:	4602      	mov	r2, r0
 8005796:	61e8      	str	r0, [r5, #28]
 8005798:	b920      	cbnz	r0, 80057a4 <_Bfree+0x20>
 800579a:	218f      	movs	r1, #143	@ 0x8f
 800579c:	4b08      	ldr	r3, [pc, #32]	@ (80057c0 <_Bfree+0x3c>)
 800579e:	4809      	ldr	r0, [pc, #36]	@ (80057c4 <_Bfree+0x40>)
 80057a0:	f000 fdb4 	bl	800630c <__assert_func>
 80057a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80057a8:	6006      	str	r6, [r0, #0]
 80057aa:	60c6      	str	r6, [r0, #12]
 80057ac:	b13c      	cbz	r4, 80057be <_Bfree+0x3a>
 80057ae:	69eb      	ldr	r3, [r5, #28]
 80057b0:	6862      	ldr	r2, [r4, #4]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80057b8:	6021      	str	r1, [r4, #0]
 80057ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80057be:	bd70      	pop	{r4, r5, r6, pc}
 80057c0:	08006c03 	.word	0x08006c03
 80057c4:	08006c83 	.word	0x08006c83

080057c8 <__multadd>:
 80057c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057cc:	4607      	mov	r7, r0
 80057ce:	460c      	mov	r4, r1
 80057d0:	461e      	mov	r6, r3
 80057d2:	2000      	movs	r0, #0
 80057d4:	690d      	ldr	r5, [r1, #16]
 80057d6:	f101 0c14 	add.w	ip, r1, #20
 80057da:	f8dc 3000 	ldr.w	r3, [ip]
 80057de:	3001      	adds	r0, #1
 80057e0:	b299      	uxth	r1, r3
 80057e2:	fb02 6101 	mla	r1, r2, r1, r6
 80057e6:	0c1e      	lsrs	r6, r3, #16
 80057e8:	0c0b      	lsrs	r3, r1, #16
 80057ea:	fb02 3306 	mla	r3, r2, r6, r3
 80057ee:	b289      	uxth	r1, r1
 80057f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80057f4:	4285      	cmp	r5, r0
 80057f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80057fa:	f84c 1b04 	str.w	r1, [ip], #4
 80057fe:	dcec      	bgt.n	80057da <__multadd+0x12>
 8005800:	b30e      	cbz	r6, 8005846 <__multadd+0x7e>
 8005802:	68a3      	ldr	r3, [r4, #8]
 8005804:	42ab      	cmp	r3, r5
 8005806:	dc19      	bgt.n	800583c <__multadd+0x74>
 8005808:	6861      	ldr	r1, [r4, #4]
 800580a:	4638      	mov	r0, r7
 800580c:	3101      	adds	r1, #1
 800580e:	f7ff ff79 	bl	8005704 <_Balloc>
 8005812:	4680      	mov	r8, r0
 8005814:	b928      	cbnz	r0, 8005822 <__multadd+0x5a>
 8005816:	4602      	mov	r2, r0
 8005818:	21ba      	movs	r1, #186	@ 0xba
 800581a:	4b0c      	ldr	r3, [pc, #48]	@ (800584c <__multadd+0x84>)
 800581c:	480c      	ldr	r0, [pc, #48]	@ (8005850 <__multadd+0x88>)
 800581e:	f000 fd75 	bl	800630c <__assert_func>
 8005822:	6922      	ldr	r2, [r4, #16]
 8005824:	f104 010c 	add.w	r1, r4, #12
 8005828:	3202      	adds	r2, #2
 800582a:	0092      	lsls	r2, r2, #2
 800582c:	300c      	adds	r0, #12
 800582e:	f000 fd5f 	bl	80062f0 <memcpy>
 8005832:	4621      	mov	r1, r4
 8005834:	4638      	mov	r0, r7
 8005836:	f7ff ffa5 	bl	8005784 <_Bfree>
 800583a:	4644      	mov	r4, r8
 800583c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005840:	3501      	adds	r5, #1
 8005842:	615e      	str	r6, [r3, #20]
 8005844:	6125      	str	r5, [r4, #16]
 8005846:	4620      	mov	r0, r4
 8005848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800584c:	08006c72 	.word	0x08006c72
 8005850:	08006c83 	.word	0x08006c83

08005854 <__hi0bits>:
 8005854:	4603      	mov	r3, r0
 8005856:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800585a:	bf3a      	itte	cc
 800585c:	0403      	lslcc	r3, r0, #16
 800585e:	2010      	movcc	r0, #16
 8005860:	2000      	movcs	r0, #0
 8005862:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005866:	bf3c      	itt	cc
 8005868:	021b      	lslcc	r3, r3, #8
 800586a:	3008      	addcc	r0, #8
 800586c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005870:	bf3c      	itt	cc
 8005872:	011b      	lslcc	r3, r3, #4
 8005874:	3004      	addcc	r0, #4
 8005876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800587a:	bf3c      	itt	cc
 800587c:	009b      	lslcc	r3, r3, #2
 800587e:	3002      	addcc	r0, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	db05      	blt.n	8005890 <__hi0bits+0x3c>
 8005884:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005888:	f100 0001 	add.w	r0, r0, #1
 800588c:	bf08      	it	eq
 800588e:	2020      	moveq	r0, #32
 8005890:	4770      	bx	lr

08005892 <__lo0bits>:
 8005892:	6803      	ldr	r3, [r0, #0]
 8005894:	4602      	mov	r2, r0
 8005896:	f013 0007 	ands.w	r0, r3, #7
 800589a:	d00b      	beq.n	80058b4 <__lo0bits+0x22>
 800589c:	07d9      	lsls	r1, r3, #31
 800589e:	d421      	bmi.n	80058e4 <__lo0bits+0x52>
 80058a0:	0798      	lsls	r0, r3, #30
 80058a2:	bf49      	itett	mi
 80058a4:	085b      	lsrmi	r3, r3, #1
 80058a6:	089b      	lsrpl	r3, r3, #2
 80058a8:	2001      	movmi	r0, #1
 80058aa:	6013      	strmi	r3, [r2, #0]
 80058ac:	bf5c      	itt	pl
 80058ae:	2002      	movpl	r0, #2
 80058b0:	6013      	strpl	r3, [r2, #0]
 80058b2:	4770      	bx	lr
 80058b4:	b299      	uxth	r1, r3
 80058b6:	b909      	cbnz	r1, 80058bc <__lo0bits+0x2a>
 80058b8:	2010      	movs	r0, #16
 80058ba:	0c1b      	lsrs	r3, r3, #16
 80058bc:	b2d9      	uxtb	r1, r3
 80058be:	b909      	cbnz	r1, 80058c4 <__lo0bits+0x32>
 80058c0:	3008      	adds	r0, #8
 80058c2:	0a1b      	lsrs	r3, r3, #8
 80058c4:	0719      	lsls	r1, r3, #28
 80058c6:	bf04      	itt	eq
 80058c8:	091b      	lsreq	r3, r3, #4
 80058ca:	3004      	addeq	r0, #4
 80058cc:	0799      	lsls	r1, r3, #30
 80058ce:	bf04      	itt	eq
 80058d0:	089b      	lsreq	r3, r3, #2
 80058d2:	3002      	addeq	r0, #2
 80058d4:	07d9      	lsls	r1, r3, #31
 80058d6:	d403      	bmi.n	80058e0 <__lo0bits+0x4e>
 80058d8:	085b      	lsrs	r3, r3, #1
 80058da:	f100 0001 	add.w	r0, r0, #1
 80058de:	d003      	beq.n	80058e8 <__lo0bits+0x56>
 80058e0:	6013      	str	r3, [r2, #0]
 80058e2:	4770      	bx	lr
 80058e4:	2000      	movs	r0, #0
 80058e6:	4770      	bx	lr
 80058e8:	2020      	movs	r0, #32
 80058ea:	4770      	bx	lr

080058ec <__i2b>:
 80058ec:	b510      	push	{r4, lr}
 80058ee:	460c      	mov	r4, r1
 80058f0:	2101      	movs	r1, #1
 80058f2:	f7ff ff07 	bl	8005704 <_Balloc>
 80058f6:	4602      	mov	r2, r0
 80058f8:	b928      	cbnz	r0, 8005906 <__i2b+0x1a>
 80058fa:	f240 1145 	movw	r1, #325	@ 0x145
 80058fe:	4b04      	ldr	r3, [pc, #16]	@ (8005910 <__i2b+0x24>)
 8005900:	4804      	ldr	r0, [pc, #16]	@ (8005914 <__i2b+0x28>)
 8005902:	f000 fd03 	bl	800630c <__assert_func>
 8005906:	2301      	movs	r3, #1
 8005908:	6144      	str	r4, [r0, #20]
 800590a:	6103      	str	r3, [r0, #16]
 800590c:	bd10      	pop	{r4, pc}
 800590e:	bf00      	nop
 8005910:	08006c72 	.word	0x08006c72
 8005914:	08006c83 	.word	0x08006c83

08005918 <__multiply>:
 8005918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800591c:	4617      	mov	r7, r2
 800591e:	690a      	ldr	r2, [r1, #16]
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	4689      	mov	r9, r1
 8005924:	429a      	cmp	r2, r3
 8005926:	bfa2      	ittt	ge
 8005928:	463b      	movge	r3, r7
 800592a:	460f      	movge	r7, r1
 800592c:	4699      	movge	r9, r3
 800592e:	693d      	ldr	r5, [r7, #16]
 8005930:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	6879      	ldr	r1, [r7, #4]
 8005938:	eb05 060a 	add.w	r6, r5, sl
 800593c:	42b3      	cmp	r3, r6
 800593e:	b085      	sub	sp, #20
 8005940:	bfb8      	it	lt
 8005942:	3101      	addlt	r1, #1
 8005944:	f7ff fede 	bl	8005704 <_Balloc>
 8005948:	b930      	cbnz	r0, 8005958 <__multiply+0x40>
 800594a:	4602      	mov	r2, r0
 800594c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005950:	4b40      	ldr	r3, [pc, #256]	@ (8005a54 <__multiply+0x13c>)
 8005952:	4841      	ldr	r0, [pc, #260]	@ (8005a58 <__multiply+0x140>)
 8005954:	f000 fcda 	bl	800630c <__assert_func>
 8005958:	f100 0414 	add.w	r4, r0, #20
 800595c:	4623      	mov	r3, r4
 800595e:	2200      	movs	r2, #0
 8005960:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005964:	4573      	cmp	r3, lr
 8005966:	d320      	bcc.n	80059aa <__multiply+0x92>
 8005968:	f107 0814 	add.w	r8, r7, #20
 800596c:	f109 0114 	add.w	r1, r9, #20
 8005970:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005974:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005978:	9302      	str	r3, [sp, #8]
 800597a:	1beb      	subs	r3, r5, r7
 800597c:	3b15      	subs	r3, #21
 800597e:	f023 0303 	bic.w	r3, r3, #3
 8005982:	3304      	adds	r3, #4
 8005984:	3715      	adds	r7, #21
 8005986:	42bd      	cmp	r5, r7
 8005988:	bf38      	it	cc
 800598a:	2304      	movcc	r3, #4
 800598c:	9301      	str	r3, [sp, #4]
 800598e:	9b02      	ldr	r3, [sp, #8]
 8005990:	9103      	str	r1, [sp, #12]
 8005992:	428b      	cmp	r3, r1
 8005994:	d80c      	bhi.n	80059b0 <__multiply+0x98>
 8005996:	2e00      	cmp	r6, #0
 8005998:	dd03      	ble.n	80059a2 <__multiply+0x8a>
 800599a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d055      	beq.n	8005a4e <__multiply+0x136>
 80059a2:	6106      	str	r6, [r0, #16]
 80059a4:	b005      	add	sp, #20
 80059a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059aa:	f843 2b04 	str.w	r2, [r3], #4
 80059ae:	e7d9      	b.n	8005964 <__multiply+0x4c>
 80059b0:	f8b1 a000 	ldrh.w	sl, [r1]
 80059b4:	f1ba 0f00 	cmp.w	sl, #0
 80059b8:	d01f      	beq.n	80059fa <__multiply+0xe2>
 80059ba:	46c4      	mov	ip, r8
 80059bc:	46a1      	mov	r9, r4
 80059be:	2700      	movs	r7, #0
 80059c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80059c4:	f8d9 3000 	ldr.w	r3, [r9]
 80059c8:	fa1f fb82 	uxth.w	fp, r2
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	fb0a 330b 	mla	r3, sl, fp, r3
 80059d2:	443b      	add	r3, r7
 80059d4:	f8d9 7000 	ldr.w	r7, [r9]
 80059d8:	0c12      	lsrs	r2, r2, #16
 80059da:	0c3f      	lsrs	r7, r7, #16
 80059dc:	fb0a 7202 	mla	r2, sl, r2, r7
 80059e0:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059ea:	4565      	cmp	r5, ip
 80059ec:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80059f0:	f849 3b04 	str.w	r3, [r9], #4
 80059f4:	d8e4      	bhi.n	80059c0 <__multiply+0xa8>
 80059f6:	9b01      	ldr	r3, [sp, #4]
 80059f8:	50e7      	str	r7, [r4, r3]
 80059fa:	9b03      	ldr	r3, [sp, #12]
 80059fc:	3104      	adds	r1, #4
 80059fe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005a02:	f1b9 0f00 	cmp.w	r9, #0
 8005a06:	d020      	beq.n	8005a4a <__multiply+0x132>
 8005a08:	4647      	mov	r7, r8
 8005a0a:	46a4      	mov	ip, r4
 8005a0c:	f04f 0a00 	mov.w	sl, #0
 8005a10:	6823      	ldr	r3, [r4, #0]
 8005a12:	f8b7 b000 	ldrh.w	fp, [r7]
 8005a16:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	fb09 220b 	mla	r2, r9, fp, r2
 8005a20:	4452      	add	r2, sl
 8005a22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a26:	f84c 3b04 	str.w	r3, [ip], #4
 8005a2a:	f857 3b04 	ldr.w	r3, [r7], #4
 8005a2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005a32:	f8bc 3000 	ldrh.w	r3, [ip]
 8005a36:	42bd      	cmp	r5, r7
 8005a38:	fb09 330a 	mla	r3, r9, sl, r3
 8005a3c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005a40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005a44:	d8e5      	bhi.n	8005a12 <__multiply+0xfa>
 8005a46:	9a01      	ldr	r2, [sp, #4]
 8005a48:	50a3      	str	r3, [r4, r2]
 8005a4a:	3404      	adds	r4, #4
 8005a4c:	e79f      	b.n	800598e <__multiply+0x76>
 8005a4e:	3e01      	subs	r6, #1
 8005a50:	e7a1      	b.n	8005996 <__multiply+0x7e>
 8005a52:	bf00      	nop
 8005a54:	08006c72 	.word	0x08006c72
 8005a58:	08006c83 	.word	0x08006c83

08005a5c <__pow5mult>:
 8005a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a60:	4615      	mov	r5, r2
 8005a62:	f012 0203 	ands.w	r2, r2, #3
 8005a66:	4607      	mov	r7, r0
 8005a68:	460e      	mov	r6, r1
 8005a6a:	d007      	beq.n	8005a7c <__pow5mult+0x20>
 8005a6c:	4c25      	ldr	r4, [pc, #148]	@ (8005b04 <__pow5mult+0xa8>)
 8005a6e:	3a01      	subs	r2, #1
 8005a70:	2300      	movs	r3, #0
 8005a72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a76:	f7ff fea7 	bl	80057c8 <__multadd>
 8005a7a:	4606      	mov	r6, r0
 8005a7c:	10ad      	asrs	r5, r5, #2
 8005a7e:	d03d      	beq.n	8005afc <__pow5mult+0xa0>
 8005a80:	69fc      	ldr	r4, [r7, #28]
 8005a82:	b97c      	cbnz	r4, 8005aa4 <__pow5mult+0x48>
 8005a84:	2010      	movs	r0, #16
 8005a86:	f7ff fd87 	bl	8005598 <malloc>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	61f8      	str	r0, [r7, #28]
 8005a8e:	b928      	cbnz	r0, 8005a9c <__pow5mult+0x40>
 8005a90:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005a94:	4b1c      	ldr	r3, [pc, #112]	@ (8005b08 <__pow5mult+0xac>)
 8005a96:	481d      	ldr	r0, [pc, #116]	@ (8005b0c <__pow5mult+0xb0>)
 8005a98:	f000 fc38 	bl	800630c <__assert_func>
 8005a9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005aa0:	6004      	str	r4, [r0, #0]
 8005aa2:	60c4      	str	r4, [r0, #12]
 8005aa4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005aa8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005aac:	b94c      	cbnz	r4, 8005ac2 <__pow5mult+0x66>
 8005aae:	f240 2171 	movw	r1, #625	@ 0x271
 8005ab2:	4638      	mov	r0, r7
 8005ab4:	f7ff ff1a 	bl	80058ec <__i2b>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	4604      	mov	r4, r0
 8005abc:	f8c8 0008 	str.w	r0, [r8, #8]
 8005ac0:	6003      	str	r3, [r0, #0]
 8005ac2:	f04f 0900 	mov.w	r9, #0
 8005ac6:	07eb      	lsls	r3, r5, #31
 8005ac8:	d50a      	bpl.n	8005ae0 <__pow5mult+0x84>
 8005aca:	4631      	mov	r1, r6
 8005acc:	4622      	mov	r2, r4
 8005ace:	4638      	mov	r0, r7
 8005ad0:	f7ff ff22 	bl	8005918 <__multiply>
 8005ad4:	4680      	mov	r8, r0
 8005ad6:	4631      	mov	r1, r6
 8005ad8:	4638      	mov	r0, r7
 8005ada:	f7ff fe53 	bl	8005784 <_Bfree>
 8005ade:	4646      	mov	r6, r8
 8005ae0:	106d      	asrs	r5, r5, #1
 8005ae2:	d00b      	beq.n	8005afc <__pow5mult+0xa0>
 8005ae4:	6820      	ldr	r0, [r4, #0]
 8005ae6:	b938      	cbnz	r0, 8005af8 <__pow5mult+0x9c>
 8005ae8:	4622      	mov	r2, r4
 8005aea:	4621      	mov	r1, r4
 8005aec:	4638      	mov	r0, r7
 8005aee:	f7ff ff13 	bl	8005918 <__multiply>
 8005af2:	6020      	str	r0, [r4, #0]
 8005af4:	f8c0 9000 	str.w	r9, [r0]
 8005af8:	4604      	mov	r4, r0
 8005afa:	e7e4      	b.n	8005ac6 <__pow5mult+0x6a>
 8005afc:	4630      	mov	r0, r6
 8005afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b02:	bf00      	nop
 8005b04:	08006d34 	.word	0x08006d34
 8005b08:	08006c03 	.word	0x08006c03
 8005b0c:	08006c83 	.word	0x08006c83

08005b10 <__lshift>:
 8005b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b14:	460c      	mov	r4, r1
 8005b16:	4607      	mov	r7, r0
 8005b18:	4691      	mov	r9, r2
 8005b1a:	6923      	ldr	r3, [r4, #16]
 8005b1c:	6849      	ldr	r1, [r1, #4]
 8005b1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005b22:	68a3      	ldr	r3, [r4, #8]
 8005b24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005b28:	f108 0601 	add.w	r6, r8, #1
 8005b2c:	42b3      	cmp	r3, r6
 8005b2e:	db0b      	blt.n	8005b48 <__lshift+0x38>
 8005b30:	4638      	mov	r0, r7
 8005b32:	f7ff fde7 	bl	8005704 <_Balloc>
 8005b36:	4605      	mov	r5, r0
 8005b38:	b948      	cbnz	r0, 8005b4e <__lshift+0x3e>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005b40:	4b27      	ldr	r3, [pc, #156]	@ (8005be0 <__lshift+0xd0>)
 8005b42:	4828      	ldr	r0, [pc, #160]	@ (8005be4 <__lshift+0xd4>)
 8005b44:	f000 fbe2 	bl	800630c <__assert_func>
 8005b48:	3101      	adds	r1, #1
 8005b4a:	005b      	lsls	r3, r3, #1
 8005b4c:	e7ee      	b.n	8005b2c <__lshift+0x1c>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f100 0114 	add.w	r1, r0, #20
 8005b54:	f100 0210 	add.w	r2, r0, #16
 8005b58:	4618      	mov	r0, r3
 8005b5a:	4553      	cmp	r3, sl
 8005b5c:	db33      	blt.n	8005bc6 <__lshift+0xb6>
 8005b5e:	6920      	ldr	r0, [r4, #16]
 8005b60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b64:	f104 0314 	add.w	r3, r4, #20
 8005b68:	f019 091f 	ands.w	r9, r9, #31
 8005b6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005b74:	d02b      	beq.n	8005bce <__lshift+0xbe>
 8005b76:	468a      	mov	sl, r1
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f1c9 0e20 	rsb	lr, r9, #32
 8005b7e:	6818      	ldr	r0, [r3, #0]
 8005b80:	fa00 f009 	lsl.w	r0, r0, r9
 8005b84:	4310      	orrs	r0, r2
 8005b86:	f84a 0b04 	str.w	r0, [sl], #4
 8005b8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b8e:	459c      	cmp	ip, r3
 8005b90:	fa22 f20e 	lsr.w	r2, r2, lr
 8005b94:	d8f3      	bhi.n	8005b7e <__lshift+0x6e>
 8005b96:	ebac 0304 	sub.w	r3, ip, r4
 8005b9a:	3b15      	subs	r3, #21
 8005b9c:	f023 0303 	bic.w	r3, r3, #3
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	f104 0015 	add.w	r0, r4, #21
 8005ba6:	4560      	cmp	r0, ip
 8005ba8:	bf88      	it	hi
 8005baa:	2304      	movhi	r3, #4
 8005bac:	50ca      	str	r2, [r1, r3]
 8005bae:	b10a      	cbz	r2, 8005bb4 <__lshift+0xa4>
 8005bb0:	f108 0602 	add.w	r6, r8, #2
 8005bb4:	3e01      	subs	r6, #1
 8005bb6:	4638      	mov	r0, r7
 8005bb8:	4621      	mov	r1, r4
 8005bba:	612e      	str	r6, [r5, #16]
 8005bbc:	f7ff fde2 	bl	8005784 <_Bfree>
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bc6:	f842 0f04 	str.w	r0, [r2, #4]!
 8005bca:	3301      	adds	r3, #1
 8005bcc:	e7c5      	b.n	8005b5a <__lshift+0x4a>
 8005bce:	3904      	subs	r1, #4
 8005bd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bd4:	459c      	cmp	ip, r3
 8005bd6:	f841 2f04 	str.w	r2, [r1, #4]!
 8005bda:	d8f9      	bhi.n	8005bd0 <__lshift+0xc0>
 8005bdc:	e7ea      	b.n	8005bb4 <__lshift+0xa4>
 8005bde:	bf00      	nop
 8005be0:	08006c72 	.word	0x08006c72
 8005be4:	08006c83 	.word	0x08006c83

08005be8 <__mcmp>:
 8005be8:	4603      	mov	r3, r0
 8005bea:	690a      	ldr	r2, [r1, #16]
 8005bec:	6900      	ldr	r0, [r0, #16]
 8005bee:	b530      	push	{r4, r5, lr}
 8005bf0:	1a80      	subs	r0, r0, r2
 8005bf2:	d10e      	bne.n	8005c12 <__mcmp+0x2a>
 8005bf4:	3314      	adds	r3, #20
 8005bf6:	3114      	adds	r1, #20
 8005bf8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005bfc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005c00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005c04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005c08:	4295      	cmp	r5, r2
 8005c0a:	d003      	beq.n	8005c14 <__mcmp+0x2c>
 8005c0c:	d205      	bcs.n	8005c1a <__mcmp+0x32>
 8005c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c12:	bd30      	pop	{r4, r5, pc}
 8005c14:	42a3      	cmp	r3, r4
 8005c16:	d3f3      	bcc.n	8005c00 <__mcmp+0x18>
 8005c18:	e7fb      	b.n	8005c12 <__mcmp+0x2a>
 8005c1a:	2001      	movs	r0, #1
 8005c1c:	e7f9      	b.n	8005c12 <__mcmp+0x2a>
	...

08005c20 <__mdiff>:
 8005c20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c24:	4689      	mov	r9, r1
 8005c26:	4606      	mov	r6, r0
 8005c28:	4611      	mov	r1, r2
 8005c2a:	4648      	mov	r0, r9
 8005c2c:	4614      	mov	r4, r2
 8005c2e:	f7ff ffdb 	bl	8005be8 <__mcmp>
 8005c32:	1e05      	subs	r5, r0, #0
 8005c34:	d112      	bne.n	8005c5c <__mdiff+0x3c>
 8005c36:	4629      	mov	r1, r5
 8005c38:	4630      	mov	r0, r6
 8005c3a:	f7ff fd63 	bl	8005704 <_Balloc>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	b928      	cbnz	r0, 8005c4e <__mdiff+0x2e>
 8005c42:	f240 2137 	movw	r1, #567	@ 0x237
 8005c46:	4b3e      	ldr	r3, [pc, #248]	@ (8005d40 <__mdiff+0x120>)
 8005c48:	483e      	ldr	r0, [pc, #248]	@ (8005d44 <__mdiff+0x124>)
 8005c4a:	f000 fb5f 	bl	800630c <__assert_func>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005c54:	4610      	mov	r0, r2
 8005c56:	b003      	add	sp, #12
 8005c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c5c:	bfbc      	itt	lt
 8005c5e:	464b      	movlt	r3, r9
 8005c60:	46a1      	movlt	r9, r4
 8005c62:	4630      	mov	r0, r6
 8005c64:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005c68:	bfba      	itte	lt
 8005c6a:	461c      	movlt	r4, r3
 8005c6c:	2501      	movlt	r5, #1
 8005c6e:	2500      	movge	r5, #0
 8005c70:	f7ff fd48 	bl	8005704 <_Balloc>
 8005c74:	4602      	mov	r2, r0
 8005c76:	b918      	cbnz	r0, 8005c80 <__mdiff+0x60>
 8005c78:	f240 2145 	movw	r1, #581	@ 0x245
 8005c7c:	4b30      	ldr	r3, [pc, #192]	@ (8005d40 <__mdiff+0x120>)
 8005c7e:	e7e3      	b.n	8005c48 <__mdiff+0x28>
 8005c80:	f100 0b14 	add.w	fp, r0, #20
 8005c84:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005c88:	f109 0310 	add.w	r3, r9, #16
 8005c8c:	60c5      	str	r5, [r0, #12]
 8005c8e:	f04f 0c00 	mov.w	ip, #0
 8005c92:	f109 0514 	add.w	r5, r9, #20
 8005c96:	46d9      	mov	r9, fp
 8005c98:	6926      	ldr	r6, [r4, #16]
 8005c9a:	f104 0e14 	add.w	lr, r4, #20
 8005c9e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005ca2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005ca6:	9301      	str	r3, [sp, #4]
 8005ca8:	9b01      	ldr	r3, [sp, #4]
 8005caa:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005cae:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005cb2:	b281      	uxth	r1, r0
 8005cb4:	9301      	str	r3, [sp, #4]
 8005cb6:	fa1f f38a 	uxth.w	r3, sl
 8005cba:	1a5b      	subs	r3, r3, r1
 8005cbc:	0c00      	lsrs	r0, r0, #16
 8005cbe:	4463      	add	r3, ip
 8005cc0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005cc4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005cce:	4576      	cmp	r6, lr
 8005cd0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005cd4:	f849 3b04 	str.w	r3, [r9], #4
 8005cd8:	d8e6      	bhi.n	8005ca8 <__mdiff+0x88>
 8005cda:	1b33      	subs	r3, r6, r4
 8005cdc:	3b15      	subs	r3, #21
 8005cde:	f023 0303 	bic.w	r3, r3, #3
 8005ce2:	3415      	adds	r4, #21
 8005ce4:	3304      	adds	r3, #4
 8005ce6:	42a6      	cmp	r6, r4
 8005ce8:	bf38      	it	cc
 8005cea:	2304      	movcc	r3, #4
 8005cec:	441d      	add	r5, r3
 8005cee:	445b      	add	r3, fp
 8005cf0:	461e      	mov	r6, r3
 8005cf2:	462c      	mov	r4, r5
 8005cf4:	4544      	cmp	r4, r8
 8005cf6:	d30e      	bcc.n	8005d16 <__mdiff+0xf6>
 8005cf8:	f108 0103 	add.w	r1, r8, #3
 8005cfc:	1b49      	subs	r1, r1, r5
 8005cfe:	f021 0103 	bic.w	r1, r1, #3
 8005d02:	3d03      	subs	r5, #3
 8005d04:	45a8      	cmp	r8, r5
 8005d06:	bf38      	it	cc
 8005d08:	2100      	movcc	r1, #0
 8005d0a:	440b      	add	r3, r1
 8005d0c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005d10:	b199      	cbz	r1, 8005d3a <__mdiff+0x11a>
 8005d12:	6117      	str	r7, [r2, #16]
 8005d14:	e79e      	b.n	8005c54 <__mdiff+0x34>
 8005d16:	46e6      	mov	lr, ip
 8005d18:	f854 1b04 	ldr.w	r1, [r4], #4
 8005d1c:	fa1f fc81 	uxth.w	ip, r1
 8005d20:	44f4      	add	ip, lr
 8005d22:	0c08      	lsrs	r0, r1, #16
 8005d24:	4471      	add	r1, lr
 8005d26:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005d2a:	b289      	uxth	r1, r1
 8005d2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005d30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005d34:	f846 1b04 	str.w	r1, [r6], #4
 8005d38:	e7dc      	b.n	8005cf4 <__mdiff+0xd4>
 8005d3a:	3f01      	subs	r7, #1
 8005d3c:	e7e6      	b.n	8005d0c <__mdiff+0xec>
 8005d3e:	bf00      	nop
 8005d40:	08006c72 	.word	0x08006c72
 8005d44:	08006c83 	.word	0x08006c83

08005d48 <__d2b>:
 8005d48:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	4690      	mov	r8, r2
 8005d50:	4699      	mov	r9, r3
 8005d52:	9e08      	ldr	r6, [sp, #32]
 8005d54:	f7ff fcd6 	bl	8005704 <_Balloc>
 8005d58:	4604      	mov	r4, r0
 8005d5a:	b930      	cbnz	r0, 8005d6a <__d2b+0x22>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	f240 310f 	movw	r1, #783	@ 0x30f
 8005d62:	4b23      	ldr	r3, [pc, #140]	@ (8005df0 <__d2b+0xa8>)
 8005d64:	4823      	ldr	r0, [pc, #140]	@ (8005df4 <__d2b+0xac>)
 8005d66:	f000 fad1 	bl	800630c <__assert_func>
 8005d6a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005d6e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005d72:	b10d      	cbz	r5, 8005d78 <__d2b+0x30>
 8005d74:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d78:	9301      	str	r3, [sp, #4]
 8005d7a:	f1b8 0300 	subs.w	r3, r8, #0
 8005d7e:	d024      	beq.n	8005dca <__d2b+0x82>
 8005d80:	4668      	mov	r0, sp
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	f7ff fd85 	bl	8005892 <__lo0bits>
 8005d88:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005d8c:	b1d8      	cbz	r0, 8005dc6 <__d2b+0x7e>
 8005d8e:	f1c0 0320 	rsb	r3, r0, #32
 8005d92:	fa02 f303 	lsl.w	r3, r2, r3
 8005d96:	430b      	orrs	r3, r1
 8005d98:	40c2      	lsrs	r2, r0
 8005d9a:	6163      	str	r3, [r4, #20]
 8005d9c:	9201      	str	r2, [sp, #4]
 8005d9e:	9b01      	ldr	r3, [sp, #4]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	bf0c      	ite	eq
 8005da4:	2201      	moveq	r2, #1
 8005da6:	2202      	movne	r2, #2
 8005da8:	61a3      	str	r3, [r4, #24]
 8005daa:	6122      	str	r2, [r4, #16]
 8005dac:	b1ad      	cbz	r5, 8005dda <__d2b+0x92>
 8005dae:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005db2:	4405      	add	r5, r0
 8005db4:	6035      	str	r5, [r6, #0]
 8005db6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005dba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dbc:	6018      	str	r0, [r3, #0]
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	b002      	add	sp, #8
 8005dc2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005dc6:	6161      	str	r1, [r4, #20]
 8005dc8:	e7e9      	b.n	8005d9e <__d2b+0x56>
 8005dca:	a801      	add	r0, sp, #4
 8005dcc:	f7ff fd61 	bl	8005892 <__lo0bits>
 8005dd0:	9b01      	ldr	r3, [sp, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	6163      	str	r3, [r4, #20]
 8005dd6:	3020      	adds	r0, #32
 8005dd8:	e7e7      	b.n	8005daa <__d2b+0x62>
 8005dda:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005dde:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005de2:	6030      	str	r0, [r6, #0]
 8005de4:	6918      	ldr	r0, [r3, #16]
 8005de6:	f7ff fd35 	bl	8005854 <__hi0bits>
 8005dea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005dee:	e7e4      	b.n	8005dba <__d2b+0x72>
 8005df0:	08006c72 	.word	0x08006c72
 8005df4:	08006c83 	.word	0x08006c83

08005df8 <__sfputc_r>:
 8005df8:	6893      	ldr	r3, [r2, #8]
 8005dfa:	b410      	push	{r4}
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	6093      	str	r3, [r2, #8]
 8005e02:	da07      	bge.n	8005e14 <__sfputc_r+0x1c>
 8005e04:	6994      	ldr	r4, [r2, #24]
 8005e06:	42a3      	cmp	r3, r4
 8005e08:	db01      	blt.n	8005e0e <__sfputc_r+0x16>
 8005e0a:	290a      	cmp	r1, #10
 8005e0c:	d102      	bne.n	8005e14 <__sfputc_r+0x1c>
 8005e0e:	bc10      	pop	{r4}
 8005e10:	f7fe bbf9 	b.w	8004606 <__swbuf_r>
 8005e14:	6813      	ldr	r3, [r2, #0]
 8005e16:	1c58      	adds	r0, r3, #1
 8005e18:	6010      	str	r0, [r2, #0]
 8005e1a:	7019      	strb	r1, [r3, #0]
 8005e1c:	4608      	mov	r0, r1
 8005e1e:	bc10      	pop	{r4}
 8005e20:	4770      	bx	lr

08005e22 <__sfputs_r>:
 8005e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e24:	4606      	mov	r6, r0
 8005e26:	460f      	mov	r7, r1
 8005e28:	4614      	mov	r4, r2
 8005e2a:	18d5      	adds	r5, r2, r3
 8005e2c:	42ac      	cmp	r4, r5
 8005e2e:	d101      	bne.n	8005e34 <__sfputs_r+0x12>
 8005e30:	2000      	movs	r0, #0
 8005e32:	e007      	b.n	8005e44 <__sfputs_r+0x22>
 8005e34:	463a      	mov	r2, r7
 8005e36:	4630      	mov	r0, r6
 8005e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e3c:	f7ff ffdc 	bl	8005df8 <__sfputc_r>
 8005e40:	1c43      	adds	r3, r0, #1
 8005e42:	d1f3      	bne.n	8005e2c <__sfputs_r+0xa>
 8005e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e48 <_vfiprintf_r>:
 8005e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e4c:	460d      	mov	r5, r1
 8005e4e:	4614      	mov	r4, r2
 8005e50:	4698      	mov	r8, r3
 8005e52:	4606      	mov	r6, r0
 8005e54:	b09d      	sub	sp, #116	@ 0x74
 8005e56:	b118      	cbz	r0, 8005e60 <_vfiprintf_r+0x18>
 8005e58:	6a03      	ldr	r3, [r0, #32]
 8005e5a:	b90b      	cbnz	r3, 8005e60 <_vfiprintf_r+0x18>
 8005e5c:	f7fe faea 	bl	8004434 <__sinit>
 8005e60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e62:	07d9      	lsls	r1, r3, #31
 8005e64:	d405      	bmi.n	8005e72 <_vfiprintf_r+0x2a>
 8005e66:	89ab      	ldrh	r3, [r5, #12]
 8005e68:	059a      	lsls	r2, r3, #22
 8005e6a:	d402      	bmi.n	8005e72 <_vfiprintf_r+0x2a>
 8005e6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e6e:	f7fe fcdc 	bl	800482a <__retarget_lock_acquire_recursive>
 8005e72:	89ab      	ldrh	r3, [r5, #12]
 8005e74:	071b      	lsls	r3, r3, #28
 8005e76:	d501      	bpl.n	8005e7c <_vfiprintf_r+0x34>
 8005e78:	692b      	ldr	r3, [r5, #16]
 8005e7a:	b99b      	cbnz	r3, 8005ea4 <_vfiprintf_r+0x5c>
 8005e7c:	4629      	mov	r1, r5
 8005e7e:	4630      	mov	r0, r6
 8005e80:	f7fe fc00 	bl	8004684 <__swsetup_r>
 8005e84:	b170      	cbz	r0, 8005ea4 <_vfiprintf_r+0x5c>
 8005e86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e88:	07dc      	lsls	r4, r3, #31
 8005e8a:	d504      	bpl.n	8005e96 <_vfiprintf_r+0x4e>
 8005e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e90:	b01d      	add	sp, #116	@ 0x74
 8005e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e96:	89ab      	ldrh	r3, [r5, #12]
 8005e98:	0598      	lsls	r0, r3, #22
 8005e9a:	d4f7      	bmi.n	8005e8c <_vfiprintf_r+0x44>
 8005e9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e9e:	f7fe fcc5 	bl	800482c <__retarget_lock_release_recursive>
 8005ea2:	e7f3      	b.n	8005e8c <_vfiprintf_r+0x44>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ea8:	2320      	movs	r3, #32
 8005eaa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005eae:	2330      	movs	r3, #48	@ 0x30
 8005eb0:	f04f 0901 	mov.w	r9, #1
 8005eb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005eb8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006064 <_vfiprintf_r+0x21c>
 8005ebc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ec0:	4623      	mov	r3, r4
 8005ec2:	469a      	mov	sl, r3
 8005ec4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ec8:	b10a      	cbz	r2, 8005ece <_vfiprintf_r+0x86>
 8005eca:	2a25      	cmp	r2, #37	@ 0x25
 8005ecc:	d1f9      	bne.n	8005ec2 <_vfiprintf_r+0x7a>
 8005ece:	ebba 0b04 	subs.w	fp, sl, r4
 8005ed2:	d00b      	beq.n	8005eec <_vfiprintf_r+0xa4>
 8005ed4:	465b      	mov	r3, fp
 8005ed6:	4622      	mov	r2, r4
 8005ed8:	4629      	mov	r1, r5
 8005eda:	4630      	mov	r0, r6
 8005edc:	f7ff ffa1 	bl	8005e22 <__sfputs_r>
 8005ee0:	3001      	adds	r0, #1
 8005ee2:	f000 80a7 	beq.w	8006034 <_vfiprintf_r+0x1ec>
 8005ee6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ee8:	445a      	add	r2, fp
 8005eea:	9209      	str	r2, [sp, #36]	@ 0x24
 8005eec:	f89a 3000 	ldrb.w	r3, [sl]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 809f 	beq.w	8006034 <_vfiprintf_r+0x1ec>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8005efc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f00:	f10a 0a01 	add.w	sl, sl, #1
 8005f04:	9304      	str	r3, [sp, #16]
 8005f06:	9307      	str	r3, [sp, #28]
 8005f08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f0e:	4654      	mov	r4, sl
 8005f10:	2205      	movs	r2, #5
 8005f12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f16:	4853      	ldr	r0, [pc, #332]	@ (8006064 <_vfiprintf_r+0x21c>)
 8005f18:	f7fe fc89 	bl	800482e <memchr>
 8005f1c:	9a04      	ldr	r2, [sp, #16]
 8005f1e:	b9d8      	cbnz	r0, 8005f58 <_vfiprintf_r+0x110>
 8005f20:	06d1      	lsls	r1, r2, #27
 8005f22:	bf44      	itt	mi
 8005f24:	2320      	movmi	r3, #32
 8005f26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f2a:	0713      	lsls	r3, r2, #28
 8005f2c:	bf44      	itt	mi
 8005f2e:	232b      	movmi	r3, #43	@ 0x2b
 8005f30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f34:	f89a 3000 	ldrb.w	r3, [sl]
 8005f38:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f3a:	d015      	beq.n	8005f68 <_vfiprintf_r+0x120>
 8005f3c:	4654      	mov	r4, sl
 8005f3e:	2000      	movs	r0, #0
 8005f40:	f04f 0c0a 	mov.w	ip, #10
 8005f44:	9a07      	ldr	r2, [sp, #28]
 8005f46:	4621      	mov	r1, r4
 8005f48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f4c:	3b30      	subs	r3, #48	@ 0x30
 8005f4e:	2b09      	cmp	r3, #9
 8005f50:	d94b      	bls.n	8005fea <_vfiprintf_r+0x1a2>
 8005f52:	b1b0      	cbz	r0, 8005f82 <_vfiprintf_r+0x13a>
 8005f54:	9207      	str	r2, [sp, #28]
 8005f56:	e014      	b.n	8005f82 <_vfiprintf_r+0x13a>
 8005f58:	eba0 0308 	sub.w	r3, r0, r8
 8005f5c:	fa09 f303 	lsl.w	r3, r9, r3
 8005f60:	4313      	orrs	r3, r2
 8005f62:	46a2      	mov	sl, r4
 8005f64:	9304      	str	r3, [sp, #16]
 8005f66:	e7d2      	b.n	8005f0e <_vfiprintf_r+0xc6>
 8005f68:	9b03      	ldr	r3, [sp, #12]
 8005f6a:	1d19      	adds	r1, r3, #4
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	9103      	str	r1, [sp, #12]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	bfbb      	ittet	lt
 8005f74:	425b      	neglt	r3, r3
 8005f76:	f042 0202 	orrlt.w	r2, r2, #2
 8005f7a:	9307      	strge	r3, [sp, #28]
 8005f7c:	9307      	strlt	r3, [sp, #28]
 8005f7e:	bfb8      	it	lt
 8005f80:	9204      	strlt	r2, [sp, #16]
 8005f82:	7823      	ldrb	r3, [r4, #0]
 8005f84:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f86:	d10a      	bne.n	8005f9e <_vfiprintf_r+0x156>
 8005f88:	7863      	ldrb	r3, [r4, #1]
 8005f8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f8c:	d132      	bne.n	8005ff4 <_vfiprintf_r+0x1ac>
 8005f8e:	9b03      	ldr	r3, [sp, #12]
 8005f90:	3402      	adds	r4, #2
 8005f92:	1d1a      	adds	r2, r3, #4
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	9203      	str	r2, [sp, #12]
 8005f98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f9c:	9305      	str	r3, [sp, #20]
 8005f9e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006068 <_vfiprintf_r+0x220>
 8005fa2:	2203      	movs	r2, #3
 8005fa4:	4650      	mov	r0, sl
 8005fa6:	7821      	ldrb	r1, [r4, #0]
 8005fa8:	f7fe fc41 	bl	800482e <memchr>
 8005fac:	b138      	cbz	r0, 8005fbe <_vfiprintf_r+0x176>
 8005fae:	2240      	movs	r2, #64	@ 0x40
 8005fb0:	9b04      	ldr	r3, [sp, #16]
 8005fb2:	eba0 000a 	sub.w	r0, r0, sl
 8005fb6:	4082      	lsls	r2, r0
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	3401      	adds	r4, #1
 8005fbc:	9304      	str	r3, [sp, #16]
 8005fbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fc2:	2206      	movs	r2, #6
 8005fc4:	4829      	ldr	r0, [pc, #164]	@ (800606c <_vfiprintf_r+0x224>)
 8005fc6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005fca:	f7fe fc30 	bl	800482e <memchr>
 8005fce:	2800      	cmp	r0, #0
 8005fd0:	d03f      	beq.n	8006052 <_vfiprintf_r+0x20a>
 8005fd2:	4b27      	ldr	r3, [pc, #156]	@ (8006070 <_vfiprintf_r+0x228>)
 8005fd4:	bb1b      	cbnz	r3, 800601e <_vfiprintf_r+0x1d6>
 8005fd6:	9b03      	ldr	r3, [sp, #12]
 8005fd8:	3307      	adds	r3, #7
 8005fda:	f023 0307 	bic.w	r3, r3, #7
 8005fde:	3308      	adds	r3, #8
 8005fe0:	9303      	str	r3, [sp, #12]
 8005fe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fe4:	443b      	add	r3, r7
 8005fe6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fe8:	e76a      	b.n	8005ec0 <_vfiprintf_r+0x78>
 8005fea:	460c      	mov	r4, r1
 8005fec:	2001      	movs	r0, #1
 8005fee:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ff2:	e7a8      	b.n	8005f46 <_vfiprintf_r+0xfe>
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	f04f 0c0a 	mov.w	ip, #10
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	3401      	adds	r4, #1
 8005ffe:	9305      	str	r3, [sp, #20]
 8006000:	4620      	mov	r0, r4
 8006002:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006006:	3a30      	subs	r2, #48	@ 0x30
 8006008:	2a09      	cmp	r2, #9
 800600a:	d903      	bls.n	8006014 <_vfiprintf_r+0x1cc>
 800600c:	2b00      	cmp	r3, #0
 800600e:	d0c6      	beq.n	8005f9e <_vfiprintf_r+0x156>
 8006010:	9105      	str	r1, [sp, #20]
 8006012:	e7c4      	b.n	8005f9e <_vfiprintf_r+0x156>
 8006014:	4604      	mov	r4, r0
 8006016:	2301      	movs	r3, #1
 8006018:	fb0c 2101 	mla	r1, ip, r1, r2
 800601c:	e7f0      	b.n	8006000 <_vfiprintf_r+0x1b8>
 800601e:	ab03      	add	r3, sp, #12
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	462a      	mov	r2, r5
 8006024:	4630      	mov	r0, r6
 8006026:	4b13      	ldr	r3, [pc, #76]	@ (8006074 <_vfiprintf_r+0x22c>)
 8006028:	a904      	add	r1, sp, #16
 800602a:	f7fd fdbb 	bl	8003ba4 <_printf_float>
 800602e:	4607      	mov	r7, r0
 8006030:	1c78      	adds	r0, r7, #1
 8006032:	d1d6      	bne.n	8005fe2 <_vfiprintf_r+0x19a>
 8006034:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006036:	07d9      	lsls	r1, r3, #31
 8006038:	d405      	bmi.n	8006046 <_vfiprintf_r+0x1fe>
 800603a:	89ab      	ldrh	r3, [r5, #12]
 800603c:	059a      	lsls	r2, r3, #22
 800603e:	d402      	bmi.n	8006046 <_vfiprintf_r+0x1fe>
 8006040:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006042:	f7fe fbf3 	bl	800482c <__retarget_lock_release_recursive>
 8006046:	89ab      	ldrh	r3, [r5, #12]
 8006048:	065b      	lsls	r3, r3, #25
 800604a:	f53f af1f 	bmi.w	8005e8c <_vfiprintf_r+0x44>
 800604e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006050:	e71e      	b.n	8005e90 <_vfiprintf_r+0x48>
 8006052:	ab03      	add	r3, sp, #12
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	462a      	mov	r2, r5
 8006058:	4630      	mov	r0, r6
 800605a:	4b06      	ldr	r3, [pc, #24]	@ (8006074 <_vfiprintf_r+0x22c>)
 800605c:	a904      	add	r1, sp, #16
 800605e:	f7fe f83f 	bl	80040e0 <_printf_i>
 8006062:	e7e4      	b.n	800602e <_vfiprintf_r+0x1e6>
 8006064:	08006cdc 	.word	0x08006cdc
 8006068:	08006ce2 	.word	0x08006ce2
 800606c:	08006ce6 	.word	0x08006ce6
 8006070:	08003ba5 	.word	0x08003ba5
 8006074:	08005e23 	.word	0x08005e23

08006078 <__sflush_r>:
 8006078:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800607c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800607e:	0716      	lsls	r6, r2, #28
 8006080:	4605      	mov	r5, r0
 8006082:	460c      	mov	r4, r1
 8006084:	d454      	bmi.n	8006130 <__sflush_r+0xb8>
 8006086:	684b      	ldr	r3, [r1, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	dc02      	bgt.n	8006092 <__sflush_r+0x1a>
 800608c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800608e:	2b00      	cmp	r3, #0
 8006090:	dd48      	ble.n	8006124 <__sflush_r+0xac>
 8006092:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006094:	2e00      	cmp	r6, #0
 8006096:	d045      	beq.n	8006124 <__sflush_r+0xac>
 8006098:	2300      	movs	r3, #0
 800609a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800609e:	682f      	ldr	r7, [r5, #0]
 80060a0:	6a21      	ldr	r1, [r4, #32]
 80060a2:	602b      	str	r3, [r5, #0]
 80060a4:	d030      	beq.n	8006108 <__sflush_r+0x90>
 80060a6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80060a8:	89a3      	ldrh	r3, [r4, #12]
 80060aa:	0759      	lsls	r1, r3, #29
 80060ac:	d505      	bpl.n	80060ba <__sflush_r+0x42>
 80060ae:	6863      	ldr	r3, [r4, #4]
 80060b0:	1ad2      	subs	r2, r2, r3
 80060b2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80060b4:	b10b      	cbz	r3, 80060ba <__sflush_r+0x42>
 80060b6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80060b8:	1ad2      	subs	r2, r2, r3
 80060ba:	2300      	movs	r3, #0
 80060bc:	4628      	mov	r0, r5
 80060be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80060c0:	6a21      	ldr	r1, [r4, #32]
 80060c2:	47b0      	blx	r6
 80060c4:	1c43      	adds	r3, r0, #1
 80060c6:	89a3      	ldrh	r3, [r4, #12]
 80060c8:	d106      	bne.n	80060d8 <__sflush_r+0x60>
 80060ca:	6829      	ldr	r1, [r5, #0]
 80060cc:	291d      	cmp	r1, #29
 80060ce:	d82b      	bhi.n	8006128 <__sflush_r+0xb0>
 80060d0:	4a28      	ldr	r2, [pc, #160]	@ (8006174 <__sflush_r+0xfc>)
 80060d2:	40ca      	lsrs	r2, r1
 80060d4:	07d6      	lsls	r6, r2, #31
 80060d6:	d527      	bpl.n	8006128 <__sflush_r+0xb0>
 80060d8:	2200      	movs	r2, #0
 80060da:	6062      	str	r2, [r4, #4]
 80060dc:	6922      	ldr	r2, [r4, #16]
 80060de:	04d9      	lsls	r1, r3, #19
 80060e0:	6022      	str	r2, [r4, #0]
 80060e2:	d504      	bpl.n	80060ee <__sflush_r+0x76>
 80060e4:	1c42      	adds	r2, r0, #1
 80060e6:	d101      	bne.n	80060ec <__sflush_r+0x74>
 80060e8:	682b      	ldr	r3, [r5, #0]
 80060ea:	b903      	cbnz	r3, 80060ee <__sflush_r+0x76>
 80060ec:	6560      	str	r0, [r4, #84]	@ 0x54
 80060ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060f0:	602f      	str	r7, [r5, #0]
 80060f2:	b1b9      	cbz	r1, 8006124 <__sflush_r+0xac>
 80060f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80060f8:	4299      	cmp	r1, r3
 80060fa:	d002      	beq.n	8006102 <__sflush_r+0x8a>
 80060fc:	4628      	mov	r0, r5
 80060fe:	f7ff fa03 	bl	8005508 <_free_r>
 8006102:	2300      	movs	r3, #0
 8006104:	6363      	str	r3, [r4, #52]	@ 0x34
 8006106:	e00d      	b.n	8006124 <__sflush_r+0xac>
 8006108:	2301      	movs	r3, #1
 800610a:	4628      	mov	r0, r5
 800610c:	47b0      	blx	r6
 800610e:	4602      	mov	r2, r0
 8006110:	1c50      	adds	r0, r2, #1
 8006112:	d1c9      	bne.n	80060a8 <__sflush_r+0x30>
 8006114:	682b      	ldr	r3, [r5, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d0c6      	beq.n	80060a8 <__sflush_r+0x30>
 800611a:	2b1d      	cmp	r3, #29
 800611c:	d001      	beq.n	8006122 <__sflush_r+0xaa>
 800611e:	2b16      	cmp	r3, #22
 8006120:	d11d      	bne.n	800615e <__sflush_r+0xe6>
 8006122:	602f      	str	r7, [r5, #0]
 8006124:	2000      	movs	r0, #0
 8006126:	e021      	b.n	800616c <__sflush_r+0xf4>
 8006128:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800612c:	b21b      	sxth	r3, r3
 800612e:	e01a      	b.n	8006166 <__sflush_r+0xee>
 8006130:	690f      	ldr	r7, [r1, #16]
 8006132:	2f00      	cmp	r7, #0
 8006134:	d0f6      	beq.n	8006124 <__sflush_r+0xac>
 8006136:	0793      	lsls	r3, r2, #30
 8006138:	bf18      	it	ne
 800613a:	2300      	movne	r3, #0
 800613c:	680e      	ldr	r6, [r1, #0]
 800613e:	bf08      	it	eq
 8006140:	694b      	ldreq	r3, [r1, #20]
 8006142:	1bf6      	subs	r6, r6, r7
 8006144:	600f      	str	r7, [r1, #0]
 8006146:	608b      	str	r3, [r1, #8]
 8006148:	2e00      	cmp	r6, #0
 800614a:	ddeb      	ble.n	8006124 <__sflush_r+0xac>
 800614c:	4633      	mov	r3, r6
 800614e:	463a      	mov	r2, r7
 8006150:	4628      	mov	r0, r5
 8006152:	6a21      	ldr	r1, [r4, #32]
 8006154:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006158:	47e0      	blx	ip
 800615a:	2800      	cmp	r0, #0
 800615c:	dc07      	bgt.n	800616e <__sflush_r+0xf6>
 800615e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006162:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006166:	f04f 30ff 	mov.w	r0, #4294967295
 800616a:	81a3      	strh	r3, [r4, #12]
 800616c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800616e:	4407      	add	r7, r0
 8006170:	1a36      	subs	r6, r6, r0
 8006172:	e7e9      	b.n	8006148 <__sflush_r+0xd0>
 8006174:	20400001 	.word	0x20400001

08006178 <_fflush_r>:
 8006178:	b538      	push	{r3, r4, r5, lr}
 800617a:	690b      	ldr	r3, [r1, #16]
 800617c:	4605      	mov	r5, r0
 800617e:	460c      	mov	r4, r1
 8006180:	b913      	cbnz	r3, 8006188 <_fflush_r+0x10>
 8006182:	2500      	movs	r5, #0
 8006184:	4628      	mov	r0, r5
 8006186:	bd38      	pop	{r3, r4, r5, pc}
 8006188:	b118      	cbz	r0, 8006192 <_fflush_r+0x1a>
 800618a:	6a03      	ldr	r3, [r0, #32]
 800618c:	b90b      	cbnz	r3, 8006192 <_fflush_r+0x1a>
 800618e:	f7fe f951 	bl	8004434 <__sinit>
 8006192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d0f3      	beq.n	8006182 <_fflush_r+0xa>
 800619a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800619c:	07d0      	lsls	r0, r2, #31
 800619e:	d404      	bmi.n	80061aa <_fflush_r+0x32>
 80061a0:	0599      	lsls	r1, r3, #22
 80061a2:	d402      	bmi.n	80061aa <_fflush_r+0x32>
 80061a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061a6:	f7fe fb40 	bl	800482a <__retarget_lock_acquire_recursive>
 80061aa:	4628      	mov	r0, r5
 80061ac:	4621      	mov	r1, r4
 80061ae:	f7ff ff63 	bl	8006078 <__sflush_r>
 80061b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80061b4:	4605      	mov	r5, r0
 80061b6:	07da      	lsls	r2, r3, #31
 80061b8:	d4e4      	bmi.n	8006184 <_fflush_r+0xc>
 80061ba:	89a3      	ldrh	r3, [r4, #12]
 80061bc:	059b      	lsls	r3, r3, #22
 80061be:	d4e1      	bmi.n	8006184 <_fflush_r+0xc>
 80061c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061c2:	f7fe fb33 	bl	800482c <__retarget_lock_release_recursive>
 80061c6:	e7dd      	b.n	8006184 <_fflush_r+0xc>

080061c8 <__swhatbuf_r>:
 80061c8:	b570      	push	{r4, r5, r6, lr}
 80061ca:	460c      	mov	r4, r1
 80061cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061d0:	4615      	mov	r5, r2
 80061d2:	2900      	cmp	r1, #0
 80061d4:	461e      	mov	r6, r3
 80061d6:	b096      	sub	sp, #88	@ 0x58
 80061d8:	da0c      	bge.n	80061f4 <__swhatbuf_r+0x2c>
 80061da:	89a3      	ldrh	r3, [r4, #12]
 80061dc:	2100      	movs	r1, #0
 80061de:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80061e2:	bf14      	ite	ne
 80061e4:	2340      	movne	r3, #64	@ 0x40
 80061e6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80061ea:	2000      	movs	r0, #0
 80061ec:	6031      	str	r1, [r6, #0]
 80061ee:	602b      	str	r3, [r5, #0]
 80061f0:	b016      	add	sp, #88	@ 0x58
 80061f2:	bd70      	pop	{r4, r5, r6, pc}
 80061f4:	466a      	mov	r2, sp
 80061f6:	f000 f849 	bl	800628c <_fstat_r>
 80061fa:	2800      	cmp	r0, #0
 80061fc:	dbed      	blt.n	80061da <__swhatbuf_r+0x12>
 80061fe:	9901      	ldr	r1, [sp, #4]
 8006200:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006204:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006208:	4259      	negs	r1, r3
 800620a:	4159      	adcs	r1, r3
 800620c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006210:	e7eb      	b.n	80061ea <__swhatbuf_r+0x22>

08006212 <__smakebuf_r>:
 8006212:	898b      	ldrh	r3, [r1, #12]
 8006214:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006216:	079d      	lsls	r5, r3, #30
 8006218:	4606      	mov	r6, r0
 800621a:	460c      	mov	r4, r1
 800621c:	d507      	bpl.n	800622e <__smakebuf_r+0x1c>
 800621e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006222:	6023      	str	r3, [r4, #0]
 8006224:	6123      	str	r3, [r4, #16]
 8006226:	2301      	movs	r3, #1
 8006228:	6163      	str	r3, [r4, #20]
 800622a:	b003      	add	sp, #12
 800622c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800622e:	466a      	mov	r2, sp
 8006230:	ab01      	add	r3, sp, #4
 8006232:	f7ff ffc9 	bl	80061c8 <__swhatbuf_r>
 8006236:	9f00      	ldr	r7, [sp, #0]
 8006238:	4605      	mov	r5, r0
 800623a:	4639      	mov	r1, r7
 800623c:	4630      	mov	r0, r6
 800623e:	f7ff f9d5 	bl	80055ec <_malloc_r>
 8006242:	b948      	cbnz	r0, 8006258 <__smakebuf_r+0x46>
 8006244:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006248:	059a      	lsls	r2, r3, #22
 800624a:	d4ee      	bmi.n	800622a <__smakebuf_r+0x18>
 800624c:	f023 0303 	bic.w	r3, r3, #3
 8006250:	f043 0302 	orr.w	r3, r3, #2
 8006254:	81a3      	strh	r3, [r4, #12]
 8006256:	e7e2      	b.n	800621e <__smakebuf_r+0xc>
 8006258:	89a3      	ldrh	r3, [r4, #12]
 800625a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800625e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006262:	81a3      	strh	r3, [r4, #12]
 8006264:	9b01      	ldr	r3, [sp, #4]
 8006266:	6020      	str	r0, [r4, #0]
 8006268:	b15b      	cbz	r3, 8006282 <__smakebuf_r+0x70>
 800626a:	4630      	mov	r0, r6
 800626c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006270:	f000 f81e 	bl	80062b0 <_isatty_r>
 8006274:	b128      	cbz	r0, 8006282 <__smakebuf_r+0x70>
 8006276:	89a3      	ldrh	r3, [r4, #12]
 8006278:	f023 0303 	bic.w	r3, r3, #3
 800627c:	f043 0301 	orr.w	r3, r3, #1
 8006280:	81a3      	strh	r3, [r4, #12]
 8006282:	89a3      	ldrh	r3, [r4, #12]
 8006284:	431d      	orrs	r5, r3
 8006286:	81a5      	strh	r5, [r4, #12]
 8006288:	e7cf      	b.n	800622a <__smakebuf_r+0x18>
	...

0800628c <_fstat_r>:
 800628c:	b538      	push	{r3, r4, r5, lr}
 800628e:	2300      	movs	r3, #0
 8006290:	4d06      	ldr	r5, [pc, #24]	@ (80062ac <_fstat_r+0x20>)
 8006292:	4604      	mov	r4, r0
 8006294:	4608      	mov	r0, r1
 8006296:	4611      	mov	r1, r2
 8006298:	602b      	str	r3, [r5, #0]
 800629a:	f7fb fc0d 	bl	8001ab8 <_fstat>
 800629e:	1c43      	adds	r3, r0, #1
 80062a0:	d102      	bne.n	80062a8 <_fstat_r+0x1c>
 80062a2:	682b      	ldr	r3, [r5, #0]
 80062a4:	b103      	cbz	r3, 80062a8 <_fstat_r+0x1c>
 80062a6:	6023      	str	r3, [r4, #0]
 80062a8:	bd38      	pop	{r3, r4, r5, pc}
 80062aa:	bf00      	nop
 80062ac:	2000048c 	.word	0x2000048c

080062b0 <_isatty_r>:
 80062b0:	b538      	push	{r3, r4, r5, lr}
 80062b2:	2300      	movs	r3, #0
 80062b4:	4d05      	ldr	r5, [pc, #20]	@ (80062cc <_isatty_r+0x1c>)
 80062b6:	4604      	mov	r4, r0
 80062b8:	4608      	mov	r0, r1
 80062ba:	602b      	str	r3, [r5, #0]
 80062bc:	f7fb fc0b 	bl	8001ad6 <_isatty>
 80062c0:	1c43      	adds	r3, r0, #1
 80062c2:	d102      	bne.n	80062ca <_isatty_r+0x1a>
 80062c4:	682b      	ldr	r3, [r5, #0]
 80062c6:	b103      	cbz	r3, 80062ca <_isatty_r+0x1a>
 80062c8:	6023      	str	r3, [r4, #0]
 80062ca:	bd38      	pop	{r3, r4, r5, pc}
 80062cc:	2000048c 	.word	0x2000048c

080062d0 <_sbrk_r>:
 80062d0:	b538      	push	{r3, r4, r5, lr}
 80062d2:	2300      	movs	r3, #0
 80062d4:	4d05      	ldr	r5, [pc, #20]	@ (80062ec <_sbrk_r+0x1c>)
 80062d6:	4604      	mov	r4, r0
 80062d8:	4608      	mov	r0, r1
 80062da:	602b      	str	r3, [r5, #0]
 80062dc:	f7fb fc12 	bl	8001b04 <_sbrk>
 80062e0:	1c43      	adds	r3, r0, #1
 80062e2:	d102      	bne.n	80062ea <_sbrk_r+0x1a>
 80062e4:	682b      	ldr	r3, [r5, #0]
 80062e6:	b103      	cbz	r3, 80062ea <_sbrk_r+0x1a>
 80062e8:	6023      	str	r3, [r4, #0]
 80062ea:	bd38      	pop	{r3, r4, r5, pc}
 80062ec:	2000048c 	.word	0x2000048c

080062f0 <memcpy>:
 80062f0:	440a      	add	r2, r1
 80062f2:	4291      	cmp	r1, r2
 80062f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80062f8:	d100      	bne.n	80062fc <memcpy+0xc>
 80062fa:	4770      	bx	lr
 80062fc:	b510      	push	{r4, lr}
 80062fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006302:	4291      	cmp	r1, r2
 8006304:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006308:	d1f9      	bne.n	80062fe <memcpy+0xe>
 800630a:	bd10      	pop	{r4, pc}

0800630c <__assert_func>:
 800630c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800630e:	4614      	mov	r4, r2
 8006310:	461a      	mov	r2, r3
 8006312:	4b09      	ldr	r3, [pc, #36]	@ (8006338 <__assert_func+0x2c>)
 8006314:	4605      	mov	r5, r0
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68d8      	ldr	r0, [r3, #12]
 800631a:	b14c      	cbz	r4, 8006330 <__assert_func+0x24>
 800631c:	4b07      	ldr	r3, [pc, #28]	@ (800633c <__assert_func+0x30>)
 800631e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006322:	9100      	str	r1, [sp, #0]
 8006324:	462b      	mov	r3, r5
 8006326:	4906      	ldr	r1, [pc, #24]	@ (8006340 <__assert_func+0x34>)
 8006328:	f000 f842 	bl	80063b0 <fiprintf>
 800632c:	f000 f852 	bl	80063d4 <abort>
 8006330:	4b04      	ldr	r3, [pc, #16]	@ (8006344 <__assert_func+0x38>)
 8006332:	461c      	mov	r4, r3
 8006334:	e7f3      	b.n	800631e <__assert_func+0x12>
 8006336:	bf00      	nop
 8006338:	200000a8 	.word	0x200000a8
 800633c:	08006cf7 	.word	0x08006cf7
 8006340:	08006d04 	.word	0x08006d04
 8006344:	08006d32 	.word	0x08006d32

08006348 <_calloc_r>:
 8006348:	b570      	push	{r4, r5, r6, lr}
 800634a:	fba1 5402 	umull	r5, r4, r1, r2
 800634e:	b934      	cbnz	r4, 800635e <_calloc_r+0x16>
 8006350:	4629      	mov	r1, r5
 8006352:	f7ff f94b 	bl	80055ec <_malloc_r>
 8006356:	4606      	mov	r6, r0
 8006358:	b928      	cbnz	r0, 8006366 <_calloc_r+0x1e>
 800635a:	4630      	mov	r0, r6
 800635c:	bd70      	pop	{r4, r5, r6, pc}
 800635e:	220c      	movs	r2, #12
 8006360:	2600      	movs	r6, #0
 8006362:	6002      	str	r2, [r0, #0]
 8006364:	e7f9      	b.n	800635a <_calloc_r+0x12>
 8006366:	462a      	mov	r2, r5
 8006368:	4621      	mov	r1, r4
 800636a:	f7fe f9e1 	bl	8004730 <memset>
 800636e:	e7f4      	b.n	800635a <_calloc_r+0x12>

08006370 <__ascii_mbtowc>:
 8006370:	b082      	sub	sp, #8
 8006372:	b901      	cbnz	r1, 8006376 <__ascii_mbtowc+0x6>
 8006374:	a901      	add	r1, sp, #4
 8006376:	b142      	cbz	r2, 800638a <__ascii_mbtowc+0x1a>
 8006378:	b14b      	cbz	r3, 800638e <__ascii_mbtowc+0x1e>
 800637a:	7813      	ldrb	r3, [r2, #0]
 800637c:	600b      	str	r3, [r1, #0]
 800637e:	7812      	ldrb	r2, [r2, #0]
 8006380:	1e10      	subs	r0, r2, #0
 8006382:	bf18      	it	ne
 8006384:	2001      	movne	r0, #1
 8006386:	b002      	add	sp, #8
 8006388:	4770      	bx	lr
 800638a:	4610      	mov	r0, r2
 800638c:	e7fb      	b.n	8006386 <__ascii_mbtowc+0x16>
 800638e:	f06f 0001 	mvn.w	r0, #1
 8006392:	e7f8      	b.n	8006386 <__ascii_mbtowc+0x16>

08006394 <__ascii_wctomb>:
 8006394:	4603      	mov	r3, r0
 8006396:	4608      	mov	r0, r1
 8006398:	b141      	cbz	r1, 80063ac <__ascii_wctomb+0x18>
 800639a:	2aff      	cmp	r2, #255	@ 0xff
 800639c:	d904      	bls.n	80063a8 <__ascii_wctomb+0x14>
 800639e:	228a      	movs	r2, #138	@ 0x8a
 80063a0:	f04f 30ff 	mov.w	r0, #4294967295
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	4770      	bx	lr
 80063a8:	2001      	movs	r0, #1
 80063aa:	700a      	strb	r2, [r1, #0]
 80063ac:	4770      	bx	lr
	...

080063b0 <fiprintf>:
 80063b0:	b40e      	push	{r1, r2, r3}
 80063b2:	b503      	push	{r0, r1, lr}
 80063b4:	4601      	mov	r1, r0
 80063b6:	ab03      	add	r3, sp, #12
 80063b8:	4805      	ldr	r0, [pc, #20]	@ (80063d0 <fiprintf+0x20>)
 80063ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80063be:	6800      	ldr	r0, [r0, #0]
 80063c0:	9301      	str	r3, [sp, #4]
 80063c2:	f7ff fd41 	bl	8005e48 <_vfiprintf_r>
 80063c6:	b002      	add	sp, #8
 80063c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80063cc:	b003      	add	sp, #12
 80063ce:	4770      	bx	lr
 80063d0:	200000a8 	.word	0x200000a8

080063d4 <abort>:
 80063d4:	2006      	movs	r0, #6
 80063d6:	b508      	push	{r3, lr}
 80063d8:	f000 f82c 	bl	8006434 <raise>
 80063dc:	2001      	movs	r0, #1
 80063de:	f7fb fb1c 	bl	8001a1a <_exit>

080063e2 <_raise_r>:
 80063e2:	291f      	cmp	r1, #31
 80063e4:	b538      	push	{r3, r4, r5, lr}
 80063e6:	4605      	mov	r5, r0
 80063e8:	460c      	mov	r4, r1
 80063ea:	d904      	bls.n	80063f6 <_raise_r+0x14>
 80063ec:	2316      	movs	r3, #22
 80063ee:	6003      	str	r3, [r0, #0]
 80063f0:	f04f 30ff 	mov.w	r0, #4294967295
 80063f4:	bd38      	pop	{r3, r4, r5, pc}
 80063f6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80063f8:	b112      	cbz	r2, 8006400 <_raise_r+0x1e>
 80063fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80063fe:	b94b      	cbnz	r3, 8006414 <_raise_r+0x32>
 8006400:	4628      	mov	r0, r5
 8006402:	f000 f831 	bl	8006468 <_getpid_r>
 8006406:	4622      	mov	r2, r4
 8006408:	4601      	mov	r1, r0
 800640a:	4628      	mov	r0, r5
 800640c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006410:	f000 b818 	b.w	8006444 <_kill_r>
 8006414:	2b01      	cmp	r3, #1
 8006416:	d00a      	beq.n	800642e <_raise_r+0x4c>
 8006418:	1c59      	adds	r1, r3, #1
 800641a:	d103      	bne.n	8006424 <_raise_r+0x42>
 800641c:	2316      	movs	r3, #22
 800641e:	6003      	str	r3, [r0, #0]
 8006420:	2001      	movs	r0, #1
 8006422:	e7e7      	b.n	80063f4 <_raise_r+0x12>
 8006424:	2100      	movs	r1, #0
 8006426:	4620      	mov	r0, r4
 8006428:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800642c:	4798      	blx	r3
 800642e:	2000      	movs	r0, #0
 8006430:	e7e0      	b.n	80063f4 <_raise_r+0x12>
	...

08006434 <raise>:
 8006434:	4b02      	ldr	r3, [pc, #8]	@ (8006440 <raise+0xc>)
 8006436:	4601      	mov	r1, r0
 8006438:	6818      	ldr	r0, [r3, #0]
 800643a:	f7ff bfd2 	b.w	80063e2 <_raise_r>
 800643e:	bf00      	nop
 8006440:	200000a8 	.word	0x200000a8

08006444 <_kill_r>:
 8006444:	b538      	push	{r3, r4, r5, lr}
 8006446:	2300      	movs	r3, #0
 8006448:	4d06      	ldr	r5, [pc, #24]	@ (8006464 <_kill_r+0x20>)
 800644a:	4604      	mov	r4, r0
 800644c:	4608      	mov	r0, r1
 800644e:	4611      	mov	r1, r2
 8006450:	602b      	str	r3, [r5, #0]
 8006452:	f7fb fad2 	bl	80019fa <_kill>
 8006456:	1c43      	adds	r3, r0, #1
 8006458:	d102      	bne.n	8006460 <_kill_r+0x1c>
 800645a:	682b      	ldr	r3, [r5, #0]
 800645c:	b103      	cbz	r3, 8006460 <_kill_r+0x1c>
 800645e:	6023      	str	r3, [r4, #0]
 8006460:	bd38      	pop	{r3, r4, r5, pc}
 8006462:	bf00      	nop
 8006464:	2000048c 	.word	0x2000048c

08006468 <_getpid_r>:
 8006468:	f7fb bac0 	b.w	80019ec <_getpid>

0800646c <atan2>:
 800646c:	f000 ba8c 	b.w	8006988 <__ieee754_atan2>

08006470 <sqrt>:
 8006470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006472:	4606      	mov	r6, r0
 8006474:	460f      	mov	r7, r1
 8006476:	f000 f9b3 	bl	80067e0 <__ieee754_sqrt>
 800647a:	4632      	mov	r2, r6
 800647c:	4604      	mov	r4, r0
 800647e:	460d      	mov	r5, r1
 8006480:	463b      	mov	r3, r7
 8006482:	4630      	mov	r0, r6
 8006484:	4639      	mov	r1, r7
 8006486:	f7fa fac1 	bl	8000a0c <__aeabi_dcmpun>
 800648a:	b990      	cbnz	r0, 80064b2 <sqrt+0x42>
 800648c:	2200      	movs	r2, #0
 800648e:	2300      	movs	r3, #0
 8006490:	4630      	mov	r0, r6
 8006492:	4639      	mov	r1, r7
 8006494:	f7fa fa92 	bl	80009bc <__aeabi_dcmplt>
 8006498:	b158      	cbz	r0, 80064b2 <sqrt+0x42>
 800649a:	f7fe f99b 	bl	80047d4 <__errno>
 800649e:	2321      	movs	r3, #33	@ 0x21
 80064a0:	2200      	movs	r2, #0
 80064a2:	6003      	str	r3, [r0, #0]
 80064a4:	2300      	movs	r3, #0
 80064a6:	4610      	mov	r0, r2
 80064a8:	4619      	mov	r1, r3
 80064aa:	f7fa f93f 	bl	800072c <__aeabi_ddiv>
 80064ae:	4604      	mov	r4, r0
 80064b0:	460d      	mov	r5, r1
 80064b2:	4620      	mov	r0, r4
 80064b4:	4629      	mov	r1, r5
 80064b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080064b8 <atan>:
 80064b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064bc:	4bbc      	ldr	r3, [pc, #752]	@ (80067b0 <atan+0x2f8>)
 80064be:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 80064c2:	429e      	cmp	r6, r3
 80064c4:	4604      	mov	r4, r0
 80064c6:	460d      	mov	r5, r1
 80064c8:	468b      	mov	fp, r1
 80064ca:	d918      	bls.n	80064fe <atan+0x46>
 80064cc:	4bb9      	ldr	r3, [pc, #740]	@ (80067b4 <atan+0x2fc>)
 80064ce:	429e      	cmp	r6, r3
 80064d0:	d801      	bhi.n	80064d6 <atan+0x1e>
 80064d2:	d109      	bne.n	80064e8 <atan+0x30>
 80064d4:	b140      	cbz	r0, 80064e8 <atan+0x30>
 80064d6:	4622      	mov	r2, r4
 80064d8:	462b      	mov	r3, r5
 80064da:	4620      	mov	r0, r4
 80064dc:	4629      	mov	r1, r5
 80064de:	f7f9 fe45 	bl	800016c <__adddf3>
 80064e2:	4604      	mov	r4, r0
 80064e4:	460d      	mov	r5, r1
 80064e6:	e006      	b.n	80064f6 <atan+0x3e>
 80064e8:	f1bb 0f00 	cmp.w	fp, #0
 80064ec:	f340 8123 	ble.w	8006736 <atan+0x27e>
 80064f0:	a593      	add	r5, pc, #588	@ (adr r5, 8006740 <atan+0x288>)
 80064f2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80064f6:	4620      	mov	r0, r4
 80064f8:	4629      	mov	r1, r5
 80064fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064fe:	4bae      	ldr	r3, [pc, #696]	@ (80067b8 <atan+0x300>)
 8006500:	429e      	cmp	r6, r3
 8006502:	d811      	bhi.n	8006528 <atan+0x70>
 8006504:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8006508:	429e      	cmp	r6, r3
 800650a:	d80a      	bhi.n	8006522 <atan+0x6a>
 800650c:	a38e      	add	r3, pc, #568	@ (adr r3, 8006748 <atan+0x290>)
 800650e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006512:	f7f9 fe2b 	bl	800016c <__adddf3>
 8006516:	2200      	movs	r2, #0
 8006518:	4ba8      	ldr	r3, [pc, #672]	@ (80067bc <atan+0x304>)
 800651a:	f7fa fa6d 	bl	80009f8 <__aeabi_dcmpgt>
 800651e:	2800      	cmp	r0, #0
 8006520:	d1e9      	bne.n	80064f6 <atan+0x3e>
 8006522:	f04f 3aff 	mov.w	sl, #4294967295
 8006526:	e027      	b.n	8006578 <atan+0xc0>
 8006528:	f000 f956 	bl	80067d8 <fabs>
 800652c:	4ba4      	ldr	r3, [pc, #656]	@ (80067c0 <atan+0x308>)
 800652e:	4604      	mov	r4, r0
 8006530:	429e      	cmp	r6, r3
 8006532:	460d      	mov	r5, r1
 8006534:	f200 80b8 	bhi.w	80066a8 <atan+0x1f0>
 8006538:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800653c:	429e      	cmp	r6, r3
 800653e:	f200 809c 	bhi.w	800667a <atan+0x1c2>
 8006542:	4602      	mov	r2, r0
 8006544:	460b      	mov	r3, r1
 8006546:	f7f9 fe11 	bl	800016c <__adddf3>
 800654a:	2200      	movs	r2, #0
 800654c:	4b9b      	ldr	r3, [pc, #620]	@ (80067bc <atan+0x304>)
 800654e:	f7f9 fe0b 	bl	8000168 <__aeabi_dsub>
 8006552:	2200      	movs	r2, #0
 8006554:	4606      	mov	r6, r0
 8006556:	460f      	mov	r7, r1
 8006558:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800655c:	4620      	mov	r0, r4
 800655e:	4629      	mov	r1, r5
 8006560:	f7f9 fe04 	bl	800016c <__adddf3>
 8006564:	4602      	mov	r2, r0
 8006566:	460b      	mov	r3, r1
 8006568:	4630      	mov	r0, r6
 800656a:	4639      	mov	r1, r7
 800656c:	f7fa f8de 	bl	800072c <__aeabi_ddiv>
 8006570:	f04f 0a00 	mov.w	sl, #0
 8006574:	4604      	mov	r4, r0
 8006576:	460d      	mov	r5, r1
 8006578:	4622      	mov	r2, r4
 800657a:	462b      	mov	r3, r5
 800657c:	4620      	mov	r0, r4
 800657e:	4629      	mov	r1, r5
 8006580:	f7f9 ffaa 	bl	80004d8 <__aeabi_dmul>
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	4680      	mov	r8, r0
 800658a:	4689      	mov	r9, r1
 800658c:	f7f9 ffa4 	bl	80004d8 <__aeabi_dmul>
 8006590:	a36f      	add	r3, pc, #444	@ (adr r3, 8006750 <atan+0x298>)
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	4606      	mov	r6, r0
 8006598:	460f      	mov	r7, r1
 800659a:	f7f9 ff9d 	bl	80004d8 <__aeabi_dmul>
 800659e:	a36e      	add	r3, pc, #440	@ (adr r3, 8006758 <atan+0x2a0>)
 80065a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a4:	f7f9 fde2 	bl	800016c <__adddf3>
 80065a8:	4632      	mov	r2, r6
 80065aa:	463b      	mov	r3, r7
 80065ac:	f7f9 ff94 	bl	80004d8 <__aeabi_dmul>
 80065b0:	a36b      	add	r3, pc, #428	@ (adr r3, 8006760 <atan+0x2a8>)
 80065b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b6:	f7f9 fdd9 	bl	800016c <__adddf3>
 80065ba:	4632      	mov	r2, r6
 80065bc:	463b      	mov	r3, r7
 80065be:	f7f9 ff8b 	bl	80004d8 <__aeabi_dmul>
 80065c2:	a369      	add	r3, pc, #420	@ (adr r3, 8006768 <atan+0x2b0>)
 80065c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c8:	f7f9 fdd0 	bl	800016c <__adddf3>
 80065cc:	4632      	mov	r2, r6
 80065ce:	463b      	mov	r3, r7
 80065d0:	f7f9 ff82 	bl	80004d8 <__aeabi_dmul>
 80065d4:	a366      	add	r3, pc, #408	@ (adr r3, 8006770 <atan+0x2b8>)
 80065d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065da:	f7f9 fdc7 	bl	800016c <__adddf3>
 80065de:	4632      	mov	r2, r6
 80065e0:	463b      	mov	r3, r7
 80065e2:	f7f9 ff79 	bl	80004d8 <__aeabi_dmul>
 80065e6:	a364      	add	r3, pc, #400	@ (adr r3, 8006778 <atan+0x2c0>)
 80065e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ec:	f7f9 fdbe 	bl	800016c <__adddf3>
 80065f0:	4642      	mov	r2, r8
 80065f2:	464b      	mov	r3, r9
 80065f4:	f7f9 ff70 	bl	80004d8 <__aeabi_dmul>
 80065f8:	a361      	add	r3, pc, #388	@ (adr r3, 8006780 <atan+0x2c8>)
 80065fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fe:	4680      	mov	r8, r0
 8006600:	4689      	mov	r9, r1
 8006602:	4630      	mov	r0, r6
 8006604:	4639      	mov	r1, r7
 8006606:	f7f9 ff67 	bl	80004d8 <__aeabi_dmul>
 800660a:	a35f      	add	r3, pc, #380	@ (adr r3, 8006788 <atan+0x2d0>)
 800660c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006610:	f7f9 fdaa 	bl	8000168 <__aeabi_dsub>
 8006614:	4632      	mov	r2, r6
 8006616:	463b      	mov	r3, r7
 8006618:	f7f9 ff5e 	bl	80004d8 <__aeabi_dmul>
 800661c:	a35c      	add	r3, pc, #368	@ (adr r3, 8006790 <atan+0x2d8>)
 800661e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006622:	f7f9 fda1 	bl	8000168 <__aeabi_dsub>
 8006626:	4632      	mov	r2, r6
 8006628:	463b      	mov	r3, r7
 800662a:	f7f9 ff55 	bl	80004d8 <__aeabi_dmul>
 800662e:	a35a      	add	r3, pc, #360	@ (adr r3, 8006798 <atan+0x2e0>)
 8006630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006634:	f7f9 fd98 	bl	8000168 <__aeabi_dsub>
 8006638:	4632      	mov	r2, r6
 800663a:	463b      	mov	r3, r7
 800663c:	f7f9 ff4c 	bl	80004d8 <__aeabi_dmul>
 8006640:	a357      	add	r3, pc, #348	@ (adr r3, 80067a0 <atan+0x2e8>)
 8006642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006646:	f7f9 fd8f 	bl	8000168 <__aeabi_dsub>
 800664a:	4632      	mov	r2, r6
 800664c:	463b      	mov	r3, r7
 800664e:	f7f9 ff43 	bl	80004d8 <__aeabi_dmul>
 8006652:	4602      	mov	r2, r0
 8006654:	460b      	mov	r3, r1
 8006656:	4640      	mov	r0, r8
 8006658:	4649      	mov	r1, r9
 800665a:	f7f9 fd87 	bl	800016c <__adddf3>
 800665e:	4622      	mov	r2, r4
 8006660:	462b      	mov	r3, r5
 8006662:	f7f9 ff39 	bl	80004d8 <__aeabi_dmul>
 8006666:	f1ba 3fff 	cmp.w	sl, #4294967295
 800666a:	4602      	mov	r2, r0
 800666c:	460b      	mov	r3, r1
 800666e:	d144      	bne.n	80066fa <atan+0x242>
 8006670:	4620      	mov	r0, r4
 8006672:	4629      	mov	r1, r5
 8006674:	f7f9 fd78 	bl	8000168 <__aeabi_dsub>
 8006678:	e733      	b.n	80064e2 <atan+0x2a>
 800667a:	2200      	movs	r2, #0
 800667c:	4b4f      	ldr	r3, [pc, #316]	@ (80067bc <atan+0x304>)
 800667e:	f7f9 fd73 	bl	8000168 <__aeabi_dsub>
 8006682:	2200      	movs	r2, #0
 8006684:	4606      	mov	r6, r0
 8006686:	460f      	mov	r7, r1
 8006688:	4620      	mov	r0, r4
 800668a:	4629      	mov	r1, r5
 800668c:	4b4b      	ldr	r3, [pc, #300]	@ (80067bc <atan+0x304>)
 800668e:	f7f9 fd6d 	bl	800016c <__adddf3>
 8006692:	4602      	mov	r2, r0
 8006694:	460b      	mov	r3, r1
 8006696:	4630      	mov	r0, r6
 8006698:	4639      	mov	r1, r7
 800669a:	f7fa f847 	bl	800072c <__aeabi_ddiv>
 800669e:	f04f 0a01 	mov.w	sl, #1
 80066a2:	4604      	mov	r4, r0
 80066a4:	460d      	mov	r5, r1
 80066a6:	e767      	b.n	8006578 <atan+0xc0>
 80066a8:	4b46      	ldr	r3, [pc, #280]	@ (80067c4 <atan+0x30c>)
 80066aa:	429e      	cmp	r6, r3
 80066ac:	d21a      	bcs.n	80066e4 <atan+0x22c>
 80066ae:	2200      	movs	r2, #0
 80066b0:	4b45      	ldr	r3, [pc, #276]	@ (80067c8 <atan+0x310>)
 80066b2:	f7f9 fd59 	bl	8000168 <__aeabi_dsub>
 80066b6:	2200      	movs	r2, #0
 80066b8:	4606      	mov	r6, r0
 80066ba:	460f      	mov	r7, r1
 80066bc:	4620      	mov	r0, r4
 80066be:	4629      	mov	r1, r5
 80066c0:	4b41      	ldr	r3, [pc, #260]	@ (80067c8 <atan+0x310>)
 80066c2:	f7f9 ff09 	bl	80004d8 <__aeabi_dmul>
 80066c6:	2200      	movs	r2, #0
 80066c8:	4b3c      	ldr	r3, [pc, #240]	@ (80067bc <atan+0x304>)
 80066ca:	f7f9 fd4f 	bl	800016c <__adddf3>
 80066ce:	4602      	mov	r2, r0
 80066d0:	460b      	mov	r3, r1
 80066d2:	4630      	mov	r0, r6
 80066d4:	4639      	mov	r1, r7
 80066d6:	f7fa f829 	bl	800072c <__aeabi_ddiv>
 80066da:	f04f 0a02 	mov.w	sl, #2
 80066de:	4604      	mov	r4, r0
 80066e0:	460d      	mov	r5, r1
 80066e2:	e749      	b.n	8006578 <atan+0xc0>
 80066e4:	4602      	mov	r2, r0
 80066e6:	460b      	mov	r3, r1
 80066e8:	2000      	movs	r0, #0
 80066ea:	4938      	ldr	r1, [pc, #224]	@ (80067cc <atan+0x314>)
 80066ec:	f7fa f81e 	bl	800072c <__aeabi_ddiv>
 80066f0:	f04f 0a03 	mov.w	sl, #3
 80066f4:	4604      	mov	r4, r0
 80066f6:	460d      	mov	r5, r1
 80066f8:	e73e      	b.n	8006578 <atan+0xc0>
 80066fa:	4b35      	ldr	r3, [pc, #212]	@ (80067d0 <atan+0x318>)
 80066fc:	4e35      	ldr	r6, [pc, #212]	@ (80067d4 <atan+0x31c>)
 80066fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006706:	f7f9 fd2f 	bl	8000168 <__aeabi_dsub>
 800670a:	4622      	mov	r2, r4
 800670c:	462b      	mov	r3, r5
 800670e:	f7f9 fd2b 	bl	8000168 <__aeabi_dsub>
 8006712:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006716:	4602      	mov	r2, r0
 8006718:	460b      	mov	r3, r1
 800671a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800671e:	f7f9 fd23 	bl	8000168 <__aeabi_dsub>
 8006722:	f1bb 0f00 	cmp.w	fp, #0
 8006726:	4604      	mov	r4, r0
 8006728:	460d      	mov	r5, r1
 800672a:	f6bf aee4 	bge.w	80064f6 <atan+0x3e>
 800672e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006732:	461d      	mov	r5, r3
 8006734:	e6df      	b.n	80064f6 <atan+0x3e>
 8006736:	a51c      	add	r5, pc, #112	@ (adr r5, 80067a8 <atan+0x2f0>)
 8006738:	e9d5 4500 	ldrd	r4, r5, [r5]
 800673c:	e6db      	b.n	80064f6 <atan+0x3e>
 800673e:	bf00      	nop
 8006740:	54442d18 	.word	0x54442d18
 8006744:	3ff921fb 	.word	0x3ff921fb
 8006748:	8800759c 	.word	0x8800759c
 800674c:	7e37e43c 	.word	0x7e37e43c
 8006750:	e322da11 	.word	0xe322da11
 8006754:	3f90ad3a 	.word	0x3f90ad3a
 8006758:	24760deb 	.word	0x24760deb
 800675c:	3fa97b4b 	.word	0x3fa97b4b
 8006760:	a0d03d51 	.word	0xa0d03d51
 8006764:	3fb10d66 	.word	0x3fb10d66
 8006768:	c54c206e 	.word	0xc54c206e
 800676c:	3fb745cd 	.word	0x3fb745cd
 8006770:	920083ff 	.word	0x920083ff
 8006774:	3fc24924 	.word	0x3fc24924
 8006778:	5555550d 	.word	0x5555550d
 800677c:	3fd55555 	.word	0x3fd55555
 8006780:	2c6a6c2f 	.word	0x2c6a6c2f
 8006784:	bfa2b444 	.word	0xbfa2b444
 8006788:	52defd9a 	.word	0x52defd9a
 800678c:	3fadde2d 	.word	0x3fadde2d
 8006790:	af749a6d 	.word	0xaf749a6d
 8006794:	3fb3b0f2 	.word	0x3fb3b0f2
 8006798:	fe231671 	.word	0xfe231671
 800679c:	3fbc71c6 	.word	0x3fbc71c6
 80067a0:	9998ebc4 	.word	0x9998ebc4
 80067a4:	3fc99999 	.word	0x3fc99999
 80067a8:	54442d18 	.word	0x54442d18
 80067ac:	bff921fb 	.word	0xbff921fb
 80067b0:	440fffff 	.word	0x440fffff
 80067b4:	7ff00000 	.word	0x7ff00000
 80067b8:	3fdbffff 	.word	0x3fdbffff
 80067bc:	3ff00000 	.word	0x3ff00000
 80067c0:	3ff2ffff 	.word	0x3ff2ffff
 80067c4:	40038000 	.word	0x40038000
 80067c8:	3ff80000 	.word	0x3ff80000
 80067cc:	bff00000 	.word	0xbff00000
 80067d0:	08006f38 	.word	0x08006f38
 80067d4:	08006f58 	.word	0x08006f58

080067d8 <fabs>:
 80067d8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80067dc:	4619      	mov	r1, r3
 80067de:	4770      	bx	lr

080067e0 <__ieee754_sqrt>:
 80067e0:	4a65      	ldr	r2, [pc, #404]	@ (8006978 <__ieee754_sqrt+0x198>)
 80067e2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e6:	438a      	bics	r2, r1
 80067e8:	4606      	mov	r6, r0
 80067ea:	460f      	mov	r7, r1
 80067ec:	460b      	mov	r3, r1
 80067ee:	4604      	mov	r4, r0
 80067f0:	d10e      	bne.n	8006810 <__ieee754_sqrt+0x30>
 80067f2:	4602      	mov	r2, r0
 80067f4:	f7f9 fe70 	bl	80004d8 <__aeabi_dmul>
 80067f8:	4602      	mov	r2, r0
 80067fa:	460b      	mov	r3, r1
 80067fc:	4630      	mov	r0, r6
 80067fe:	4639      	mov	r1, r7
 8006800:	f7f9 fcb4 	bl	800016c <__adddf3>
 8006804:	4606      	mov	r6, r0
 8006806:	460f      	mov	r7, r1
 8006808:	4630      	mov	r0, r6
 800680a:	4639      	mov	r1, r7
 800680c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006810:	2900      	cmp	r1, #0
 8006812:	dc0c      	bgt.n	800682e <__ieee754_sqrt+0x4e>
 8006814:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8006818:	4302      	orrs	r2, r0
 800681a:	d0f5      	beq.n	8006808 <__ieee754_sqrt+0x28>
 800681c:	b189      	cbz	r1, 8006842 <__ieee754_sqrt+0x62>
 800681e:	4602      	mov	r2, r0
 8006820:	f7f9 fca2 	bl	8000168 <__aeabi_dsub>
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	f7f9 ff80 	bl	800072c <__aeabi_ddiv>
 800682c:	e7ea      	b.n	8006804 <__ieee754_sqrt+0x24>
 800682e:	150a      	asrs	r2, r1, #20
 8006830:	d115      	bne.n	800685e <__ieee754_sqrt+0x7e>
 8006832:	2100      	movs	r1, #0
 8006834:	e009      	b.n	800684a <__ieee754_sqrt+0x6a>
 8006836:	0ae3      	lsrs	r3, r4, #11
 8006838:	3a15      	subs	r2, #21
 800683a:	0564      	lsls	r4, r4, #21
 800683c:	2b00      	cmp	r3, #0
 800683e:	d0fa      	beq.n	8006836 <__ieee754_sqrt+0x56>
 8006840:	e7f7      	b.n	8006832 <__ieee754_sqrt+0x52>
 8006842:	460a      	mov	r2, r1
 8006844:	e7fa      	b.n	800683c <__ieee754_sqrt+0x5c>
 8006846:	005b      	lsls	r3, r3, #1
 8006848:	3101      	adds	r1, #1
 800684a:	02d8      	lsls	r0, r3, #11
 800684c:	d5fb      	bpl.n	8006846 <__ieee754_sqrt+0x66>
 800684e:	1e48      	subs	r0, r1, #1
 8006850:	1a12      	subs	r2, r2, r0
 8006852:	f1c1 0020 	rsb	r0, r1, #32
 8006856:	fa24 f000 	lsr.w	r0, r4, r0
 800685a:	4303      	orrs	r3, r0
 800685c:	408c      	lsls	r4, r1
 800685e:	2700      	movs	r7, #0
 8006860:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 8006864:	2116      	movs	r1, #22
 8006866:	07d2      	lsls	r2, r2, #31
 8006868:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800686c:	463a      	mov	r2, r7
 800686e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006872:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006876:	bf5c      	itt	pl
 8006878:	005b      	lslpl	r3, r3, #1
 800687a:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800687e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006882:	bf58      	it	pl
 8006884:	0064      	lslpl	r4, r4, #1
 8006886:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800688a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800688e:	0064      	lsls	r4, r4, #1
 8006890:	1815      	adds	r5, r2, r0
 8006892:	429d      	cmp	r5, r3
 8006894:	bfde      	ittt	le
 8006896:	182a      	addle	r2, r5, r0
 8006898:	1b5b      	suble	r3, r3, r5
 800689a:	183f      	addle	r7, r7, r0
 800689c:	0fe5      	lsrs	r5, r4, #31
 800689e:	3901      	subs	r1, #1
 80068a0:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80068a4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80068a8:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80068ac:	d1f0      	bne.n	8006890 <__ieee754_sqrt+0xb0>
 80068ae:	460d      	mov	r5, r1
 80068b0:	2620      	movs	r6, #32
 80068b2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80068b6:	4293      	cmp	r3, r2
 80068b8:	eb00 0c01 	add.w	ip, r0, r1
 80068bc:	dc02      	bgt.n	80068c4 <__ieee754_sqrt+0xe4>
 80068be:	d113      	bne.n	80068e8 <__ieee754_sqrt+0x108>
 80068c0:	45a4      	cmp	ip, r4
 80068c2:	d811      	bhi.n	80068e8 <__ieee754_sqrt+0x108>
 80068c4:	f1bc 0f00 	cmp.w	ip, #0
 80068c8:	eb0c 0100 	add.w	r1, ip, r0
 80068cc:	da3e      	bge.n	800694c <__ieee754_sqrt+0x16c>
 80068ce:	2900      	cmp	r1, #0
 80068d0:	db3c      	blt.n	800694c <__ieee754_sqrt+0x16c>
 80068d2:	f102 0e01 	add.w	lr, r2, #1
 80068d6:	1a9b      	subs	r3, r3, r2
 80068d8:	4672      	mov	r2, lr
 80068da:	45a4      	cmp	ip, r4
 80068dc:	bf88      	it	hi
 80068de:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80068e2:	eba4 040c 	sub.w	r4, r4, ip
 80068e6:	4405      	add	r5, r0
 80068e8:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80068ec:	3e01      	subs	r6, #1
 80068ee:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80068f2:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80068f6:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80068fa:	d1dc      	bne.n	80068b6 <__ieee754_sqrt+0xd6>
 80068fc:	431c      	orrs	r4, r3
 80068fe:	d01a      	beq.n	8006936 <__ieee754_sqrt+0x156>
 8006900:	4c1e      	ldr	r4, [pc, #120]	@ (800697c <__ieee754_sqrt+0x19c>)
 8006902:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8006980 <__ieee754_sqrt+0x1a0>
 8006906:	e9d4 0100 	ldrd	r0, r1, [r4]
 800690a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800690e:	f7f9 fc2b 	bl	8000168 <__aeabi_dsub>
 8006912:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8006916:	4602      	mov	r2, r0
 8006918:	460b      	mov	r3, r1
 800691a:	4650      	mov	r0, sl
 800691c:	4659      	mov	r1, fp
 800691e:	f7fa f857 	bl	80009d0 <__aeabi_dcmple>
 8006922:	b140      	cbz	r0, 8006936 <__ieee754_sqrt+0x156>
 8006924:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006928:	e9d9 2300 	ldrd	r2, r3, [r9]
 800692c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006930:	d10e      	bne.n	8006950 <__ieee754_sqrt+0x170>
 8006932:	4635      	mov	r5, r6
 8006934:	3701      	adds	r7, #1
 8006936:	107b      	asrs	r3, r7, #1
 8006938:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800693c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8006940:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 8006944:	086b      	lsrs	r3, r5, #1
 8006946:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 800694a:	e75b      	b.n	8006804 <__ieee754_sqrt+0x24>
 800694c:	4696      	mov	lr, r2
 800694e:	e7c2      	b.n	80068d6 <__ieee754_sqrt+0xf6>
 8006950:	f7f9 fc0c 	bl	800016c <__adddf3>
 8006954:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8006958:	4602      	mov	r2, r0
 800695a:	460b      	mov	r3, r1
 800695c:	4650      	mov	r0, sl
 800695e:	4659      	mov	r1, fp
 8006960:	f7fa f82c 	bl	80009bc <__aeabi_dcmplt>
 8006964:	b120      	cbz	r0, 8006970 <__ieee754_sqrt+0x190>
 8006966:	1cab      	adds	r3, r5, #2
 8006968:	bf08      	it	eq
 800696a:	3701      	addeq	r7, #1
 800696c:	3502      	adds	r5, #2
 800696e:	e7e2      	b.n	8006936 <__ieee754_sqrt+0x156>
 8006970:	1c6b      	adds	r3, r5, #1
 8006972:	f023 0501 	bic.w	r5, r3, #1
 8006976:	e7de      	b.n	8006936 <__ieee754_sqrt+0x156>
 8006978:	7ff00000 	.word	0x7ff00000
 800697c:	08006f80 	.word	0x08006f80
 8006980:	08006f78 	.word	0x08006f78
 8006984:	00000000 	.word	0x00000000

08006988 <__ieee754_atan2>:
 8006988:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800698c:	4617      	mov	r7, r2
 800698e:	4690      	mov	r8, r2
 8006990:	4699      	mov	r9, r3
 8006992:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006996:	427b      	negs	r3, r7
 8006998:	f8df a184 	ldr.w	sl, [pc, #388]	@ 8006b20 <__ieee754_atan2+0x198>
 800699c:	433b      	orrs	r3, r7
 800699e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80069a2:	4553      	cmp	r3, sl
 80069a4:	4604      	mov	r4, r0
 80069a6:	460d      	mov	r5, r1
 80069a8:	d809      	bhi.n	80069be <__ieee754_atan2+0x36>
 80069aa:	4246      	negs	r6, r0
 80069ac:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80069b0:	4306      	orrs	r6, r0
 80069b2:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 80069b6:	4556      	cmp	r6, sl
 80069b8:	468e      	mov	lr, r1
 80069ba:	4683      	mov	fp, r0
 80069bc:	d908      	bls.n	80069d0 <__ieee754_atan2+0x48>
 80069be:	4642      	mov	r2, r8
 80069c0:	464b      	mov	r3, r9
 80069c2:	4620      	mov	r0, r4
 80069c4:	4629      	mov	r1, r5
 80069c6:	f7f9 fbd1 	bl	800016c <__adddf3>
 80069ca:	4604      	mov	r4, r0
 80069cc:	460d      	mov	r5, r1
 80069ce:	e016      	b.n	80069fe <__ieee754_atan2+0x76>
 80069d0:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 80069d4:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 80069d8:	433e      	orrs	r6, r7
 80069da:	d103      	bne.n	80069e4 <__ieee754_atan2+0x5c>
 80069dc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e0:	f7ff bd6a 	b.w	80064b8 <atan>
 80069e4:	ea4f 76a9 	mov.w	r6, r9, asr #30
 80069e8:	f006 0602 	and.w	r6, r6, #2
 80069ec:	ea53 0b0b 	orrs.w	fp, r3, fp
 80069f0:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 80069f4:	d107      	bne.n	8006a06 <__ieee754_atan2+0x7e>
 80069f6:	2e02      	cmp	r6, #2
 80069f8:	d064      	beq.n	8006ac4 <__ieee754_atan2+0x13c>
 80069fa:	2e03      	cmp	r6, #3
 80069fc:	d066      	beq.n	8006acc <__ieee754_atan2+0x144>
 80069fe:	4620      	mov	r0, r4
 8006a00:	4629      	mov	r1, r5
 8006a02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a06:	4317      	orrs	r7, r2
 8006a08:	d106      	bne.n	8006a18 <__ieee754_atan2+0x90>
 8006a0a:	f1be 0f00 	cmp.w	lr, #0
 8006a0e:	db68      	blt.n	8006ae2 <__ieee754_atan2+0x15a>
 8006a10:	a537      	add	r5, pc, #220	@ (adr r5, 8006af0 <__ieee754_atan2+0x168>)
 8006a12:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006a16:	e7f2      	b.n	80069fe <__ieee754_atan2+0x76>
 8006a18:	4552      	cmp	r2, sl
 8006a1a:	d10f      	bne.n	8006a3c <__ieee754_atan2+0xb4>
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	f106 36ff 	add.w	r6, r6, #4294967295
 8006a22:	d107      	bne.n	8006a34 <__ieee754_atan2+0xac>
 8006a24:	2e02      	cmp	r6, #2
 8006a26:	d855      	bhi.n	8006ad4 <__ieee754_atan2+0x14c>
 8006a28:	4b3e      	ldr	r3, [pc, #248]	@ (8006b24 <__ieee754_atan2+0x19c>)
 8006a2a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006a2e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006a32:	e7e4      	b.n	80069fe <__ieee754_atan2+0x76>
 8006a34:	2e02      	cmp	r6, #2
 8006a36:	d851      	bhi.n	8006adc <__ieee754_atan2+0x154>
 8006a38:	4b3b      	ldr	r3, [pc, #236]	@ (8006b28 <__ieee754_atan2+0x1a0>)
 8006a3a:	e7f6      	b.n	8006a2a <__ieee754_atan2+0xa2>
 8006a3c:	4553      	cmp	r3, sl
 8006a3e:	d0e4      	beq.n	8006a0a <__ieee754_atan2+0x82>
 8006a40:	1a9b      	subs	r3, r3, r2
 8006a42:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8006a46:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006a4a:	da21      	bge.n	8006a90 <__ieee754_atan2+0x108>
 8006a4c:	f1b9 0f00 	cmp.w	r9, #0
 8006a50:	da01      	bge.n	8006a56 <__ieee754_atan2+0xce>
 8006a52:	323c      	adds	r2, #60	@ 0x3c
 8006a54:	db20      	blt.n	8006a98 <__ieee754_atan2+0x110>
 8006a56:	4642      	mov	r2, r8
 8006a58:	464b      	mov	r3, r9
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	4629      	mov	r1, r5
 8006a5e:	f7f9 fe65 	bl	800072c <__aeabi_ddiv>
 8006a62:	f7ff feb9 	bl	80067d8 <fabs>
 8006a66:	f7ff fd27 	bl	80064b8 <atan>
 8006a6a:	4604      	mov	r4, r0
 8006a6c:	460d      	mov	r5, r1
 8006a6e:	2e01      	cmp	r6, #1
 8006a70:	d015      	beq.n	8006a9e <__ieee754_atan2+0x116>
 8006a72:	2e02      	cmp	r6, #2
 8006a74:	d017      	beq.n	8006aa6 <__ieee754_atan2+0x11e>
 8006a76:	2e00      	cmp	r6, #0
 8006a78:	d0c1      	beq.n	80069fe <__ieee754_atan2+0x76>
 8006a7a:	a31f      	add	r3, pc, #124	@ (adr r3, 8006af8 <__ieee754_atan2+0x170>)
 8006a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a80:	4620      	mov	r0, r4
 8006a82:	4629      	mov	r1, r5
 8006a84:	f7f9 fb70 	bl	8000168 <__aeabi_dsub>
 8006a88:	a31d      	add	r3, pc, #116	@ (adr r3, 8006b00 <__ieee754_atan2+0x178>)
 8006a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8e:	e016      	b.n	8006abe <__ieee754_atan2+0x136>
 8006a90:	a517      	add	r5, pc, #92	@ (adr r5, 8006af0 <__ieee754_atan2+0x168>)
 8006a92:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006a96:	e7ea      	b.n	8006a6e <__ieee754_atan2+0xe6>
 8006a98:	2400      	movs	r4, #0
 8006a9a:	2500      	movs	r5, #0
 8006a9c:	e7e7      	b.n	8006a6e <__ieee754_atan2+0xe6>
 8006a9e:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8006aa2:	461d      	mov	r5, r3
 8006aa4:	e7ab      	b.n	80069fe <__ieee754_atan2+0x76>
 8006aa6:	a314      	add	r3, pc, #80	@ (adr r3, 8006af8 <__ieee754_atan2+0x170>)
 8006aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aac:	4620      	mov	r0, r4
 8006aae:	4629      	mov	r1, r5
 8006ab0:	f7f9 fb5a 	bl	8000168 <__aeabi_dsub>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	a111      	add	r1, pc, #68	@ (adr r1, 8006b00 <__ieee754_atan2+0x178>)
 8006aba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006abe:	f7f9 fb53 	bl	8000168 <__aeabi_dsub>
 8006ac2:	e782      	b.n	80069ca <__ieee754_atan2+0x42>
 8006ac4:	a50e      	add	r5, pc, #56	@ (adr r5, 8006b00 <__ieee754_atan2+0x178>)
 8006ac6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006aca:	e798      	b.n	80069fe <__ieee754_atan2+0x76>
 8006acc:	a50e      	add	r5, pc, #56	@ (adr r5, 8006b08 <__ieee754_atan2+0x180>)
 8006ace:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006ad2:	e794      	b.n	80069fe <__ieee754_atan2+0x76>
 8006ad4:	a50e      	add	r5, pc, #56	@ (adr r5, 8006b10 <__ieee754_atan2+0x188>)
 8006ad6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006ada:	e790      	b.n	80069fe <__ieee754_atan2+0x76>
 8006adc:	2400      	movs	r4, #0
 8006ade:	2500      	movs	r5, #0
 8006ae0:	e78d      	b.n	80069fe <__ieee754_atan2+0x76>
 8006ae2:	a50d      	add	r5, pc, #52	@ (adr r5, 8006b18 <__ieee754_atan2+0x190>)
 8006ae4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006ae8:	e789      	b.n	80069fe <__ieee754_atan2+0x76>
 8006aea:	bf00      	nop
 8006aec:	f3af 8000 	nop.w
 8006af0:	54442d18 	.word	0x54442d18
 8006af4:	3ff921fb 	.word	0x3ff921fb
 8006af8:	33145c07 	.word	0x33145c07
 8006afc:	3ca1a626 	.word	0x3ca1a626
 8006b00:	54442d18 	.word	0x54442d18
 8006b04:	400921fb 	.word	0x400921fb
 8006b08:	54442d18 	.word	0x54442d18
 8006b0c:	c00921fb 	.word	0xc00921fb
 8006b10:	54442d18 	.word	0x54442d18
 8006b14:	3fe921fb 	.word	0x3fe921fb
 8006b18:	54442d18 	.word	0x54442d18
 8006b1c:	bff921fb 	.word	0xbff921fb
 8006b20:	7ff00000 	.word	0x7ff00000
 8006b24:	08006fa0 	.word	0x08006fa0
 8006b28:	08006f88 	.word	0x08006f88

08006b2c <_init>:
 8006b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b2e:	bf00      	nop
 8006b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b32:	bc08      	pop	{r3}
 8006b34:	469e      	mov	lr, r3
 8006b36:	4770      	bx	lr

08006b38 <_fini>:
 8006b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b3a:	bf00      	nop
 8006b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b3e:	bc08      	pop	{r3}
 8006b40:	469e      	mov	lr, r3
 8006b42:	4770      	bx	lr
